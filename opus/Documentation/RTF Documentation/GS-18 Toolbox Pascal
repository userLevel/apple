{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset77\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 1f1803b4fbbc00027258}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 1ab803b51ac000027258}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose f5400996fe600003b27c}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f22\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Venice;}{\f23\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}London;}{\f24\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Athens;}{\f25\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}San Francisco;}{\f26\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Toronto;}{\f27\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Cairo;}{\f28\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Los Angeles;}{\f29\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Dingbats;}{\f30\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Bookman;}{\f31\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Helvetica Narrow;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f33\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Chancery;}{\f34\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mobile;}{\f35\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Avant Garde;}{\f36\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}New Century Schoolbook;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset77\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 1f1803b4fbbc00027258}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 1ab803b51ac000027258}Courier;}{\f7\fswiss\fcharset77\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose f5400996fe600003b27c}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f22\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Venice;}{\f23\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}London;}{\f24\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Athens;}{\f25\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}San Francisco;}{\f26\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Toronto;}{\f27\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Cairo;}{\f28\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Los Angeles;}{\f29\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Dingbats;}{\f30\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Bookman;}{\f31\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Helvetica Narrow;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f33\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Zapf Chancery;}{\f34\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Mobile;}{\f35\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}Avant Garde;}{\f36\fnil\fcharset77\fprq0{\*\panose 00000000000000000000}New Century Schoolbook;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \f12\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li1440\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 3;}{\s16\li720\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 2;}{\s17\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 1;}{\s18\li360\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 2;}{\s19\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 1;}{\s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext20 footer;}{\s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext21 header;}{\*\cs22 \additive \fs16\up6 \sbasedon10 footnote reference;}{\s23\widctlpar\adjustright \f12\fs20\cgrid \sbasedon0 \snext23 footnote text;}{\s24\widctlpar\adjustright \f6\fs20\cgrid \sbasedon0 \snext24 Code;}{\*\cs25 \additive \super \sbasedon10 endnote reference;}}{\*\revtbl {Unknown;}}{\info{\title Toolbox Programming}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy10\hr13\min32}{\revtim\yr2000\mo10\dy10\hr13\min32}{\printim\yr2000\mo10\dy10\hr13\min28}{\version2}{\edmins4}{\nofpages478}{\nofwords166913}{\nofchars951406}{\*\company Byte Works, Inc.}{\nofcharsws1168393}{\vern99}}\margl1440\margr1440 \facingp\widowctrl\ftnbj\aenddoc\hyphhotz0\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbkodd\pgnrestart\pgnlcrm\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs72 \par \par \par Toolbox Programming\par in\par Pascal\par \par \par \par }\pard \widctlpar\adjustright {\b\f4\fs36 \par \par \par \par }\pard \qc\widctlpar\adjustright {\b\f4\fs28 by Mike Westerfield\par \par Copyright 1992\par Byte Works, Inc.\par }\pard \widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\pgnlcrm\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 Table of Contents\par }\pard \widctlpar\adjustright {\f4 \par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 0 \endash  Before We Start\tab 1\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 About This Course\tab 1\par What You Should Already Know\tab 2\par What You Must Have\tab 2\par Other Useful Things\tab 3\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 1 \endash  Current Events\tab 5\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 5\par Starting the Tools\tab 5\par The Event Loop\tab 6\par The Event Record\tab 7\par Our First Executable Program\tab 10\par Keyboard Events\tab 11\par Mouse Events\tab 14\par Using Appendix A\tab 15\par Using the Toolbox Reference Manuals\tab 16\par Reading the Tool Interface Files\tab 17\par Summary\tab 18\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f  }}{\fldrslt {\f4 Lesson 2 \endash  What's on the Menu?\tab 19\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 19\par Setting Up A Menu Bar\tab 19\par Menu Events\tab 23\par Sample Program \endash  Quit\tab 25\par Keyboard Equivalents\tab 27\par Standard Keyboard Equivalents\tab 31\par TaskMaster\tab 32\par The Apple Menu\tab 35\par Supporting NDAs\tab 36\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Call FixAppleMenu\tab 36\par Use TaskMaster\tab 36\par The Standard Menu Items\tab 36\par The Minimal Tools\tab 37\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Customizing Your Menu Items\tab 38\par Changing Menu Items on the Fly\tab 40\par Changing the Text for a Menu Item\tab 42\par Other Things You Should Know About Menus\tab 43\par Summary\tab 44\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f  }}{\fldrslt {\f4 Lesson 3 \endash  Be Resourceful\tab 47\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 47\par What Are Resources?\tab 47\par Using Rez to Create a Menu Bar\tab 48\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 A Menu Bar Using Rez\tab 49\par How Rez Files are Typed\tab 51\par Using Constants\tab 54\par Compiling the Rez File\tab 57\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Using the Menu Bar Rez Created\tab 57\par Making Changes\tab 60\par Using a Script to Compile\tab 61\par Understanding Resource Description Files\tab 63\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Toolbox Resource Descriptions\tab 63\par Rez Types\tab 64\par Finding Out More About Rez\tab 65\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Resource Tools\tab 65\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Changing Resources\tab 65\par Programmer's CAD Tools\tab 66\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Summary\tab 67\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 4 \endash  Keep Alert!\tab 69\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 69\par Alerts Present Messages\tab 69\par Using an Alert for an About Box\tab 70\par The Frame Program\tab 71\par Alert Strings\tab 77\par Substitution Strings\tab 80\par Summary\tab 83\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 5 \endash  Why, Yes.  We Do Windows!\tab 85\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 85\par Defining Our Terms\tab 85\par Opening a Window\tab 86\par Closing a Window\tab 88\par Multiple Windows\tab 89\par Window Names\tab 92\par Drawing in a Window\tab 93\par Updating a Window\tab 95\par The Window Port and Coordinate Systems\tab 96\par Tricks With Update Events\tab 99\par Scrolling\tab 99\par Customizing Your Windows\tab 101\par Summary\tab 112\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 6 \endash  File I/O\tab 115\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 115\par SFO\tab 115\par The Open Dialog\tab 115\par The Role of Save and Save As...\tab 121\par The Save As... Dialog\tab 122\par A Comment About Ellipsis\tab 124\par Other Standard File Calls\tab 125\par Reading a File\tab 125\par Writing a File\tab 129\par Screen Dumps\tab 133\par Summary\tab 135\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 7 \endash  Move Over Guttenberg\tab 137\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 137\par How the Print Manager Works\tab 137\par Starting the Tools (Again)\tab 138\par Getting a Print Record\tab 140\par The Page Setup Dialog\tab 141\par The Print Dialog\tab 141\par Dimming the Menus\tab 142\par The Print Loop\tab 142\par A Few Tips and Tricks\tab 147\par Summary\tab 148\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 8 \endash  Thanks for the Memory\tab 149\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 149\par Memory on the Apple IIGS\tab 149\par Handles\tab 150\par Allocating Memory\tab 154\par Purgeable Memory\tab 156\par Finding Free Memory\tab 157\par Summary\tab 157\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 9 \endash  Drawing on the Front Side of the Screen\tab 159\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 159\par Super High Resolution Graphics\tab 159\par Setting the Pen Size\tab 165\par Pen Patterns\tab 166\par Pen Modes\tab 166\par Pen Masks\tab 168\par Drawing Shapes\tab 169\par Regions\tab 175\par GrafPorts\tab 178\par Summary\tab 179\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 10 \endash  Fonts\tab 181\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 181\par Defining Some Terms\tab 181\par Drawing Text\tab 183\par Colorful Text\tab 185\par Formatting Text\tab 186\par The Standard Character Set\tab 187\par Font Families\tab 188\par Font Sizes\tab 189\par Font Styles\tab 189\par Installing a Font\tab 190\par Choosing Fonts with ChooseFont\tab 191\par Choosing Fonts with Full Menus\tab 192\par Summary\tab 194\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 11 \endash  TextEdit\tab 195\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 195\par An Overview\tab 195\par Using TextEdit\tab 195\par Editing with TextEdit\tab 203\par Changing the Ruler\tab 204\par Changing Fonts\tab 205\par Loading and Saving\tab 208\par Printing\tab 210\par Did the Document Change?\tab 210\par Summary\tab 211\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 12 \endash  Scraps\tab 213\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 213\par The Scrap Manager\tab 213\par Scraps\tab 213\par Scrap Types\tab 214\par Multiple Scraps\tab 215\par The Scrap File\tab 215\par A Scrapbook Program\tab 215\par Summary\tab 217\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f  }}{\fldrslt {\f4 Lesson 13 \endash  Controls, Part 1\tab 219\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 219\par A Quick History Lesson\tab 219\par Control Records and Control Lists\tab 219\par Simple Buttons\tab 223\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Defining the Control\tab 223\par Using the Control\tab 225\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Colored Controls\tab 226\par Static Text\tab 228\par Radio Buttons\tab 230\par Check Boxes\tab 232\par Scroll Bars\tab 234\par The Grow Box\tab 239\par Summary\tab 240\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f  }}{\fldrslt {\f4 Lesson 14 \endash  Controls, Part 2\tab 241\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 241\par Rectangles\tab 241\par Thermometers\tab 242\par Icon Buttons\tab 244\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 A Typical Icon Button\tab 246\par Controlling the Outline\tab 247\par The Title\tab 247\par Icons and Icon Masks\tab 247\par Display Mode Bits\tab 248\par Inactive Icon Buttons\tab 249\par Creating Icons in the Real World\tab 249\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Pictures\tab 250\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Creating Pictures\tab 251\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 EditLine Items\tab 252\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Accessing Text\tab 253\par Cut, Copy, Paste and Clear\tab 254\par Passwords\tab 256\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 List Controls\tab 257\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Creating the List Control\tab 258\par Building a List\tab 259\par Sorting Lists\tab 261\par Custom Draw Procedures\tab 261\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Pop-up Menus\tab 263\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 The Size of the Control and Text Justification\tab 266\par Display Options\tab 266\par Detecting the Control State\tab 267\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Summary\tab 267\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 15 \endash  Meaningful Dialogs\tab 269\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 269\par Death of a Tool\tab 269\par Dialogs are Simple Windows with Controls\tab 269\par Creating a Dialog\tab 270\par Handling Events in a Modal Dialog\tab 270\par Modeless Dialogs\tab 274\par Summary\tab 275\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f  }}{\fldrslt {\f4 Lesson 16 \endash  Sound Off!\tab 277\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 277\par The Physics of Sound\tab 277\par Digitally Recorded Sound\tab 280\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 The Sound Tool Set\tab 280\par The Basic Sound Calls\tab 280\par Creating and Playing a Sound\tab 283\par Loading Sounds from Disk\tab 285\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Note Synthesizer\tab 286\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Instruments\tab 286\par The Instrument Record\tab 286\par ASIF Instrument Files\tab 287\par The 'WAVE' Chunk\tab 289\par The 'INST' Chunk\tab 291\par Some Practical Comments About Instrument Files\tab 291\par Changing the Sound Quality for an Instrument\tab 292\par Canned Parameters\tab 293\par Using the Note Synthesizer\tab 293\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Getting the Most from Instruments\tab 295\par The Sound Tools\tab 295\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 The Audio Compression and Expansion Tool Set\tab 295\par The Note Sequencer\tab 296\par The MIDI Tool Set\tab 296\par synthLAB\tab 296\par The Media Control Tool Set\tab 296\par Talking Tools\tab 297\par Sound Input\tab 297\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Summary\tab 297\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f  }}{\fldrslt {\f4 Lesson 17 \endash  Professional Polish\tab 299\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 299\par Finder Resources\tab 299\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 The rComment(1) Resource\tab 299\par The rComment(2) Resource\tab 300\par The rVersion Resource\tab 301\par The rBundle Resource\tab 303\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 The Desktop File\tab 307\par GS/OS Aware Bits\tab 310\par Formatting Disks\tab 310\par Opening and Printing Files on Entry\tab 310\par Summary\tab 312\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Lesson 18 \endash  New Desk Accessories\tab 313\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Goals for This Lesson\tab 313\par The Anatomy of an NDA\tab 313\par The Init Routine\tab 314\par The Open Routine\tab 315\par Using Resources in an NDA\tab 316\par The Close Routine\tab 317\par The Action Routine\tab 318\par Starting and Shutting Down Tools\tab 320\par Installing an NDA\tab 321\par Summary\tab 321\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f  }}{\fldrslt {\f4 Appendix A \endash  Abridged Toolbox Reference Manual\tab 323\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Control Manager\tab 323\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 DrawControls\tab 323\par FindTargetCtl\tab 323\par GetCtlHandleFromID\tab 323\par GetCtlID\tab 324\par GetCtlParams\tab 324\par GetCtlValue\tab 324\par GetLETextByID\tab 324\par SetCtlAction\tab 325\par SetCtlParams\tab 325\par SetLETextByID\tab 325\par SetCtlValue\tab 325\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Desk Manager\tab 325\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 FixAppleMenu\tab 326\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Event Manager\tab 326\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 GetMouse\tab 326\par GetNextEvent\tab 326\par StillDown\tab 328\par Event Manager Definitions\tab 329\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Font Manager\tab 330\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 ChooseFont\tab 330\par CountFonts\tab 330\par FamNum2ItemID\tab 330\par FixFontMenu\tab 331\par FMGetCurFID\tab 331\par ItemID2FamNum\tab 331\par Font Manager Definitions\tab 331\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 GS/OS\tab 332\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Path Names\tab 332\par File Types\tab 332\par CloseGS\tab 333\par CreateGS\tab 334\par DestroyGS\tab 336\par OpenGS\tab 337\par ReadGS\tab 339\par WriteGS\tab 340\par GS/OS Definitions\tab 340\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 LineEdit Tool Set\tab 340\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 LECopy\tab 341\par LECut\tab 341\par LEDelete\tab 341\par LEFromScrap\tab 341\par LEPaste\tab 341\par LEToScrap\tab 342\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 List Manager\tab 342\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 DrawMember2\tab 342\par NewList2\tab 342\par SortList2\tab 343\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Loader\tab 343\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 LGetPathname2\tab 343\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Memory Manager\tab 344\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 DisposeHandle\tab 344\par FindHandle\tab 344\par FreeMem\tab 344\par HLock\tab 344\par HUnlock\tab 344\par MaxBlock\tab 345\par NewHandle\tab 345\par RealFreeMem\tab 346\par SetHandleID\tab 346\par SetPurge\tab 346\par Memory Manager Definitions\tab 347\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Menu Manager\tab 347\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 CheckMItem\tab 347\par DisableMItem\tab 347\par DrawMenuBar\tab 347\par EnableMItem\tab 347\par FixMenuBar\tab 348\par GetMenuFlag\tab 348\par HiliteMenu\tab 348\par InsertMenu\tab 348\par MenuKey\tab 349\par MenuSelect\tab 349\par NewMenu\tab 349\par NewMenuBar2\tab 350\par SetMenuBar\tab 351\par SetMenuFlag\tab 351\par SetMItem\tab 352\par SetMItemStyle\tab 352\par SetSysBar\tab 352\par Menu Manager Definitions\tab 352\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Miscellaneous Tool Set\tab 353\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 ReadAsciiTime\tab 353\par SysBeep\tab 353\par SysFailMgr\tab 353\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Note Synthesizer\tab 354\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 AllNotesOff\tab 354\par AllocGen\tab 354\par NoteOff\tab 354\par NoteOn\tab 354\par Note Synthesizer Definitions\tab 355\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Print Manager\tab 355\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 PrCloseDoc\tab 355\par PrClosePage\tab 356\par PrDefault\tab 356\par PrError\tab 356\par PrJobDialog\tab 356\par PrOpenDoc\tab 357\par PrOpenPage\tab 357\par PrPicFile\tab 357\par PrStlDialog\tab 358\par PrValidate\tab 358\par Print Manager Definitions\tab 358\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 QuickDraw II\tab 359\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 LocInfo Records\tab 360\par Scan Line Control Byte\tab 360\par CharBounds\tab 360\par CharWidth\tab 360\par ClipRect\tab 361\par ClosePoly\tab 361\par CStringBounds\tab 361\par CStringWidth\tab 361\par DrawChar\tab 361\par DrawCString\tab 362\par DrawString\tab 362\par DrawText\tab 362\par EraseArc\tab 362\par EraseOval\tab 362\par ErasePoly\tab 363\par EraseRect\tab 363\par EraseRRect\tab 363\par FillArc\tab 363\par FillOval\tab 363\par FillPoly\tab 363\par FillRect\tab 364\par FillRRect\tab 364\par FrameArc\tab 364\par FrameOval\tab 364\par FramePoly\tab 364\par FrameRect\tab 364\par FrameRRect\tab 365\par GetColorEntry\tab 365\par GetColorTable\tab 365\par GetFontInfo\tab 365\par GetPort\tab 365\par GetPortRect\tab 365\par GetVisHandle\tab 366\par GlobalToLocal\tab 366\par InitCursor\tab 366\par InvertArc\tab 366\par InvertOval\tab 366\par InvertPoly\tab 366\par InvertRect\tab 367\par InvertRRect\tab 367\par KillPoly\tab 367\par LineTo\tab 367\par LocalToGlobal\tab 367\par MoveTo\tab 367\par OffsetPoly\tab 368\par OpenPoly\tab 368\par PaintArc\tab 368\par PaintOval\tab 368\par PaintPoly\tab 368\par PaintRect\tab 368\par PaintRRect\tab 369\par PenNormal\tab 369\par PPToPort\tab 369\par PtInRect\tab 369\par RectInRgn\tab 370\par SetAllSCBs\tab 370\par SetBackColor\tab 370\par SetColorEntry\tab 370\par SetColorTable\tab 370\par SetForeColor\tab 371\par SetPenMask\tab 371\par SetPenMode\tab 371\par SetPenPat\tab 372\par SetPenSize\tab 372\par SetPort\tab 372\par SetSCB\tab 372\par SetSolidPenPat\tab 373\par SetTextMode\tab 373\par StringBounds\tab 373\par StringWidth\tab 374\par TextBounds\tab 374\par TextWidth\tab 374\par QuickDraw II Definitions\tab 374\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 QuickDraw II Auxiliary\tab 375\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 DrawPicture\tab 375\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Resource Manager\tab 375\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 AddResource\tab 375\par CloseResourceFile\tab 376\par LoadResource\tab 376\par OpenResourceFile\tab 377\par ReleaseResource\tab 377\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Scrap Manager\tab 377\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 GetIndScrap\tab 378\par GetScrapHandle\tab 378\par GetScrapSize\tab 378\par LoadScrap\tab 378\par PutScrap\tab 379\par UnloadScrap\tab 379\par ZeroScrap\tab 379\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Sound Tool Set\tab 379\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 FFSoundDoneStatus\tab 379\par FFStartSound\tab 380\par FFStopSound\tab 380\par WriteRamBlock\tab 380\par Sound Tool Set Definitions\tab 381\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Standard File Operations Tool Set\tab 381\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Reply Records\tab 381\par SFGetFile2\tab 382\par SFPutFile2\tab 383\par Standard File Operations Tool Set Definitions\tab 384\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 TextEdit Tool Set\tab 384\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 TEGetRuler\tab 384\par TEGetSelection\tab 385\par TEGetSelectionStyle\tab 385\par TEGetText\tab 386\par TEPaintText\tab 386\par TESetRuler\tab 387\par TESetSelection\tab 387\par TESetText\tab 387\par TEStyleChange\tab 388\par TextEdit Tool Set Definitions\tab 388\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 ToolLocator\tab 389\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 MessageCenter\tab 389\par ShutDownTools\tab 390\par StartUpTools\tab 390\par TextEdit Tool Set Definitions\tab 390\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Window Manager\tab 391\par }\pard\plain \s15\li1440\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Window Parameters\tab 391\par Window Color Tables\tab 394\par AlertWindow\tab 395\par BeginUpdate\tab 398\par BringToFront\tab 398\par CloseWindow\tab 398\par DoModalWindow\tab 398\par EndUpdate\tab 400\par FindWindow\tab 400\par FrontWindow\tab 400\par GetContentOrigin\tab 401\par GetNextWindow\tab 401\par HandleDiskInsert\tab 401\par HideWindow\tab 401\par InvalRect\tab 401\par NewWindow\tab 402\par NewWindow2\tab 402\par SetContentOrigin\tab 403\par SetDataSize\tab 403\par SetPage\tab 403\par SetScroll\tab 404\par SetSysWindow\tab 404\par SetWTitle\tab 404\par ShowWindow\tab 404\par TaskMaster\tab 404\par TaskMasterDA\tab 406\par Window Manager Definitions\tab 406\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Tool and GS/OS Errors\tab 407\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Appendix B \endash  Resources Used in This Course\tab 417\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Resource Attributes\tab 417\par rAlertString\tab 417\par rBundle\tab 418\par rComment\tab 420\par rControlList\tab 421\par rControlTemplate\tab 421\par rIcon\tab 421\par rMenu\tab 422\par rMenuBar\tab 423\par rMenuItem\tab 424\par rPicture\tab 425\par rPString\tab 426\par rTextForLETextBox2\tab 426\par rToolStartup\tab 426\par rVersion\tab 427\par rWindColor\tab 429\par rWindParam1\tab 429\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Appendix C \endash  Where to Go for More Information\tab 431\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 Apple IIGS Toolbox Reference Manuals\tab 431\par Programmer's Reference for System 6.0\tab 432\par GS/OS Technical Reference Manual\tab 432\par Programmer's Introduction to the Apple IIGS\tab 432\par Firmware Reference Manual\tab 433\par Hardware Reference Manual\tab 433\par Apple Human Interface Guidelines\tab 433\par Technical Notes\tab 433\par Resource Central\tab 434\par Apple Sponsored Developer Programs and Licensing\tab 434\par Online Services\tab 435\par User's Groups\tab 436\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-2"  }}{\fldrslt {\f4 Appendix D \endash  Tips for ORCA/Pascal\tab 437\par }\pard\plain \s16\li720\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\f4 MoreRecent\tab 437\par Installing Rez\tab 437\par Using Small Systems\tab 438\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\par }\pard\plain \s17\widctlpar\tqr\tx9360\adjustright \f12\cgrid {\field{\*\fldinst {\f4  TOC \\f \\l "1-1"  }}{\fldrslt {\f4 Index\tab 439\par }\pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \sect }\sectd \sbkodd\pgnrestart\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 0 - Before We Start}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par Lesson 0 \endash  Before We Start}{\pard\plain \qc\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 0 \endash  Before We Start\tcl1}}}{\b\f4\fs36 \par \par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs28 About This Course}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 About This Course\tcl2}}}{\b\f4\fs28 \par }\pard \fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This is a self-study course designed to help you learn to program the Apple IIGS toolbox in Pascal.  Before we get started, I want to give you the standard spiel about how you should use this course if you want to get anything out of it other than spending some time at the computer instead of the local bar.  Of course, a lot of books you have read in the past started out with just this sort of advice, and by now you are probably practiced at skipping ahead.  Before you do though, could you stop to consider one minor point?  If I don't know how to help you learn to program the toolbox, why did you buy this book?  And if you aren't going to take the best advice I can give you, why bother spending time here when you could be watching baseball at the local pub?  In some ways, this is the most important part of the whole book!\par Programming is a skill.  Programming is not an abstract though process, nor is it an inborn talent, nor is it something only kids born with video games in their crib can master.  Early experience doesn't hurt, you understand, but it also isn't essential.  Programming is a skill, like riding a bike, driving a car, talking, playing tennis and reading.  Like all skilled activities, to be good at programming, you have to learn a few fundamentals and practice a lot.  You have to practice while you learn the fundamentals, practice some more after learning the basics to firm up what you learned, practice still more to get good at programming, and keep on practicing to stay sharp.  If you stop programming, even for a month, you will notice the difference when your fingers are again permitted to caress the keyboard.\par This course is designed with this fundamental truth in mind.  I've put all sorts of sample programs in this course.  All of them are also on the disks that comes with the course, so you don't have to type them in.  You should run each and every one of these sample programs.  I've also peppered the course with problems.  Each and every lesson after this one has some real programming problems at the end of some of the sections.  I'm not going to waste your time with the easy to grade make-work questions you find in a lot of fluff courses, like listing the seven kinds of controls.  Are there seven?  Who cares!  Instead, the problems are real programming problems, problems you should be able to solve in the form of a working program after reading the lesson.  If you can't, read the lesson again!\par A few years ago (OK, maybe more than a few) I was at the University of Denver slugging away at a master's degree in physics.  I took two courses there that are forever burned in my neural network.  The first was a course that reviewed undergraduate classical mechanics and electricity and magnetism, two very tough one-year courses.  The second was a year long graduate quantum mechanics course.  In both courses, I had the good fortune to be taught by Dr. Tuttle, the hardest, toughest, most slave driving professor I've ever had \endash  and also the best.  Dr. Tuttle assigned weekly homework problems which took us an average of 15 hours to finish.  If we got stuck, which happened frequently, we were invited to stop by her office anytime we wanted and borrow a chunk of her chalk board.  There we would struggle for minutes or even hours until we could work the problem.  When we left, there was only one condition.  The only thing we took with us was chalk dust and a better trained neural network.  Once we left, we scurried back to the lab to rework the problem before we forgot what to do.  But do you know what?  It worked.  We }{\i\f4 remembered}{\f4  those lessons!\par Sometimes you are just going to get stuck on a problem in this course.  That's OK, it happens to everyone.  As long as you're getting stuck once or twice a lesson, don't sweat it.  You can find solutions to all of the problems on the disk.  I hope your goal is to learn toolbox programming, though, not to learn how to read my solutions.  Once you finish looking at the solution, close the file and start over.  Write your own version of the solution.  Sure, it's hard.  Sure, you think you will remember what you read about.  But remember what I said a moment ago?  Programming is a skill.  You really won't learn much by just reading my solutions.  You will, however, learn quite a bit by writing a program yourself.\par If you are good enough to work a problem without looking at my solution, good for you.  Look at the solution anyway.  This may seem like a waste of time, but it really isn't.  Any programmer, no matter how much he knows or how experienced he gets, will learn something new by reading a program written by someone else.  You should take advantage of all of that source code, reading it carefully to see what tricks you can pick up.\par To summarize, here's what you should do:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Read each lesson, running the sample programs as you go.\par 2.\tab Try working each problem on your own.  If you don't know where to start, or can't quite get it to work, go back and reread the lesson.  Try very hard to solve the problem on your own.\par 3.\tab If you get stuck, look at my solution.  Study it carefully.  Then close the file, and without looking at it again, write your own solution to the problem.\par 4.\tab If you solve a problem without looking at the solution, that's great.  Look at the solution anyway to see what you can learn from it.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 What You Should Already Know}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 What You Should Already Know\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This is a great first course in programming the toolbox, but programming the toolbox is not the first thing you should try to do on your computer.  You probably know that, but I thought I should take a moment to tell you what I'm assuming you already know.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 bad blocks}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 backup copies}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 First, you should be pretty comfortable with your computer.  You should already know how to do basic things like format disks, check for bad blocks, make backup copies, and so forth.  If you don't you can find the information you need in the book that came with your computer.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 printing}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You also need to know how to use desktop programs.  I'm assuming you already know how to use a menu bar, how to load and save files, how to print, and how to manipulate windows and dialogs.  Again, if you're new to the Apple IIGS, and trying to come up to speed in a hurry, the book Apple sent with your computer is a good place to start.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Pascal}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Finally, and most important, you need to know the Pascal language.  Learning the toolbox is a big job.  It's not insurmountable, but it is a big job.  Learning Pascal is also a big job.  Put these two big jobs together and try to learn Pascal and the toolbox at the same time, and you more than double the chance you will fail.  If you don't know Pascal, stop.  Put this book down.  Get a good beginner book that teaches you Pascal, and learn the language first.  When you finish, come back to this book.  You can skimp on prior knowledge about the Apple IIGS and its desktop interface, but you just can't use this course effectively unless you are already comfortable with Pascal.\par Of course, you may wonder just how comfortable you really need to be.  Basically, you should have a good working knowledge of the language, through records and pointers.  The toolbox relies very heavily on records and pointers, so you'll see a lot of them.  You should also be familiar with linked lists and recursion.  You'll see both of these in this course, although you don't have to be an expert at either one.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 What You Must Have}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 What You Must Have\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Other than patience, time and some prior knowledge, you need three things to work all of the problems in this course.  These three things are the computer, this book, and a Pascal compiler.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 hardware requirements}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 requirements\:hardware}}}{\v\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 memory requirements}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 requirements\:memory}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Your Apple IIGS computer needs to have enough memory and disk space to handle the course.  The exact amount of memory you need will depend a lot on what version of the operating system you are using; how many and what kind of drivers, desk accessories, and Inits you have installed; and how large a RAM disk you have allocated.  As I write this, the latest operating system is 6.0.  With system disk 6.0, 1.25 megabytes (M) of memory is just barely enough on a ROM 01 Apple IIGS, while 1.125M works if you have a ROM 03 machine.  If you aren't sure which ROM version you have, boot your computer and look at the very first thing that appears on the screen \endash  right at the bottom you will find the ROM version.  If you have ROM 03, the computer comes with 1.125M of memory, so you're in great shape.  If you have ROM 01, you need to check to make sure you have at least 1M on a memory expansion card.\par If you have the minimum amount of memory, though, you're going to have to use the text shell to compile and execute most of the programs.  You will be a lot better off if you can get 1.75M of memory.  With 1.75M of memory, you can use the desktop development environment to compile and test your programs, and even the text shell will work faster.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 requirements\:disk drives}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You need to have at least two disk drives, one 3.5 inch floppy drive for the compiler and one other disk drive to save programs.  That second disk drive can be anything, but if it isn't a hard disk, you might want to ask Santa for one real soon.  A hard disk will make programming a whole lot easier.  You should have enough blank 3.5 inch floppy disks to make a backup of your Pascal compiler, and several blank floppies that fit your second drive to hold your own programs.\par This book is completely self contained in the sense that it has all of the information you need to know about the Apple IIGS Toolbox to work all of the problems and understand all of the solutions.  You will also need a Pascal reference manual.  Your compiler came with one, and that one will do fine.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Pascal\:compiler}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you already know Pascal, you can use pretty much any Pascal compiler for this course.  The course was written with ORCA/Pascal, and all of the sample programs and solutions have been tested with that compiler.  There will be some minor differences that you will have to cope with if you use some other compiler, but you can handle those if you are patient.  Of course, you won't have to deal with differences if you use ORCA/Pascal, but I wouldn't want to seem like I'm plugging my own compiler too much!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Other Useful Things}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Other Useful Things\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 hard disk}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Getting by with the basics from the last section is possible, but frankly it isn't easy.  A hard disk is a very important addition to your computer.  If you don't have one, please take a look at the prices for hard disks in the latest issue of some Apple II magazine.  A hard disk only costs a few hundred dollars, and it truly changes the character of your computer.\par If you started with a keyboard in your crib or have spent the last ten years glued to a CRT screen you probably won't need a printer.  Frankly, I don't use mine much at all.  If you are more comfortable with a pen and paper than with keys and dots of colored phosphor, though, a printer is almost as nice as the hard disk.\par }\pard \qj\keepn\widctlpar\tx1080\adjustright {\pard\plain \qj\keepn\widctlpar\tx1080\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CAD}}}{\pard\plain \qj\keepn\widctlpar\tx1080\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Design Master}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 On the software side, you might want to consider a programmer's CAD tool, like Design Master.  You may not even know what that is yet.  We'll get to it in time, and once we do get around to telling you what a programmer's CAD tool is, you may want to run right out and buy one.  They cost about $60 to $100 from mail order houses, so start saving your pennies now.  On the other hand, you don't actually have to have one to do desktop programming.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox reference manuals}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 I've saved the most important thing for last.  At last count, the Apple IIGS toolbox is a collection of 52 tools \endash  well over 3000 different subroutine calls.  This course teaches you how to use the tools, and gives you a good grasp on the most important tools and tool calls.  There is no way I can teach you everything there is to know about each and every tool call, though.  I can't even list all of them.  The Apple IIGS toolbox reference manuals, which do list all of the tool calls, are a three volume set.  For an Apple IIGS programmer, the toolbox reference manuals serve the same purpose that a good dictionary does for a writer.  You can do a lot of writing without a dictionary, and you can do a lot of toolbox programming from the information you will find in this course.  On the other hand, there's a lot more out there.  Before you start writing your own toolbox programs from scratch, you really must get all three volumes of the toolbox reference manual.  Please don't kid yourself into thinking you can get by without them.  Appendix A of this course is a mini-reference manual that covers all of the tool calls we use in the course, and it does fine for the course itself \endash  but there's a world of other calls out there waiting to be tapped.  I would recommend that you try to get the toolbox reference manuals by about the middle of this course, when you will probably start to write your own programs that aren't given as samples.\par Recently, Apple released System Disk 6.0, the latest operating system for the Apple IIGS.  The toolbox reference manuals only cover the tool calls up through System Disk 5.0.  While Apple doesn't intend to release a new volume of the toolbox reference manual to cover the latest changes, there is a book that does.  It's called }{\i\f4 Programmer's Reference for System 6.0}{\f4 .  If you want to use the new features of System 6.0, you should get this book, too.\par All of the books I've talked about here, plus several more, are described more completely in Appendix C.  If you're not quite sure what the books are or where to get them, you can look there for details.\par }\pard \widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 1 - Current Events}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qc\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 1 \endash  Current Events}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 1 \endash  Current Events\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tools\:starting}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tools\:shutting down}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:keyboard}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:mouse}}}{\v\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event loop}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox reference manuals}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson shows you how to organize a desktop program.  It covers staring the essential tools, setting up an event loop, and the basics of using an event loop to read the mouse and keyboard.  Along the way, we'll start learning how to use the toolbox reference manuals.  If you don't have the }{\i\f4 Apple IIGS Toolbox Reference}{\f4 , you can use Appendix A, which contains all of the tool calls from this course in pretty much the same format.\par By the end of this lesson, you should understand how to start and shut down the tools, how to set up and use an event loop, and the basics of how to handle keyboard events or read the position of the mouse.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Starting the Tools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Starting the Tools\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par {\*\bkmkstart bk2}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Apple IIGS toolbox is really just a collection of subroutines designed to make it easy (or at least easier!) to write programs with windows, menu bars, and all the other jazzy accouterments of the standard Apple interface.  It contains things like }{\f6\fs20 SetSolidPenPat}{\f4 , a subroutine that tells the graphics program what color to use when it draws things; and }{\f6\fs20 NewWindow}{\f4 , which opens a new window.  These subroutines are collected in tools.  QuickDraw II, for example, contains most of the low level graphics subroutines for drawing lines and rectangles, selecting pen patterns, and drawing text on the screen.  }{\f6\fs20 SetSolidPenPat}{\f4  is a part of QuickDraw II.  }{\f6\fs20 NewWindow}{\f4  is a part of the Window Manager, which has the subroutines you use to create windows, change things like the window title, resize windows, or bring a window from the back of the screen to the front.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox reference manuals}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\i\f4 Apple IIGS Toolbox Reference}{\f4 , volumes 1 to 3, weigh 12 pounds.  There are 2584 pages, covering 1072 different tool calls grouped into 32 different tools.  Obviously, that's a lot of stuff.  In fact, there's so much stuff that the Apple IIGS tools aren't actually all inside of your Apple IIGS.  Apple crammed quite a few tools into the 128K ROM of the original Apple IIGS, and even more into the 256K ROM of the new Apple IIGS, but there are still quite a few tools on the system disk, tucked away in a folder called Tools.  Apple makes mistakes, too, and they even fix them.  Rather than sending out a new ROM each time they fix a minor bug, Apple creates tool patches, which are also in the system disk.  These tool patches are in the Inits folder.  To use the tools, you have to have these inits and RAM based tools available.  The easiest, quickest, and most reliable way to make sure you have everything you need is to boot from Apple's system disk (or the one that comes with your language).  If you are running from a hard disk, be sure and use Apple's installer to put the operating system on your disk.  It's free, it works, and it makes real sure you have all of the files you need.\par Each of the tools in the Apple IIGS toolbox needs a little work space for variables.  The RAM based tools need to be loaded from disk.  Some of the tools need to know just exactly how you want to start them; QuickDraw II, for example, wants to know right away if you want to use 320 mode graphics or 640 mode graphics.  When you hear someone talk about "starting the tools," they are talking about loading the RAM based tools, finding direct page work space for the tools that need it, and making a call to each tool to tell it to wake up and start doing something useful.\par {\*\bkmkstart bk0}There are a lot of ways to start the tools, but it truly is a bit of a pain.  Later, we'll get into a lot of detail about just what you need to do to start the tools, but for now we're going to use a shortcut.  ORCA/Pascal has a built-in subroutine called }{\f6\fs20 StartDesk}{\f4  that will start up most of the tools we will need in this course.  You pass a single parameter, telling it whether you want to start in 640 mode or 320 mode, and it does all of the dirty little chores needed to get things going.\par \par }{\f6\fs20 StartDesk(640);\par {\*\bkmkend bk0}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartDesk}{\rxe bk0}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk1}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tools\:shutting down}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 I can still hear my mother's cheerful, chirping voice floating out the door from my idyllic youth.  "You thing this is a barn, kid?" she would holler.  "Close that door behind you!"  Dear old mom.  Well, the same is true for the tools.  If you open them, close them behind you when you're done.  In ORCA/Pascal, all of the tools started with }{\f6\fs20 StartDesk}{\f4  can be closed by }{\f6\fs20 EndDesk}{\f4 :\par \par }{\f6\fs20 EndDesk;\par }{\f4 \par {\*\bkmkend bk1}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EndDesk}{\rxe bk1}}}{\v\f4 \par }{\f4 Just as dear old mom had a reason for gently reminding me to close the door, there's a good reason for closing the tools, too.  Closing the tools tells each tool in turn to let loose of any memory it has allocated, so there's plenty left for the next program you run.  Closing the tools also stops certain things called interrupts.  If you don't know what they are, don't fret \endash  but if you forget to shut down the tools, these things can cause your computer to crash.  Crashing doesn't do any real harm, but you do have to reboot, which takes up valuable time that you could have used for mowing the lawn.  There are also a lot of soft switches in the GS that tell the computer to behave in certain ways, like to display a particular graphics screen.  Shutting down the tools reverses the critical soft switches.  In short, it's pretty important to remember to shut down the tools.\par {\*\bkmkend bk2}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tools\:starting}{\rxe bk2}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Event Loop}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Event Loop\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk3}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 When Apple released the Lisa back in 1983, they did something pretty radical.  Apple said that programmers should work hard to give the end user a piece of software that was easy to use, and could work the way the user wanted it to, instead of the traditional approach of making the user learn exactly how and in what order the program wanted you to do things.  With the Apple interface, unless the program is doing something that takes a lot of time, you should always be able to press a key, move the mouse, click on a button, or pull down a menu.  Always.\par Well, programmers just weren't used to dealing with a program that gave the user so many options.  How could all of this be done?  The answer, once you know it, is pretty simple.  It's called an event loop.  The event loop is just an infinite loop that you drop into right after you initialize your tools and do any other chores you need to get done before you let the user start doing something with the program.  In this infinite loop, the program checks to see if a key has been pressed, then checks to see if a menu has been pulled down, then to see if a desk accessory has been started, and so forth.  The program is waiting for an event to happen.  When something happens, the program goes of for a bit, taking whatever action is necessary, and then comes back to the even loop.  Ignoring the particular computer we're on and just thinking about the idea, an event loop would look something like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 done := false;\par repeat\par    if KeyPress then\par       HandleKeyPress\par    else if MouseDown then\par       HandleMouseClick\par    else if DAClosed then\par       HandleDAClose\par    else if MenuSelected then\par       HandleMenu;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 until done; \par }{\f4 \par Rumors start in strange ways.  Back when Apple first started asking programmers to write for the Lisa, a lot of folks rushed right over, trying to move their spaghetti coded programs to the jazzy new machine.  The problem was that a lot of these programs were turned inside out compared to the way they needed to work.  The program would check for a key press whenever and however it felt like it.  Rather than do the job right, these adventurous souls would try to move their program over with as few changes as possible.  It just didn't work very well.  Asking for help, they would be told over and over that the program had to be written around an event loop, and they would struggle more and more trying to reshape the old program to the new ideas.  Of course, programmers never make mistakes \endash  just ask one \endash  so the obvious conclusion resounded through the programming community: "Event loops are hard!"\par Wrong.  Thanks for playing at the game of programming.  Better luck next time.\par Event loops are easy.  Like structured programming, event loops are something that makes so much sense that once you get used to them, you wouldn't write a program any other way, even on an IBM PC.  What's hard is taking an old program that wasn't written with an event loop and trying to shoehorn it into a program that has to have an event loop.  Starting from scratch on a new program, though, an event loop gives you a great start on organizing your program around a single, top-level controller.\par {\*\bkmkend bk3}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event loop}{\rxe bk3}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Event Record}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Event Record\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tools\:see also individual tool names}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Event Manager}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Events and the event loop are so important on the Apple IIGS that an entire tool has been created that does nothing but handle events.  Cleverly enough, this tool is called the Event Manager.  To write an event loop, you create a loop that calls }{\f6\fs20 GetNextEvent}{\f4 .  You pass }{\f6\fs20 GetNextEvent}{\f4  a record, called an event record.  }{\f6\fs20 GetNextEvent}{\f4  fills in the information in the event record, like what event occurred (if any) and where the mouse is.  The current mouse position is always returned, even if the user is just jerking the mouse back and forth to pass time and watch the pretty arrow move.  Since your program may have other things to do if the user isn't busy, }{\f6\fs20 GetNextEvent}{\f4  returns right away, even if nothing is happening.  It returns a zero if there is nothing pressing for your program to do, and one if there is something you need to handle.\par Putting this knowledge to work, we can write the outline of our first desktop program.  The main part of the program looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartDesk}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EndDesk}}}{\v\f4 GetNextEvent;\par }{\f6\fs20 StartDesk(640);\par done := false;\par repeat\par    if GetNextEvent($xxxx, myEvent) then\par       HandleEvent;\par until done;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 EndDesk;\par }{\f4 \par }{\f6\fs20 HandleEvent}{\f4  is some hypothetical procedure that does all of the hard stuff; in a moment, we'll replace this hypothetical procedure with something a bit more down to earth.  }{\f6\fs20 GetNextEvent}{\f4  itself has to tell you if something happened, so Apple implemented it as a function.  In addition to returning true if something important happened, and false if there's nothing for you to worry about, the Event Manager fills in the event record.  The event record is packed with all sorts of information.  In Pascal, an event record looks like this:}{\cs22\fs16\up6 \chftn {\footnote \pard\plain \s23\widctlpar\adjustright \f12\fs20\cgrid {\cs22\fs16\up6 \chftn }{\f4\fs24 If you actually look at the definition of an event record in the interface files, you will find some other fields after }{\f6 eventModifiers}{\f4\fs24 .  Technically, those are part of a }{\f6 TaskMaster}{\f4\fs24  record.  We'll talk about those fields, and why they are in the event record, when we start using }{\f6 TaskMaster}{\f4\fs24 .}}}{\f4 \par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20    eventRecord = record\par        eventWhat:      integer;\par        eventMessage:   longint;\par        eventWhen:      longint;\par        eventWhere:     point;\par        eventModifiers: integer;\par }\pard \li360\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record\:eventWhat}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Let's stop and take a close look at just what the Event Manager is telling us.  The first item in the event record is }{\f6\fs20 eventWhat}{\f4 .  The }{\f6\fs20 eventWhat}{\f4  field tells us what kind of event has occurred.  Here's a list of the various events the Event Manager can return.\par \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f4\ul Name}{\f4 \tab }{\f4\ul Value}{\f4 \tab }{\f4\ul Description}{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:null}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 nullEvt}{\f4 \tab 0\tab Nothing happened.  The mouse may have moved, but it hasn't been pressed, no key on the keyboard has been pressed, and the Event Manager didn't find any other sign that the person using the program is doing anything.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:mouse}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 mouseDownEvt}{\f4 \tab 1\tab The button on the mouse was pressed.  This event occurs once, when the mouse button is originally pressed down.  As long as the button is held down, you won't get another mouse down event.\par }{\f6\fs20 mouseUpEvt}{\f4 \tab 2\tab The button on the mouse was down, and has been released.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:keyboard}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 keyDownEvt}{\f4 \tab 3\tab A key on the keyboard has been pressed.\par }{\f6\fs20 autoKeyEvt}{\f4 \tab 5\tab A key was pressed, and a }{\f6\fs20 keyDownEvt}{\f4  reported, but the key was held down.  This event is reported periodically for as long as the key is held down.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:update}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 updateEvt}{\f4 \tab 6\tab A portion of a window needs to be redrawn (updated).\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:activate}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 activateEvt}{\f4 \tab 8\tab A window has been activated.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:switch}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 switchEvt}{\f4 \tab 9\tab Switch events aren't used by the current system.  Apple put them in just in case they ever wanted to generate a switch event, presumably for something like an application switcher or MultiFinder.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:desk accessory}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 deskAccEvt}{\f4 \tab 10\tab This event happens right before the CDA menu is brought up.\par }{\f6\fs20 driverEvt}{\f4 \tab 11\tab Device drivers can post these events.  They really don't concern us.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:application}}}{\v\f4 \par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2160\tx3060\adjustright {\f6\fs20 app1Evt}{\f4 \tab 12\tab You can define your own events.  If you need one, this event code and the three that follow are for your use.\par }{\f6\fs20 app2Evt}{\f4 \tab 13\tab Application-defined event.\par }{\f6\fs20 app3Evt}{\f4 \tab 14\tab Application-defined event.\par }{\f6\fs20 app4Evt}{\f4 \tab 15\tab Application-defined event.\par \par }\pard \qc\fi-2700\li3060\widctlpar\tx2160\tx3060\adjustright {\f4 Table 1-1:  Event Manager Events\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Some of these probably don't make much sense, yet.  We'll look at several of these events in more detail as we learn more about the toolbox.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record\:eventMessage}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 eventMessage}{\f4  field tells more about the event that occurred.  For example, the }{\f6\fs20 eventMessage}{\f4  field for a }{\f6\fs20 keyDownEvt}{\f4  contains the ASCII character code for the key that was pressed.  The }{\f6\fs20 eventMessage}{\f4  field is different for each event, so we'll wait to look at this field in detail until we start looking at the individual events.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tick count}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 heartbeat\:see tick count}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record\:eventWhen}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you start the Event Manager, your Apple IIGS starts a clock that counts off each 1/60th of a second.  Each time the clock increments, it adds one to the tick count.  The tick count is recorded in the }{\f6\fs20 eventWhen}{\f4  field.  You can use this value to tell when a particular event occurred, or more commonly, how much time elapsed between two events.  For example, when a program looks for a double-click, the tick count is used to see if the two clicks on the mouse button were close enough together to be considered a double click.  The }{\f6\fs20 eventWhen}{\f4  field is set even if no event occurred, so you can use it as a timer inside your event loop.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record\:eventWhere}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 mouse\:position}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Like the }{\f6\fs20 eventWhen}{\f4  field, the }{\f6\fs20 eventWhere}{\f4  field is always set, even if the event is a null event.  The }{\f6\fs20 eventWhere}{\f4  field is a point, giving the position of the mouse in global coordinates.  A point is a record with two integer values, h and v.  The value h is the horizontal position, starting from 0 and counting from the left of the screen.  The vertical coordinate, v, counts from the top of the screen to the bottom.  Global coordinates are the ones you would expect, with the 0,0 point at the top left of the screen.  When we start to use windows, you'll learn about local coordinates.  We'll take a closer look at global coordinates a little later in this lesson when we look at mouse events.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record\:eventModifiers}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 mouse\:button}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 keyboard}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 shift key}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 control key}}}{\v\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 apple key}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 eventModifiers}{\f4  field is a series of bit flags that give more information about the state of the computer.  The }{\f6\fs20 eventModifiers}{\f4  field tells us if the mouse button is down, if the shift key is being pressed, and so forth.  Figure 1-1 shows the modifier flags and what each bit is used for.  It's worth taking a close look at figures like 1-1 \endash  you find out some peculiar and interesting things about the toolbox when you do.  For example, take a look at bits 6 and 7.  Here we have two innocent bits that tell you when mouse button 0 and mouse button 1 are down, so you can tell which mouse button is being pressed.  Well, that seems useful, but }{\i\f4 my}{\f4  mouse only has one button.  Of course, Apple's desktop bus system that you use to connect your keyboard and mouse to the computer isn't limited to just the keyboard and mouse Apple sends with the computer.  Apple's programmers put a lot of work into making the toolbox flexible enough to handle lots of options, many of which they don't intend to use themselves.  That's a good design philosophy, but you need to keep alert for things like the two mouse buttons so you know what is available.\par \par }\pard \qc\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw491\pich589\picwgoal9820\pichgoal11780\macpict\bliptag79371263\blipupi72{\*\blipuid 04bb1bff1e88a1580e20ef8ce6409dbb}0a7000070007025401f21101a00082a0008c01000a00070007025401f20a00000000000000000b001b001b44001c000a002f002f4834001c000a0025002ea0008da0008c44001c00be002f01074834001c00be00250106a0008da0008ca0008c34000a000a001d001d38a100960006060000000219a1009a0008fffd000000070000a000980300150d000c2b0d16023135a00099a00097a0008da0008c34000a002e001d004138a100960006060000000219a1009a0008fffd000000070000a000982924023133a00099a00097a0008da0008c34000a0052001d006538a100960006060000000219a1009a0008fffd000000070000a000982924023131a00099a00097a0008da0008c34000a0076001d008938a100960006060000000219a1009a0008fffd000000040000a0009829270139a00099a00097a0008da0008c34000a009a001d00ad38a100960006060000000219a1009a0008fffd000000040000a0009829240137a00099a00097a0008da0008c34000a00be001d00d138a100960006060000000219a1009a0008fffd000000040000a0009829240135a00099a00097a0008da0008c34000a00e2001d00f538a100960006060000000219a1009a0008fffd000000040000a0009829240133a00099a00097a0008da0008c34000a0106001d011938a100960006060000000219a1009a0008fffd000000040000a0009829240131a00099a00097a0008da0008c34000a001c001d002f38a100960006060000000219a1009a0008fffd000000070000a00098280016001f023134a00099a00097a0008da0008c34000a0040001d005338a100960006060000000219a1009a0008fffd000000070000a000982924023132a00099a00097a0008da0008c34000a0064001d007738a100960006060000000219a1009a0008fffd000000070000a000982924023130a00099a00097a0008da0008c34000a0088001d009b38a100960006060000000219a1009a0008fffd000000040000a0009829270138a00099a00097a0008da0008c34000a00ac001d00bf38a100960006060000000219a1009a0008fffd000000040000a0009829240136a00099a00097a0008da0008c34000a00d0001d00e338a100960006060000000219a1009a0008fffd000000040000a0009829240134a00099a00097a0008da0008c34000a00f4001d010738a100960006060000000219a1009a0008fffd000000040000a0009829240132a00099a00097a0008da0008c34000a0118001d012b38a100960006060000000219a1009a0008fffd000000040000a0009829240130a00099a00097a0008da0008d22001c01210009231200a100960006050000000274a1009a0008000b0000004f0000a000982b1f120b616374697665466c61670da00099a1009a0008fffd0000004f0000a000982a0e1b31202d2077696e646f77206265696e67206163746976617465640da00099a1009a0008ffef0000004f0000a000982a0e1c30202d2077696e646f77206265696e67206465616374697661746564a00099a000972200520133dc0022001c010f0036a100960006050000000274a1009a000800120000004d0000a000982a110b6368616e6765466c61670da00099a1009a000800040000004d0000a000982a0e1c31202d206368616e67696e672066726f6d2073797374656d20746f0da00099a1009a0008fff60000004d0000a000982a0e202020202020206170706c69636174696f6e206f7220766963652076657273610da00099a1009a0008ffe80000004d0000a000982a0e0d30202d206e6f206368616e6765a00099a00097a100960006050000000274a1009a0008fffd0000001a0000a000982a15087265736572766564a00099a0009722002e00e200632200910133af00a100960006050000000274a1009a0008000b000000450000a000982a120a62746e3153746174650da00099a1009a0008fffd000000450000a000982a0e1831202d206d6f75736520627574746f6e203120646f776e0da00099a1009a0008ffef000000450000a000982a0e1730202d206d6f75736520627574746f6e203020646f776ea00099a00097a100960006050000000274a1009a0008000b000000450000a000982a1a0a62746e3053746174650da00099a1009a0008fffd000000450000a000982a0e1831202d206d6f75736520627574746f6e203020646f776e0da00099a1009a0008ffef000000450000a000982a0e1730202d206d6f75736520627574746f6e203120646f776ea00099a0009722002500b5007e237e0020002500a300d900a32100d901332000250091010f0091200025007f0145007f200025006d017b006d200025005b01b1005b200025004901e7004920002500370214003720002e001c024a001ca100960006050000000274a1009a0008000b000000420000a000982a1a096170706c654b65790da00099a1009a0008fffd000000420000a000982a0e1731202d206170706c65206b65792077617320646f776e0da00099a1009a0008ffef000000420000a000982a0e1430202d206170706c65206b657920776173207570a00099a0009720010f0091010f0133a100960006050000000201a1009a0008000b0000003f0000a000982a1a0973686966744b65790da00099a1009a0008fffd0000003f0000a000982a0e1731202d207368696674206b65792077617320646f776e0da00099a1009a0008ffef0000003f0000a000982a0e1430202d207368696674206b657920776173207570a00099a0009720014501330145007fa100960006050000000201a1009a0008000b0000004c0000a000982a1a09636170734c6f636b0da00099a1009a0008fffd0000004c0000a000982a0e1b31202d2063617073206c6f636b206b65792077617320646f776e0da00099a1009a0008ffef0000004c0000a000982a0e1830202d2063617073206c6f636b206b657920776173207570a00099a0009720017b0133017b006da100960006050000000201a1009a0008000b000000430000a000982a1a0a6f7074696f6e4b65790da00099a1009a0008fffd000000430000a000982a0e1831202d206f7074696f6e206b65792077617320646f776e0da00099a1009a0008ffef000000430000a000982a0e1530202d206f7074696f6e206b657920776173207570a00099a000972001b1013301b1005ba100960006050000000201a1009a0008000b000000450000a000982a1a0b636f6e74726f6c4b65790da00099a1009a0008fffd000000450000a000982a0e1931202d20636f6e74726f6c206b65792077617320646f776e0da00099a1009a0008ffef000000450000a000982a0e1630202d20636f6e74726f6c206b657920776173207570a00099a000972001e7013301e70049a100960006050000000201a1009a0008000b000000590000a000982a11076b65795061640da00099a1009a0008fffd000000590000a000982a0e1e31202d206b65792070726573736564206f6e20746865206b65797061640da00099a1009a0008ffef000000590000a000982a0e1f30202d206b65792070726573736564206f6e20746865206b6579626f617264a00099a00097200214013302140037a100960006050000000201a1009a0008fffd0000001a0000a000982a1a087265736572766564a00099a0009720024a0133024a001ca00083ff}}{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 1-1:  Modifier Flags\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 everyEvent}}}{\v\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 We've seen that }{\f6\fs20 GetNextEvent}{\f4  returns a value, which we have seen is true if some event occurred, and false if there was no event.  We've seen how the event record is used to return lots of information about what event occurred \endash  and some information, like the mouse position and modifiers, even when an event didn't occur.  Looking back at }{\f6\fs20 GetNextEvent}{\f4 , though, there is one other parameter we haven't talked about.  In some programs, you just may not need a particular event.  The event mask parameter tells the Event Manager which events you want to see, and which events you want it to dump in the bit bucket.  While this can be useful in some situations, it's really just as easy to ignore the events you don't want to handle in your event loop.  For now, we'll use the value }{\f6\fs20 everyEvent}{\f4 , which tells the Event Manager to report each and every event it finds.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Our First Executable Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Our First Executable Program\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:keyboard}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Well, we can Finally create a complete desktop program.  This one doesn't to much \endash  it just brings up the desktop and waits for us to press a key, but hey, it's a start.  Even though the program doesn't do much, we've covered a lot of ground, and it's important to see some of this new knowledge put to use.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 program WaitForKey;\par \par uses Common, EventMgr;\par \par var\par    done: boolean;                       \{are we done, yet?\}\par    myEvent: eventRecord;                \{event record\}\par \par begin\par StartDesk(640);\par done := false;\par repeat\par    if GetNextEvent(everyEvent, myEvent) then\par       if myEvent.eventWhat = keyDownEvt then\par          done := true;\par until done;\par EndDesk;\par end.\par }{\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 1-1: Wait for a Key Press\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can either type the program in or load it from the disks that come with the course.  (On the disk, the file is in a folder called Lesson.1.  The source code is in the file Prog.1.1.)  Either way, take the time to compile and run the program.  You can either run it form the desktop development environment or create an S16 program that you can launch from the Finder.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 debugger}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you are using ORCA/Pascal's desktop development environment, you will see the menus on the menu bar disappear when you run this program, and two icons will appear on the menu bar near the right-hand edge.  The blank menu bar belongs to your program.  Since you haven't created a menu bar yet, there is nothing on it.  The double-arrow icon is used to switch back and forth between your menu bar and the debugger's menu bar, although it doesn't work very well in the middle of an event loop, since your program and the debugger are fighting over who gets the events!  The footprint lets you use the debugger's step feature without switching back to the debugger's menu bar.  All of this is explained in detail in your reference manual, which gives lots of tips about debugging desktop programs.  While I'm not going to repeat all of that information here, now would be a great time to browse through the section of the ORCA/Pascal reference manual that talks about debugging desktop programs.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\par }{{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich411\picwgoal13040\pichgoal8220\macpict\bliptag1507063567\blipupi72{\*\blipuid 59d3f70fb33a3a34e1c92e3d5e019c33}2ce100000000019b028c1101a00082a0008e01000a000000000240030898005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00d003fb800071f800000c03007c00d003fb800071f800000c03007c00d003fb800073fc00003c03c07c00d003fb800073fc00003c03c07c00d003fb800077fe0000fc03f07c00d003fb800077fe0000fc03f07c00d003fb800071fe0003ff9ffc7c00d003fb800071fe0003ff9ffc7c00d003fb800070fe000fff9fff7c00d003fb800070fe000fff9fff7c00a003fb500043ff9ffc7c00a003fb500043ff9ffc7c00d003fb800071fe0000fc03f07c00d003fb800071fe0000fc03f07c00d003fb800071fe00003c03c07c00d003fb800071fe00003c03c07c00d003fb800070fc00000c03007c00d003fb800070fc00000c03007c007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c00b003cda04001cda000103c00b003cda00001cda000103c00b003cda40005cda000103c00b003cda00001cda000103c013003cda04001cf000040f18000e0ef0000103c013003cda00001cf000040f18000e0ef0000103c014013c5fdbff00fcf000041998000606f0000103c014013c1fdbff00fcf000041998000606f0000103c014013c1cdb00007cf00004181f0f0606f0000103c014013c1cdb00007cf00004181f0f0606f0000103c014013c5cdb00007cf000040f19998606f0000103c014013c1cdb00007cf000040f19998606f0000103c02b053c1cfcfffe7ff8ff01c1f0fe00020c00c0fe000007f8ff04fcfffe7e7cf0000401999f8606f0000103c02b053c1cfcfffe7ff8ff01c1f0fe00020c00c0fe000007f8ff04fcfffe7e7cf0000401999f8606f0000103c025043c5c00c006f700010198fe00023c03c0f30003c186007cf000041999980606f0000103c025043c1c00c006f700010198fe00023c03c0f30003c186007cf000041999980606f0000103c02b053c1cfcc0067ff8ff0bc199b1e1f00c00c03e1f1e07f8ff04fcc1867e7cf000040f198f0f0ff0000103c02b053c1cfcc0067ff8ff0bc199b1e1f00c00c03e1f1e07f8ff04fcc1867e7cf000040f198f0f0ff0000103c020043c5c00c006f7000a01f1c333300c00c0333330f60003ff86007cda000103c020043c1c00c006f7000a01f1c333300c00c0333330f60003ff86007cda000103c023053c1cfcc0067ff8ff0bc1818333300c00c033331e07f8ff04fcc0067e7cda000103c023053c1cfcc0067ff8ff0bc1818333300c00c033331e07f8ff04fcc0067e7cda000103c01f043c5c00c006f7000a01818331f00c00c0333303f60003c006007fd9ff00c01f043c1c00c006f7000a01818331f00c00c0333303f60003c006007fd9ff00c026053c1cfcfffe7ff8ff0bc18181e2333f33f33e1f1e07f8ff04fcfffe7e7cdd000003feff00c026053c1cfcfffe7ff8ff0bc18181e2333f33f33e1f1e07f8ff04fcfffe7e7cdd000003feff00c02a013c5cf1000101e0fe000030f1000a7c0300c0030003f818c0c0fe0004c001f003f8ef000403000003c02a013c1cf1000101e0fe000030f1000a7c0300c0030003f818c0c0fe0004c001f003f8ef000403000003c021013c1cdb00127c030000030003001800c0000001c003180018ef000403000003c021013c1cdb00127c030000030003001800c0000001c003180018ef000403000003c021013c5fdbff12fc0301c3f3300301f9c3f1f2f000c000180030ef000403000003c021013c1fdbff12fc0301c3f3300301f9c3f1f2f000c000180030ef000403000003c024013c1cde00157ffffffc0300c31b6003f318c0c31b1800c000300060ef000403000003c024013c1cde00157ffffffc0300c31b6003f318c0c31b1800c000300060ef000403000003c030013c5cf90008031800c0c3f8000318ef00157ffffffc0300c31bc0030318c0c31b0000c000c00030ef000403000003c030013c1cf90008031800c0c3f8000318ef00157ffffffc0300c31bc0030318c0c31b0000c000c00030ef000403000003c030013c1cf9000803180000c300000330ef00157ffffffc0300c31b60030318c0db1b0000c003000318ef000403000003c030013c1cf9000803180000c300000330ef00157ffffffc0300c31b60030318c0db1b0000c003000318ef000403000003c037143c5c03f2f1f1f2f1f3180319f1c3f301f2f361f318f100157ffffffc03f9e31b3003f9f9e071f30001e063f861f0ef000403000003c037143c1c03f2f1f1f2f1f3180319f1c3f301f2f361f318f100157ffffffc03f9e31b3003f9f9e071f30001e063f861f0ef000403000003c025023c1c03fd1b0e181bb8035818c0c3f31b1bc31b18c0f200037ffffffcdd000403000003c025023c1c03fd1b0e181bb8035818c0c3f31b1bc31b18c0f200037ffffffcdd000403000003c025143c5c031b031b1b01fb5803f9f8c0c3031b0363fb18f100036000007cdd000403000003c025143c1c031b031b1b01fb5803f9f8c0c3031b0363fb18f100036000007cdd000403000003c026153c1c03f30319fb031b18031b18c0db031b033301f8c0f200036006007cdd000403000003c026153c1c03f30319fb031b18031b18c0db031b033301f8c0f200036006007cdd000403000003c026153c5c030301f01b01fb180209f9e07301f30319f818c0f200036019807cdd000403000003c026153c1c030301f01b01fb180209f9e07301f30319f818c0f200036019807cdd000403000003c01c063c1c03000001f0f5000201f180f200fe60007cdd000403000003c01c063c1c03000001f0f5000201f180f200fe60007cdd000403000003c012013c5cde00036180187cdd000403000003c012013c1cde00036180187cdd000403000003c012013c1cde000367e07e7cdd000403000003c012013c1cde000367e07e7cdd000403000003c011013c5cde00fe60007cdd000403000003c011013c1cde00fe60007cdd000403000003c011013c1cde00fe60007cdd000403000003c011013c1cde00fe60007cdd000403000003c017013c5cde00fe60027c03f0fd0000c0e4000403000003c017013c1cde00fe60027c03f0fd0000c0e4000403000003c019013c1cde0005607fe07c0318fe000101c0e4000403000003c019013c1cde0005607fe07c0318fe000101c0e4000403000003c01a013c5cde000b6000007c0319f1f9f800c0c0e5000403000003c01a013c1cde000b6000007c0319f1f9f800c0c0e5000403000003c019013c1cde000a7ffffffc03f01b030000c0e4000403000003c019013c1cde000a7ffffffc03f01b030000c0e4000403000003c029013c5cfc000101f0fb000103f8fe0001c208f2000b7ffffffc0301f9f1f000c0c0e5000403000003c029013c1cfc000101f0fb000103f8fe0001c208f2000b7ffffffc0301f9f1f000c0c0e5000403000003c027013c1cfc00010308fb000003fd0001c318f20005780001fc0303fe180100c0e4000403000003c027013c1cfc00010308fb000003fd0001c318f20005780001fc0303fe180100c0e4000403000003c031113c5c0319f9f1f80301f31b19f3f000030319fef302f9f2f0f4000c780001fc0301fbf3f001e00000e6600463000003c031113c1c0319f9f1f80301f31b19f3f000030319fef302f9f2f0f4000c780001fc0301fbf3f001e00000e6600463000003c029183c1c031b031b0003031bbbbb1b180003f31b1b18c35b1b18c0f50003780001fcdd000403000003c029183c1c031b031b0003031bbbbb1b180003f31b1b18c35b1b18c0f50003780001fcdd000403000003c02e163c5c0319f3f9f003031b5b5b1b180003031bfb18c31b1bf30005780001fc03f0fe000101f0e4000403000003c02e163c1c0319f3f9f003031b5b5b1b180003031bfb18c31b1bf30005780001fc03f0fe000101f0e4000403000003c02f083c1c03181b0018030bfd1b0b18c00301b30318db19fb00c0f50005780001fc0318fe00010318e4000403000003c02f083c1c03181b0018030bfd1b0b18c00301b30318db19fb00c0f50005780001fc0318fe00010318e4000403000003c031183c5c01f3f1fbf001f1f31b19f318c003f8e1fb1873181b00c0f5000b780001fc0319f1f9f80018c0e5000403000003c031183c1c01f3f1fbf001f1f31b19f318c003f8e1fb1873181b00c0f5000b780001fc0319f1f9f80018c0e5000403000003c025013c1cf600010180fb000301f00180f5000a780001fc03f01b03000030e4000403000003c025013c1cf600010180fb000301f00180f5000a780001fc03f01b03000030e4000403000003c01a013c5cde000b780001fc0301f9f1f000c0c0e5000403000003c01a013c1cde000b780001fc0301f9f1f000c0c0e5000403000003c018013c1cde0005780001fc0303fe180003e3000403000003c018013c1cde0005780001fc0303fe180003e3000403000003c01b013c5cde000c780001fc0301fbf3f003f80000e6600463000003c01b013c1cde000c780001fc0301fbf3f003f80000e6600463000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c5cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c0980052007d000000fa0290007d000000fa028c007d000000fa028c000112013c5cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c5cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c016053c5c0319f2f0e20003780001fcdd000403000003c016053c1c0319f2f0e20003780001fcdd000403000003c016053c1c03181b18e20003780001fcdd000403000003c016053c1c03181b18e20003780001fcdd000403000003c02f043c5c0319fbe10005780001fc03fbfc0003c00000c0fa0003c00000f0fd000101c0fe0000c3fe0005f003000003c02f043c1c0319fbe10005780001fc03fbfc0003c00000c0fa0003c00000f0fd000101c0fe0000c3fe0005f003000003c02c043c1c01b31be10005780001fc00c3fa000101c0fa0003c0000198fc0000c0fe0009c30000019803000003c02c043c1c01b31be10005780001fc00c3fa000101c0fa0003c0000198fc0000c0fe0009c30000019803000003c036043c5c00e1fbe1002c780001fc00c3f1f2f1f001c1f800c001f9f1f319f3f3f0000181f2f001f000c1f3f1f3f3f001f18003000003c036043c1c00e1fbe1002c780001fc00c3f1f2f1f001c1f800c001f9f1f319f3f3f0000181f2f001f000c1f3f1f3f3f001f18003000003c033013c1cde0005780001fc00c3fe1b231800c30000c003031b1bbb1b18c00003e31b18001800c31b1b18c318031be003000003c033013c1cde0005780001fc00c3fe1b231800c30000c003031b1bbb1b18c00003e31b18001800c31b1b18c318031be003000003c03f013c5cfd000018fd000403000001c0ec002c780001fc00c31bfb03f800c1f000c001f3fb1b5bfb18c00001831b0001f800c3fb1b18c31803198003000003c03f013c1cfd000018fd000403000001c0ec002c780001fc00c31bfb03f800c1f000c001f3fb1b5bfb18c00001831b0001f800c3fb1b18c31803198003000003c03f013c1cfd000018fd000003fe0000c0ec002c780001fc00c31b03030000c01800c0001b01fb1b0318d8c001831b00031800c30319f8db1803198003000003c03f013c1cfd000018fd000003fe0000c0ec002c780001fc00c31b03030000c01800c0001b01fb1b0318d8c001831b00031800c30319f8db1803198003000003c044013c5cfe000d01f9f3f1f0c003f1f1f0c1f1f3f0ef002c780001fc00c319fb01f801e3f001e003f1f81b19fb1870c00181f30001f801e1fb1818731801f18003000003c044013c1cfe000d01f9f3f1f0c003f1f1f0c1f1f3f0ef002c780001fc00c319fb01f801e3f001e003f1f81b19fb1870c00181f30001f801e1fb1818731801f18003000003c033013c1cfe000003fe1b0a1800031b1b18c3181b18c0f00003780001fcf4000101f0fe00010180f8000101f0fc000403000003c033013c1cfe000003fe1b0a1800031b1b18c3181b18c0f00003780001fcf4000101f0fe00010180f8000101f0fc000403000003c023013c5cfe000003fe1b09f8c0031b1b18c3f9fb18ef0003780001fcdd000403000003c023013c1cfe000003fe1b09f8c0031b1b18c3f9fb18ef0003780001fcdd000403000003c024013c1cfe000003fe1b0a0000031b1b18c3031b18c0f00003780001fcdd000403000003c024013c1cfe000003fe1b0a0000031b1b18c3031b18c0f00003780001fcdd000403000003c024013c5cfe000601f9f319f80003fef104e1f9fb18c0f00003780001fcdd000403000003c024013c1cfe000601f9f319f80003fef104e1f9fb18c0f00003780001fcdd000403000003c017013c1cf100010180f00003780001fcdd000403000003c017013c1cf100010180f00003780001fcdd000403000003c024013c5cfc000103f8fe0000c0fb0001c3f0fd000018f60003780001fcdd000403000003c024013c1cfc000103f8fe0000c0fb0001c3f0fd000018f60003780001fcdd000403000003c023013c1cfc000003fd0000c0fb0001c318fd000018f60003780001fcdd000403000003c023013c1cfc000003fd0000c0fb0001c318fd000018f60003780001fcdd000403000003c02a013c5cfe000b031b1b0319f3f3f0c001f319fef30519f1f9f2f1f8f60003780001fcdd000403000003c02a013c1cfe000b031b1b0319f3f3f0c001f319fef30519f1f9f2f1f8f60003780001fcdd000403000003c02b013c1cfe000903bb1bf31b1b18c00003fe1b0818c3f31b031b1b18c0f70003780001fcdd000403000003c02b013c1cfe000903bb1bf31b1b18c00003fe1b0818c3f31b031b1b18c0f70003780001fcdd000403000003c02a013c5cfe0014035b1b031bfb18c0c003fb1bfb18c363fb031b0318f60003780001fcdd000403000003c02a013c1cfe0014035b1b031bfb18c0c003fb1bfb18c363fb031b0318f60003780001fcdd000403000003c02b013c1cfe00150319fb01b30318d8000301b30318db3303031b0318c0f70003780001fcdd000403000003c02b013c1cfe00150319fb01b30318d8000301b30318db3303031b0318c0f70003780001fcdd000403000003c02b013c5cfe001503181bf8e1fb18700001f8e1fb187319f9f9f301f8c0f70003780001fcdd000403000003c02b013c1cfe001503181bf8e1fb18700001f8e1fb187319f9f9f301f8c0f70003780001fcdd000403000003c01c013c1cfd000101f0f000010180f70003780001fcdd000403000003c01c013c1cfd000101f0f000010180f70003780001fcdd000403000003c012013c5cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c00d013c1cde0002780001d8ff00c00d013c1cde0002780001d8ff00c012013c5cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c5cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c5cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c012013c1cde0003780001fcdd000403000003c017023c5c03fe0000c0e30003780001fcdd000403000003c017023c1c03fe0000c0e30003780001fcdd000403000003c013023c1c03df0003780001fcdd000403000003c013023c1c03df0003780001fcdd000403000003c018023c5c03fef101c3f0e40003780001fcdd000403000003c018023c1c03fef101c3f0e40003780001fcdd000403000003c018073c1c031b1b18c318e40003780001fcdd000403000003c018073c1c031b1b18c318e40003780001fcdd000403000003c018073c5c031bfb18c318e40003780001fcdd000403000003c018073c1c031bfb18c318e40003780001fcdd000403000003c018073c1c031b01f8c318e40003780001fcdd000403000003c018073c1c031b01f8c318e40003780001fcdd000403000003c013073c5c03f1f819e318e40002780001d8ff00c013073c1c03f1f819e318e40002780001d8ff00c013053c1c000001f0e20003780001f4da040107c013053c1c000001f0e20003780001f0da000103c01e103c5c01f0c00000c3f000030060f071f8c0ed0003780001f0da400143c01e103c1c01f0c00000c3f000030060f071f8c0ed0003780001f0da000103c01e103c1c0308c00000c318000300c180f31860ed0003780001f4da040107c01e103c1c0308c00000c318000300c180f31860ed0003780001f0da000103c01e103c5c0303f1f2f3f319f1fb318301b33830ed0003780001f0da400143c01e103c1c0303f1f2f3f319f1fb318301b33830ed0003780001f0da000103c01f113c1c01f0c01b18c31b1b036183f3335830c0ee0003780001f4da040107c01f113c1c01f0c01b18c31b1b036183f3335830c0ee0003780001f0da000103c01e103c5c0018c1fb00c31bf9f3c1831bfb9830ed0003780001f0da400143c01e103c1c0018c1fb00c31bf9f3c1831bfb9830ed0003780001f0da000103c01f113c1c0218db1b00db1b001b60c318331860c0ee0003780001f4da040107c01f113c1c0218db1b00db1b001b60c318331860c0ee0003780001f0da000103c01f113c5c01f071fb0073f1fbf33061f033f0c0c0ee0003780001f0da400143c01f113c1c01f071fb0073f1fbf33061f033f0c0c0ee0003780001f0da000103c014013c1cf300010180ee00037ffffff4da040107c014013c1cf300010180ee00037ffffff0da000103c017033c5c0018fa0002f001c0ea000370404070da400143c017033c1c0018fa0002f001c0ea000370000070da000103c018033c1c0018fb0003019800c0ea000374040474da040107c018033c1c0018fb0003019800c0ea000370000070da000103c01d0f3c5c01f9f3f1f000c1f00181f0c1f9f0ec000370404070da400143c01d0f3c1c01f9f3f1f000c1f00181f0c1f9f0ec000370000070da000103c01e023c1c03fe1b0018fe000603e018c30318c0ed000374040474da040107c01e023c1c03fe1b0018fe000603e018c30318c0ed000370000070da000103c01d023c5c03fe1b09f800c1f00181f8c1f3f8ec000370404070da400143c01d023c1c03fe1b09f800c1f00181f8c1f3f8ec000370000070da000103c01c023c1c03fe1bfd0006018318c01b00c0ed000374040474da040107c01c023c1c03fe1bfd0006018318c01b00c0ed000370000070da000103c01e063c5c01f9f319f8fe00060181f9e3f1f8c0ed000370404070da400143c01e063c1c01f9f319f8fe00060181f9e3f1f8c0ed000370000070da000103c014013c1cf400010180ed000374040474da040107c014013c1cf400010180ed000370000070da000103c013013c5cfb0000c0e5000370404070da400143c013013c1cfb0000c0e5000370000070da000103c013013c1cfb0000c0e5000374040474da040107c013013c1cfb0000c0e5000370000070da000103c016083c5c02f1f3f1f1f3f0e5000370404070da400143c016083c1c02f1f3f1f1f3f0e5000370000070da000103c016023c1c03fe1b021818c0e5000374040474da040107c016023c1c03fe1b021818c0e5000370000070da000103c016083c5c0303fb1bf9f8c0e5000370404070da400143c098005200fa00000177029000fa00000177028c00fa00000177028c000116083c1c0303fb1bf9f8c0e5000370000070da000103c016013c1cfe0303f30318d8e5000374040474da040107c016013c1cfe0303f30318d8e5000370000070da000103c016083c5c0301fb01f9f870e5000370404070da400143c016083c1c0301fb01f9f870e5000370000070da000103c012043c1c000003e1000374040474da040107c012043c1c000003e1000370000070da000103c02d013c5cfd000ac0f001f000c2180000c3f8fe0001c060fd000103f8fe0000c0fe000503f870404070da400143c02d013c1cfd000ac0f001f000c2180000c3f8fe0001c060fd000103f8fe0000c0fe000503f870000070da000103c02b013c1cfd00090198030800c3180000c3fd0001c0c0fd000003fd0000c0fe0005030074040474da040107c02b013c1cfd00090198030800c3180000c3fd0001c0c0fd000003fd0000c0fe0005030070000070da000103c02f013c5cfe002301c1800301f3f399f31bf30319f3f3f181f319f2f31b0319f3f3f000031b1b0070404070da400143c02f013c1cfe002301c1800301f3f399f31bf30319f3f3f181f319f2f31b0319f3f3f000031b1b0070000070da000103c02c013c1cfd000fc3e0030318c3fb19b0c3f31b1b18c183fc1b0df31b1b18c00003bb1bf074040474da040107c02c013c1cfd000fc3e0030318c3fb19b0c3f31b1b18c183fc1b0df31b1b18c00003bb1bf070000070da000103c02e013c5cfd0022c180033bf8c33bf8e0c3031bfb18c183fb1bfb031b031bfb18c000035b1b0070404070da400143c02e013c1cfd0022c180033bf8c33bf8e0c3031bfb18c183fb1bfb031b031bfb18c000035b1b0070000070da000103c02e013c1cfd0022c180031b00db1b01b0db01b30318d8c301b30301fb01b30318d8c00319fb0074040474da040107c02e013c1cfd0022c180031b00db1b01b0db01b30318d8c301b30301fb01b30318d8c00319fb0070000070da000103c02f013c5cfe002301e18001f9f87309fb1873f8e1fb187061f8e1fb001bf8e1fb1870c003181bf870404070da400143c02f013c1cfe002301e18001f9f87309fb1873f8e1fb187061f8e1fb001bf8e1fb1870c003181bf870000070da000103c01a013c1cea000101f0fd000901800001f00074040474da040107c01a013c1cea000101f0fd000901800001f00070000070da000103c029013c5cfa0005c0f0000003f8fe0000c0fc0010c31b0000c0000003000003f00070404070da400143c029013c1cfa0005c0f0000003f8fe0000c0fc0010c31b0000c0000003000003f00070000070da000103c028013c1cfa00040198000003fd0000c0fc0010c31b0000c0000003000003180074040474da040107c028013c1cfa00040198000003fd0000c0fc0010c31b0000c0000003000003180070000070da000103c02c013c5cfb000d01c180031b1b0319f3f3f001f319fef30f1bf1f3f001f00331f31b19f070404070da400143c02c013c1cfb000d01c180031b1b0319f3f3f001f319fef30f1bf1f3f001f00331f31b19f070000070da000103c02b013c1cfa000ac3e003bb1bf31b1b18c003fe1b0918c35b1818c000000363fe1b041874040474da040107c02b013c1cfa000ac3e003bb1bf31b1b18c003fe1b0918c35b1818c000000363fe1b041870000070da000103c02b013c5cfa001fc180035b1b031bfb18c003fb1bfb18c3fb19f8c001f003c3fb1b1b1870404070da400143c02b013c1cfa001fc180035b1b031bfb18c003fb1bfb18c3fb19f8c001f003c3fb1b1b1870000070da000103c02b013c1cfa001fc1800319fb01b30318d80301b30318db1b1b18d80000036301fb1b1874040474da040107c02b013c1cfa001fc1800319fb01b30318d80301b30318db1b1b18d80000036301fb1b1870000070da000103c02c013c5cfb002001e18003181bf8e1fb187061f8e1fb18720b19f87000000331f81bf1f070404070da400143c02c013c1cfb002001e18003181bf8e1fb187061f8e1fb18720b19f87000000331f81bf1f070000070da000103c018013c1cf7000101f0ee000701f0000074040474da040107c018013c1cf7000101f0ee000701f0000070000070da000103c017013c5cf7000018fa0000c0f1000370404070da400143c017013c1cf7000018fa0000c0f1000370000070da000103c017013c1cf7000018fa0000c0f1000374040474da040107c017013c1cf7000018fa0000c0f1000370000070da000103c01f013c5cf8000c01f9f3f1f000c1f003f2f319f0f4000370404070da400143c01f013c1cf8000c01f9f3f1f000c1f003f2f319f0f4000370000070da000103c01f013c1cf8000003fe1b0018fd0004c31b1b18c0f5000374040474da040107c01f013c1cf8000003fe1b0018fd0004c31b1b18c0f5000370000070da000103c01f013c5cf8000003fe1b08f800c1f000c3031bf8f4000370404070da400143c01f013c1cf8000003fe1b08f800c1f000c3031bf8f4000370000070da000103c01d013c1cf8000003fe1bfc0004db031b00c0f5000374040474da040107c01d013c1cf8000003fe1bfc0004db031b00c0f5000370000070da000103c01f013c5cf8000401f9f319f8fd00047301f1f8c0f5000370404070da400143c01f013c1cf8000401f9f319f8fd00047301f1f8c0f5000370000070da000103c014013c1cec00010180f5000374040474da040107c014013c1cec00010180f5000370000070da000103c017013c5cfe0004c0c1c00018e6000370404070da400143c017013c1cfe0004c0c1c00018e6000370000070da000103c017013c1cfe0004c000c00018e6000374040474da040107c017013c1cfe0004c000c00018e6000370000070da000103c01a0c3c5c031bf3f1c0c001f9f3f1f0e9000370404070da400143c01a0c3c1c031bf3f1c0c001f9f3f1f0e9000370000070da000103c01b043c1c031b18fec00003fe1b0118c0ea000374040474da040107c01b043c1c031b18fec00003fe1b0118c0ea000370000070da000103c01a043c5c031b18fec00003fe1b00f8e9000370404070da400143c01a043c1c031b18fec00003fe1b00f8e9000370000070da000103c01b083c1c031b18d8c0c003fe1b0100c0ea000374040474da040107c01b083c1c031b18d8c0c003fe1b0100c0ea000370000070da000103c01b0d3c5c01f31871e1e001f9f319f8c0ea000370404070da400143c01b0d3c1c01f31871e1e001f9f319f8c0ea000370000070da000103c014013c1cf700010180ea000374040474da040107c014013c1cf700010180ea000370000070da000103c016083c5c03f8001bf00003e5000370404070da400143c016083c1c03f8001bf00003e5000370000070da000103c016083c1c0300001b180003e5000374040474da040107c016083c1c0300001b180003e5000370000070da000103c017093c5c0303f1fb19f1fb30e6000370404070da400143c017093c1c0303f1fb19f1fb30e6000370000070da000103c017033c1c03f3fd1b020360c0e7000374040474da040107c017033c1c03f3fd1b020360c0e7000370000070da000103c017033c5c0303fe1b02f9f3c0e6000370404070da400143c017033c1c0303fe1b02f9f3c0e6000370000070da000103c018033c1c0303fe1b03001b60c0e7000374040474da040107c018033c1c0303fe1b03001b60c0e7000370000070da000103c0180a3c5c03fb19fbf1fbf330c0e7000370404070da400143c0180a3c1c03fb19fbf1fbf330c0e7000370000070da000103c014013c1cfa00010180e7000374040474da040107c014013c1cfa00010180e7000370000070da000103c013013c5cfe000018e2000370404070da400143c013013c1cfe000018e2000370000070da000103c013013c1cfe000018e2000374040474da040107c013013c1cfe000018e2000370000070da000103c013053c5c01f3f1f8e2000370404070da400143c013053c1c01f3f1f8e2000370000070da000103c013053c1c031b1b18e2000374040474da040107c013053c1c031b1b18e2000370000070da000103c013053c5c03fb1b18e200037ffffff0da400143c013053c1c03fb1b18e200037ffffff0da000103c013053c1c03031b18e2000360000074da040107c013053c1c03031b18e2000360000070da000103c014063c5c01fb19f860e30003607fe070da400143c014063c1c01fb19f860e30003607fe070da000103c00e013c1cde00fe600074da040107c00e013c1cde00fe600070da000103c00e013c5cde00fe600070da400143c00e013c1cde00fe600070da000103c00e013c1cde00fe600074da040107c00e013c1cde00fe600070da000103c00f013c5cde000367e07e70da400143c00f013c1cde000367e07e70da000103c00f013c1cde000361801874da040107c00f013c1cde000361801870da000103c00e013c5cde00fe600070da400143c00e013c1cde00fe600070da000103c00f013c1cde000360198074da040107c00f013c1cde000360198070da000103c00f013c5cde000360060070da400143c00f013c1cde000360060070da000103c00f013c1cde000360000074da040107c00f013c1cde000360000070da000103c00c013c5fdbff00f0da400143c00c013c1fdbff00f0da000103c018043c1c000007fdffe9040705c0000060000074da040107c018043c1c000007fdffe9000701c0000060000070da000103c01a083c5c00e007c0000007e9400741c01c0067fe0070da400143c01a083c1c00e007c0000007e9000701c01c0067fe0070da000103c098005201770000019b029001770000019b028c01770000019b028c00011a083c1c036007c0000007e9040705c01b0066060074da040107c01a083c1c036007c0000007e9000701c01b0066060070da000103c01a083c5c0c7fc7c0000007e9400741cff8c06607fe70da400143c01a083c1c0c7fc7c0000007e9000701cff8c06607fe70da000103c01a083c1c3000c7c0000007e9040705cc003066060674da040107c01a083c1c3000c7c0000007e9000701cc003066060670da000103c01a083c5cc000c7c0000007e9400741cc000c67fe0670da400143c01a083c1cc000c7c0000007e9000701cc000c67fe0670da000103c01a083c1c3000c7c0000007e9040705cc003060c00674da040107c01a083c1c3000c7c0000007e9000701cc003060c00670da000103c01a083c5c0c7fc7c0000007e9400741cff8c060c00670da400143c01a083c1c0c7fc7c0000007e9000701cff8c060c00670da000103c01a083c1c036007c0000007e9040705c01b0060c00674da040107c01a083c1c036007c0000007e9000701c01b0060c00670da000103c01a083c5c00e007c0000007e9400741c01c0060fffe70da400143c01a083c1c00e007c0000007e9000701c01c0060fffe70da000103c01a083c1c000007c0000007e9040705c0000060000074da040107c01a083c1c000007c0000007e9000701c0000060000070da000103c018043c5c000007fdffe9400741c0000060000070da400143c018043c1c000007fdffe9000701c0000060000070da000103c00c013c1fdbff00f4da040107c00c013c1fdbff00f0da000103c007003cb2400143c007003cb2000103c007003cb2040107c007003cb2000103c007003cb2400143c007003cb2000103c007003cb2040107c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\par }{\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 1-1:  The Debug Menu Bar\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 1.1.  Change the program so it stops when the mouse is released (not when it is pressed!).\par Like every other problem in this book, the solution is on the disks that come with the course.  The source code is divided up into lesson folders that match the lesson you are reading; in this case, you want the folder called Lesson.1.  It's on the disk labeled Disk 1.  The source itself is in a file called Prob.1.1.pas.  The source code for problem 1.2 will be in a file called Prob.1.2.pas, and so forth.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Keyboard Events}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Keyboard Events\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par {\*\bkmkstart bk4}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record\:eventMessage}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Detecting a key press was pretty easy; now let's see how we find out which key was actually pressed.  The ASCII character code for the key that was pressed is stored in the }{\f6\fs20 eventMessage}{\f4  field.  Taking a look at the }{\f6\fs20 eventMessage}{\f4  field, you see that it's a long integer, but an ASCII character only uses 7 bits.  The ASCII character is actually stuffed in the least significant byte of the long integer, and the other three bytes are undefined.  The eighth bit of the byte that contains the character is set to 0.\par Putting all of this together, we can grab the character from the }{\f6\fs20 eventMessage}{\f4  field like this:\par \par }{\f6\fs20 key := chr(ord(myEvent.eventMessage & $000000FF));\par }{\f4 \par It may seem like overkill to make the effort to mask off the three undefined bytes, especially since they are actually zero.  On the other hand, keep in mind that I said they were undefined, not that they were zero.  The word undefined comes right from the toolbox reference manual.  When you see something that's undefined in the toolbox, that means it isn't used now, but }{\i\f4 it might be used for something at some point in the future!}{\f4   To a careful programmer, there's a significant difference between something that's undefined but happens to be zero, and something that is defined as being zero.  To a not so careful programmer, this means job security: they get to go back after each new release of the system disk and make changes to allow for things that used to be undefined and aren't any more.  (Ever wonder why each release of the system disk broke PaintWorks Gold, while other programs ran perfectly?)\par Whenever the toolbox documentation says something is undefined, write your program so it doesn't matter what is in those bytes.  If you do, you'll go through life wondering why I made such a big deal about this point.  If you don't, you'll go through life in the company of the Paintworks Gold programmers, changing your programs each time a new system disk is released.  Like so many things in life, it's a choice you get to make for yourself.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record\:eventModifiers}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Event Manager can tell you a lot more about a }{\f6\fs20 keyDownEvt}{\f4  than just what key was pressed.  The other information is in the }{\f6\fs20 eventModifiers}{\f4  field, which you saw a couple of pages back.  You can tell whether the shift key or shift lock key is down, whether the apple or option key is being pressed, whether a '1' character came from the keyboard or the keypad, and whether the control key was being held down.  For some applications, these differences are crucial, while for others you won't bother to look at the }{\f6\fs20 eventModifiers}{\f4  field.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 writeln}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 I'm going to toss in one more piece of information that is just one of those things you pick up by constantly flipping through manuals.  Buried in the ORCA/Pascal reference manual is the little-known but useful fact that when you start the tools with }{\f6\fs20 StartDesk}{\f4 , ORCA/Pascal does some technical magic behind the scenes to make the standard Pascal }{\f6\fs20 write}{\f4  and }{\f6\fs20 writeln}{\f4  procedures work with the graphics screen.  Here's a program that uses that fact to show what key is pressed and what the modifiers field is set to.  It uses a few tool calls we haven't discussed yet; we'll take a look at them in a moment.\par \par }{\f6\fs20 program KeyEvents (output);\par \par uses Common, QuickDrawII, EventMgr;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 var\par    done: boolean;                       \{are we done, yet?\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    myEvent: eventRecord;                \{event record\}\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20    procedure HandleKeyPress;\par \par    \{ handle a key down event                                    \}\par \par    var\par       r: rect;                          \{rectangle for area to erase\}\par \par    begin \{HandleKeyPress\}\par    SetSolidPenPat(black);               \{erase any old stuff\}\par    r.left := 0;  r.right := 100;\par    r.top := 0;   r.bottom := 40;\par    PaintRect(r);\par    SetForeColor(white);                 \{draw white text ...\}\par    SetBackColor(black);                 \{...on a black background\}\par    MoveTo(10,10);                       \{write the key at this location\}\par    writeln(chr(ord(myEvent.eventMessage & $000000FF)));\par    writeln(myEvent.eventModifiers);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    end; \{HandleKeyPress\}\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 begin\par StartDesk(640);\par PenNormal;\par done := false;\par repeat\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent}}}{\v\f4 \par }{\f6\fs20    if GetNextEvent(everyEvent, myEvent) then\par       if myEvent.eventWhat = mouseUpEvt then\par          done := true\par       else if myEvent.eventWhat = keyDownEvt then\par          HandleKeypress;\par until done;\par EndDesk;\par end.\par }{\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 1-2: Handling a Key Press Event\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 QuickDraw II}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson is about starting the tools and using the Event Manager, but the tools all have to be used together to create useful programs.  This program uses a few calls from QuickDraw II, the graphics package for the Apple IIGS.  We won't get a chance to study QuickDraw in detail for quite a while, but you will need to use a few calls here and there.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PaintRect}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen color}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSolidPenPat}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PenNormal}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This program is writing text on the graphics screen.  I mentioned that }{\f6\fs20 writeln}{\f4  can write text, but it isn't quite as simple as writing text to the text screen.  For one thing, the graphics screen doesn't scroll, so we have to clear some space (in case there were already some characters on the screen).  QuickDraw's }{\f6\fs20 PaintRect}{\f4  call will paint all of the bits in a rectangle; we'll use this to clear part of the screen.  There are two pieces of information }{\f6\fs20 PaintRect}{\f4  needs to fill in the rectangle: the color to use, and the location of the rectangle.  }{\f6\fs20 PaintRect}{\f4  uses something called the pen color to fill in the rectangle; }{\f6\fs20 SetSolidPenPat}{\f4  sets the pen color to one of the solid colors.  You can use a number, like 0 for black or 3 for white, or you can use one of the names from the tool headers files.  We'll see exactly how you can read the tool header files later, but for now, you can trust me about }{\f6\fs20 black}{\f4  and }{\f6\fs20 white}{\f4  being properly defined in the header files.  Finally, any time you draw on the graphics screen, there are several parameters that effect the way the drawing is done.  The }{\f6\fs20 PenNormal}{\f4  call you see right after the call to }{\f6\fs20 StartDesk}{\f4  sets up all of those parameters in a "normal" way.  You will learn what the parameters are, and what "normal" means, when we go over QuickDraw in detail.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 point}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 QuickDraw uses two main data structures to deal with locations on the screen, the point and the rectangle.  In both cases 0,0 is at the top left corner.  For a rectangle, you need to give a top, bottom, left and right side.  In our program, the finished rectangle is passed to }{\f6\fs20 PaintRect}{\f4  as a parameter.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MoveTo}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetForeColor}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetBackColor}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As with clearing a rectangle, QuickDraw needs to know two things to draw text, other than the text itself.  The position of the text will be the current pen position, which we set using }{\f6\fs20 MoveTo}{\f4 .  As with most QuickDraw calls, instead of passing a point as a record, we pass the two individual values as parameters.  The color of the text is set with the }{\f6\fs20 SetForeColor}{\f4  call, while the color of the background is set with }{\f6\fs20 SetBackColor}{\f4 .\par Since the point of this program is to draw characters and modifiers on the screen, we don't want to use a }{\f6\fs20 keyDownEvt}{\f4  to stop the program.  Instead, the program waits for the }{\f6\fs20 mouseUpEvt}{\f4  that occurs at the end of a mouse click.\par \par Problem 1.2.  Change the program so it reports auto-key events as well as the initial key press.  Try the program, changing the repeat key speed from your control panel to see what effect this has.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkend bk4}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:keyboard}{\rxe bk4}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Mouse Events}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Mouse Events\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk5}\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Mouse events are pretty simple: you get one event when the mouse button is pushed down, and another when it is released.  Each time you call }{\f6\fs20 GetNextEvent}{\f4  you also get back the current position of the mouse in the event record, whether or not a mouse event has occurred.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LineTo}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The program in listing 1-3 puts this information to use to create a simple sketching program.  It also uses one new QuickDraw call, }{\f6\fs20 LineTo}{\f4 .  }{\f6\fs20 LineTo}{\f4  works pretty much like }{\f6\fs20 MoveTo}{\f4 , but instead of just moving the pen, it draws a line from the current location of the pen to the new location you pass as parameters to }{\f6\fs20 LineTo}{\f4 .  The plan is to move around until the mouse is pressed, then draw lines until the mouse button is released, again.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InitCursor}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 cursor}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Of course, there's the minor matter of where the mouse is at any given time.  Desktop programs generally use the arrow symbol to show where the mouse is pointing; the QuickDraw call }{\f6\fs20 InitCursor}{\f4  sets up the arrow cursor and tells the toolbox to move it around for us.  QuickDraw is also smart enough not to draw on top of the arrow.  All of this work is done behind the scenes for us; all we have to do is remember to put that one, simple call to }{\f6\fs20 InitCursor}{\f4  in the program, right after the tools are initialized.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 program Sketch;\par \par uses Common, QuickDrawII, EventMgr;\par \par var\par    done: boolean;                       \{are we done, yet?\}\par    mouseIsDown: boolean;                \{is the mouse down?\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    myEvent: eventRecord;                \{event record\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure BlackScreen;\par \par    \{ Paint the entire screen black                              \}\par \par    var\par       r: rect;                          \{screen rectangle\}\par \par    begin \{BlackScreen\}\par    r.top := 0;\par    r.bottom := 200;\par    r.left := 0;\par    r.right := 640;\par    SetSolidPenPat(black);\par    PaintRect(r);\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{BlackScreen\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin\par StartDesk(640);                         \{start the tools\}\par PenNormal;                              \{set up normal pen parameters\}\par InitCursor;                             \{start the arrow cursor\}\par BlackScreen;                            \{paint the screen black\}\par SetSolidPenPat(white);                  \{draw in white\}\par SetPenMode(modeCopy);                   \{draw in copy mode\}\par done := false;                          \{we aren't done, yet\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 mouseIsDown := false;                   \{the mouse is not down\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 repeat\par                                         \{handle the events\}\par    if GetNextEvent(everyEvent, myEvent) then\par       if myEvent.eventWhat = keyDownEvt then\par          done := true\par       else if myEvent.eventWhat = mouseDownEvt then\par          mouseIsDown := true\par       else if myEvent.eventWhat = mouseUpEvt then\par }\pard \li180\widctlpar\adjustright {\f6\fs20          mouseIsDown := false;\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20                                         \{draw or move the mouse\}\par    if mouseIsDown then\par       LineTo(myEvent.eventWhere.h, myEvent.eventWhere.v)\par    else\par       MoveTo(myEvent.eventWhere.h, myEvent.eventWhere.v);\par until done;\par EndDesk;                                \{shut down the tools\}\par end.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 1-3: Sketch program\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 1.3.  Add color to the sketch program.  To do this, when a key is pressed, check to see if it is a '0', '1', '2' or '3', and if so, set the pen color to the same value.  For any other key, quit.\par Color 3 will be pure white, and color 0 will be pure black, but colors 1 and 2 will vary a bit.  This is caused by dithering, something you will learn to use to your benefit later in the course.  For now, just file it away as an interesting phenomenon.\par You can add even more color, handling 16 different colors, by using 320 mode graphics.  The only changes you have to make to the program are to change the parameter of }{\f6\fs20 StartDesk}{\f4  from 640 to 320, change the screen width in }{\f6\fs20 BlackScreen}{\f4  to 320 (this isn't strictly necessary, but is still good form) and allow more keys for the other 12 colors.\par \par Problem 1.4.  Write a program that prints the mouse position on the screen.  Use this to explore the coordinate system used by the toolbox.  (In other words, move the mouse around and make sure you understand what numbers to use to put the mouse in a particular place.)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkend bk5}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:mouse}{\rxe bk5}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using Appendix A}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Appendix A\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You've learned a lot about the toolbox in this lesson, but it's fair to ask where some of this information comes from.  How did I know what all of the flags were in the }{\f6\fs20 eventModifiers}{\f4  variable?  How did I know that I could use }{\f6\fs20 everyEvent}{\f4  as a parameter to }{\f6\fs20 GetNextEvent}{\f4 ?  The rest of this lesson deals with just that issue.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox reference manuals}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 A while back I gave a few statistics about the size of the toolbox reference manuals that the folks at Apple Computer wrote to describe the tools in the toolbox.  Listening to the statistics about that three volume tome, you might have wondered how anyone could ever learn all there is to know about the toolbox.  The answer, once you know it, is really pretty obvious: no one does.  Just as a writer doesn't start by memorizing the Oxford English Dictionary, a toolbox programmer doesn't start by memorizing }{\i\f4 Apple IIGS Toolbox Reference}{\f4 .  Instead, just like the writer, a toolbox programmer learns how to find things in the toolbox reference manuals, and learns the basics about how to use the toolbox.  This course covers all of the basics about how the toolbox is organized and used, but you will still need the complete set of toolbox reference manuals to be any good at programming the toolbox.\par On the other hand, you may not be ready to run right out to your local bookstore and pick up the entire set of reference books for the Apple IIGS.  Fair enough.  Just keep in mind that someday you will need them, just as a writer knows he will need a good dictionary.  Until that time, you can get by very nicely with Appendix A, which is our abridged toolbox reference manual.  Appendix A catalogs all of the tool calls used anywhere in this course.  Like a pocket dictionary that covers the most common English words, Appendix A does not try to cover all of the toolbox, just the most commonly used parts.  It also doesn't cover all aspects of the tools listed, but if the description of a tool call is incomplete, Appendix A says so very clearly.\par I keep comparing the toolbox reference manuals to a dictionary, and I guess that's because the way the two are used are really quit a lot alike.  Well, here goes again.  One of the little tricks I've been taught for increasing my vocabulary is to keep a good dictionary handy when I read a book that is using words I'm not familiar with.  Well, that's also the best way to use Appendix A.  Each time you see a tool call you aren't familiar with, flip back to Appendix A and read the description.  Among other things, you'll find a lot more information about most of the tool calls than we actually talk about in the text.  You'll also get comfortable with how Appendix A is written and organized, plus the sort of information you can find there.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using the Toolbox Reference Manuals}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using the Toolbox Reference Manuals\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox reference manuals}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you already have the toolbox reference manuals, everything I just said about Appendix A applies to them, too.\par There is one special problem with the toolbox reference manuals, though.  When Apple wrote the original toolbox reference manuals, they were also producing APW and APW C, but things had soured and they already knew there would be no APW Pascal, at least not right away.  As a direct result, the toolbox reference manuals tell you exactly how to use the toolbox from the APW assembler or APW C, but they don't tell you anything at all about how to make a tool call from Pascal.  As it turns out, once you know how to read the manuals, it really isn't hard to make tool calls from Pascal, but it sure helps to have some help when you first start to use them!\par To see how the toolbox reference manuals work, let's look at the most complicated tool call we've made so far:  }{\f6\fs20 GetNextEvent}{\f4 .  There are two ways to see how to call }{\f6\fs20 GetNextEvent}{\f4  from the toolbox reference manuals.  Since you may like one better than the other, while the next guy may like the other, I'll cover both.\par The simplest and most direct way to see how a call is made from Pascal is to look at how the call is made from C; the two languages call subroutines in a very similar way.  Here's the information from page 7-39 of }{\i\f4 Apple IIGS Toolbox Reference: Volume 1.}{\f4 \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent}}}{\v\f4 \par }{\f6\fs20 extern pascal Boolean GetNextEvent(eventMask,eventPtr)\par Word eventMask;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 EventRecordPtr eventPtr;\par }{\f4 \par That's very, very close to the way the tool call is defined in Pascal.  In fact, here's the definition of the }{\f6\fs20 GetNextEvent}{\f4  call from the ORCA/Pascal toolbox interface files:\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs20 function GetNextEvent (eventMask: integer; var theEvent: eventRecord):\par    boolean;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 In fact, the only major difference is the way the event record itself is passed.  In C, we pass a pointer to the record, while in Pascal, we can pass the record itself.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The second major source of information is the stack diagram that you will find with each tool call.  The stack diagram for }{\f6\fs20 GetNextEvent}{\f4  looks like this:\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex67\picscaley67\piccropl0\piccropr0\piccropt0\piccropb0\picw504\pich184\picwgoal10080\pichgoal3680\macpict\bliptag-602582132\blipupi72{\*\blipuid dc15538ca6e831b489704b39ad3f2a92}038affffffff00b701f71101a00082a10096000c02000000020000000000000001000a0000000e000c00602c000c00150948656c7665746963610300150d000a2b0f091150726576696f757320636f6e74656e7473a00097a10096000c02000000020000000000000001000a0017001b002300522b0f1709776f72647370616365a0009701000affffffff00b701f730001400010027006ea10096000c01000000020000000000000001000a00170091002301692c000800140554696d65730300140401297405576f7264200400291b12d020537061636520666f7220726573756c74a00097a0008c01000affffffff00b701f730003800010054006e2200450001090022004500640900a0008da10096000c02000000020000000000000001000a003f001d004b00500300152800480025076576656e507472a00097a10096000c01000000020000000000000001000a003f0091004b01b90300140401296d054c6f6e6720040029183fd020504f494e54455220746f20746865206576656e74207265636f726420696e20776869636820746865206576656e742077696c6c20626520706c61636564a0009701000affffffff00b701f7220002006d005aa10096000c02000000020000000000000001000a0029001b003500520300152800320020086576656e4d61736ba0009701000affffffff00b701f730002600010039006ea10096000c01000000020000000000000001000a00290091003501690300140401297205576f7264200400291b31d020537065636966696573207768696368207479706573206f66206576656e747320617265206f6620696e746572657374a0009701000affffffff00b701f72200020001005aa10096000c02000000020000000000000001000a0087000e00930060030015280090000f1150726576696f757320636f6e74656e7473a00097a10096000c02000000020000000000000001000a009e000e00aa00602b04170e68616e646c654576656e466c6167a0009701000affffffff00b701f730009b000100ae006ea10096000c01000000020000000000000001000a009e009100aa01f60300140401297f05576f7264200400291b47d020424f4f4c45414e3b2054525545206966206576656e742073686f756c642062652068616e646c6564206279206170706c69636174696f6e2c2046414c5345206966206e6f74a0009701000affffffff00b701f7220089006d002d2200890001002da00083ff}}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 1-2:  Stack Diagram for }{\f6\fs20 GetNextEvent}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's a wealth of information here, but it does take some practice and a knowledge of how Pascal passes parameters to get much out of the stack diagram.  The top diagram shows the stack right before the call to }{\f6\fs20 GetNextEvent}{\f4 .  }{\f6\fs20 GetNextEvent}{\f4  only has two parameters, but there are three things on the stack.  That's because }{\f6\fs20 GetNextEvent}{\f4  returns a value; it is a function.  The toolbox expects Pascal to put some space on the stack before making the tool call, and Pascal does just that.  The wordspace area is filled in with the function return value, labeled }{\f6\fs20 handleEventFlag}{\f4  in the lower part of the stack diagram.\par The parameters themselves are read from top to bottom.  The first parameter for }{\f6\fs20 GetNextEvent}{\f4  is the event mask, and that's the one that appears on the stack first.  The stack diagram only shows how big the parameter is, but in most cases, the type of the parameter is pretty obvious.  For example, a character, integer, and boolean value all take up two bytes on the stack when Pascal passes them as a parameter (that tidbit can be found in your ORCA/Pascal reference manual), but it's pretty obvious that the event mask isn't a character or boolean.\par ORCA/Pascal always passes arrays and records longer than four bytes by putting the address of the array or record on the stack.  When the stack diagram shows a pointer of some sort, you almost always pass the actual record or array as a parameter in Pascal.  The big exception is when the tool is returning something; you'll see that a lot with window pointers when we start opening windows on the desktop.\par Besides these two methods, you can always fall back on Appendix A.  For the tool calls that you use in this course, Appendix A shows the way the tool call is defined in the ORCA/Pascal header files.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Reading the Tool Interface Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Reading the Tool Interface Files\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 toolbox\:interface files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 header files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 interface files}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are going to be times when the toolbox reference manuals just don't seem to tell you exactly what you want to know.  For example, what if you just weren't sure if the event record was passed as a pointer or an actual record?  The ultimate reference to settle questions like that once and for all is the actual interface files Pascal reads when you compile a program.\par Do you remember the uses statements we've been putting at the top of our programs?  Here's an example to jog your memory:\par \par }{\f6\fs20 uses Common, QuickDrawII, EventMgr;\par }{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 units}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Common}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\f4 What this does is tell the compiler to go read the interfaces for three units.  As it turns out, these three units happen to be the definitions for the tool calls from QuickDraw II and the Event Manager.  The third unit, Common, is where all of the definitions used by more that one tool are stuffed.  Things like }{\f6\fs20 rect}{\f4 , which is used by both QuickDraw II and the Window Manager (to name two of the many tools), are defined in Common.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The interface files that the compiler reads are in the libraries folder, and if you try to look at them you will find out that you can't.  That's not because anyone is trying to keep secrets from you, though, it's simply because the compiler can read these predigested interface files faster than it can read a text file.  In fact, the text versions of the interface files are also on your ORCA/Pascal disks in a folder called TOOL.INTERFACE.  Whenever you aren't sure how a tool call is made, or what variable name is used for something like the kinds of events in the }{\f6\fs20 eventWhat}{\f4  field, you can always look at the header files themselves.  In fact, I highly recommend printing the interface files and putting them in a notebook that you can use while you program.\par The reason you don't need to look at these tool interface files constantly, though, is that they are created directly from the Apple IIGS toolbox reference manuals.  Whenever possible, the actual names from the toolbox reference manuals are used in the Pascal interface files.  When the toolbox reference manuals say that the name of the call to get an event is }{\f6\fs20 GetNextEvent}{\f4 , you can count on the Pascal header files spelling the name exactly that way.  When the toolbox reference manual lists the event code for a null event as }{\f6\fs20 nullEvt}{\f4  (Table 7-6, page 7-50 of }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 1}{\f4 ) you can count on a variable called }{\f6\fs20 nullEvt}{\f4  being defined in either the Event Manager header file or Common.  (It happens to be in Common, since the same name is used for the same reason by another call in the Window Manager.)\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SysBeep}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PtInRect}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Problem 1.5.  The Miscellaneous Toolbox has a call called }{\f6\fs20 SysBeep}{\f4  that makes the familiar error beep.  QuickDraw II has a call called }{\f6\fs20 PtInRect}{\f4  that tests to see if a point is in a given rectangle.  Use these calls to create a program that beeps continually any time the mouse is inside of a rectangle that extends from 50 to 150 vertically, and 160 to 480 horizontally.  Set the program up so it quits when you press any key.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In this lesson, we've covered the basics of starting the tools and setting up an event driven program.  You've learned how to use the ORCA/Pascal }{\f6\fs20 StartDesk}{\f4  and }{\f6\fs20 EndDesk}{\f4  procedures to start up and shut down the tools.  You've learned how to use the Event Manager's }{\f6\fs20 GetNextEvent}{\f4  call to create an event driven program, and how to use the keyboard and mouse from a desktop program.  Along the way, you've also started to learn to use other reference sources, like Appendix A or the }{\i\f4 Apple IIGS Toolbox Reference}{\f4 , the ORCA/Pascal reference manual, and the toolbox header files from the ORCA/Pascal disks.\par Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 GetNextEvent\tab InitCursor\tab LineTo\tab MoveTo\par PaintRect\tab PenNormal\tab PtInRect\tab SetBackColor\par SetForeColor\tab SetPenMode\tab SetSolidPenPat\tab SysBeep\par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 2 \endash  What's on the Menu?}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 2 \endash  What's on the Menu?}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 2 \endash  What's on the Menu?\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 {\*\bkmkstart bk13}This lesson deals with creating and using menus.  You'll learn how to create a system menu bar, and how to make use of the system menu bar in your programs.  In the process, you will learn a new way to handle events, using }{\f6\fs20 TaskMaster}{\f4  to take care of a lot of detailed work for you, and you'll learn how to create a program that can be used with desk accessories.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Setting Up A Menu Bar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Setting Up A Menu Bar\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Menu bars are one of the most distinctive features of an Apple program.  These days, menu bars have been copied by all sorts of systems, but the pull-down menu bar of the Apple interface is still the champ when it comes to completeness, flexibility, ease of use, and perhaps most important of all, consistency.  That last point is one you'll see over and over in the course.  Consistency is a valuable and often overlooked trait of the Apple desktop interface.  When you can learn how to use a menu bar once, in one program, and instantly understand how to use any menu bar in any program on a Macintosh, Apple IIGS, or even the old Lisa computer... well, that's a big advantage over learning how to use a new user interface each time you pick up a new program, which is exactly what you had to do before Apple created their standard interface for all programs.\par Getting back to the topic, this lesson is about menu bars \endash  how to create them and how to use them.  Menus are created and manipulated using the Menu Manager, a tool we haven't used up to this point.  To understand how to create a menu bar, we'll start by looking at how menus are organized by the Menu Manager.  Take a look at the menu bar in Figure 2.1.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw340\pich254\picwgoal6800\pichgoal5080\macpict\bliptag-373072443\blipupi72{\*\blipuid e9c35dc518f74fd912dfd8feaa0cc576}0dd40000000000fe01541101a00082a0008e01000a000000000240030898002c0000000000f001580000000000f001540000000000f00154000102d50002d50007003fd8ff01c00007003fd8ff01c00007003fd8ff01c00007003fd8ff01c00007003fd8ff01c00007003fd8ff01c0000c003ff8000001fcff00f0e6000c003ff8000001fcff00f0e60010003ffe0000e0fc000001fcff00f0e60010003ffe0000e0fc000001fcff00f0e60014103f000003c0001f18700001ff07e73ffff0e60014103f000003c0001f18700001ff07e73ffff0e60014103f0000fcf8001800300001ff3fe7fcfff0e60014103f0000fcf8001800300001ff3fe7fcfff0e60014103f0003fff0001838307801ff3f06383ff0e60014103f0003fff0001838307801ff3f06383ff0e60014103f0003ffe0001e1830cc01ff0e673cfff0e60014103f0003ffe0001e1830cc01ff0e673cfff0e60014103f0003fffc00181830fc01ff3e673cfff0e60014103f0003fffc00181830fc01ff3e673cfff0e60014103f0001fff800181830c001ff3e673c9ff0e60014103f0001fff800181830c001ff3e673c9ff0e60014103f0000fbe000183c787801ff07061e3ff0e60014103f0000fbe000183c787801ff07061e3ff0e6000c003ff8000001fcff00f0e6000c003ff8000001fcff00f0e6000c003ff8000001fcff00f0e6000c003ff8000001fcff00f0e60007003fd8ff01c00007003fd8ff01c0000f003ef802010380f8000003ed02ff000d003cf800010180f8000003eb000f003cf820012180f8000003ed20ff000d003cf800010180f8000003eb0015003ef80205038001980018fe00020187e3ed02ff0013003cf80005018001980018fe00020187e3eb0016003cf82005218001980018fe0003010063e0ee20ff0014003cf80005018001980018fe0003010063e0ec0016003ef8020c03800199f0f8f0000006c0c3e2ee02ff0014003cf8000c01800199f0f8f0000006c0c3e0ec0016003cf82002218001fe9906980000086183e0ee20ff0014003cf80002018001fe9906980000086183e0ec0016003ef80202038001fe9906980000084303e2ee02ff0014003cf80002018001fe9906980000084303e0ec0016003cf82002218001fe9906980000096603e0ee20ff0014003cf80002018001fe9906980000096603e0ec0016003ef8020c038000f198f8f0000006c7e3e2ee02ff0014003cf8000c018000f198f8f0000006c7e3e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec0010003ef802010380f8000103e2ee02ff000e003cf800010180f8000103e0ec000e003cf8200021f6ff00e0ee20ff000c003cf8000001f6ff00e0ec0010003ef802010380f8000103e2ee02ff000e003cf800010180f8000103e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec0014003ef80203038000f0fc0003018663e2ee02ff0012003cf80003018000f0fc0003018663e0ec0016003cf820052180019800c0fe0003010663e0ee20ff0014003cf800050180019800c0fe0003010663e0ec0016003ef802050380018199f0fe000306c3c3e2ee02ff0014003cf800050180018199f0fe000306c3c3e0ec0016003cf820052180018198c0fe0003086183e0ee20ff0014003cf800050180018198c0fe0003086183e0ec0016003ef802050380018198c0fe00030843c3e2ee02ff0014003cf800050180018198c0fe00030843c3e0ec0016003cf820052180019998d8fe0003096663e0ee20ff0014003cf800050180019998d8fe0003096663e0ec0016003ef80205038000f0f870fe000306c663e2ee02ff0014003cf80005018000f0f870fe000306c663e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec0010003ef802010380f8000103e2ee02ff000e003cf800010180f8000103e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec000e003ef8020003f6ff00e2ee02ff000c003cf8000001f6ff00e0ec000e003cf8200021f6ff00e0ee20ff000c003cf8000001f6ff00e0ec0014003ef8020303ffff0ffcff03fe7c3fe2ee02ff0012003cf8000301ffff0ffcff03fe7c3fe0ec0014003cf8200321fffe67fcff03fef99fe0ee20ff0012003cf8000301fffe67fcff03fef99fe0ec0016003ef8020c03fffe7f0e0e67fffff939ffe2ee02ff0014003cf8000c01fffe7f0e0e67fffff939ffe0ec0016003cf8200c21fffe7e666667fffff799ffe0ee20ff0014003cf8000c01fffe7e666667fffff799ffe0ec0016003ef8020c03fffe7e666647fffff7b9ffe2ee02ff0014003cf8000c01fffe7e666647fffff7b9ffe0ec0016003cf8200c21fffe66666727fe7ff6999fe0ee20ff0014003cf8000c01fffe66666727fe7ff6999fe0ec0016003ef8020c03ffff0f0e0ee7febff93c3fe2ee02ff0014003cf8000c01ffff0f0e0ee7febff93c3fe0ec0016003cf8200021feff04fe7f0ffedffeff00e0ee20ff0014003cf8000001feff04fe7f0ffedffeff00e0ec0013003ef8020003fbff01feeffeff00e2ee02ff0011003cf8000001fbff01feeffeff00e0ec0013003cf8200021fbff01fef7feff00e0ee20ff0011003cf8000001fbff01fef7feff00e0ec0013003ef802010380fb0004f8000003e2ee02ff0011003cf800010180fb0004f8000003e0ec0013003cf820012180fb0004fc000003e0ee20ff0011003cf800010180fb0004fc000003e0ec0015003ef80203038001f0fd0004fe018633e2ee02ff0013003cf80003018001f0fd0004fe018633e0ec0016003cf8200c218001980000c000d8010633e0ee20ff0014003cf8000c018001980000c000d8010633e0ec0016003ef8020c03800198f8f1f0f00c06c633e2ee02ff0014003cf8000c01800198f8f1f0f00c06c633e0ec0016003cf8200c218001f19980c19800086363e0ee20ff0014003cf8000c018001f19980c19800086363e0ec0016003ef8020c0380018198f0c1f800084363e2ee02ff0014003cf8000c0180018198f0c1f800084363e0ec0016003cf8200c218001819818d980000961c3e0ee20ff0014003cf8000c018001819818d980000961c3e0ec0016003ef8020c03800180f8f070f00006c1c3e2ee02ff0014003cf8000c01800180f8f070f00006c1c3e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec0010003ef802010380f8000103e2ee02ff000e003cf800010180f8000103e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec0010003ef802010380f8000103e2ee02ff000e003cf800010180f8000103e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec0013003ef80204038000f0e0fb000103e2ee02ff0011003cf80004018000f0e0fb000103e0ec0013003cf820042180019860fb000103e0ee20ff0011003cf800040180019860fb000103e0ec0016003ef802070380018060f0f9b0fe000103e2ee02ff0014003cf800070180018060f0f9b0fe000103e0ec0016003cf8200721800180619999c0fe000103e0ee20ff0014003cf8000701800180619999c0fe000103e0ec0016003ef802070380018061f99980fe000103e2ee02ff0014003cf800070180018061f99980fe000103e0ec0016003cf820072180019861819980fe000103e0ee20ff0014003cf800070180019861819980fe000103e0ec0016003ef80202038000fef001f980fe000103e2ee02ff0014003cf80002018000fef001f980fe000103e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec0010003ef802010380f8000103e2ee02ff000e003cf800010180f8000103e0ec0010003cf820012180f8000103e0ee20ff000e003cf800010180f8000103e0ec000e003ef8020003f6ff00e2ee02ff000c003cf8000001f6ff00e0ec000e003cf720003ff7ff00e0ee20ff000c003cf700001ff7ff00e0ec0006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60098002c00f0000000fe015800f0000000fe015400f0000000fe0154000106003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60006003ed802ff0004003cd60006003cd820ff0004003cd60002d50002d500a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 2-1:  Typical Menu Bar\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Looking at this menu bar, it's easy to understand how menus are organized.  Just as with the physical menu bar you use in a program, the Menu Manager sets up the menu bar in a hierarchy.  At the top level you have the menu bar itself.  A menu bar is made up of several menus; these are the names and symbols you see written across the top of the menu bar.  A menu is more than just the name at the top, though \endash  it is also a list of menu items.  At the bottom level, these menu items make up the menu.  So, to review, a typical menu bar consists of the menu bar itself, which contains several menus, each of which contain several menu items.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 system menu bar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Later on we'll take a look at some variations on this theme, some of which are pretty easy to add to your programs and some of which take a lot of skill, and probably some assembly language.  There is one point I'd like to bring up here, though:  so far, we've said absolutely nothing about }{\i\f4 where}{\f4  the menu bar goes.  When you think of a menu bar, you no doubt think of the white bar at the top of your screen when you run a desktop program.  That's natural enough, since almost all menu bars you will ever see will be right there, at the top of the screen.  That menu bar is called the system menu bar, and it's the one all complete desktop programs have.  The Menu Manager isn't picky, though, and you can create other menu bars if you want to.  You can create several different system menu bars, and switch between them, or you can even put a menu bar in a window.  Most of the time the system menu bar is the only one you will use, though, and it's the only one we'll actually use in the programs in this course.\par Now that you know how menu bars are organized, let's take a look at how they are created.  When you start the Memory Manager, you get a system menu bar for free, whether you end up using it or not.  In fact, you saw this in the last lesson.  Even though the programs we wrote in Lesson 1 did not use menus, there was still a white menu bar at the top of the screen when your programs ran.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InsertMenu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Desk Manager}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Filling in the menu bar is a multi-step process.  You start with a series of calls to }{\f6\fs20 NewMenu}{\f4 , which takes a menu definition you create, and }{\f6\fs20 InsertMenu}{\f4 , which places the new menu in the system menu bar.  After all of the menus have been created and inserted into the menu bar, you make a few more calls to tell the Menu Manager to do some housekeeping; this is when the Menu Manager figures out how big the menus are, and so forth.  You also make a call to the Desk Manager to fill in and New Desk Accessories (NDAs) that the tools can find, and finally, you make a Menu Manager call to draw the new menu bar.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 By far the most complicated of these steps is creating the initial record that will be passed to }{\f6\fs20 NewMenu}{\f4  to create a new menu for the menu bar.  This record is actually a multi-line character string, with one line for the menu name, and one additional line for each of the items that will be in the menu when you pull it down.  Let's start by looking at the Pascal code to create one of these menus, and then we'll pull it apart piece by piece to find out how all of this works.\par \par }\pard \widctlpar\adjustright {\f6\fs20    new(s);                              \{create the edit menu\}\par    s^ := concat('>> Edit \\N3',chr(return));\par    s^ := concat(s^,'--Undo\\N250',chr(return));\par    s^ := concat(s^,'--Cut\\N251',chr(return));\par    s^ := concat(s^,'--Copy\\N252',chr(return));\par    s^ := concat(s^,'--Paste\\N253',chr(return));\par    s^ := concat(s^,'--Clear\\N254',chr(return));\par    s^ := concat(s^,'.',chr(return));\par    menuHand := NewMenu(s);\par    InsertMenu(menuHand,0);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dynamic memory}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This menu definition comes from the Frame.Pas program, from the ORCA/Pascal samples disk.  I've modified the menu a bit, taking out some advanced features like keyboard equivalents and separators; we'll add those back later in the lesson.  Other than those simplifications, though, it's a pretty typical edit menu \endash  more typical than you probably ever thought, as you'll find out later in this lesson.  As you can see, the main part of the work involves creating a long string; we're doing that here with a series of string concatenation calls.  The string itself is allocated dynamically using Pascal's }{\f6\fs20 new}{\f4  call.  This is an important point about this menu string:  once you call }{\f6\fs20 NewMenu}{\f4 , the string is used by the Menu Manager for work space and for the names of the menu and menu items.  You have to make sure that each menu you create has its own, distinct string for the menu definition.  In other words, you can't use the same string variable for two different menus.  You also have to make sure the string doesn't move or vanish.  Local variables in a Pascal procedure or function literally go away, with the memory quickly reused for other purposes, when you return from the subroutine, so you can't use local string variables for the menu strings.  That leaves two practical possibilities: using globals variables, and, as you see here, using dynamically allocated memory that stays at a fixed location.  You could use global string variables, but I recommend that you don't.  Dynamically allocated memory doesn't take up room until the program starts to run, so you end up using less disk space, and the program that loads faster, when you use dynamically allocated memory.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The menu string itself is made up of a series of lines.  In this program, I used return characters to end each line.  The value for the return character is 13, and if you look at the top of the program, you will find a constant definition that declares return as 13.  The Menu Manager also lets you use the character chr(0) to end a line, but you should use the same one for the entire menu.  Because of the way Pascal handles strings internally, it's a little easier for us to use the return character to end a line, rather than chr(0).\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu title}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Each menu has to have at least two lines, one for the menu itself, and one at the end of the list that just has a period.  The Menu Manager looks for that last period to mark the end of the menu list, and if you forget it, the Menu Manager will happily romp and stomp through memory looking for the end of the list.  As I'm sure you realize, that's a bad thing.\par The line that defines the menu itself is }{\f6\fs20 '>> Edit \\N3'}{\f4 .  This line actually has three separate parts.  The first is a two-character sequence, }{\f6\fs20 '>>'}{\f4 .  You have to start the menu line with these two characters; the Menu Manager uses them both to mark the start of the menu, and later makes use of the two bytes of memory that the characters occupy for some internal housekeeping.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu title}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The second part of the menu string is the name of the menu itself, }{\f6\fs20 ' Edit '}{\f4 .  You can pick pretty much anything you want for a menu name, as long as it doesn't include a backslash character.  It may seem a bit strange to include spaces in the name of the menu, but there's actually a very good reason for including them: when the Menu Manager creates the text for the menu bar itself, it crams all of the characters from all of the menu names together on the menu bar.  If you don't put spaces around the name of the menu, all of the menu names get shoved together.  The reason for putting the same number of spaces to the left and right of the menu name has to do with the way menu names are highlighted.  When you pull down a menu, the Menu Manager highlights the name of the menu.  The spaces are a part of that name, so it's a good idea to put the same number of spaces on the left and right sides of the menu name; if you don't, the highlighted menu names will look lopsided.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu control characters}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last part of the menu name string is a set of control characters, in this case }{\f6\fs20 '\\N3'}{\f4 .  This field always starts with the backslash character, which is why you can't use a backslash character as part of a menu name.  The backslash character is followed by a series of control codes.  We'll spend a lot of time looking at these control characters in detail later, since they let you do all sorts of fun things, like create menu items with dividers, bold text, and so forth.  The one thing that is common to all of the menu items, though, is a menu number for the menu name string, and a menu item number for menu item strings.  In each case, the menu item number is the character N (to tell the Menu Manager that we're defining a number) followed by the number itself.  That number is typed just like you would type an integer value in a Pascal program.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Menu items are defined pretty much the same way the menu name itself is defined.  For example, the string for the Clear menu item is }{\f6\fs20 '--Clear\\N254'}{\f4 .  Like the menu name string, a menu item string starts off with two characters, but this time we use }{\f6\fs20 '--'}{\f4  instead of }{\f6\fs20 '>>'}{\f4 .  Looking back, you can see that all of the menu items start off with the same two }{\f6\fs20 '--'}{\f4  characters.  The menu item string also has a name part, but this time we don't need to put spaces around the name.  Finally, there is a section for control characters, and again we need to set up a number, this time a menu item number.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items\:order}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you pull down a menu, you want the menu items to appear in a certain order.  It may seem pretty obvious, but just to be complete it's worth pointing out that the menu items in the finished menu will be listed from top to bottom in the same order you put the menu item strings in this master string.  While this example shows menu item numbers that step up in a nice order, that isn't actually required; the menu item number is just a reference number, and has no effect whatsoever on the position of the menu item in the finished menu.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 With the menu string complete, it's time to see what we do with it.  The }{\f6\fs20 NewMenu}{\f4  tool call takes the menu string as a parameter and returns a menu handle.  It turns out that we really don't need the handle very often.  The menu handle is handy for tricks like adding and removing menus as the program runs, but for a normal, fixed menu bar, we just don't need it.  For that reason, in simple programs, I just use the same local variable for the menu handle on each }{\f6\fs20 NewMenu}{\f4  call, and throw the value away when I leave the subroutine that sets up the menu bar.\par The call to }{\f6\fs20 NewMenu}{\f4  itself is pretty simple.  Just to keep you from flipping back a couple of pages, here it is again:\par \par }{\f6\fs20 menuHand := NewMenu(s);}{\f4 \par \par }\pard \qj\widctlpar\adjustright {\f4 While the call is fairly simple, we really should stop and look at the variables involved.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20       menuHand: menuHandle;             \{for 'handling' menus\}\par }\pard \widctlpar\adjustright {\f6\fs20       s: textPtr;                       \{for building menus\}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The value returned by }{\f6\fs20 NewMenu}{\f4  is a menu handle, and the Menu Manager interface file has a type declared for the menu handle.  We'll talk about handles in detail later in the course, but for now just think of the menu handle as a value you use to tell the Menu Manager what menu you are talking about.  Even after you learn what handles are, that's still a great way of thinking about a menu handle, because that's just what the menu handle is: a way of telling the Menu Manager which menu you mean when you make calls to remove or modify a menu.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 textBlock}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The other variable involved is the string itself, but it isn't just any old ordinary string.  The string we pass to the Menu Manager is a pointer to a }{\f6\fs20 textBlock}{\f4 , a type defined in Common.Pas.  The definitions for these types look like this:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    textBlock = packed array [1..300] of char;\par }\pard \widctlpar\adjustright {\f6\fs20    textPtr = ^textBlock;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 p-strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 c-strings}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 These definitions bring up a number of nasty little points about strings in Pascal and the toolbox, the most important of which is that they come in two major flavors, the so-called p-strings (or Pascal strings) and c-strings.  P-strings get their name from UCSD Pascal, which introduced a string type to the Pascal language that starts with a length byte and is followed by up to 255 additional characters.  Despite the name, p-strings have absolutely nothing to do with standard Pascal.  They are really a sort of wart on the language, introduced for no good reason by a Pascal implementation that became a model for other microcomputer Pascals.  C-strings, on the other hand, are a sequence of characters ending with the null character, chr(0).  That's pretty much the same thing as a standard Pascal string, with the only difference being that standard Pascal strings are fixed length.  ORCA/Pascal combines standard Pascal strings and c-strings, treating chr(0) as a character that means "ignore the rest of the characters in this string."\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenu}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The reason for bringing up this bit of computer language history is that most toolbox calls that use string parameters expect p-strings, but }{\f6\fs20 NewMenu}{\f4  is one of the exceptions.  }{\f6\fs20 NewMenu}{\f4  expects a simple array of characters, with no leading length byte.  One pretty good reason for making an exception from the general rule of using p-strings with }{\f6\fs20 NewMenu}{\f4  is that it isn't hard to build a menu string with more than 255 characters, which is all a p-string can handle.  Standard Pascal strings, on the other hand, can have up to }{\f6\fs20 maxint}{\f4  characters, which is 32767 characters in ORCA/Pascal.  True c-strings can be as long as available memory, but 32767 characters is more than enough for menu strings \endash  the Apple IIGS 80 column text screen only holds 1920 characters, after all.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 textBlock}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string\: length}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Taking a look at the definition of }{\f6\fs20 textBlock}{\f4 , you see that the string array for a menu string can have up to 300 characters.  This is an artificial limit imposed by the ORCA/Pascal interface files; you can use any positive number you want.  Longer strings let you define longer menus, but take up a lot more room if you don't use all of the space.  Shorter strings take up less memory, but there is a bigger chance you will overflow the string.  In fact, overflowing the string is a real possibility with a 300 character string.  Our normal looking Edit menu uses 75 characters, and it isn't hard to imagine using slightly longer names, bumping the total up to, say, 100 characters.  Our menu only has five menu items, too, and you've almost certainly seen menus with fifteen to twenty menu items.  In short, very long menus can easily be too long for a }{\f6\fs20 textBuffer}{\f4  as defined by the ORCA/Pascal interface file.  If you overflow this array, you will write on memory that does not belong to the array, causing all sorts of problems, so keep the size limit in mind when you create long menus.  If your menu is too long, you have two viable options:  change the ORCA/Pascal header files, or create a new type in your program and use type casting to convince the Pascal compiler you know what you are doing, and really want to pass a string with your new type to }{\f6\fs20 NewMenu}{\f4 .\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InsertMenu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Calling }{\f6\fs20 NewMenu}{\f4  creates a menu, but it doesn't do anything with the menu.  The menu is in limbo, defined but not useable.  The next step is to put the menu into the system menu bar with the call\par \par }\pard \widctlpar\adjustright {\f6\fs20    InsertMenu(menuHand,0);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par One parameter is pretty obvious: }{\f6\fs20 menuHand}{\f4  is the handle of the menu, returned by }{\f6\fs20 NewHandle}{\f4 , and tells the Menu Manager what menu you want to put in the system menu bar.  The other parameter tells the Menu Manager where to put the menu.  This parameter is the number of some menu that is already in the menu bar; the new menu will appear right after the menu with the menu number you pass.  The number of the menu is something you set up; it's the menu number you declared in the menu string for the menu itself.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Hard coding menu numbers, like hard coding any other number, is something programmers learn to avoid whenever possible, since it means you have to be a lot more careful when you change a program.  For that reason, most of the time you should pass a menu number of 0, which tells the Menu Manager to place the new menu before any other menu in the menu bar.  When the Menu Manager draws the menu, it will draw the front menu at the left of the menu bar, the next menu right after it, and so on.  Thinking about this for a moment, you can see that you will end up building your menus and inserting them in reverse order, putting the rightmost menu in the menu bar first, and the leftmost menu in the menu bar last.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixMenuBar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawMenuBar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 After defining all of your menus, you need to make two more calls to the Menu Manager:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    height := FixMenuBar;                \{draw the completed menu bar\}\par }\pard \widctlpar\adjustright {\f6\fs20    DrawMenuBar;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The first of these calls tells the Menu Manager to scan the list of menus, doing some internal calculations to figure out how high the menu bar should be and how large each menu will be when it is pulled down.  The height of the menu bar is something you might want to keep around if you are doing something on the screen that depends on exact placement, but in most programs you will use moveable, sizeable windows, and don't need to worry much about the height of the menu bar, or for that matter, how large the screen is.  In most of our programs, we'll just throw this value away.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Finally, the last step is to draw the menu bar.  This is when the text for the menus appears at the top of the screen.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Menu Events}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Menu Events\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 mouse down event}}}{\f4 {\*\bkmkstart bk6}When you sit down to use a desktop program, the first thing you are likely to do is move the cursor to the menu bar and press the mouse button.  A menu pops up, and as you move the mouse down the menu, the various menu items are highlighted.  If you let up on the mouse button while an item is selected the program does something.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FindWindow}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Menu Manager does an awful lot of the work to make all of this happen for you, but it doesn't do everything.  The Menu Manager will handle all of the work once it knows that the mouse has been pressed on the menu bar, and give you back the number of the menu item that the user selected, or a zero if the user didn't end up selecting anything, but you have to figure out that the mouse was pressed in the menu bar and call the Menu Manager.  Strangely enough, the easiest way to see if the mouse has been pressed in the menu bar is with a Window Manager call, }{\f6\fs20 FindWindow}{\f4 .  When your program's event loop sees a mouse down event, it calls }{\f6\fs20 FindWindow}{\f4  to see if the user clicked on anything in particular, or just has a nervous twitch.  Here's a typical call to }{\f6\fs20 FindWindow}{\f4 :\par \par }\pard \widctlpar\adjustright {\f6\fs20    where := FindWindow(wPtr, myEvent.eventWhere.h, myEvent.eventWhere.v);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 FindWindow}{\f4  checks to see if the location is in a window, setting }{\f6\fs20 wPtr}{\f4  to the handle of the window if it is.  Since our programs don't have any windows yet, }{\f6\fs20 wPtr}{\f4  will always be set to nil.  For our purposes, the value }{\f6\fs20 FindWindow}{\f4  returns is a lot more important; it is one of the following values:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\li360\keepn\widctlpar\tx1440\tx3240\adjustright {\f4\ul number}{\f4 \tab }{\f4\ul name}{\f4 \tab }{\f4\ul description}{\f4 \par 0\tab }{\f6\fs20 wNoHit}{\f4 \tab Not in anything.\par 16\tab }{\f6\fs20 wInDesk}{\f4 \tab Somewhere on the desktop.\par 17\tab }{\f6\fs20 wInMenuBar}{\f4 \tab In the system menu bar; this is the one we want.\par 19\tab }{\f6\fs20 wInContent}{\f4 \tab In the content area of a window.\par 20\tab }{\f6\fs20 wInDrag}{\f4 \tab In the title bar of a window.\par 21\tab }{\f6\fs20 wInGrow}{\f4 \tab In the grow region of a window.\par 22\tab }{\f6\fs20 wInGoAway}{\f4 \tab In the close box of a window.\par 23\tab }{\f6\fs20 wInZoom}{\f4 \tab In the zoom box of a window.\par 24\tab }{\f6\fs20 wInInfo}{\f4 \tab In the information bar of a window.\par }\pard \qj\fi-2880\li3240\keepn\widctlpar\tx1440\tx3240\adjustright {\f4 25\tab }{\f6\fs20 wInSpecial}{\f4 \tab In a special menu item bar.  These are the menus with numbers from 250 to 255.\par }\pard \qj\li360\keepn\widctlpar\tx1440\tx3240\adjustright {\f4 26\tab }{\f6\fs20 wInDeskItem}{\f4 \tab In a desk accessory.\par 27\tab }{\f6\fs20 wInFrame}{\f4 \tab In the window, but not in any specific area defined in this table.\par 28\tab }{\f6\fs20 wInactMenu}{\f4 \tab In an inactive menu item.\par >32767\tab }{\f6\fs20 wInSysWindow}{\f4 \tab In a system window.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 2-1:  FindWindow Return Codes\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInSpecial}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInMenuBar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Of all of this list, the only values we care about at this point are }{\f6\fs20 wInMenuBar}{\f4  and }{\f6\fs20 wInSpecial}{\f4 , which tell us that the mouse click was in the system menu bar.  (}{\f6\fs20 wInMenuBar}{\f4  is returned for menu items with a number of 256 or higher, while }{\f6\fs20 wInSpecial}{\f4  is returned for the reserved menu item numbers 250 to 255.)  We'll learn about these other possibilities gradually, with most of them popping up when we learn to use windows.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MenuSelect}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 system menu bar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Assuming }{\f6\fs20 FindWindow}{\f4  returns }{\f6\fs20 wInMenuBar}{\f4 , the next step is to call }{\f6\fs20 MenuSelect}{\f4 , which handles all of the hard work of actually highlighting the menu, drawing the menu items, tracking the mouse as the user moves over various menu items, and telling us what, if anything, finally got selected.  The call to }{\f6\fs20 MenuSelect}{\f4  looks like this:\par \par }\pard \widctlpar\adjustright {\f6\fs20    MenuSelect(myEvent, nil);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 taskData}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The second parameter tells the Menu Manager what menu bar to use; nil tells it to use the system menu bar.  It's a little odd, but very efficient, for }{\f6\fs20 MenuSelect}{\f4  to take our task record as the first of the parameters.  The reason this works so well is that }{\f6\fs20 MenuSelect}{\f4  needs to know where the mouse was clicked, and needs to tell us what menu item was selected.  }{\f6\fs20 MenuSelect}{\f4  plucks the mouse location out of the event record, and sets a parameter in the event record to tell us what happened.  Rather than changing one of the fields in the event record that is used by }{\f6\fs20 GetNextEvent}{\f4 , }{\f6\fs20 MenuSelect}{\f4  changes a field called }{\f6\fs20 taskData}{\f4  to tell us what happened.  In the abbreviated version of the event record we looked at in Lesson 1, I didn't even show the }{\f6\fs20 taskData}{\f4  field, but if you check the header files, it's there.  We'll go into detail about this and the other fields in the event record a little later in this lesson.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In any case, }{\f6\fs20 MenuSelect}{\f4  sets the least significant word of }{\f6\fs20 taskData}{\f4  to the menu item number of the selected menu item, while the most significant word is set to the menu number.  Pulling these two numbers out of the longint }{\f6\fs20 taskData}{\f4  is a little tricky; here's one way to do it:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    type\par       long = record\par          case boolean of\par             true : (long: longint);\par             false: (lsw,msw: integer);\par }\pard \widctlpar\adjustright {\f6\fs20          end;\par \par    ...\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    menuID := long(myEvent.taskData).msw;\par }\pard \widctlpar\adjustright {\f6\fs20    menuItemID := long(myEvent.taskData).lsw;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 highlighting menus}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:highlighting}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HiliteMenu}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's one other detail about handling menu events that you need to know.  When a command is being executed, your program is supposed to highlight the menu where the menu item is located.  To help you out, }{\f6\fs20 MenuSelect}{\f4  leaves the menu highlighted, and it's up to you to unhighlight the menu after the command is finished.  Here's how you unhighlight a menu:\par \par }\pard \widctlpar\adjustright {\f6\fs20    HiliteMenu(false, menuID);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 You could highlight a menu this way, too, by passing true as the first parameter.\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk6}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu events}{\rxe bk6}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Sample Program \endash  Quit}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Sample Program \endash  Quit\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Well, finally, we know enough to write a program that actually creates and uses a menu bar!  We'll start with a simple sample program that has one menu and one menu item: quit.  The traditional place for the Quit command is in the File menu, so our one menu will be called File.  To handle the events, we'll use exactly the method described in the last section.  Here's the complete sample program:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Quit                                                         \}\par \{                                                               \}\par \{  This program creates a menu bar with one command: quit.      \}\par \{                                                               \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{---------------------------------------------------------------\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 program Quit;\par \par uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,\par }\pard \li180\widctlpar\adjustright {\f6\fs20      DialogMgr, MenuMgr;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 const\par    return        = 13;                  \{return key code\}\par  \par }\pard \li180\widctlpar\adjustright {\f6\fs20    File_Quit     = 256;                 \{Menu ID #s\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type\par    long = record                        \{for splitting 4 bytes to 2 bytes\}\par       case boolean of\par          true : (long: longint);\par          false: (lsw,msw: integer);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    done: boolean;                       \{tells if the program should stop\}\par    myEvent: eventRecord;                \{last event returned in event loop\}\par    menuNum,menuItemNum: integer;        \{menu number & menu item number\}\par    where: integer;                      \{where the mouse event occurred\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    wPtr: grafPortPtr;                   \{window where event occurred\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure InitMenus;\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20    \{ Initialize the menu bar.                                   \}\par  \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    var\par       height: integer;                  \{height of the largest menu\}\par       menuHand: menuHandle;             \{for 'handling' windows\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       s: textPtr;                       \{for building menus\}\par  \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    begin \{InitMenus\}\par    new(s);                              \{create the file menu\}\par    s^ := concat('>> File \\N1',chr(return));\par    s^ := concat(s^,'--Quit\\N256',chr(return));\par    s^ := concat(s^,'.',chr(return));\par    menuHand := NewMenu(s);\par    InsertMenu(menuHand,0);\par    height := FixMenuBar;                \{draw the completed menu bar\}\par    DrawMenuBar;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{InitMenus\}\par \par  \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure HandleMenu;\par \par    \{ Handle a menu selection.                                   \}\par  \par    begin \{HandleMenu\}\par    case menuItemNum of                  \{go handle the menu\}\par       file_Quit:   done := true;\par       otherwise:   ;\par       end; \{case\}\par    HiliteMenu(false, menuNum);          \{unhighlight the menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{HandleMenu\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{Quit\}\par StartDesk(640);\par InitMenus;                              \{set up the menu bar\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 InitCursor;                             \{show the cursor\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 done := false;                          \{main event loop\}\par repeat\par    if GetNextEvent(everyEvent, myEvent) then\par       if myEvent.eventWhat = mouseDownEvt then begin\par          with myEvent.eventWhere do\par             where := FindWindow(wPtr, h, v);\par          if where = wInMenuBar then begin\par             MenuSelect(myEvent, nil);\par             menuNum := long(myEvent.taskData).msw;\par             menuItemNum := long(myEvent.taskData).lsw;\par             if menuItemNum <> 0 then\par                HandleMenu;\par             end; \{if\}\par          end; \{if\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 until done;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 EndDesk;\par end. \{Quit\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 2-1:  Quit Program\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par One of the tips I've picked up over the years is to type in a program like this.  On the surface, that seems a little strange, since the program is on disk.  Glancing through the program, everything looks pretty familiar, too.  After all, we've spent several pages in an exhaustive analysis of how to create a program like this one.  Strangely enough, though, you will get a lot from typing it in.  The reason is that your mind works faster than your fingers, and while you type, you're really reading the program, and hopefully going over it in your mind.  Besides, all good programmers love the feel of a set of keys gently giving way beneath their fingers, right?  I'd suggest typing it in, but I suppose you can load it from disk.  In any case, try the program out, and take the time to go through the code carefully.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 debugger}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you decide to use PRIZM's debugger on this program be sure and use the Step Through command to execute }{\f6\fs20 InitMenus}{\f4 .  The debugger is a desktop program, too, and it is using the menu bar.  One of the few real problems with this arrangement is that you can't safely step through code between an }{\f6\fs20 InsertMenu}{\f4  call and a }{\f6\fs20 FixMenuBar}{\f4  call, at least not if you switch between the debugger menu bar and your program's menu bar in the process.\par Frankly, the simplest way to handle this problem is to set a break point right after the call to }{\f6\fs20 InitMenus}{\f4 .  That way your program's menu bar already exists when you start debugging.  The other alternative is to use ORCA/Debugger, which is a text-based Init debugger.  It doesn't have its own menu bar, so there isn't a conflict.\par \par Problem 2.1.  Add the Edit menu described at the start of the lesson to this program.  The File menu should be on the left, and the Edit menu on the right.\par \par Problem 2.2.  Create a program with a File menu with the item Quit, just as in the sample program.  Add a second menu called Beep, with three menu items, named One, Two, and Three.  Use menu item numbers of 301, 302 and 303 for these three menu items, and use menu number 2 for the menu itself.\par Set up your program so SysBeep is called once when menu item One is selected, twice when menu item Two is selected, and three times for Menu item Three.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Keyboard Equivalents}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Keyboard Equivalents\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 events\:keyboard}}}{\f4 {\*\bkmkstart bk7}Pulling down a menu to tell a program what to do is easy to understand, and it's easy to quickly see what commands are available or to check the name of a command.  It's also slow, especially in a program like a text editor, where your hands are generally on the keyboard.  That's the biggest reason for keyboard equivalents, which let you hold down the command key (A.K.A. the open-apple key) and type a key to execute a menu command.\par When you set up a menu, there are two distinct parts to the process: creating the menu in the first place, and changing the event loop so your program recognized the menu command.  The same is true with keyboard equivalents.  The first step is to learn how to change the menu definition strings to add a keyboard equivalent.  Once the keyboard equivalent is in the menu definition, we'll have to change the event loop to handle keystrokes that are really keyboard equivalents for menu commands.\par Keyboard equivalents are defined when the menu item itself is defined.  You tell the Menu Manager about the keyboard equivalent using a control code, just as you used to tell the Menu Manager what menu item ID number to assign to the menu item.  The * character is used to start a keyboard equivalent; this is followed by two characters that will be used as the keyboard equivalents.  As one example, it is customary to use Q as the keyboard equivalent for the quit command.  An uppercase Q is different from a lowercase q, though, so you need to tell the Menu Manager to support both the uppercase Q and lowercase q by listing both keys as keyboard equivalents.  Adding this keyboard equivalent to our Quit menu item from the sample program in the last section, the line that defines the Quit menu looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\v\f4 \par }\pard \fi360\widctlpar\adjustright {\f6\fs20    s^ := concat(s^,'--Quit\\N256*Qq',chr(return));\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can put in the control codes in any order you like.  For example, putting the keyboard equivalent first and the menu item ID last, like this:\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs20    s^ := concat(s^,'--Quit\\*QqN256',chr(return));\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 works perfectly well.  The Menu Manager does the same thing either way.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 You could actually use any two characters you like for the keyboard equivalents.  Using '*Rq' would tell the Menu Manager to allow an uppercase R or a lowercase q as a keyboard equivalent.  On the other hand, just because you can do something doesn't necessarily mean you should do it, as any parent of a teenager has undoubtedly pointed out on more than one occasion.  The whole point of the Apple interface is to create programs that are easy to use and consistent between applications.  Doing bizarre things like picking out strange keyboard equivalent key combinations doesn't exactly help the user keep track of what keys can be used.  In general, the rule is to use the uppercase and lowercase versions of the same key.  That way, it doesn't matter whether the shift key \endash  in particular, the shift lock key \endash  is down or up.\par The Menu Manager draws the first of the key equivalents in the menu.  Since the order of the keys does matter, it's important to follow the common conventions there, too.  The rule is to put the uppercase letter first for alphabetic keys, and the unsifted letter first for non-alphabetic keys.  The Quit menu item is a great example of an alphabetic keyboard equivalent.  Non-alphabetic keyboard equivalents are more rare, but certainly not unheard of.  The ORCA/Pascal desktop environment (PRIZM) is an example of a program that uses several non-alphabetic keyboard equivalents.  One of these is the [ key, used for the Step command.  The second key PRIZM uses for the Step command is the \{ key, so the keyboard equivalent is written as '*[\{' in the menu item definition for the Step command.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 eventModifiers}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 eventMessage}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you want to use a keyboard equivalent in a program, you hold down the command key and press the key.  Inside the desktop program they key down event is reported just like any other keypress.  Holding down the command key while you press Q to quit a program does not change the key the Event Manager reports in the }{\f6\fs20 eventMessage}{\f4  field.  The only way your program can tell that the command key was held down is to look at the }{\f6\fs20 eventModifiers}{\f4  field of the event record to see if the appleKey bit is set, like this:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20 if (myEvent.eventModifiers & appleKey) <> 0 then\par }\pard \fi360\widctlpar\adjustright {\f6\fs20    \{the command key (A.K.A. open-apple key) is down\};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MenuKey}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If the }{\f6\fs20 appleKey}{\f4  bit is set your program should make a }{\f6\fs20 MenuKey}{\f4  call.  The }{\f6\fs20 MenuKey}{\f4  call does the same thing for key down events that the }{\f6\fs20 MenuSelect}{\f4  call did for mouse down events.  In fact, the parameters are event the same.  The }{\f6\fs20 MenuKey}{\f4  call looks like this:\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs20 MenuKey(myEvent, nil);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Putting these ideas together, we can update the sample program from the last section to handle a keyboard equivalent of Q or q for the Quit command.  The complete sample program is shown in Listing 2-2.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Quit                                                         \}\par \{                                                               \}\par \{  This program creates a menu bar with one command: quit.      \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par program Quit;\par \par uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,\par }\pard \li180\widctlpar\adjustright {\f6\fs20      DialogMgr, MenuMgr;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 const\par    return        = 13;                  \{return key code\}\par  \par }\pard \li180\widctlpar\adjustright {\f6\fs20    File_Quit     = 256;                 \{Menu ID #s\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type\par    long = record                        \{for splitting 4 bytes to 2 bytes\}\par       case boolean of\par          true : (long: longint);\par          false: (lsw,msw: integer);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    done: boolean;                       \{tells if the program should stop\}\par    myEvent: eventRecord;                \{last event returned in event loop\}\par    menuNum,menuItemNum: integer;        \{menu number & menu item number\}\par    where: integer;                      \{where the mouse event occurred\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    wPtr: grafPortPtr;                   \{window where event occurred\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure InitMenus;\par \par    \{ Initialize the menu bar.                                   \}\par  \par    var\par       height: integer;                  \{height of the largest menu\}\par       menuHand: menuHandle;             \{for 'handling' windows\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       s: textPtr;                       \{for building menus\}\par  \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    begin \{InitMenus\}\par    new(s);                              \{create the file menu\}\par    s^ := concat('>> File \\N1',chr(return));\par    s^ := concat(s^,'--Quit\\N256*Qq',chr(return));\par    s^ := concat(s^,'.',chr(return));\par    menuHand := NewMenu(s);\par    InsertMenu(menuHand,0);\par    height := FixMenuBar;                \{draw the completed menu bar\}\par    DrawMenuBar;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{InitMenus\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure HandleMenu;\par \par    \{ Handle a menu selection.                                   \}\par  \par    begin \{HandleMenu\}\par    case menuItemNum of                  \{go handle the menu\}\par       file_Quit:   done := true;\par       otherwise:   ;\par       end; \{case\}\par    HiliteMenu(false, menuNum);          \{unhighlight the menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{HandleMenu\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{Quit\}\par StartDesk(640);\par InitMenus;                              \{set up the menu bar\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 InitCursor;                             \{show the cursor\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 done := false;                          \{main event loop\}\par repeat\par    if GetNextEvent(everyEvent, myEvent) then\par }\pard \li180\widctlpar\adjustright {\f6\fs20       case myEvent.eventWhat of\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20          mouseDownEvt: begin\par             with myEvent.eventWhere do\par                where := FindWindow(wPtr, h, v);\par             if where = wInMenuBar then begin\par                MenuSelect(myEvent, nil);\par                menuNum := long(myEvent.taskData).msw;\par                menuItemNum := long(myEvent.taskData).lsw;\par                if menuItemNum <> 0 then\par                   HandleMenu;\par                end; \{if\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20             end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20          keyDownEvt, autoKeyEvt: begin\par             if (myEvent.eventModifiers & appleKey) <> 0 then begin\par                MenuKey(myEvent, nil);\par                menuNum := long(myEvent.taskData).msw;\par                menuItemNum := long(myEvent.taskData).lsw;\par                if menuItemNum <> 0 then\par                   HandleMenu;\par                end; \{if\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20             end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20          otherwise: \{do nothing\};\par          end; \{case\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 until done;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 EndDesk;\par end. \{Quit\}\par }\pard \qj\li180\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 2-2:  Quit Program with Keyboard Equivalents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 2.3.  In Problem 2.2 you created a program with a beep menu, with menu commands to beep one, two or three times.  Add keyboard equivalents of 1, 2 or 3 for these three commands.\par As it turns out, the shifted characters for 1 and 2 (! and @) don't work as key equivalents.  In addition, a numeric shift is one case where it doesn't make a lot of sense to allow any key but the number.  In a case like this, one way to set things up is to use the same key for both the shifted and unshifted keys.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Standard Keyboard Equivalents}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Standard Keyboard Equivalents\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You've probably used enough desktop programs to be pretty used to Q as the keyboard equivalent of the Quit command.  You may also be used to Z for Undo, X for Cut, C for Copy, and V for Paste.  The reason you are so used to these keys isn't because they are the only good choices, it's because Apple laid out a set of standard keyboard equivalents long ago, and people who write programs using the Apple interface follow these guidelines rather closely.  Standard keys for keyboard equivalents, along with other guidelines like what commonly used alert buttons should be called, how color should be used, and so forth are laid out in a book called }{\i\f4 Human Interface Guidelines: The Apple Desktop Interface}{\f4 .  This is a book that every desktop programmer should have around as a reference book, and it is also a book I would recommend that you read at least twice, once right after you finish this course and again in about 6 months to a year.  Creating programs that are consistent with Apple's guidelines is very important for a lot of reasons, but you can't create consistent programs if you don't know what the guidelines are!\par Getting back to keyboard equivalents, Table 2-2 shows the keys Apple has set aside for specific purposes.\par \par }\pard \li1440\widctlpar\tx2880\tx4320\adjustright {\f4 Menu\tab Item\tab Keyboard Equivalent\par Apple\tab Help\tab ?\par File\tab New\tab N\par File\tab Open\tab O\par File\tab Save\tab S\par File\tab Quit\tab Q\par Edit\tab Undo\tab Z\par Edit\tab Cut\tab X\par Edit\tab Copy\tab C\par Edit\tab Paste\tab V\par Style\tab Plain Text\tab P\par Style\tab Bold\tab B\par Style\tab Italic\tab I\par }\pard \li1440\keepn\widctlpar\tx2880\tx4320\adjustright {\f4 Style\tab Underline\tab U\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 2-2:  Standard Keyboard Equivalents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Two other keyboard equivalents are so common that they are de facto standards.  }{\outl\f4\fs20 \u-3\'f0}{\f4 W is generally used as the keyboard equivalent of the Close command in the File menu, while }{\outl\f4\fs20 \u-3\'f0}{\f4 A is used for the Select All option in the Edit menu.  It is also very, very common to see }{\outl\f4\fs20 \u-3\'f0}{\f4 P used as the keyboard equivalent for Print, even though this key is technically reserved for plain text.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkend bk7}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 keyboard equivalent\bxe }{\rxe bk7}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 TaskMaster}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 TaskMaster\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk9}{\*\bkmkstart bk10}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 system window}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If handling all of these various kinds of events, and figuring out whether they apply to the menu bar or not, is starting to seem a little complicated, just wait:  it gets worse!  As you add the various checks for your own windows, then pile checks for NDA windows (or system windows, in the parlance of the toolbox reference manuals), things get genuinely messy.  And, on the Macintosh, that's just what you have to do.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fortunately the folks who wrote the Apple IIGS toolbox realized that all of this was sort of a mess, and created an easier way of handling all of the routine tasks that almost any desktop program must handle.  }{\f6\fs20 TaskMaster}{\f4  is a tool call that works a lot like the Event Manager's }{\f6\fs20 GetNextEvent}{\f4  call, but instead of handing back a raw event, }{\f6\fs20 TaskMaster}{\f4  does all of the standard work for you, and gives you back the results.  For example, when }{\f6\fs20 TaskMaster}{\f4  sees that you have a mouse down event, it calls }{\f6\fs20 FindWindow}{\f4  automatically.  If }{\f6\fs20 FindWindow}{\f4  tells }{\f6\fs20 TaskMaster}{\f4  that the mouse down event occurred in the system menu bar, }{\f6\fs20 TaskMaster}{\f4  calls }{\f6\fs20 MenuSelect}{\f4 , and returns }{\f6\fs20 wInMenuBar}{\f4  as the event.  Since }{\f6\fs20 MenuSelect}{\f4  is already putting the information about the menu that was selected in the }{\f6\fs20 taskData}{\f4  field of the event record, you can still pluck out the menu item and menu number the same way you did when you handled the calls for yourself.\par To see how this works, let's take a look at the Quit program's event loop again, this time using }{\f6\fs20 TaskMaster}{\f4 .\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20 done := false;                          \{main event loop\}\par myEvent.taskMask := $001F7FFF;          \{let task master do it all\}\par repeat\par    event := TaskMaster(everyEvent, myEvent);\par    case event of                        \{handle the events we need to\}\par       wInSpecial,\par       wInMenuBar: HandleMenu;\par       otherwise: ;\par       end; \{case\}\par }\pard \fi360\widctlpar\adjustright {\f6\fs20 until done;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Let's face it \endash  that's a lot easier than the event loop we wrote to handle the raw events for ourselves!  And this event loop does exactly the same thing as the one we wrote for the Quit program.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 While it is called just like }{\f6\fs20 GetNextEvent}{\f4 , }{\f6\fs20 TaskMaster}{\f4  needs to get a little more information from us, and needs to be able to pass back more information to handle some complicated events we haven't run across yet.  All of this extra information is passed in an extended version of the event record.  Once the }{\f6\fs20 TaskMaster}{\f4  fields are added, the event record looks like this:\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20    eventRecord = record\par        eventWhat:      integer;\par        eventMessage:   longint;\par        eventWhen:      longint;\par        eventWhere:     point;\par        eventModifiers: integer;\par        \{the following fields are used by TaskMaster\}\par        taskData:       longint;\par        taskMask:       longint;\par        lastClickTick:  longint;\par        ClickCount:     integer;\par        TaskData2:      longint;\par        TaskData3:      longint;\par        TaskData4:      longint;\par        lastClickPt:    point;\par }\pard \li360\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 In fact, if you look in the Pascal interface files, this is the event record that is used throughout the toolbox, even for Event Manager calls like }{\f6\fs20 GetNextEvent}{\f4 .\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 taskMask}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 For the most part, we'll ignore these extra fields for now, and talk about them in detail when we get to a point in the course where we actually need to use the field.  Starting to talk about things like the result returned by the }{\f6\fs20 defProc}{\f4  of a control in a window just wouldn't make much sense until after we talk about windows and controls!  There is one field of the task record that we need to learn about right away, though, and that's the }{\f6\fs20 taskMask}{\f4  field.\par }{\f6\fs20 TaskMaster}{\f4  can do an awful lot of things for you, but that isn't always what you want.  There are situations where you want to handle something for yourself so you can do something a little unusual.  For example, the Reversi game on the ORCA/Pascal samples disk has one window that lists the moves made so far in the game; you can see a copy of this window in Figure 2-2.  The moves list is in two columns, with a picture of the appropriate type of piece at the top of each column.  When you scroll the window, the moves move up, but the pieces at the top of the column don't.  Well, as it happens, }{\f6\fs20 TaskMaster}{\f4  can do a fine job of scrolling a window for us, but in this case, I didn't want to scroll the entire window, only part of it \endash  so I told }{\f6\fs20 TaskMaster}{\f4  to do a lot of things for me, but not to scroll the windows.  That I handled for myself.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw105\pich196\picwgoal2100\pichgoal3920\macpict\bliptag705900242\blipupi72{\*\blipuid 2a132ed2a5a7c81725b0e18bfdd42824}0b1d0000000000c400691101a00082a0008e01000a000000000240030898000e0000000000c400700000000000c400690000000000c40069000102f30002f30007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe000c053ffe0003ffbefbff01fe000c053ffe0003ffbefbff01fe000c053ffe7ff3ff9cfbff01fe000c053ffe7ff3ff9cfbff01fe000f0d3ffe7ff3ff88e1ce70f0fffffe000f0d3ffe7ff3ff88e1ce70f0fffffe000f0d3ffe7ff3ff80ccce6667fffffe000f0d3ffe7ff3ff80ccce6667fffffe000f0d3ffe7ff3ff94cce4e070fffffe000f0d3ffe7ff3ff94cce4e070fffffe000f0d3ffe7ff3ff9ccce4e7fe7ffffe000f0d3ffe7ff3ff9ccce4e7fe7ffffe000f0d3ffe0003ff9ce1f1f0f0fffffe000f0d3ffe0003ff9ce1f1f0f0fffffe0007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe0007003ff6ff01fe000a0038f9000403fffffe000a0038f9000403fffffe000a0038f9000403000006000a0038f9000403000006000a0038f9000403006006000a0038f9000403006006000a0038f9000403019806000a0038f9000403019806000a0038f9000003fe0600000a0038f9000003fe0600000f0038fe00093fc001fe0003180186000f0038fe00093fc001fe0003180186000f0038fe0009fff0070380037e07e6000f0038fe0009fff0070380037e07e6000f0938000001fff80c00c003fe0600000f0938000001fff80c00c003fe0600000f0938000001fff808004003fe0600000f0938000001fff808004003fe0600000f0938000001fff808004003fe0600000f0938000001fff808004003fe0600000f0d38000001fff80c00c00307fe06000f0d38000001fff80c00c00307fe06000f0038fe0009fff007038003000006000f0038fe0009fff007038003000006000f0038fe00093fc001fe0003fffffe000f0038fe00093fc001fe0003fffffe000a0038f900040380808e000a0038f900040380000e000a0038f900040388080e000a0038f900040380000e000a0038f900040380808e000a0038f900040380000e000a0038f900040388080e000a0038f900040380000e000a0038f900040380808e000a0038f900040380000e000f0d38007800f8780f8f000388080e000f0d38007800f8780f8f000380000e000f0d3800cc00cccc0c180003fffffe000f0d3800cc00cccc0c180003fffffe000f0d38000cc0cccc0c1f0003c0001e000f0d38000cc0cccc0c1f0003c0001e000f0d38003800cc780f198003c0001e000f0d38003800cc780f198003c0001e000f0d38000c00cccc0c198003c0001e000f0d38000c00cccc0c198003c0001e000f0d3800cc00cccc0c198003c0001e000f0d3800cc00cccc0c198003c0001e000f0d380078c0f8780f8f0003c0001e000f0d380078c0f8780f8f0003c0001e000a0038f9000403c0001e000a0038f9000403c0001e000f0d3800c000f8f01f3f0003c0001e000f0d3800c000f8f01f3f0003c0001e000f0d3800cc00c18018030003c0001e000f0d3800cc00c18018030003c0001e000f0d3800ccc0c1f018060003c0001e000f0d3800ccc0c1f018060003c0001e000f0d3800cc00f1981e0c0003c0001e000f0d3800cc00f1981e0c0003c0001e000f0d3800fc00c198180c0003c0001e000f0d3800fc00c198180c0003c0001e000f0d38000c00c19818180003c0001e000f0d38000c00c19818180003c0001e000f0d38000cc0c0f01f180003c0001e000f0d38000cc0c0f01f180003c0001e000a0038f9000403c0001e000a0038f9000403c0001e000f0d3800f800f9f00f1f0003c0001e000f0d3800f800f9f00f1f0003c0001e000f0d3800c000c18019980003c0001e000f0d3800c000c18019980003c0001e000f0d3800f8c0c1f0181f0003c0001e000f0d3800f8c0c1f0181f0003c0001e000f0d38000c00f0181b818003c0001e000f0d38000c00f0181b818003c0001e000f0d38000c00c01819818003c0001e000f0d38000c00c01819818003c0001e000f0d3800cc00c19819998003c0001e000f0d3800cc00c19819998003c0001e000f0d380078c0c0f00f0f0003c0001e000f0d380078c0c0f00f0f0003c0001e000a0038f9000403fffffe000a0038f9000403fffffe000f0d38007800ccc00f8f000308080e000f0d38007800ccc00f8f000300000e000f0d3800c000cccc0c19800380808e000f0d3800c000cccc0c19800300000e000f0d3800f8c0cccc0c19800308080e000f0d3800f8c0cccc0c19800300000e000f0d3800cc00fccc0f0f000380808e000f0d3800cc00fccc0f0f000300000e000f0d3800cc00ccfc0c19800308080e000f0d3800cc00ccfc0c19800300000e000f0d3800cc00cc0c0c19800380808e000f0d3800cc00cc0c0c19800300000e000f0d380078c0cc0c0f8f000308080e000f0d380078c0cc0c0f8f000300000e000a0038f900040380808e000a0038f900040300000e000f0d3800fc00f8f00f0f000308080e000f0d3800fc00f8f00f0f000300000e000f0d38000c00c1981998000380808e000f0d38000c00c1981998000300000e000f0d380018c0c198199f000308080e000f0d380018c0c198199f000300000e000f0d38003000f0f01999800380808e000f0d38003000f0f01999800300000e000f0d38003000c1981f99800308080e000f0d38003000c1981f99800300000e000f0d38006000c1981999800380808e000f0d38006000c1981999800300000e000f0d380060c0c0f0198f000308080e000f0d380060c0c0f0198f000300000e000a0038f900040380808e000a0038f900040300000e000f0d38007800f8f807878003fffffe000f0d38007800f8f807878003fffffe000f0d3800cc00ccc00cccc003000006000f0d3800cc00ccc00cccc003000006000f0d3800ccc0ccf80c0cc00307fe06000f0d3800ccc0ccf80c0cc00307fe06000f0938007800f80c0c078003fe0600000f0938007800f80c0c078003fe0600000f043800cc00ccfe0c01c003fe0600000f043800cc00ccfe0c01c003fe0600000f093800cc00cccc0cccc003fe0600000f093800cc00cccc0cccc003fe0600000f0d380078c0f878078780037e07e6000f0d380078c0f878078780037e07e6000a0038f9000403180186000a0038f9000403180186000f0938007800f87807878003fe0600000f0938007800f87807878003fe0600000f0d3800cc00cccc0ccc0003019806000f0d3800cc00cccc0ccc0003019806000f0d3800ccc0cccc0c0f8003006006000f0d3800ccc0cccc0c0f8003006006000f0d3800cc00f8780dccc003000006000f0d3800cc00f8780dccc003000006000f0d38007c00cccc0cccc003fffffe000f0d38007c00cccc0cccc003fffffe000f0d38000c00cccc0cccc00300000e000f0d38000c00cccc0cccc00300000e000f0d380078c0f878078780037fe00e000f0d380078c0f878078780037fe00e000a0038f900040360600e000a0038f900040360600e000f0d38303c00cc780f878003607fee000f0d38303c00cc780f878003607fee000f0d38f04c00ccc00cccc00360606e000f0d38f04c00ccc00cccc00360606e000f0d3830ccc0ccf80cc0c0037fe06e000f0d3830ccc0ccf80cc0c0037fe06e000f0d3830cc00fccc0cc380030c006e000f0d3830cc00fccc0cc380030c006e000f0d3830cc00cccc0cc0c0030c006e000f0d3830cc00cccc0cc0c0030c006e000f0d3830c800cccc0cccc0030c006e000f0d3830c800cccc0cccc0030c006e000f0d38fcf0c0cc780f8780030fffee000f0d38fcf0c0cc780f8780030fffee000a0038f900040300000e000a0038f900040300000e0007003ff6ff01fe0007003ff6ff01fe0002f30002f300a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 2-2:  Reversi Moves Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The }{\f6\fs20 taskMask}{\f4  field of the extended event record is a bit mapped field.  Each of the bits corresponds to one of the things you can have }{\f6\fs20 TaskMaster}{\f4  do for you.  In most cases, if you set the bit, }{\f6\fs20 TaskMaster}{\f4  will take care of the details of handling the situation for you, but if you set the bit to zero, }{\f6\fs20 TaskMaster}{\f4  will let you handle the details for yourself.\par I used a qualifier there you should pay attention to:  I said you set the bit to one to ask }{\f6\fs20 TaskMaster}{\f4  to do something }{\i\f4 in most cases}{\f4 .  There are a few cases where you do just the opposite, clearing the bit when you want }{\f6\fs20 TaskMaster}{\f4  to perform the action, and setting the bit when }{\f6\fs20 TaskMaster}{\f4  should let you handle it.  It probably seems odd to be so inconsistent, but this inconsistencies really did come about with the best of intentions.  You have to realize that the Apple IIGS toolbox didn't just pop into being in its current form; it evolved over time.  In the original version of the }{\f6\fs20 TaskMaster}{\f4  call, and even today, there were some fields that were not used.  Apple specified from the very beginning that you had to set the unused bits to zero.  That gave them a predictable value to count on when they added new features to }{\f6\fs20 TaskMaster}{\f4 , and in those cases, zero was used for the default case, and one when you wanted to ask }{\f6\fs20 TaskMaster}{\f4  to pick the unusual situation.\par {\*\bkmkstart bk8}Table 2-3 lists the various bits in the }{\f6\fs20 taskMask}{\f4  field.  The description tells you what will happen if you }{\i\f4 set}{\f4  the bit.  If you clear the bit (set it to zero) then the action described will }{\i\f4 not}{\f4  take place.  In several cases, you have to set one bit before another can be used.\par Only a few of the bits are likely to make sense to you at this point.  Don't worry, we'll cover most of them in the course as you learn more about the window manager, controls, desk accessories, and so forth.  For example, you have to set the }{\f6\fs20 tmFindW}{\f4  bit or }{\f6\fs20 TaskMaster}{\f4  will not need to even look at the value of }{\f6\fs20 tmMenuSel}{\f4 .\par \par }\pard \qj\fi-2700\li3060\widctlpar\tx2520\adjustright {\f6\fs20 tmMenuKey}{\f4 \tab 0\tab Call }{\f6\fs20 MenuKey}{\f4  to see if a keypress is a menu keyboard equivalent.\par }{\f6\fs20 tmUpdate}{\f4 \tab 1\tab For window update events, call the window's default draw routine.\par }{\f6\fs20 tmFindW}{\f4 \tab 2\tab Call }{\f6\fs20 FindWindow}{\f4  for mouse down events.\par }{\f6\fs20 tmMenuSel}{\f4 \tab 3\tab Call }{\f6\fs20 MenuSelect}{\f4  when }{\f6\fs20 FindWindow}{\f4  determines that a mouse down event occurred in a menu bar.\par }{\f6\fs20 tmOpenDA}{\f4 \tab 4\tab Open a desk accessory when }{\f6\fs20 MenuSelect}{\f4  determines that a menu event was a selection of an NDA.\par }{\f6\fs20 tmSysClick}{\f4 \tab 5\tab When }{\f6\fs20 FindWindow}{\f4  returns an event from a system window (an NDA window is a system window), call }{\f6\fs20 SystemClick}{\f4  to handle the event.\par }{\f6\fs20 tmDragW}{\f4 \tab 6\tab If }{\f6\fs20 FindWindow}{\f4  returns }{\f6\fs20 wInDrag}{\f4 , handle moving the window around on the screen.\par }{\f6\fs20 tmContent}{\f4 \tab 7\tab If }{\f6\fs20 FindWindow}{\f4  detects an event in a window's content region, and the window is not the active window, select the window.\par }{\f6\fs20 tmClose}{\f4 \tab 8\tab If }{\f6\fs20 FindWindow}{\f4  detects a mouse down in a close box, call }{\f6\fs20 TrackGoAway}{\f4 .  If }{\f6\fs20 TrackGoAway}{\f4  returns true, return }{\f6\fs20 wInGoAway}{\f4 ; otherwise, return }{\f6\fs20 nullEvt}{\f4 .\par }{\f6\fs20 tmZoom}{\f4 \tab 9\tab If }{\f6\fs20 FindWindow}{\f4  detects a mouse down in a zoom box, call }{\f6\fs20 TrackZoom}{\f4 .  If }{\f6\fs20 TrackZoom}{\f4  returns true, call }{\f6\fs20 ZoomWindow}{\f4  to change the window's size.\par }{\f6\fs20 tmGrow}{\f4 \tab 10\tab If }{\f6\fs20 FindWindow}{\f4  detects a mouse down in the grow box of a window, call }{\f6\fs20 GrowWindow}{\f4  to allow the window's size to be changed, then }{\f6\fs20 SizeWindow}{\f4  to actually update the window's size.\par }{\f6\fs20 tmScroll}{\f4 \tab 11\tab Handle scroll bars.\par }{\f6\fs20 tmSpecial}{\f4 \tab 12\tab Handle special menu items.\par }{\f6\fs20 tmCRedraw}{\f4 \tab 13\tab When a window is activated or deactivated, redraw the controls in the correct state.\par }{\f6\fs20 tmInactive}{\f4 \tab 14\tab If an inactive menu item is selected, return }{\f6\fs20 wInactMenu}{\f4 .  (This is generally used to put up a help dialog telling the user what the menu is for, or what has to happen before it is active.)\par }{\f6\fs20 tmInfo}{\f4 \tab 15\tab Don't activate inactive windows when a mouse down event occurs inside of the information bar of the window.\par }{\f6\fs20 tmContentControls}{\f4 \tab 16\tab If }{\f6\fs20 FindWindow}{\f4  returns }{\f6\fs20 wInContent}{\f4 , call }{\f6\fs20 FindControl}{\f4  and }{\f6\fs20 TrackControl}{\f4  to handle normal control actions.\par }{\f6\fs20 tmControlKey}{\f4 \tab 17\tab Pass key events to controls for control key equivalents.\par }{\f6\fs20 tmControlMenu}{\f4 \tab 18\tab Pass menu events to controls in the active window.\par }{\f6\fs20 tmMultiClick}{\f4 \tab 19\tab Check for multiple clicks and return information about them.\par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2520\adjustright {\f6\fs20 tmIdleEvents}{\f4 \tab 20\tab Send idle events to the controls in the window.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 2-3:  }{\f6\fs20 TaskMaster}{\f4  }{\f6\fs20 taskMask}{\f4  Codes\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }{\f6\fs20 TaskMask}{\f4  codes are one of the few places in this course where I won't use the constant labels, shown in the first column, instead of the number.  In most of our programs, we'll set all of the bits except }{\f6\fs20 tmInfo}{\f4 , and it just takes too long and uses too much space to be clear if you add each and every one of these identifiers together to get your }{\f6\fs20 taskMask}{\f4  code.  If you check back, the example event loop I gave set }{\f6\fs20 taskMask}{\f4  to $001F7FFF.  This happens to be the value you would get by adding all of the constants except }{\f6\fs20 tmInfo}{\f4 .  (The value in column two is the bit number, not the constant value of the label.)  It is also the value we will use for most of our programs, so we'll be letting }{\f6\fs20 TaskMaster}{\f4  do all of the work for us that it can.\par {\*\bkmkend bk8}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 taskMask}{\rxe bk8}}}{\v\f4 \par }{\f4 \par Problem 2.4.  Modify the Quit program to use }{\f6\fs20 TaskMaster}{\f4 , rather than }{\f6\fs20 GetNextEvent}{\f4 , in the main event loop.\par {\*\bkmkend bk9}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMaster\bxe }{\rxe bk9}}}{\*\bkmkend bk10}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event loop}{\rxe bk10}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Apple Menu}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Apple Menu\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 apple menu\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Looking at a menu bar from a fairly typical program, you see one major difference between the full-fledged program's menu bar and the one in the programs we have been creating in this lesson.  The difference is the distinctive Apple menu on the left side of the menu bar.  There are two reasons we haven't created an Apple menu for our programs, yet.  The first is that you need to know a couple of special tricks.  The other reasons is even better, in a way:  we haven't needed one, yet.\par Traditionally, the Apple menu serves two purposes.  At the top of most Apple menus is a menu item called About.  The about menu generally brings up some sort of alert that tells you the name of the program you are running and its version number.  This is also a great place for shareware authors to put those details about where to send money, as well as the traditional spot for any copyright notice.\par Under the About menu you will generally find a list of NDAs, little desktop programs that run from almost any desktop program.\par There are two pieces of information you need to know to create an Apple menu.  The first is how to create the name of the menu itself.  After all, the rainbow Apple isn't something you can type as a menu name!  Apple Computer solves this problem by using the @ character for the apple character.  When you use an @ character, with no other characters at all, as the name of a menu, the Menu Manager draws the rainbow Apple instead of an @ character.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 green apple bug}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color replace highlighting}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Menu Manager inverts the area around the name of a menu when you pull it down.  It reverses the area by flipping each pixel in the area to exactly the opposite color.  For some peculiar reasons that are pretty hard to understand until you learn about color pallets in a later lesson, reversing the rainbow apple turns the entire apple character green.  Of course, most programs leave the rainbow apple in place when you pull down a menu, and only reverse the area around the apple, turning it black.  To perform this trick, the Menu Manager uses a different mechanism to reverse the area on the menu bar.  This technique, which the toolbox reference manuals call color replace highlighting, is used to reverse the menu name when you put an X character in the menu name's control character sequence.\par Putting all of this together, we can create an apple menu with a rainbow apple and an about item with this menu string:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20    new(s);                              \{create the apple menu\}\par    s^ := concat('>>@\\XN1',chr(return));\par    s^ := concat(s^,'--About...\\N257',chr(return));\par    s^ := concat(s^,'.',chr(return));\par    menuHand := NewMenu(s);\par }\pard \fi360\widctlpar\adjustright {\f6\fs20    InsertMenu(menuHand,0);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 2.5.  Add an apple menu to the menu bar for the Quit program.  (Use the version from your solution to Problem 2-4.)  The apple menu should have a menu number of 1, which it will if you use the menu string shown above.  The current version of the Quit program uses 1 for the menu number of the File menu.  Two menus cannot have the same menu number, so be sure and change the menu number for the File menu to 2.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Supporting NDAs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Supporting NDAs\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk12}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Supporting New Desk Accessories turns out to be very easy \endash  at least, it's easy if you use }{\f6\fs20 TaskMaster}{\f4 , like we are now doing.  }{\f6\fs20 TaskMaster}{\f4  handles all sorts of messy details for us.  }{\f6\fs20 TaskMaster}{\f4  keep track of when an NDA is selected from the apple menu, starting the desk accessory when one is selected.  }{\f6\fs20 TaskMaster}{\f4  also checks to see if an event should be handled by a desk accessory that has already been opened, pulling it to front if the desk accessory window isn't the active window, passing menu commands to the desk accessory, and so forth.  You get all of this almost for free.  There are only four things you have to do to support desk accessories in your program:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Make a call to }{\f6\fs20 FixAppleMenu}{\f4  to add the desk accessories to your apple menu.\par 2.\tab Use }{\f6\fs20 TaskMaster}{\f4 , and set the }{\f6\fs20 taskMask}{\f4  codes }{\f6\fs20 tmMenuKey}{\f4 , }{\f6\fs20 tmUpdate}{\f4 , }{\f6\fs20 tmFindW}{\f4 , }{\f6\fs20 tmMenuSel}{\f4 , }{\f6\fs20 tmOpenDA}{\f4 , }{\f6\fs20 tmSysClick}{\f4 , }{\f6\fs20 tmDragW}{\f4 , }{\f6\fs20 tmContent}{\f4 , }{\f6\fs20 tmClose}{\f4 , }{\f6\fs20 tmZoom}{\f4 , }{\f6\fs20 tmGrow}{\f4 , and }{\f6\fs20 tmScroll}{\f4 .\par 3.\tab Create a few standard menus and menu items that desk accessories expect to find, using reserved menu item numbers.\par 4.\tab Start up all of the standard tools that desk accessories assume are started.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Call FixAppleMenu}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Call FixAppleMenu\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk11}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 FixAppleMenu}{\f4  has  single parameter, the menu number for the apple menu.  You should call }{\f6\fs20 FixAppleMenu}{\f4  after you have created all of the menus in the menu bar, but right before you call }{\f6\fs20 FixMenuBar}{\f4  to calculate the size of each menu.  The Menu Manager takes care of all of the details of looking for desk accessories, figuring out what name to use, and adding them to the apple menu.\par Assuming the menu number of the apple menu is 1, here's the call to }{\f6\fs20 FixAppleMenu}{\f4 :\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs20    FixAppleMenu(1);                     \{add desk accessories\}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Actually, you can pass any menu number to }{\f6\fs20 FixAppleMenu}{\f4 , and it will add the desk accessories to the menu you specify.  The convention is to place desk accessories in the apple menu, but if you have some peculiar requirement, you can add them to any menu you prefer.\par {\*\bkmkend bk11}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixAppleMenu}{\rxe bk11}}}{\v\f4 \par }{\f4 \par Problem 2.6.  Start with your solution to Problem 2.5.  Call }{\f6\fs20 FixAppleMenu}{\f4  to add the desk accessories to your apple menu.\par You can run the program, but don't select any desk accessories, yet.  There's one more step you need to make before you can use desk accessories from your program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Use }{\b\f6 TaskMaster}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Use }{\b\v\f6 TaskMaster}{\b\v\f4 \tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Hey, you're already doing this, right?\par I did cheat a little.  When I listed the }{\f6\fs20 taskMask}{\f4  bits that should be set for a desk accessory, I included a few that aren't strictly necessary, but that help things out in the long run.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Standard Menu Items}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Standard Menu Items\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you write an NDA you are allowed to assume that certain menu items exist.  The Menu Manager identifies menu items by a menu item number, so these menus must have a fixed menu item number.  The Menu Manager actually blocks off a whole series of menu item numbers for its own use \endash  when you create a menu item, you must use a menu item number of 256 or higher (the maximum menu item number is 65534).  The Menu Manager uses menu item numbers 0 and 65535 for its own internal bookkeeping, and blocks off menu item numbers 1 to 249 for numbering the NDA menu items.\par The remaining menu item numbers, 250 to 255, must be defined.  These are the ones NDAs assume exist.  Table 2-4 shows a list of the menu item numbers, along with the traditional menu name and menu item name.\par \par }\pard \qj\li2880\keepn\widctlpar\tx4320\tx5760\adjustright {\f4\ul Menu ID}{\f4 \tab }{\f4\ul Menu Name}{\f4 \tab }{\f4\ul Menu Item Name}{\f4 \par 250\tab Edit\tab Undo\par 251\tab Edit\tab Cut\par 252\tab Edit\tab Copy\par 253\tab Edit\tab Paste\par 254\tab Edit\tab Clear\par 255\tab File\tab Close\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 2-4:  Required Menu Items\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par It's fair to ask what would happen if you didn't put these menus in your program, or if you switched the menu items around.  If you leave the menu items out altogether you rob some desk accessories of important capabilities, since using these menu commands is probably the only way to get the desk accessory to do things like cutting text or reversing some action with Undo.  Using the wrong menu item numbers is even worse:  the desk accessory could execute the wrong command, or a user might select a command and expect it to work, but the desk accessory might not recognize the command.\par \par Problem 2.7.  Starting with your solution to Problem 2-6, create a program with all of the required menu items.\par The first menu should be an apple menu.  It should include an About item, and the desk accessories should appear under the About item.\par The second menu should be the File menu.  It should have two items, Close and Quit, in that order.  They should have key equivalents of W and Q, respectively.\par The last menu is the Edit menu.  The Edit menu should have four menu items; they are Undo, with a key equivalent of Z; Cut, with a key equivalent of X; Copy, with a key equivalent of C; Paste, with a key equivalent of V; and Clear.  The menu items should appear in the order listed.\par You can use your program to run NDAs as soon as all of these new menu items are installed.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Minimal Tools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Minimal Tools\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 NDAs are allowed to assume that certain tools have already been started.  The tools that must be started to support NDAs are shown in Table 2-5.  All of these tools are started by }{\f6\fs20 StartDesk}{\f4 , which is what we have been using so far to start the tools.\par \par }\pard \li3600\keepn\widctlpar\adjustright {\f4 Tool Locator\par Memory Manager\par Miscellaneous Tool Set\par QuickDraw II\par Event Manager\par Window Manager\par Menu Manager\par Control Manager\par LineEdit Tool Set\par Dialog Manager\par Scrap Manager\par Desk Manager\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 2-5:  Minimum Tools for NDA Support\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk12}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA\:supporting}{\rxe bk12}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Customizing Your Menu Items}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Customizing Your Menu Items\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu options}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu control characters}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 By now you've used three different control codes in your menus and menu items.  These control codes let you set the menu number or menu item number, define keyboard equivalents, and use color replace to avoid green-apple menu sickness.  There are several other control codes that we haven't used yet.  It's time to get organized and list all of the control codes that are available to you.\par \par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {\f4\ul Character}{\f4 \tab }{\f4\ul Description}{\f4 \par *\tab The two characters that follow this one are used as keyboard equivalents.  The first of the characters is shown in the menu when you pull the menu down.  Most of the time, the first letter will be an uppercase letter or an unshifted keyboard key, while the second letter will be the lowercase equivalent of the uppercase letter or the shifted equivalent of the unshifted key.\par B\tab Use bold text for the menu item.\par C\tab Mark the menu item with the character that follows this one.  This is generally a check mark, which is chr(18).\par D\tab Dim (disable) the menu item.\par H\tab This character is used before a two-byte sequence which defines the menu number or menu item number.  From Pascal, it's generally best to use N, instead.\par I\tab Use italicized text for the menu item.\par N\tab This character is followed by one or more decimal digits.  The resulting number is used as the menu number or menu item number, depending on whether you are defining a menu or a menu item.\par U\tab Underline the text for the menu item.  (But see the note, below!)\par V\tab Place a dividing line under the item.\par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f4 X\tab Use color replace mode to avoid green-apple menu sickness.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 2-6:  Menu String Control Characters\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Let's briefly go over the new menu string control codes to see what they are for.  At the end of this section, you will also get a chance to create a program that demonstrates all of these control codes.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 italics}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 bold}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 underline}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Three of the new control codes are used to control the appearance of the text.  B creates boldface text, I italicizes the text, and U underlines the characters.  You can use these characters in combination, too, so you can create bold italicized text.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 system font}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 underline}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There is one minor problem with underlining: it doesn't usually work.  The character set that is used by the Menu Manager to draw text is called the system font, and the default system font doesn't have room to underline the text, so it doesn't let you try.  Using the default system font, you can tell the Menu Manager to underline the text, but you'll be ignored.  You could change the system font \endash  but that causes more problems that it cures.  Unless you're really desperate, it's best to ignore the underline option for the menus.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:check mark}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 check mark\:see menus}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You've probably used some programs that placed a check mark beside a menu item when you selected some option.  For example, many font menus put a check mark beside the current font and font size.  The C option lets you create a menu item that starts off with a character to the left of the menu item name.  While you generally use a check character for this character, you can actually put in any character you like using the C option.\par There's a problem with the check mark character, of course.  Careful hunting on your trusty keyboard will reveal that there is no such thing as a check mark character.  As it turns out, many Apple IIGS fonts have more than the standard printable characters you see on your keyboard.  Some of these are special foreign characters, like the German \u223\'a7, while some are special characters, like \u8730\'c3.  To get these from Pascal, you must use the chr function to convert the numerical value for the character into a character the concat function can use in a string.  As an example, the line\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs20    s^ := concat(s^,'--Check Me!\\N300C',chr(18),chr(return));\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 defines a menu item with a check mark.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:disabled}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are times when a particular menu command just doesn't make sense.  If there aren't any open windows, it doesn't make much sense to use the Close command, for example.  Any time a menu command can't be used, you can (and should!) disable it.  A disabled menu item is dimmed, with some of the pixels turned off, and you can't select the menu item.  The D control character lets you define a menu item that starts out dimmed.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items\:separators}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Menus can get pretty long, and it helps to organize them a bit when this happens.  As a general rule of thumb, menus are divided up based on groups of similar commands.  A classic example is the apple menu, which has an about item as the first item in the menu, and has a list of desk accessories under the about item.  These two separate classes of menu items are divided with a separator.\par There are two ways to create a separator on the Apple IIGS.  The V control code is one way; this option draws a line just below the menu item containing the V.  Another way is to define a menu item with a title string of }{\f6\fs20 '-'}{\f4 .  The Menu Manager treats this as a special case, drawing dashes across the entire menu bar instead of just writing one character.  (You should dim this menu item, too, using the D character.)\par Most if these control codes can only be used for menu items.  Menus don't need keyboard equivalents, so the * control code can only be used for menu items.  Menus also don't use dividing lines or check marks, so you can't use C or V, either.  The three questionable calls are B, I and U, which control the appearance of the text.  I guess Apple decided that giving programmers control over the style of text used in the menu bar was a bad idea, so you can't use those control codes with a menu, either.\par \par Problem 2.8.  This problem creates a menu sampler program that you can use to explore the various menu item options we've covered in this section.\par Start with your solution to Problem 2-7.  In the apple menu, put a separator under the About... command using }{\f6\fs20 '-'}{\f4  as the menu item title.  Be sure and use a D character in the control character list to disable the menu item.\par Add a new menu to the right of the Edit menu; this menu will show the various styles you can use for a menu item.  Call this menu Style, and include these menu items:  Bold, Underline, Italic, Bold Underline, Bold Italic, Underline Italic, and Bold Underline Italic.  Put in the proper combination of control characters to show off each of these text styles.  (Underline won't work, but you can see that for yourself.)\par The last menu should be called Options.  This menu should have three menu items:  Separator, Dimmed, and Checked.  Use the V control code with the first menu item to separate it from the other two.  Dim the menu item Dimmed, and put a check character to the left of the menu item Checked.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw701\pich203\picwgoal14020\pichgoal4060\macpict\bliptag-622926681\blipupi72{\*\blipuid dadee4a786d3654f1caf5f1020c1aeef}1f5e0000000000cb02bd1101a00082a0008e01000a0000000002d0048098005800000000007402c000000000007402bd00000000007402bd000102a90002a90007033fffffc0ad0027033fffffc0f3000003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc0027033fffffc0f3000003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc0027033fffffc0f3000003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc0027033fff1fc0f3000003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc0027033fff1fc0f3000003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc0027033ffc3fc0f3000003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc002f033ffc3fc0f3000503e0e78fffe0f900050f83f39fff80f900060fc3ffffc7fff0ec000407e1ffffe7feff00e0fc002f033f0307c0f3000503e0e78fffe0f900050f83f39fff80f900060fc3ffffc7fff0ec000407e1ffffe7feff00e0fc002e033f0307c0f3000503e7ffcfffe0f900050f9ff3fe7f80f900060f99cfffe7fff0ec000307ccffe7fdff00e0fc002e033c000fc0f3000503e7ffcfffe0f900050f9ff3fe7f80f900060f99cfffe7fff0ec000307ccffe7fdff00e0fc002f033c000fc0f3000503e7c7cf87e0f900050f9f831c1f80f900060f9f8399e7c3f0ec000807ccc1c1c7870787e0fc002f033c001fc0f3000503e7c7cf87e0f900050f9f831c1f80f900060f9f8399e7c3f0ec000807ccc1c1c7870787e0fc002f033c001fc0f3000503e1e7cf33e0f900050f87339e7f80f900060fc3cf99e799f0ec000807cccce7e733333fe0fc002f033c0003c0f3000503e1e7cf33e0f900050f87339e7f80f900060fc3cf99e799f0ec000807cccce7e733333fe0fc002f033c0003c0f3000503e7e7cf03e0f900050f9f339e7f80f900060ff9cf91e781f0ec000807cccce7e7333387e0fc002f033e0007c0f3000503e7e7cf03e0f900050f9f339e7f80f900060ff9cf91e781f0ec000807cccce7e7333387e0fc002f033e0007c0f3000503e7e7cf3fe0f900050f9f339e4f80f900060f99c9c9e79ff0ec000807cccce4e73333f3e0fc002f033f041fc0f3000503e7e7cf3fe0f900050f9f339e4f80f900060f99c9c9e79ff0ec000807cccce4e73333f3e0fc002f033f041fc0f3000503e7c38787e0f900050f83830f1f80f900060fc3e3b9c3c3f0ec000807e1c1f1c3873387e0fc002f033fffffc0f3000503e7c38787e0f900050f83830f1f80f900060fc3e3b9c3c3f0ec000807e1c1f1c3873387e0fc002b033fffffc0f3000003fdff00e0f900000ffdff0080f900060fffffc3fffff0ec000207ffcffcff00e0fc002b033fffffc0f3000003fdff00e0f900000ffdff0080f900060fffffc3fffff0ec000207ffcffcff00e0fc0027033fffffc0f3000003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc0025003ff1ff010003fdff00e0f900000ffdff0080f900000ffcff00f0ec000007faff00e0fc0021003ff1ff010003f7ff03fe00000ff7ff03f800000fe9ff03fe000007f6ff01fe00220030f20002030003f7ff03fe00000ff7ff03f800000fe9ff03fe000007f6ff01fe00220030f20002030003f700030600000cf700031800000ce9000306000006f600010e00220030f20002030003f700030600000cf700031800000ce9000306000006f600010e00220030f20002030003f700030600000cf700031800000ce9000306000006f600010e00250330001e30f50002030003f700030600000cf700031800000ce9000306000006f600010e003b0330001e30f500060300030001e1c0fd000a03186600000c000cc000c0fe000b0c3f1800000c000fc001e01cef0006060000060003c0f900010e003e0630003330000018f8000603e0030001e1c0fd000a03186600000c000cc000c0fe000b0c3f1800000c000fc001e01cef0006060000060003c0f900010e00420630003330000018f8000603e003000330c0fd000a021867f0000c000cc000c0fe000b08031f80000c000ee000e01cef000607f00006000660fd000006fe00010fe042063000333e1e333ef8000603e003000330c0fd000a021867f0000c000cc000c0fe000b08031f80000c000ee000e01cef000607f00006000660fd000006fe00010fe044063000333e1e333ef8002403e003000300c1e1e1e0000d9b67f0000c000ccf87c780000036061f80000c000ee3e0e0fcef001007f00006000603c7c3e6c7cf878d800fe043013000fd330018f8002403e003000300c1e1e1e0000d9b67f0000c000ccf87c780000036061f80000c000ee3e0e0fcef001007f00006000603c7c3e6c7cf878d800fe043013000fd330018f8001203e003000300c33303300010db67f0000c000cfecc0ec00000430c1f80000c000fc770e1dcef001007f000060003c66666670cc60cce000fe0440230003ffe330018f8001203e003000300c33303300010db67f0000c000cfecc0ec00000430c1f80000c000fc770e1dcef001007f000060003c66666670cc60cce000fe0440230003ffe330018f8001203e003000300c331e3f000109b67f0000c000cfecc0ec0000042181f80000c000ee770e1dcef001007f00006000067e666660cc60ccc000fe043013000fd33001bf8001203e003000300c331e3f000109b67f0000c000cfecc0ec0000042181f80000c000ee770e1dcef001007f00006000067e666660cc60ccc000fe043013000fd33001bf8001203e003000330c33033000012ccc7f0000c000cfecc0ec000004b301f80000c000ee770e1dcef001007f000060006660666660cc6cccc000fe046083000333e1e1f0e3330fa001203e003000330c33033000012ccc7f0000c000cfecc0ec000004b301f80000c000ee770e1dcef001007f000060006660666660cc6cccc000fe045083000333e1e1f0e3330fa000403e0030001fde11be0000d8cc7f0000c00078cc7c7800000363f1f80000c000fc3e1f0fcef001007f000060003c3c7c3e607c3878c000fe03d0030f2000403e0030001fde11be0000d8cc7f0000c00078cc7c7800000363f1f80000c000fc3e1f0fcef001007f000060003c3c7c3e607c3878c000fe0260030f2000203e003f7000307f0000cf700031f80000ce9000307f00006fe000006fa00010fe0260030f2000203e003f7000307f0000cf700031f80000ce9000307f00006fe000006fa00010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0210030f2000203e003f7000307f0000cf700031f80000ce9000307f00007f5ff00e0210030f2000203e003f7000307f0000cf700031f80000ce9000307f00007f5ff00e0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe03d0030f2000703e0030001e00180fe0008030787f0000c000780fc000d0c331f80000c000cc000c0000e0cf1000607f00006000282fd000020fe00010fe03d0030f2000703e0030001e00180fe0008030787f0000c000780fc000d0c331f80000c000cc000c0000e0cf1000607f00006000282fd000020fe00010fe03d0030f2000703e0030003300006fe0009020cc7f0000c000cc006fd000c08331f80000c000cc000c00006f0000607f00006000440fd000040fe00010fe03d0030f2000703e0030003300006fe0009020cc7f0000c000cc006fd000c08331f80000c000cc000c00006f0000607f00006000440fd000040fe00010fe0420030f2001503e003000333338f8000000d8cc7f0000c000c0ccf80fe000f361e1f80000c000ccf87c78d861c7c3cf3000b07f000060002222a8a8282a0fe00010fe0420030f2001503e003000333338f8000000d8cc7f0000c000c0ccf80fe000f361e1f80000c000ccf87c78d861c7c3cf3000b07f000060002222a8a8282a0fe00010fe0410030f2000703e0030003333186fe000910ccc7f0000c000c0cc6fd0007430c1f80000c000cfecc04ce060c6666f3000b07f000060004411451444440fe00010fe0410035f2550757e0030003333186fe000910ccc7f0000c000c0cc6fd0007430c1f80000c000cfecc04ce060c6666f3000b07f000060004411451444440fe00010fe0410035f2550757e0030003333186fe0009108cc7f0000c000c0cc6fd000f421e1f80000c000ccccccfcc060c667ef3000b07f00006000222228a22a220fe00010fe0410030f2000703e0030003333186fe0009108cc7f0000c000c0cc6fd000f421e1f80000c000ccccccfcc060c667ef3000b07f00006000222228a22a220fe00010fe0420030f2001503e0030003333186c0000012ccc7f0000c000cccc6c0fe00074b331f80000c000cfecc040c060c6660f3000b07f000060004411451440440fe00010fe0420030f2001503e0030003333186c0000012ccc7f0000c000cccc6c0fe00074b331f80000c000cfecc040c060c6660f3000b07f000060004411451440440fe00010fe0420030f2001503e0030001e1f3c38000000d8787f0000c000787c380fe000f36331f80000c00078cc7c78c0f1e663cf3000b07f00006000282a28a2282a0fe00010fe0420030f2001503e0030001e1f3c38000000d8787f0000c000787c380fe000f36331f80000c00078cc7c78c0f1e663cf3000b07f00006000282a28a2282a0fe00010fe0250030f2000503e003000030fa0003c7f0000cf700031f80000ce9000307f00006f600010fe0250030f2000503e003000030fa0003c7f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0220030f2000203e003f7000307f0000cf700031f80000ce9000307f00006f600010fe0210030f2000203e003f6ff02f0000cf700031f80000ce9000307f00006f600010fe0210030f2000203e003f6ff02f0000cf700031f80000ce9000307f00006f600010fe0220030f2000303e0001ff7ff02f0000cf700031f80000ce9000307f00006f600010fe0290730001e001c00001cf9000303e0001ff7ff02f0000cf700031f80000ce9000307f00006f600010fe0380730001e001c00001cf9000103e0f300030c000780fc000b0c1e1f80000c0003c0000383ef001007f000060003c600000600006000000fe03a09300033000c00000c0018fb000103e0f300030c000780fc000b0c1e1f80000c0003c0000383ef001007f000060003c600000600006000000fe03a09300033000c00000c0018fb000103e0f300030c000cc0fc000b08331f80000c000183000180ef001007f0000600066600000600006000000fe03c0b3000301f0c1e330c1f3e1e36fd000103e0f300030c000cc0fc000b08331f80000c000183000180ef001007f0000600066600000600006000000fe03f0b3000301f0c1e330c1f3e1e36fd000103e0f300150c000c078f8cc0000036301f80000c000187c3e1870ff0001007f00006030607c3c3c663c3e000000fe03f0b300030330c33330c33183338fd000103e0f300150c000c078f8cc0000036301f80000c000187c3e1870ff0001007f00006030607c3c3c663c3e000000fe03e0b300030330c33330c33183338fd000103e0f300160c000c0cccccc0000043301f80000c0001830661831980f1000207f000fd06fe6606c6666000000fe03e0b300030330c30330c33183330fd000103e0f300160c000c0cccccc0000043301f80000c0001830661831980f1000207f000fd06fe6606c6666000000fe03f0b300030330c30330c33183330fd000103e0f300150c000c0ccccdc0000042301f80000c0003060cc30630f0001007f000064c060667e60787e66000000fe03f0b300033330c33330c331b3330fd000103e0f300150c000c0ccccdc0000042301f80000c0003060cc30630f0001007f000064c060667e60787e66000000fe03f0b300033330c33330c331b3330fd000103e0f300150c000cccccc6c000004b331f80000c000306ccc30633f0001007f00006380666660666c6066000000fe03f0b30001e1f1e1e1f1e1f0e1e30fd000103e0f300150c000cccccc6c000004b331f80000c000306ccc30633f0001007f00006380666660666c6066000000fe03f0b30001e1f1e1e1f1e1f0e1e30fd000103e0f300150c0007878f88c00000361e1f80000c00078387c78f1ef0001007f000061003c663c3c663c3e000000fe0340030f2000103e0f300150c0007878f88c00000361e1f80000c00078387c78f1ef0001007f000061003c663c3c663c3e000000fe0240030f2000103e0f300000cfe00020c0780fd00031f80000ce9000307f00006f600010fe0240030f2000103e0f300000cfe00020c0780fd00031f80000ce9000307f00006f600010fe01e0030f2000103e0f300000cf700031f80000ce9000307f00006f600010fe01e0030f2000103e0f300000cf700031f80000ce9000307f00006f600010fe01e0030f2000103e0f300000cf700031f80000ce9000307f00006f600010fe01e0030f2000103e0f300000cf700031f80000ce9000307f00006f600010fe01d0030f2000103e0f300000cf700031f80000ce9000307f00007f5ff00e01d0030f2000103e0f300000cf700031f80000ce9000307f00007f5ff00e01e0030f2000103e0f300000cf700031f80000ce9000407f000003ff6ff00e0280230001efc00093807c0000003800003e0f300000cf700031f80000ce9000407f000003ff6ff00e0360230001efc00093807c0000003800003e0f300030c000f80fc00130c319f80000c000fc001e01c0770001c00003c1cf7000107f0f20038113000330000180000180660000001800003e0f300030c000f80fc00130c319f80000c000fc001e01c0770001c00003c1cf7000107f0f20039113000330000180000180660000001800003e0f300050c000cc00006fe001208319f80000c000ee000e01c0770001c00001cf6000107f0f20039113000301e3e3e363c180663e7c3c183c003e0f300050c000cc00006fe001208319f80000c000ee000e01c0770001c00001cf6000107f0f2003c113000301e3e3e363c180663e7c3c183c003e0f3001e0c000cc7c78f87800036319f80000c000ee3e0e0fc0773f0fc7c7e1c3c7e1ff9000107f0f2003c1130003033331838661807c6666661860003e0f3001e0c000cc7c78f87800036319f80000c000ee3e0e0fc0773f0fc7c7e1c3c7e1ff9000107f0f2003d1130003033331838661807c6666661860003e0f3001f0c000f8ccc060cc000431b1f80000c000fc770e1dc0773b9dcee781c1c773b80fa000107f0f2003d1130003033331830661806066667e183c003e0f3001f0c000f8ccc060cc000431b1f80000c000fc770e1dc0773b9dcee781c1c773b80fa000107f0f2003d1130003033331830661806066667e183c003e0f3001f0c000c0cc7860fc000421b1f80000c000ee770e1dc0773b9dcfe701c1c773f80fa000107f0f2003d013000fe330c1b3066180606666601806003e0f3001f0c000c0cc7860fc000421b1f80000c000ee770e1dc0773b9dcfe701c1c773f80fa000107f0f2003c013000fe330c1b3066180606666601806003e0f3001e0c000c0cc0c6cc00004b0e1f80000c000ee770e1dc0773b9dce0701c1c7738f9000107f0f2009800580074000000cb02c00074000000cb02bd0074000000cb02bd00013c1130001e1e330e303c3c0603e663c3c3c003e0f3001e0c000c0cc0c6cc00004b0e1f80000c000ee770e1dc0773b9dce0701c1c7738f9000107f0f2003c1130001e1e330e303c3c0603e663c3c3c003e0f3001e0c000c07c783878000360e1f80000c000fc3e1f0fc03e3b8fc7c703e3e771ff9000107f0f200300030f2000103e0f3001e0c000c07c783878000360e1f80000c000fc3e1f0fc03e3b8fc7c703e3e771ff9000107f0f200190030f2000103e0f300000cf700031f80000ce9000107f0f200190030f2000103e0f300000cf700031f80000ce9000107f0f200190030f2000103e0f300000cf700031f80000ce9000107f0f200190030f2000103e0f300000cf700031f80000ce9000107f0f200190030f2000103e0f300000cf700031f80000ce9000107f0f20018003ff1ff00e0f300000cf700031f80000ce9000107f0f200180001f1ff00e0f300000cf700031f80000ce9000107f0f200180001f1ff00e0f300000cf700031f80000ce9000107f0f200180001f1ff00e0f300000cf700031f80000ce9000107f0f20012e100000cf700031f80000ce9000107f0f20021e100030c000787fa000f1f80000c0007e000f00e01f000003c1cf5000107f0f20021e100030c000787fa000f1f80000c0007e000f00e01f000003c1cf5000107f0f20020e100030c000cc3fa000e1f80000c00077000700e00e0e0001cf4000107f0f20020e100030c000cc3fa000e1f80000c00077000700e00e0e0001cf4000107f0f20026e100070c000c030787cd80fe00101f80000c000771f0707e00e1f87e1c3c3ef6000107f0f20026e100070c000c030787cd80fe00101f80000c000771f0707e00e1f87e1c3c3ef6000107f0f20025e100060c000c030ccccefd00101f80000c0007e3b870ee00e0e0ee1c1c77f6000107f0f20025e100060c000c030ccccefd00101f80000c0007e3b870ee00e0e0ee1c1c77f6000107f0f20025e100060c000c030fccccfd00101f80000c000ee770e1dc01c1c1dc3838e0f6000107f0f20025e100060c000c030fccccfd00101f80000c000ee770e1dc01c1c1dc3838e0f6000107f0f20025e100060c000cc30c0cccfd00101f80000c000ee770e1dc01c1f9dc3838eef6000107f0f20025e100060c000cc30c0cccfd00101f80000c000ee770e1dc01c1f9dc3838eef6000107f0f20024e100020c0007fe8700ccfd000d1f80000c000fc3e1f0fc03e0f0fcfe7cf6000107f0f20024e100020c0007fe8700ccfd000d1f80000c000fc3e1f0fc03e0f0fcfe7cf6000107f0f20012e100000cf700031f80000ce9000107f0f20012e100000cf700031f80000ce9000107f0f20012e100000cf700031f80000ce9000107f0f20012e100000cf700031f80000ce9000107f0f20012e100000cf700031f80000ce9000107f0f20012e100000cf700031f80000ce9000107f0f20011e100000ff6ff0280000ce9000107f0f20011e100000ff6ff0280000ce9000107f0f2000fe000f6ff0280000ce9000107f0f2000fe000f6ff0280000ce9000107f0f2001bd300100c0006600060000706000001e00001c180f9000107f0f2001bd300100c0006600060000706000001e00001c180f9000107f0f20019d300070c00066000600003fd0003c18000c0f8000107f0f20019d300070c00066000600003fd0003c18000c0f8000107f0f2001cd300110c000667c3e3c6c30e3e1e00c3e1f0c38780fa000107f0f2001cd300110c000667c3e3c6c30e3e1e00c3e1f0c38780fa000107f0f2001cd300020c0006fe660b670306333300c18330c18cc0fa000107f0f2001cd300020c0006fe660b670306333300c18330c18cc0fa000107f0f2001bd300100c000ccccccfcc060c667e018306618318f9000107f0f2001bd300100c000ccccccfcc060c667e018306618318f9000107f0f2001cd300020c000cfecc0b0c060c666001836661831980fa000107f0f2001cd300020c000cfecc0b0c060c666001836661831980fa000107f0f2001bd300100c00078cc7c78c0f1e663c03c1c3e3c78ff9000107f0f2001bd300100c00078cc7c78c0f1e663c03c1c3e3c78ff9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f20020d3000e0c0007e000f00e03b8000e00001e0efe00083e00000783800007f0f20020d3000e0c0007e000f00e03b8000e00001e0efe00083e00000783800007f0f2001fd3000d0c00077000700e03b8000e00000efd00081c1c000380000007f0f2001fd3000d0c00077000700e03b8000e00000efd00081c1c000380000007f0f20020d3001a0c000771f0707e03b9f87e3e3f0e1e3f0f801c3f0fc38787c007f0f20020d3001a0c000771f0707e03b9f87e3e3f0e1e3f0f801c3f0fc38787c007f0f20020d3001a0c0007e3b870ee03b9dcee773c0e0e3b9dc01c1c1dc3838ee007f0f20020d3001a0c0007e3b870ee03b9dcee773c0e0e3b9dc01c1c1dc3838ee007f0f20020d3001a0c000ee770e1dc0773b9dcfe701c1c773f8038383b87071c0007f0f20020d3001a0c000ee770e1dc0773b9dcfe701c1c773f8038383b87071c0007f0f20020d3001a0c000ee770e1dc0773b9dce0701c1c773800383f3b87071dc007f0f20020d3001a0c000ee770e1dc0773b9dce0701c1c773800383f3b87071dc007f0f20020d300140c000fc3e1f0fc03e3b8fc7c703e3e771f007c1e1ffe8f028007f0f20020d300140c000fc3e1f0fc03e3b8fc7c703e3e771f007c1e1ffe8f028007f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000bd300000ce9000107f0f2000ad300000fe8ff00f0f2000ad300000fe8ff00f0f2000ad200003fe9ff00f0f2000ad200003fe9ff00f0f20002a90002a900a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 2-3:  Menus Created in Problem 2.8\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Changing Menu Items on the Fly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Changing Menu Items on the Fly\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 So far, we've looked at a lot of ways you can create menus.  Once your program is running, though, you may need to make some changes in the menus to keep up with the changing needs in your program.  We'll look at a variety of changes you can make, from something as simple as dimming a menu item (or an entire menu) through more complex changes, like adding or removing a menu.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:disabled}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:dimmed}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The simplest and most common change to make in your menus is to dim or undim a menu item.  When you dim a menu item, the Menu Manager erases half of the bits, causing a gray looking appearance like you see in Figure 2-4.  The dimmed menu item also can't be selected, so there's no chance the menu item's item number will be returned as a menu command in your event loop.  The reason this is such a common change is that it's a change the Apple Human Interface Guidelines actually suggest that you make as your program runs.  When it doesn't make sense to use a command, you are supposed to dim the menu item so the command can't be selected.  For example, if there are no open windows, it doesn't make sense to allow the user to print the contents of a window, so the Print command should be dimmed.  Once the command is available again, the menu item should be changed back to normal.\par All you need to know to dim a menu item is the menu item number; that's the number you assigned when you created the menu item.  You dim the menu by calling }{\f6\fs20 DisableMItem}{\f4 , passing the menu item number as a parameter, like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DisableMItem}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 DisableMItem(256);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The menu item will be dimmed when the menu bar is pulled down again, and the user won't be able to select the menu item from the menu.  When you want to return the menu command to normal, so it is drawn normally and can be selected, use }{\f6\fs20 EnableMItem}{\f4 :\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EnableMItem}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 EnableMItem(256);\par }{\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw389\pich178\picwgoal7780\pichgoal3560\macpict\bliptag-1853436528\blipupi72{\*\blipuid 9186cd90106eab57a0b9dfea0cf22efc}12970000000000b201851101a00082a0008e01000a0000000002d002409800320000000000b201880000000000b201850000000000b20185000102cf0002cf0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee0011043eaeffffbeed000507c1cfffe7c0ee0011043eaeffffbeed000507c1cfffe7c0ee0011043f7fffff7eed000507cfffffe7c0ee0011043f7fffff7eed000507cfffffe7c0ee0011043efefafabeed000507cf8e0f07c0ee0011043efefafabeed000507cf8e0f07c0ee0011043f5f77777eed000507c3ce6667c0ee0011043f5f77777eed000507c3ce6667c0ee0011043efefbbbbeed000507cfce6667c0ee0011043efefbbbbeed000507cfce6667c0ee0011043f7f77777eed000507cfce6667c0ee0011043f7f77777eed000507cfce6667c0ee0011043efebbbabeed000507cf866707c0ee0011043efebbbabeed000507cf866707c0ee0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee0010003ffeff00feed000007fdff00c0ee000f003fecff03f0000007ecff00feff000f003fecff03f0000007ecff00feff000f0030ec000370000006ec00000eff000f0030ec000370000006ec00000eff000f0030ec000370000006ec00000eff000f0030ec000370000006ec00000eff001d05300014100010f3000a1050700000060007c60003f30002061f0eff001d05300014100010f3000a1050700000060007c60003f30002061f0eff001d05300020000008f3000a20807e0000060006000003f3000404180fe0001d05300020000008f3000a20807e0000060006000003f3000404180fe0001d05300010515050f3000a50407e00000600060e3e1ff300041b180fe0001d05300010515050f3000a50407e00000600060e3e1ff300041b180fe0001d05300028208888f3000a08a07e0000060007863333f30004219e0fe0001d05300028208888f3000a08a07e0000060007863333f30004219e0fe0001e05300010111110f4000b0100407e0000060006063333f3000421180fe0001e05300010111110f4000b0100407e0000060006063333f3000421180fe0001d05300020208888f3000a28807e0000060006063333f3000425980fe0001d05300020208888f3000a28807e0000060006063333f3000425980fe000200630001051105111f4000c50407e00000600060f331f3330f500041b180fe000200630001051105111f4000c50407e00000600060f331f3330f500041b180fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe000200630001410001005f4000c10507e000006000282000200a0f50004020a0fe000200630001410001005f4000c10507e000006000282000200a0f50004020a0fe00021073000200000080880f5000c20887e00000600040000010110f5000404110fe00021073000200000080880f5000c20887e00000600040000010110f5000404110fe000260930001051505010051505f7000f50407e00000600020a2a0a0200a2a0a0f800040a080fe000260930001051505010051505f7000f50407e00000600020a2a0a0200a2a0a0f800040a080fe000270a3000282088880a08a28880f8000f08887e00000600050411110141145110f8000401110fe000270a3000282088880a08a28880f8000f08887e00000600050411110141145110f8000401110fe000280a3000101111100111144540f900100100447e000006000202222200222288a8f8000420088fe000280a3000101111100111144540f900100100447e000006000202222200222288a8f8000420088fe00025093000202088880888a288f7000e28887e000006000404111101111451f7000405110fe00025093000202088880888a288f7000e28887e000006000404111101111451f7000405110fe000260930001051105005051445f7000f50507e00000600020a220a00a0a288a0f800040a0a0fe000260930001051105005051445f7000f50507e00000600020a220a00a0a288a0f800040a0a0fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe000320b300014100000500000050005fe000004fd000b10507e0000060007c300000efe0002f000e0fe0000c0fe0004061f0fe000320b300014100000500000050005fe000004fd000b10507e0000060007c300000efe0002f000e0fe0000c0fe0004061f0fe0003002300022fe0008200000088002000002fc001420887e0000060006600000060000019800600000c0fd000404198fe0003002300022fe0008200000088002000002fc001420887e0000060006600000060000019800600000c0fd000404198fe000330b300011105050105444040501fe0522041414000050447e0000060006670f1f060f998180f060f0f1f1c3c7c0001b198fe000330b300011105050105444040501fe0522041414000050447e0000060006670f1f060f998180f060f0f1f1c3c7c0001b198fe0003331300022088088208888028882088882022222000008887e000006000663181986199980f198619998c0c666600021998fe0003331300022088088208888028882088882022222000008887e000006000663181986199980f198619998c0c666600021998fe0003331300011105044104454004541054404041111000100447e0000060006630f1986199b8019f861f980c0c666600021198fe0003331300011105044104454004541054404041111000100447e0000060006630f1986199b8019f861f980c0c666600021198fe0003331300022080888208828088802080882822222000028887e000006000663019986198d819980618198d8c666600025998fe0003331300022080888208828088802080882822222000028887e000006000663019986198d819980618198d8c666600025998fe0002f0330001414fe50015404fc051401051411000050507e0000060007c78f1f0f0f9180fcf00971e3c660001b1f0fe0002f0330001414fe50015404fc051401051411000050507e0000060007c78f1f0f0f9180fcf00971e3c660001b1f0fe0001d0030fd000380000028f400037e000006fd00031800000ff400020fe0001d0030fd000380000028f400037e000006fd00031800000ff400020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000e003fecff03fe000007ebff01e0000e003fecff03fe000007ebff01e0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0001e05300014000014f3000b10507e0000060007c0000380f40004061f0fe0001e05300014000014f3000b10507e0000060007c0000380f40004061f0fe0001e05300022000008f3000b20887e000006000660000180f4000404198fe0001e05300022000008f3000b20887e000006000660000180f4000404198fe0002408300011141404151414f6000e50447e000006000663c7c183e3c3c0f700041b198fe0002408300011141404151414f6000e50447e000006000663c7c183e3c3c0f700041b198fe000230530002a222208fe22f6000e08a87e0000060007c6666186666660f70004219f0fe000230530002a222208fe22f6000e08a87e0000060007c6666186666660f70004219f0fe0002508300014151104111015f7000f0100507e0000060006c7e661866607e0f70004211b0fe0002508300014151104111015f7000f0100507e0000060006c7e661866607e0f70004211b0fe0002308300022202208222220f6000d28887e0000060006660661866666f6000425998fe0002308300022202208222220f6000d28887e0000060006660661866666f6000425998fe0002702300011fe14041514141110f8000f50447e000006000663c7c3c3e3c3c666f800041b198fe0002702300011fe14041514141110f8000f50447e000006000663c7c3c3e3c3c666f800041b198fe000170030fe000020f000037e000006fe000006f000020fe000170030fe000020f000037e000006fe000006f000020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0002705300014000014fe00010140f8000b10547e000006000280000280fe000028f80004020a8fe0002705300014000014fe00010140f8000b10547e000006000280000280fe000028f80004020a8fe0002605300022000008fe00010220f8000a20207e0000060004400001fd000044f8000404040fe0002605300022000008fe00010220f8000a20207e0000060004400001fd000044f8000404040fe0002d0d3000111414041514140101555050fb001250107e000006000222828082a28280202aaa0afb00040a020fe0002d0d3000111414041514140101555050fb001250107e000006000222828082a28280202aaa0afb00040a020fe0002d0530002a222208fe220400a2228888fb001208207e00000600054444410444444014445111fb000401040fe0002d0530002a222208fe220400a2228888fb001208207e00000600054444410444444014445111fb000401040fe0002e0d3000141511041110150011145150fc00130100107e000006000282a220822202a002228a2afb000420020fe0002e0d3000141511041110150011145150fc00130100107e000006000282a220822202a002228a2afb000420020fe0002d0d3000222022082222200222228880fb001228207e00000600044404410444440044445110fb000405040fe0002d0d3000222022082222200222228880fb001228207e00000600044404410444440044445110fb000405040fe0002d02300011fe14071514140141545050fb000850107e000006000222fe8206a28280282a8a0afb00040a020fe0002d02300011fe14071514140141545050fb000850107e000006000222fe8206a28280282a8a0afb00040a020fe000170030fe000020f000037e000006fe000004f000020fe000170030fe000020f000037e000006fe000004f000020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000e003fecff03fe000007ebff01e0000e003fecff03fe000007ebff01e0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0001402300014ee00067e0000060003c0ef00020fe0001402300014ee00067e0000060003c0ef00020fe00017043000220008f000077e00000600066003f000020fe00017043000220008f000077e00000600066003f000020fe0001902300010fe14f100097e000006000603c7c3c0f200020fe0001902300010fe14f100097e000006000603c7c3c0f200020fe0001a05300022220822f100097e0000060006e6630660f200020fe0001a05300022220822f100097e0000060006e6630660f200020fe0001a05300011111011f100097e000006000666630660f200020fe0001a05300011111011f100097e000006000666630660f200020fe0001a05300022220a22f100097e000006000666636660f200020fe0001a05300022220a22f100097e000006000666636660f200020fe0001d073000141404141110f3000a7e0000060003c3c1c3c666f300020fe0001d073000141404141110f3000a7e0000060003c3c1c3c666f300020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000f0030ec00037e000006ec00020fe0000e003fecff03fe000007ebff01e0000e003fecff03fe000007ebff01e0000f0001ecff00fefe00003fecff01e0000f0001ecff00fefe00003fecff01e00002cf0002cf00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 2-4:  Dimmed Menu Compared to Normal Menu with Some Dimmed Items\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Dimming a menu is a little more difficult.  Each of the menus has a set of flags that the menu manager uses to keep track of the menu.  To dim an entire menu, you need to read the current value for this set of flags and turn on bit 7.  To enable the menu, do just the opposite, turning bit 7 off.  There are two predefined masks in the interface files to make this a little easier to handle.  Using these flags, here's the sequence of commands needed to enable and disable menu number 2:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SetMenuFlag}}}{\v\f6\fs20 \par }{\f6\fs20 SetMenuFlag(GetMenuFlag(2)|disableMenu, 2);     \{disable menu 2\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetMenuFlag(GetMenuFlag(2)&enableMenu, 2);      \{enable menu 2\}\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 A useful side effect of disabling a menu is that all of the menu items in the menu are automatically disabled, too.  When you enable the menu, the menu items that were automatically disabled are enabled, although any that you specifically disabled stay disabled.  That makes disabling an entire menu a great way to go when all of the options in the menu need to be turned off at once.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:checked}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The second most common change you will make in your menus as your program runs is to check or uncheck various menu items.  I'm sure you've used menus where options could be turned on or off, or you could select one of several options from a list of choices.  In both of these cases it's common to check the menu item when it is the active choice.  For one example of many, pull down the Languages menu in the PRIZM desktop programming environment.  There is a check mark beside the language for the front window.  When you select a new language, the new one is checked, and the check mark is erased from the original choice.\par Well, event though your programs need to be consistent, the folks who wrote the Menu Manager weren't.  There's yet another way to handle checking and unchecking a menu item.  Instead of two separate calls, like }{\f6\fs20 DisableMItem}{\f4  and }{\f6\fs20 EnableMItem}{\f4 , or even calls to get and set flags, this time everything is handled with a single call.  }{\f6\fs20 CheckMItem}{\f4  takes two parameters, a boolean flag that tells the Menu Manager to put a check mark by the menu item if the flag is true, and to erase any check mark that might be there if the flag is false.  The second parameter is the menu item number.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 CheckMItem}}}{\v\f6\fs20 \par }{\f6\fs20 CheckMItem(true, 256);                          \{check menu item 256\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 CheckMItem(false, 256);                         \{uncheck menu item 256\}\par }{\f4 \par Problem 2.9.  This problem looks a little long, but that's mostly because I wanted to describe exactly what you are supposed to do.  As you read along, check out Figure 2-5, which is a screen capture of the menu you are creating in this problem.\par Start with our standard program that has a Quit menu and supports NDAs (the solution to Problem 2-7).  Add a menu called Beeps.  This menu will have three groups of commands.  The first is called "Beep".  This menu item tells the program to beep the speaker by calling }{\f6\fs20 SysBeep}{\f4 .\par Right after "Beep" is a series of three menu items, named "1", "2" and "3".  Start with "1" checked, and set up your program so selecting one of the other two numbers will remove the check mark from "1" and check the selected number.  Of course, when the user selects a different number, the newly selected one will be checked.  The beep command should beep one, two or three times, depending on which of these items is selected.\par The last item is called "Silence".  When you select silence, the beep command should be dimmed and disabled, but you should still be able to select the number of beeps.  The "Silence" menu item should also be checked.  Selecting it again returns the beep command to normal, and should turn off the check mark.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex48\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw90\pich154\picwgoal1800\pichgoal3080\macpict\bliptag-1590856864\blipupi72{\*\blipuid a12d7360a697c6e72da50b6499d4236c}060700000000009a005a1101a00082a0008e01000a0000000002d0024098000c00000000009a006000000000009a005a00000000009a005a000102f50002f50008003ffcff00c0fc0008003ffcff00c0fc0008003ffcff00c0fc0008003ffcff00c0fc0008003ffcff00c0fc0008003ffcff00c0fc0009013e0ffdff00c0fc0009013e0ffdff00c0fc0009013e67fdff00c0fc0009013e67fdff00c0fc000a063e670f0e0f0fc0fc000a063e670f0e0f0fc0fc000a013e0efe66017fc0fc000a013e0efe66017fc0fc000a063e660606670fc0fc000a063e660606670fc0fc000a063e667e7e67e7c0fc000a063e667e7e67e7c0fc000a063e0f0f0e0f0fc0fc000a063e0f0f0e0f0fc0fc000a063ffffffe7fffc0fc000a063ffffffe7fffc0fc0008003ffcff00c0fc0008003ffcff00c0fc0007003ff8ff01f00007003ff8ff01f000070030f800017000070030f800017000070030f800017000070030f800017000090230003efa00017000090230003efa000170000902300033fa00017f000902300033fa00017f000c053000331e1e3efd00017f000c053000331e1e3efd00017f000b0230003efe33fd00017f000b0230003efe33fd00017f000c053000333f3f33fd00017f000c053000333f3f33fd00017f000c05300033303033fd00017f000c05300033303033fd00017f000c0530003e1e1e3efd00017f000c0530003e1e1e3efd00017f000b0030fd000030fd00017f000b0030fd000030fd00017f00070030f800017f00070030f800017f0006003ff7ff000006003ff7ff0000070030f800017f00070030f800017f00070030f800017f00070030f800017f00090230000cfa00017f00090230000cfa00017f00090230003cfa00017f00090230003cfa00017f00090230180cfa00017f00090230180cfa00017f00090230300cfa00017f00090230300cfa00017f00090232600cfa00017f00090232600cfa00017f00090231c00cfa00017f00090231c00cfa00017f00090230803ffa00017f00090230803ffa00017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00090230001efa00017f00090230001efa00017f000902300033fa00017f000902300033fa00017f000902300003fa00017f000902300003fa00017f000902300006fa00017f000902300006fa00017f00090230000cfa00017f00090230000cfa00017f000902300018fa00017f000902300018fa00017f00090230003ffa00017f00090230003ffa00017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00090230001efa00017f00090230001efa00017f000902300033fa00017f000902300033fa00017f000902300003fa00017f000902300003fa00017f00090230000efa00017f00090230000efa00017f000902300003fa00017f000902300003fa00017f000902300033fa00017f000902300033fa00017f00090230001efa00017f00090230001efa00017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f0006003ff7ff000006003ff7ff0000070030f800017f00070030f800017f00070030f800017f00070030f800017f000b0430001e1870fc00017f000b0430001e1870fc00017f000b043000330030fc00017f000b043000330030fc00017f000d0b300030383078f87878007f000d0b300030383078f87878007f000c0430001e1830fdcc02007f000c0430001e1830fdcc02007f000d0b3000031830fcccc0fc007f000d0b3000031830fcccc0fc007f000d0b3000331830c0ccccc0007f000d0b3000331830c0ccccc0007f000d0b30001e3c7878cc7878007f000d0b30001e3c7878cc7878007f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f00070030f800017f0006003ff7ff000006003ff7ff0000060001f7ff0000060001f7ff000002f50002f500a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 2-5:  The Beeps Menu\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Changing the Text for a Menu Item}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Changing the Text for a Menu Item\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items\:changing text}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetMItem}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Another important change you might want to make to a menu while your program is running is to change the name of a menu item, or even add a new one or completely get rid of a menu item that already exists.  One of the most common reasons for changing a menu item is a variation on using a check mark next to a menu item.  The idea is to show an option the user might pick, like "Hide Pallet" in a paint program.  When the user picks this option, the paint pallet would disappear.  Somehow, just checking or unchecking this option doesn't get across the full meaning of what's happened, so you might want to change the entire menu item from "Hide Pallet" to "Show Pallet."  The }{\f6\fs20 SetMItem}{\f4  call is used to change the name of the menu, like this:\par \par }{\f6\fs20 SetMItem(ptr(ord4(@'--Show Pallet')+1), 263);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 In this particular case, we're changing the text for menu item 263, which reads "Hide Pallet" before we make the call to the Menu Manager.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's a few technical details I've swept under the rug by making the change the way it's shown.  Let's go over those now.\par The string you pass as a parameter to }{\f6\fs20 SetMItem}{\f4  looks a lot like the original menu item string that you've been using to create new menus at the start of your program.  You still need a two character sequence at the start of the menu name.  As with the original menu item string, the new name has to end with either a chr(0) or a return character, and the string has to be in a permanent, fixed location in memory.  As it turns out, string constants in ORCA/Pascal happen to be in a fixed location in memory, and they also happen to be followed by a null character.  The only minor hassle is that they also start with a length byte, so we need to add one to the address of the string to get a pointer to the first real character, which is the first of the dash characters.  Skipping the tricks, you could do the same thing with\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 var\par    ip: cStringPtr;\par \par new(ip);\par ip^ := '--Show Pallet';\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetMItem(ip, 263);\par }{\f4 \par Well, that works.  It's probably easier to see what's going on this way, but the original method, despite the tricks, is a lot easier to use in a real program once you understand what is happening.\par Thinking back for a moment, the original menu item string had some other stuff tacked onto the end of the string.  The other characters were the control characters, starting with a backslash and continuing with things like the menu item ID number.  When you use }{\f6\fs20 SetMItem}{\f4  to change a menu item, you don't use any of these control characters.  The new name for the menu item inherits all of the control code information from the original menu item.\par Putting all of this together, here's a subroutine you could call to change a menu item back and forth between "Hide Pallet" and "Show Pallet."  This subroutine assumes you have defined a global variable called }{\f6\fs20 paletteString}{\f4 ; this is the string number for the currently visible pallet string, which will be 0 for the original string, "Hide Pallet," and 1 for the alternate string, "Show Pallet."  Somewhere in your program's initialization section, this variable should be set to 0.  Of course, the reason the variable is a global variable is that the value of the variable has to survive between calls to }{\f6\fs20 ChangePalette}{\f4 , and local variables go away between subroutine calls.  }{\f6\fs20 ChangePalette}{\f4  also assumes you've defined a global constant called }{\f6\fs20 options_Palette}{\f4 , which is the menu item number for this menu item.\par \par }{\f6\fs20 procedure ChangePalette;\par \par \{ Change the menu item string for the palette choice           \}\par \par begin \{ChangePalette\}\par if paletteString = 0 then begin\par    paletteString := 1;\par    SetMItem(ptr(ord4(@'--Show Pallet')+1), options_Palette);\par    end \{if\}\par else begin\par    paletteString := 0;\par    SetMItem(ptr(ord4(@'--Hide Pallet')+1), options_Palette);\par    end; \{else\}\par end; \{ChangePalette\}\par }{\f4 \par Problem 2.10.  Start with the solution to Problem 2.7 and add a new menu called Options.  Use the subroutine we just developed to switch a menu item from "Hide Palette" to "Show Palette" and back again as the menu item is selected.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Other Things You Should Know About Menus}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Other Things You Should Know About Menus\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 At this point, you know enough about the Menu Manager to create most of the menus you are likely to see in working desktop programs.  You also know enough about manipulating those menus once they are created to do most of the common things you see done with menus, like dimming them or using check marks.  There's a lot more to the Menu Manager than we've covered so far, though.  Occasionally, as we write more advanced desktop programs, we'll come back to the Menu Manager and talk about some of these capabilities that weren't covered in this section.  By now, though, you're probably starting to see that the toolbox is truly a huge collection of subroutines with vast capabilities.  There are some genuinely neat features of the Menu Manager that we just won't get to in this course due to lack of time and respect for America's forests.\par While the Menu Manager is still fresh in your mind, I'd like to spend a moment and look at some of the capabilities that we've skipped.  Like I said, some of these will pop up again later, and others won't.  For the ones that aren't covered later in the course... well, that's why I've been encouraging you to look up toolbox calls in the toolbox reference manuals as you work through this course.  If you do that, you'll get used to finding information in the toolbox manuals and using that information in your own programs.  I've talked to a lot of people who have been scared off by the toolbox manuals, and I really can't blame those of you who have found them to be, shall we say, obtuse.  Remember, though:  the toolbox reference manuals were never written to teach you to use the toolbox.  They were written for people who already know basically what the toolbox could do, and who wanted to find information quickly.  This course will get you to the point that you know the concepts behind the toolbox, and hopefully you'll get used to the reference manuals as you go.  In other words, even if you've found the toolbox reference manuals tough to use, once you finish this course, they should make a lot of sense, and should become a regularly used part of your programming reference library.\par Getting back to the topic, you've seen how to create and modify menu items.  You can also add menu items to a menu, or remove menu items that are already in a menu.  There are a lot of reasons to do this; one common one is to create a menu that lists all of the open windows on the desktop.  That way, you can use the menu to check to see what windows are available and bring them to front, even if the window you want is buried under a lot of other windows.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw125\pich154\picwgoal2500\pichgoal3080\macpict\bliptag976023626\blipupi72{\*\blipuid 3a2cf04ac204d9c2665d8f07e161752a}075d00000000009a007d1101a00082a0008e01000a0000000002d0024098001000000000009a008000000000009a007d00000000009a007d000102f10002f10008003ffaff00c0fa0008003ffaff00c0fa0008003ffaff00c0fa0008003ffaff00c0fa0008003ffaff00c0fa0008003ffaff00c0fa000c043cf39fffcffeff00c0fa000c043cf39fffcffeff00c0fa000c043cf3ffffcffeff00c0fa000c043cf3ffffcffeff00c0fa000c083c931c1e0e19e70fc0fa000c083c931c1e0e19e70fc0fa000c083c939cccccc9267fc0fa000c083c939cccccc9267fc0fa000c083c939cccccc9270fc0fa000c083c939cccccc9270fc0fa000c023e679cfecc02cfe7c0fa000c023e679cfecc02cfe7c0fa000c083e670cce0e1ccf0fc0fa000c083e670cce0e1ccf0fc0fa0008003ffaff00c0fa0008003ffaff00c0fa0008003ffaff00c0fa0008003ffaff00c0fa0006003ff3ff000006003ff3ff0000070030f400010300070030f400010300070030f400010300070030f4000103000b0430003f1870f8000103000b0430003f1870f8000103000b0430000c0030f8000103e00b0430000c0030f8000103e00c0530000c383078f9000103e00c0530000c383078f9000103e00c0530000c1830ccf9000103e00c0530000c1830ccf9000103e00c0530000c1830fcf9000103e00c0530000c1830fcf9000103e00c0530000c1830c0f9000103e00c0530000c1830c0f9000103e00c0530000c3c7878f9000103e00c0530000c3c7878f9000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e00d0230001efe000030fa000103e00d0230001efe000030fa000103e00d0630003318000030fa000103e00d0630003318000030fa000103e00d063000303e1f1e33fa000103e00d063000303e1f1e33fa000103e00d0630001e18333336fa000103e00d0630001e18333336fa000103e00d063000031833303cfa000103e00d063000031833303cfa000103e00d063000331b333336fa000103e00d063000331b333336fa000103e00d0630001e0e1f1e33fa000103e00d0630001e0e1f1e33fa000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e006003ff3ff00e006003ff3ff00e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e00e07300001e30001c1c0fb000103e00e07300001e30001c1c0fb000103e00e07300003330000c0c0fb000103e00e07300003330000c0c0fb000103e00e0730180303e1e0c0c0fb000103e00e0730180303e1e0c0c0fb000103e00e07303001e33330c0c0fb000103e00e07303001e33330c0c0fb000103e00e073260003333f0c0c0fb000103e00e073260003333f0c0c0fb000103e00e0731c003333300c0c0fb000103e00e0731c003333300c0c0fb000103e00e07308001e331e1e1e0fb000103e00e07308001e331e1e1e0fb000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e00f0030fd000406003c03c0fd000103e00f0030fd000406003c03c0fd000103e00f0030fd00040600660660fd000103e00f0030fd00040600660660fd000103e0110f300003e363c7c00606607c3e3c0003e0110f300003e363c7c00606607c3e3c0003e0110f300003338666600c06606666600003e0110f300003338666600c06606666600003e0110f300003330666601803e066663c0003e0110f300003330666601803e066663c0003e0110f300003330666603000606666060003e0110f300003330666603000606666060003e0110f300003e303c7c67e63c67c3e3c0003e0110f300003e303c7c67e63c67c3e3c0003e00d02300003fa000060fe000103e00d02300003fa000060fe000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e00f0030fd000406003c03c0fd000103e00f0030fd000406003c03c0fd000103e00f0030fd00040600660660fd000103e00f0030fd00040600660660fd000103e0110f300003e363c7c00606607c3e3c0003e0110f300003e363c7c00606607c3e3c0003e0110f300003338666600c03c06666600003e0110f300003338666600c03c06666600003e0110f3000033306666018066066663c0003e0110f3000033306666018066066663c0003e0110f300003330666603006606666060003e0110f300003330666603006606666060003e0110f300003e303c7c67e63c67c3e3c0003e0110f300003e303c7c67e63c67c3e3c0003e00d02300003fa000060fe000103e00d02300003fa000060fe000103e0070030f4000103e0070030f4000103e0070030f4000103e0070030f4000103e006003ff3ff00e006003ff3ff00e0060001f3ff00e0060001f3ff00e002f10002f100a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 2-6:  PRIZM's Windows Menu\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can also add and remove entire menus.  That's not used nearly as often, but there are some really good reasons to do it on occasion.  The most common reason to add and remove menus is when a program has context sensitive features, and it also has so many features that you can't show all of the menus at once.  Just as one example, AppleWorks GS has several different applications that are all combined into a single program.  The menus for the paint program and for the word processor won't fit on the menu bar at the same time, and you don't need all of them at once anyway, so AppleWorks GS deletes all of the word processor specific menus when you select a paint window, and draws all of the paint menus in their place.\par We've used standard text menus in this lesson, but you've probably used programs that seem to do something very different with a menu.  For example, Apple's Finder has a color picker menu that lets you pick colors for icons.  Menus like the Finder's color picker menu are called custom menus.  The Menu Manager doesn't even handle these.  Instead of using Menu Manager calls to set up a menu and then letting the Menu Manager handle all of the details, you have to write the subroutines to handle all of the details yourself.  The Menu Manager defines the subroutines you need, along with all of the parameters, and then the Menu Manager calls your program to draw the menu, select various items in the menu, and depends on you to tell it which item (if any) was selected.  That's a lot of work, but the end result is that you can do almost anything you want with a menu by rolling your own with custom menus.\par There are also a host of minor calls you can use to do various things, ranging from actions that are almost silly to those that are useful, but just not used often enough to cover here.  For example, you can change a menu item's style, like whether or not it is bold; you can flash the menu bar; you can change the color of the menu bar; and you can change the name of a menu, just like we changed the name of a menu item.  Browsing through the toolbox reference manual is a great way to find out what capabilities are there, then you can go back and study the details if you ever need to use one of the features.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson dealt mostly with the menu bar, but we also started using }{\f6\fs20 TaskMaster}{\f4  to control our event loops.  By now, you should be able to create a program that will mimic the menu bar on almost any program you use that doesn't have a custom menu.  Your programs should be supporting desk accessories, and you should be getting comfortable with the event loop and how you plan programs around an even loop.\par Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 CheckMItem\tab DisableMItem\tab DrawMenuBar\tab EnableMItem\par FindWindow\tab FixAppleMenu\tab FixMenuBar\tab GetMenuFlag\par HiliteMenu\tab InsertMenu\tab MenuKey\tab MenuSelect\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 NewMenu\tab SetMenuFlag\tab SetMItem\tab TaskMaster\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk13}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Menu Manager\bxe }{\rxe bk13}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 3 \endash  Be Resourceful}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 3 \endash  Be Resourceful}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 3 \endash  Be Resourceful\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk15}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson introduces the concept of resources.  We start by looking at what resources really are, and why they exist.  Then we'll learn how to use Rez, the resource compiler, to create a resource fork.  As a practical example of resources, we'll change a program from the last lesson to use resources for the menu bar.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 What Are Resources?}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 What Are Resources?\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Apple has always aimed high, and the folks who created resources for the Macintosh were no exception.  Apple wanted to go after a global market, but there was a serious problem with that idea:  it costs a lot to develop software, and very few companies could really afford to develop software in, say, Danish to support a relatively small market in Denmark.  What Apple needed was a way for software developers to create a program so the Danish folks could convert the software to their own language on their own.  One way to do that, of course, was to convince all of the world's software developers that they should give away source code with the programs.  That, to say the least, would be an uphill fight.  Instead, Apple's team of programmers invented resources.\par Keep in mind that the whole goal, at least so far, is just to create some mechanism so that strings can be changed from one language to another by the end user.  One way to do that would be to have the program read the strings from a file, using some sort of numbered index to find a string in case the length of some of the strings changed.  Let's take a look at a simple example.  Suppose you are trying to stuff the strings for our File menu into a file that can be changed by the end user of the program.  The two strings are "  File  " and "Quit".  Our goal is to put these strings into a file in such a way that we can find either of them, even if the lengths of the strings change or something else entirely is added to the file.  One way to do that is to write a series of records to the file.  Each record will consist of four parts:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 length\tab A length word, which tells our program how far to skip ahead to find the start of the next record.\par type\tab A number telling us what kind of information this record contains.  If all we put in the file are strings we don't need this field, but we'll keep things general just in case we want to add more stuff later on.\par ID\tab A number that uniquely identifies this particular string.\par value\tab The values that make up the resource itself.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Now lets assume that we need to look for a string, and we've decided that we will use the number $8006 for the type of a string.  Why pick such an odd number?  More on that in a moment.  Furthermore, we'll assume that the ID number for the string "Quit" is 1.  Then to find this string, we would open the file containing the records and scan through the list, using the length word to skip from one resource to the next.  Any time the type of a resource is $8006, we stop and check the ID.  When we find the ID 1, we stop and read the string from the file, building our menu from the string.\par Let's build a short file like this to see how it might look.  We'll put a word of 0 on the end to mark the end of the file.  Decoded, we might type in the file as a series of numbers and strings, and use a program to build the actual file.  Using a special language to create the resource file doesn't change what we are really doing, it just makes it a lot more convenient for us to read and change the resources.  In our imagined resource file, the strings for our menus might look like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 resource1.type := $8006;\par resource1.ID := 1;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 resource1.value := 'Quit';\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 resource2.type := $8006;\par resource2.ID := 2;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 resource2.value := '  File  ';\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Details like putting the zero at the end of the file and figuring out the length of each resource are the sorts of things we should expect a resource compiler to do for us.  Once this file is processed, the binary file would look like this:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 $0000: 0B000680 01000551 7569740F 00068002  '       Quit     '\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 $0010: 00082020 46696C65 20200000           '    File    '\par }{\f4 \par It would take some work, but you can probably see how you could write a program that could read this file and create the File menu using the strings from the file, rather than hard coded strings in your program, like we've used in the first few lessons.  Since your program would only need to know that the resource type was $8006 and the resource numbers for the strings were 1 and 2, you also would be creating a very flexible program.  After all, you really don't care whether or not "Quit" and "  Edit  " are really the strings in the file, as long as the numbers used to identify the strings stay the same.  Well, in a nutshell, that's exactly what Apple Computer did with resources.  In fact, $8006 happens to be the resource type Apple Computer has assigned for p-strings, and resource IDs of 1 and 2 would work perfectly well.\par There are some differences, of course.  The biggest is where the resources are actually stored.  If the resources were really put in a separate file, like we did in this thought experiment, you would run the risk of separating the file from the program, making things more complicated for the user of the program that we'd like to.  On the other hand, if you stick the resources right into the program file, you run into some other problems.  The biggest is wrapped up in the fact that resources turned out to be a very powerful idea, and folks started using them for a lot of things besides just creating string files so a program could be adapted for other languages.  There are lots of times when it's nice to keep some of the information about a program in a separate spot that can be changed without changing the source code for a program.  In fact, there are even cases when a resource is used with a data file, and not with an executable program at all.  And that's the rub: if you stuff the resources into the executable file, which is certainly possible, you'd also have to stuff them into a data file, and that would cause all sorts of problems for people trying to read the data from, say, a picture, and tripping over resources in the process.  Apple solved this problem by creating a file format with two separate parts, called the resource fork and the data fork.  The data fork is basically what you normally think of as the file, while the resource fork is a special part of the file that you don't normally see, and can't access with standard file access calls from a language like Pascal.  The resource fork is hidden and out of the way, but still a part of the file.  To read, change, or add resources, you make special calls to a tool called the Resource Manager.  It's also the Resource Manager that handles little details like figuring out where a resource is in a file, and when it has hit the end of the list of resources.  Does it use a length word and a zero terminator, like we did?  Who cares?  It gets the job done, and in fact the details might even change as Apple's engineers discover new ways to deal with resources.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using Rez to Create a Menu Bar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Rez to Create a Menu Bar\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you set out to create a program, you have a choice of a lot of different tools.  You could pick a Pascal compiler, like the one we're using in this course, or a C compiler, or an assembler.  In the end, though, you always end up with an executable program.  There are also a lot of different ways to create a resource fork.  The first one we'll look at is Rez, Apple's resource compiler.  Like Pascal or C, Rez tries to make programming a little easier by giving you a language that lets you express your ideas without getting down to the byte level.  Using Rez, you don't know or care about the exact structure of the resource fork, just as you don't know or care about 65816 assembly language or object module formats when you write a program in Pascal.\par Rez is a whole new language, though, so there's a lot to learn.  Unfortunately, it's also patterned after the C language, so it's a little odd looking when you are used to Pascal programs.\par We'll learn about Rez and resources gradually, introducing new ideas as we go along.  If you would like to know more about Rez, you can refer to any of the places where the Rez compiler is documented.  As I write this, the two best places are the ORCA/M reference manual and the APW Tools and Interfaces package, but we also plan to include Rez with the next release of ORCA/Pascal.\par That also brings up one other point.  If you have ORCA/Pascal, but don't have any of these other packages, you need to get a copy of Rez to use with the rest of this course.  There's a copy on the program disk that comes with the course.  It will fit on your hard disk just fine, but if you are using floppy disk drives, you will need to use the text development system from here out \endash  there just isn't room for PRIZM and Rez on the same program disk.\par Appendix D tells you how to install Rez, and talks about some of the issues you will face if you don't have a hard disk.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 A Menu Bar Using Rez}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 A Menu Bar Using Rez\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When we looked at what resources really are at the start of this lesson, we really only talked about strings, but the Resource manager can actually stuff anything into a resource.  The Menu Manager has quite a few calls that can get information directly from the resource fork.  One of the most useful is }{\f6\fs20 NewMenuBar2}{\f4 , which creates a whole menu bar in one step from resources.  We'll start with the Rez source file to create the menu bar, then step through the source file to see how it's built.  Later, we'll use Rez to compile the source file, creating a resource fork with our menu bar resources.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 #include "types.rez"\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenuBar resource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuBar (1) \{                 /* the menu bar */\par    \{\par       1,                                /* resource numbers for the menus */\par       2,\par       3\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenu resource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (1) \{                    /* the Apple menu */\par    1,                                   /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    1,                                   /* menu title resource ID */\par    \{257\};                               /* menu item resource IDs */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (2) \{                    /* the File menu */\par    2,                                   /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    2,                                   /* menu title resource ID */\par    \{255,256\};                           /* menu item resource IDs */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (3) \{                    /* the Edit menu */\par    3,                                   /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    3,                                   /* menu title resource ID */\par    \{                                    /* menu item resource IDs */\par       250,\par       251,\par       252,\par       253,\par       254\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenuItem resource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (250) \{              /* Undo menu item */\par    250,                                 /* menu item ID */\par    "Z","z",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    250                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (251) \{              /* Cut menu item */\par    251,                                 /* menu item ID */\par    "X","x",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    251                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (252) \{              /* Copy menu item */\par    252,                                 /* menu item ID */\par    "C","c",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    252                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (253) \{              /* Paste menu item */\par    253,                                 /* menu item ID */\par    "V","v",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    253                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (254) \{              /* Clear menu item */\par    254,                                 /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    254                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (255) \{              /* Close menu item */\par    255,                                 /* menu item ID */\par    "W","w",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    255                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (256) \{              /* Quit menu item */\par    256,                                 /* menu item ID */\par    "Q","q",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    256                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (257) \{              /* About menu item */\par    257,                                 /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    257                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par                                         /* the various strings */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rPString resource}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 noCrossBank}}}{\v\f4 ;\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (1, noCrossBank)      \{"@"\};\par resource rPString (2, noCrossBank)      \{"  File  "\};\par resource rPString (3, noCrossBank)      \{"  Edit  "\};\par resource rPString (250, noCrossBank)    \{"Undo"\};\par resource rPString (251, noCrossBank)    \{"Cut"\};\par resource rPString (252, noCrossBank)    \{"Copy"\};\par resource rPString (253, noCrossBank)    \{"Paste"\};\par resource rPString (254, noCrossBank)    \{"Clear"\};\par resource rPString (255, noCrossBank)    \{"Close"\};\par resource rPString (256, noCrossBank)    \{"Quit"\};\par resource rPString (257, noCrossBank)    \{"About Frame..."\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-1:  A Menu Bar Resource Description File\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 How Rez Files are Typed}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 How Rez Files are Typed\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource description files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:compiler}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Looking at this source file, you can see that it doesn't look much like a Pascal program at all.  You will have to learn a new syntax for writing resource description files, as Rez source files are known.  It's going to look pretty odd at first, but once you know a few simple rules, writing a resource description file really isn't that hard.  It's not like learning C, where you have to learn a whole new set of data statements and expression operators; all you need to learn to do is to create resource data statements.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\v\f4 .rez;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 types.rez}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The first line of the resource description file is\par \par }\pard \li360\widctlpar\adjustright {\f6\fs20 #include "types.rez"\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 This line does the same thing in a resource description file that a }{\f6\fs20 uses}{\f4  statement does in a Pascal program.  There's a file called types.rez, located at prefix 2/RInclude (13:RInclude with the 2.0 shell), that contains a whole lot of type statements and constant declarations.  It defines an interface to the current set of resources for the Apple IIGS toolbox, just like the Menu Manager's interface file for Pascal defines all of the tool calls and data structures in the Menu Manager.  There are some differences, of course.  The biggest one is that types.rez is an editable source file, so you can look at it with the command\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }{\f6\fs20 edit 2/RInclude:Types.rez\par }{\f4 \par The first resource in our file creates a menu bar; the resource looks like this:\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuBar (1) \{                /* the menu bar */\par    \{\par       1,                               /* resource numbers for the menus */\par       2,\par       3\par       \};\par }\pard \li360\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:comments}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Later on we'll come back and see how you could figure out the format for this resource from types.rez, but for now let's concentrate on the syntax you use to type the resource.\par The /* and */ characters mark the start and end of a comment, just as (* and *) can be used for comments in Pascal.  The rules for forming comments with the /* and */ characters are exactly the same as the rules used in Pascal to form comments with the (* and *) characters.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource ID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Each resource starts with the reserved word }{\f6\fs20 resource}{\f4 , sort of like each Pascal procedure starts with the reserved word }{\f6\fs20 procedure}{\f4 , or each Pascal record starts with the reserved word }{\f6\fs20 record}{\f4 .  Right after this is the name of the resource we want to create; this matches one of the type declarations in types.h.  In this case, we are defining a menu bar resource, which has a name of }{\f6\fs20 rMenuBar}{\f4 .  The last part of the header for the resource is the resource ID, enclosed in parenthesis.  This is a number you pick; it can be any number from 1 to 65535, as long as there are no other }{\f6\fs20 rMenuBar}{\f4  resources in your resource fork with the same resource ID.  You can have other resources with a resource ID of 1; you just can't have another }{\f6\fs20 rMenuBar}{\f4  resource with a resource ID of 1.\par The body of the resource fills in the actual information that the program will use.  The body of a resource is enclosed in curly brackets, and is always followed by a semicolon.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenu resource}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This particular resource consists of an array of menu bar resource IDs.  Arrays are variable length groups of values in a resource description file, not fixed length structures like they are in Pascal.  The resource compiler figures out how long the array is by counting the number of things you put in the array.  The array itself is enclosed in brackets, again, and followed by a semicolon.  In fact, as you can start to see, the brackets in a resource description file are used for the same thing as }{\f6\fs20 begin}{\f4  and }{\f6\fs20 end}{\f4  in Pascal.\par The array itself has three values, separated by commas.  These values are the resource IDs for three more resources, each of which is a menu resource.  Here's the resource for the File menu, which is the menu with a resource ID of 2:\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (2) \{                    /* the File menu */\par    2,                                   /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache;\par       2,                                /* menu title resource ID */\par       \{255,256\};                        /* menu item resource IDs */\par }\pard \li360\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource ID}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenuBar resource}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu ID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The resource ID of 2 is easy to pick out of the header, but the same value is used twice more in the resource.  The first time is for the menu ID; this is the number we use for Menu Manager calls, and the number }{\f6\fs20 TaskMaster}{\f4  sends back to us to tell us which menu has been highlighted.  Later on, we use 2 again for the resource number for the menu title, which is yet another resource containing a string.  All of this is just a handy convention we are using to keep all of the various resources straight in our head.  While we need to know the menu ID inside of our program, as you already know, we can pick whatever number we want.  We could also pick any number we want for the resource ID of this resource, as long as we used the same number in the }{\f6\fs20 rMenuBar}{\f4  resource array.  And, of course, we can use any resource ID we want for the string resource that is the title for the menu.  By using 2 for all three values, though, it's a little easier to scan the resource file for all of the resources that are used together.\par The flags field in this resource takes the place of the flags characters we used to use in a menu title string.  In a resource description file, the title for a menu is just the name of the menu itself, and all of the other information, like the menu ID and the various format flags, are in other parts of the }{\f6\fs20 rMenu}{\f4  resource.  We also need to tell the Resource Manager that the title is actually a resource.  We could also make it a pointer or a handle, but frankly, that's a lot of trouble and defeats the whole purpose of resources.  We will always use a resource for the title of a menu it this course, so you will always see the value }{\f6\fs20 refIsResource*menuTitleRefShift}{\f4  in the flags field.  This value just uses some predefined constants to set one bit in the flags value.\par This menu has two items, "Close" and "Quit".  As you probably guessed by now, these are resources, too.  The resource IDs are in the array at the end of the }{\f6\fs20 rMenu}{\f4  resource.  We also need to set another flag to tell the Resource Manager that the menu items are in resources; that's what the value }{\f6\fs20 refIsResource*itemRefShift}{\f4  in the flags word does.  The last flag is }{\f6\fs20 fAllowCache}{\f4 ; this is actually the only flag that is used by the Menu Manager for something that isn't directly involved with resources.  It tells the Menu Manager to use menu caching, a technique that uses a little extra memory to remember a picture of the menu when it is pulled down so the menu can be redrawn quicker.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenuItem resource}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The resource for the Quit menu item is a pretty typical example of the menu item resources:\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (256) \{              /* Quit menu item */\par    256,                                 /* menu item ID */\par    "Q","q",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift;     /* flags */\par    256                                  /* menu item title resource ID */\par }\pard \li360\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu item ID}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\f4 In this resource, we're using the convention of keeping all of the numbers the same, again.  This time we use the value for the menu item ID, which is the same value we created in our older programs with "V256" in the options part of the menu item string.  The resource ID, shown in parenthesis at the start of the resource, and the resource ID for the menu item title string are both 256.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 key equivalents}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The various items in the rest of the resource are once again replacements for the information we used to put in the menu item string.  In this case, we're telling the Menu Manager that the menu item has a keyboard equivalent of "Q", with an alternate character of "q".  When we created this keyboard equivalent in the last chapter with the characters "*Qq" in the menu item string, the first character was the one that was actually drawn in the menu item when the menu was pulled down, and that's still true.  If we didn't want any keyboard equivalents, fill in the entry with a pair of empty strings, like this:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs20    "","",                               /* no key equivalents */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:checking}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's also a special place for the check character that shows up to the left of the menu item; in this example, it's a zero, which tells the Menu Manager that we don't want a check mark.  Unlike Pascal, you can use a character or an integer value here; a single character is equivalent in every way to a number.  Also unlike Pascal, a character and a string with one character are two very different things \endash  a string is coded with double quote marks, like the keyboard equivalents, but a character is coded with single quote marks.  For example, if you want to use a '$' character to the left of the menu item instead of a check mark, you could use the line\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20    '$',                                 /* check character */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 for the check character.  For a true check mark, you would use the number 18.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The flags field is used for all of the other options that used to go in the menu item string, as well as for another flag that tells the Menu Manager that the name of the menu item is a resource; that last flag is the only one you see here.  We'll look at the other flags a little later, after actually creating a program with this resource file.\par The only kind of resource left in the resource description file is the string.  The strings for all of the menu titles and menu item titles have been collected at the end of the file.  Here's a typical example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rPString resource}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 noCrossBank}}}{\v\f4 \par }\pard \li360\widctlpar\adjustright {\f6\fs20 resource rPString (256, noCrossBank) \{"Quit"\};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The }{\f6\fs20 rPString}{\f4  resource is used to define p-strings, and the only entry in the body of the resource is the string itself.  There's a new flag after the resource ID, though.  The }{\f6\fs20 noCrossBank}{\f4  flag tells the Resource Manager not to load the resource in a position where it would span a 64K bank boundary in memory.  The Menu Manager doesn't work right if the string does cross a bank boundary, and without this flag, the Resource Manager would be free to load the resource to any location in memory that was big enough.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using Constants}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Using Constants\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:constants}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 I tried to keep things simple for your first look at a resource description file by keeping all of the values out in the open, where you could see them.  In real life, though, using constants in a resource description file is a great idea for the same reasons you use constants in a program.  By using constants, you can gather all of the "magic numbers" into one spot at the start of the program.  That's a big help when you're looking for problems or making changes.  Also, keep in mind that the resource ID numbers and menu ID numbers used in the resource description file have to match the numbers used in the Pascal program for things to work correctly.  By collecting these numbers as constants at the beginning of the program, you can change and check the values a lot easier.\par In a resource description file, constants are defined with something called a preprocessor directive.  It's actually a character substitution of one character string for another, but for our purposes, the effect is exactly like constants defined in Pascal.  Here's the same resource description file we just went over, recoded to use #define statements for constants:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 #include "types.rez"\par \par #define appleMenu     1 \par #define fileMenu      2\par #define editMenu      3\par #define editUndo      250\par #define editCut       251\par #define editCopy      252\par #define editPaste     253\par #define editClear     254\par #define fileClose     255\par #define fileQuit      256\par }\pard \li180\widctlpar\adjustright {\f6\fs20 #define appleAbout    257\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuBar (1) \{                 /* the menu bar */\par    \{\par       appleMenu,                        /* resource numbers for the menus */\par       fileMenu,\par       editMenu\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (appleMenu) \{            /* the Apple menu */\par    appleMenu,                           /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    appleMenu,                           /* menu title resource ID */\par    \{appleAbout\};                        /* menu item resource IDs */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (fileMenu) \{             /* the File menu */\par    fileMenu,                            /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    fileMenu,                            /* menu title resource ID */\par    \{fileClose,fileQuit\};                /* menu item resource IDs */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (editMenu) \{             /* the Edit menu */\par    editMenu,                            /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    editMenu,                            /* menu title resource ID */\par    \{                                    /* menu item resource IDs */\par       editUndo,\par       editCut,\par       editCopy,\par       editPaste,\par       editClear\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editUndo) \{         /* Undo menu item */\par    editUndo,                            /* menu item ID */\par    "Z","z",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    editUndo                             /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editCut) \{          /* Cut menu item */\par    editCut,                             /* menu item ID */\par    "X","x",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editCut                              /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editCopy) \{         /* Copy menu item */\par    editCopy,                            /* menu item ID */\par    "C","c",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editCopy                             /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editPaste) \{      /* Paste menu item */\par    editPaste,                           /* menu item ID */\par    "V","v",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editPaste                            /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editClear) \{        /* Clear menu item */\par    editClear,                           /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editClear                            /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (fileClose) \{        /* Close menu item */\par    fileClose,                           /* menu item ID */\par    "W","w",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    fileClose                            /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (fileQuit) \{         /* Quit menu item */\par    fileQuit,                            /* menu item ID */\par    "Q","q",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    fileQuit                             /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (appleAbout) \{       /* About menu item */\par    appleAbout,                          /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    appleAbout                           /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20                                         /* the various strings */\par resource rPString (appleMenu, noCrossBank)  \{"@"\};\par resource rPString (fileMenu, noCrossBank)   \{"  File  "\};\par resource rPString (editMenu, noCrossBank)   \{"  Edit  "\};\par resource rPString (editUndo, noCrossBank)   \{"Undo"\};\par resource rPString (editCut, noCrossBank)    \{"Cut"\};\par resource rPString (editCopy, noCrossBank)   \{"Copy"\};\par resource rPString (editPaste, noCrossBank)  \{"Paste"\};\par resource rPString (editClear, noCrossBank)  \{"Clear"\};\par resource rPString (fileClose, noCrossBank)  \{"Close"\};\par resource rPString (fileQuit, noCrossBank)   \{"Quit"\};\par resource rPString (appleAbout, noCrossBank) \{"About Frame..."\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-2:  A Better Menu Bar Resource Description File\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Compiling the Rez File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Compiling the Rez File\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:using}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The ORCA family of languages is designed to handle more than one language at the same time, which is fortunate, since the Rez compiler is actually another language.  If you load the resource description file from disk and check the language from the editor, you will find that the language stamp for the file is Rez instead of Pascal or Shell, like you are used to.  If you type in the file from scratch, you'll have to be sure to set the language yourself.  Exactly how you do that depends on which editor you are using.  If you need help, refer to the documentation for the editor in the reference manual.  As a last resort, check out the CHANGE shell command.\par Once the file is entered and saved to disk, it's time to compile it.  If you are using PRIZM, saving the file to disk is a more important step than it is when you use Pascal.  That's because the Rez compiler doesn't use the FastFile system, so the compiler doesn't see changes you've made in the editor; it only sees the new information after it has been saved to disk.\par You compile the file the same way you would compile a Pascal program.  When you give the file a keep name, use the same name that you will be using for the executable program.  For example, if the program is called Frame.pas, and is compiled under PRIZM, the executable file name (called the keep name) is Frame.  In this case, you'd want to use a file name of Frame.rez for the resource description file, so the resource fork created by Rez would also be saved in the executable file Frame.\par \par Problem 3-1:  Type in the resource description file from the last section or load it from disk.  Compile it, using a keep name of Frame.  Once you finish, use the CATALOG command from the text shell or from PRIZM's shell window.  You should see a + beside the file type for Frame.  The + is the shell's way of flagging an extended file.  Extended file is the formal name for a file with a resource fork under the Apple IIGS operating system.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using the Menu Bar Rez Created}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using the Menu Bar Rez Created\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Creating the resource description file involved a lot of new stuff, and ended up being pretty tough because of these new concepts.  Well, it's pay back time.  Creating the menu bar was hard, but using it is actually pretty easy.  Listing 3-3 shows the complete Frame program to use the menu bar we just created with Rez.\par There really isn't much difference between this program and the one you had developed on your own by the end of the last lesson.  In fact, other than changing some comments, all of the differences are in }{\f6\fs20 InitMenus}{\f4 , where the long series of calls we used to use to build up a menu string and create a series of menus have been replaced by these three calls:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenuBar2}}}{\v\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20    menuBarHand := NewMenuBar2(refIsResource, menuID, nil);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSysBar}}}{\v\f4 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20    SetSysBar(menuBarHand);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetMenuBar}}}{\v\f4 \par }\pard \fi360\widctlpar\adjustright {\f6\fs20    SetMenuBar(nil);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The first creates the menu bar itself, using a Menu Manager call from the }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 .  The first parameter, }{\f6\fs20 refIsResource}{\f4 , tells the Menu Manager that the menu bar description is in a resource file, while the second parameter tells the Menu Manager which resource ID to look for.  The last parameter tells the Menu Manager that we want to create a menu bar that is not inside of a window.  Once we have the menu bar, we still need to install it as the system menu bar.  The call to }{\f6\fs20 SetSysBar}{\f4  makes our new menu bar the system menu bar, and the call to }{\f6\fs20 SetMenuBar}{\f4  makes the system menu bar the current, or active, menu.\par Like so many other parts of our basic program, these calls are generally figured out once, stuffed into a procedure like }{\f6\fs20 InitMenu}{\f4 , and moved from program to program as a block, without really worrying too much about the details.  Frankly, if you were to ask me what calls have to be made, and in what order, to create a system menu bar from a resource when I wasn't working on something like this course, I probably couldn't tell you.  About all I could be sure of is that I have a procedure in my collection of libraries that does it right.  When I write a new program, I just copy the working code from a working program, and don't worry about the details.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Frame                                                        \}\par \{                                                               \}\par \{  This program implements all of the support required for desk \}\par \{  accessories.                                                 \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par program Frame;\par \par uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,\par }\pard \li180\widctlpar\adjustright {\f6\fs20      DialogMgr, MenuMgr;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 const\par }\pard \li180\widctlpar\adjustright {\f6\fs20    return        = 13;                  \{return key code\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    appleMenu     = 1;                   \{Menu ID #s (also resource ID #s)\}\par    fileMenu      = 2;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    editMenu      = 3;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    editUndo      = 250;\par    editCut       = 251;\par    editCopy      = 252;\par    editPaste     = 253;\par    editClear     = 254;\par    fileClose     = 255;\par    fileQuit      = 256;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    appleAbout    = 257;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type\par    long = record                        \{for splitting 4 bytes to 2 bytes\}\par       case boolean of\par          true : (long: longint);\par          false: (lsw,msw: integer);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    done: boolean;                       \{tells if the program should stop\}\par    event: integer;                      \{event #; returned by GetNextEvent\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    myEvent: eventRecord;                \{last event returned in event loop\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure InitMenus;\par \par    \{ Initialize the menu bar.                                   \}\par \par    const\par }\pard \li180\widctlpar\adjustright {\f6\fs20       menuID = 1;                       \{menu bar resource ID\}\par  \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    var\par       height: integer;                  \{height of the largest menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       menuBarHand: menuBarHandle;       \{for 'handling' the menu bar\}\par  \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    begin \{InitMenus\}\par                                         \{create the menu bar\}\par    menuBarHand := NewMenuBar2(refIsResource, menuID, nil);\par    SetSysBar(menuBarHand);\par    SetMenuBar(nil);\par    FixAppleMenu(1);                     \{add desk accessories\}\par    height := FixMenuBar;                \{draw the completed menu bar\}\par    DrawMenuBar;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{InitMenus\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure HandleMenu;\par \par    \{ Handle a menu selection.                                   \}\par  \par    var\par }\pard \li180\widctlpar\adjustright {\f6\fs20       menuNum, menuItemNum: integer;    \{menu number & menu item number\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    begin \{HandleMenu\}\par                                         \{separate the menu and item numbers\}\par    menuNum := long(myEvent.taskData).msw;\par    menuItemNum := long(myEvent.taskData).lsw;\par    case menuItemNum of                  \{go handle the menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       appleAbout:  ;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       fileClose:   ;\par }\pard \li180\widctlpar\adjustright {\f6\fs20       fileQuit:    done := true;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       editUndo:    ;\par       editCut:     ;\par       editCopy:    ;\par       editPaste:   ;\par }\pard \li180\widctlpar\adjustright {\f6\fs20       editClear:   ;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       otherwise:   ;\par       end; \{case\}\par    HiliteMenu(false, menuNum);          \{unhighlight the menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{HandleMenu\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{Frame\}\par StartDesk(640);\par InitMenus;                              \{set up the menu bar\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 InitCursor;                             \{show the cursor\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 done := false;                          \{main event loop\}\par myEvent.taskMask := $001F7FFF;          \{let task master do it all\}\par repeat\par    event := TaskMaster(everyEvent, myEvent);\par    case event of                        \{handle the events we need to\}\par       wInSpecial,\par }\pard \li180\widctlpar\adjustright {\f6\fs20       wInMenuBar: HandleMenu;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       otherwise: ;\par       end; \{case\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 until done;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 EndDesk;\par end. \{Frame\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-3:  A Program for the Resource Description File\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 3-2:  Type in this program, using the file name Frame.pas, or load it from the disk.  Compile and link the program, saving the executable file to Frame, the same file that you save the resource fork to in problem 3-1.\par This program should run correctly, now.  You can even change the file type to S16 and run it from the Finder.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Making Changes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Making Changes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:using}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you compile a resource description file to create a resource fork, the resource compiler either erases the existing resource fork and creates a new one, or adds to the existing resource fork, depending on the flags you use.  The resource compiler doesn't touch the data fork of the file at all.  If there was a data fork when the resource compiler stared, there will still be one when the resource compiler finishes, and it's contents will not be changed.\par When the linker creates an executable file it erases the existing data fork of the output file and creates a new data fork.  The executable program is contained entirely in the data fork.  If the file had a resource fork when the linker started, it still has a resource fork, with the contents unchanged, when the linker finishes.\par The great thing about the way the resource compiler and linker work is that you don't have to recompile either the program source file or the resource description file each time the program is changed.  If you change the resource fork, say to adjust a menu name, but don't change the program's Pascal source file, you need to recompile the resource description file with the resource compiler, but you do not have to recompile or relink the Pascal program.  If the Pascal program is changed, but the resource description file stays the same, you need to recompile and relink the program, but you don't have to use the resource compiler.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using a Script to Compile}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using a Script to Compile\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:using}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scripts}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 make}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Up until now, creating a program was pretty easy.  For most programs, you just pulled down the Run menu and selected the Compile to Memory command.  Now that your programs have at least two source files, things are getting a little more complicated.  In larger desktop programs, you may want to use units to split the Pascal part of your program up into manageable sized chunks, making things even more complicated.  Shell scripts give you a way to put all of the work back into a single, simple command.\par So far, you've probably used menu based commands to create your programs.  The ORCA environment gives you another way to create programs, too.  Using the shell, you can compile, link, and even run a program using text commands, just like in the old days before the desktop interface became popular.  While there are a lot of advantages to the desktop interface, there is one characteristic of text interfaces that has kept them popular with programmers to this day, and promises to keep the text interface alive for the foreseeable future.  While typing the commands to compile a program is probably harder than using the menu commands you are used to, these commands can be collected into something called a script file.  The script file is a shell program that you can create to compile your programs.  Once you have created a script file, you just need to type the name of the script itself in the shell window to compile your program.\par Let's look at a basic script to compile a program with two source files to see how this works.  This script will compile the Pascal source file Frame.Pas and the resource description file Frame.Rez, creating an executable program called Frame.  That's the same thing you just did by hand.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 unset exit\par set compile false\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 set rez false\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 newer frame.a frame.pas\par if \{status\} != 0\par    set compile true\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 end\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 newer frame frame.rez\par if \{Status\} != 0\par    set rez true\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 end\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 set exit on\par if \{rez\} == true\par    compile frame.rez keep=frame\par end\par if \{compile\} == true\par    cmpl frame.pas keep=frame\par end\par }{\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-4:  A Simple Script\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Let's start by stepping through this script file to see what it does.  The first line, "unset exit", turns off a shell variable so the script will keep running when we use the newer command a little later on.  The reason for this step is pretty technical; it's tied up in the way shell scripts handle errors and the way utilities return error codes and results.  For creating your own programming scripts, just remember to use this command before any newer commands, and then use "set exit on" before you start the actual compiles, so the script will stop if it finds a problem.\par Next you see two statements that are setting shell variables to false.  The set command is followed by the name of a shell variable, then by the value.  All shell variables are strings.  The compile and rez shell variables are being used to keep track of whether we need to compile the resource description file or the Pascal source file.\par The next step is to check to see which files actually need to be compiled.  This script won't compile the Pascal source file unless it has changed since the last time you compiled the program; compiling the program creates the frame.a file.  If the source file Frame.Pas is newer than the output from the compiler, Frame.a, the newer command sets the }{\f6\fs20 \{Status\}}{\f4  shell variable to 1; otherwise it sets }{\f6\fs20 \{Status\}}{\f4  to 0.  If an error occurs \endash  such as the script not finding Frame.a at all \endash  newer returns some other value other than 0, usually -1.  Our script checks to see if newer returned 0, and if not, sets the value of the }{\f6\fs20 \{Compile\}}{\f4  shell variable to true so we remember to compile the program later.  The script then uses the same idea to check the resource description file, looking to see if it is newer than the executable program, and setting the shell variable }{\f6\fs20 \{Rez\}}{\f4  to true if we need to recompile the resource description file.\par Finally, the script checks the values of the shell variables, compiling the resource description file and doing a compile and link of the Pascal source file.\par This script is set up to use }{\f6\fs20 newer}{\f4  to check all of the dates on the files before actually compiling any of the programs.  This is an important point.  Once you start compiling programs, especially the Pascal part of the program, you will also start changing the modification dates used by the }{\f6\fs20 newer}{\f4  command, and that could cause the script to skip compiling a file that should be compiled.  It's important to know what will be compiled before you start changing the time stamps!\par The }{\f6\fs20 newer}{\f4  command used in this script is built into the ORCA shell from versions 2.0 on.  If you are using an earlier version of the shell you don't have this call.  The }{\f6\fs20 MoreRecent}{\f4  utility works just like the }{\f6\fs20 newer}{\f4  command, it just has a different name.  If you need help installing the }{\f6\fs20 MoreRecent}{\f4  utility, see Appendix D.  The files are in the Lesson.3 folder on the solution disks.\par All of the programs from here to the end of this course are organized just like this one, with a Pascal source file and a resource description file.  You could create a new script for each program by changing the word "frame" to the new program name everywhere in this script, but we can put the script language to work to help out, creating a new shell variable called }{\f6\fs20 \{prog\}}{\f4 .  To create a script for a new program, just change the value of }{\f6\fs20 \{prog\}}{\f4  to the new program name.  There's one other change in this script, the addition of }{\f6\fs20 \{parameters\}}{\f4  to the }{\f6\fs20 cmpl}{\f4  command, that we'll talk about in a moment.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 set prog Frame\par unset exit\par set compile false\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 set rez false\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 newer \{prog\}.a \{prog\}.pas\par if \{status\} != 0\par    set compile true\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 end\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 newer \{prog\} \{prog\}.rez\par if \{Status\} != 0\par    set rez true\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 end\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 set exit on\par if \{rez\} == true\par    compile \{prog\}.rez keep=\{prog\}\par end\par if \{compile\} == true\par    cmpl \{parameters\} \{prog\}.pas keep=\{prog\}\par end\par }{\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-5:  A Better Script\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Now that we know what the script does, and how to easily change the script to work on any of the programs in this course, let's take a look at how it is used.  To compile your program from PRIZM, move to the shell window and type the name of the script.  This will compile and link the program.  From the text shell, you don't have to move anywhere; just type the name of the script.  To run the program, wait until the script finishes and type the name of the program itself.\par One problem with this is that you can't use PRIZM's debugger from the shell window.  You can use the "Set Execute Options" menu command to tell the debugger to kick in in step or trace mode, and you can use the Execute menu command to run the program instead of typing the program name from the shell window.  These steps cause the debugger to kick in the way you are used to, but there's a catch: the compiler didn't create debug code!  That's why we added the }{\f6\fs20 \{parameters\}}{\f4  shell variable where we did in the script.  You can put the flags you want the compiler to use right after the name of the script in the shell window, and the flags will be used to compile the program.  For example, if the script is called Frame.Make, you can type\par \par }{\f6\fs20 frame.make +d\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 and the +d flag will be used on the }{\f6\fs20 cmpl}{\f4  command, causing the compiler to generate debug code.  As an alternative, you could just put the +d command on the }{\f6\fs20 cmpl}{\f4  command permanently, removing the flag once the program is finished.  If you are using the text shell, using +d will set things up so ORCA/Debugger can debug the program, after which running the }{\f6\fs20 DebugBreak}{\f4  utility will cause the debugger to kick in when your program starts to execute.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 This section has been a pretty quick introduction to scripts, and if you've never seen them before it's understandable if you are a bit confused.  Seeing this many new ideas in so short a time is enough to confuse anyone for a while!  There are two important things you should take with you from this section.  The first is the canned script we developed, which really will make your life easier as you write programs with resource forks.  The second is the idea behind using scripts to automate complicated things you do often when you write programs.  The ORCA/Pascal reference manual has detailed information on the shell, which is a whole language designed to make your life as a programmer a little easier.  There's a lot to learn in the shell scripting language, but if you program a lot, or write large programs, it can be worth while to take the time to learn how to put the power of shell scripts to work for you.\par \par Problem 3-3:  Type in the script from this section and use it to compile the Frame program.  Try making changes to the Pascal and resource files separately to see how the script only rebuilds what you need rebuilt.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Understanding Resource Description Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Understanding Resource Description Files\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk14}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:using}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As we create the various resources in this course, we'll always do it the way we did for menus in this lesson, carefully laying out the format for the resource itself and describing what goes in each field.  Someday, though, you'll need to create a resource for one of your programs that isn't covered in this course, and you'll need to have some idea of how to do it.  In this section, we'll take a look at where you can get the information about these other resources.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Toolbox Resource Descriptions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Toolbox Resource Descriptions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4  you'll find an appendix that describes the various resources used by the toolbox.  You'll have to do some comparing between the information in Appendix E and the tool calls that use the resources to figure out exactly what is going on, so we'll use an example that you already know something about to look at the layout of this appendix.  On page E-59 you'll find a section describing }{\f6\fs20 rPString}{\f4 , the resource we used for the names of the menus and menu items.  It looks like this:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw445\pich161\picwgoal8900\pichgoal3220\macpict\bliptag993923516\blipupi72{\*\blipuid 3b3e11bc47f93078f6aaaf78049728d5}04ecffffffff00a001bc1101a0008201000affffffff00a001bc30005800090074006da10096000c01000000020000000000000001000a00000000000c00c12c000a001607436f757269657203001604010d000a2b0109087250537472696e672c000800140554696d657303001429300c202020202020202438303036a00097a10096000c01000000020000000000000001000a00140000002b016b04000d000928001e00012f46696775726520452d323720646566696e657320746865206c61796f7574206f66207265736f75726365207479706503001629a909207250537472696e672c000900030647656e657661030003292d0120030014290328282438303036292e205265736f7572636573206f662074686973207479706520636f6e7461696e2028002800010f50617363616c20737472696e67732ea00097a10096000c01000000020000000000000001000a00320000003e01752c0010000d0d5a6170662044696e676261747303000d04010d00072a14016e03001429050220200d000929030e20202046696775726520452d3237030003040029340620202020202003001429121350617363616c20737472696e672c2074797065030016294109207250537472696e67030003292d012003001429030728243830303629a00097a10096000c01000000020000000000000001000a007c0000008801bb03001628008600010a6c656e6774684279746503000329320420202020030014290c214e756d626572206f66206279746573206f6620646174612073746f72656420696e03000329780120030016290310737472696e67436861726163746572730300032950012003001429030661727261792ea00097a10096000c01000000020000000000000001000a00870000009f0129030016280091000110737472696e67436861726163746572730300032950010d28009d00010c0909090909090909090909090300142948084172726179206f66030003291e012003001629030a6c656e677468427974650300032932012003001429030b636861726163746572732ea0009701000affffffff00a001bc09000000000000000031004a00090059006d09ffffffffffffffff38a10096000c02000000020000000000000001000a004c00190057005d28005400270a6c656e67746842797465a00097a10096000c02000000020000000000000001000a0060001d006b0058280068001e10737472696e6743686172616374657273a0009701000affffffff00a001bc09000000000000000030005e006c006e006da10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a00000000000000000300030d0003280066006609a5202020a5202020a501000affffffff00a001bc90000400000000000d002000000000000d0020005f006a006c008a0001e0000000e0000000000000000000000000000000e0000000e0000000000000000000000000000000e0000000e000000000000000a0009730005e0009006e000aa10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a0000000000000000280066000309a5202020a5202020a501000affffffff00a001bc90000400000000000d002000000000000d0020005f0007006c00270001e0000000e0000000000000000000000000000000e0000000e0000000000000000000000000000000e0000000e000000000000000a00097a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 3-1:  Resource Description from the Toolbox Reference Manuals\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par As you can see, Apple assumes you already know why you want to use the resource and basically what it is used for.  You'd learn that from reading about the various tool calls or resources that make use of this resource.\par The table itself gives you the internal format for the data in the resource.  You can see that the data starts with a length byte and is followed by characters.  That makes sense, given that this is a p-string.  After all, that's the format for a p-string in the rest of the toolbox and in Pascal, too.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Rez Types}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Rez Types\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Appendix E often has some useful information about what sorts of things can go in the resource, but when it comes time to actually type in the resource description file, you need to load a copy of Types.Rez.  Types.Rez is in the RInclude folder, which is in your libraries folder.  Doing a string search in Types.Rez, you would find this entry for }{\f6\fs20 rPString}{\f4 :\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 #define rPString            $8006\par \par /*---------------------- rPString ----------------------*/\par type rPString \{\par         pstring;                    /* String */\par \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-6:  }{\f6\fs20 rPString}{\f4  Resource Definition from Types.rez\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This is the actual type declaration the resource compiler uses when it compiles your resource description file.  It's sort of like a record type in Pascal, while your resource in the resource description file is sort of like an initialized variable.  This type declaration tells the resource compiler that an }{\f6\fs20 rPString}{\f4  resource has a resource type number of $8006, and that it contains a single piece of information, a p-string.\par The only really tricky feature in a resource type is the array.  Here's the type declaration for }{\f6\fs20 rMenuBar}{\f4 , which has an array of resource IDs for the various menus in the menu bar:\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 #define rMenuBar            $8008\par \par /* ----------------------- rMenuBar --------------------------------*/\par type rMenuBar \{\par     integer = 0;             /* version must be zero */\par     integer = 0x8000;        /* the following refs are all menu resID's */\par     array \{\par         longint;             /* menu template ID list */\par         \};\par     longint = 0;\par \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-7:  }{\f6\fs20 rMenuBar}{\f4  Resource Definition from Types.rez\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Let's compare this to the }{\f6\fs20 rMenuBar}{\f4  resource from our resource description file:\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuBar (1) \{      /* the menu bar */\par    \{\par       appleMenu,             /* resource numbers for the menus */\par       fileMenu,\par       editMenu\par       \};\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 3-8:  }{\f6\fs20 rMenuBar}{\f4  Resource Sample\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par One thing that stands out is the first two integers in the }{\f6\fs20 rMenuBar}{\f4  type.  They aren't in the resource.  These are actually fixed values, set to specific values in the type itself, so we don't need to put them in the resource; you only need to code a value in a resource if it is a variable in the type.  In fact, the array of resource IDs also ends with a longint 0, which is also coded as a constant in the resource type.\par The array itself is an array of long integers.  Any time you see an array in a resource type, you code as many of the values as you like in your resource, separating each value with a comma.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Finding Out More About Rez}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Finding Out More About Rez\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Like I said, as we go through the course, each time we use a new resource we'll stop and lay it out carefully.  If you also take the time to look up the resource in Appendix E and in Types.Rez, you'll learn quite a bit about the resource compiler.  If you would like to read a very detailed technical description of the resource compiler and how it is used to create resources, you can find detailed technical information in the ORCA/M 2.0 reference manual or in the APW Tools and Interfaces package.\par {\*\bkmkend bk14}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource description files}{\rxe bk14}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Resource Tools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Resource Tools\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Changing Resources}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Changing Resources\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DeRez}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The whole point of resources is that they give you a way to change the program without the source code.  The Rez compiler can create a resource fork, but to change a resource in an existing program, you also need some way to find out what resources already exist.  One of the many ways to do this is by decompiling the resource fork with DeRez, making some changes, and then recompiling the resource fork with Rez.  In this course, we're really concerned with creating new resources, not changing the resources in programs that someone else has written, so we won't take up any time talking about the mechanics of changing a resource fork.  I just thought you should know that changing the resource fork is possible, and what you need to use if you want to give it a try.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Programmer's CAD Tools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Programmer's CAD Tools\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Design Master}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource editors}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 I've talked with a lot of people who want to learn to use resources in their programs because they think using resources will make it easier to create a program.  Well, hopefully this lesson has shattered that completely false myth.  The point of resources was never to make it easier to write the program in the first place; the point of resources is to make it possible to change a program without changing, or even having access to, the source code.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich412\picwgoal13040\pichgoal8240\macpict\bliptag1506752442\blipupi72{\*\blipuid 59cf37ba4d4ee68ed788fa59f1b62189}288e00000000019c028c1101a00082a0008e01000a000000000240030898005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffe0000e0b600010fc00b003ffe0000e0b600010fc021113f000003c0001f187000000f818c000003c0f70000f0fd000101c0d400010fc021113f000003c0001f187000000f818c000003c0f70000f0fd000101c0d400010fc027113f0000fcf80018003000000c018030000663fe000006fc000701980000c00000c0d400010fc027113f0000fcf80018003000000c018030000663fe000006fc000701980000c00000c0d400010fc02a1c3f0003fff00018383078000c0f9c7c000607c6ccc78f8ccd8f0f000180fef103b1e0c1e0d500010fc02a1c3f0003fff00018383078000c0f9c7c000607c6ccc78f8ccd8f0f000180fef103b1e0c1e0d500010fc029223f0003ffe0001e1830cc000f198c300003c3070cccc60cce19980001819998c1c330c3d400010fc029223f0003ffe0001e1830cc000f198c300003c3070cccc60cce19980001819998c1c330c3d400010fc02a233f0003fffc00181830fc000c198c30000063060ccc060ccc1f8f0001819998c18330c1e0d500010fc02a233f0003fffc00181830fc000c198c30000063060ccc060ccc1f8f0001819998c18330c1e0d500010fc02a233f0001fff800181830c0000c198c36000663660cccc6cccc18018001999998d98330c030d500010fc02a233f0001fff800181830c0000c198c36000663660cccc6cccc18018001999998d98330c030d500010fc02a233f0000fbe000183c7878000f8f9e1c0003c1c607c78387cc0f0f0000f0f1987181e1e1e0d500010fc02a233f0000fbe000183c7878000f8f9e1c0003c1c607c78387cc0f0f0000f0f1987181e1e1e0d500010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc011003ffe0000e0f0000007ddffec00010fc011003ffe0000e0f0000007ddffec00010fc017083f000003c0001f1870f4000006de000003ec00010fc017083f000003c0001f1870f4000006de000003ec00010fc017083f0000fcf800180030f4000006de000003ec00010fc017083f0000fcf800180030f4000006de000003ec00010fc019093f0003fff00018383078f50001060fdfff0083ec00010fc019093f0003fff00018383078f50001060fdfff0083ec00010fc019093f0003ffe0001e1830ccf50001060fdfff0083ec00010fc019093f0003ffe0001e1830ccf50001060fdfff0083ec00010fc01b093f0003fffc00181830fcf50002060f80e100010f83ec00010fc01b093f0003fffc00181830fcf50002060f80e100010f83ec00010fc01b093f0001fff800181830c0f50002060f80e100010f83ec00010fc01b093f0001fff800181830c0f50002060f80e100010f83ec00010fc01b093f0000fbe000183c7878f50002060f80e100010f83ec00010fc01b093f0000fbe000183c7878f50002060f80e100010f83ec00010fc012003fec0002060f80e100010f83ec00010fc012003fec0002060f80e100010f83ec00010fc012003fec0002060f80e100010f83ec00010fc012003fec0002060f80e100010f83ec00010fc01a003fecff02fe0f80f60005f01818000104f200010f83ebff00c01a003fecff02fe0f80f60005f01818000104f200010f83ebff00c01c003cec0002060f80f700060198181800018cf200010f83ec000103c01c003cec0002060f80f700060198181800018cf200010f83ec000103c01f003cec0002060f80f700090198f8f80f81dc78f8ccf500010f83ec000103c01f003cec0002060f80f700090198f8f80f81dc78f8ccf500010f83ec000103c01e003cec0002060f80f70006019999981981fcfeccf500010f83ec000103c01e003cec0002060f80f70006019999981981fcfeccf500010f83ec000103c01f003cec0002060f80f7000901f999981981acfcccccf500010f83ec000103c01f003cec0002060f80f7000901f999981981acfcccccf500010f83ec000103c01f003cec0002060f80f700090199999819818cc0ccccf500010f83ec000103c01f003cec0002060f80f700090199999819818cc0ccccf500010f83ec000103c01f003cec0002060f80f700090198f8f80f818c78cc7cf500010f83ec000103c01f003cec0002060f80f700090198f8f80f818c78cc7cf500010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c01a003cec0003060f8208fe00031f8c0038e900010f83ec000103c01a003cec0003060f8208fe00031f8c0038e900010f83ec000103c01a003cec0003060f8318fe000306003018e900010f83ec000103c01a003cec0003060f8318fe000306003018e900010f83ec000103c01b003cec000b060f83b8f1f198061c7c183cea00010f83ec000103c01b003cec000b060f83b8f1f198061c7c183cea00010f83ec000103c01b003cec000b060f83f9999998060c301866ea00010f83ec000103c01b003cec000b060f83f9999998060c301866ea00010f83ec000103c01b003cec000b060f8359f99998060c30187eea00010f83ec000103c01b003cec000b060f8359f99998060c30187eea00010f83ec000103c01b003cec000b060f8319819998060c361860ea00010f83ec000103c01b003cec000b060f8319819998060c361860ea00010f83ec000103c01b003cec000b060f8318f198f8061e1c3c3cea00010f83ec000103c01b003cec000b060f8318f198f8061e1c3c3cea00010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c016003cec0002060f83e5ff00c0fe00010f83ec000103c016003cec0002060f83e5ff00c0fe00010f83ec000103c016003cec0002060f83e50000c0fe00010f83ec000103c016003cec0002060f83e50000c0fe00010f83ec000103c01a003cec0002060f83fb000040ec0000c0fe00010f83ec000103c01a003cec0002060f83fb000040ec0000c0fe00010f83ec000103c01d003cec0009060f830007c0c6000040ec0000c0fe00010f83ec000103c01d003cec0009060f830007c0c6000040ec0000c0fe00010f83ec000103c01d003cec0009060f83000600c0180040ec0000c0fe00010f83ec000103c01d003cec0009060f83000600c0180040ec0000c0fe00010f83ec000103c01d003cec0009060f83000607ce3e0040ec0000c0fe00010f83ec000103c01d003cec0009060f83000607ce3e0040ec0000c0fe00010f83ec000103c01d003cec0009060f8300078cc6180040ec0000c0fe00010f83ec000103c01d003cec0009060f8300078cc6180040ec0000c0fe00010f83ec000103c01d003cec0009060f8300060cc6180040ec0000c0fe00010f83ec000103c01d003cec0009060f8300060cc6180040ec0000c0fe00010f83ec000103c01d003cec0009060f8300060cc61b0040ec0000c0fe00010f83ec000103c01d003cec0009060f8300060cc61b0040ec0000c0fe00010f83ec000103c01d003cec0009060f830007c7cf0e0040ec0000c0fe00010f83ec000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c00011d003cec0009060f830007c7cf0e0040ec0000c0fe00010f83ec000103c01a003cec0002060f83fb000040ec0000c0fe00010f83ec000103c01a003cec0002060f83fb000040ec0000c0fe00010f83ec000103c016003cec0002060f83e50000c0fe00010f83ec000103c016003cec0002060f83e50000c0fe00010f83ec000103c016003cec0002060f83e5ff00c0fe00010f83ec000103c016003cec0002060f83e5ff00c0fe00010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c016003cf5000002f90002060f80e100010f83ec000103c016003cf5000002f90002060f80e100010f83ec000103c016003cf5000003f90002060f80e100010f83ec000103c016003cf5000003f90002060f80e100010f83ec000103c017003cf500010380fa0002060f80e100010f83ec000103c017003cf500010380fa0002060f80e100010f83ec000103c017003cf5000103c0fa0002060f80e100010f83ec000103c017003cf5000103c0fa0002060f80e100010f83ec000103c017003cf5000103e0fa0002060f80e100010f83ec000103c017003cf5000103e0fa0002060f80e100010f83ec000103c015003cf5000103f0fa0001060fdfff0083ec000103c015003cf5000103f0fa0001060fdfff0083ec000103c017003cf5000103f8fa0002060f80e100010f83ec000103c017003cf5000103f8fa0002060f80e100010f83ec000103c017003cf500010360fa0002060f80e100010f83ec000103c017003cf500010360fa0002060f80e100010f83ec000103c016003cf4000030fa0002060f80e100010f83ec000103c016003cf4000030fa0002060f80e100010f83ec000103c015003cec0005060f83fffff8e400010f83ec000103c015003cec0005060f83fffff8e400010f83ec000103c01c003cec0008060f830000181e001cfc000007ed00010f83ec000103c01c003cec0008060f830000181e001cfc000007ed00010f83ec000103c01c003cec0008060f8300001833000cfc000003ed00010f83ec000103c01c003cec0008060f8300001833000cfc000003ed00010f83ec000103c022003cec0012060f83000018301e0c1e3606c78f8307c78780f100010f83ec000103c022003cec0012060f83000018301e0c1e3606c78f8307c78780f100010f83ec000103c022003cec0012060f8300001830330c3338070cccc30cccccc0f100010f83ec000103c022003cec0012060f8300001830330c3338070cccc30cccccc0f100010f83ec000103c022003cec0012060f8300001830330c3330060fccc30ccc0fc0f100010f83ec000103c022003cec0012060f8300001830330c3330060fccc30ccc0fc0f100010f83ec000103c021003cec0011060f8300001833330c3330060c0cc30cccccf000010f83ec000103c021003cec0011060f8300001833330c3330060c0cc30cccccf000010f83ec000103c021003cec0005060f83000018fd1e083006078f8787c78780f100010f83ec000103c021003cec0005060f83000018fd1e083006078f8787c78780f100010f83ec000103c019003cec0005060f83fffff8fa00000cec00010f83ec000103c019003cec0005060f83fffff8fa00000cec00010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c098005200fa00000177029000fa00000177028c00fa00000177028c000112003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c015003cec0005060f83fffff8e400010f83ec000103c015003cec0005060f83fffff8e400010f83ec000103c01b003cec0007060f830000183e18fe000003ea00010f83ec000103c01b003cec0007060f830000183e18fe000003ea00010f83ec000103c01a003cec0006060f8300001833fd000003ea00010f83ec000103c01a003cec0006060f8300001833fd000003ea00010f83ec000103c01b003cec000b060f830000183339fcfe1e1fea00010f83ec000103c01b003cec000b060f830000183339fcfe1e1fea00010f83ec000103c01b003cec000b060f830000183319b6db3333ea00010f83ec000103c01b003cec000b060f830000183319b6db3333ea00010f83ec000103c01b003cec000b060f830000183319b6db3f33ea00010f83ec000103c01b003cec000b060f830000183319b6db3f33ea00010f83ec000103c01b003cec000b060f830000183319b6db3033ea00010f83ec000103c01b003cec000b060f830000183319b6db3033ea00010f83ec000103c01b003cec000b060f830000183e3db6db1e1fea00010f83ec000103c01b003cec000b060f830000183e3db6db1e1fea00010f83ec000103c015003cec0005060f83fffff8e400010f83ec000103c015003cec0005060f83fffff8e400010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c013003ced000303fe0f80e100010f83ec000103c013003ced000303fe0f80e100010f83ec000103c018023c007ff2ff06f000001e060f80e100010f83ec000103c018023c007ff2ff06f000001e060f80e100010f83ec000103c018023c03c0f200061e000070060f80e100010f83ec000103c018023c03c0f200061e000070060f80e100010f83ec000103c022013c0efe0002780c0cfc000b0184100000038000e0060f80e100010f83ec000103c022013c0efe0002780c0cfc000b0184100000038000e0060f80e100010f83ec000103c022013c1cfe0002cc0c0cfc000b010630000001c000e0060f80e100010f83ec000103c022013c1cfe0002cc0c0cfc000b010630000001c000e0060f80e100010f83ec000103c024013c1cfe0013cc7c7c1fc3c7c66006c770000001c000e0060f80e100010f83ec000103c024013c1cfe0013cc7c7c1fc3c7c66006c770000001c000e0060f80e100010f83ec000103c023013c1cfe00fecc001bfe660c600867f0000001c000e0060f80e100010f83ec000103c023013c1cfe00fecc001bfe660c600867f0000001c000e0060f80e100010f83ec000103c024013c1cfe0013fccccc1b67e666600846b0000001c000e0060f80e100010f83ec000103c024013c1cfe0013fccccc1b67e666600846b0000001c000e0060f80e100010f83ec000103c023013c1cfe00fecc101b66066660096630000001c000e0060f80e100010f83ec000103c023013c1cfe00fecc101b66066660096630000001c000e0060f80e100010f83ec000103c024013c1cfe0013cc7c7c1b63c663e006c630000001c000e0060f80e100010f83ec000103c024013c1cfe0013cc7c7c1b63c663e006c630000001c000e0060f80e100010f83ec000103c017013c0ef1000603800070060f80e100010f83ec000103c017013c0ef1000603800070060f80e100010f83ec000103c018023c03c0f200061e00001e060f80e100010f83ec000103c018023c03c0f200061e00001e060f80e100010f83ec000103c018023c007ff2ff06f0000003fe0f80e100010f83ec000103c018023c007ff2ff06f0000003fe0f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c018023c007ff2ff06f0000001fe0f80e100010f83ec000103c018023c007ff2ff06f0000001fe0f80e100010f83ec000103c018023c03c0f200061e00000d060f80e100010f83ec000103c018023c03c0f200061e00000d060f80e100010f83ec000103c021053c0e00f01818fc000060fd000860f003800038060f80e100010f83ec000103c021053c0e00f01818fc000060fd000860f003800038060f80e100010f83ec000103c022053c1c01981818fc00010180fe0008406001c00070060f80e100010f83ec000103c022053c1c01981818fc00010180fe0008406001c00070060f80e100010f83ec000103c024183c1c0198f8f83f878f8cc0e3e1e7f001b06001c00060060f80e100010f83ec000103c024183c1c0198f8f83f878f8cc0e3e1e7f001b06001c00060060f80e100010f83ec000103c024063c1c0199999836fecc0ec0618336d802186001c00070060f80e100010f83ec000103c024063c1c0199999836fecc0ec0618336d802186001c00070060f80e100010f83ec000103c024183c1c01f9999836cfccccc06183f6d802106001c00060060f80e100010f83ec000103c024183c1c01f9999836cfccccc06183f6d802106001c00060060f80e100010f83ec000103c0271b3c1c0199999836cc0cccc061b306d802586001c00070060f83fffff8e400010f83ec000103c0271b3c1c0199999836cc0cccc061b306d802586001c00070060f83fffff8e400010f83ec000103c0361f3c1c0198f8f836c78cc7c0f0e1e6d801b0f001c00070060f83c000781e000030fb000318000018fc000003f800010f83ec000103c0361f3c1c0198f8f836c78cc7c0f0e1e6d801b0f001c00070060f83c000781e000030fb000318000018fc000003f800010f83ec000103c029013c0ef1000d03800038060f8338039833000030fb000318000018fc000003f800010f83ec000103c029013c0ef1000d03800038060f8338039833000030fb000318000018fc000003f800010f83ec000103c02f023c03c0f2001d1e00000e060f83071c18301f1e3e1e07f0f1f1981f0f8f198f9b1e333e1ff800010f83ec000103c02f023c03c0f2001d1e00000e060f83071c18301f1e3e1e07f0f1f1981f0f8f198f9b1e333e1ff800010f83ec000103c02c023c007ff2ff0af0000001fe0f8300e01830fd330a06d99999981999999b199cfd33f800010f83ec000103c02c023c007ff2ff0af0000001fe0f8300e01830fd330a06d99999981999999b199cfd33f800010f83ec000103c027003cec0015060f83071c18303330333f06d9f999981999981e1998fd33f800010f83ec000103c027003cec0015060f83071c18303330333f06d9f999981999981e1998fd33f800010f83ec000103c026003cec0005060f83380398fd330b3006d98199981999999b0f98fd33f800010f83ec000103c026003cec0005060f83380398fd330b3006d98199981999999b0f98fd33f800010f83ec000103c029003cec0019060f83c000781e1f1e331e06d8f198f81f0f8f1991981e1f331ff800010f83ec000103c029003cec0019060f83c000781e1f1e331e06d8f198f81f0f8f1991981e1f331ff800010f83ec000103c019003cec0005060f83fffff8f300000ff300010f83ec000103c019003cec0005060f83fffff8f300000ff300010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c021003cec0002060f80fc00001ffaff0380000007f8ff00e0fc00010f83ec000103c021003cec0002060f80fc00001ffaff0380000007f8ff00e0fc00010f83ec000103c022003cec0002060f80fc00001cfb00040380000007f80000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb00040380000007f80000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c02a003cec0002060f80fc00021c001ffd000703f80000070003c0fe0003038000e0fc00010f83ec000103c02a003cec0002060f80fc00021c001ffd000703f80000070003c0fe0003038000e0fc00010f83ec000103c02b003cec0002060f80fc00031c001980fe000703f8000007000660fe0003018000e0fc00010f83ec000103c02b003cec0002060f80fc00031c001980fe000703f8000007000660fe0003018000e0fc00010f83ec000103c02b003cec0002060f80fc00151c00198f1f0f0003f8000007000603e7c3c3c18000e0fc00010f83ec000103c02b003cec0002060f80fc00151c00198f1f0f0003f8000007000603e7c3c3c18000e0fc00010f83ec000103c02b003cec0002060f80fc00021c0019fe99088003f8000007000606fe6603618000e0fc00010f83ec000103c02b003cec0002060f80fc00021c0019fe99088003f8000007000606fe6603618000e0fc00010f83ec000103c02b003cec0002060f80fc00151c001999999f8003f8000007000606666607e18000e0fc00010f83ec000103c02b003cec0002060f80fc00151c001999999f8003f8000007000606666607e18000e0fc00010f83ec000103c02a003cec0002060f80fc000d1c00199999980003f80000070006fd6603018000e0fc00010f83ec000103c02a003cec0002060f80fc000d1c00199999980003f80000070006fd6603018000e0fc00010f83ec000103c02b003cec0002060f80fc00151c001f0f198f0003f80000070003c3e663c3c3c000e0fc00010f83ec000103c02b003cec0002060f80fc00151c001f0f198f0003f80000070003c3e663c3c3c000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c098005201770000019c029001770000019c028c01770000019c028c000122003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c022003cec0002060f80fc00001cfb000403f8000007f80000e0fc00010f83ec000103c021003cec0002060f80fc00001ffaff03f8000007f8ff00e0fc00010f83ec000103c021003cec0002060f80fc00001ffaff03f8000007f8ff00e0fc00010f83ec000103c01a003cec0002060f80fc000001faff00f8ef00010f83ec000103c01a003cec0002060f80fc000001faff00f8ef00010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c012003cec0002060f80e100010f83ec000103c00f003fecff01fe0fdfff0083ebff00c00f003fecff01fe0fdfff0083ebff00c010003cec0001060fdfff0083ec000107c010003cec0401060fdfff0083ec040107c00f003cec000006de000003ec000107c00f003cec400046de000003ec400147c00f003cec000006de000003ec000107c00f003cec040006de000003ec040107c00d003cec000007ddffec000107c00d003cec400047ddffec400147c007003cb2000107c007003cb2040107c007003cb2000107c007003cb2400147c007003cb2000107c007003cb2040107c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 3-2:  Design Master Creates a Menu Bar\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par One of the reasons people have this mistaken impression is that they associate programs like Design Master with resources.  Design Master is one of a class of programs I like to refer to as a programmer's CAD tool.  With Design Master, you don't have to type in a lot of obscure entries to create a menu bar; instead, you create a menu bar by drawing it, and then Design Master creates the code for the menu bar itself.  This really isn't all that critical with menu bars, and if menu bars were the hardest thing to create for a desktop program, I don't think tools like Design Master would really be all that important, and they might never have been invented at all.  When you start laying out a dozen or so buttons in a dialog, though, a tool like Design Master can save you a lot of trouble.  That's when it's really nice to be able to click on a button and drag it over a few pixels, instead of changing a value in a resource description file and recompiling it.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw650\pich412\picwgoal13000\pichgoal8240\macpict\bliptag503858694\blipupi72{\*\blipuid 1e08460613ef3593a83e70e2fe259a7b}2dba00000000019c028a1101a00082a0008e01000a000000000240030898005200000000007e029000000000007e028a00000000007e028a000102af0002af0006003fb1ff000006003fb1ff000006003fb1ff000006003fb1ff000006003fb1ff000006003fb1ff00000f003fe700003ff9ff00f8d600010f000f003fe700003ff9ff00f8d600010f0013003ffe0000e0eb00003ff9ff00f8d600010f0013003ffe0000e0eb00003ff9ff00f8d600010f0024113f000003c0001f187000000f818c000003c0f800013f0ffdff03fe3ffff8d600010f0024113f000003c0001f187000000f818c000003c0f800013f0ffdff03fe3ffff8d600010f0029113f0000fcf80018003000000c018030000663fe000006fc00093e67ffff3fffff3ffff8d600010f0029113f0000fcf80018003000000c018030000663fe000006fc00093e67ffff3fffff3ffff8d600010f002b1c3f0003fff00018383078000c0f9c7c000607c6ccc78f8ccd8f0f003e7ffe0e044e1f3e1ff8d600010f002b1c3f0003fff00018383078000c0f9c7c000607c6ccc78f8ccd8f0f003e7ffe0e044e1f3e1ff8d600010f002b243f0003ffe0001e1830cc000f198c300003c3070cccc60cce1998003e7e66673e3ccf3cfff8d600010f002b243f0003ffe0001e1830cc000f198c300003c3070cccc60cce1998003e7e66673e3ccf3cfff8d600010f002b243f0003fffc00181830fc000c198c30000063060ccc060ccc1f8f003e7e66673e7ccf3e1ff8d600010f002b243f0003fffc00181830fc000c198c30000063060ccc060ccc1f8f003e7e66673e7ccf3e1ff8d600010f002b243f0001fff800181830c0000c198c36000663660cccc6cccc1801803e666667267ccf3fcff8d600010f002b243f0001fff800181830c0000c198c36000663660cccc6cccc1801803e666667267ccf3fcff8d600010f002b243f0000fbe000183c7878000f8f9e1c0003c1c607c78387cc0f0f003f0f0e678e7e1e1e1ff8d600010f002b243f0000fbe000183c7878000f8f9e1c0003c1c607c78387cc0f0f003f0f0e678e7e1e1e1ff8d600010f000f003fe700003ff9ff00f8d600010f000f003fe700003ff9ff00f8d600010f000f003fe700003ff9ff00f8d600010f000f003fe700003ff9ff00f8d600010f0006003fb1ff000006003fb1ff000010003ce7040030f0000101c4e004010f0010003ce7000030f0000101c0e000010f0010003ce7400070f0000101c0e040014f0010003ce7000030f0000101c0e000010f0019003ce7040830003e000318000f80f90002c0c1c4e004010f0019003ce7000830003e000318000f80f90002c0c1c0e000010f001b003ce7400a700033000300000cc00606fb000283c1fce040014f001b003ce7000a300033000300000cc00606fb000283c1fce000010f001e003ce704133000331f1f38780ccccf8f878f8000000360c1fce004010f001e003ce700133000331f1f38780ccccf8f878f8000000360c1fce000010f001e003ce7401370003e333318cc0f8cc6060cccc000000430c1fce040014f001e003ce7001330003e333318cc0f8cc6060cccc000000430c1fce000010f001e003ce70413300036333318cc0cccc6060cccc000000420c1fce004010f001e003ce70013300036333318cc0cccc6060cccc000000420c1fce000010f0022033c40407feaff01f000fe330d18cc0cccc6c6ccccc0000004b0c1effff140014f0022033c00007feaff01f000fe330d18cc0cccc6c6ccccc0000004b0c1effff100010f0025033c040470ea00133000331f1f3c780f87c383878ccccc000363f1f8f1000007f104010f0025033c000070ea00133000331f1f3c780f87c383878ccccc000363f1f8f1000007f100010f0017033c404070ea000030f0000101f8f1000007f140014f0017033c000070ea000030f0000101f8f1000007f100010f0017043c0404707febff00f0f0000001f0ff0007f104010f0017043c0000707febff00f0f0000001f0ff0007f100010f0017043c4040707febff00f0f0000001f0ff0007f140014f0017043c0000707febff00f0f0000001f0ff0007f100010f0019043c0404707ceb000030f0000101f8f200011f07f104010f0019043c0000707ceb000030f0000101f8f200011f07f100010f0019043c4040707ceb000030f0000101f8f200011f07f140014f0019043c0000707ceb000030f0000101f8f200011f07f100010f0021043c0404707ceb000730003e00003003e0f80002c1e1f8f200011f07f104010f0021043c0000707ceb000730003e00003003e0f80002c1e1f8f200011f07f100010f002d0d3c4040707c7c6000300001e00003f4000a3000330000300330018180fb00028331f8f200011f07f140014f002d0d3c0000707c7c6000300001e00003f4000a3000330000300330018180fb00028331f8f200011f07f100010f002f0c3c0404707c6000003000033180f3000c300033331e3e033333e3e1e3e0fe0003036031f8f200011f07f104010f002f0c3c0000707c6000003000033180f3000c300033331e3e033333e3e1e3e0fe0003036031f8f200011f07f100010f0033103c4040707c60e3e1f01f0303e3671f0f80f7000c30003e33303303e33181833330fe0003043061f8f200011f07f140014f0033103c0000707c60e3e1f01f0303e3671f0f80f7000c30003e33303303e33181833330fe0003043061f8f200011f07f100010f0033103c0404707c786333303301e18383199980f7000c300030331e3303333181833330fe00030420c1f8f200011f07f104010f0033103c0000707c786333303301e18383199980f7000c300030331e3303333181833330fe00030420c1f8f200011f07f100010f0033103c4040707c606333303300318303199980f7000c300030330333033331b1b33330fe000304b181f8f200011f07f140014f0033103c0000707c606333303300318303199980f7000c300030330333033331b1b33330fe000304b181f8f200011f07f100010f0033103c0404707c60633330330331b303198f80f700133000301f1e3303e1f0e0e1e3333300000363f1f8f200011f07f104010f0033103c0000707c60633330330331b303198f80f700133000301f1e3303e1f0e0e1e3333300000363f1f8f200011f07f100010f0026113c4040707c60f331f01f01e0e30799919998f8000030f0000101f8f200011f07f140014f0026113c0000707c60f331f01f01e0e30799919998f8000030f0000101f8f200011f07f100010f001d043c0404707cf700000ff6000030f0000101f8f200011f07f104010f001d043c0000707cf700000ff6000030f0000101f8f200011f07f100010f0019043c4040707ceb000030f0000101f8f200011f07f140014f0019043c0000707ceb000030f0000101f8f200011f07f100010f0019043c0404707ceb000030f0000101f8f200011f07f104010f0019043c0000707ceb000030f0000101f8f200011f07f100010f0019043c4040707ceb000030f0000101f8f200011f07f140014f0019043c0000707ceb000030f0000101f8f200011f07f100010f0022043c0404707ceb000830001e3000003003e0f90002c1e1f8f200011f07f104010f0022043c0000707ceb000830001e3000003003e0f90002c1e1f8f200011f07f100010f0022043c4040707ceb0008300033300000300330f900028331f8f200011f07f140014f0022043c0000707ceb0008300033300000300330f900028331f8f200011f07f100010f0025043c0404707ceb000a3000303e1e1e330331e330fc0003036031f8f200011f07f104010f0025043c0000707ceb000a3000303e1e1e330331e330fc0003036031f8f200011f07f100010f0025043c4040707ceb0002300030fe33043603e331e0fc00030430e1f8f200011f07f140014f0025043c0000707ceb0002300030fe33043603e331e0fc00030430e1f8f200011f07f100010f0025043c0404707ceb000a300030333f303c033330c0fc0003042031f8f200011f07f104010f0025043c0000707ceb000a300030333f303c033330c0fc0003042031f8f200011f07f100010f0025043c4040707ceb000a30003333303336033331e0fc000304b331f8f200011f07f140014f0025043c0000707ceb000a30003333303336033331e0fc000304b331f8f200011f07f100010f0026043c0404707ceb000b30001e331e1e3303e1e33333fd00030361e1f8f200011f07f104010f0026043c0000707ceb000b30001e331e1e3303e1e33333fd00030361e1f8f200011f07f100010f0019043c4040707ceb000030f0000101f8f200011f07f140014f0019043c0000707ceb000030f0000101f8f200011f07f100010f0019043c0404707ceb000030f0000101f8f200011f07f104010f0019043c0000707ceb000030f0000101f8f200011f07f100010f0019043c4040707ceb000030f0000101f8f200011f07f140014f0019043c0000707ceb000030f0000101f8f200011f07f100010f0018043c0404707ceb00003fefff00f8f200011f07f104010f0018043c0000707ceb00003fefff00f8f200011f07f100010f0018043c4040707ceb00003fefff00f8f200011f07f140014f0018043c0000707ceb00003fefff00f8f200011f07f100010f0021043c0404707ceb00073fffc1f9cfffe7f3f8ff023cfff8f200011f07f104010f0021043c0000707ceb00073fffc1f9cfffe7f3f8ff023cfff8f200011f07f100010f0020043c4040707ceb00063fffcff9ff3fe7f7ff027ccff8f200011f07f140014f0020043c0000707ceb00063fffcff9ff3fe7f7ff027ccff8f200011f07f100010f0024043c0404707ceb00093fffcfc18e0fe7e383c3fbff03fc9ccff8f200011f07f104010f0024043c0000707ceb00093fffcfc18e0fe7e383c3fbff03fc9ccff8f200011f07f100010f0024043c4040707ceb00093fffc399cf3fe7f39999fbff03fbcccff8f200011f07f140014f0024043c0000707ceb00093fffc399cf3fe7f39999fbff03fbcccff8f200011f07f100010f0027043c0404707ceb00133fffcf99cf3fe7f39981fffffe7ffffffbdc0ff8f200011f07f104010f0027043c0000707ceb00133fffcf99cf3fe7f39981fffffe7ffffffbdc0ff8f200011f07f100010f0027043c4040707ceb00133fffcf99cf27e7f3999ffffffebffffffb4fcff8f200011f07f140014f0027043c0000707ceb00133fffcf99cf27e7f3999ffffffebffffffb4fcff8f200011f07f100010f0027043c0404707ceb00133fffc1c1878fe06199c3999ffedffffffc9fcff8f200011f07f104010f0027043c0000707ceb00133fffc1c1878fe06199c3999ffedffffffc9fcff8f200011f07f100010f001d043c4040707ceb00003ff6ff01feeffcff00f8f200011f07f140014f001d043c0000707ceb00003ff6ff01feeffcff00f8f200011f07f100010f001d043c0404707ceb00003ff6ff01fef7fcff00f8f200011f07f104010f001d043c0000707ceb00003ff6ff01fef7fcff00f8f200011f07f100010f00980052007e000000fc0290007e000000fc028a007e000000fc028a00011d043c4040707ceb00003ff6ff01fefbfcff00f8f200011f07f140014f001d043c0000707ceb00003ff6ff01fefbfcff00f8f200011f07f100010f001d043c0404707ceb000030f50000fcfd000101f8f200011f07f104010f001d043c0000707ceb000030f50000fcfd000101f8f200011f07f100010f001d043c4040707ceb000030f50000fefd000101f8f200011f07f140014f001d043c0000707ceb000030f50000fefd000101f8f200011f07f100010f002e043c0404707cf900033fffff80f70002300014fe000310000540fe0000d8fe00024141f8f200011f07f104010f002e043c0000707cf900033fffff80f70002300014fe000310000540fe0000d8fe00024141f8f200011f07f100010f0035043c4040707cf9001b30000186198000e00030c0000180300022080008000002000002000cfe00028201f8f200011f07f140014f0035043c0000707cf9001b30000186198000e00030c0000180300022080008000002000002000cfe00028201f8f200011f07f100010f0034043c0404707cf9001930000186198000600030c0000180300010141514105001050445fd0003014141f8f200011f07f104010f0034043c0000707cf9001930000186198000600030c0000180300010141514105001050445fd0003014141f8f200011f07f100010f0033043c4040707cf9001930000186d9f0f060f036c78d8f8030000a082208088802088282fc00022021f8f200011f07f140014f0033043c0000707cf9001930000186d9f0f060f036c78d8f8030000a082208088802088282fc00022021f8f200011f07f100010f0034043c0404707cf9001930000186d99998619836ccce1980300001101110104001054104fd0003040011f8f200011f07f104010f0034043c0000707cf9001930000186d99998619836ccce1980300001101110104001054104fd0003040011f8f200011f07f100010f0034043c4040707cf9001a30000186d9999861f836cccc19803000220a220a08880208028280fd0002a221f8f200011f07f140014f0034043c0000707cf9001a30000186d9999861f836cccc19803000220a220a08880208028280fd0002a221f8f200011f07f100010f0035043c0404707cf90021300001833199986180198ccc198030001404150414500105044104440000014141f8f200011f07f104010f0035043c0000707cf90021300001833199986180198ccc198030001404150414500105044104440000014141f8f200011f07f100010f0027043c4040707cf90005300001833198fef00519878c0f8030f0000101f8f200011f07f140014f0027043c0000707cf90005300001833198fef00519878c0f8030f0000101f8f200011f07f100010f0020043c0404707cf900033fffff80f7000030f0000101f8f200011f07f104010f0020043c0000707cf900033fffff80f7000030f0000101f8f200011f07f100010f0019043c4040707ceb000030f0000101f8f200011f07f140014f0019043c0000707ceb000030f0000101f8f200011f07f100010f0019043c0404707ceb000030f0000101f8f200011f07f104010f0019043c0000707ceb000030f0000101f8f200011f07f100010f001d043c4040707cf900007ff4ff00f0f0000101f8f200011f07f140014f001d043c0000707cf900007ff4ff00f0f0000101f8f200011f07f100010f0028043c0404707cf900037fffff80f70002300010fe00010150f800024141f8f200011f07f104010f0028043c0000707cf900037fffff80f70002300010fe00010150f800024141f8f200011f07f100010f0031043c4040707cf9000470000181e0fe00001efe00041800700020fd000380000080fb00028201f8f200011f07f140014f0031043c0000707cf9000470000181e0fe00001efe00041800700020fd000380000080fb00028201f8f200011f07f100010f0032043c0404707cf900047000018330fe000033fd000b603000101414150041411140fc0003014141f8f200011f07f104010f0032043c0000707cf900047000018330fe000033fd000b603000101414150041411140fc0003014141f8f200011f07f100010f0032043c4040707cf900107000018301f1e1e0301e3e1e38f8f00020fe2204008220a080fb00022221f8f200011f07f140014f0032043c0000707cf900107000018301f1e1e0301e3e1e38f8f00020fe2204008220a080fb00022221f8f200011f07f100010f0032043c0404707cf9001070000183033303301e3333301860700010fe110300415041fb0003040111f8f200011f07f104010f0032043c0000707cf9001070000183033303301e3333301860700010fe110300415041fb0003040111f8f200011f07f100010f0032043c4040707cf90018700001830331e3f0033f331e186070002022220a008200a0a0fb0002a221f8f200011f07f140014f0032043c0000707cf90018700001830331e3f0033f331e186070002022220a008200a0a0fb0002a221f8f200011f07f100010f0034043c0404707cf90019700001833330330033303303186c700015141101004141104111fd0003014141f8f200011f07f104010f0034043c0000707cf90019700001833330330033303303186c700015141101004141104111fd0003014141f8f200011f07f100010f002b043c4040707cf9000e70000181e1f1e1e01e1e331e3c38f0fd00000af5000101f8f200011f07f140014f002b043c0000707cf9000e70000181e1f1e1e01e1e331e3c38f0fd00000af5000101f8f200011f07f100010f0020043c0404707cf900037fffff80f7000030f0000101f8f200011f07f104010f0020043c0000707cf900037fffff80f7000030f0000101f8f200011f07f100010f0018043c4040707cf900007fe1ff00f8f200011f07f140014f0018043c0000707cf900007fe1ff00f8f200011f07f100010f0019043c0404707ceb000030f0000101f8f200011f07f104010f0019043c0000707ceb000030f0000101f8f200011f07f100010f0019043c4040707ceb000030f0000101f8f200011f07f140014f0019043c0000707ceb000030f0000101f8f200011f07f100010f0020043c0404707ceb000230001efe00003ff70002c3f1f8f200011f07f104010f0020043c0000707ceb000230001efe00003ff70002c3f1f8f200011f07f100010f0023043c4040707ceb00093000331800180c000018fa00028031f8f200011f07f140014f0023043c0000707ceb00093000331800180c000018fa00028031f8f200011f07f100010f002b073c0404707c000003fcff00e0f400093000303e1f3e0c1e333efb0003036061f8f200011f07f104010f002b073c0000707c000003fcff00e0f400093000303e1f3e0c1e333efb0003036061f8f200011f07f100010f002b073c4040707c00007cfc00001ff4000930001e1833180c331e18fb00030430c1f8f200011f07f140014f002b073c0000707c00007cfc00001ff4000930001e1833180c331e18fb00030430c1f8f200011f07f100010f002c073c0404707c0003c7fcff01f1e0f500093000031833180c3f0c18fb00030420c1f8f200011f07f104010f002c073c0000707c0003c7fcff01f1e0f500093000031833180c3f0c18fb00030420c1f8f200011f07f100010f002c073c4040707c00073cfc00011e70f500093000331b331b0c301e1bfb000304b181f8f200011f07f140014f002c073c0000707c00073cfc00011e70f500093000331b331b0c301e1bfb000304b181f8f200011f07f100010f002e073c0404707c000ee0fc000103b8f5000b30001e0e1f0e0c1e330e3330fd0003036181f8f200011f07f104010f002e073c0000707c000ee0fc000103b8f5000b30001e0e1f0e0c1e330e3330fd0003036181f8f200011f07f100010f00230e3c4040707c001dc001f18000c001dcf5000030f0000101f8f200011f07f140014f00230e3c0000707c001dc001f18000c001dcf5000030f0000101f8f200011f07f100010f00230e3c0404707c001dc001800000c001dcf5000030f0000101f8f200011f07f104010f00230e3c0000707c001dc001800000c001dcf5000030f0000101f8f200011f07f100010f00230e3c4040707c001dc001838f87c001dcf5000030f0000101f8f200011f07f140014f00230e3c0000707c001dc001838f87c001dcf5000030f0000101f8f200011f07f100010f00230e3c0404707c001dc001e18cccc001dcf5000030f0000101f8f200011f07f104010f00230e3c0000707c001dc001e18cccc001dcf5000030f0000101f8f200011f07f100010f00230e3c4040707c001dc001818cccc001dcf5000030f0000101f8f200011f07f140014f00230e3c0000707c001dc001818cccc001dcf5000030f0000101f8f200011f07f100010f00290e3c0404707c001dc001818cccc001dcf5000530003e000033f60002c1e1f8f200011f07f104010f00290e3c0000707c001dc001818cccc001dcf5000530003e000033f60002c1e1f8f200011f07f100010f00290e3c4040707c001dc00183ccc7c001dcf50005300033000033f600028331f8f200011f07f140014f00290e3c0000707c001dc00183ccc7c001dcf50005300033000033f600028331f8f200011f07f100010f0029073c0404707c001dc0fc000101dcf500063000331e3e333ef80003036331f8f200011f07f104010f0029073c0000707c001dc0fc000101dcf500063000331e3e333ef80003036331f8f200011f07f100010f0028073c4040707c000ee0fc000103b8f5000230003efd33f800030431e1f8f300027fff07f140014f0028073c0000707c000ee0fc000103b8f5000230003efd33f800030431e1f8f300027fff07f100010f0028073c0404707c00073cfc00011e70f50002300030fd33f80003042331f8f300027fff07f104010f0028073c0000707c00073cfc00011e70f50002300030fd33f80003042331f8f300027fff07f100010f0028073c4040707c0003c7fcff01f1e0f50002300030fd33f8000304b331f8f300027fff07f140014f0028073c0000707c0003c7fcff01f1e0f50002300030fd33f8000304b331f8f300027fff07f100010f002b073c0404707c00007cfc00001ff400083000301e3e1e3e3330fa00030361e1f8f300027fff07f104010f002b073c0000707c00007cfc00001ff400083000301e3e1e3e3330fa00030361e1f8f300027fff07f100010f0027073c4040707c000003fcff00e0f4000030fe0002300030f6000101f8f300027fff07f140014f0027073c0000707c000003fcff00e0f4000030fe0002300030f6000101f8f300027fff07f100010f001a043c0404707ceb000030f0000101f8f300027fff07f104010f001a043c0000707ceb000030f0000101f8f300027fff07f100010f001a043c4040707ceb000030f0000101f8f300027fff07f140014f001a043c0000707ceb000030f0000101f8f300027fff07f100010f001a043c0404707ceb000030f0000101f8f300027fff07f104010f001a043c0000707ceb000030f0000101f8f300027fff07f100010f001a043c4040707ceb000030f0000101f8f300027fff07f140014f001a043c0000707ceb000030f0000101f8f300027fff07f100010f001e043c0404707ceb000330003018f40002c1e1f8f300027fff07f104010f001e043c0000707ceb000330003018f40002c1e1f8f300027fff07f100010f001d043c4040707febff05f00030000060f600018331f0ff0007f140014f001d043c0000707febff05f00030000060f600018331f0ff0007f100010f001e043c0404707febff05f000303878f8f70002036331f0ff0007f104010f001e043c0000707febff05f000303878f8f70002036331f0ff0007f100010f001e033c404070ea000530003018c060f70003043331f8f1000007f140014f001e033c000070ea000530003018c060f70003043331f8f1000007f100010f001e033c040470ea0005300030187860f700030421f1f8f1000007f104010f001e033c000070ea0005300030187860f700030421f1f8f1000007f100010f001b033c40407feaff05f00030180c6cf7000204b031effff140014f001b033c00007feaff05f00030180c6cf7000204b031effff100010f0019003ce7040730003f3c7838ccc0f900030361e1fce004010f0019003ce7000730003f3c7838ccc0f900030361e1f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0098005200fc0000017a029000fc0000017a028a00fc0000017a028a000114003ce7040330003e18f40002c0f1fce004010f0014003ce7000330003e18f40002c0f1f8e000010f0016003ce74005700033000060f600028131f8e040014f0016003ce70005300033000060f600028131f8e000010f001a003ce704083000333878f8ccd8f0fa0003036331fce004010f001a003ce700083000333878f8ccd8f0fa0003036331f8e000010f001a003ce7400870003e18cc60cce198fa0003043331f8e040014f001a003ce7000830003e18cc60cce198fa0003043331f8e000010f001a003ce7040830003018c060ccc1f8fa0003042331fce004010f001a003ce7000830003018c060ccc1f8fa0003042331f8e000010f001a003ce7400870003018cc6cccc180fa000304b321f8e040014f001a003ce7000830003018cc6cccc180fa000304b321f8e000010f001c003ce7040a3000303c78387cc0f19980fc00030363c1fce004010f001c003ce7000a3000303c78387cc0f19980fc00030363c1f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0013003ce7040230001ef30002c001fce004010f0013003ce7000230001ef30002c001f8e000010f0013003ce7400270000cf300028001f8e040014f0013003ce7000230000cf300028001f8e000010f0017003ce7040530000c1e1e3ef70003036001fce004010f0017003ce7000530000c1e1e3ef70003036001f8e000010f0016003ce7400270000cfe33f700030433f1f8e040014f0016003ce7000230000cfe33f700030433f1f8e000010f0017003ce7040530000c303333f70003042001fce004010f0017003ce7000530000c303333f70003042001f8e000010f0016003ce7400270000cfe33f7000304b001f8e040014f0016003ce7000230000cfe33f7000304b001f8e000010f0019003ce704013000fe1e02333330f90003036001fce004010f0019003ce700013000fe1e02333330f90003036001f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0019003ce7040230003ffe00023e0630f90002c001fce004010f0019003ce7000230003ffe00023e0630f90002c001f8e000010f001a003ce7400970000c000018300600c0fa00028001f8e040014f001a003ce7000930000c000018300600c0fa00028001f8e000010f001b003ce7040930000c1e333e303e71f0fb00030363f1fce004010f001b003ce7000930000c1e333e303e71f0fb00030363f1f8e000010f001b003ce7400970000c331e183c6630c0fb0003043001f8e040014f001b003ce7000930000c331e183c6630c0fb0003043001f8e000010f001b003ce7040930000c3f0c18306630c0fb00030423f1fce004010f001b003ce7000930000c3f0c18306630c0fb00030423f1f8e000010f001b003ce7400970000c301e1b306630d8fb000304b001f8e040014f001b003ce7000930000c301e1b306630d8fb000304b001f8e000010f001d003ce7040b30000c1e330e3e3e78719980fd0003036001fce004010f001d003ce7000b30000c1e330e3e3e78719980fd0003036001f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0018003ce7040230001efe00013838f80002c3c1fce004010f0018003ce7000230001efe00013838f80002c3c1f8e000010f0018003ce74002700033fe00011818f800028301f8e040014f0018003ce70002300033fe00011818f800028301f8e000010f0019003ce704073000301e363c1818f90003036301fce004010f0019003ce700073000301e363c1818f90003036301f8e000010f0019003ce7400770001e3338661818f90003043301f8e040014f0019003ce7000730001e3338661818f90003043301f8e000010f0019003ce704073000033030661818f90003042301fce004010f0019003ce700073000033030661818f90003042301f8e000010f0019003ce740077000333330661818f9000304b301f8e040014f0019003ce700073000333330661818f9000304b301f8e000010f001b003ce7040430001e1e30fe3c016660fb0003036301fce004010f001b003ce7000430001e1e30fe3c016660fb0003036301f8e000010f0011003ce7400070f1000203c1f8e040014f0011003ce7000030f1000203c1f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f0018003ce7040230001efe000103e0f80002c3c1fce004010f0018003ce7000230001efe000103e0f80002c3c1f8e000010f0018003ce74002700033fe00010330f8000280c1f8e040014f0018003ce70002300033fe00010330f8000280c1f8e000010f001b003ce70409300030363cc30331e330fb00030360c1fce004010f001b003ce70009300030363cc30331e330fb00030360c1f8e000010f001b003ce740097000373866db03e331e0fb00030430c1f8e040014f001b003ce700093000373866db03e331e0fb00030430c1f8e000010f001b003ce704093000333066db033330c0fb00030420c1fce004010f001b003ce700093000333066db033330c0fb00030420c1f8e000010f001b003ce74009700033306666033331e0fb000304b0c1f8e040014f001b003ce70009300033306666033331e0fb000304b0c1f8e000010f001c003ce7040a30001e303c6603e1e33333fc00030360c1fce004010f001c003ce7000a30001e303c6603e1e33333fc00030360c1f8e000010f0011003ce7400070f1000203c1f8e040014f0011003ce7000030f1000203c1f8e000010f0010003ce7040030f0000101fce004010f0010003ce7000030f0000101f8e000010f0010003ce7400070f0000101f8e040014f0010003ce7000030f0000101f8e000010f000f003ce704003fefff00fce004010f000f003ce700003fefff00f8e000010f000f003ce7400041efff00f8e040014f000f003ce7000001efff00f8e000010f0007003cb204010f0007003cb200010f0007003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f00980052017a0000019c0290017a0000019c028a017a0000019c028a000107003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f0007003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f0007003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f0007003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f0007003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f0007003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f0007003cb240014f0007003cb200010f0007003cb204010f0007003cb200010f0006003fb1ff000006003fb1ff000006003fb1ff000006003fb1ff000002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 3-2:  Design Master Creates a Dialog\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Once you draw your menu bar, window, or whatever, Design Master essentially writes a part of a program for you, creating code that will create what you drew.  In most cases you can create a resource fork directly, which is where the idea that Design Master and programs like it are resource compilers or resource editors come from, but in fact, you can also create a Pascal program that doesn't use resources.  In short, Design Master is a wonderful tool.  It can save you a lot of time, especially when you are creating windows and dialogs with lots of buttons and other controls.  But the fact that Design Master can create resources is really incidental; it can generate code to create what you drew in a lot of formats, and resources are just one of many.\par In this course, we'll always use Rez to create the resources for programs.  There are two really good reasons for this:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab A listing of a resource description file is a lot more precise on paper than telling you how to create something graphically with a tool like Design Master.\par 2.\tab Rez comes with this course.  You don't have to buy Design Master to create the programs in this course.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par On the other hand, if you have Design Master or one of it's cousins, put it to use, especially when you start creating windows and dialogs!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In this lesson we've made the switch to resources, changing one of our most complicated programs to use resources to see how it's done.  We've learned what resources are, how to use Rez to create resources, and how to use scripts to automate the whole process of building the more complicated programs we're now creating.\par A few other tools and concepts were mentioned briefly so you would know that they exist and basically what they are.  These include Appendix E of }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , which covers resource types used by the toolbox; Types.Rez, the main resource type file used by the resource compiler; DeRez, a utility that can decompile resources so you can changed them with Rez; and Design Master, a programmer's CAD tool that lets you draw complicated parts of a desktop program, and then create either resources or Pascal source code to create the same thing in your program.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 NewMenuBar2\tab SetMenuBar\tab SetSysBar\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rMenu\tab rMenuBar\tab rMenuItem\tab rPString\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkend bk15}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resources}{\rxe bk15}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 4 \endash  Keep Alert!}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 4 \endash  Keep Alert!}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 4 \endash  Keep Alert!\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk18}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Alerts are a simple kind of window used to display information and ask the user of the program for a simple, push-button response.  This lesson covers how to create and use alerts.  We'll also work on Frame.Pas, the basic program we will use as the starting point for most of the programs in the rest of this course.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Alerts Present Messages}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Alerts Present Messages\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When something goes wrong in a text program, it's easy to plop in a\par \par }{\f6\fs20 writeln('You goofed by doing this instead of that.');\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 in the program when the error is found.  Writing a copyright message is just as easy.  Letting the user pick between a couple of alternatives is a little tougher, but not much:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 write('Do you really want to reformat your hard disk? (Y or N) ');\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 readln(response);\par }{\f4 \par Alerts are used to do this sort of thing in a desktop program.  An alert is a small window, generally with no title bar (the lined thing at the top of most windows), no scroll bars, no grow box \endash  in short, just a box on the screen where you can write some stuff.  Figure 4-1 shows a typical alert.  The picture at the top left of the alert is called the alert icon, several of which are predefined and used for specific purposes.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 note alert}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 talking head}}}{\f4 The one you see here is a note alert, used in alerts that give you information, like a copyright message.  This particular icon is also known as the "talking head."  The message is generally text, but there's really nothing that says an alert has to be all text.  The tools in the toolbox make it really easy to put text in an alert, since that is what you will need to do most of the time, but you could certainly put in some sort of a picture, or even an animation, if you prefer.  Finally, most alerts have at least one button.  A few, like an alert you put up to tell someone the program is busy printing a document, don't have a button; these alerts go away on their own.  Most alerts have at least an OK button, though.  Once you've read the text, you click on the OK button to make the alert go away so you can do something else.  Alerts that offer choices will have several buttons, one for each choice.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1037{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw328\pich148\picwgoal6560\pichgoal2960\macpict\bliptag-818030130\blipupi72{\*\blipuid cf3dd9ce45896896383b3f541f07b152}0a7500000000009401481101a00082a0008e01000a0000000002d0024098002a000000000094014800000000009401480000000000940148000102d70002d70007003fdaff01fc0007003fdaff01fc00070030da00010c00070030da00010c00070030da00010c00070030da00010c000901307fdcff02fe0c000901307fdcff02fe0c000901307fdcff02fe0c000901307fdcff02fe0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c002702307c03fcff0efc001f8001800000c0000060000380fe000006fe000301c000c0fc00023e0c002702307c03fcff0efc001f8001800000c0000060000380fe000006fe000301c000c0fc00023e0c002804307c03000ffeff05fc0006000180fd0008306000018000030006fe0003030060c0fc00023e0c002804307c03000ffeff05fc0006000180fd0008306000018000030006fe0003030060c0fc00023e0c002a04307c03000ffeff1afc00060f0f8f9981c3c07c7c3c0183e3c7c03e3e6603c7c0f8f878fd00023e0c002a04307c03000ffeff1afc00060f0f8f9981c3c07c7c3c0183e3c7c03e3e6603c7c0f8f878fd00023e0c002a0b307c03030ffc000ffc000619fe990a80c6003066660186660300fe660506630060ccccfd00023e0c002a0b307c03030ffc000ffc000619fe990a80c6003066660186660300fe660506630060ccccfd00023e0c002a22307c03030ff00003fc00061999999b80c3c030667e018663c30066666e06630060ccfcfd00023e0c002a22307c03030ff00003fc00061999999b80c3c030667e018663c30066666e06630060ccfcfd00023e0c002a22307c03000fc00000fc00061999998d80c06036666001866063606666360663006cccc0fd00023e0c002a22307c03000fc00000fc00061999998d80c06036666001866063606666360663006cccc0fd00023e0c002a22307c03000fc3ccfcfc00060f0f8f9181e3c01c663c03c3e3c1c03e3e4603c30038cc78fd00023e0c002a22307c03000fc3ccfcfc00060f0f8f9181e3c01c663c03c3e3c1c03e3e4603c30038cc78fd00023e0c001808307c03000fc00000fcfc00000ff400003cf700023e0c001808307c03000fc00000fcfc00000ff400003cf700023e0c001008307c03000fc333ccfce300023e0c001008307c03000fc333ccfce300023e0c001a08307c03000fc00000fcfb0000c0fc000207060ef200023e0c001a08307c03000fc00000fcfb0000c0fc000207060ef200023e0c001a08307c03000fc3cf30fcfd00000cfa0002030018f200023e0c001a08307c03000fc3cf30fcfd00000cfa0002030018f200023e0c002018307c0303ffc00000fc001f0f8f1f01c7c0663c666c030e3e3cf300023e0c002018307c0303ffc00000fc001f0f8f1f01c7c0663c666c030e3e3cf300023e0c002010307c03003fc00003fc001999980c00c660fe66047003061866f300023e0c002010307c03003fc00003fc001999980c00c660fe66047003061866f300023e0c002018307c03003f00000ffc0019998f0c00c6606e6666600306187ef300023e0c002018307c03003f00000ffc0019998f0c00c6606e6666600306187ef300023e0c002018307c030ff00000fffc001999818d80c6603666666003061860f300023e0c002018307c030ff00000fffc001999818d80c6603666666003061860f300023e0c002104307c03003ffeff11fc001f0f8f0701e660463c3e60078f183c60f400023e0c002104307c03003ffeff11fc001f0f8f0701e660463c3e60078f183c60f400023e0c001604307c03003ffeff02fc0018fb00003cec00023e0c001604307c03003ffeff02fc0018fb00003cec00023e0c000e02307c03fcff00fce300023e0c000e02307c03fcff00fce300023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c001101307cf2000007fcff00e0f200023e0c001101307cf2000007fcff00e0f200023e0c001101307cf20000f8fc00001ff200023e0c001101307cf20000f8fc00001ff200023e0c001301307cf30001078ffcff01f1e0f300023e0c001301307cf30001078ffcff01f1e0f300023e0c001301307cf300010e78fc00011e70f300023e0c001301307cf300010e78fc00011e70f300023e0c001301307cf300011dc0fc000103b8f300023e0c001301307cf300011dc0fc000103b8f300023e0c001501307cf300083b8000078c600001dcf300023e0c001501307cf300083b8000078c600001dcf300023e0c001501307cf300083b80000cccc00001dcf300023e0c001501307cf300083b80000cccc00001dcf300023e0c001501307cf300083b80000ccd800001dcf300023e0c001501307cf300083b80000ccd800001dcf300023e0c001501307cf300083b80000ccf000001dcf300023e0c001501307cf300083b80000ccf000001dcf300023e0c001501307cf300083b80000ccd800001dcf300023e0c001501307cf300083b80000ccd800001dcf300023e0c001501307cf300083b80000cccc00001dcf300023e0c001501307cf300083b80000cccc00001dcf300023e0c001501307cf300083b8000078c600001dcf300023e0c001501307cf300083b8000078c600001dcf300023e0c001301307cf300011dc0fc000103b8f300023e0c001301307cf300011dc0fc000103b8f300023e0c001301307cf300010e78fc00011e70f300023e0c001301307cf300010e78fc00011e70f300023e0c001301307cf30001078ffcff01f1e0f300023e0c001301307cf30001078ffcff01f1e0f300023e0c001101307cf20000f8fc00001ff200023e0c001101307cf20000f8fc00001ff200023e0c001101307cf2000007fcff00e0f200023e0c001101307cf2000007fcff00e0f200023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307cdc00023e0c000901307fdcff02fe0c000901307fdcff02fe0c000901307fdcff02fe0c000901307fdcff02fe0c00070030da00010c00070030da00010c00070030da00010c00070030da00010c0007003fdaff01fc0007003fdaff01fc0002d70002d700a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 4-1:  A Typical Alert\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Before going too much further, I'd like to point out that there is another sort of temporary window called a dialog.  This lesson does not deal with dialogs at all.  Dialogs usually (but not always!) have something in them besides buttons, text messages an icons, and often support other features as well.  From a visual standpoint, alerts are a specific subset of a larger class of things called dialogs, but you end up using completely different calls to create alerts and dialogs.  We'll talk about dialogs later, after you know more about the various controls you can put in a dialog.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using an Alert for an About Box}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using an Alert for an About Box\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 About command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 about box}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AlertWindow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 copyright}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are several ways to create an alert in your program, but one of the easiest is the }{\f6\fs20 AlertWindow}{\f4  call in the window manager.  We'll start learning about alerts by creating an about box for our Frame program.  As you know from using a lot of desktop programs, the about box is the traditional place to put the name of the program, copyright information, and the place for the programmer to take a bow.  Figure 4-2 shows the about box we'll create.  This about box will be drawn when we pick the About command form the apple menu, and will stay on the screen until the user clicks on the OK button.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1038{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw380\pich168\picwgoal7600\pichgoal3360\macpict\bliptag-1568094700\blipupi72{\*\blipuid a288c614ed4a5f5a8ae14151073610ef}0e050000000000a8017c1101a00082a0008e01000a0000000002d002409800300000000000a801800000000000a8017c0000000000a8017c000102d10002d10006003fd3ff00c006003fd3ff00c0060030d30000c0060030d30000c0060030d30000c0060030d30000c00801307fd5ff01e0c00801307fd5ff01e0c00801307fd5ff01e0c00801307fd5ff01e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c01502307c03fcff02fc001ffc0001c00fe6000203e0c01502307c03fcff02fc001ffc0001c00fe6000203e0c01804307c03000ffeff02fc0018fd000203c013e6000203e0c01804307c03000ffeff02fc0018fd000203c013e6000203e0c01904307c03000ffeff09fc0018363efe1e00c033e6000203e0c01904307c03000ffeff09fc0018363efe1e00c033e6000203e0c01911307c03030ffc000ffc001e3866db3300c033e6000203e0c01911307c03030ffc000ffc001e3866db3300c033e6000203e0c01911307c03030ff00003fc00183066db3f00c033e6000203e0c01911307c03030ff00003fc00183066db3f00c033e6000203e0c01911307c03000fc00000fc00183066db3000c032e6000203e0c01911307c03000fc00000fc00183066db3000c032e6000203e0c01911307c03000fc3ccfcfc0018303edb1e03f33ce6000203e0c01911307c03000fc3ccfcfc0018303edb1e03f33ce6000203e0c01008307c03000fc00000fcdd000203e0c01008307c03000fc00000fcdd000203e0c01008307c03000fc333ccfcdd000203e0c01008307c03000fc333ccfcdd000203e0c02212307c03000fc00000fc00180001046300006180fd00040e3000e018f0000203e0c02212307c03000fc00000fc00180001046300006180fd00040e3000e018f0000203e0c0231b307c03000fc3cf30fc001800018c0300006180000c00001800006018f0000203e0c0231b307c03000fc3cf30fc001800018c0300006180000c00001800006018f0000203e0c0231b307c0303ffc00000fc001f1981dce331e06d8f0f1f0f1b3e70f060f8f0000203e0c0231b307c0303ffc00000fc001f1981dce331e06d8f0f1f0f1b3e70f060f8f0000203e0c0231b307c03003fc00003fc00199981fc6363306d99980c199c1831986198f0000203e0c0231b307c03003fc00003fc00199981fc6363306d99980c199c1831986198f0000203e0c0231b307c03003f00000ffc00199b81ac63c3f06d9f8f0c1f981831f86198f0000203e0c0231b307c03003f00000ffc00199b81ac63c3f06d9f8f0c1f981831f86198f0000203e0c0231b307c030ff00000fffc00198d818c6363003318018d98181831806198f0000203e0c0231b307c030ff00000fffc00198d818c6363003318018d98181831806198f0000203e0c02304307c03003ffeff13fc001f11818cf331e0330f0f070f181878f0f0f8f0000203e0c02304307c03003ffeff13fc001f11818cf331e0330f0f070f181878f0f0f8f0000203e0c01304307c03003ffeff03fc00000fe0000203e0c01304307c03003ffeff03fc00000fe0000203e0c00e02307c03fcff00fcdd000203e0c00e02307c03fcff00fcdd000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c02a01307cf900000ffd00050c0000038318fe000330000007fe000501e3e1e1e03efd00001cfe000203e0c02a01307cf900000ffd00050c0000038318fe000330000007fe000501e3e1e1e03efd00001cfe000203e0c02701307cf900031980000cfd0002018018fb00000cfe000003fe33013033fd00000cfe000203e0c02701307cf900031980000cfd0002018018fb00000cfe000003fe33013033fd00000cfe000203e0c02c01307cf9001f180f1f1f0f9c7c3c01871f1b1f3670f0f01f363cfe0333330330331f1e1e1f0cfe000203e0c02c01307cf9001f180f1f1f0f9c7c3c01871f1b1f3670f0f01f363cfe0333330330331f1e1e1f0cfe000203e0c02c01307cf9001f1819998c198c66600183199c33383199800c3866db0333e303303e333033330cfe000203e0c02c01307cf9001f1819998c198c66600183199c33383199800c3866db0333e303303e333033330cfe000203e0c02c01307cf9001f1819998c198c663c01831998333031f8f00c3066db03336303f030331e30330cfe000203e0c02c01307cf9001f1819998c198c663c01831998333031f8f00c3066db03336303f030331e30330cfe000203e0c02c01307cf900151999998d998c66060183199833303180180c3066db03fe33063030330333330cfe000203e0c02c01307cf900151999998d998c66060183199833303180180c3066db03fe33063030330333330cfe000203e0c02c01307cf900250f0f19870f9e663c03c79f181f3078f0f00c303cdb01e331e330301f1e1e1f1e18000003e0c02c01307cf900250f0f19870f9e663c03c79f181f3078f0f00c303cdb01e331e330301f1e1e1f1e18000003e0c00c01307cd9000530000003e0c00c01307cd9000530000003e0c00901307cd6000203e0c00901307cd6000203e0c02501307cf900000ffd000a1800c000030787830007c0fe0006c30000600003c0f8000203e0c02501307cf900000ffd000a1800c000030787830007c0fe0006c30000600003c0f8000203e0c02401307cf900011980fc0012c0600f0ccccf000660030000c3000060000180f8000203e0c02401307cf900011980fc0012c0600f0ccccf000660030000c3000060000180f8000203e0c02801307cf9001b180f1f199b387cf8f8030cccc300066667c3c0db1e36663c0187c3c0fa000203e0c02801307cf9001b180f1f199b387cf8f8030cccc300066667c3c0db1e36663c0187c3c0fa000203e0c02801307cf9001b181999999c18cccc60030cccc30007c6630660db33386c6001866660fa000203e0c02801307cf9001b181999999c18cccc60030cccc30007c6630660db33386c6001866660fa000203e0c02701307cf9001a1819999b9818cccc600307c7c3000666e307e0db3330783c018666f9000203e0c02701307cf9001a1819999b9818cccc600307c7c3000666e307e0db3330783c018666f9000203e0c02801307cf9001b1999998d98187ccc6c0300c0c30006636366006633306c0601866660fa000203e0c02801307cf9001b1999998d98187ccc6c0300c0c30006636366006633306c0601866660fa000203e0c02801307cf9001b0f0f1f11983c8ccc380fc7878fc607c461c3c0661e30663c03c663c6fa000203e0c02801307cf9001b0f0f1f11983c8ccc380fc7878fc607c461c3c0661e30663c03c663c6fa000203e0c01801307cf70004180f000078fb00030c0003c0ef000203e0c01801307cf70004180f000078fb00030c0003c0ef000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c01101307cef000001fcff00f8ef000203e0c01101307cef000001fcff00f8ef000203e0c01201307cef00003efc000107c0f0000203e0c01201307cef00003efc000107c0f0000203e0c01301307cf0000101e3fcff01fc78f0000203e0c01301307cf0000101e3fcff01fc78f0000203e0c01301307cf00001039efc0001079cf0000203e0c01301307cf00001039efc0001079cf0000203e0c01201307cf000010770fb0000eef0000203e0c01201307cf000010770fb0000eef0000203e0c01501307cf000080ee00001e318000077f0000203e0c01501307cf000080ee00001e318000077f0000203e0c01501307cf000080ee000033330000077f0000203e0c01501307cf000080ee000033330000077f0000203e0c01501307cf000080ee000033360000077f0000203e0c01501307cf000080ee000033360000077f0000203e0c01501307cf000080ee0000333c0000077f0000203e0c01501307cf000080ee0000333c0000077f0000203e0c01501307cf000080ee000033360000077f0000203e0c01501307cf000080ee000033360000077f0000203e0c01501307cf000080ee000033330000077f0000203e0c01501307cf000080ee000033330000077f0000203e0c01501307cf000080ee00001e318000077f0000203e0c01501307cf000080ee00001e318000077f0000203e0c01201307cf000010770fb0000eef0000203e0c01201307cf000010770fb0000eef0000203e0c01301307cf00001039efc0001079cf0000203e0c01301307cf00001039efc0001079cf0000203e0c01301307cf0000101e3fcff01fc78f0000203e0c01301307cf0000101e3fcff01fc78f0000203e0c01201307cef00003efc000107c0f0000203e0c01201307cef00003efc000107c0f0000203e0c01101307cef000001fcff00f8ef000203e0c01101307cef000001fcff00f8ef000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00901307cd6000203e0c00801307fd5ff01e0c00801307fd5ff01e0c00801307fd5ff01e0c00801307fd5ff01e0c0060030d30000c0060030d30000c0060030d30000c0060030d30000c006003fd3ff00c006003fd3ff00c002d10002d100a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 4-2:  Our About Box\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par We'll use the Window Manager call }{\f6\fs20 AlertWindow}{\f4  to draw our about box.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20    procedure DoAbout;\par \par    \{ Draw our about box                                         \}\par \par    const\par       alertID = 1;                      \{alert string resource ID\}\par \par    var\par       button: integer;                  \{button pushed\}\par \par    begin \{DoAbout\}\par    button := AlertWindow($0005, nil, alertID);\par    end; \{DoAbout\}\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-1:  Subroutine to Create an Alert\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 This call doesn't return control to our program until the user clicks on a button, so all of the hard work is handled for us.  When it does return, it returns the number of the button pushed; since our alert only has one button, we already know which one was pushed, and we throw the value away.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are three parameters to }{\f6\fs20 AlertWindow}{\f4 :\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 alertFlags}{\f4 \tab A flags word.  As with most flags words in the toolbox, this one is a series of bit flags, of which only two are defined.  The first 13 bits are all reserved, and must be set to zero.  Bits 1 and 2 tell what sort of parameter we are passing for }{\f6\fs20 alertStrRef}{\f4 :\par \par }\pard \qj\li2160\keepn\widctlpar\tx2880\adjustright {\f4 00\tab }{\f6\fs20 alertStrRef}{\f4  is a pointer\par 01\tab }{\f6\fs20 alertStrRef}{\f4  is a handle\par }\pard \qj\li2160\widctlpar\tx2880\adjustright {\f4 10\tab }{\f6\fs20 alertStrRef}{\f4  is a resource value\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par \tab The least significant bit of }{\f6\fs20 alertFlags}{\f4  is a 0 if }{\f6\fs20 subStrPtr}{\f4  is an array of pointers to null-terminated strings (c-strings) and 1 if it is an array of pointers to strings with a length byte (p-strings).\par \par \tab The value of $0005 we are passing, then, tells the Window Manager that }{\f6\fs20 alertStrRef}{\f4  is a resource ID, and that }{\f6\fs20 subStrPtr}{\f4  is an array of pointers to p-strings.\par \par }{\f6\fs20 subStrPtr}{\f4 \tab This is an array of substitution strings.  Substitution strings give }{\f6\fs20 AlertWindow}{\f4  an awesome amount of flexibility in a very simple way.  We'll look at substitution strings in detail a bit later in the lesson.\par \par }{\f6\fs20 alertStrRef}{\f4 \tab The handle, pointer, or resource ID for the alert string itself.  In this course, we'll always pass a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 alert strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rAlertString resource}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's a lot to the alert string, and we'll get to those details a little later in this lesson.  For now, let's concentrate on getting a program working with an alert string I'll provide.  Since it is a resource, we'll need to add a resource description to our resource description file.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rAlertString (1) \{\par    "43/"\par    "Frame 1.0\\n"\par    "by Mike Westerfield\\n"\par    "\\n"\par    "Contains libraries from ORCA Pascal,\\n"\par    "Copyright 1991, Byte Works Inc."\par    "/^#0\\$00";\par    \};\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-2:  Alert String for an About Box\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 4.1:  Add the }{\f6\fs20 DoAbout}{\f4  procedure and the }{\f6\fs20 rAlertString}{\f4  resource to the Frame program from the last lesson.  Call }{\f6\fs20 DoAbout}{\f4  when the About menu command is selected.\par Don't peek ahead \endash  the next section of this lesson gives the solution to this problem!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Frame Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Frame Program\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 I hope you worked problem 4.1, or at least understand all of the principles behind it.  If not, now is the time to take a breather and go back to review enough of what we've covered in this course to understand exactly what is happening the the solution to problem 4.1.  The reason this problem is so important is that there is a lot of work invested in the basics of getting an event loop, menu bar, and about box all working together in a program.  Virtually every desktop program you will ever use or write does these same things.  It doesn't pay to reinvent the wheel for each and every program you write, so most programmers keep a basic program around that does all of this work, and simply add to it to create a new program.  That's what we'll to in the rest of this course.\par The two listings in this section show the Pascal source code and the resource description file for our Frame program.  In almost every programming example for the rest of this course, I'll start with Frame and either add to it or make changes.  In most cases, I'll just show you the new stuff, and one of the problems will be to add the new stuff to Frame to create a working program.  Of course, if you get confused, the solutions to the problems are on the disk that comes with this course.\par So, before you move on to the next lesson, be sure you understand this program!\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Frame                                                        \}\par \{                                                               \}\par \{  This is a frame for other programs.  It contains a basic     \}\par \{  event loop, a menu bar, an about box, and supports NDAs.     \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par program Frame;\par \par uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,\par }\pard \li180\widctlpar\adjustright {\f6\fs20      DialogMgr, MenuMgr;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 const\par }\pard \li180\widctlpar\adjustright {\f6\fs20    return        = 13;                  \{return key code\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    appleMenu     = 1;                   \{Menu ID #s (also resource ID #s)\}\par    fileMenu      = 2;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    editMenu      = 3;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    editUndo      = 250;\par    editCut       = 251;\par    editCopy      = 252;\par    editPaste     = 253;\par    editClear     = 254;\par    fileClose     = 255;\par    fileQuit      = 256;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    appleAbout    = 257;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type\par    long = record                        \{for splitting 4 bytes to 2 bytes\}\par       case boolean of\par          true : (long: longint);\par          false: (lsw,msw: integer);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    done: boolean;                       \{tells if the program should stop\}\par    event: integer;                      \{event #; returned by GetNextEvent\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    myEvent: eventRecord;                \{last event returned in event loop\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure InitMenus;\par \par    \{ Initialize the menu bar.                                   \}\par \par    const\par }\pard \li180\widctlpar\adjustright {\f6\fs20       menuID = 1;                       \{menu bar resource ID\}\par  \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    var\par       height: integer;                  \{height of the largest menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       menuBarHand: menuBarHandle;       \{for 'handling' the menu bar\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    begin \{InitMenus\}\par                                         \{create the menu bar\}\par    menuBarHand := NewMenuBar2(refIsResource, menuID, nil);\par    SetSysBar(menuBarHand);\par    SetMenuBar(nil);\par    FixAppleMenu(1);                     \{add desk accessories\}\par    height := FixMenuBar;                \{draw the completed menu bar\}\par    DrawMenuBar;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{InitMenus\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    procedure HandleMenu;\par \par    \{ Handle a menu selection.                                   \}\par \par    var\par }\pard \li180\widctlpar\adjustright {\f6\fs20       menuNum, menuItemNum: integer;    \{menu number & menu item number\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       procedure DoAbout;\par \par       \{ Draw our about box                                         \}\par \par       const\par }\pard \li180\widctlpar\adjustright {\f6\fs20          alertID = 1;                   \{alert string resource ID\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       var\par }\pard \li180\widctlpar\adjustright {\f6\fs20          button: integer;               \{button pushed\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       begin \{DoAbout\}\par       button := AlertWindow($0005, nil, alertID);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end; \{DoAbout\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    begin \{HandleMenu\}\par                                         \{separate the menu and item numbers\}\par    menuNum := long(myEvent.taskData).msw;\par    menuItemNum := long(myEvent.taskData).lsw;\par    case menuItemNum of                  \{go handle the menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       appleAbout:  DoAbout;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       fileClose:   ;\par }\pard \li180\widctlpar\adjustright {\f6\fs20       fileQuit:    done := true;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       editUndo:    ;\par       editCut:     ;\par       editCopy:    ;\par       editPaste:   ;\par }\pard \li180\widctlpar\adjustright {\f6\fs20       editClear:   ;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       otherwise:   ;\par       end; \{case\}\par    HiliteMenu(false, menuNum);          \{unhighlight the menu\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{HandleMenu\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{Frame\}\par StartDesk(640);\par InitMenus;                              \{set up the menu bar\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 InitCursor;                             \{show the cursor\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 done := false;                          \{main event loop\}\par myEvent.taskMask := $001F7FFF;          \{let task master do it all\}\par repeat\par    event := TaskMaster(everyEvent, myEvent);\par    case event of                        \{handle the events we need to\}\par       wInSpecial,\par }\pard \li180\widctlpar\adjustright {\f6\fs20       wInMenuBar: HandleMenu;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       otherwise: ;\par       end; \{case\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 until done;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 EndDesk;\par end. \{Frame\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-3A:  The Frame.Pas File\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /*--------------------------------------------------------------*/\par /*                                                              */\par /*  Resources for Frame                                         */\par /*                                                              */\par /*--------------------------------------------------------------*/\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 #include "types.rez"\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /*- Constants --------------------------------------------------*/\par \par #define appleMenu     1 \par #define fileMenu      2\par #define editMenu      3\par #define editUndo      250\par #define editCut       251\par #define editCopy      252\par #define editPaste     253\par #define editClear     254\par #define fileClose     255\par #define fileQuit      256\par }\pard \li180\widctlpar\adjustright {\f6\fs20 #define appleAbout    257\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /*- Menu Bar ---------------------------------------------------*/\par \par resource rMenuBar (1) \{                 /* the menu bar */\par    \{\par       appleMenu,                        /* resource numbers for the menus */\par       fileMenu,\par       editMenu\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (appleMenu) \{            /* the Apple menu */\par    appleMenu,                           /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    appleMenu,                           /* menu title resource ID */\par    \{appleAbout\};                        /* menu item resource IDs */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (fileMenu) \{             /* the File menu */\par    fileMenu,                            /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    fileMenu,                            /* menu title resource ID */\par    \{fileClose,fileQuit\};                /* menu item resource IDs */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (editMenu) \{             /* the Edit menu */\par    editMenu,                            /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    editMenu,                            /* menu title resource ID */\par    \{                                    /* menu item resource IDs */\par       editUndo,\par       editCut,\par       editCopy,\par       editPaste,\par       editClear\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editUndo) \{         /* Undo menu item */\par    editUndo,                            /* menu item ID */\par    "Z","z",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    editUndo                             /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editCut) \{          /* Cut menu item */\par    editCut,                             /* menu item ID */\par    "X","x",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editCut                              /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editCopy) \{         /* Copy menu item */\par    editCopy,                            /* menu item ID */\par    "C","c",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editCopy                             /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editPaste) \{      /* Paste menu item */\par    editPaste,                           /* menu item ID */\par    "V","v",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editPaste                            /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (editClear) \{        /* Clear menu item */\par    editClear,                           /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    editClear                            /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (fileClose) \{        /* Close menu item */\par    fileClose,                           /* menu item ID */\par    "W","w",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    fileClose                            /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (fileQuit) \{         /* Quit menu item */\par    fileQuit,                            /* menu item ID */\par    "Q","q",                             /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    fileQuit                             /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (appleAbout) \{       /* About menu item */\par    appleAbout,                          /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift      /* flags */\par       + fDivider,\par    appleAbout                           /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20                                         /* the various strings */\par resource rPString (appleMenu, noCrossBank)  \{"@"\};\par resource rPString (fileMenu, noCrossBank)   \{"  File  "\};\par resource rPString (editMenu, noCrossBank)   \{"  Edit  "\};\par resource rPString (editUndo, noCrossBank)   \{"Undo"\};\par resource rPString (editCut, noCrossBank)    \{"Cut"\};\par resource rPString (editCopy, noCrossBank)   \{"Copy"\};\par resource rPString (editPaste, noCrossBank)  \{"Paste"\};\par resource rPString (editClear, noCrossBank)  \{"Clear"\};\par resource rPString (fileClose, noCrossBank)  \{"Close"\};\par resource rPString (fileQuit, noCrossBank)   \{"Quit"\};\par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rPString (appleAbout, noCrossBank) \{"About Frame..."\};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /*- About Box --------------------------------------------------*/\par \par resource rAlertString (1) \{\par    "43/"\par    "Frame 1.0\\n"\par    "by Mike Westerfield\\n"\par    "\\n"\par    "Contains libraries from ORCA Pascal,\\n"\par    "Copyright 1991, Byte Works Inc."\par    "/^#0\\$00";\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-3B:  The Frame.Rez File\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Alert Strings}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Alert Strings\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk16}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Before leaving the topic of alerts, let's take a closer look at the alert string that we used in the resource fork.  This alert string controls a lot of different things about the alert, from its size to the icon that is drawn.  The string itself is divided into three main sections, controlling the alert's visual appearance, the string that is printed, and the buttons.  Just like menu strings, the string is divided up to perform these functions based on some rigid formatting rules.\par The description of the alert string is divided up into a table form to make it easier to see what field you are reading about, but the descriptions are still real text descriptions, so go ahead and read them like you would the normal text in the book.\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 size\tab This field is generally a single character controlling the size of the alert window.  The character is a numeric digit, from 0 to 9.  All but the first of these digits corresponds to a specific size window, but the 0 character is the first byte of a nine byte field.  The other eight bytes define the size of the window by listing the edges as two-byte integers, in this format:\par \par }\pard \qj\fi-540\li2340\widctlpar\adjustright {\f4 v1\tab Y coordinate (0 is at the top of the screen) of the top edge of the window.\par h1\tab X coordinate of the left edge of the window.\par v2\tab Y coordinate of the bottom edge of the window.\par h2\tab X coordinate of the right edge of the window.\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 \tab The predefined sizes from 1 to 9 vary in both width and height, giving room for more characters as the number goes up.  An interesting and very useful feature of this size is that it is larger for 640 mode programs than it is for 320 mode programs, giving you about the right size box to display a given number of characters regardless of which screen you pick.  That helps a lot when you are trying to define a package of alerts to move from one program to another, or when you are creating a program that can switch between 320 mode and 640 mode while it is running.\par \par \tab There are two ways to get a handle on what the various sizes are.  One is to look at the table of sizes shown in Appendix A, and you're free to do that.  A better way to get a real grasp on the issue is to try the various sizes; that's what you will be doing in Problem 4.2.\par \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 icons}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 iconSpec\tab The picture in the upper-left corner of the dialog is called an icon; it's something that you can change from alert to alert.  You specify the icon in the second field of the alert string.  Like the size, the icon field is generally a single character, although there is one exception for a custom icon.  The alert sampler from Problem 4-2 will show you the various icons; here's a list of what they are:\par \par }\pard \qj\fi-1080\li2880\widctlpar\adjustright {\f4\ul Character}{\f4 \tab }{\f4\ul Use}{\f4 \par 0\tab No icon at all.\par 1\tab Custom icon.  With a custom icon, you have to tell the window manager what icon you want, so you have to follow the single icon character with some other information.  Specifically:\par \par }\pard \qj\fi-1080\li4320\keepn\widctlpar\adjustright {\f4\ul size}{\f4 \tab }{\f4\ul use}{\f4 \par 4 bytes\tab Pointer to the icon image.  The image is a series of pixels.\par 2 bytes\tab Width of the image in bytes.  Another way to think of this is as the length of a line of pixels.\par }\pard \qj\fi-1080\li4320\widctlpar\adjustright {\f4 2 bytes\tab Height of the image.  This is the number of lines of pixels in the icon.\par }\pard \qj\fi-1080\li2880\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li2880\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1080\li2880\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 stop alert}}}{\v\f4 \par }\pard \qj\fi-1080\li2880\widctlpar\adjustright {\f4 2\tab Stop icon.  The stop icon is used when an error occurs.  For example, if the program is trying to save a file and there isn't enough room on disk, the alert would use the stop icon.\par }\pard \qj\fi-1080\li2880\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1080\li2880\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 note alert}}}{\v\f4 \par }\pard \qj\fi-1080\li2880\widctlpar\adjustright {\f4 3\tab Note icon.  This is the icon we used for our about box; it is used in alerts that present information to the user.\par }\pard \qj\fi-1080\li2880\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1080\li2880\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 caution alert}}}{\v\f4 \par }\pard \qj\fi-1080\li2880\widctlpar\adjustright {\f4 4\tab Caution icon.  This is used for alerts that are displaying some sort of warning, and they usually give you a choice of going on or canceling the operation.  An example would be a message warning the user that they are about to format a hard disk.\par 5\tab Disk icon.  This icon shows a picture of a disk.  It's generally used by programs that manipulate entire disks.\par 6\tab Disk swap icon.  Use this icon when the program needs to read a file, but the disk containing the file is not in a drive.  The message, of course, should tell the user what disk is needed.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 \par separator\tab The rest of the fields in the alert string are variable length strings, so you need some way of telling the Window Manager where one string ends and another begins.  Since you may need to use just about any character in your strings, the Window Manager lets you tell it what character to use to separate the strings.  The / character we used earlier is a traditional example.\par \par messageText\tab This is the string that's actually printed in the alert.  You can use return characters (chr(13)) to break a line, forcing text to a new line.  You can't have more than 1000 characters in the line.\par \par separator\tab Put another separator character here to mark the end of the message.  Be sure it is the same one you used for the first separator field!\par \par buttonStrings\tab You can put up to three buttons in an alert, separating each of the strings that will appear in the buttons with separator characters.  The Window Manager will create buttons that are all the same size, lined up and centered at the bottom of the dialog.  The total length of the text for the buttons must be 80 characters or less.\par \par \tab There are several special characters you can use to create the buttons.  These are covered in the next table.\par \par terminator\tab The end of the alert string is marked with a chr(0) character.  In a resource description file, you can put this character in with $"00", as we did in our about box resource.  If you are creating the string from a Pascal program, the Pascal language is already putting a null character at the end of and standard Pascal string or string constant.  If you are using a p-string, though, be sure and put the chr(0) in explicitly.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez\:strings}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Besides the obvious points about what makes up an alert string, there are also some interesting things you can learn from this example about the Rez compiler itself.  The entire }{\f6\fs20 rAlertString}{\f4  resource is really nothing more than a single, big string.  Looking at it, though, you can see that we spread that string out over several lines.  That's the first neat trick: you can create a single long string in a resource description file by writing two shorter strings.  You can put spaces between the strings, put them on different lines, or even put comments in between.  As long as you don't put in a comma, though, Rez combines all of the short strings to create a single, long string.\par Another thing you'll see imbedded in the string is \\n, and, at the end of the string, \\$00.  These are called escape characters.  The \\n sequence gets turned into the proper character to force a new line, so we can use \\n in our strings to put in a manual line feed.  (}{\f6\fs20 AlertWindow}{\f4  is smart enough to break a long line up, but sometimes it's nice to break up lines for formatting.)  Putting a hexadecimal value right after the \\ character stuffs that value into the string.\par \par Problem 4-2:  Write a program that can display any combination of an alert size and icon.  Your program should have a menu labeled Size with the nine fixed sizes, showing a check mark beside the currently selected size.  Another menu, labeled Icon, should have an entry for each of the predefined icons, again using check marks to show the active icon.  Add an Open command under the File menu, and use it to actually draw the dialog, displaying a dialog with the size and icon selected in the menus.\par This is the only place in the course where you won't use a resource for the alert string, since it would be a little crazy to create one alert for each possible combination of size and icon.  Instead, set up a string and call }{\f6\fs20 AlertWindow}{\f4  using this subroutine:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       procedure SampleAlert (size, icon: integer);\par \par       \{ Draw an alert window                                       \}\par       \{                                                            \}\par       \{ Parameters:                                                \}\par       \{    size - size of the alert (1..9)                         \}\par       \{    icon - alert icon number (2..6)                         \}\par \par       var\par          alertString: packed array[1..200] of char; \{alert string\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20          button: integer;               \{button pushed\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       begin \{SampleAlert\}\par       alertString := concat(chr(ord('0')+size),\par          chr(ord('0')+icon),\par          '/Sample alert of size ',\par          chr(ord('0')+size),\par          ', with icon ',\par          chr(ord('0')+icon),\par          './^#0'\par          );\par       button := AlertWindow($0001, nil, @alertString);\par       end; \{SampleAlert\}\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-4:  Creating an }{\f6\fs20 AlertWindow}{\f4  from a Pointer\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Substitution Strings}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Substitution Strings\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk17}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the more powerful features of the alert string is the ability to use substitution strings.  Substitution strings are a special character sequence the Window Manager replaces with some other string before it actually draws the text in the alert.  Using substitution strings, you can create a single alert, and then use it to display a whole wealth of information.  A great example is an error handler that uses a single alert with a substitution string to show any of the errors you need to display during a program.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 alert strings\:buttons}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You can use a substitution string in either the text of the message or for the name of a button.  They come in two flavors, and in fact, you've already used one of them without knowing it.  The first kind of substitution string, and the one you've already seen, is generally used for common button names.  These substitution strings consist of two characters, a # and a numeric digit.  Table 4-1 shows the string you type, along with the string the Window Manager substitutes when the alert is actually drawn.\par \par }\pard \qj\li2160\keepn\widctlpar\tx4320\adjustright {\f4 Substitution\tab String\par }{\f4\ul String          }{\f4 \tab }{\f4\ul Drawn}{\f4 \par }{\f6\fs20 #0\tab OK\par #1\tab Cancel\par #2\tab Yes\par #3\tab No\par #4\tab Try Again\par #5\tab Quit\par #6\tab Continue\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 4-1:  Predefined Substitution Strings\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par If you look back at the alert we used for the about box, you'll find #0 used for the name of the button.  From this table, you can see why the alert actually showed up with a button named OK.\par There are a lot of hidden advantages to using these predefined button names, and they go way beyond saving you some typing.  If your program is used in, say, France, it's pretty easy for Apple France to change the names of all of the buttons at the operating system level; they don't even need to change your resource fork to get French button names.  A more subtle issue is the fact that the human interface Apple uses is an evolving concept, and it changes from time to time.  It's not uncommon to find button names of Okay in older Macintosh programs.  Using these predefined names has the dual affect of making your program more standard, which makes it easier to use; and making your program easier to update if Apple decides that the button really should have been called Okay after all.\par The other flavor of substitution string is a little harder to use, but it's here that the real power of substitution strings comes into play.  You can define up to ten substitution strings of your own.  Each of them starts with an asterisk (*) and is followed by a numeric digit.  One of the parameters you pass to }{\f6\fs20 AlertWindow}{\f4  is an array of p-string pointers; this array is used for the various values of the strings.\par To see how this is used, let's create an error dialog.  Our error dialog will be used from anywhere in our program.  We'll just pass an error number, and expect the error dialog to do the rest.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure Error (err: integer);\par \par \{ Flag an error                                                 \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    err - error number                                         \}\par \par const\par    alertID = 21;                         \{alert resource ID\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    base = 2000;                          \{base resource ID\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    substArray: pStringPtr;               \{substitution "array"\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    button: integer;                      \{button pushed\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{Error\}\par substArray := GetPString(base+err);\par InitCursor;\par button := AlertWindow($0005, @substArray, ord4(alertID));\par FreePString(base+err);\par end; \{Error\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-5A:  Error Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rAlertString (21) \{\par    "42/"\par    "*0"\par    "/^#0"\par    $"00"\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-5B:  }{\f6\fs20 AlertWindow}{\f4  Resource\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par In this case we only need a substitution array with one element, since *0 is the only substitution string we're using.  For a single string, we can just pass the address of the address of the substitution string, which is the same thing as passing the address of an array of addresses when the array only has one element.\par The only real concern with this mechanism is where all of the substitution strings are stored.  One of the advantages to using resources for the }{\f6\fs20 AlertWindow}{\f4  alert string is to put the text messages in the resource fork so they can be changed by the end user.  Well, we still put the alert strings in the resource fork, but we store them as }{\f6\fs20 rPString}{\f4  resources and load them with some simple Resource Manager calls.  In good structured programming style, this mechanism is packaged in a couple of subroutines, }{\f6\fs20 GetPString}{\f4  and }{\f6\fs20 FreePString}{\f4 .  Here they are, along with a few error strings from Quick Click Draw:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 const\par }\pard \li180\widctlpar\adjustright {\f6\fs20    rPString = $8006;                     \{resource type for p-strings\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function GetPString (resourceID: integer): pStringPtr;\par \par \{ Get a string from the resource fork                           \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    resourceID - resource ID of the rPString resource          \}\par \{                                                               \}\par \{ Returns: pointer to the string; nil for an error              \}\par \{                                                               \}\par \{ Notes: The string is in a locked resource handle.  The caller \}\par \{    should call FreePString when the string is no longer       \}\par \{    needed.  Failure to do so is not catastrophic; the memory  \}\par \{    will be deallocated when the program is shut down.         \}\par \par var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    hndl: handle;                         \{resource handle\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{GetPString\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LoadResource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 hndl := LoadResource(rPString, resourceID);\par if ToolError <> 0 then\par    GetPString := nil\par else begin\par    HLock(hndl);\par    GetPString := pStringPtr(hndl^);\par    end; \{else\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 end; \{GetPString\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure FreePString (resourceID: integer);\par \par \{ Free a resource string                                        \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    resourceID - resource ID of the rPString to free           \}\par \par begin \{FreePString\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReleaseResource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 ReleaseResource(-3, rPString, resourceID);\par end; \{FreePString\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-6A:  }{\f6\fs20 GetPString}{\f4  and }{\f6\fs20 FreePString}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (2001) \{"Out of memory"\};\par resource rPString (2002) \{"Could not form the full path name"\};\par resource rPString (2003) \{"A document using this file name is already"\par                           " open"\};\par resource rPString (2004) \{"All of the objects are locked"\};\par resource rPString (2005) \{"You must select a printer from the control panel"\par                           " before setting up the page"\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 4-6B:  Sample Error String Resources\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LoadResource}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReleaseResource}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 These subroutines use a couple of Resource Manager calls.  }{\f6\fs20 LoadResource}{\f4  loads a resource into memory based on the type of the resource and the resource ID; the subroutine then locks the handle so the string won't move and returns a pointer to the string.  }{\f6\fs20 FreePString}{\f4  just calls }{\f6\fs20 ReleaseResource}{\f4  to free up the memory used by the resource.  There isn't much to using these Resource Manager calls, but if you want to explore some of the options available, check out their descriptions in Appendix A.\par \par Problem 4-3:  Create a fortune Cookie program.  Each time the user picks Open from the file menu, randomly select a string number and display a note alert with the string.  You can make up your own fortunes, or use this group of famous quotes:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Be cheerful while you are alive.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Ptahhotpe, 24th century B.C.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 I know nothing except the fact of my ignorance.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Socrates, c.469-399 B.C.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Nothing endures but change.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Heraclitus, c.540-480 B.C.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 I have made this letter longer than usual, because I lack the time to make it short.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Blaise Pascal, 1656 or 1657\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 There are three faithful friends \endash  and old wife, and old dog, and ready money.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Benjamin Franklin, 1738\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Common sense is not so common.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Voltaire, 1764\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 It is never too late to give up our prejudices.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab _Henry David Thoreau, 1854\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Always do right.  This will gratify some people, and astonish the rest.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Mark Twain, 1901\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Everything is funny as long as it is happening to someone else.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Will Rogers, 1924\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 The whole of science is nothing more than a refinement of everyday thinking.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \tab \endash Albert Einstein, 1936\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkend bk16}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 alert strings}{\rxe bk16}}}{\v\f4 \par {\*\bkmkend bk17}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 substitution strings}{\rxe bk17}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In this lesson we've learned to use alerts to create about boxes and display messages.  In the process, we have developed a program called Frame which will be the basis for most of the programs in the rest of the course.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 AlertWindow\tab LoadResource\tab ReleaseResource\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rAlertString\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk18}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 alerts}{\rxe bk18}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 5 - Why, Yes.  We Do Windows!}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 5 \endash  Why, Yes.  We Do Windows!}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 5 \endash  Why, Yes.  We Do Windows!\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk30}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In this lesson we will learn to create, draw, and manipulate windows.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Defining Our Terms}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Defining Our Terms\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You see windows all of the time in desktop programs, so it may seem a little odd to start off by looking at what they are, but that's just what we'll do.  Visually, a window is a thing on the desktop where information is presented.  A standard document window, like the one in Figure 5-1, can be moved, can overlap other windows, and can even be shoved partway off of the screen.  In fact, while you can't }{\i\f4 drag}{\f4  a window off of the screen (the mouse won't move that far), your program can actually }{\i\f4 position}{\f4  a window completely off the the visible screen.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1039{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw329\pich213\picwgoal6580\pichgoal4260\macpict\bliptag466447202\blipupi72{\*\blipuid 1bcd6b62be9397bf34d15591bfb740de}06a1ffffffff00d401481101a0008201000affffffff00d4014809882288228822882231003800ff00b5010a09ffffffffffffffff3830009d00ff00aa010a20002100320021010920002400320024010920001e0032001e0109a100b60004004c008009000000000000000031001b00330026003d38a100b60004000100010700000000230000a100b60004004c008031001c00340025003d070001000109ffffffffffffffff38a100b60004000100010700000000230000a100b60004004c008009000000000000000031001b00fc00260106070001000138a100b60004000100010700000000230000a100b60004004c008031001c00fd00250105070001000109ffffffffffffffff38a100b600040001000107000000002300000988228822882288223100a9003200b5010a070001000109ffffffffffffffff3890000400000000001700180000000000170016009d00fe00aa010b000000000000000000000000000003ff000003ff000003030000030300000303000003030000030300003f03f0003f03f000300030000c00c0000c00c000030300000303000000cc000000cc00000030000000300000000000000000000030009d00ff00aa010a0900000000000000003100a900f500b5010009ffffffffffffffff38a100b60004004c008009000000000000000031001b0090002500aa38a100b600040001000107000000002300003100a900ff00b5010a070001000109ffffffffffffffff380900000000000000003100ac010100b3010809ffffffffffffffff380900000000000000003100ab010000af010509ffffffffffffffff380900000000000000003100a9003200b5003d09ffffffffffffffff380900000000000000003100a9006500b5008f09ffffffffffffffff38220046002b300022007a002b070022000c002d0d0023001522000a0113f10023fd172200be00fa0a002300f32200ce010e210023d5c62200ce00dbf80023e9e309000000000000000031003100ff003c010a09ffffffffffffffff3822002e0123e1fe9000040000000000160018000000000016001600a8003200b5003f00000000000000000000003800000038000000d8000000d80000031ff000031ff0000c0030000c00300030003000300030000c0030000c003000031ff000031ff00000d8000000d80000003800000038000000000000000000009000040000000000150018000000000015001400a800f300b500ff0000000000000000000000e0000000e0000000d8000000d800007fc600007fc600006001800060018000600060006000600060018000600180007fc600007fc6000000d8000000d8000000e0000000e00000000000003000a9003200b500403000a900f200b5010090000400000000001600180000000000160016003100fe003e010b00000000000000000000003000000030000000cc000000cc000003030000030300000c00c0000c00c000300030003f03f0003f03f000030300000303000003030000030300000303000003ff000003ff0000000000000000000030003100ff003e010a09882288228822882231003e00ff0064010a09ffffffffffffffff38a10096000c01000000020000000000000001000a000400000010002d2c000c00150948656c7665746963610300150d000a2b010d09436c6f736520626f78a00097a10096000c01000000020000000000000001000a003e00050056002b2b053a08436f6e74656e74202a0c06526567696f6ea00097a10096000c03000000020000000000000001000a00720008008a002f2b06280757696e646f77202b0a0c056672616d65a00097a10096000c01000000020000000000000001000a00b700cf00c300f62bba390853697a6520626f78a00097a10096000c01000000020000000000000001000a00c700dc00d3010c2b0d100b5363726f6c6c2062617273a00097a10096000c01000000020000000000000001000a00030115001b013228000c0116055a6f6f6d202a0c03626f78a00097a10096000c01000000020000000000000001000a00280125003401472b101908496e666f20626172a00097a10096000c01000000020000000000000001000a001a0093002600a90300000d00092800230094055469746c65a0009701000affffffff00d4014809000000000000000031005300ff007b010a09ffffffffffffffff38a10096000c01000000020000000000000001000a00000056000c007c0300150d000a2800090057095469746c6520426172a0009701000affffffff00d4014822000400831200231b1b30001b00320027010a30002600320032010a30001b003200b5010aa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 5-1:  Typical Document Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 title bar}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 title bar\tab The title bar is the top part of the window.  It includes the name of the window and all of the box surrounding the name except for the close box and zoom box.  You can move a window by dragging the title bar.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 close box}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 close box\tab The close box is the small box at the left hand end of the title bar.  Clicking in the close box does the same thing as selecting Close from the file menu.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 zoom box}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 zoom box\tab The zoom box is the box at the right hand size of the title bar.  Clicking on the zoom box resizes and moves the window.  If the window is not in its zoomed state when you click on the zoom box, it is resized and repositioned to the zoom state.  If the window is in the zoomed state when you click on the zoom box, the window is resized and repositioned to the last unzoomed state.  In most cases, the zoomed state is when the window fills all of the available screen space.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 info bar}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 info bar\tab The info bar is a part of the window right below the title bar; it is missing on most windows.  The info bar is used for extra information about the window.  One typical use is for rulers; you can see an info bar in the PRIZM desktop development system by showing the ruler.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 content region}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 content region\tab The content region is technically defined as all of the window that isn't something else.  It's the part you draw in.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 scroll bars\tab You can put scroll bars anywhere, but you can also have the Window Manager create the two normal scroll bars for you.  These scroll bars appear to the bottom and right of the content region, and are used to scroll the content region to different parts of a document.  (Technically, scroll bars are controls that are inside the content region.)\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 size box}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f4 size box\tab The size box is in the corner formed by the two scroll bars.  Dragging on the size box will change the size of the window.\par \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 window frame}}}{\v\f4 \par }{\f4 window frame\tab The window frame is the line (or area) that surrounds the rest of the window.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 5-1:  Parts of a Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are a lot of variations on this basic theme.  You can leave off almost any of the parts you see in the standard window.  You must have a title bar to have either a close box or a zoom box, but with that exception, you can create windows with any combination of these parts.  The only things you can't leave off are the window frame and the content region \endash  but they can be so small they don't matter, much.  There are also several options available to you.  Windows can have several forms of title bar and they can have a special frame called an alert frame, just to name a couple.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Opening a Window}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Opening a Window\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk19}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Windows are created with the Window Manager's }{\f6\fs20 NewWindow2}{\f4  call.  Here's the code you need to open a standard document window on the desktop:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function NewDocument: grafPortPtr;\par \par \{ Open a new window, returning the pointer                      \}\par \{                                                               \}\par \{ Returns: Window's window pointer; nil for an error            \}\par \par const\par    rWindParam1 = $800E;                  \{resource ID\}\par    wrNum = 1001;                         \{window resource number\}\par \par begin \{NewDocument\}\par NewDocument :=\par    NewWindow2(@'MyWindow', 0, nil, nil, $02, wrNum, rWindParam1);\par end; \{NewDocument\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-1A:  Pascal Code to Open a New Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindParam1 resource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rWindParam1 (1001) \{\par    $DDA5,                      /* wFrameBits */\par    nil,                        /* wTitle */\par    0,                          /* wRefCon */\par    \{0,0,0,0\},                  /* ZoomRect */\par    nil,                        /* wColor ID */\par    \{0,0\},                      /* Origin */\par    \{1,1\},                      /* data size */\par    \{0,0\},                      /* max height-width */\par    \{8,8\},                      /* scroll ver hors */\par    \{0,0\},                      /* page ver horiz */\par    0,                          /* winfoRefcon */\par    10,                         /* wInfoHeight */\par    \{30,10,183,602\},            /* wposition */\par    infront,                    /* wPlane */\par    nil,                        /* wStorage */\par    $0000                       /* wInVerb */\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-1B:  Resource for a New Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMaster}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scrolling}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Most of the things you need to learn about windows involve changing the resource and the parameters to the }{\f6\fs20 NewWindow2}{\f4  call that actually creates the window.  Almost everything else about a window can be handled automatically for you by }{\f6\fs20 TaskMaster}{\f4 .  All you really have to do is keep track of the positions of the scroll bars and draw the contents of the window, since moving windows, overlapping windows, resizing windows, and even scrolling windows is handled by }{\f6\fs20 TaskMaster}{\f4 .\par Obviously there's a lot I haven't told you about windows, yet.  Your knowledge of windows will grow gradually through the lesson, and by the end, you'll understand all of the parameters to }{\f6\fs20 NewWindow2}{\f4  and all of the entries in the window resource.  Along the way, though, I'm going to give you a series of problems, and in most cases they build on the previous problems.  You will learn about windows as you develop a program than handles them.  The point is to be patient: you may not know enough about windows to understand all of the parameters, yet, but you can still type in what you see so you have a program to explore ideas with as you work through the lesson.\par \par Problem 5-1:  Add the }{\f6\fs20 NewDocument}{\f4  procedure to the Frame program, calling it whenever New or Open are selected from the File menu.\par For now, just save the window pointer }{\f6\fs20 NewDocument}{\f4  returns in a global variable, and don't worry about the fact that you're loosing track of the windows if you open more than one.  As it turns out, this doesn't do any harm, since the Window Manager will dispose of all of the memory when it shuts down.  We'll start handling this better later in the lesson.\par You'll have to add New and Open as menu commands, of course.  You File menu should look like this:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1040{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich130\picwgoal1920\pichgoal2600\macpict\bliptag-1784868696\blipupi72{\*\blipuid 959d10a814a12d02e50a6ba6d76124e4}056700000000008200601101a00082a0008e01000a0000000002d0024098000c000000000082006000000000008200600000000000820060000102f50002f50008003ffdff00fefb0008003ffdff00fefb0008003ffdff00fefb0008003ffdff00fefb0008003ffdff00fefb0008003ffdff00fefb0009053fe0e78ffffefb0009053fe0e78ffffefb0009053fe7ffcffffefb0009053fe7ffcffffefb0009053fe7c7cf87fefb0009053fe7c7cf87fefb0009053fe1e7cf33fefb0009053fe1e7cf33fefb0009053fe7e7cf03fefb0009053fe7e7cf03fefb0009053fe7e7cf3ffefb0009053fe7e7cf3ffefb0009053fe7c38787fefb0009053fe7c38787fefb0008003ffdff00fefb0008003ffdff00fefb0008003ffdff00fefb0008003ffdff00fefb0006003ff7ff00e006003ff7ff00e0060030f7000060060030f7000060060030f7000060060030f70000600a02300023fb0002308c600a02300023fb0002308c600a02300033fb000220cc7c0a02300033fb000220cc7c0d0530003b1e6180fe0002d8ec7c0d0530003b1e6180fe0002d8ec7c0d0b30003f336d800000010cfc7c0d0b30003f336d800000010cfc7c0d0b3000373f6d8000000108dc7c0d0b3000373f6d8000000108dc7c0d043000333033fe0003012ccc7c0d043000333033fe0003012ccc7c0c043000311e33fd0002d8c47c0c043000311e33fd0002d8c47c060030f700007c060030f700007c060030f700007c060030f700007c060030f700007c060030f700007c060030f700007c060030f700007c060030f700007c060030f700007c0a0230001efb000230787c0a0230001efb000230787c0a02300033fb000220cc7c0a02300033fb000220cc7c0d053000333e1e3efe0002d8cc7c0d053000333e1e3efe0002d8cc7c0c013000fd33050000010ccc7c0c013000fd33050000010ccc7c0d0b300033333f3300000108cc7c0d0b300033333f3300000108cc7c0d0b3000333330330000012ccc7c0d0b3000333330330000012ccc7c0d0530001e3e1e33fe0002d8787c0d0530001e3e1e33fe0002d8787c090330000030fa00007c090330000030fa00007c060030f700007c060030f700007c06003ff7ff00fc06003ff7ff00fc060030f700007c060030f700007c060030f700007c060030f700007c0b0330001e1cfc000231867c0b0330001e1cfc000231867c0b033000330cfc000221867c0b033000330cfc000221867c0d033000300cfe1e040000d9b67c0d033000300cfe1e040000d9b67c0d0b3000300c33303300010db67c0d0b3000300c33303300010db67c0d0b3000300c331e3f000109b67c0d0b3000300c331e3f000109b67c0d0b3000330c33033000012ccc7c0d0b3000330c33033000012ccc7c0b013000fc1e040000d8cc7c0b013000fc1e040000d8cc7c060030f700007c060030f700007c060030f700007c060030f700007c06003ff7ff00fc06003ff7ff00fc060030f700007c060030f700007c060030f700007c060030f700007c0c0430001e0018fd000230787c0c0430001e0018fd000230787c0d05300033000060fe000220cc7c0d05300033000060fe000220cc7c0d053000333338f8fe0002d8cc7c0d053000333338f8fe0002d8cc7c0d0b3000333318600000010ccc7c0d0b3000333318600000010ccc7c0d0b30003333186000000108cc7c0d0b30003333186000000108cc7c0d0b30003333186c0000012ccc7c0d0b30003333186c0000012ccc7c0d0530001e1f3c38fe0002d8787c0d0530001e1f3c38fe0002d8787c0902300003fa00010c7c0902300003fa00010c7c060030f700007c060030f700007c060030f700007c060030f700007c06003ff7ff00fc06003ff7ff00fc060001f7ff00fc060001f7ff00fc02f50002f500a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 5-2:  File Menu for Problem 5-1\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Be sure and put in the key equivalents shown.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you run the program, be sure you try opening more than one window.  You will be able to overlap them, resize them, and drag them around the screen.  The zoom box will work fine, but the close box doesn't work, yet.\par {\*\bkmkend bk19}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:opening}{\rxe bk19}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Closing a Window}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Closing a Window\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseWindow}}}{\f4 {\*\bkmkstart bk20}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Closing a window is really very easy.  If }{\f6\fs20 wPtr}{\f4  is the window pointer for the window you want to close, you close the window like this:\par \par }{\f6\fs20 CloseWindow(wPtr);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The interesting part of closing a window isn't really closing it, it's finding }{\f6\fs20 wPtr}{\f4  for the window to close.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are two ways to close a window, and you use a different mechanism for closing the window with each.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FrontWindow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Close command}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The first way to close a window is to select Close from the File menu.  When the user picks Close from the File menu, you are supposed to close the front most window on the desktop.  That, of course, means that you need a convenient way to find out what window is in front.  The Window Manager's }{\f6\fs20 FrontWindow}{\f4  call does the trick, returning a pointer to the front window if there are any windows open, and nil of there aren't any windows.  Here's how you would close a window if Close is picked from the File menu:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 wPtr := FrontWindow;\par if wPtr <> nil then\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    CloseWindow(wPtr);\par }{\f4 \par Checking to see if }{\f6\fs20 wPtr}{\f4  is nil before closing the window is critical!  If you don't check, and the user picks the Close command, your program could crash.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMaster}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInGoAway}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 taskData}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The second mechanism for closing a window is clicking on the close box.  When the user clicks on the close box, }{\f6\fs20 TaskMaster}{\f4  returns a }{\f6\fs20 wInGoAway}{\f4  event.\par In most programs, you can only click on the close box for the front window, so it might seem like the same code we just used would work just fine.  In practice, that just won't do.  Even if your program only allows the user to click on the close box for the front window, you have to keep in mind that the user might be using a desk accessory that doesn't enforce that restriction.  So, instead of just closing the front window, we'll use the window pointer returned by }{\f6\fs20 TaskMaster}{\f4 .  When }{\f6\fs20 TaskMaster}{\f4  returns }{\f6\fs20 wInGoAway}{\f4  for the event, it stuffs a pointer to the window to close in }{\f6\fs20 taskData}{\f4  field of the event record.  We can use this window pointer to close the window, like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 wPtr := grafPortPtr(myEvent.taskData);\par if wPtr <> nil then\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    CloseWindow(wPtr);\par }{\f4 \par Technically, we don't need to check to see if }{\f6\fs20 wPtr}{\f4  is nil this time, since }{\f6\fs20 TaskMaster}{\f4  wouldn't return }{\f6\fs20 wInGoAway}{\f4  unless it also passed back a valid window pointer.  In the next section, though, we're going to start doing a lot more work when we close a window, so we're going to encapsulate the code to close the window in a subroutine right away.\par \par Problem 5-2:  Add the ability to close windows to Frame.  You will need to add the check for a }{\f6\fs20 wInGoAway}{\f4  event to the event loop, and you'll have to add code that will be called when Close is picked from the File menu.  In both cases, you should call a procedure named }{\f6\fs20 CloseDocument}{\f4 , passing a pointer to the window to close.  }{\f6\fs20 CloseDocument}{\f4  should check to be sure the window pointer is not nil before closing the window.\par {\*\bkmkend bk20}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:closing}{\rxe bk20}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Multiple Windows}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Multiple Windows\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk21}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 documents}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:documents}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Frame program can already handle multiple windows, but as we start to add more things to the program, we'll need to keep track of our windows a bit better.  In this section we'll look at two ways to handle more than one window effectively, and implement one of them in Frame.  In the process, we'll add distinct names to our windows, so they don't all have the name "MyWindow".\par Most programs need to keep track of a wide variety of information about a window.  One of the best ways to organize all of this information is with a record, which we will call a document record.  In fact, the reason our open and close subroutines were called }{\f6\fs20 NewDocument}{\f4  and }{\f6\fs20 CloseDocument}{\f4  was because I was going to eventually suggest calling our own records document records, and all of the information about one window a document.\par For now, our document record only needs two pieces of information, a window pointer }{\f6\fs20 wPtr}{\f4  and a window name }{\f6\fs20 wName}{\f4 .  As you already know, }{\f6\fs20 wPtr}{\f4  is a }{\f6\fs20 grafPortPtr}{\f4 .  The }{\f6\fs20 wName}{\f4  field should be a p-string long enough to hold our longest window name.\par How you keep track of these document records is pretty important.  One very common way is to create an array of document records, and flag them as either used or unused.  When you open a window, you can scan the array, looking for an entry that hasn't been used.  One easy way to keep track of which entries are used and which are not is to set }{\f6\fs20 wPtr}{\f4  to nil in an unused record.  With this organization, you would have definitions something like these at the top of your program:\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 const\par    numDocs = 4;                          \{max # open windows\}\par \par type\par    documentRecord = record               \{information about our document\}\par       wPtr: grafPortPtr;                 \{window pointer\}\par       wName: pString;                    \{window name\}\par       end;\par \par var\par    documents: array[1..numDocs] of documentRecord; \{our documents\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-2:  Array Based Documents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This works, but it builds an obvious limitation into your program: there will be some maximum number of documents that the user can have open at any one time.  You can pick a big number, but if it's too big, you'll waste a lot of space.  (Our document records already use 260 bytes of memory per document, and they will get bigger.)  Also, no matter what number you pick, someone someday is going to have a very good reason for trying to open more.  For that reason, I prefer a slightly more complicated but infinitely more flexible way of dealing with document records.  Instead of a fixed length array, use a linked list, allocating document records as they are needed.  This doesn't waste memory, and it allows the user to open as many documents as they have memory for.  Using linked lists, the definitions look like this:\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 type\par    documentPtr = ^documentRecord;        \{document pointer\}\par    documentRecord = record               \{information about our document\}\par       next: documentPtr;                 \{next document\}\par       wPtr: grafPortPtr;                 \{window pointer\}\par       wName: pString;                    \{window name\}\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    documents: documentPtr;               \{our documents\}\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 procedure InitGlobals;\par \par \{ Initialize the global variables                               \}\par \par begin \{InitGlobals\}\par documents := nil;\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 end; \{InitGlobals\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-3:  List Based Documents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The only thing remotely complicated about using a linked list for our document records is adding, removing, and finding the correct document record.  Here's a modified form of }{\f6\fs20 NewDocument}{\f4  and }{\f6\fs20 CloseDocument}{\f4  that handles these details, along with appropriate error checking.  I've also included a subroutine called }{\f6\fs20 FindDocument}{\f4  which returns the document pointer for a given window pointer.  These subroutines will be the basis for manipulating windows  for the rest of this course.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure CloseDocument (dPtr: documentPtr);\par \par \{ Close a document and its associated window                       \}\par \{                                                                  \}\par \{ Parameters:                                                      \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{    dPtr - pointer to the document to close; may be nil           \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    lPtr: documentPtr;                   \{pointer to the previous document\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{CloseDocument\}\par if dPtr <> nil then begin\par    CloseWindow(dPtr^.wPtr);             \{close the window\}\par    if documents = dPtr then             \{remove dPtr from the list when...\}\par       documents := dPtr^.next           \{...dPtr is the first document\}\par    else begin                           \{...dPtr is not the first document\}\par       lPtr := documents;\par       while lPtr^.next <> dPtr do\par          lPtr := lPtr^.next;\par       lPtr^.next := dPtr^.next;\par       end; \{else\}\par    dispose(dPtr);                       \{dispose of the document record\}\par    end; \{if\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 end; \{CloseDocument\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function FindDocument (wPtr: grafPortPtr): documentPtr;\par \par \{ Find the document for wPtr                                       \}\par \{                                                                  \}\par \{ Parameters:                                                      \}\par \{    wPtr - pointer to the window for which to find a document     \}\par \{                                                                  \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{ Returns: Document pointer; nil if there isn't one                \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    done: boolean;                       \{used to test for loop termination\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    dPtr: documentPtr;                   \{used to trace the document list\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{FindDocument\}\par dPtr := documents;\par done := dPtr = nil;\par while not done do\par    if dPtr^.wPtr = wPtr then\par       done := true\par    else begin\par       dPtr := dPtr^.next;\par       done := dPtr = nil;\par       end; \{else\}\par FindDocument := dPtr;\par }\pard \li180\widctlpar\adjustright {\f6\fs20 end; \{FindDocument\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function NewDocument (wName: pString): documentPtr;\par \par \{ Open a new document                                              \}\par \{                                                                  \}\par \{ Parameters:                                                      \}\par \{    wName - name for the new window                               \}\par \{                                                                  \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{ Returns: Document pointer; nil for an error                      \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 const\par    rWindParam1 = $800E;                 \{resource ID\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    wrNum = 1001;                        \{window resource number\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    dPtr: documentPtr;                   \{new document pointer\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{NewDocument\}\par new(dPtr);                              \{allocate the record\}\par if dPtr <> nil then begin\par    dPtr^.onDisk := false;               \{not on disk\}\par    dPtr^.wName := wName;                \{set up the name\}\par    dPtr^.wPtr :=                        \{open the window\}\par       NewWindow2(@dPtr^.wName, 0, nil, nil, $02, wrNum, rWindParam1);\par    if dPtr^.wPtr = nil then begin\par       FlagError(1, ToolError);          \{handle a window error\}\par       dispose(dPtr);\par       dPtr := nil;\par       end \{if\}\par    else begin\par       dPtr^.next := documents;          \{put the document in the list\}\par       documents := dPtr;\par       end; \{else\}\par    end \{if\}\par else\par    FlagError(2, 0);                     \{handle an out of memory error\}\par NewDocument := dPtr;\par end; \{NewDocument\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-4:  Basic Document Manipulation Subroutines\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This leaves two issues to deal with before we can add this new document handling mechanism to Frame.  The first is how errors are flagged by }{\f6\fs20 FlagError}{\f4 , and the other is how window names are chosen and passed.  We'll leave the topic of window names for the next section.  Flagging errors is relatively simple, though:  }{\f6\fs20 FlagError}{\f4  uses }{\f6\fs20 GetPString}{\f4  and }{\f6\fs20 FreePString}{\f4  from the last lesson, appending a note about the specific tool error if a non-zero error number is passed.  The numbers refer to specific, numbered error messages.  }{\f6\fs20 NewDocument}{\f4  used error numbers 1 and 2, which might have messages like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 1\tab }{\f6\fs20 Could not open a new document}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 2\tab }{\f6\fs20 Out of memory}{\f4 \par \par Installing an error handler to display these messages is part of problem 5-3.\par {\*\bkmkend bk21}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:multiple}{\rxe bk21}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Window Names}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Window Names\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk22}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's more to picking the name for a window that you might think, at first.  In most programs, each document window corresponds to a specific file.  For example, in a word processor, the text from a file is displayed in a window, and the name of the window is the same as the name of a file.  When a document is new, and hasn't been saved to disk, it doesn't have a file name.  In that case, it's customary to name the window }{\f6\fs20 Untitled x}{\f4 , where }{\f6\fs20 x}{\f4  is a number that is incremented for each window.\par The Window Manager also puts one fairly severe restriction on how we create and manipulate window names:  It's up to us to allocate space for the window name, to make sure the window name stays in one place, and to make sure it doesn't get changed without making an appropriate Window Manager call to change the name, so the window gets redrawn with the new window name.  All of these restrictions are handled nicely by keeping the window name in it's own string buffer in our document record.\par Setting the window name based on a disk file name is something we'll leave for the next lesson, when we learn how to use the Standard File Operations Tool Set to figure out what file to open or what name to use for a new file.  Creating a window name for an untitled window is something we can do right away, though.  The subroutine in listing 5-5 shows one way to do it; this subroutine fills in a string buffer you pass as a parameter with an appropriate untitled window name.  It uses a global variable, }{\f6\fs20 untitledNum}{\f4 , to keep track of the number for the untitled window, resetting it to 1 if there are no untitled windows in the current list of documents.\par If you look close, you'll also see that this subroutine assumes there is a new field in the document record.  This field, called }{\f6\fs20 onDisk}{\f4 , indicates whether the file exists on disk \endash  in other words, whether there is a valid file name for the document.  We'll need this field later on, when we actually start loading and saving disk files.  This field should be set to false in }{\f6\fs20 NewDocument}{\f4 .\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure GetUntitledName (var name: pString);\par \par \{ Create a name for an untitled window                             \}\par \{                                                                  \}\par \{ Parameters:                                                      \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{    name - (returned) name for the window                         \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 const\par }\pard \li180\widctlpar\adjustright {\f6\fs20    untitled = 101;                      \{Resource number for "Untitled "\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    dPtr: documentPtr;                   \{used to trace the document list\}\par    number: integer;                     \{new value for untitledNum\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    sPtr: pStringPtr;                    \{pointer to the resource string\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{GetUntitledName\}\par dPtr := documents;                      \{if there are no untitled         \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 number := 1;                            \{ documents then reset untitledNum\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 while dPtr <> nil do\par    if not dPtr^.onDisk then begin\par       number := untitledNum;\par       dPtr := nil;\par       end \{if\}\par    else\par }\pard \li180\widctlpar\adjustright {\f6\fs20       dPtr := dPtr^.next;\par untitledNum := number;\par sPtr := GetPString(untitled);           \{set the base name\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 if sPtr = nil then\par    name := 'Untitled '\par else begin\par    name := sPtr^;\par    FreePString(untitled);\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{else\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 name := concat(name, cnvis(untitledNum)); \{add the untitled number\}\par untitledNum := untitledNum+1;           \{update untitledNum\}\par end; \{GetUntitledName\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-5:  }{\f6\fs20 GetUntitledName}{\f4  Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 5-3:  In this problem you will be adding support for multiple windows to Frame.  This involves several steps:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Add }{\f6\fs20 NewDocument,}{\f4  }{\f6\fs20 CloseDocument}{\f4  and }{\f6\fs20 FindDocument}{\f4  from the last section.  Adjust the two places in your program where a window is closed, calling }{\f6\fs20 FindDocument}{\f4  with the window pointer and use the result to call }{\f6\fs20 CloseDocument}{\f4 .\par 2.\tab Add a document record, a document list variable, and the }{\f6\fs20 InitGlobals}{\f4  subroutine.  }{\f6\fs20 InitGlobals}{\f4  should set the document list variable to nil, indicating that there are no open documents.  Be sure to include the }{\f6\fs20 onDisk}{\f4  field, initializing it to false in }{\f6\fs20 NewDocument}{\f4 .\par 3.\tab Add }{\f6\fs20 GetUntitledNum}{\f4 , calling this subroutine before calling }{\f6\fs20 NewDocument}{\f4  to get a distinct window name for each new window.  It's important to establish the name before calling }{\f6\fs20 NewDocument}{\f4 , since we will eventually call }{\f6\fs20 NewDocument}{\f4  to set up a new document record when we open a disk file, too.\par 4.\tab Create an error handler based on }{\f6\fs20 GetPString}{\f4  and }{\f6\fs20 FreePString}{\f4 .  Use the description for the error handler at the end of the last lesson to write yours.\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk22}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:name}{\rxe bk22}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Drawing in a Window}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Drawing in a Window\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk23}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Back in lesson 4 you used the QuickDraw drawing commands }{\f6\fs20 MoveTo}{\f4  and }{\f6\fs20 LineTo}{\f4  to draw some lines on the screen.  At that point, your program didn't have any windows, so you didn't have to worry about exactly where you were drawing; your program just wrote to the screen, figuring that it owned the whole thing.  Well, at that time, it did \endash  but no longer!\par The Frame program you've created can open as many windows as you have the patience and memory to handle.  Each of these windows is, among other things, a separate drawing area called a }{\f6\fs20 grafPort}{\f4 .  Any time you use QuickDraw to draw to "the screen" you are really drawing to a }{\f6\fs20 grafPort}{\f4 , which may or may not be the whole screen.  The }{\f6\fs20 grafPort}{\f4  you are drawing to could also be a window, and the window could be part on the screen or part off of the screen.  The window might even be covered up, part way or all the way, by another window.  And, last but not least, the }{\f6\fs20 grafPort}{\f4  might not even be on the screen at all.  Later, you'll draw to a }{\f6\fs20 grafPort}{\f4  to print, instead of to display something on the screen.\par Regardless of which of these myriad of conditions exist, QuickDraw II is smart enough to keep your drawing where it belongs.  You can, and generally do, just move your pen and draw wherever you want.  QuickDraw II figures out if the stuff you draw is on a visible part of the screen or not, and draws the actual dots on the screen if it needs to, ignoring you if what you are drawing is not visible.  This is something you'll get a chance to see for yourself in a little while.\par About the only thing you really do have to do is tell QuickDraw II which }{\f6\fs20 grafPort}{\f4  to use.  The normal sequence of events to draw to any particular window is:\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetPort}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Get and save the "current" }{\f6\fs20 grafPort}{\f4 , so you can restore it later.  That way, if the subroutine that called the one you are writing assumes a specific }{\f6\fs20 grafPort}{\f4  is active, it will still be active when you return.  QuickDraw's }{\f6\fs20 GetPort}{\f4  call returns the current }{\f6\fs20 grafPort}{\f4 .\par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPort}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 2.\tab Set the }{\f6\fs20 grafPort}{\f4  to your own window using }{\f6\fs20 SetPort}{\f4 .\par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PenNormal}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 3.\tab Unless you're sure about the current state of QuickDraw II's drawing pen, make a quick call to }{\f6\fs20 PenNormal}{\f4  to set things up for "normal" drawing.  }{\f6\fs20 PenNormal}{\f4  gives you a pen that is one pixel wide and one pixel tall, sets the drawing mode to }{\f6\fs20 modeCopy}{\f4 , sets the pen color to black, and gives you a solid pen mask.  Some of that may not make any sense; we'll get to it later.  The result, though, is a setting that tells QuickDraw II to draw normal looking black lines.\par 4.\tab Draw whatever you want to draw.\par 5.\tab Use }{\f6\fs20 SetPort}{\f4  to reset the }{\f6\fs20 grafPort}{\f4  to whatever it was before you started.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetPortRect}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It's actually faster to do all of this than to describe it.  Here's a subroutine that draws an X across a window.  It uses }{\f6\fs20 GetPortRect}{\f4  to find out how big the window is.  }{\f6\fs20 GetPortRect}{\f4  assumes the whole window is visible, and returns its full size, even if part of the window is covered by another window or is off of the screen.\par (You saw rectangles briefly in Lesson 4; a rectangle is just a record with a top, bottom, left and right position.  We'll look at them in detail in a later lesson.)\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure X (wPtr: grafPortPtr);\par \par \{ Draw an X across the window wPtr                              \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{    wPtr - pointer to the window to draw                       \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    port: grafPortPtr;                    \{caller's grafPort\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    r: rect;                              \{port rectangle\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{X\}\par port := GetPort;                         \{get the caller's grafPort\}\par SetPort(wPtr);                           \{make our port active\}\par PenNormal;                               \{use a "normal" pen\}\par GetPortRect(r);                          \{get the size of our window\}\par MoveTo(r.h1,r.v1);                       \{draw the X\}\par LineTo(r.h2, r.v2);\par MoveTo(r.h1, r.v2);\par LineTo(r.h2, r.v1);\par SetPort(port);                           \{reset the caller's port\}\par end; \{X\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-6:  Subroutine to Draw in a Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 5-4:  Add the subroutine X to your Frame program, calling it right after the window is created.\par Unlike the other changes we've been making, the procedure X won't become a permanent addition to Frame, so be sure you keep a separate copy of Frame that does not have this procedure.\par Try creating other windows, dragging your window off of the screen and back on, and showing and then hiding the about box with your window positioned so the about box covers part of the X, but not all of it.  These experiments point out a problem that we'll deal with in the next section: your X disappears.\par {\*\bkmkend bk23}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:drawing in}{\rxe bk23}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Updating a Window}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Updating a Window\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk24}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you tried problem 5-4, you found out that drawing to a window isn't exactly permanent \endash  far from it, in fact!  If you drag a window partway off of the screen, then drag it back, the part of the X that was off of the screen is not redrawn.  If you cover the window with another window (or dialog), the part that is covered doesn't get redrawn.  In fact, about the only thing that redraws the window after covering it up is a menu that gets pulled down over part of the window.\par To understand what is happening, and what we have to do to keep what we draw in the window, we need to delve into the way the toolbox handles windows.  There are two ways to handle the situation when a window is covered and then uncovered, so that part of the window needs to be redrawn.  One way is for the toolbox to remember what was covered up, and redraw it when the time comes.  That would work, and in fact some windowing systems do just that.  The other way is to call some subroutine to redraw the contents of the window, which is what the Apple IIGS toolbox tries to do.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 update events}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Whenever some part of a window becomes visible the toolbox posts an update event.  Part of a window could become visible because you close a window that covers another one, move one window to uncover part of another window, or because you drag a window that was part way off of the screen back onto the visible screen.  The toolbox itself also posts an update event when the window is created in the first place.  In each of these situations, the toolbox adds the area of the window that needs to be drawn to something called the update region.  We'll explore regions in more detail later; for now you can think of the update region as all of the parts of the window that need to be redrawn, or updated \endash  and that's exactly what it is.  An update event is then created, and your event loop will eventually find that update event and return it to you.\par Once you find an update event in your event loop, you should do the following:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 BeginUpdate}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EndUpdate}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Call }{\f6\fs20 BeginUpdate}{\f4 , passing the window pointer for the window that needs to be updated.  }{\f6\fs20 BeginUpdate}{\f4  does some internal magic to make sure you only redraw the part of the window that needs to be redrawn.\par 2.\tab Draw whatever needs to be drawn.  In most programs you would redraw everything in the window, letting QuickDraw II decide what needs to be drawn and what can be ignored.  If it takes a long time to redraw the window, though, there are ways to check to see exactly what must be redrawn.\par 3.\tab Call }{\f6\fs20 EndUpdate}{\f4 , again passing the window pointer.  It is very important to make sure that you call }{\f6\fs20 EndUpdate}{\f4  exactly one time for every }{\f6\fs20 BeginUpdate}{\f4  call.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPort}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You draw in the window the same way as before.  The only difference is that you don't need to save the caller's }{\f6\fs20 grafPort}{\f4  or set your own; }{\f6\fs20 BeginUpdate}{\f4  and }{\f6\fs20 EndUpdate}{\f4  handle all of that for you.  In fact, you }{\i\f4 can't}{\f4  call }{\f6\fs20 SetPort}{\f4  between calls to }{\f6\fs20 BeginUpdate}{\f4  and }{\f6\fs20 EndUpdate}{\f4  \endash  if you do, strange and not-so-wonderful things will happen.  You also can't change to origin while you're updating a window \endash  but you don't know how to do that yet, anyway.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewWindow2}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMaster}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It isn't really quite as hard to do all of this as it sounds, but it is a bit of a pain for something that gets done all of the time, in every desktop program.  With a very small change in the call to }{\f6\fs20 NewWindow2}{\f4 , }{\f6\fs20 TaskMaster}{\f4  can do all of the work for us.  The only change is to pass the name of a subroutine to call when an update is needed.  There are no inputs or outputs to the subroutine that }{\f6\fs20 TaskMaster}{\f4  calls.  You will probably use the same subroutine for all of your windows, so you need some way to figure out which window you are drawing; }{\f6\fs20 GetPort}{\f4  does a nice job, returning the window pointer for the window to draw.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DataBank}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There is one special requirement for this subroutine.  Any time a subroutine is called from the toolbox, as this one is, the subroutine can have trouble reading global variables.  The reason this is true has to do with the memory models used by compilers on the Apple IIGS.  In ORCA/Pascal, you need to tell the compiler that the subroutine will be called by the toolbox so the compiler will add some special code to the procedure to fix the data bank register.  You do that with the }{\f6\fs20 DataBank}{\f4  directive, as you can see in Listing 5-7.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{$databank+\}\par \par procedure DrawContents;\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{ Draw the contents of the active port                          \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    port: grafPortPtr;                    \{caller's grafPort\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    r: rect;                              \{port rectangle\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{DrawContents\}\par port := GetPort;                         \{get our port\}\par PenNormal;                               \{use a "normal" pen\}\par GetPortRect(r);                          \{get the size of our window\}\par MoveTo(r.h1,r.v1);                       \{draw the X\}\par LineTo(r.h2, r.v2);\par MoveTo(r.h1, r.v2);\par LineTo(r.h2, r.v1);\par end; \{DrawContents\}\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{$databank+\}\par \par    .\par    .\par    .\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 dPtr^.wPtr := NewWindow2(@dPtr^.wName, 0, @DrawContents, nil, $02, wrNum,\par    rWindParam1);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-7:  An Update Procedure\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 5-5:  Add the update procedure from Listing 5-7 to Frame.  If you are using the version of Frame from Problem 5-4, take out the procedure X; it isn't needed any more.  Be sure and change the call to }{\f6\fs20 NewWindow2}{\f4  in }{\f6\fs20 NewDocument}{\f4  so it passes the address of }{\f6\fs20 DrawContents}{\f4  to the Window Manager.\par With these changes in place your window behaves like you expect it to.  The contents are drawn once when you create the window, so you don't even have to do it manually.  If you drag the window off of the desktop, then back on, the part that was erased before is redrawn.  If your window is covered up, then uncovered, the area that was covered is redrawn correctly.\par {\*\bkmkend bk24}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:updating}{\rxe bk24}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Window Port and Coordinate Systems}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Window Port and Coordinate Systems\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk25}{\*\bkmkstart bk26}{\*\bkmkstart bk27}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you click the mouse, a variety of different things can happen, depending on where the mouse was when you pressed the mouse button.  If you press on the menu bar, }{\f6\fs20 TaskMaster}{\f4  handles a menu event; pressing on an inactive window makes it active; and so forth.  All of these different kinds of actions are separated based on where the event occurs, and }{\f6\fs20 TaskMaster}{\f4  returns a distinct kind of event in each case.  When you click in the content region of the active window, }{\f6\fs20 TaskMaster}{\f4  returns }{\f6\fs20 wInContent}{\f4  for the event and places a pointer to the window in }{\f6\fs20 taskData}{\f4 .  As with any event, the location of the event is in the }{\f6\fs20 eventWhere}{\f4  field.\par Programs can do any number of different things when an event occurs in the window's content area, like position a cursor, start drawing a line, manipulate a control, or even ignore the event.  We're going to create a simple dot drawing program based on these events.  This will give us a simple but effective way to explore multiple windows, each containing different information; to see how scrolling works; and later, to explore printing and file access.  Creating the actual program will be left for Problem 5-6, but there is one key concept you need to learn about before tackling that program.  You can then use the program you write to explore this concept in more detail.  This important concept is the idea of using multiple coordinate systems.\par Up until we started drawing the X in our window, everything we'd done used global coordinates.  Global coordinates are basically screen coordinates.  (Technically the screen can move, but we'll ignore that since it is rarely an issue.)  Global coordinates do go past the edge of the screen, extending from -32767 to +32787 in both the horizontal and vertical direction.  The visible screen appears just below and to the right of the 0,0 point, extending for 200 pixels down and either 320 pixels or 640 pixels to the right, depending on which graphics mode you are using.\par Each }{\f6\fs20 grafPort}{\f4  (and a window has a }{\f6\fs20 grafPort}{\f4 ; that's what we draw in) has it's own coordinate system, called local coordinates.  As with global coordinates, the local coordinates extend from -32767 to +32767 in each direction.  Although you'll learn to change the origin later, for now, the 0,0 point is always at the top, left edge of the content region of the window.  The content region of the window is also called the window port, which is also the port rectangle until we start changing the origin.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw234\pich160\picwgoal4680\pichgoal3200\macpict\bliptag876414785\blipupi72{\*\blipuid 343d0741394f1e3ea9f5142a4b1005de}0285ffffffff009f00e91101a0008201000affffffff009f00e930001d001a009f00e9a0008c220040004a7600220042004a7600a100b60004004c008009000000000000000031003e004b0044005038a100b60004000100010700000000230000070001000109ffffffffffffffff30003e004a008b00c130003e004a004500c1a100b60004004c008009000000000000000031003e004b0043005009ffffffffffffffff38a100b60004000100010700000000230000a100b60004004c008009000000000000000031003e00ba004400bf070001000138a100b60004000100010700000000230000a100b60004004c008031003e00ba004300bf070001000109ffffffffffffffff38a100b60004000100010700000000230000a0008d09000000000000000031001d001a002900e9070001000109ffffffffffffffff3822001d0016f30022001a001a00f2a10096000c02000000020000000000000001000a00000017000c001d2c000c00150948656c7665746963610300150d000a2b18090130a00097a10096000c02000000020000000000000001000a001700000023000628002000010130a0009701000affffffff009f00e922003b004a00fa2200440047f200a10096000c02000000020000000000000001000a003e0030004a00362b30270130a0009701000affffffff009f00e9220044002fe000a10096000c02000000020000000000000001000a002800460034004c28003100470130a0009701000affffffff009f00e9220027004a00eba10096000c02000000020000000000000001000a000700430013004f2800100044023530a00097a10096000c02000000020000000000000001000a003e0001004a000d2800470002023730a00097a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 5-3:  Global and Local Coordinates\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par All of these rather dry definitions are very important.  Keep in mind that windows can move on the desktop, but you don't want the information inside the window to move relative to the window as it moves.  When a window has a circle at the top left corner before you drag the window, the circle should still be at the top left corner of the window after you drag it.  Local coordinates make this easy:  when you use QuickDraw II drawing commands to draw in the window, it always uses the window's local coordinate system.  Whether you move the window, cover it up, or drag it off of the screen, the top left corner of the window is still the 0,0 point.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw239\pich160\picwgoal4780\pichgoal3200\macpict\bliptag-355759049\blipupi72{\*\blipuid eacb8c37db2e8c7b87b53bc0a024d908}1324ffffffff009f00ee1101a0008201000affffffff009f00ee30001d001f009f00eea0008c09aa55aa55aa55aa55220033002b7700220035002b7700a100b60004004c0080090000000000000000310031002c0037003209aa55aa55aa55aa5538a100b60004000100010700000000230000090000000000000000310031002b007e00a3070001000109aa55aa55aa55aa5538090000000000000000310031002b003800a309aa55aa55aa55aa5538a100b60004004c0080090000000000000000310031002c0036003109aa55aa55aa55aa5538a100b60004000100010700000000230000a100b60004004c0080090000000000000000310031009b003700a0070001000109aa55aa55aa55aa5538a100b60004000100010700000000230000a100b60004004c0080090000000000000000310031009b003600a1070001000109aa55aa55aa55aa5538a100b60004000100010700000000230000a0008d09000000000000000031001d001f002900ee070001000109ffffffffffffffff3822001d001bf30022001a001f00f2a10096000c02000000020000000000000001000a0000001c000c00222c000c00150948656c7665746963610300150d000a2b1d090130a00097a10096000c02000000020000000000000001000a001700050023000b28002000060130a00097a0008c01000affffffff009f00ee22004e006a7700220050006a7700a100b60004004c008009000000000000000031004c006b0052007138a100b60004000100010700000000230000070001000109ffffffffffffffff30004c006a009900e230004c006a005300e2a100b60004004c008009000000000000000031004c006b0051007009ffffffffffffffff38a100b60004000100010700000000230000a100b60004004c008009000000000000000031004c00da005200df070001000138a100b60004000100010700000000230000a100b60004004c008031004c00da005100e0070001000109ffffffffffffffff38a100b60004000100010700000000230000a0008d0700010001220048006a00f2a10096000c02000000020000000000000001000a002d00670039006d2b62160130a00097a10096000c01000000020000000000000001000a004d003c00590042280056003d0130a0009701000affffffff009f00ee2200530064e00022002d006a00e7220053003bda00a10096000c02000000020000000000000001000a000600600012007128000f006103313230a00097a10096000c02000000020000000000000001000a004d000000590011280056000103313330a0009701000affffffff009f00ee070000000022e0c0e0c00000a000a0a100a40002070001000a0000000000000000070001000109800008008000080022004600730cf4230000231f1e2300002306f923000023082223000023dff82300002306f923000023e2e22300000a800008008000080084000a0000000000000000a000a301000affffffff009f00ee84027c003a0074007300ac003a007f00807fff003b007e007f008000817fff003c007d007e008100827fff003d007c007d008200837fff003e007b007c008300847fff003f007a007b008400857fff00400079007a008500867fff004100780079008600877fff004200770078008700887fff004300760077008800897fff0044007500760089008a7fff004500740075008a008b7fff0046008b008c7fff004700740075008c008d7fff004800750076008d008e7fff004900760077008e008f7fff004a00770078008f00907fff004b00780079009000917fff004c0079007a009100927fff004d007a007b009200937fff004e007b007c009300947fff004f007c007d009400957fff0050007d007e009500967fff0051007e007f009600977fff0052007f00800097009800a300a57fff0053008000810098009900a200a37fff0054008100820099009a00a100a27fff005500820083009a009b00a000a17fff005600830084009b009c009f00a000a500a67fff005700840085009c009d009e009f7fff005800850086009d009e7fff0059008600877fff005a008700887fff005b0088008900a600a77fff005c0089008a7fff005d008a008b7fff005e008b008c7fff005f008c008d00a700a87fff0060008d008e7fff0061008e008f7fff0062008f00907fff00630090009100a800a97fff0065009000917fff0066008f00907fff0067008e008f00a900aa7fff0068008d008e7fff0069008c008d7fff006a008b008c7fff006b008b008d7fff006c008d009100aa00ab7fff006d009100957fff006e009500997fff006f0099009e7fff0070009e00a200ab00ac7fff007100a200a67fff007200a600aa7fff007300aa00ac7fff7fff230cf4231f1e2306f923082223dff82306f923e2e2a000a1070000000022e0c0e0c00000a000a0a100a40002070001000a0000000000000000070001000109882288228822882222004b00770df3230000231e1e2300002307fa23000023082123000023def82300002307fa23000023e1e22300000a882288228822882284000a0000000000000000a000a301000affffffff009f00ee840278003e0078007700b1003e008400857fff003f00830084008500867fff004000820083008600877fff004100810082008700887fff004200800081008800897fff0043007f00800089008a7fff0044007e007f008a008b7fff0045007d007e008b008c7fff0046007c007d008c008d7fff0047007b007c008d008e7fff0048007a007b008e008f7fff00490079007a008f00907fff004a00780079009000917fff004b009100927fff004c00780079009200937fff004d0079007a009300947fff004e007a007b009400957fff004f007b007c009500967fff0050007c007d009600977fff0051007d007e009700987fff0052007e007f009800997fff0053007f00800099009a7fff005400800081009a009b7fff005500810082009b009c7fff005600820083009c009d7fff005700830084009d009e00a800aa7fff005800840085009e009f00a700a87fff005900850086009f00a000a600a77fff005a0086008700a000a100a500a67fff005b0087008800a100a200a400a500aa00ab7fff005c0088008900a200a47fff005d0089008a7fff005e008a008b7fff005f008b008c00ab00ac7fff0060008c008d7fff0061008d008e7fff0062008e008f7fff0063008f009000ac00ad7fff0064009000917fff0065009100927fff0066009200937fff0067009300947fff00680094009500ad00ae7fff0069009500967fff006a009500967fff006b009400957fff006c0093009400ae00af7fff006d009200937fff006e009100927fff00700091009500af00b07fff00710095009a7fff0072009a009e7fff0073009e00a27fff007400a200a600b000b17fff007500a600ab7fff007600ab00af7fff007700af00b17fff7fff230df3231e1e2307fa23082123def82307fa23e1e2a000a1070000000022e0c0e0c00000a000a0a100a40002070001000a0000000000000000070001000109aa55aa55aa55aa5522004f007c0cf4230000231f1e2300002306f923000023082223000023dff82300002306f923000023e2e22300000aaa55aa55aa55aa5584000a0000000000000000a000a301000affffffff009f00ee84027c0043007d007c00b50043008800897fff0044008700880089008a7fff004500860087008a008b7fff004600850086008b008c7fff004700840085008c008d7fff004800830084008d008e7fff004900820083008e008f7fff004a00810082008f00907fff004b00800081009000917fff004c007f0080009100927fff004d007e007f009200937fff004e007d007e009300947fff004f009400957fff0050007d007e009500967fff0051007e007f009600977fff0052007f0080009700987fff005300800081009800997fff0054008100820099009a7fff005500820083009a009b7fff005600830084009b009c7fff005700840085009c009d7fff005800850086009d009e7fff005900860087009e009f7fff005a00870088009f00a07fff005b0088008900a000a100ac00ae7fff005c0089008a00a100a200ab00ac7fff005d008a008b00a200a300aa00ab7fff005e008b008c00a300a400a900aa7fff005f008c008d00a400a500a800a900ae00af7fff0060008d008e00a500a600a700a87fff0061008e008f00a600a77fff0062008f00907fff0063009000917fff00640091009200af00b07fff0065009200937fff0066009300947fff0067009400957fff00680095009600b000b17fff0069009600977fff006a009700987fff006b009800997fff006c0099009a00b100b27fff006e0099009a7fff006f009800997fff00700097009800b200b37fff0071009600977fff0072009500967fff0073009400957fff0074009400967fff00750096009a00b300b47fff0076009a009e7fff0077009e00a27fff007800a200a77fff007900a700ab00b400b57fff007a00ab00af7fff007b00af00b37fff007c00b300b57fff7fff230cf4231f1e2306f923082223dff82306f923e2e2a000a1070000000022e0c0e0c00000a000a0a100a40002070001000a000000000000000007000100010977dd77dd77dd77dd22005400800df3230000231e1e2300002307fa23000023082123000023def82300002307fa23000023e1e22300000a77dd77dd77dd77dd84000a0000000000000000a000a301000affffffff009f00ee84027800470081008000ba0047008d008e7fff0048008c008d008e008f7fff0049008b008c008f00907fff004a008a008b009000917fff004b0089008a009100927fff004c00880089009200937fff004d00870088009300947fff004e00860087009400957fff004f00850086009500967fff005000840085009600977fff005100830084009700987fff005200820083009800997fff0053008100820099009a7fff0054009a009b7fff005500810082009b009c7fff005600820083009c009d7fff005700830084009d009e7fff005800840085009e009f7fff005900850086009f00a07fff005a0086008700a000a17fff005b0087008800a100a27fff005c0088008900a200a37fff005d0089008a00a300a47fff005e008a008b00a400a57fff005f008b008c00a500a67fff0060008c008d00a600a700b100b37fff0061008d008e00a700a800b000b17fff0062008e008f00a800a900af00b07fff0063008f009000a900aa00ae00af7fff00640090009100aa00ab00ad00ae00b300b47fff00650091009200ab00ad7fff0066009200937fff0067009300947fff00680094009500b400b57fff0069009500967fff006a009600977fff006b009700987fff006c0098009900b500b67fff006d0099009a7fff006e009a009b7fff006f009b009c7fff0070009c009d7fff0071009d009e00b600b77fff0072009e009f7fff0073009e009f7fff0074009d009e7fff0075009c009d00b700b87fff0076009b009c7fff0077009a009b7fff0079009a009e00b800b97fff007a009e00a37fff007b00a300a77fff007c00a700ab7fff007d00ab00af00b900ba7fff007e00af00b47fff007f00b400b87fff008000b800ba7fff7fff230df3231e1e2307fa23082123def82307fa23e1e2a000a1070000000022e0c0e0c00000a000a0a100a40002070001000a0000000000000000070001000109ffffffffffffffff22005800850cf4230000231f1e2300002306f923000023082223000023dff82300002306f923000023e2e22300000affffffffffffffff84000a0000000000000000a000a301000affffffff009f00ee84027c004c0086008500be004c009100927fff004d00900091009200937fff004e008f0090009300947fff004f008e008f009400957fff0050008d008e009500967fff0051008c008d009600977fff0052008b008c009700987fff0053008a008b009800997fff00540089008a0099009a7fff005500880089009a009b7fff005600870088009b009c7fff005700860087009c009d7fff0058009d009e7fff005900860087009e009f7fff005a00870088009f00a07fff005b0088008900a000a17fff005c0089008a00a100a27fff005d008a008b00a200a37fff005e008b008c00a300a47fff005f008c008d00a400a57fff0060008d008e00a500a67fff0061008e008f00a600a77fff0062008f009000a700a87fff00630090009100a800a97fff00640091009200a900aa00b500b77fff00650092009300aa00ab00b400b57fff00660093009400ab00ac00b300b47fff00670094009500ac00ad00b200b37fff00680095009600ad00ae00b100b200b700b87fff00690096009700ae00af00b000b17fff006a0097009800af00b07fff006b009800997fff006c0099009a7fff006d009a009b00b800b97fff006e009b009c7fff006f009c009d7fff0070009d009e7fff0071009e009f00b900ba7fff0072009f00a07fff007300a000a17fff007400a100a27fff007500a200a300ba00bb7fff007700a200a37fff007800a100a27fff007900a000a100bb00bc7fff007a009f00a07fff007b009e009f7fff007c009d009e7fff007d009d009f7fff007e009f00a300bc00bd7fff007f00a300a77fff008000a700ab7fff008100ab00b07fff008200b000b400bd00be7fff008300b400b87fff008400b800bc7fff008500bc00be7fff7fff230cf4231f1e2306f923082223dff82306f923e2e2a000a1a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 5-4:  Dragging Doesn't Affect Local Coordinates\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 eventWhere}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The problem is that the }{\f6\fs20 eventWhere}{\f4  value returned in the event record isn't connected with a particular window, so there is no practical way to decide whose local coordinates to use.  So, instead of using local coordinates, the }{\f6\fs20 eventWhere}{\f4  field is returned in global coordinates.  Dealing with this difference is not hard, but you do have to remember that there are two different coordinate systems in use, and be sure you convert between them when you need to.  If you're not sure what coordinate system a tool call uses, you can always check the definition of the tool call in the }{\i\f4 Apple IIGS Toolbox Reference }{\f4 or in Appendix A, but as a general rule, tool calls that deal with a specific }{\f6\fs20 grafPort}{\f4  (like the drawing commands) use local coordinates, while tool calls that do not deal with a specific port (like Event Manager calls) use global coordinates.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GlobalToLocal}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LocalToGlobal}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 QuickDraw II has two easy to use commands to switch back and forth between local and global coordinates; they are }{\f6\fs20 GlobalToLocal}{\f4  and }{\f6\fs20 LocalToGlobal}{\f4 .  Each takes a point as a parameter, and adjusts the point to the appropriate coordinate system.  The only thing you have to be careful of is to make sure your }{\f6\fs20 grafPort}{\f4  has been set before doing the conversion!\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \{convert eventWhere to local coordinates for wPtr\}\par port := GetPort;\par SetPort(wPtr);\par localPoint := myEvent.eventWhere;\par GlobalToLocal(localPoint);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetPort(port);\par }{\f4 \par Problem 5-6:  Starting with Frame, create a program that allows the user to draw dots in a window.\par Start by adding a subroutine call in your event loop that will call a subroutine when a }{\f6\fs20 wInContent}{\f4  event is detected.  Pass the position of the mouse in global coordinates, as well as the pointer to the window where the event occurred.\par The subroutine itself should convert the position to local coordinates, then draw a point at that location.  (You can draw a point with }{\f6\fs20 MoveTo}{\f4  and }{\f6\fs20 LineTo}{\f4  calls using the same coordinates.)  The point should also be recorded in a new linked list of points, with the head of the list stored in the document record.  (Keeping the list of points in the document record keeps the points separate for each document.)\par Change the update procedure so it draws all of the points in the document's point list.\par Be sure you dispose of all of the points in the linked list when you close the document!\par When you test your program, be sure and try it with at least two open windows.  Make sure your points stay correct for each window as the windows are dragged over one another, selected, dragged off of the screen, and resized.\par {\*\bkmkend bk25}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 coordinates}{\rxe bk25}}}{\*\bkmkend bk26}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 local coordinates}{\rxe bk26}}}{\*\bkmkend bk27}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 global coordinates}{\rxe bk27}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Tricks With Update Events}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Tricks With Update Events\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:updating}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the interesting things about the dot drawing program you wrote in the last section is that you had to draw the dots in two places:  once in the update procedure and once in the procedure that created the initial dots.  There are some kinds of programs where handling the drawing in two different places can cause a lot of problems, both in terms of the amount of work you have to do as a programmer, and in terms of the bugs that can creep in when a single complicated task is done in two slightly different ways in two different places.  (What if the drawing isn't done exactly the same way?)\par There is a way to avoid drawing in two different places.  Basically, you tell the Window Manager that the window needs to be updated, and let the update procedure do all of the drawing.  If your update routine goes to the trouble of updating only the parts of the window that have changed, you can even tell the Window Manager to update just a portion of the window.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InvalRect}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Window Manager call }{\f6\fs20 InvalRect}{\f4  is used to force an update.  You pass a rectangle as a parameter, and the Window Manager makes sure the rectangle gets redrawn by the update procedure at the next opportunity.  Assuming you have already set the proper }{\f6\fs20 grafPort}{\f4  with }{\f6\fs20 SetPort}{\f4 , this is all you need to do to force the entire window to be redrawn:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 GetPortRect(r);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 InvalRect(r);\par }{\f4 \par The variable }{\f6\fs20 r}{\f4  is a rect.\par \par Problem 5-7:  Start with the program you created in Problem 5-6.  Instead of drawing the point when the mouse is clicked, add the point to the point list and use }{\f6\fs20 InvalRect}{\f4  to mark the window for update.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Scrolling}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Scrolling\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk28}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In most cases, a window only shows a small portion of the overall document.  For example, in a word processor, you can only see a few lines of a document, even if you're editing an entire book.  Scroll bars are used to move the window around to see different parts of the document, and if you know how to read them, they even give you clues as to the total size of the document and where you are in the document.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1043{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw241\pich163\picwgoal4820\pichgoal3260\macpict\bliptag876700772\blipupi72{\*\blipuid 344164647beee0b290fc40159b7ee6c1}04dbffffffff00a200f01101a0008201000affffffff00a200f03000010001008300d0098822882288228822310097000600a100cb09ffffffffffffffff3809000000000000000031009700c100a100cb09ffffffffffffffff38090000000000000000310097000600a1001109ffffffffffffffff38090000000000000000310097002700a100a909ffffffffffffffff38900004000000000016001800000000001600160096000400a2001000000000000000000000003800000038000000d8000000d80000031ff000031ff0000c0030000c00300030003000300030000c0030000c003000031ff000031ff00000d8000000d800000038000000380000000000000000000090000400000000001500180000000000150014009600bf00a200cb0000000000000000000000e0000000e0000000d8000000d800007fc600007fc600006001800060018000600060006000600060018000600180007fc600007fc6000000d8000000d8000000e0000000e0000000000000300097000600a1001130009700bf00a100cb20000b001c000b00b520000d001c000d00b5a100b60004004c0080090000000000000000310008001d000f002438a100b60004000100010700000000230000070001000109ffffffffffffffff300009001c006700b6a100b60004004c0080090000000000000000310009001d000f002409ffffffffffffffff38a100b60004000100010700000000230000a100b60004004c008009000000000000000031000800ab000f00b3070001000138a100b60004000100010700000000230000070001000109ffffffffffffffff300009001c001000b6a100b60004004c008009000000000000000031000900ac000f00b309ffffffffffffffff38a100b60004000100010700000000230000070001000122008100010f1622008100cff216220066001c0b3122006600b5f33209882288228822882231000d00e5007500ef09ffffffffffffffff3809000000000000000031000d00e5001700ef09ffffffffffffffff3809000000000000000031006b00e5007500ef09ffffffffffffffff3890000400000000001700180000000000170016006900e4007500f0000000000000000000000000000003ff000003ff000003030000030300000303000003030000030300003f03f0003f03f000300030000c00c0000c00c000030300000303000000cc000000cc00000030000000300000000000000000000030006900e5007500ef90000400000000001600180000000000160016000c00e4001900f000000000000000000000003000000030000000cc000000cc000003030000030300000c00c0000c00c000300030003f03f0003f03f000030300000303000003030000030300000303000003ff000003ff0000000000000000000030000d00e5001a00ef22000100cf151622008100cf15ea22006600b52ff422000f00b52f12a10096000c01000000020000000000000001000a0026003c003e006e2c000c00150948656c7665746963610300150d000a2b3d2f0757696e646f770d2a0c0b2876696577206172656129a00097a10096000c01000000020000000000000001000a0067003a007f006b280070003b09646f63756d656e740d2a0c0b2864617461206172656129a0009701000affffffff00a200f009000000000000000031002100e5005b00ef09ffffffffffffffff38a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 5-5:  Scroll Bars and the Document\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Looking at Figure 5-5, you can see that the thumb of the scroll bar (the thumb is the white part on the gray background) shows you both where you are in the document, as well as roughly how much of the document you can see.  There is a minimum size for the thumb, so for a very large document, the size of the thumb doesn't mean anything.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 thumb}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are five actions the user can control with the scroll bar.  By clicking on one of the two arrows, the document is scrolled in the direction of the area by a small amount; this is generally one line in a text editor, so we call this line scrolling.  By clicking in the page area (the gray area between the thumb and arrows) the user can scroll one page in either direction.  A page is generally a little smaller than what you can see in the window.  Finally, by dragging the thumb, the user can jump around in the document.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMaster}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TaskMaster}{\f4  handles most of the details concerning the scroll bars for you, but you need to set a few parameters so }{\f6\fs20 TaskMaster}{\f4  knows how you want the scroll bars handled.  The first of these is the total size of the document itself; }{\f6\fs20 TaskMaster}{\f4  uses this for three reasons.  First, by comparing the total size of the document to the current port rectangle for the window, }{\f6\fs20 TaskMaster}{\f4  can decide how big to make the scroll bar's thumb.  Second, knowing the size of the document tells }{\f6\fs20 TaskMaster}{\f4  how far over the thumb should be when you have scrolled, say, two pages into the document.  Finally, the size of the document tells }{\f6\fs20 TaskMaster}{\f4  whether you can scroll at all.  If the entire document is visible, the thumb and paging area disappear, and if you scroll to either end of the document, }{\f6\fs20 TaskMaster}{\f4  stops you from going any farther.\par The size of the data area can be set two different ways.  The first is when the window is created, by setting the size of the data size field.  In our programs so far, the data size field has been set to 1,1.  This is a great way to set the data size for programs that have a fixed data size, like a paint program or CAD program that starts with a one-page data area.  It's also a good place to set an initial default size for programs like word processors, which have a much more variable data size.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetDataSize}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawControls}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once the window is open you can set the data size with a call to the Window Manager routine }{\f6\fs20 SetDataSize}{\f4 .  You pass the width and height of the data area in pixels, along with the window pointer.  This subroutine doesn't redraw the controls with the new settings, though, so you generally need to follow this up by either marking the window for update, as we did in the last section, or by drawing the controls manually with the Control Manager's }{\f6\fs20 DrawControls}{\f4  call, which redraws all of the controls in a window.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \{Change the data size to 640 by 200\}\par SetDataSize(640, 200, wPtr);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 DrawControls(wPtr);\par }{\f4 \par When the user scrolls the window, either using the arrows or the page area, }{\f6\fs20 TaskMaster}{\f4  needs to know how far to move.  In this case, it's almost always best to set the sizes in the original resource defining the window.  The line size is controlled by the field in the resource definition with the comment "scroll ver hors".  (Refer back to Listing 5-1B to see these fields.  We'll define these a little better later in the lesson, but for now, just change the fields based on the comments listed here.)  The vertical size can be just about anything you want, but the horizontal scroll size needs to be a multiple of 8.  The reason for this has to do with the way dithered colors are drawn in 640 mode, which is something we won't talk about in detail until the lesson on QuickDraw II.  Basically, if a picture is shifted by something other than a multiple of 8, the colors can change in 640 mode.\par The next two entries in the resource, "page ver horiz", are the number of pixels to scroll when the page area is clicked.  You can set a specific value here, but then you will need to change it each time the window changes size.  It's easier to do what we've done, setting these values to 0.  }{\f6\fs20 TaskMaster}{\f4  will scroll by the physical pages size minus 10 pixels with this setting.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetScroll}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPage}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetDataSize}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Of course, you can set these values from your program, too.  The }{\f6\fs20 SetScroll}{\f4  call sets the number of pixels to move when the arrows are clicked, while }{\f6\fs20 SetPage}{\f4  controls the number of pixels to scroll when the click is in the page area.  Each of these has the same parameters as }{\f6\fs20 SetDataSize}{\f4 , namely the horizontal value, the vertical value, and the window pointer.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \{Set up for 8 pixel line scrolling\}\par SetScroll(8, 8, wPtr);\par \{Set up for full page scrolling\}\par GetPortRect(r);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetPage(r.h2-r.h1, r.v2-r.v1, wPtr);\par }{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetContentOrigin}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Finally, you need to tell }{\f6\fs20 TaskMaster}{\f4  where the data area starts.  In most cases, you'll start with the top left part of the data area \endash  that would be the beginning of a text document, or the top left corner of a picture.  That means you start with an origin of 0,0, which is what we've been using in our window resource.  The field controlling the starting position is labeled "Origin".  You can change this manually from the program using }{\f6\fs20 SetContentOrigin}{\f4 , which also takes a horizontal position, a vertical position, and a window pointer, just like the other calls we've been discussing.  You might want to do this, for example, in a text editor if the user starts typing while the insertion point is not on the visible part of the screen.  In that case, you could start off with a }{\f6\fs20 SetContentOrigin}{\f4  call to display the text containing the insertion point so the user can see what he's typing.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetContentOrigin}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LocalToGlobal}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GlobalToLocal}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TaskMaster}{\f4  does almost everything for you when it comes to handling the scroll bars, but there is one thing you have to do for yourself.  The }{\f6\fs20 LocalToGlobal}{\f4  and }{\f6\fs20 GlobalToLocal}{\f4  procedures that convert between the global coordinate system and the local coordinate system for a }{\f6\fs20 grafPort}{\f4  don't take the origin into account.  If you scroll a window, then convert from one coordinate system to another, the result will be off by however far you scrolled.  To take this into account, you need to call }{\f6\fs20 GetContentOrigin}{\f4 , which tells you what the origin is.  Add the origin to a point after calling }{\f6\fs20 GlobalToLocal}{\f4 , and subtract this value from a point before calling }{\f6\fs20 LocalToGlobal}{\f4 .\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 origin}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 GetContentOrigin}{\f4  call itself is a little odd; it returns a long integer.  The least significant word in this long integer is the vertical origin, while the most significant word is the horizontal origin.  You've been pulling apart long integers into two words for quite a while to separate the menu ID and menu item ID from a single longint value, and you can use the same idea to pull apart the longint returned by }{\f6\fs20 GetContentOrigin}{\f4 .  If you get stuck on this, you can look at the solution to Problem 5-8, which shows at least one way to handle the conversion.\par \par Problem 5-8:  Change the dot drawing program from problem 5-7 to allow a full-screen drawing of 200 by 640 pixels.  Set the line scrolling values to 8 pixels high and 16 pixels wide, and leave the page scrolling areas alone so }{\f6\fs20 TaskMaster}{\f4  will calculate an appropriate page scroll distance.  With this simple change, you program can start using scroll bars, handling large documents.\par Be sure to add a new point after scrolling the window.  If you've taken the origin into account, everything will work correctly, but if you haven't, the points will appear in a different spot than where you see the cursor.\par {\*\bkmkend bk28}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:scrolling}{\rxe bk28}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Customizing Your Windows}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Customizing Your Windows\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk29}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In the last section we started messing around with the values in the window resource, which we've treated as a black box up until this point.  It's time to go back and shine some light in that black box.\par When you create a window, you pass a lot of information to the Window Manager to describe the window you want to create.  This information can be in the form of a record using the }{\f6\fs20 NewWindow}{\f4  call, or a resource and some parameters to override the defaults in the resource, as with the }{\f6\fs20 NewWindow2}{\f4  call.  Either way, the information you supply is basically the same; only the way you pass the information changes.  The rest of this section describes the various parameters and what they are used for.  Right after that, we'll look at how the values are set using two different Window Manager calls, }{\f6\fs20 NewWindow2}{\f4  and }{\f6\fs20 NewWindow}{\f4 .\par The problem at the end of the section creates a fun, fairly useful window explorer program.  It's a rather long problem, but it does help firm up the concepts in this section, and it also gives you a great visual aid to explore the various window options.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wFrameBits\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wFrameBits}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 wFrameBits}{\f4  field is a word with 16 bits, each controlling some visual aspect of the window.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 window\:title}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fTitle}{\f4 \tab 15\tab If this bit is set, the window will have a title bar.  If this bit is clear, the window will not have a title bar.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 close box}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fClose}{\f4 \tab 14\tab If this bit is set, the window will have a close box at the left side of the title bar.  If this bit is clear, there will not be a close box.  You might leave off a close box for the main window in a game, for example, so the main display can't be closed.  You must clear this bit if the window does not have a title bar (i.e. if }{\f6\fs20 fTitle}{\f4  is 0).\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\tx1700\adjustright {\pard\plain \qj\fi-1800\li2160\keepn\widctlpar\tx1700\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 alert frame}}}{\v\f6\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fAlert}{\f4 \tab 13\tab Set this bit to 1 for an alert-style window frame.  An alert style window has a double-lined frame around the content region.  Alert windows don't have much besides a window frame, so if you set this bit, you should clear }{\f6\fs20 fInfo}{\f4 , }{\f6\fs20 fZoom}{\f4 , }{\f6\fs20 fFlex}{\f4 , }{\f6\fs20 fGrow}{\f4 , }{\f6\fs20 fBScroll}{\f4 , }{\f6\fs20 fRScroll}{\f4 , }{\f6\fs20 fClose}{\f4  and }{\f6\fs20 fTitle}{\f4 .\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fRScroll}{\f4 \tab 12\tab If this bit is set, the Window Manager will create a scroll bar at the right side of the window to scroll up and down in the document.  This scroll bar must be handled by }{\f6\fs20 TaskMaster}{\f4 ; if you want to create your own scroll bar, leave this bit clear and use the Control Manager to create the scroll bar.\par \par \tab \tab If this bit is set, }{\f6\fs20 fBScroll}{\f4  and }{\f6\fs20 fGrow}{\f4  should also be set.\par \par }{\f6\fs20 fBScroll}{\f4 \tab 11\tab If this bit is set, there will be a bottom scroll bar.  As with }{\f6\fs20 fRScroll}{\f4 , you only use this bit if you want }{\f6\fs20 TaskMaster}{\f4  to handle scrolling for you.\par \par \tab \tab If this bit is set, }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fGrow}{\f4  should also be set.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 grow box}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fGrow}{\f4 \tab 10\tab If this bit is set, there will be a grow box in the corner formed by the scroll bars at the lower right corner of the window.  If the bit is clear, there will not be a grow box.  As with the scroll bars, this grow box must be handled by }{\f6\fs20 TaskMaster}{\f4 ; to handle a grow box manually, you must create it yourself using the Control Manager.\par \par \tab \tab If this bit is set, }{\f6\fs20 fBScroll}{\f4  and }{\f6\fs20 fRScroll}{\f4  should also be set.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GrowWindow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ZoomWindow}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fFlex}{\f4 \tab 9\tab If this bit is set, the data height and width are flexible.  If the bit is clear, }{\f6\fs20 GrowWindow}{\f4  and }{\f6\fs20 ZoomWindow}{\f4  (called by }{\f6\fs20 TaskMaster}{\f4  to resize the window) will change the origin when the window size changes.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 zoom box}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fZoom}{\f4 \tab 8\tab If this bit is set, there will be a zoom box at the right end of the title bar; if the bit is clear, there won't be a zoom box.  You must set }{\f6\fs20 fTitle}{\f4  to get a title bar if this bit is set.\par \par }{\f6\fs20 fMove}{\f4 \tab 7\tab In most cases, the title bar for the window is also its drag region.  In other words, you can move the window by dragging the title around.  If you set this bit, things behave as you would expect; if this bit is clear, you can still have a title bar, but the window can't be moved.\par \par }{\f6\fs20 fQContent}{\f4 \tab 6\tab Most of the time, when you click in the content region of a window, you expect the window to become the front window, but you don't expect anything else to happen.  If this bit is set, clicking in the content region of a window not only brings it to the front, but it also acts as if you actually clicked in the content region.  If this bit is clear, clicking in the content region of a window that isn't the front window just brings it to the front.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ShowWindow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HideWindow}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fVis}{\f4 \tab 5\tab If this bit is set, the window is visible; if it is clear, the window exists, but it is invisible.  The window stays invisible until you use the }{\f6\fs20 ShowWindow}{\f4  call to make it visible.  You can also hide a visible window using }{\f6\fs20 HideWindow}{\f4 .  (We won't be using these in the course, but they are in Appendix A.)\par \par \tab \tab It may seem sort of silly to create an invisible window, but there's actually a very good reason for it.  In complicated windows with lots of controls (like dialogs, which are a special kind of window) it can take a lot of time to create the items that go in the window.  If the window is created, and you then add the controls, the user sees all of the construction as it occurs.  The same thing can happen if you are using a standard resource for a window, and making changes after the window is open.\par \par \tab \tab If, on the other hand, you create an invisible window, then create the controls and make any changes, and finally use }{\f6\fs20 ShowWindow}{\f4  to make the window visible, the user doesn't see the construction of the window \endash  he just sees a window, drawn all at once.  Cases like this are when }{\f6\fs20 fVis}{\f4  should be clear.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 info bar}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1700\adjustright {\f6\fs20 fInfo}{\f4 \tab 4\tab If this bit is set, the window will have an info bar.  An info bar is an area at the top of the window, generally used for things like palettes or text editor rulers.  An info bar has it's own update procedure, so it acts like a little window all it's own, imbedded in the main window.\par \par \tab \tab If this bit is set, the }{\f6\fs20 wInfoHeight}{\f4  and }{\f6\fs20 wInfoDefProc}{\f4  fields must have values.\par \par }{\f6\fs20 fCtlTie}{\f4 \tab 3\tab In most programs, when a window is not the front window, the controls look different.  Scroll bars and grow boxes, for example, are hollow outlines.  If this bit is set, }{\f6\fs20 TaskMaster}{\f4  will redraw the controls in the proper state to match the window.  If the bit is clear, }{\f6\fs20 TaskMaster}{\f4  leaves the controls alone.\par \par }{\f6\fs20 fAllocated}{\f4 \tab 2\tab This flag is used internally by the Window Manager to determine if it allocated the memory for a window.  It always does for your windows, ignoring whatever value you code.\par \par }{\f6\fs20 fZoomed}{\f4 \tab 1\tab This flag is set if the window is currently in it's zoomed state, and clear if not.\par \par }{\f6\fs20 fHilited}{\f4 \tab 0\tab This flag is used internally by the Window Manager.  You can set or clear the bit; the Window Manager ignores what you code.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wTitle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wTitle}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 window\:title}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This field is a pointer to the title of a window.  The title is a p-string, and must be in a fixed memory location.\par The Window Manager draws any pattern in the window right up to the edge of the characters in this title, so you will normally leave at least one space on each end of the title.\par If there is no title bar, this field can be set to nil.  It is generally set to nil in resource files, and the window title is assigned when the }{\f6\fs20 NewWindow2}{\f4  call is made.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wRefCon\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wRefCon}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This long integer field is reserved for your use.  You can set it to anything you like.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wZoom\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wZoom}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This field is a rect record, with the normal complement of four integer fields (v1, h1, v2, h2) defining the edges of a rectangle.  This rect defines the size of the window when it is in its zoomed state.  You can set the coordinates in the rectangle to 0, in which case the Window Manager picks out default values to zoom to the entire visible screen.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wColor\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wColor}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This is a pointer (or a resource number, in a resource description file) to a window color record.  We'll look at window color records in detail in a moment.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wYOrigin, wXOrigin\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wYOrigin}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wXOrigin}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 These two fields define the origin for the window.  As you know, scrolling a window changes it's origin; setting these fields to a non-zero value lets you start off somewhere other than the top-left corner of your document.\par Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wDataH, wDataW\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wDataH}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wDataW}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 These values define the size of the entire document, in pixels.  The values are used by }{\f6\fs20 TaskMaster}{\f4  to decide how far you can scroll using the scroll bars, as well as to decide how big the thumb should be in a scroll bar.\par Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wMaxH, wMaxW\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wMaxH}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wMaxW}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 These values define the maximum size for the window.  If you code 0, the Window Manager will fill in values to let the window grow as big as the visible desktop.\par Set these values to 0 if you are not setting the }{\f6\fs20 fGrow}{\f4  bit in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wScrollVer, wScrollHor\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wScrollVer}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wScrollHor}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 These fields tell }{\f6\fs20 TaskMaster}{\f4  how many bits to scroll in each direction when the user clicks on a scroll bar arrow.  }{\f6\fs20 wScrollVer}{\f4  is generally set to 8 or the height for a font, while }{\f6\fs20 wScrollHor}{\f4  is typically set to 8.  Because of the way dithered colors are created in 640 mode, you really should set }{\f6\fs20 wScrollHor}{\f4  to some multiple of 8.  The reasons are discussed in detail in a later lesson, when drawing using QuickDraw II is covered in detail.\par Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wPageVer, wPageHor\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPageVer}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPageHor}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 These fields tell }{\f6\fs20 TaskMaster}{\f4  how many bits to scroll in each direction when the user clicks in the page area of a scroll bar.  In most cases, you will set these values to 0; this tells the Window Manager to pick an appropriate value.  It will use a value 10 pixels smaller than the size of the window, so that paging will leave a little of the old page on the screen.\par Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wInfoRefCon\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInfoRefCon}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 info bar}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This value can be set to anything you like.  It's for your use when creating info bars.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wInfoHeight\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInfoHeight}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 info bar}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This is the height of the info bar, in pixels.  The width of the info bar matches the width of the window itself, so there is no separate parameter for the width.\par This value is only used if }{\f6\fs20 fInfo}{\f4  is set in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wFrameDefProc\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wFrameDefProc}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This pointer points to a subroutine that will be called when the Window Manager needs to draw the window.  In all of the programs in this course, we'll set this to nil, telling the Window Manager to use the standard procedure for drawing a window frame.\par While this parameter exists in any window definition, the Types.rez interface file for the Rez compiler hard-codes this value to 0, so it doesn't appear at all when you use Types.rez to format an }{\f6\fs20 rWindParam1}{\f4  resource.\par If you are adventurous, you might want to experiment with creating your own window definition procedures.  While it's pretty complicated, you can create round windows, windows in special shapes, or even hollow windows.  For details, see the }{\i\f4 Apple IIGS Toolbox Reference}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wInfoDefProc\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInfoDefProc}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This pointer points to the subroutine to call when the information bar needs to be drawn.  It works like }{\f6\fs20 wContDefProc}{\f4 , only for information bars.\par Set this field to nil if you did not set the }{\f6\fs20 fInfo}{\f4  bit in }{\f6\fs20 wFrameBits}{\f4 .\par While this parameter exists in any window definition, the Types.rez interface file for the Rez compiler hard-codes this value to 0, so it doesn't appear at all when you use Types.rez to format an }{\f6\fs20 rWindParam1}{\f4  resource.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wContDefProc\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wContDefProc}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This field points to your update procedure.  We discussed the update procedure in detail earlier in the lesson.\par While this parameter exists in any window definition, the Types.rez interface file for the Rez compiler hard-codes this value to 0, so it doesn't appear at all when you use Types.rez to format an }{\f6\fs20 rWindParam1}{\f4  resource.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wPosition\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPosition}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This is a rect record.  It determines where the window is and how big it is when the window is first created.  The rectangle, which you specify in global coordinates, defines the size of the content region of the window.  Be sure to leave room for the window title bar, the system menu bar, and the scroll bars!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wPlane\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPlane}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you create a window, you can actually define where it shows up \endash  it doesn't have to be the front most window.\par To make a new window the front most window, set this field to -1.  To create a window that is behind all of the existing ones, use 0.  You can also pass a specific }{\f6\fs20 grafPortPtr}{\f4  in this parameter, in which case the new window will be right behind the one whose }{\f6\fs20 grafPortPtr}{\f4  you pass.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 wStorage\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wStorage}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This field is used for different purposes, depending on whether you are using a resource for a }{\f6\fs20 NewWindow2}{\f4  call or setting up a window record for a }{\f6\fs20 NewWindow}{\f4  call.\par For the }{\f6\fs20 NewWindow}{\f4  call, this parameter lets you allocate storage for a window yourself, rather than having the Window Manager set aside the memory.  Setting the value to nil tells the Window Manager to allocate memory for the window record itself, and that's what we'll do throughout this course.\par In a window resource, this parameter is used for control lists.  Later on, when we start dealing with the Control Manager up close and personal, we'll come back and use this field.  For now, though, this value should be set to nil.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Windows with Colors and Patterns\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:colors}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:title bar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:lined}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 So far, the window's we've created have used nil for the }{\f6\fs20 wColor}{\f4  parameter, which tells the Window Manager to use the default colors and patterns for a window.  Unfortunately, the defaults are pretty gross.  You get a solid black title bar, rather than the cute lined one you see in most programs.  In this section, you'll finally find out how to create the coolest window frames.\par The colors for the various parts of the window frame, as well as the way the title bar area is drawn, are controlled by a color table.  This color table can be defined either as a resource or as a record, but there is a restriction:  like the window title, the color table must remain in a fixed area of memory.  This means you have to set aside the space for the record using a global variable or dynamically allocated memory; you cannot use a local variable, since local variables vanish when you return from a subroutine.  If you are using a resource, the Window Manager makes sure the color table stays in one spot.\par The color table itself is made up of five integers.  These integers are divided into four-bit groups, with an occasional eight-bit group for variety.  In the definitions below, the various four- and eight-bit groups are marked as letters in hexadecimal digits.  These digits are then explained in the following table.\par The table format you see here is very easy to refer to, but it's a lot more graphic to actually see the colors on the screen.  That's one of the things you'll do with the program you write at the end of this section.\par All of the colors can be any value from 0 to 15.  These represent solid colors in 320 mode, and dithered colors in 640 mode.  In most cases, you'll use $F (white) or $0 (black).\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 frameColor\tab $00a0\par titleColor\tab $0bcd\par tBarColor\tab $eefg\par growColor\tab $h0ij\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 infoColor\tab $k0m0\par }{\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 a\tab This is the outline color for the window frame.  It includes the lines around the edge of the window, the lines around the info bar, the lines outlining the close box and grow box, and the lines used to draw the small boxes inside the grow box.\par \par b\tab The background color of an inactive title bar.  This is the color behind both the text of the title, and the color used to fill the title bar itself.  In most cases, all of the windows except the front window are inactive; this is handled for you by }{\f6\fs20 TaskMaster}{\f4 .\par \par c\tab This is the foreground color of the text when the window is inactive.  This is usually the same as the foreground text color for an active window (nibble d), but you could set this to a different color, say to get gray text when a window is inactive.\par \par d\tab This is the color of the text when the window is active.\par \par ee\tab These eight bits define the type of title bar.  There are three types of title bars:\par \par }\pard \qj\fi-540\li1620\widctlpar\adjustright {\f4 $00\tab Solid title bars are the normal kind, by default a boring black.  The color is actually set by digit g.\par \par $01\tab Dithered title bars use a checkerboard pattern, alternating between the foreground and background colors set by digits f and g.\par \par $02\tab Lines title bars are the sort you see most often, with lines running across the title bar.  Digits f and g define the colors.\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 f\tab This is one of the colors for a dithered title bar, or the color of the lines on a lined title bar.\par \par g\tab This is the second color for a dithered title bar, the background color for a lined title bar, or the solid color used for a solid title bar.\par \par h\tab This digit is only used on alert frames, where it defines the color between the outside line around the window and the heavy line just inside the main outline.\par \par i\tab This is the interior color for the grow box when the window is not selected.\par \par j\tab This is the interior color for the grow box when the window is selected.\par \par k\tab This digit is only used on alert frames, where it defines the color of the heavy box that runs inside of the main window outline.\par \par m\tab This is the interior color for an info bar.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The next section gives an example, showing you exactly how to set up a resource-based color table for a lined window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Creating Custom Windows With Resources\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In most cases, you'll want to do just what we've done so far in this lesson, using resources to create a window definition, then calling }{\f6\fs20 NewWindow2}{\f4  to create the window.  Back at the start of this lesson, we used this resource definition to set up our standard document window:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindParam1 resource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rWindParam1 (1001) \{\par    $DDA5,                      /* wFrameBits */\par    nil,                        /* wTitle */\par    0,                          /* wRefCon */\par    \{0,0,0,0\},                  /* ZoomRect */\par    nil,                        /* wColor ID */\par    \{0,0\},                      /* Origin */\par    \{1,1\},                      /* data size */\par    \{0,0\},                      /* max height-width */\par    \{8,8\},                      /* scroll ver hors */\par    \{0,0\},                      /* page ver horiz */\par    0,                          /* winfoRefcon */\par    10,                         /* wInfoHeight */\par    \{30,10,183,602\},            /* wposition */\par    infront,                    /* wPlane */\par    nil,                        /* wStorage */\par    $0000                       /* wInVerb */\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-8:  Resource For a Standard Document Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Let's update that definition, adding cool, lined windows.  The new resource, along with the appropriate color table, looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindParam1 resource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rWindParam1 (1001) \{\par    $DDA5,                      /* wFrameBits */\par    nil,                        /* wTitle */\par    0,                          /* wRefCon */\par    \{0,0,0,0\},                  /* ZoomRect */\par    1001,                       /* wColor ID */\par    \{0,0\},                      /* Origin */\par    \{1,1\},                      /* data size */\par    \{0,0\},                      /* max height-width */\par    \{8,8\},                      /* scroll ver hors */\par    \{0,0\},                      /* page ver horiz */\par    0,                          /* winfoRefcon */\par    10,                         /* wInfoHeight */\par    \{30,10,183,602\},            /* wposition */\par    infront,                    /* wPlane */\par    nil,                        /* wStorage */\par    $0800                       /* wInVerb */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindColor resource}}}{\v\f6\fs20 \par }{\f6\fs20 resource rWindColor (1001) \{\par    0x0000,                     /* frameColor */\par    0x0F00,                     /* titleColor */\par    0x020F,                     /* tbarColor */\par    0xF0F0,                     /* growColor */\par    0x00F0                      /* infoColor */\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-9:  Resource For a Lined Document Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Finally, let's give this same definition again, but this time, instead of actual values, we'll use the field names that we've used during this whole, long section.  That way, you can compare the description of the field you want with the place you need to put the value in the resource.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindParam1 resource}}}{\v\f4 \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rWindParam1 (1001) \{\par    wFrameBits,                 /* wFrameBits */\par    wTitle,                     /* wTitle */\par    wRefCon,                    /* wRefCon */\par    wZoom,                      /* ZoomRect */\par    wColor,                     /* wColor ID */\par    \{wXOrigin,wYOrigin\},        /* Origin */\par    \{wDataH,wDataW\},            /* data size */\par    \{wMaxH,wMaxW\},              /* max height-width */\par    \{wScrollHor,wScrollVer\},    /* scroll ver hors */\par    \{wPageHor,wPageVer\},        /* page ver horiz */\par    wInfoRefCon,                /* winfoRefcon */\par    wInfoHeight,                /* wInfoHeight */\par    wPosition,                  /* wposition */\par    wPlane,                     /* wPlane */\par    wStorage,                   /* wStorage */\par    $0800                       /* wInVerb */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-10:  Window Resource By Field Name\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par With the exception of the last one, all of these parameters have been explained in gory detail already.  The big exception is the last parameter; it's the one with the comment }{\f6\fs20 wInVerb}{\f4 .  This parameter tells the Window Manager where to look for certain things after the resource has been loaded.  This field is a set of flags, used for three different purposes.\par Bits 15 to 12 (the first four bits) are reserved, and should be set to 0.\par Bits 7 to 0 (the last eight bits) are used when we define a control list for the window.  We won't be doing that for a while, so set this part of the value to 0 for now.\par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindColor resource}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The remaining four bits are divided into two two-bit fields.  Bits 10 and 11 tell the Window Manager what sort of entry you're using in }{\f6\fs20 wColor}{\f4 , while bits 8 and 9 tell what sort of entry is in the }{\f6\fs20 wTitle}{\f4  field.  Each of these can be 00 for a pointer, 01 for a handle, or 10 if you're using a resource ID.  Back before we started using color tables, this value was set to $0000, which told the Window Manager to look for a pointer in both fields, and we passed nil for both the color table and title.  That basically told the Window Manager there was no title or color table.  Now, with a color table defined via a resource, we're using a value of $0800, which still tells the Window Manager to use a pointer for the window title, but we're using a resource for the color table.  The resource ID number for the color table goes in the }{\f6\fs20 wColor}{\f4  field; the resource ID is the same number you put in parenthesis in the }{\f6\fs20 rWindColor}{\f4  resource.  Of course, if you are using different color tables for different windows, you need to use different }{\f6\fs20 rWindColor}{\f4  resources and resource ID numbers, but if you'll be using cool lined color tables for all of the windows, save some space and use the same color table for all of your windows.\par Some of these fields just don't work well from a resource definition, since they change for practically every window.  A good example is the window title, which is generally either "Untitled x" or the name of the disk file where the information displayed when the document is actually stored.  }{\f6\fs20 NewWindow2}{\f4  lets you override several of these parameters.  Here's the }{\f6\fs20 NewWindow2}{\f4  call with our familiar field names instead of actual parameters:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 NewWindow2(wTitle, wRefCon, wContDefProc, wFrameDefProc, paramTableDesc,\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    paramTableRef, resourceType);\par }{\f4 \par The last three are not normal window parameters; they are used to tell the Window Manager which resource to use.  The first of these new parameters, }{\f6\fs20 paramTableDesc}{\f4 , tells the Window Manager what the next parameter is.  We'll be using 2 all of the time, telling the Window Manager that }{\f6\fs20 paramTableRef}{\f4  is a resource ID number, but it is possible to tell the Window Manager to use a pointer or handle, instead.  The last parameter, }{\f6\fs20 resourceType}{\f4 , tells the Window Manager which of two possible window resource types we're using.  We'll always use $800E, for }{\f6\fs20 rWindParam1}{\f4 .\par Of course, I glossed over a lot of options by just telling you what we'll be using in the course.  In a way that's unfair, since you may get the feeling I'm hiding something.  The real reason for skipping the various alternatives is that we're covering the most useful ones.  Adding a detailed discussion of all of the rest of them would be overkill \endash  besides, I've optioned you to death in this section!  If you really feel like you just have to know about all of those other options, check out Appendix A or }{\i\f4 Apple IIGS Toolbox Reference}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using NewWindow and Window Records\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewWindow}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's one big disadvantage to using }{\f6\fs20 NewWindow2}{\f4  and a resource to define a window:  It's a real pain to define windows that need something other than }{\f6\fs20 wTitle}{\f4 , }{\f6\fs20 wRefCon}{\f4 , }{\f6\fs20 wContDefProc}{\f4  or }{\f6\fs20 wFrameDefProc}{\f4  changed for each new window.  (If you'll recall, these are the parameters that you can pass as parameters to the }{\f6\fs20 NewWindow2}{\f4  call.)  The big problem at the end of this section is a window sampler, where you'll be changing most of the }{\f6\fs20 wFrameBits}{\f4  bit flags as well as the color table.  Since those can't be passed as parameters to }{\f6\fs20 NewWindow2}{\f4 , we'll cover a very similar call called }{\f6\fs20 NewWindow}{\f4  in this section.  }{\f6\fs20 NewWindow}{\f4  has the disadvantage of using a record that has to be filled in field by field with Pascal assignment statements, but that's a lot easier than changing a resource on the fly.\par Basically, using }{\f6\fs20 NewWindow}{\f4  is a lot like using }{\f6\fs20 NewWindow2}{\f4 ; the thing that changes is how you specify all of the parameters.  Instead of defining a resource, you define a window record; this window record can be a local variable, since the Window Manager takes what it needs.  The color table, though, still has to be defined as a fixed variable, so we'll stuff that in our document record.  Listing 5-11 shows a subroutine that will define a window using a }{\f6\fs20 NewWindow}{\f4 .\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function NewWind: grafPortPtr;\par \par \{ Create a new window                                           \}\par \{                                                               \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{ Returns: Pointer to the window; nil for error                 \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    wParms: paramList;                   \{parameters for NewWindow\}\par \par begin \{NewWind\}\par with wParms do begin\par    paramLength := sizeof(wParms);\par    wFrameBits := $DDA5;\par    wTitle := @'  Untitled  ';\par    wRefCon := 0;\par    wZoom.h1 := 0; wZoom.h2 := 0;\par    wZoom.v1 := 0; wZoom.v2 := 0;\par    wColor := nil;\par    wYOrigin := 0; wXOrigin := 0;\par    wDataH := 200;\par    wDataW := 640;\par    wMaxH := 0;\par    wMaxW := 0;\par    wScrollVer := 8; wScrollHor := 8;\par    wPageVer := 0; wPageHor := 0;\par    wInfoRefCon := 0; wInfoHeight := 0;\par    wFrameDefProc := nil;\par    wInfoDefProc := nil;\par    wContDefProc := @DrawContents;\par    wPosition.v1 := 30;\par    wPosition.h1 := 10;\par    wPosition.v2 := 183;\par    wPosition.h2 := 602;\par    wPlane := pointer(topMost);\par    wStorage := nil;\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    end; \{with\}\par NewWind := NewWindow(wParms);     \{open the window\}\par end; \{NewWind\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 5-11:  Subroutine to Define a Window with }{\f6\fs20 NewWindow}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The parameters you actually pass in this record are basically the same old familiar ones you used with resources.  Here are the differences:\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 paramLength}{\f4 \tab This is the size of the window record in bytes.  Like all of the parameters that appear here but not in the }{\f6\fs20 rWindParam1}{\f4  resource descriptions we've used, this parameter is actually in the resource, too, but Types.rez sets it to a constant, so we normally don't worry about it in the resource description file.\par \par }{\f6\fs20 wFrameDefProc}{\f4 \tab This is the address of a subroutine that will draw the window frame.  It's used for custom windows.  For one odd example, by using this parameter and a few others, you could create a round window.\par \par }{\f6\fs20 wInfoDefProc}{\f4 \tab This is the address of a subroutine that draws the contents of the info bar.\par \par }{\f6\fs20 wContDefProc}{\f4 \tab This is the address of the subroutine that draws the contents of the window.  Since the window is set up at run time, we can set this address here, rather than passing it as a parameter to }{\f6\fs20 NewWindow}{\f4 .\par \par }{\f6\fs20 wStorage}{\f4 \tab This is a pointer to the window record itself.  It's almost always set to nil, forcing the Window Manager to allocate the space.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Problem 5-9:  This problem makes a small change to our Frame program.  This is the version we'll use in future chapters.\par Add the window color table shown in Listing 5-9 to your Frame program.  (Start with the version developed for Problem 5-5.)  To keep the lines from butting right up against the window name, be sure and add two spaces to the left and right of the window title string.\par \par Problem 5-10:  This problem is a fairly long one, but it's well worth the effort.  Even if you don't work the problem, take time to read it so you understand what it's all about, then run the solution.  The problem develops a window sampler that lets you quickly try out the various window color and }{\f6\fs20 wFrameBits}{\f4  options.\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 a.\tab Starting with the Frame program from Problem 5-9, add a window color record to the document record.  This window color record will be filled in for each window we create.\par \par \tab ORCA/Pascal's interface file for the Window Manager has a record defined for color tables.  To save you the trouble of looking it up, here's the record you should use to define the color table:\par \par }\pard \li720\widctlpar\adjustright {\f6\fs20    wColorTbl = record\par        frameColor: integer;\par        titleColor: integer;\par        tBarColor:  integer;\par        growColor:  integer;\par        infoColor:  integer;\par        end;\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \par b.\tab Add a menu called }{\f6\fs20 wFrameBits}{\f4 .  Add these menu items to the menu:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\li720\widctlpar\tx1800\tx2880\tx3960\tx5040\tx6120\tx7200\tx8280\adjustright {\f6\fs20 fTitle\tab fClose\tab fAlert\tab Controls\tab fFlex\tab fZoom\tab fMove\tab fCtlTie\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \tab All of these but }{\f6\fs20 controls}{\f4  is the name of one of the bits in }{\f6\fs20 wFrameBits}{\f4 ; }{\f6\fs20 controls}{\f4  is used for }{\f6\fs20 fRScroll}{\f4 , }{\f6\fs20 fBScroll}{\f4  and }{\f6\fs20 fGrow}{\f4 , since these have to be set as a group.  Add the appropriate code to your program so the user can select or deselect these options.  When the option is selected, show a check by the option in the window, erasing the check when the option is not selected.\par \par c.\tab Add another menu called Title.  It should have three options: Solid, Lined and Dithered.  Only one of these can be selected at a time.\par \par d.\tab Remove the code that calls }{\f6\fs20 NewWindow2}{\f4 , using the subroutine from Listing 5-11, instead.  Form the color table and }{\f6\fs20 wFrameBits}{\f4  parameters based on the options that the user has selected from the menus.\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk29}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:customizing}{\rxe bk29}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson has covered the basics of creating and using windows.  It's been a long, long lesson, so it may seem strange to claim we only covered the basics, but there are a lot of things you can do with windows that we didn't cover \endash  there are lots of Window Manager calls to manipulate windows that we won't use, and you can even create your own, custom windows.  Still, this lesson gives you enough information about the Window Manager and windows to recreate what you'll see in the vast majority of desktop programs.  If you have copies of the toolbox reference manuals, now would be a great time to browse through the chapters that cover the Window Manager.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 BeginUpdate\tab CloseWindow\tab DrawControls\tab EndUpdate\par FrontWindow\tab GetContentOrigin\tab GetPort\tab GetPortRect\par GlobalToLocal\tab HideWindow\tab InvalRect\tab LocalToGlobal\par NewWindow\tab NewWindow2\tab SetContentOrigin\tab SetDataSize\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 SetPage\tab SetPort\tab SetScroll\tab ShowWindow\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rWindColor\tab rWindParam1\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\*\bkmkend bk30}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows}{\rxe bk30}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 6 \endash  File I/O}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 6 \endash  File I/O}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 6 \endash  File I/O\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson concentrates on the Standard File Operations Tool Set, which is a collection of prewritten routines that lets the user of a program specify what files to load and save.  We'll follow the process through to its natural conclusion by learning to load files and save files using GS/OS, the disk operating system for the Apple IIGS.  Along the way, we'll add file input and output subroutines to our Frame program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 SFO}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 SFO\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Standard File Operations Tool Set\:See SFO}}}{\f4 Before we get going, let's stop and get a really good overview of what this lesson is all about.  Most desktop programs need to load and save files; about the only exception would be a game of some sort.  Dealing with file input and output involves two separate issues.  The first is the communication that goes on between the program and the user of the program to decide which file to open or close.  You've certainly gone thought the process of selecting Open from the File menu, seeing a dialog appear, and then selected a file.  Saving a file is also handled by a dialog, this time a dialog that lets you pick a name for your file.  If you pick a duplicate, you are warned, and so on.  The process of asking for file names is so common on desktop programs, and there are so many right ways to do it, that Apple decided to create the Standard File Operations Tool Set.  That's a real mouthful, so most people call it SFO.  SFO displays dialogs for either opening or saving files, handles all of the interaction with the user up to the point that a file name has been picked, and then hands you the file name on a silver platter.  There are some unusual cases when you might want to bypass SFO and do all of this for yourself, but they are very, very unusual.  Almost all desktop programs that do file input or output use SFO to figure out what file name to use.\par Once you have a file name, the second part of the problem is to actually load or save the file.  You could do that with Pascal's built in file I/O mechanism, but there are some limitations that make Pascal's file I/O procedures inadequate for a wide variety of programs.  The two most severe problems are that you can't set the file type on a file you create, and GS/OS can load and save most files a lot faster than Pascal.  For both of these reasons, we'll also develop some simple, canned subroutines in this lesson that you can use to load and save files.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Open Dialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Open Dialog\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk34}{\*\bkmkstart bk35}{\*\bkmkstart bk38}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you select Open from the File menu of a desktop program, you generally see something like the dialog shown in Figure 6-1.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1044{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw429\pich252\picwgoal8580\pichgoal5040\macpict\bliptag321011612\blipupi72{\*\blipuid 13223f9cf703d3d02c26f6a93c868149}1d0a0000000000fc01ad1101a00082a0008e01000a0000000002d002409800360000000000be01b00000000000be01ad0000000000be01ad000102cb0002cb0006003fcdff00c006003fcdff00c0060030cd0000c0060030cd0000c0060030cd0000c0060030cd0000c00801307fcfff01e0c00801307fcfff01e0c00801307fcfff01e0c00801307fcfff01e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c01804307c0001e0fd000018fe00047187000780e0000203e0c01804307c0001e0fd000018fe00047187000780e0000203e0c01804307c000330fd000818000c00c003000cc0e0000203e0c01804307c000330fd000818000c00c003000cc0e0000203e0c01911307c000333e1e3e0619f0f9f01f3830780c0e0000203e0c01911307c000333e1e3e0619f0f9f01f3830780c0e0000203e0c01903307c0003fe330a306d99998c00c1830cc180e0000203e0c01903307c0003fe330a306d99998c00c1830cc180e0000203e0c01810307c00033333f3306d99998c00c1830fc3df000203e0c01810307c00033333f3306d99998c00c1830fc3df000203e0c0170f307c0003333303303319998d80c1830cde000203e0c0170f307c0003333303303319998d80c1830cde000203e0c01810307c0001e3e1e33033198f8700c3c78783df000203e0c01810307c0001e3e1e33033198f8700c3c78783df000203e0c00c04307c000003d3000203e0c00c04307c000003d3000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00f07307c00003fffffc0d6000203e0c00f07307c00003fffffc0d6000203e0c0200b307c0000300000f003f00060fc000903c00cf80001f0f0f180e9000203e0c0200b307c0000300000f003f00060fc000903c00cf80001f0f0f180e9000203e0c0200b307c000033fffcf00c0ff060fc0009060030cc000199999860e9000203e0c0200b307c000033fffcf00c0ff060fc0009060030cc000199999860e9000203e0c0210b307c000030fff0f00c000c60fd3c0a7c07c060ccd8f199998030e9000203e0c0210b307c000030fff0f00c000c60fd3c0a7c07c060ccd8f199998030e9000203e0c0221a307c0000303fc0f3ffff0c606660606666066060f8e1999998f030e9000203e0c0221a307c0000303fc0f3ffff0c606660606666066060f8e1999998f030e9000203e0c0221a307c0000300f00f0c000cc607e3c3c6666066060c0c19999981830e9000203e0c0221a307c0000300f00f0c000cc607e3c3c6666066060c0c19999981830e9000203e0c02215307c0000300000f030003c606006066666066060c0c1fe99019830e9000203e0c02215307c0000300000f030003c606006066666066060c0c1fe99019830e9000203e0c0210b307c00003ffffff00ffffc7efd3c066663c030c0c0f1fef00060e9000203e0c0210b307c00003ffffff00ffffc7efd3c066663c030c0c0f1fef00060e9000203e0c01807307c00000ffffff0f600000cfc00010180e9000203e0c01807307c00000ffffff0f600000cfc00010180e9000203e0c00901307cd0000203e0c00901307cd0000203e0c01703307c0000e6ff00f8fe000007f6ff00fefe000203e0c01703307c0000e6ff00f8fe000007f6ff00fefe000203e0c01a03307c0000e9ff03f8000018fe00003cf6000603c0000003e0c01a03307c0000e9ff03f8000018fe00003cf6000603c0000003e0c02803307c0000fdff06e0ffffcffe1ff3f4ff03f8018018fe0005e0000031800efa000570000003e0c02803307c0000fdff06e0ffffcffe1ff3f4ff03f8018018fe0005e0000031800efa000570000003e0c0290e307c0000ffc000ffe67fffcffcffc3f4ff0cf8066018000001c00000318006fa000538000003e0c0290e307c0000ffc000ffe67fffcffcffc3f4ff0cf8066018000001c00000318006fa000538000003e0c03112307c0000ffcff33fe664e1c1fc1ff3fc1e0e1ff8ff00f8fe1815000001c00000318f0619bf878780000038000003e0c03112307c0000ffcff33fe664e1c1fc1ff3fc1e0e1ff8ff00f8fe1815000001c00000318f0619bf878780000038000003e0c03011307c0000ffcff03fe0e3ccccfccff3fcccccf7ff10f8600618000001c000001b198619b6ccccfe000538000003e0c03011307c0000ffcff03fe0e3ccccfccff3fcccccf7ff10f8600618000001c000001b198619b6ccccfe000538000003e0c03112307c0000ffcfff3fe7e7ccccfccff3fcccce1ff8ff19f9f81f98000001c000001b198619b6cfc780000038000003e0c03112307c0000ffcfff3fe7e7ccccfccff3fcccce1ff8ff19f9f81f98000001c000001b198619b6cfc780000038000003e0c03112307c0000ffcfff3fe7e7ccccfccff3fccccfcff8ff00f8fe1815000001c000000e198619b6cc00c0000038000003e0c03112307c0000ffcfff3fe7e7ccccfccff3fccccfcff8ff00f8fe1815000001c000000e198619b6cc00c0000038000003e0c03112307c0000ffcfff3fe7e7e1c1ce1cc0cc1e0e1ff8ff00f8fe1806000001c000000efe0f0bb6c78780000038000003e0c03112307c0000ffcfff3fe7e7e1c1ce1cc0cc1e0e1ff8ff00f8fe1806000001c000000efe0f0bb6c78780000038000003e0c02007307c0000ffc0003ffaff00fcf5ff00f8fe18fe0000e0f5000570000003e0c02007307c0000ffc0003ffaff00fcf5ff00f8fe18fe0000e0f5000570000003e0c01a03307c0000e9ff03f81ff818fe00003cf6000603c0000003e0c01a03307c0000e9ff03f81ff818fe00003cf6000603c0000003e0c01b04307c0000c0ea000318000018fe000007f6ff00fefe000203e0c01b04307c0000c0ea000318000018fe000007f6ff00fefe000203e0c01d04307c0000c0fe00061f00003001e00cf400031ffffff8ee000203e0c01d04307c0000c0fe00061f00003001e00cf400031ffffff8ee000203e0c01d0e307c0000c03fff001980003003003cf4000318000018ee000203e0c01d0e307c0000c03fff001980003003003cf4000318000018ee000203e0c02112307c0000c0300cc0199b1e3e03e00c0363c7e0f8000318000018ee000203e0c02112307c0000c0300cc0199b1e3e03e00c0363c7e0f8000318000018ee000203e0c02112307c0000c0300fc01f1c333303300c038660c0f8000318000018ee000203e0c02112307c0000c0300fc01f1c333303300c038660c0f8000318000018ee000203e0c02112307c0000c03000c01818333303300c0307e180f8000318000018ee000203e0c02112307c0000c03000c01818333303300c0307e180f8000318000018ee000203e0c02011307c0000c03000c01818333303300c030603f7000318000018ee000203e0c02011307c0000c03000c01818333303300c030603f7000318000018ee000203e0c02112307c0000c03000c018181e3e31e33f3303c7e0f8000318000018ee000203e0c02112307c0000c03000c018181e3e31e33f3303c7e0f8000318000018ee000203e0c01607307c0000c03fffc0ed000318000018ee000203e0c01607307c0000c03fffc0ed000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01d04307c0000c0fe00061f00003001e01ef4000318000018ee000203e0c01d04307c0000c0fe00061f00003001e01ef4000318000018ee000203e0c01d0e307c0000c03fff0019800030030033f4000318000018ee000203e0c01d0e307c0000c03fff0019800030030033f4000318000018ee000203e0c02112307c0000c0300cc0199b1e3e03e00303e1f1e0f8000318000018ee000203e0c02112307c0000c0300cc0199b1e3e03e00303e1f1e0f8000318000018ee000203e0c02011307c0000c0300fc01f1c3333033006033333f7000318000018ee000203e0c02011307c0000c0300fc01f1c3333033006033333f7000318000018ee000203e0c02112307c0000c03000c01818333303300c033331e0f8000318000018ee000203e0c02112307c0000c03000c01818333303300c033331e0f8000318000018ee000203e0c02112307c0000c03000c01818333303301803333030f8000318000018ee000203e0c02112307c0000c03000c01818333303301803333030f8000318000018ee000203e0c02112307c0000c03000c018181e3e31e33f33e1f1e0f8000318000018ee000203e0c02112307c0000c03000c018181e3e31e33f33e1f1e0f8000318000018ee000203e0c01a07307c0000c03fffc0fa000003f5000318000018ee000203e0c01a07307c0000c03fffc0fa000003f5000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01d04307c0000c0fe00061f00003001e01ef4000318000018ee000203e0c01d04307c0000c0fe00061f00003001e01ef4000318000018ee000203e0c01d0e307c0000c03fff0019800030030033f4000318000018ee000203e0c01d0e307c0000c03fff0019800030030033f4000318000018ee000203e0c02912307c0000c0300cc0199b1e3e03e0030363c7e0f8000318000018fe000003f6ff00fcfe000203e0c02912307c0000c0300cc0199b1e3e03e0030363c7e0f8000318000018fe000003f6ff00fcfe000203e0c02912307c0000c0300fc01f1c3333033006038660c0f8000318000018fe00007cf6000603e0000003e0c02912307c0000c0300fc01f1c3333033006038660c0f8000318000018fe00007cf6000603e0000003e0c02912307c0000c03000c01818333303300c0307e180f8000718000018000003c7f6ff06fe3c000003e0c02912307c0000c03000c01818333303300c0307e180f8000718000018000003c7f6ff06fe3c000003e0c02811307c0000c03000c018183333033018030603f70007180000180000073cf6000603ce000003e0c02811307c0000c03000c018183333033018030603f70007180000180000073cf6000603ce000003e0c02c12307c0000c03000c018181e3e31e33f3303c7e0f800071800001800000ee0fd0000f0fa000577000003e0c02c12307c0000c03000c018181e3e31e33f3303c7e0f800071800001800000ee0fd0000f0fa000577000003e0c02207307c0000c03fffc0ed00071800001800001dc0fe00010198fa00053b800003e0c02207307c0000c03fffc0ed00071800001800001dc0fe00010198fa00053b800003e0c02204307c0000c0ea00071800001800001dc0fe00040199f0f1f0fd00053b800003e0c02204307c0000c0ea00071800001800001dc0fe00040199f0f1f0fd00053b800003e0c02204307c0000c0ea00071800001800001dc0fe000001fe990098fd00053b800003e0c02204307c0000c0ea00071800001800001dc0fe000001fe990098fd00053b800003e0c02c04307c0000c0fe00061f00003001e01ef400071800001800001dc0fe0004019999f998fd00053b800003e0c02c04307c0000c0fe00061f00003001e01ef400071800001800001dc0fe0004019999f998fd00053b800003e0c02c0e307c0000c03fff0019800030030033f400071800001800001dc0fe00040199998198fd00053b800003e0c02c0e307c0000c03fff0019800030030033f400071800001800001dc0fe00040199998198fd00053b800003e0c02f12307c0000c0300cc0199b1e3e03e00303e1f1e0f800071800001800001dc0fd0003f1f0f198fd00053b800003e0c02f12307c0000c0300cc0199b1e3e03e00303e1f1e0f800071800001800001dc0fd0003f1f0f198fd00053b800003e0c02c11307c0000c0300fc01f1c333303300e033333f700071800001800000ee0fd00010180fb000577000003e0c02c11307c0000c0300fc01f1c333303300e033333f700071800001800000ee0fd00010180fb000577000003e0c02912307c0000c03000c018183333033003033331e0f80007180000180000073cf6000603ce000003e0c02912307c0000c03000c018183333033003033331e0f80007180000180000073cf6000603ce000003e0c02912307c0000c03000c01818333303303303333030f8000718000018000003c7f6ff06fe3c000003e0c02912307c0000c03000c01818333303303303333030f8000718000018000003c7f6ff06fe3c000003e0c02912307c0000c03000c018181e3e31e31e33e1f1e0f8000318000018fe00007cf6000603e0000003e0c02912307c0000c03000c018181e3e31e31e33e1f1e0f8000318000018fe00007cf6000603e0000003e0c02207307c0000c03fffc0fa000003f5000318000018fe000003f6ff00fcfe000203e0c02207307c0000c03fffc0fa000003f5000318000018fe000003f6ff00fcfe000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01d04307c0000c0fe00061f00003001e01ef4000318000018ee000203e0c01d04307c0000c0fe00061f00003001e01ef4000318000018ee000203e0c01d0e307c0000c03fff0019800030030033f4000318000018ee000203e0c01d0e307c0000c03fff0019800030030033f4000318000018ee000203e0c02912307c0000c0300cc0199b1e3e03e0030363c7e0f8000318000018fe000007f6ff00fefe000203e0c02912307c0000c0300cc0199b1e3e03e0030363c7e0f8000318000018fe000007f6ff00fefe000203e0c02912307c0000c0300fc01f1c333303300e038660c0f8000318000018fe00003cf6000603c0000003e0c02912307c0000c0300fc01f1c333303300e038660c0f8000318000018fe00003cf6000603c0000003e0c02d12307c0000c03000c0181833330330030307e180f8000318000018fe0000e0fe00010f0efa000570000003e0c02d12307c0000c03000c0181833330330030307e180f8000318000018fe0000e0fe00010f0efa000570000003e0c02c11307c0000c03000c018183333033033030603f7000718000018000001c0fe00011986fa000538000003e0c02c11307c0000c03000c018183333033033030603f7000718000018000001c0fe00011986fa000538000003e0c02f12307c0000c03000c018181e3e31e31e3303c7e0f8000718000018000001c0fe00011806fe0ffd000538000003e0c02f12307c0000c03000c018181e3e31e31e3303c7e0f8000718000018000001c0fe00011806fe0ffd000538000003e0c02607307c0000c03fffc0ed000718000018000001c0fe0005180619981980fe000538000003e0c02607307c0000c03fffc0ed000718000018000001c0fe0005180619981980fe000538000003e0c02304307c0000c0ea000718000018000001c0fe00051806198f1f80fe000538000003e0c02304307c0000c0ea000718000018000001c0fe00051806198f1f80fe000538000003e0c02204307c0000c0ea000718000018000001c0fe00041986198198fd000538000003e0c02204307c0000c0ea000718000018000001c0fe00041986198198fd000538000003e0c02804307c0000c0fe00061f00003001e030f4000718000018000001c0fe00fc0ffd000538000003e0c02804307c0000c0fe00061f00003001e030f4000718000018000001c0fe00fc0ffd000538000003e0c0240e307c0000c03fff0019800030030033f4000318000018fe0000e0f5000570000003e0c0240e307c0000c03fff0019800030030033f4000318000018fe0000e0f5000570000003e0c098003600be000000fc01b000be000000fc01ad00be000000fc01ad00012912307c0000c0300cc0199b1e3e03e03303e1f1e0f8000318000018fe00003cf6000603c0000003e0c02912307c0000c0300cc0199b1e3e03e03303e1f1e0f8000318000018fe00003cf6000603c0000003e0c02811307c0000c0300fc01f1c3333033033033333f7000318000018fe000007f6ff00fefe000203e0c02811307c0000c0300fc01f1c3333033033033333f7000318000018fe000007f6ff00fefe000203e0c02112307c0000c03000c01818333303303f033331e0f8000318000018ee000203e0c02112307c0000c03000c01818333303303f033331e0f8000318000018ee000203e0c02112307c0000c03000c01818333303300303333030f8000318000018ee000203e0c02112307c0000c03000c01818333303300303333030f8000318000018ee000203e0c02112307c0000c03000c018181e3e31e30333e1f1e0f8000318000018ee000203e0c02112307c0000c03000c018181e3e31e30333e1f1e0f8000318000018ee000203e0c01a07307c0000c03fffc0fa000003f500031ffffff8ee000203e0c01a07307c0000c03fffc0fa000003f500031ffffff8ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea000318000018ee000203e0c01304307c0000c0ea0003181ff818ee000203e0c01304307c0000c0ea0003181ff818ee000203e0c02204307c0000c0fe00061f00003001e030f400fd18fe000007f6ff00fefe000203e0c02204307c0000c0fe00061f00003001e030f400fd18fe000007f6ff00fefe000203e0c0220e307c0000c03fff0019800030030033f400fd18fe00003cf6000603c0000003e0c0220e307c0000c03fff0019800030030033f400fd18fe00003cf6000603c0000003e0c02d12307c0000c0300cc0199b1e3e03e0330363c7e0f800fd18fe0000e0fe0000f0fd0000e0fe000570000003e0c02d12307c0000c0300cc0199b1e3e03e0330363c7e0f800fd18fe0000e0fe0000f0fd0000e0fe000570000003e0c03012307c0000c0300fc01f1c3333033033038660c0f8000b19f81f98000001c000000198fd000060fe000538000003e0c03012307c0000c0300fc01f1c3333033033038660c0f8000b19f81f98000001c000000198fd000060fe000538000003e0c03112307c0000c03000c01818333303303f0307e180f8000c18600618000001c000000180f9fef00060fe000538000003e0c03112307c0000c03000c01818333303303f0307e180f8000c18600618000001c000000180f9fef00060fe000538000003e0c02e11307c0000c03000c018183333033003030603f700fd1807000001c000000181fe99019860fe000538000003e0c02e11307c0000c03000c018183333033003030603f700fd1807000001c000000181fe99019860fe000538000003e0c03112307c0000c03000c018181e3e31e3033303c7e0f8001018066018000001c000000181999981f860fe000538000003e0c03112307c0000c03000c018181e3e31e3033303c7e0f8001018066018000001c000000181999981f860fe000538000003e0c02507307c0000c03fffc0ed000a18018018000001c0000001fd99018060fe000538000003e0c02507307c0000c03fffc0ed000a18018018000001c0000001fd99018060fe000538000003e0c02204307c0000c0ea000718000018000001c0fe0002f0f998fef0fe000538000003e0c02204307c0000c0ea000718000018000001c0fe0002f0f998fef0fe000538000003e0c01603307c0000e6ff00f8fe0000e0f5000570000003e0c01603307c0000e6ff00f8fe0000e0f5000570000003e0c01101307ce000003cf6000603c0000003e0c01101307ce000003cf6000603c0000003e0c01101307ce0000007f6ff00fefe000203e0c01101307ce0000007f6ff00fefe000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00901307cd0000203e0c00801307fcfff01e0c00801307fcfff01e0c00801307fcfff01e0c00801307fcfff01e0c0060030cd0000c0060030cd0000c0060030cd0000c0060030cd0000c006003fcdff00c006003fcdff00c002cb0002cb00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 6-1:  Open Dialog\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par I'm going to assume you know how to use this dialog to open a file.  If not, you can find all of the information you need in the introductory books that came with your computer.\par Creating this dialog is remarkably easy.  All you have to do is call }{\f6\fs20 SFGetFile2}{\f4  with a few parameters.  Here's a model call to }{\f6\fs20 SFGetFile2}{\f4  with some parameter names that we can use to talk about the various things you have to tell SFO to get a dialog like the one in Figure 6-1:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 SFGetFile2(x, y, promptRefDesc, promptRef, filterProcPtr, typeListPtr,\par }\pard \li180\widctlpar\adjustright {\f6\fs20    replyPtr);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The first two parameters tell SFO where to put the dialog.  The parameters x and y give the position of the top left corner of the dialog.  Unfortunately, since the dialog can change size from one version of the system software to another, you can't really do the sensible thing and center the dialog.\par There's a string, "Open what file?", at the top of Figure 6-1.  You can change this string to whatever prompt you like, and that's what the next two parameter are for.  }{\f6\fs20 promptRefDesc}{\f4  is the sort of parameter you should be getting used to by now; it tells SFO what sort of parameter you are passing in }{\f6\fs20 promptRef}{\f4 .  If }{\f6\fs20 promptRefDesc}{\f4  is 0, }{\f6\fs20 promptRef}{\f4  is a pointer to a p-string.  If it is 1, }{\f6\fs20 promptRef}{\f4  is the handle of a p-string.  Finally, the most appropriate choice for }{\f6\fs20 promptRefDesc}{\f4  is 2, which tells SFO that }{\f6\fs20 promptRef}{\f4  is the resource ID of an }{\f6\fs20 rPString}{\f4  resource.  The reason that's the best choice is because all strings belong in the resource fork, where they can be changed by the user.\par The }{\f6\fs20 filterProcPtr}{\f4  is a pointer to a procedure in your program.  To understand what this procedure is for you have to stop and remember that most programs only accept certain kinds of files.  }{\f6\fs20 SFGetFile2}{\f4  is perfectly capable of weeding out files based on file types and auxiliary file types (you'll see how to do this in a moment), but there are occasionally strange situations where you want to be even more picky.  The filter procedure gives you a way to be as picky as you want, selecting each individual file that will appear in the open dialog.  We won't use filter procedures in this course, so we'll always set the }{\f6\fs20 filterProcPtr}{\f4  parameter to nil.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 auxiliary file type}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The next parameter is a pointer to a list of file types you are willing to accept.  In most cases, your program will only load files with a specific file type.  A program that will load and display pictures, for example, would allow the picture file types, but reject Pascal source code files.  The process of picking out and displaying only the files that you can actually load is done automatically when you give SFO a list of file types.  We'll talk about the file type list in detail in a moment.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 auxiliary file type}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 path names}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 reply record}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Finally, }{\f6\fs20 replyPtr}{\f4  is a reply record you supply.  SFO fills in the reply record with a flag telling you if the user picked a file or canceled the operation, and if a file was selected, the file type, auxiliary file type, file name, and full path name for the file.  That's more than enough information to load the file.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 File Type Lists\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk31}{\*\bkmkstart bk32}{\*\bkmkstart bk33}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The file type list controls the files that are listed in the open dialog.  You can specify files by file type, auxiliary file type, or a combination of both a file type and auxiliary file type.  You can also tell SFO to list files in the dialog, but to make the files dimmed and unselectable.\par A file type record starts with an integer telling how many file type records are in the array of file types.  This is followed by the correct number of file type entries, each with four parameters: a flags word, a file type, and an auxiliary file type.  In ORCA/Pascal, the definitions that are used for a file type record list are:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    typeRec = record\par        flags:     integer;\par        fileType:  integer;\par        auxType:   longint;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    typeList5_0 = record\par        numEntries:       integer;\par        fileAndAuxTypes:  array [1..10] of typeRec;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Three bits are used in the flags word.  If bit 15 is set, SFO matches any file type.  If bit 14 is set, SFO matches any auxiliary file type.  Finally, if bit 13 is set, the files are displayed as dimmed and unselectable.  The rest of the bits are reserved, and must be set to 0.\par Checking the list of file types in Appendix A, you can see that a Pascal source file has a file type of $B0 and an auxiliary file type of $0005.  A file type record to load Pascal source files would be set up like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 with types.fileAndAuxTypes[1] do begin\par    flags := $0000;\par    fileType := $B0;\par    auxType := $0005;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    end;\par }{\f4 \par If you wanted to load any source file, and not just Pascal source files, you would want to load any file with a file type of $B0, no matter what auxiliary file type the file had.  In that case, you would set up the file type entry like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 with types.fileAndAuxTypes[1] do begin\par    flags := $8000;\par    fileType := $B0;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    end;\par }{\f4 \par Bits 15 and 14 can also work together, telling SFO to accept }{\i\f4 any}{\f4  file, no matter what file type or auxiliary file type the file has.  Here's a complete type list record that will let you load any file at all:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 var\par    types: typeList5_0;\par \par ...\par types.numEntries := 1;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 types.fileAndAuxTypes[1].flags := $C000;\par }{\f4 \par In this case we don't have to set the file type or auxiliary file type, since SFO is going to ignore them anyway.\par There's one thing you need to keep in mind when you are creating a file type list.  The list is supposed to be a variable length array, but there isn't really any such thing.  Some sort of fixed array size had to be picked.  In the ORCA/Pascal interface file for SFO, the size of the array of file type entries is 10, so you can't create a file list with more than 10 entries.  If you need more than that, you'll have to create your own private array or override the size of the array by changing the ORCA/Pascal interfaces.  I sort of prefer creating my own array.  One easy way to do that is with a variant record that overlays the ORCA/Pascal definition with your own, like this:\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 type\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    bigTypeList5_0 = record\par       numEntries:       integer;\par       fileAndAuxTypes:  array [1..50] of typeRec;\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20    myTypeList = record\par       case boolean of\par          true:  (types1: typeList5_0);\par          false: (types2: bigTypeList5_0);\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20       end;\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk31}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type}{\rxe bk31}}}{\*\bkmkend bk32}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 auxiliary file type}{\rxe bk32}}}{\*\bkmkend bk33}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type lists}{\rxe bk33}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Reply Record\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk36}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The reply record is where SFO tells you what file you are supposed to load.  Here's the declaration for a reply record:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    replyRecord5_0 = record\par        good:         integer;\par        fileType:     integer;\par        auxFileType:  longint;\par        nameVerb:     integer;\par        nameRef:      longint;\par        pathVerb:     integer;\par        pathRef:      longint;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The first entry tells you if the user actually picked a file, or if they decided to cancel the operation.  If the open has been canceled, }{\f6\fs20 good}{\f4  will be set to 0, and all of the other entries are invalid.  You simply ignore the operation and get back to the event loop.  If }{\f6\fs20 good}{\f4  is not zero, the rest of the fields tell you which file to load.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 auxiliary file type}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 fileType}{\f4  and }{\f6\fs20 auxFileType}{\f4  field are pretty obvious; they tell you the file type and auxiliary file type of the file type to load.  If you only allowed one file type, or if your program doesn't depend on the actual format of the file (as in, for example, a copy program), you can ignore these fields.\par {\*\bkmkstart bk37}SFO can return the file name and path name in a variety of ways; you control the method with }{\f6\fs20 nameVerb}{\f4  and }{\f6\fs20 pathVerb}{\f4 , which you have to set up in the reply record before calling }{\f6\fs20 SFGetFile2}{\f4 .  The most reasonable choice (and the only one we'll talk about here) is 3, which tells SFO to allocate whatever memory is needed and return a handle in }{\f6\fs20 nameRef}{\f4  and }{\f6\fs20 pathRef}{\f4 .  Handles are something we won't talk about in detail for a while yet.  All you need to know for now is how to get at the actual string, and what to do with the handle when you are finished with it.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using the }{\b\f6\fs20 nameRef}{\b\f4  and }{\b\f6\fs20 pathRef}{\b\f4  Handles\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HLock}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HUnlock}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DisposeHandle}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The file name and path name }{\f6\fs20 SFGetFile2}{\f4  returns in }{\f6\fs20 nameRef}{\f4  and }{\f6\fs20 pathRef}{\f4  are handles.  We haven't talked about handles much, but you don't need to know much to use them.  (Lesson 8 deals with handles in detail.)  You can think of a handle as a pointer to a pointer, although there's a bit more to it than that.  First off, the information a handle points to can move, so you need to use the }{\f6\fs20 HLock}{\f4  call to lock the handle before you try to get at the information the handle points to.  Once you are finished looking at the information, you use }{\f6\fs20 HUnlock}{\f4  to unlock the handle again.  Finally, handles are dynamically allocated memory, just like the memory you get using Pascal's }{\f6\fs20 new}{\f4  procedure, and you have to dispose of the memory when you are finished with it.  You dispose of a handle and the memory allocated by the handle using }{\f6\fs20 DisposeHandle}{\f4 .  All three of these calls \endash  }{\f6\fs20 HLock}{\f4 , }{\f6\fs20 HUnlock}{\f4 , and }{\f6\fs20 DisposeHandle}{\f4  \endash  take the handle that they work on as the only parameter.\par The names returned by }{\f6\fs20 SFGetFile2}{\f4  are GS/OS output strings, also called class 1 strings.  While these names may be called strings, they really aren't strings in the sense we use the term in Pascal.  Instead, GS/OS is returning a record consisting of three parts: a record length word, a name length word, and an array of characters.  This array of characters can have just about anything inside, including null characters, so you have to be careful when you access the information.  The biggest caution is to never use Pascal's string handling facilities on the characters in a GS/OS name, even if they have been copied into a Pascal string, since Pascal uses the null character to signal the end of a string, and null characters are legal characters in a GS/OS path name.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    gsosInString = record\par        size:  integer;\par        theString:  packed array [1..254] of char;\par        end;\par    gsosInStringPtr = ^gsosInString;\par \par    gsosOutString = record\par        maxSize:    integer;\par        theString:  gsosInString;\par        end;\par    gsosOutStringPtr = ^gsosOutString;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-1:  GS/OS String Definitions Used in ORCA/Pascal\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The full path name is use when the file is opened and read, and again if the file is saved.  The file name is used as the name of the window (with some spaces added on either side) and as the default name when the file is saved using the Save As... menu command.  Basically, then, you need to save both the file name and the path name in the document record so they can be used later, and you also need to form a window name from the file name.\par There are a few dicey type issues you have to handle as you wind your way from a reply record to a handle to a name for a window, too.  }{\f6\fs20 SFGetFile2}{\f4  can return the file name and path name a lot of ways, but they all use four bytes.  The reply record sets aside those four bytes as a longint.  In your document record, though, you'll be dealing with these values using Memory Manager commands that expect a handle, so your document record variables should define the space for these values as type }{\f6\fs20 handle}{\f4 .  Finally, when you lock the handle and start plucking characters from it, you'll need to use a more specific type.  The handle is a pointer to a pointer to a }{\f6\fs20 gsosOutString}{\f4 , so one way to handle this is to declare a work pointer of type }{\f6\fs20 gsosOutStringPtr}{\f4  and set it up like this:\par \par }{\f6\fs20 gsosNamePtr := pointer(dPtr^.fileName^);}{\f4 \par \par With all of this in mind, you can write a subroutine to implement the Open command, right up to the place where the file is read.  There are a lot of details you have to deal with to develop a good routine, though, especially with the type casting and error handling.  Listing 6-2 shows one way to handle all of these details.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure DoOpen;\par \par \{ Open a file                                                   \}\par \par const\par    posX = 80;                           \{X position of the dialog\}\par    posY = 50;                           \{Y position of the dialog\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    titleID = 102;                       \{prompt string resource ID\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    dPtr: documentPtr;                   \{pointer to the new document\}\par    fileTypes: typeList5_0;              \{list of valid file types\}\par    gsosNameHandle: handle;              \{handle of the file name\}\par    gsosNamePtr: gsosOutStringPtr;       \{pointer to the GS/OS file name\}\par    i: integer;                          \{loop/index variable\}\par    name: pString;                       \{new document name\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    reply: replyRecord5_0;               \{reply record\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{DoOpen\}\par with fileTypes do begin                 \{set up the allowed file types\}\par    numEntries := 2;\par    with fileAndAuxTypes[1] do begin\par       flags := $8000;\par       fileType := $B0;\par       end; \{with\}\par    with fileAndAuxTypes[2] do begin\par       flags := $8000;\par       fileType := $04;\par       end; \{with\}     \par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{with\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 reply.nameVerb := 3;                    \{get the file to open\}\par reply.pathVerb := 3;\par }\pard \li180\widctlpar\adjustright {\f6\fs20 SFGetFile2(posX, posY, 2, titleID, nil, fileTypes, reply);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 if ToolError <> 0 then\par    FlagError(3, ToolError)              \{handle an error\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 else if reply.good <> 0 then begin\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20                                         \{form the file name\}\par    gsosNameHandle := pointer(reply.nameRef);\par    HLock(gsosNameHandle);\par    gsosNamePtr := pointer(gsosNameHandle^);\par    name := '  ';\par    for i := 1 to gsosNamePtr^.theString.size do\par       name := concat(name, gsosNamePtr^.theString.theString[i]);\par    name := concat(name, '  ');\par    HUnlock(gsosNameHandle);\par }\pard \li180\widctlpar\adjustright {\f6\fs20    dPtr := NewDocument(name);           \{get a document record\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    if dPtr = nil then begin         \{in case of error, dispose of the names\}\par       DisposeHandle(handle(reply.nameRef));\par       DisposeHandle(handle(reply.pathRef));\par       end \{if\}\par    else begin                           \{otherwise save the names\}\par       dPtr^.fileName := handle(reply.nameRef);\par       dPtr^.pathName := handle(reply.pathRef);\par \par       if LoadDocument(dPtr) then        \{read the file\}\par          dPtr^.onDisk := true           \{file is on disk\}\par       else                              \{handle a read error\}\par          CloseDocument(dPtr);\par       end; \{else\}\par    end; \{else if\}\par end; \{DoOpen\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-2:  A Subroutine to Implement the Open Command\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par While this subroutine doesn't actually load a file from disk, it does call }{\f6\fs20 LoadDocument}{\f4 .  That's where you would put the code to load the file itself.  }{\f6\fs20 LoadDocument}{\f4  is a function, returning true if the file was loaded successfully, and false if the file couldn't be loaded for some reason.  We'll assume }{\f6\fs20 LoadDocument}{\f4  flags it's own errors and cleans up after itself, but as you see, getting rid of the document is still up to us.\par This subroutine can be moved from program to program pretty easily.  After all, the only thing that's likely to change is the list of file types that the program can read.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Problem 6-1:  Implement the Open command, adding it to Frame.  (Start with the solution to Problem 5-9.)  Make sure you do all of the following:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 a.\tab Add two fields to your document record to save }{\f6\fs20 nameRef}{\f4  and }{\f6\fs20 pathRef}{\f4 .  In Listing 6-2 these fields are called }{\f6\fs20 fileName}{\f4  and }{\f6\fs20 pathName}{\f4 .  They should have a type of }{\f6\fs20 handle}{\f4 .\par b.\tab When the New command is used to open a new document, be sure and set the file name and path name handles to nil.\par c.\tab When a document is closed, be sure you check to see if the file name and path name fields have been filled in with handles.  If so, dispose of the handles.\par d.\tab Add the subroutine from Listing 6-2 to your program, calling it when the user picks Open from the File menu.\par e.\tab Create a dummy }{\f6\fs20 LoadDocument}{\f4  subroutine.  This subroutine needs to return true, but for now, that's all it needs to do.  When you're testing your program, try returning false once to test the error handler.\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk34}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Open command}{\rxe bk34}}}{\*\bkmkend bk35}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 open dialog}{\rxe bk35}}}{\*\bkmkend bk36}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 reply record}{\rxe bk36}}}{\v\f4 \par {\*\bkmkend bk37}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 path names}{\rxe bk37}}}{\*\bkmkend bk38}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SFGetFile2}{\rxe bk38}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Role of Save and Save As...}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Role of Save and Save As...\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk39}\par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Save command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Save As command}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are two save commands in a standard File menu, Save and Save As...  The Save command is the "quickie" save, replacing an existing copy of a file with an updated version of the same file.  When the Save command is used, the program should use the full path name returned from the }{\f6\fs20 SFGetFile2}{\f4  call.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SFPutFile2}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Save As command is used when you want to save a document to a new file name.  In that case, you use the }{\f6\fs20 SFPutFile2}{\f4  call, which works a lot like the }{\f6\fs20 SFGetFile2}{\f4  call.  We'll cover the call itself in the next section.  }{\f6\fs20 SFPutFile2}{\f4  draws the standard "save dialog," which lets you move around on a disk, or even between disks, create a new folder, and ultimately enter a file name to use when the file is saved.\par This covers the case of a file loaded from disk fairly well, but there is one other possibility.  When you use the Save command to save a document that was created with New, and has never been saved before, you should call the same subroutine you call when the Save As... command is used, since you need to get a file name.  Way back when we first created a document record, we added a flag, }{\f6\fs20 onDisk}{\f4 , to tell whether a document had been created with the New or Open command, so the check to see if you should use Save or Save As... is fast and easy.  Of course, you do need to remember to set the }{\f6\fs20 onDisk}{\f4  flag to true after saving a new document for the first time.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Save As... Dialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Save As... Dialog\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk40}{\*\bkmkstart bk41}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The save dialog itself is created with a call to }{\f6\fs20 SFPutFile2}{\f4 .  Here's a prototype call, again with names of the parameters instead of values to make it easier to talk about the call.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1045{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich264\picwgoal6960\pichgoal5280\macpict\bliptag1379873753\blipupi72{\*\blipuid 523f33d930829dfac94898c196c28b6e}1b82000000000108015c1101a00082a0008e01000a0000000002d0024098002c0000000000eb01600000000000eb015c0000000000eb015c000102d50002d50006003fd7ff00c006003fd7ff00c0060030d70000c0060030d70000c0060030d70000c0060030d70000c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00e06307c000ffffff0df000203e0c00e06307c000ffffff0df000203e0c01e0a307c000c00003c00fc0018fb0008f0033e00007c3c3c60f2000203e0c01e0a307c000c00003c00fc0018fb0008f0033e00007c3c3c60f2000203e0c01f0a307c000cffff3c0303fc18fc000501800c330000fe660018f2000203e0c01f0a307c000cffff3c0303fc18fc000501800c330000fe660018f2000203e0c0200a307c000c3ffc3c03000318fd0f0a1f01f01833363c6666600cf2000203e0c0200a307c000c3ffc3c03000318fd0f0a1f01f01833363c6666600cf2000203e0c02114307c000c0ff03cffffc31819981819998198183e38fe66013c0cf2000203e0c02114307c000c0ff03cffffc31819981819998198183e38fe66013c0cf2000203e0c02114307c000c03c03c300033181f8f0f19998198183030fe6601060cf2000203e0c02114307c000c03c03c300033181f8f0f19998198183030fe6601060cf2000203e0c02014307c000c00003c0c000f1818018199998198183030fd66000cf2000203e0c02014307c000c00003c0c000f1818018199998198183030fd66000cf2000203e0c0210b307c000ffffffc03ffff1f8ffe0f0a1998f00c30303c7c3c3c18f2000203e0c0210b307c000ffffffc03ffff1f8ffe0f0a1998f00c30303c7c3c3c18f2000203e0c01606307c0003fffffcf6000003fb000060f2000203e0c01606307c0003fffffcf6000003fb000060f2000203e0c00901307cda000203e0c00901307cda000203e0c01a08307c003c3c187c01c0fd0006701e3f1e1e3180ec000203e0c01a08307c003c3c187c01c0fd0006701e3f1e1e3180ec000203e0c01707307c006660786003fc0002c03303fe33eb000203e0c01707307c006660786003fc0002c03303fe33eb000203e0c01e12307c00067c187c07cd8f0f00f1f03306033336f800f6ff04fc0003e0c01e12307c00067c187c07cd8f0f00f1f03306033336f800f6ff04fc0003e0c02112307c001c661806030e19998198c0330c0e1e3cf900010780f70004078003e0c02112307c001c661806030e19998198c0330c0e1e3cf900010780f70004078003e0c02412307c0006661806030c1f9f8198c01f0c033336f900051c000018c007fa0003e003e0c02412307c0006661806030c1f9f8198c01f0c033336f900051c000018c007fa0003e003e0c0230f307c0066661866030c18180198c00318fe33f9000538000018c003fa00037003e0c0230f307c0066661866030c18180198c00318fe33f9000538000018c003fa00037003e0c02913307c003c3c7e3c030c0f0f00f0c01e181e1e3198fa001038000018c7830cdfc3c3c000007003e0c02913307c003c3c7e3c030c0f0f00f0c01e181e1e3198fa001038000018c7830cdfc3c3c000007003e0c01701307ce800093800000d8cc30cdb6666fe00037003e0c01701307ce800093800000d8cc30cdb6666fe00037003e0c01701307ce800103800000d8cc30cdb67e3c000007003e0c01701307ce800103800000d8cc30cdb67e3c000007003e0c01701307ce80010380000070cc30cdb66006000007003e0c01701307ce80010380000070cc30cdb66006000007003e0c01701307ce8001038000007078787db63c3c000007003e0c01701307ce8001038000007078787db63c3c000007003e0c00e01307ce800001cf50003e003e0c00e01307ce800001cf50003e003e0c01202307c00eaff02000780f70004078003e0c01202307c00eaff02000780f70004078003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01c03307c00c0fe000615000010014004f9000303003003f2000203e0c01c03307c00c0fe000615000010014004f9000303003003f2000203e0c01c0d307c00c02aaa0008800020020028f900030300cc03f2000203e0c01c0d307c00c02aaa0008800020020028f900030300cc03f2000203e0c02211307c00c01004401111141401400401415140fd00fd03010000f6ff04fc0003e0c02211307c00c01004401111141401400401415140fd00fd03010000f6ff04fc0003e0c02410307c00c0200a800a082222022008022222fc0006030c00c3000680f70004038003e0c02410307c00c0200a800a082222022008022222fc0006030c00c3000680f70004038003e0c02c11307c00c01000401010111101100401111140fd000e033f03f3001c000100000150014010fe0003e003e0c02c11307c00c01000401010111101100401111140fd000e033f03f3001c000100000150014010fe0003e003e0c02a11307c00c02000800808222202200802222020fd00fd030300380022fe000380008020fe00037003e0c02a11307c00c02000800808222202200802222020fd00fd030300380022fe000380008020fe00037003e0c02a11307c00c01000401010141411411511415140fd00fd031100300011144101014041514140007003e0c02a11307c00c01000401010141411411511415140fd00fd031100300011144101014041514140007003e0c02306307c00c02aaa80fa000002fa00fd03110038002a222880a22082222280003003e0c02306307c00c02aaa80fa000002fa00fd03110038002a222880a22082222280003003e0c01e03307c00c0ef00150303ff0300300015154501011041115100007003e0c01e03307c00c0ef00150303ff0300300015154501011041115100007003e0c01e03307c00c0ef00150300000300380022202200822082220200003003e0c01e03307c00c0ef00150300000300380022202200822082220200003003e0c02803307c00c0fe000615000010014004f9000003feff1100380011141101014141514100007003e0c02803307c00c0fe000615000010014004f9000003feff1100380011141101014141514100007003e0c01f0d307c00c02aaa0008800020020028f9000003feff01001cf50003e003e0c01f0d307c00c02aaa0008800020020028f9000003feff01001cf50003e003e0c02411307c00c01004401111141401400401414540fd000503c0000f0007f60004058003e0c02411307c00c01004401111141401400401414540fd000503c0000f0007f60004058003e0c02411307c00c0200a800a08222202200802822080fd000503c0000f0000f6ff04fc0003e0c02411307c00c0200a800a08222202200802822080fd000503c0000f0000f6ff04fc0003e0c01f10307c00c010004010101111011004010541fc000303c0000ff2000203e0c01f10307c00c010004010101111011004010541fc000303c0000ff2000203e0c01e0d307c00c020008008082222022008fe02fc000303c0000ff2000203e0c01e0d307c00c020008008082222022008fe02fc000303c0000ff2000203e0c02011307c00c01000401010141411411511014540fd000303c0000ff2000203e0c02011307c00c01000401010141411411511014540fd000303c0000ff2000203e0c01506307c00c02aaa80f2000303c0000ff2000203e0c01506307c00c02aaa80f2000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01c03307c00c0fe000615000010014014f9000303c0000ff2000203e0c01c03307c00c0fe000615000010014014f9000303c0000ff2000203e0c01c0d307c00c02aaa0008800020020022f9000303c0000ff2000203e0c01c0d307c00c02aaa0008800020020022f9000303c0000ff2000203e0c02411307c00c01004401111141401400101415140fd000503c0000f0000f6ff04fc0003e0c02411307c00c01004401111141401400101415140fd000503c0000f0000f6ff04fc0003e0c02410307c00c0200a800a082222022002022222fc000603c0000f000680f70004038003e0c02410307c00c0200a800a082222022002022222fc000603c0000f000680f70004038003e0c02711307c00c01000401010111101100401111140fd000503c0000f001cfd000050fa0003e003e0c02711307c00c01000401010111101100401111140fd000503c0000f001cfd000050fa0003e003e0c02711307c00c02000800808222202200802222020fd000503c0000f0038fd000088fa00037003e0c02711307c00c02000800808222202200802222020fd000503c0000f0038fd000088fa00037003e0c02911307c00c01000401010141411411511415140fd000503c0000f0030fd000044fe50fd00037003e0c02911307c00c01000401010141411411511415140fd000503c0000f0030fd000044fe50fd00037003e0c02006307c00c02aaa80fa000002fa000503c0000f0038fd00fd88fd00033003e0c02006307c00c02aaa80fa000002fa000503c0000f0038fd00fd88fd00033003e0c01c03307c00c0ef000503c0000f0030fd000344445444fd00037003e0c01c03307c00c0ef000503c0000f0030fd000344445444fd00037003e0c01c03307c00c0ef000503c0000f0038fd000388888088fd00033003e0c01c03307c00c0ef000503c0000f0038fd000388888088fd00033003e0c02503307c00c0fe000615000010014014f9000503c0000f0038fd00fe500044fd00037003e0c02503307c00c0fe000615000010014014f9000503c0000f0038fd00fe500044fd00037003e0c0230d307c00c02aaa0008800020020022f9000503c0000f001cfc000080fb0003e003e0c0230d307c00c02aaa0008800020020022f9000503c0000f001cfc000080fb0003e003e0c02411307c00c01004401111141401400101414540fd000503c0000f0007f60004058003e0c02411307c00c01004401111141401400101414540fd000503c0000f0007f60004058003e0c02411307c00c0200a800a08222202200202822080fd000503c0000f0000f6ff04fc0003e0c02411307c00c0200a800a08222202200202822080fd000503c0000f0000f6ff04fc0003e0c01e10307c00c010004010101111011004010541fc000003fefff2000203e0c01e10307c00c010004010101111011004010541fc000003fefff2000203e0c01e0d307c00c020008008082222022008fe02fc000303555557f2000203e0c01e0d307c00c020008008082222022008fe02fc000303555557f2000203e0c02011307c00c01000401010141411411511014540fd000303555557f2000203e0c02011307c00c01000401010141411411511014540fd000303555557f2000203e0c01906307c00c02aaa80f20005035555570000f6ff04fc0003e0c01906307c00c02aaa80f20005035555570000f6ff04fc0003e0c01703307c00c0ef000603555557000780f70004078003e0c01703307c00c0ef000603555557000780f70004078003e0c01a03307c00c0ef000503555557001cfe00010787fa0003e003e0c01a03307c00c0ef000503555557001cfe00010787fa0003e003e0c02403307c00c0fe000615000010014014f90005035555570038fe00010cc3fa00037003e0c02403307c00c0fe000615000010014014f90005035555570038fe00010cc3fa00037003e0c0280d307c00c02aaa0008800020020022f90005035555570038fe00050c0307878780fe00037003e0c0280d307c00c02aaa0008800020020022f90005035555570038fe00050c0307878780fe00037003e0c02c11307c00c01004401111141401400101415140fd0005035555570038fe00050c030ccc0cc0fe00037003e0c02c11307c00c01004401111141401400101415140fd0005035555570038fe00050c030ccc0cc0fe00037003e0c02b10307c00c0200a800a08222202200a022222fc0005035555570038fe00050c030cc78fc0fe00037003e0c02b10307c00c0200a800a08222202200a022222fc0005035555570038fe00050c030cc78fc0fe00037003e0c02b11307c00c01000401010111101100101111140fd0005035555570038fe00040cc30cc0ccfd00037003e0c02b11307c00c01000401010111101100101111140fd0005035555570038fe00040cc30cc0ccfd00037003e0c02b11307c00c02000800808222202202202222020fd0005035555570038fe000007fd870080fe00037003e0c02b11307c00c02000800808222202202202222020fd0005035555570038fe000007fd870080fe00037003e0c02311307c00c01000401010141411411411415140fd000503555557001cf50003e003e0c02311307c00c01000401010141411411411415140fd000503555557001cf50003e003e0c01e06307c00c02aaa80fa000002fa000003feff02000780f70004078003e0c01e06307c00c02aaa80fa000002fa000003feff02000780f70004078003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01203307c00c0ef00030303ff03f2000203e0c01203307c00c0ef00030303ff03f2000203e0c01903307c00c0fe000615000010014014f900fd03f2000203e0c01903307c00c0fe000615000010014014f900fd03f2000203e0c0190d307c00c02aaa0008800020020022f900fd03f2000203e0c0190d307c00c02aaa0008800020020022f900fd03f2000203e0c01d11307c00c01004401111141401400101414540fd00fd03f2000203e0c01d11307c00c01004401111141401400101414540fd00fd03f2000203e0c02011307c00c0200a800a08222202200a02822080fd0003033f03f3f2000203e0c02011307c00c0200a800a08222202200a02822080fd0003033f03f3f2000203e0c01f10307c00c010004010101111011001010541fc0003030c00c3f2000203e0c01f10307c00c010004010101111011001010541fc0003030c00c3f2000203e0c01b0d307c00c020008008082222022022fe02fc00fd03f2000203e0c01b0d307c00c020008008082222022022fe02fc00fd03f2000203e0c02011307c00c01000401010141411411411014540fd00030300cc03f2000203e0c02011307c00c01000401010141411411411014540fd00030300cc03f2000203e0c01506307c00c02aaa80f2000303003003f2000203e0c01506307c00c02aaa80f2000303003003f2000203e0c01703307c00c0ef00060300000300007ff7ff04f80003e0c01703307c00c0ef00060300000300007ff7ff04f80003e0c01202307c00eaff02000f80f7000407c003e0c01202307c00eaff02000f80f7000407c003e0c00f01307ce8000078f6ff04fc7803e0c00f01307ce8000078f6ff04fc7803e0c01001307ce80001e680f70004039c03e0c01001307ce80001e680f70004039c03e0c01a03307c003cfd0001e30ef1000101dcfd000050fa0003ee03e0c01a03307c003cfd0001e30ef1000101dcfd000050fa0003ee03e0c01b03307c0066fe0002018006f1000103b8fd000088fa00037703e0c01b03307c0066fe0002018006f1000103b8fd000088fa00037703e0c0230d307c00603e631e03e7060f00f8f0f5000103b0fe00040100510450fd00037703e0c0230d307c00603e631e03e7060f00f8f0f5000103b0fe00040100510450fd00037703e0c0210d307c003c66633301830619819980f5000103b8fd0000a0fe88fd00033703e0c0210d307c003c66633301830619819980f5000103b8fd0000a0fe88fd00033703e0c0220d307c000666363f0183061f8198f0f5000103b0fd000311105054fd00037703e0c0220d307c000666363f0183061f8198f0f5000103b0fd000311105054fd00037703e0c0210d307c006666363001830618019818f5000103b8fd00fe880080fd00033703e0c0210d307c006666363001830618019818f5000103b8fd00fe880080fd00033703e0c0210f307c003c3e1c1e01878f0f00f8f19980f7000103b8fd00fd50fd00037703e0c0210f307c003c3e1c1e01878f0f00f8f19980f7000103b8fd00fd50fd00037703e0c00f01307ce9000101dcf50003ee03e0c00f01307ce9000101dcf50003ee03e0c00f01307ce80000e7f60004059c03e0c00f01307ce80000e7f60004059c03e0c00f01307ce8000078f6ff04fc7803e0c00f01307ce8000078f6ff04fc7803e0c01001307ce800010f80f7000407c003e0c01001307ce800010f80f7000407c003e0c01202307c00eaff0200007ff7ff04f80003e0c01202307c00eaff0200007ff7ff04f80003e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c01303307c00c2ec0002030000f6ff04fc0003e0c01303307c00c2ec0002030000f6ff04fc0003e0c01403307c00c2ec000303000780f70004078003e0c01403307c00c2ec000303000780f70004078003e0c01a03307c00c2ec000203001cfe000078fd000070fe0003e003e0c01a03307c00c2ec000203001cfe000078fd000070fe0003e003e0c01a03307c00c2ec0002030038fe0000ccfd000030fe00037003e0c01a03307c00c2ec0002030038fe0000ccfd000030fe00037003e0c01b03307c00c2ec0002030038fe0005c07cf8787830fe00037003e0c01b03307c00c2ec0002030038fe0005c07cf8787830fe00037003e0c01a03307c00c2ec0002030038fe0000c0fdcc0030fe00037003e0c01a03307c00c2ec0002030038fe0000c0fdcc0030fe00037003e0c01b03307c00c2ec0002030038fe0005c0ccccc0fc30fe00037003e0c01b03307c00c2ec0002030038fe0005c0ccccc0fc30fe00037003e0c01903307c00c2ec0002030038fe00fdcc01c030fe00037003e0c098002c00eb00000108016000eb00000108015c00eb00000108015c00011903307c00c2ec0002030038fe00fdcc01c030fe00037003e0c01a03307c00c2ec0002030038fe0002787cccfe78fe00037003e0c01a03307c00c2ec0002030038fe0002787cccfe78fe00037003e0c01203307c00c0ec000203001cf50003e003e0c01203307c00c0ec000203001cf50003e003e0c01403307c00c0ec000303000780f70004078003e0c01403307c00c0ec000303000780f70004078003e0c01303307c00c0ec0002030000f6ff04fc0003e0c01303307c00c0ec0002030000f6ff04fc0003e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00c02307c00eafff2000203e0c00c02307c00eafff2000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c0060030d70000c0060030d70000c0060030d70000c0060030d70000c006003fd7ff00c006003fd7ff00c002d50002d500a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 6-2:  Sample Save Dialog\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 SFPutFile2(x, y, promptRefDesc, promptRef, origNameRefDesc, origNameRef,\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    replyPtr);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par As with the }{\f6\fs20 SFGetFile2}{\f4  call, }{\f6\fs20 x}{\f4  and }{\f6\fs20 y}{\f4  give the position of the dialog, and }{\f6\fs20 promptRefDesc}{\f4  and }{\f6\fs20 promptRef}{\f4  give the prompt string that appears at the top of the dialog.\par When the save dialog is drawn, the line edit box at the bottom where the file name is entered can have a default name.  When a document exists on disk, this default name is the file name returned by the }{\f6\fs20 SFGetFile2}{\f4  call.  If the file does not exist on disk, you can pass a string with no characters.  The default name is passed in the }{\f6\fs20 origNameRef}{\f4  field, with }{\f6\fs20 origNameRefDesc}{\f4  telling }{\f6\fs20 SFPutFile2}{\f4  what sort of parameter is being passed.  We'll use a value of 0 for }{\f6\fs20 origNameRefDesc}{\f4 , telling }{\f6\fs20 SFPutFile2}{\f4  that we are passing a pointer for the default name.\par Of course, that still leaves the issue of getting a pointer to a file name to pass.  SFPutFile2 is expecting a GS/OS input file name.  A GS/OS input file name is a length word followed by characters \endash  sort of like an extra-long p-string.  }{\f6\fs20 SFGetFile2}{\f4  gave us a GS/OS output file name, though, which has an extra integer at the start of the record.  We can pass a pointer to this name when we call }{\f6\fs20 SFPutFile2}{\f4 , but we need to make sure the pointer points two bytes past the start of the value returned by }{\f6\fs20 SFGetFile2}{\f4 .  You'll see one way to handle this in the sample code in Listing 6-3.\par If the file was never saved to disk, we have a different problem.  In that case there's no file name to pass, and we have to create one on the fly.  You can use some sort of default name if you like, but a null string is appropriate to \endash  that gives an immediate visual reminder that there literally is no file name for the file, yet.  Creating a null file name is pretty easy, too; just pass a pointer to an integer set to 0.\par The last parameter is the reply pointer.  It is used exactly the same way as the reply pointer in }{\f6\fs20 SFGetFile2}{\f4 , but the file type and auxiliary file type fields are not filled in.\par Once you get a file name, there are two other things you need to do.  The first is to update the name of the window, which should change to reflect the new file name, and the second is to actually save the file.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetWTitle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Creating a new name for the window from the }{\f6\fs20 SFPutFile2}{\f4  reply record is no different than creating the window name from the }{\f6\fs20 SFGetFile2}{\f4  reply record.  The difference is that this time the window already exists, so you need to let the Window Manager know that the name of the window has changed.  You can do that with the }{\f6\fs20 SetWTitle}{\f4  call:\par \par }{\f6\fs20 SetWTitle(name, wPtr);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The first parameter is the new name for the window; like the original name, it's a p-string.  The second parameter is a pointer to the window you're changing.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Listing 6-3 shows two subroutines, }{\f6\fs20 DoSave}{\f4  and }{\f6\fs20 DoSaveAs}{\f4 , that can be used to implement all of the ideas we've covered.  Both call }{\f6\fs20 SaveDocument}{\f4  to actually write the file to disk, and assume that }{\f6\fs20 SaveDocument}{\f4  will handle any errors in it's own.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure DoSaveAs;\par \par \{ Save a document to a new name                                 \}\par \par const\par    posX = 80;                           \{X position of the dialog\}\par }\pard \li180\keepn\widctlpar\tx9900\adjustright {\f6\fs20    posY = 50;                           \{Y position of the dialog\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    titleID = 103;                       \{prompt string resource ID\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    dPtr: documentPtr;                   \{document to save\}\par    dummyName: integer;                  \{used for a null file name prompt\}\par    gsosNameHandle: handle;              \{handle of the file name\}\par    gsosNamePtr: gsosOutStringPtr;       \{pointer to the GS/OS file name\}\par    i: integer;                          \{loop/index variable\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    reply: replyRecord5_0;               \{reply record\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{DoSaveAs\}\par dPtr := FindDocument(FrontWindow);\par if dPtr <> nil then begin\par    reply.nameVerb := 3;                 \{get the new file name\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    reply.pathVerb := 3;\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    if dPtr^.fileName = nil then begin\par       dummyName := 0;\par       SFPutFile2(posX, posY, 2, titleID, 0, @dummyName, reply);\par       end \{if\}\par    else\par       SFPutFile2(posX, posY, 2, titleID, 0,\par }\pard \li180\widctlpar\adjustright {\f6\fs20          pointer(ord4(dPtr^.fileName^)+2), reply);\par    if ToolError <> 0 then\par       FlagError(3, ToolError)           \{handle an error\}\par    else if reply.good <> 0 then begin\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20                                         \{form the new window name\}\par       gsosNameHandle := pointer(reply.nameRef);\par       HLock(gsosNameHandle);\par       gsosNamePtr := pointer(gsosNameHandle^);\par       dPtr^.wName := '  ';\par       for i := 1 to gsosNamePtr^.theString.size do\par          dPtr^.wName :=\par             concat(dPtr^.wName, gsosNamePtr^.theString.theString[i]);\par       dPtr^.wName := concat(dPtr^.wName, '  ');\par       HUnlock(gsosNameHandle);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       SetWTitle(dPtr^.wName, dPtr^.wPtr);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20                                         \{save the names\}\par       dPtr^.fileName := handle(reply.nameRef);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       dPtr^.pathName := handle(reply.pathRef);\par       dPtr^.onDisk := true;             \{file is on disk\}\par       SaveDocument(dPtr);               \{save the file\}\par       end; \{else if\}\par    end; \{if\}\par end; \{DoSaveAs\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure DoSave;\par \par \{ Save a document to the existing disk file                     \}\par \par var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    dPtr: documentPtr;                   \{document to save\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{DoSave\}\par dPtr := FindDocument(FrontWindow);\par if dPtr <> nil then\par    if dPtr^.onDisk then\par       SaveDocument(dPtr)\par    else\par       DoSaveAs;\par end; \{DoSave\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-3:  Subroutines to Implement the Save and Save As Commands\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 A Comment About Ellipsis}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 A Comment About Ellipsis\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ellipsis}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 An ellipsis is the series of three periods you see after some of the menu commands in desktop programs.  They actually have a meaning.  Any time a menu command brings up a modal dialog, forcing the user to stop and do something, the name of the menu command should be followed by three periods.\par Up until now, the only menu command we've used that brought up a dialog is the about command.  We've just changed the Open command so it brings up a dialog, though, and we're adding a new command (Save As) that also brings up a dialog.  Be sure you change the names of your menus to take this into account.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Problem 6-2:  Implement the Save As... command, adding it to Frame.  Add a Save command subroutine, too, calling it when a new document is saved.  Here's what your File menu should look like (and what the key equivalents should be!):\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1046{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw101\pich178\picwgoal2020\pichgoal3560\macpict\bliptag-146521088\blipupi72{\*\blipuid f74444009f09eaa795728c99f046341f}088d0000000000b200651101a00082a0008e01000a0000000002d0024098000e0000000000b200680000000000b200650000000000b20065000102f30002f30008003ffdff00fef90008003ffdff00fef90008003ffdff00fef90008003ffdff00fef90008003ffdff00fef90008003ffdff00fef90009053fe0e78ffffef90009053fe0e78ffffef90009053fe7ffcffffef90009053fe7ffcffffef90009053fe7c7cf87fef90009053fe7c7cf87fef90009053fe1e7cf33fef90009053fe1e7cf33fef90009053fe7e7cf03fef90009053fe7e7cf03fef90009053fe7e7cf3ffef90009053fe7e7cf3ffef90009053fe7c38787fef90009053fe7c38787fef90008003ffdff00fef90008003ffdff00fef90008003ffdff00fef90008003ffdff00fef90008003ff7ff00feff0008003ff7ff00feff00080030f7000006ff00080030f7000006ff00080030f7000006ff00080030f7000006ff000c02300023fb00020308c6ff000c02300023fb00020308c6ff000c02300033fb0004020cc7e0000c02300033fb0004020cc7e0000f0530003b1e6180fe00040d8ec7e0000f0530003b1e6180fe00040d8ec7e0000f0530003f336d80fe000410cfc7e0000f0530003f336d80fe000410cfc7e0000f053000373f6d80fe0004108dc7e0000f053000373f6d80fe0004108dc7e0000e043000333033fd000412ccc7e0000e043000333033fd000412ccc7e0000e043000311e33fd00040d8c47e0000e043000311e33fd00040d8c47e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e0000c0230001efb0004030787e0000c0230001efb0004030787e0000c02300033fb0004020cc7e0000c02300033fb0004020cc7e0000f053000333e1e3efe00040d8cc7e0000f053000333e1e3efe00040d8cc7e0000d013000fd33fe000410ccc7e0000d013000fd33fe000410ccc7e0000f05300033333f33fe0004108cc7e0000f05300033333f33fe0004108cc7e0000f05300033333033fe000412ccc7e0000f05300033333033fe000412ccc7e0000f0d30001e3e1e333330000d8787e0000f0d30001e3e1e333330000d8787e0000b0330000030fa000207e0000b0330000030fa000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e0000d0330001e1cfc0004031867e0000d0330001e1cfc0004031867e0000d033000330cfc0004021867e0000d033000330cfc0004021867e0000f033000300cfe1e0600000d9b67e0000f033000300cfe1e0600000d9b67e0000f0d3000300c333033000010db67e0000f0d3000300c333033000010db67e0000f0d3000300c331e3f0000109b67e0000f0d3000300c331e3f0000109b67e0000f0d3000330c330330000012ccc7e0000f0d3000330c330330000012ccc7e0000d013000fc1e0600000d8cc7e0000d013000fc1e0600000d8cc7e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e0000c0230001efb0004030787e0000c0230001efb0004030787e0000c02300033fb0004020cc7e0000c02300033fb0004020cc7e0000f053000301f318ffe00040d8c07e0000f053000301f318ffe00040d8c07e0000f0d30001e33319980000010c787e0000f0d30001e33319980000010c787e0000f0d300003331b1f8000001080c7e0000f0d300003331b1f8000001080c7e0000f05300033331b18fe000412ccc7e0000f05300033331b18fe000412ccc7e0000f0530001e1f0e0ffe00040d8787e0000f0530001e1f0e0ffe00040d8787e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e0000e0230001efd0000f0fe000207e0000e0230001efd0000f0fe000207e0000f02300033fe00010198fe000207e0000f02300033fe00010198fe000207e0000f0d3000301f318f0198f0000007e0000f0d3000301f318f0198f0000007e0000f0d30001e333199819980000007e0000f0d30001e333199819980000007e0000f0d300003331b1f81f8f0000007e0000f0d300003331b1f81f8f0000007e0000f0d300033331b18019818000007e0000f0d300033331b18019818000007e0000f0d30001e1f0e0f0198f1998007e0000f0d30001e1f0e0f0198f1998007e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e00007003ff6ff01e00007003ff6ff01e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e0000e0430001e0018fd0004030787e0000e0430001e0018fd0004030787e0000f05300033000060fe0004020cc7e0000f05300033000060fe0004020cc7e0000f053000333338f8fe00040d8cc7e0000f053000333338f8fe00040d8cc7e0000f05300033331860fe000410ccc7e0000f05300033331860fe000410ccc7e0000f05300033331860fe0004108cc7e0000f05300033331860fe0004108cc7e0000f0530003333186cfe000412ccc7e0000f0530003333186cfe000412ccc7e0000f0530001e1f3c38fe00040d8787e0000f0530001e1f3c38fe00040d8787e0000a02300003f90002c7e0000a02300003f90002c7e000080030f7000207e000080030f7000207e000080030f7000207e000080030f7000207e00007003ff6ff01e00007003ff6ff01e000070001f6ff01e000070001f6ff01e00002f30002f300a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 6-3:  File Menu with Save and Save As\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Make sure you do all of the following:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 a.\tab Add the }{\f6\fs20 DoSave}{\f4  and }{\f6\fs20 DoSaveAs}{\f4  procedures from Listing 6-3, calling them when the user uses the Save or Save As... command.\par b.\tab Create a }{\f6\fs20 SaveDocument}{\f4  procedure.  This doesn't need to do anything, yet, it just needs to exist since }{\f6\fs20 DoSave}{\f4  and }{\f6\fs20 DoSaveAs}{\f4  call it.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 6-3:  You created a program to draw dots on the screen in Problem 5-8.  Combine this solution with the results from Problems 6-1 and 6-2 to create a program that can save and load lists of the dots.\par You can use Pascal's built in file handling procedures, }{\f6\fs20 read}{\f4 , }{\f6\fs20 write}{\f4 , }{\f6\fs20 reset}{\f4  and }{\f6\fs20 rewrite}{\f4 , to handle the file input and output.  Assuming you create a file of points, ORCA/Pascal will create a binary file, which has a file type of $06 and an auxiliary file type of $0000.  You will need those values for your }{\f6\fs20 SFGetFile2}{\f4  call.\par Hint: Just to make things easy, I made the file a }{\f6\fs20 file of integer}{\f4 , and saved the number of points in the file as the first integer.  I saved the points as a pair of integers.\par {\*\bkmkend bk39}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 saving files}{\rxe bk39}}}{\v\f4 \par {\*\bkmkend bk40}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Save As command}{\rxe bk40}}}{\v\f4 \par {\*\bkmkend bk41}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SFPutFile2}{\rxe bk41}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Other Standard File Calls}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Other Standard File Calls\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 We've covered the use of }{\f6\fs20 SFGetFile2}{\f4  and }{\f6\fs20 SFPutFile2}{\f4 , which do the job of figuring out file names for file loads and saves very well, but there are always exceptional cases that just don't quite work with the simple dialogs we've used.  While we won't cover any of the other SFO calls, I'd like to mention a few of the biggies so you know they exist.  If you would like to use any of the other SFO calls, you can refer to }{\i\f4 Apple IIGS Toolbox Reference: Volume 3 }{\f4 for details.\par It's not all that uncommon to need a few additional buttons in a dialog.  One of the most common examples is a program that can save to several different file formats.  In that case, you need to let the user pick the file format.  A common way to do that is to add a button called Format, and open your own dialog when the button is pushed.  The }{\f6\fs20 SFGetFile2}{\f4  and }{\f6\fs20 SFPutFile2}{\f4  calls don't give you any chance to add your own buttons, but two close cousins, }{\f6\fs20 SFPGetFile2}{\f4  and }{\f6\fs20 SFPPutFile2}{\f4  do.\par In some kinds of programs, it might be nice to be able to select more than one file in an open dialog, but }{\f6\fs20 SFGetFile2}{\f4  only lets the user pick one file at a time.  There is a way to get more than one file at a time, though, using the }{\f6\fs20 SFMultiGet2}{\f4  call.\par All of these calls are documented in chapter 48 of the }{\i\f4 Apple IIGS Technical Reference Manual, Volume 3}{\f4 .  Of course, there are a lot of other calls in SFO, too.  Browsing through the chapters that cover SFO will reveal all sorts of tricks you can do with SFO.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Reading a File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Reading a File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk42}{\*\bkmkstart bk44}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Now that you know how to get a file name, it's time to actually load the file.  You could load the file using Pascal's built in file handling procedures, like }{\f6\fs20 Read}{\f4  and }{\f6\fs20 Readln}{\f4 , but there are some problems with these, mainly in the area of speed.  We'll use GS/OS to load the file, instead.\par GS/OS isn't technically a part of the Apple IIGS toolbox, although there's really no reason why it couldn't be.  In fact, the Macintosh file I/O system is a tool.  At the machine code level there are some very big differences in the way you call GS/OS and the way you make tool calls, but from the viewpoint of a high-level language, these differences vanish.  In this course, we'll treat GS/OS as if it were a tool, and in fact, the GS/OS calls we'll use are listed in Appendix A just like the tool calls.  For a complete description of GS/OS, you need to get a copy of }{\i\f4 Apple IIGS GS/OS Reference}{\f4 .\par Reading a file is relatively easy with GS/OS.  Here's the steps involved:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenGS}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 1.\tab Call }{\f6\fs20 OpenGS}{\f4  to open the file.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewHandle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 2.\tab Call }{\f6\fs20 NewHandle}{\f4  to get memory to load the file.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReadGS}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 3.\tab Call }{\f6\fs20 ReadGS}{\f4  to read the contents of the file into memory.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseGS}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 4.\tab Call }{\f6\fs20 CloseGS}{\f4  to close the file.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ToolError}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GS/OS errors}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Unlike the tools, every GS/OS call uses exactly one parameter, a record that contains the various values that will be passed to the call.  The GS/OS subroutines also return values in the same record.  In ORCA/Pascal GS/OS errors are reported just like tool errors; you read the error number using the }{\f6\fs20 ToolError}{\f4  function, which is still 0 if there is no error to report.\par Each of the GS/OS records starts with a parameter count word that has to be filled in by you before the call is made.  This parameter count word exists because you don't always have to pass the same number of parameters to a GS/OS call; you can abbreviate the parameters if you like.  Here's the record and call declarations for }{\f6\fs20 OpenGS}{\f4 , taken from the ORCA/Pascal header file for GS/OS:\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenGS}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    openOSDCB = record\par        pcount:          integer;\par        refNum:          integer;\par        pathName:        gsosInStringPtr;\par        requestAccess:   integer;\par        resourceNumber:  integer;\par        access:          integer;\par        fileType:        integer;\par        auxType:         longint;\par        storageType:     integer;\par        createDateTime:  timeField;\par        modDateTime:     timeField;\par        optionList:      optionListPtr;\par        dataEOF:         longint;\par        blocksUsed:      longint;\par        resourceEOF:     longint;\par        resourceBlocks:  longint;\par        end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenGS}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure OpenGS (var parms: openOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-4:  }{\f6\fs20 OpenGS}{\f4  Declaration\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are a lot of fields here, but we're only interested in four of them.  The }{\f6\fs20 pcount}{\f4  parameter is the parameter count I mentioned; we need to set this before making a call.  The }{\f6\fs20 pathName}{\f4  field is a pointer to a GS/OS input string; we'll pass the path name returned by the }{\f6\fs20 SFGetFile2}{\f4  call (after adding two to skip the initial buffer size, as before).  The }{\f6\fs20 dataEOF}{\f4  field contains the total length of the file in bytes; we'll use this value to tell how much memory to allocate, and again when we read the file.  Finally, once the file is open, GS/OS expects us to refer to the file with a number it returns; this number is called the file reference number, and is returned in the }{\f6\fs20 refNum}{\f4  field.  We'll pass this }{\f6\fs20 refNum}{\f4  to both the }{\f6\fs20 ReadGS}{\f4  call and the }{\f6\fs20 CloseGS}{\f4  call.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 refNum}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you look back in Appendix A at the documentation for }{\f6\fs20 OpenGS}{\f4 , you will find that the }{\f6\fs20 pcount}{\f4  field can be any value from 2 to 15.  Counting the fields in the }{\f6\fs20 openOSDCB}{\f4  record, }{\f6\fs20 pcount}{\f4  is 0, }{\f6\fs20 refNum}{\f4  is 1 and }{\f6\fs20 pathName}{\f4  is 2, so this tells us that we have to supply at least the name of the file to open, and as a minimum, GS/OS will tell us the reference number for the file so we can close it.  Since you have to tell GS/OS which file to open, and GS/OS really does expect you to be polite enough to close the file when you're finished with it, it shouldn't be any surprise that you have to use at least those first two parameters.\par Counting down the list, }{\f6\fs20 dataEOF}{\f4  is parameter number 12.  We need this value, so the smallest value we can supply is 12.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 networks}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are three other input parameters in the }{\f6\fs20 OpenOSDCB}{\f4  record; they are the }{\f6\fs20 requestAccess}{\f4  parameter, the }{\f6\fs20 optionList}{\f4  parameter and the }{\f6\fs20 resourceNumber}{\f4  parameter.  If we'd stuck with a }{\f6\fs20 pcount}{\f4  of 2, we could have ignored these parameters, but since we have used a }{\f6\fs20 pcount}{\f4  of 12, they must be filled in.  It's a good idea to fill in the }{\f6\fs20 requestAccess}{\f4  parameter anyway, especially when the program may be used by people on a network.  The }{\f6\fs20 requestAccess}{\f4  parameter is a flags word; bit 1 is set if you want to write to the file, and clear if not, while bit 0 is set if you want to read the file.  The reason this pair of flags is so important is that more than one program can read a file at the same time, as long as all of them only open the file for input, but only one program can have a file open for output at any given time, and no one else can read the file while it is open for output.  For a data file on a network, opening the file for input only means that other people can load the file at the same time.  That's a real possibility with a program that might be used by a class of students to open a file at the start of a class session.  All of that boils down to using 1 for }{\f6\fs20 requestAccess}{\f4 , setting the read bit but leaving the write access bit clear.\par The }{\f6\fs20 optionList}{\f4  parameter is something we won't cover here.  Basically, it's a pointer to a buffer area GS/OS can fill in with extra information, but since we don't need any of the information, we can just set this value to nil to tell GS/OS not to bother.\par The }{\f6\fs20 resourceNumber}{\f4  parameter lets you tell GS/OS whether you want to open the data fork (use 0) or the resource fork (use 1).  We'll use 0, since we're opening the data fork.\par There are a wide variety of errors that can occur when you try to open a file, and it is very important to check for them with the }{\f6\fs20 ToolError}{\f4  function that is built into ORCA/Pascal before you move on to the rest of the load process.  The error checking isn't hard, you just have to remember to do it.  After we finish talking about the rest of the calls, we'll collect all of the information into a single subroutine that loads a file.  You can check out how the error handling is done then.\par After opening the file, the next step is to reserve some memory.  In this course, I'm assuming that you will load the file into memory, work on it there, and write the file once when the user uses the Save or Save As... command.  There are other ways of handling files, such as leaving the file open and keeping only a small part of the file in memory.  This is a good idea in some programs, like a commercial quality word processor that might need to let the user edit files larger than available memory.  It's a bad idea in others, since the complexity of the program shoots up dramatically, and the program is also a lot slower.\par Allocating the memory is done with the }{\f6\fs20 NewHandle}{\f4  call.  We need to allocate }{\f6\fs20 dataEOF}{\f4  bytes of memory, and this memory should normally be moveable.  That's a big help to the Memory Manager, as you'll discover in a couple of lessons.  The call to }{\f6\fs20 NewHandle}{\f4  looks like this:\par \par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 myHandle := NewHandle(dataEOF, userID, $8000, nil);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 We'll cover }{\f6\fs20 NewHandle}{\f4  in a lot more detail in a later lesson; for now, use the call just like you see it.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Assuming the call is successful, }{\f6\fs20 NewHandle}{\f4  returns a handle to a chunk of memory.  The memory will be locked at first, but after we read the file, we should unlock the handle so the Memory Manager can move the file around if it needs to.  Before accessing the memory, we need to lock the file again.\par Here's the declarations for the }{\f6\fs20 ReadGS}{\f4  call and it's record:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    readWriteOSDCB = record\par        pcount:         integer;\par        refNum:         integer;\par        dataBuffer:     ptr;\par        requestCount:   longint;\par        transferCount:  longint;\par        cachePriority:  integer;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReadGS}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure ReadGS (var parms: readWriteOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-5:  }{\f6\fs20 ReadGS}{\f4  and the }{\f6\fs20 ReadOSDCB}{\f4  Record\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 We won't be using (or discussing) the cache priority field, so }{\f6\fs20 pcount}{\f4  will be set to 4.  The }{\f6\fs20 refNum}{\f4  field needs to be filled in with the reference number returned by }{\f6\fs20 OpenGS}{\f4 .  The }{\f6\fs20 dataBuffer}{\f4  field is a pointer to the place to put the bytes read; that would be }{\f6\fs20 myHandle^}{\f4 , which is a pointer to the first byte of memory reserved by the }{\f6\fs20 NewHandle}{\f4  call.  The }{\f6\fs20 requestCount}{\f4  field tells }{\f6\fs20 ReadGS}{\f4  how many bytes to read; that should be filled in with }{\f6\fs20 dataEOF}{\f4  from the }{\f6\fs20 OpenGS}{\f4  record.  The }{\f6\fs20 transferCount}{\f4  parameter is returned by }{\f6\fs20 ReadGS}{\f4 .  It tells us how many bytes were actually read.  That's pretty useful in situations where you are reading a file in small chunks, but we don't actually need the value, so we'll ignore it.  The minimum allowed value for }{\f6\fs20 pcount}{\f4  is 4, though (check Appendix A for information like the minimum }{\f6\fs20 pcount}{\f4  value) so we have to let }{\f6\fs20 ReadGS}{\f4  fill in the field.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseGS}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last step in reading the file is to close the file with }{\f6\fs20 CloseGS}{\f4 .\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    closeOSDCB = record\par        pcount: integer;\par        refNum: integer;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure CloseGS (var parms: closeOSDCB); \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-6:  }{\f6\fs20 CloseGS}{\f4  and the }{\f6\fs20 CloseOSDCB}{\f4  Record\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par While the other GS/OS calls weren't all that complicated, this one is trivial.  You just pass the reference number for the file to close, along with a }{\f6\fs20 pcount}{\f4  of 1, and GS/OS closes the file.\par All of this is pulled together in Listing 6-7, which shows a subroutine that loads a file into memory.  This subroutine does all of the appropriate error checking, calling our standard error handler if an error is found.  (You should add message 4, "File read error", to the list of error messages in your resource file.)  If the load is successful, the subroutine puts the handle to an unlocked chunk of memory containing the file in the document record; if the file can't be loaded for some reason, the subroutine sets the data handle to nil.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function LoadDocument (dPtr: documentPtr): boolean;\par \par \{ Load a document file from disk                                \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    dPtr - pointer to the document to save                     \}\par \{                                                               \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{ Returns: true if successful, else false                       \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    clRec: closeOSDCB;                   \{CloseGS record\}\par    opRec: openOSDCB;                    \{OpenGS record\}\par    port: grafPortPtr;                   \{caller's grafPort\}\par    r: rect;                             \{our port rect\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    rdRec: readWriteOSDCB;               \{ReadGS record\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{LoadDocument\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 LoadDocument := true;                   \{assume we will succeed\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 opRec.pcount := 12;                     \{open the file\}\par HLock(dPtr^.pathName);\par opRec.pathName := pointer(ord4(dPtr^.pathName^)+2);\par opRec.requestAccess := 1;\par opRec.resourceNumber := 0;\par opRec.optionList := nil;\par OpenGS(opRec);\par if ToolError <> 0 then begin\par    FlagError(4, ToolError);\par    LoadDocument := false;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end \{if\}\par else begin\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    dPtr^.dataHandle :=                  \{allocate memory for the file\}\par       NewHandle(opRec.dataEOF, userID, $8000, nil);\par    if ToolError <> 0 then begin\par       FlagError(2, ToolError);\par       LoadDocument := false;\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end \{if\}\par    else begin\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       rdRec.pcount := 4;                \{read the file\}\par       rdRec.refnum := opRec.refnum;\par       rdRec.dataBuffer := dPtr^.dataHandle^;\par       rdRec.requestCount := opRec.dataEOF;\par       ReadGS(rdRec);\par       if ToolError <> 0 then begin\par          FlagError(4, ToolError);\par          LoadDocument := false;\par          DisposeHandle(dPtr^.dataHandle);\par          dPtr^.dataHandle := nil;\par }\pard \li180\widctlpar\adjustright {\f6\fs20          end \{if\}\par       else begin\par          HUnlock(dPtr^.dataHandle);     \{let the data move in memory\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20          port := GetPort;               \{force an update\}\par          SetPort(dPtr^.wPtr);\par          GetPortRect(r);\par          InvalRect(r);\par          SetPort(port);\par }\pard \li180\widctlpar\adjustright {\f6\fs20          end; \{else\}\par       end; \{else\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    clRec.pcount := 1;                   \{close the file\}\par    clRec.refnum := opRec.refnum;\par    CloseGS(clRec);\par    end; \{else\}\par HUnlock(dPtr^.pathName);                \{unlock the name handle\}\par end; \{LoadDocument\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-7:  Subroutine to Load a File\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk42}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 files\:reading}{\rxe bk42}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Writing a File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Writing a File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk43}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Writing a file follows pretty much the same pattern as reading one, with one exception.  The }{\f6\fs20 OpenGS}{\f4  call assumes that a file exists; it won't create one.  Instead, if the file doesn't exist, you start out by creating one.  Just to keep things interesting, creating a file will fail if the file already exists, so we have to start by deleting any file that already happens to be on the disk.\par Here's the procedure we will use to save a file:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DestroyGS}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Use }{\f6\fs20 DestroyGS}{\f4  to delete any file that happens to exist.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CreateGS}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 2.\tab Use }{\f6\fs20 CreateGS}{\f4  to create a new file.  If }{\f6\fs20 DestroyGS}{\f4  failed for some reason (like a locked file) this call will also fail, and we'll bail out of the save subroutine.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenGS}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 3.\tab Call }{\f6\fs20 OpenGS}{\f4  to open the file.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 WriteGS}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 4.\tab Call }{\f6\fs20 WriteGS}{\f4  to write the file.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseGS}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 5.\tab Call }{\f6\fs20 CloseGS}{\f4  to close the file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par While this is a fairly simple way to handle saving the file, there is another strategy you might want to consider.  If you are saving a change to an existing file, it's possible (unlikely, but possible) to get an error after deleting the original file, but before the new information is safely on a disk.  One way to avoid this problem is to save the file first, using some temporary file name, then delete the original file, and finally rename the new one.  There are two disadvantages to this scheme.  The minor one is that it's a little harder to implement than the way I've outlined.  Since we package all of our ideas in neat subroutines that can be moved from program to program, though, this is only a minor problem.  No matter how hard it is, we only have to do it once \endash  after that, we can just copy our old subroutine.  The main problem is that you can easily fill a disk while you are saving the new file.  In fact, if the file you are saving is more than half the size of the capacity of the disk, you can't save a change to a file at all, since two copies will exist on the disk right before the original is deleted.  That may or may not be a problem, depending on the program you are writing.  In any case, we'll stick to the simple method here.\par Here's the declarations for }{\f6\fs20 DestroyGS}{\f4 , the GS/OS call to delete a disk file, along with its record:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    destroyOSDCB = record\par        pcount:   integer;\par        pathName: gsosInStringPtr;\par        end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DestroyGS}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure DestroyGS (var parms: destroyOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-8:  }{\f6\fs20 DestroyGS}{\f4  and the }{\f6\fs20 DestroyOSDCB}{\f4  Record\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This call just needs the name of the file to delete from the disk; you pass the same file name you passed for }{\f6\fs20 OpenGS}{\f4  in the lest section.  There are three possibilities.  First, the file might not exist at all.  This could happen if we are saving a new file for the first time, or if we are saving a file to a new location.  Either way, the }{\f6\fs20 DestroyGS}{\f4  call will fail, and we simply ignore that fact.  If the file already exists, the most likely possibility is that the }{\f6\fs20 DestroyGS}{\f4  call will delete the file, making room for the new copy we are about to save.  The third possibility is that the file exists, but for some reason can't be deleted.  The reason a file can't be deleted is usually because it is locked, but there might be a disk error of some sort.  Either way, the }{\f6\fs20 DestroyGS}{\f4  call will fail.  We can safely ignore this possibility, since the next call to create a file will also fail.  In short, we just take a stab at deleting the file \endash  whatever happens is OK!\par The next call is a bit more complicated.  The }{\f6\fs20 CreateGS}{\f4  call, shown in Listing 6-9 with its parameter record, is used to create a new file on disk.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    createOSDCB = record\par        pcount:        integer;\par        pathName:      gsosInStringPtr;\par        access:        integer;\par        fileType:      integer;\par        auxType:       longint;\par        storageType:   integer;\par        dataEOF:       longint;\par        resourceEOF:   longint;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CreateGS}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure CreateGS (var parms: createOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-9:  }{\f6\fs20 CreateGS}{\f4  and the }{\f6\fs20 CreateOSDCB}{\f4  Record\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par We need to set up the first six parameters, through }{\f6\fs20 storageType}{\f4 , to create the output file.  The last two parameters \endash  }{\f6\fs20 dataEOF}{\f4  and }{\f6\fs20 resourceEOF}{\f4  \endash  are used to set aside space for a file.  In almost all cases, it's better to let the operating system figure that out for itself, so that's what we will do.\par Running through the parameters that we actually need to set, }{\f6\fs20 pcount}{\f4  should be set to 5.  The }{\f6\fs20 pathName}{\f4  parameter is again a pointer to the name of the file to create; since it can be a full path name, we can safely pass the same path name we use to open or delete the file.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 locked files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 files\:locked}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 access}{\f4  parameter tells GS/OS who should have access to a file.  This flags word should be set to $C3, which tells GS/OS to allow deleting, renaming, reading and writing, and to make the file visible.  I won't go over the various bit flags here, but if you want to disable any of these options, you can check out the complete documentation for the }{\f6\fs20 CreateGS}{\f4  call in Appendix A.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 auxiliary file type}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 fileType}{\f4  and }{\f6\fs20 auxType}{\f4  parameters are the file type and auxiliary file type you want to use for the file.  File types and auxiliary file types are assigned by Apple Computer.  In a lot of cases, there will already be a file type for the file format you want to use.  For example, if you are saving a picture, there are several predefined file formats you can pick from, and you would use the file type and auxiliary file type for that format.  If you need to create a completely new type of file, you can apply for a file type assignment from Apple Computer.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource fork}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 data fork}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 directories}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last of the parameters we'll use is }{\f6\fs20 storageType}{\f4 , which controls the kind of file we're creating.  For the normal kinds of data files we will create in this course, the value should be 1.  The other common options are 13, which tells GS/OS we want to create a new folder, and 5, which creates a file that has both a data fork and a resource fork.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenGS}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 After creating the file, we need to open it.  The only difference between opening a file for output and opening one for input, like you did in the last section, is that the }{\f6\fs20 requestAccess}{\f4  parameter in the }{\f6\fs20 OpenOSDCB}{\f4  record should be set to 2 to get write access, instead of 1, which gave us read access.  The }{\f6\fs20 pcount}{\f4  parameter can also be set to 3, since we're just using the first 3 parameters, this time.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 WriteGS}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Writing the file is also very similar to reading one.  The only different is the obvious one:  we tell GS/OS where the bytes to write start, and how many bytes to write, rather than telling GS/OS where to put the bytes, and how many bytes to read.  In fact, as you can see in Listing 6-10, the parameter block we pass for a }{\f6\fs20 WriteGS}{\f4  call is even the same as the parameter record for a }{\f6\fs20 ReadGS}{\f4  call.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    readWriteOSDCB = record\par        pcount:         integer;\par        refNum:         integer;\par        dataBuffer:     ptr;\par        requestCount:   longint;\par        transferCount:  longint;\par        cachePriority:  integer;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 WriteGS}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure WriteGS (var parms: readWriteOSDCB); prodos ($2013);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-10:  }{\f6\fs20 WriteGS}{\f4  and its Record\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There is one touchy issue with writing a file that we didn't have to worry about when we read it.  When an error occurs at this point, it is usually because the disk is full.  After all, if the disk is locked or completely hosed, we probably would have had trouble with the }{\f6\fs20 CreateGS}{\f4  call.  If the disk doesn't have enough room to write the entire file, GS/OS will write as much of the file as it can, then return both the number of bytes written (in }{\f6\fs20 transferCount}{\f4 ) and an error code.  The touchy point is what your program does then.  For a program that is writing a text file, it might be best to leave the file there, just in case the poor user doesn't have another disk to put the file on.  At least that way he won't loose the }{\i\f4 entire}{\f4  file.  For a file that has a very delicate format with a lot of interdependencies, like a linked database, it might be better to delete the entire file, and force the user to either rush out any buy a new box of disks, or cut out some information and resave the file.\par The last step is to close the file.  That's done exactly the same way the file was closed after reading it.\par Listing 6-11 pulls all of this together into a subroutine you can use in your programs.  It assumes you have added error message 5, "File write error", to the list of error messages in your resource fork.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure SaveDocument (dPtr: documentPtr);\par \par \{ Save a document file to disk                                  \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{    dPtr - pointer to the document to save                     \}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    clRec: closeOSDCB;                   \{CloseGS record\}\par    crRec: createOSDCB;                  \{CreateGS record\}\par    dsRec: destroyOSDCB;                 \{DestroyGS record\}\par    opRec: openOSDCB;                    \{OpenGS record\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    wrRec: readWriteOSDCB;               \{WriteGS record\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{SaveDocument\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 HLock(dPtr^.pathName);                  \{lock the path name\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 dsRec.pcount := 1;                      \{destroy any old file\}\par dsRec.pathName := pointer(ord4(dPtr^.pathName^)+2);\par }\pard \li180\widctlpar\adjustright {\f6\fs20 DestroyGS(dsRec);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 crRec.pcount := 5;                      \{create a new file\}\par crRec.pathName := pointer(ord4(dPtr^.pathName^)+2);\par crRec.access := $C3;\par crRec.fileType := $C1;\par crRec.auxType := 0;\par crRec.storageType := 1;\par CreateGS(crRec);\par if ToolError <> 0 then\par }\pard \li180\widctlpar\adjustright {\f6\fs20    FlagError(5, ToolError)\par else begin\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    opRec.pcount := 3;                   \{open the file\}\par    opRec.pathName := pointer(ord4(dPtr^.pathName^)+2);\par    opRec.requestAccess := 2;\par    OpenGS(opRec);\par    if ToolError <> 0 then\par }\pard \li180\widctlpar\adjustright {\f6\fs20       FlagError(5, ToolError)\par    else begin\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       wrRec.pcount := 4;                \{write the file\}\par       wrRec.refnum := opRec.refnum;\par       HLock(dPtr^.dataHandle^);\par       wrRec.dataBuffer := dPtr^.dataHandle^;\par       wrRec.requestCount := $8000;\par       WriteGS(wrRec);\par       if ToolError <> 0 then\par          FlagError(5, ToolError);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       HUnlock(dPtr^.dataHandle^);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20       clRec.pcount := 1;                \{close the file\}\par       clRec.refnum := opRec.refnum;\par       CloseGS(clRec);\par       end; \{else\}\par    end; \{else\}\par HUnlock(dPtr^.pathName);                \{unlock the name handle\}\par end; \{SaveDocument\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-11:  Subroutine to Save a File\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk43}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 files\:writing}{\rxe bk43}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Screen Dumps}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Screen Dumps\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 screen dumps}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pictures}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 graphics}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are several formats for pictures, but one of the simplest is a screen dump.  This file format is literally a copy of the graphics screen with a picture on the screen.  In this section, we'll look at this format for a file and learn about a QuickDraw II call that can quickly draw the picture.  In the problem at the end of the section you will finally get a chance to put the file input and output routines to work to create a slide show program.\par A screen dump file has a file type of $C1 with an auxiliary file type of 0.  There are three parts to the file: a bit map of the picture itself, s series of color tables that tells the computer which of the possible 4096 colors to use when displaying the picture, and a set of flag values that give some very specific hardware related information about each line that is displayed on the screen.  These last two parts of the file are pretty hard to understand right now, so we'll ignore them until we get to the lesson on QuickDraw II.\par The picture comes first in the file.  A picture is organized as a series of 200 lines, starting from the top of the screen and moving down.  Each line contains 160 bytes, organized as two pixels per byte for 640 mode pictures, and four pixels per byte for 320 mode pictures.  A pixel is one colored dot on the screen.  If you know enough about binary math to understand how the bits are organized in a byte, this probably makes a lot of sense.  After all, in 320 mode you have 16 distinct colors available, and you need four bits to represent 16 values.  That gives you two pixels to the byte, or 160 bytes for an entire 320 pixel scan line.  In 640 mode, you only get four colors per pixel, which means you need two bits per pixel, and you can stuff four pixels in a byte.  If you don't know much about binary math, don't get to worried about all of this just yet.  You don't have to know anything about the organization of bits or pixels to draw a picture, and we'll come back to all of this in gory detail when we talk about QuickDraw II.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PPToPort}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 After you load one of these picture files into memory, the first byte of the file you loaded is also the first byte of the picture.  The fastest and easiest way to draw the picture is to use QuickDraw II's }{\f6\fs20 PPToPort}{\f4  call.  }{\f6\fs20 PPToPort}{\f4  stands for Paint Pixels to Port, and that's just what it does.  }{\f6\fs20 PPToPort}{\f4  takes the entire picture and draws it in the active port.  In the process, it clips the picture so it doesn't draw outside of the window, and if you ask it to, }{\f6\fs20 PPToPort}{\f4  can even scale the picture, changing it's shape to match the space that's available.  It's all a bit messy, but then you can do quite a lot with }{\f6\fs20 PPToPort}{\f4 .\par Here's a prototype call to }{\f6\fs20 PPToPort}{\f4 , with names for the various parameters:\par \par }{\f6\fs20 PPToPort(srcLocInfo, srcRect, destX, destY, transferMode);\par }{\f4 \par The first parameter is the most complex; it's a record that tell's QuickDraw II a lot about the picture it is supposed to draw.  The record is defined like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 locInfo}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    locInfo = record\par        portSCB:          integer;\par        ptrToPixelImage:  ptr;\par        width:            integer;\par        boundsRect:       rect;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The first parameter is a bit mask that tells QuickDraw II, among other things, whether we are drawing a 640 mode picture or a 320 mode picture.  QuickDraw II gets pretty upset if you try to draw a 320 mode picture to a 640 mode screen, or vice versa, but it also trusts you \endash  so we'll lie.  When you are drawing to a 640 mode screen, set }{\f6\fs20 portSCB}{\f4  to $80; for 320 mode pictures use a value of $00.  Later in the course we'll cover this byte in more detail.\par The next parameter is a pointer to the first byte of the picture.  Set }{\f6\fs20 ptrToPixelImage}{\f4  to the first byte of the picture file.\par The }{\f6\fs20 width}{\f4  parameter tells }{\f6\fs20 PPToPort}{\f4  how long each line is, in bytes.  Our lines are 160 bytes long, so we set  }{\f6\fs20 width}{\f4  to 160.\par The last parameter is a rectangle that gives the size for the entire pixel image.  For a screen dump, this would be a rectangle with the top left point at 0,0, and the bottom right point at either 320,200 or 640,200, depending on the screen resolution.\par The next parameter to }{\f6\fs20 PPToPort}{\f4  is }{\f6\fs20 srcRect}{\f4 , which is the rectangle to draw into.  The obvious choice is to set this rectangle to the same size we used in the record describing the picture, and that's what you would normally do.  In fact, you can just pass }{\f6\fs20 boundsRect}{\f4 , from the }{\f6\fs20 locInfo}{\f4  record.  If this rectangle is half the size of the original, though, the }{\f6\fs20 PPToPort}{\f4  call will squeeze the picture down to fit in the new rectangle.  You can stretch the picture by increasing the size of the rectangle.\par The next two parameters, }{\f6\fs20 destX}{\f4  and }{\f6\fs20 destY}{\f4 , tell where in the port to draw the picture.  We're letting }{\f6\fs20 TaskMaster}{\f4  handle scrolling for us, and }{\f6\fs20 TaskMaster}{\f4  will move the origin of our window around to handle scrolling, so all we have to do is pass 0,0.  If you wanted to draw the picture in the middle of the window you could set these parameters to some other value.\par Finally, you have to tell }{\f6\fs20 PPToPort}{\f4  which drawing mode to use.  For now we'll stick with }{\f6\fs20 modeCopy}{\f4 , which is what you've been using all along.\par Here's a short subroutine that pulls this information together.  This subroutine is set up as an update procedure, so you can use it as a drop-in replacement for the update procedure you've used in Frame.  All you have to do is make sure the document record defines the name of the handle for the file you load as }{\f6\fs20 pictureHandle}{\f4 .\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{$databank+\}\par \par procedure DrawContents;\par \par \{ Draw the contents of the active port                          \}\par \par var\par    dPtr: documentPtr;                   \{document to draw\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    info: locInfo;                       \{record for PPToPort\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{DrawContents\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 dPtr := FindDocument(GetPort);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 if dPtr <> nil then begin\par }\pard \li180\widctlpar\adjustright {\f6\fs20    HLock(dPtr^.pictureHandle);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    with info do begin\par       portSCB := $00;\par       ptrToPixelImage := dPtr^.pictureHandle^;\par       width := 160;\par       with boundsRect do begin\par          h1 := 0; h2 := 320;\par          v1 := 0; v2 := 200;\par          end; \{with\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end; \{with\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    PPToPort(info, info.boundsRect, 0, 0, modeCopy);\par    HUnlock(dPtr^.pictureHandle);\par    end; \{if\}                                  \par end; \{DrawContents\}\par \par \{$databank+\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 6-12:  Update Procedure for Drawing a Picture\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 6-4:  Create a slide show program, starting with the version of Frame from Problem 6-2.  You program should use GS/OS to load the picture file, and it should also let the user save the file to a new name.  Since you can't create new pictures, your program should not have New as an option in the File menu.  Finally, the program should use 320 mode graphics.\par You can test your program with any screen dump format picture.  If you don't have any others handy, you can load one of the pictures from the Pictures folder on the solution disks.\par Be sure and test the About box with your program.  You've switched screen resolutions, and that changes the size of your alerts.  (The size is adjusted automatically by }{\f6\fs20 AlertWindow}{\f4 , but you should check the new size to make sure it looks nice.)  Of course, you'll also have to change the size of the window in your }{\f6\fs20 rWindParam1}{\f4  resource.  If you forget, your window will be just a tad too wide for the 320 mode screen!\par {\*\bkmkend bk44}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GS/OS}{\rxe bk44}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson showed how to use the Standard File Operations Tool Set to get file names for reading and writing files.  You learned two ways to load and save these files: using Pascal's standard input and output functions, or calling the GS/OS disk operating system directly.  Along the way, Frame has been updated to handle SFO.  While they aren't a part of the Frame program, you also have two subroutines that can be dropped into a program to read or write files using GS/OS.\par The last problem in this lesson is also our first really useful program.  It's a slide show program that lets you load as many screen dump format pictures as you like, displaying the pictures in multiple windows.  You can even create a copy of a picture by saving it to a new name using the Save As... command.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 CloseGS\tab CreateGS\tab DestroyGS\tab DisposeHandle\par HLock\tab HUnlock\tab NewHandle\tab OpenGS\par PPToPort\tab ReadGS\tab SetWTitle\tab SFGetFile2\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 SFPutFile2\tab WriteGS\par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 7 \endash  Move Over Guttenberg}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 7 \endash  Move Over Guttenberg}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 7 \endash  Move Over Guttenberg\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk46}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson shows how to use the Print Manager to print anything you can draw in a window.  We also add printing to Frame, our framework program that will be the basis for most of the programs in the book.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 How the Print Manager Works}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 How the Print Manager Works\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Printing could have been really hard on the Apple IIGS.  After all, virtually every desktop program has to print graphic images, not the simple text you would expect from a program on an IBM PC or a text-based Apple II.  Printing text is hard enough, but with graphics you have to know how to address the individual bits on each and every printer someone might try to hook up to their Apple IIGS.  Apple's Print Manager takes over the job of figuring out what sort of printer is hooked up to the computer \endash  whether it can print color or just black and white, how many individually addressable dots there are in each direction, and how big the paper is.  All you have to do is bring up a few dialogs to let the user pick options, and when the time comes, draw to the printer just like you would draw to a window.\par There's a lot of information that the user can pick to control the printing process \endash  things like whether they want a full color image, whether the image should be printed normally or in landscape mode, and a host of smaller details.  Of course, no one wants to pick all of those details each time something is printed.  Well, maybe not all of them.  Things like how many copies are printed should at least be pointed out each time a document is printed.  You wouldn't want to get forty copies of something by mistake because forty copies were printed the last time!\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 printer\:choosing}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 To handle this varying level of detail, the Print Manager actually uses three distinct levels of dialogs.  The first level is something you don't even worry about.  It's possible to have more than one printer hooked up to an Apple IIGS \endash  mine is hooked up to two LaserWriters over a network, and generally to an ImageWriter on my desk.  When I pick out a printer, it's something that I generally only do once, and then I use the same printer all of the time.  The same thing would be true if you have just one printer hooked up.  You want to tell your computer what sort of printer it is, and what printer port it is plugged into, just once.  After that, every single application should be able to find out about the printer you've picked.  That first level of information is selected from the Control Panel.  You and your program don't do anything at all.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 page setup dialog}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The next level of information is the sort of stuff you want to do one time for each document, and then leave it pretty much the same after that.  For example, if you're using a paint program to create a picture, you're may want to print the picture in portrait mode or landscape mode, but you're probably not going to switch between the two for the same picture.  This second level of information is done with the page setup dialog.  The Print Manager will handle all of the details for you, even using a different page setup dialog for each kind of printer.  You do have to get involved, though, even if it's just a little bit.  You have to make a Print Manager call to draw the dialog.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 print job dialog}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last level of information is the sort of information that could change each time a document is printed, like the number of copies that will print, and whether the document should be printed quickly with low quality output; or whether the document is finished, so it's worth the time to let the printer do the best job it can.  This is in the print job dialog.  Like the page setup dialog, it's something you have to ask the Print Manager to do, but the Print Manager will draw the dialog and figure out what happens for you.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 print record}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 That's a lot of information to remember about how to print something, and some of that information should be remembered for the lifetime of the document.  The Print Manager uses a chunk of memory called a print record to remember all of this information.  The print record is something you create when the document is first created with the New command.  Normally, you would save the print record right along with the document, loading it and asking the Print Manager to check it for accuracy each time the document itself is loaded.  That way, if the user picks landscape mode printing today, your program will be smart enough to print the document the same way tomorrow.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The rest of this lesson covers the mechanics of making all of this happen, as well as outlining the print loop which actually prints the information.  You'll get to add printing to three programs: Frame, so you can put it in all of your future programs with a minimum of hassle; the point drawing program, so you can play with printing in a simple setting; and finally in the slide show program you wrote as part of a problem in the last section, so it becomes not just a slide show program, but a picture printing program.  Incidentally, this finishes Frame.  After this lesson, all of the things you learn will be a lot more specific to the kind of program you are writing.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Starting the Tools (Again)}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Starting the Tools (Again)\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Well, after all that, the first call we'll talk about isn't even in the Print Manager.  You see, there's a minor problem with the Print Manager.  It isn't started by }{\f6\fs20 StartDesk}{\f4 , the quick and dirty tool start up subroutine built into ORCA/Pascal, so we need to start the Print Manager for ourselves.  We'll face the same problem later in the course with tools like TextEdit, so it's a topic I though we should cover fairly carefully.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 starting tools}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tools\:starting}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resources}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartDesk}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Back before System 5.0, starting tools was a piecemeal process.  Each tool had to be started individually, and many of them had specific requirements.  A very common one was the need for a chunk of direct page memory.  Getting over this initial hurdle was pretty hard for a beginning toolbox programer, and that's why I put }{\f6\fs20 StartDesk}{\f4  into ORCA/Pascal.  Well, Apple must have agreed with me, because there is a nifty new tool call in the toolbox starting with System Disk 5.0 that starts the tools almost as smoothly as }{\f6\fs20 StartDesk}{\f4 .  It had a major problem, though: for programs that used resources, Apple's }{\f6\fs20 StartUpTools}{\f4  call didn't work correctly from a programming environment like ORCA.  This problem has been fixed starting with System Disk 6.0, so there's no reason at all not to take advantage of all of the help }{\f6\fs20 StartUpTools}{\f4  gives us.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ShutDownTools}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 StartUpTools}{\f4  needs two things from us: a user ID, so it knows who owns the memory it allocates for the tools that need it; and a record containing a list of the tools you want started.  The record also has a few other details, like whether you want to use 320 mode or 640 mode.  It passes back a pointer to another record which you'll pass to }{\f6\fs20 ShutDownTools}{\f4  when your program quits.  Here's the code you need:\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    startStopParm: longint;\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 begin\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools}}}{\v\f4 \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 startStopParm := StartUpTools(UserID, 2, 1001);\par if ToolError <> 0 then\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    \{handle the error here\}\par \par ...\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ShutDownTools}}}{\v\f4 \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 ShutDownTools(1, startStopParm);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 7-1A:  Using }{\f6\fs20 StartUpTools}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rToolStartup resource}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type rToolStartup (1) \{\par    mode640;                    /* mode to start QuickDraw */\par       \{\par       1,$0300,                 /* Tool number, version */\par       \};\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 7-1B:  The }{\f6\fs20 rToolStartup}{\f4  Resource\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ShutDownTools}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As you can see, one way to give }{\f6\fs20 StartUpTools}{\f4  a list of tools is with a resource, and that's the method we'll use.  That second parameter of a 2 to }{\f6\fs20 StartUpTools}{\f4  tells }{\f6\fs20 StartUpTools}{\f4  that the last parameter is a resource ID for an }{\f6\fs20 rToolStartup}{\f4  resource.  If you would rather use a record that's built inside of your program, you can check out the complete description of the tool call in the }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 .\par }{\f6\fs20 StartUpTools}{\f4  returns a handle to a record that you need to pass along to }{\f6\fs20 ShutDownTools}{\f4  when your program quits.  That parameter has to be stored in a safe, global variable so you can get to it at the proper time.  The first parameter to }{\f6\fs20 ShutDownTools}{\f4  tells it that the second parameter is a handle; the other possibility is a pointer, which you would only use if you are setting up the record manually.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SysFailMgr}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Of course, it is possible for }{\f6\fs20 StartUpTools}{\f4  to fail.  One of the tools you ask for might not be on the boot disk, or there might not be enough direct page memory left, or there might be a disk error, or...  well, a lot could go wrong.  No matter what does happen, though, your program is left in the lurch.  You can't go on, since you don't have all of the tools available, and you can't even tell the user what happened, since the tools you use to put up an alert may not be going.  Handling this error is a tough one, and the only reliable way to do it is with a Miscellaneous Tool Set call called }{\f6\fs20 SysFailMgr}{\f4 .  This tool call prints a message and a number, then displays that familiar sliding apple, completely shutting down the machine until the computer is rebooted.  That's a horribly drastic action for your program to take, but the only other possibility is to just exit, without even telling the user why you quit, and that's even worse.\par Here's a call you could use for this rather severe error:\par \par }{\f6\fs20 SysFailMgr(ToolError, @'Could not start tools: ');\par }{\f4 \par Just for fun, when you're working the first problem, be sure and fake a tool start up error. It's a good idea to test your program in sensitive places like this anyway, so you can make sure errors are handled properly, and it also lets you see exactly what you're doing to the user.\par The only other topic we need to cover before we get back to the Print Manager is the tool numbers and versions for the various tools used in this course.  Table 7-1 shows the tools, their tool numbers, and the version numbers as of System Disk 6.0.  Some tools depend on other tools, too.  For example, the Print Manager uses the Dialog Manager to create the various printer dialogs.  The table shows the tools you need to start to use a particular tool in the last column.\par If there is a more recent system disk, or if your program needs to work with older system disks, you will have to check the release notes for the system disk or use a program like NiftyList to find the version numbers.\par \par }\pard \qj\fi-5400\li5760\keepn\widctlpar\tx1800\tx3240\adjustright {\f4\ul tool number}{\f4 \tab }{\f4\ul tool version}{\f4 \tab }{\f4\ul tool name}{\f4 \tab }{\f4\ul depends on...}{\f4 \par 1\tab 3.1\tab Tool Locator\par 2\tab 3.2\tab Memory Manager\tab 1\par 3\tab 3.2\tab Miscellaneous Tool Set\tab 1, 2\par 4\tab 3.7\tab QuickDraw II\tab 1, 2, 3\par 5\tab 3.4\tab Desk Manager\tab 1, 2, 3, 4, 6, 14, 15, 16, 20, 21, 22\par 6\tab 3.1\tab Event Manager\tab 1, 2, 3\par 8\tab 3.3\tab Sound Tool Set\tab 1, 2, 3\par 11\tab 3.0\tab Integer Math Tool Set\tab 1\par 14\tab 3.3\tab Window Manager\tab 1, 2, 3, 4, 6, 15, 16, 20, 27, 30\par 15\tab 3.3\tab Menu Manager\tab 1, 2, 3, 4, 6, 14, 16, 30\par 16\tab 3.3\tab Control Manager\tab 1, 2, 3, 4, 6, 14, 15, 30\par 18\tab 3.4\tab QuickDraw II Auxiliary\tab 1, 2, 3, 4, 27\par 19\tab 3.1\tab Print Manager\tab 1, 2, 3, 4, 6, 14, 15, 16, 18, 20, 21, 27, 28\par 20\tab 3.3\tab LineEdit Tool Set\tab 1, 2, 3, 4, 6, 18, 22, 27\par 21\tab 3.4\tab Dialog Manager\tab 1, 2, 3, 4, 6, 14, 15, 16, 18, 20, 27\par 22\tab 3.1\tab Scrap Manager\tab 1, 2\par 23\tab 3.3\tab Standard File Operations\tab 1, 2, 3, 4, 6, 14, 15, 16, 20, 21\par 25\tab 1.4\tab Note Synthesizer\tab 1, 2, 8\par 27\tab 3.3\tab Font Manager\tab 1, 2, 3, 4, 11, 14, 15, 16, 20, 21, 28\par 28\tab 3.3\tab List Manager\tab 1, 2, 3, 4, 6, 14, 15, 16\par 30\tab 1.2\tab Resource Manager\tab 1\par 34\tab 1.3\tab TextEdit Tool Set\tab 1, 3, 4, 6, 14, 15, 16, 18, 22, 27, 30\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tool numbers}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tool versions}}}{\v\f4 \par }{\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 7-1:  Tools }{\f6\fs20 StartUpTools}{\f4  Can Start\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The Tool Locator, Memory Manager and Resource Manager are started automatically, and don't need to be listed.  As a general rule, you should start all of the other tools except the Sound Tool Set, Print Manager, Note Synthesizer and TextEdit Tool Set for every program.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Frame}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Problem 7-1:  Change Frame so it uses }{\f6\fs20 StartUpTools}{\f4  to start all of the tools checked in Table 7-1.  Use }{\f6\fs20 SysFailMgr}{\f4  to handle any errors reported by }{\f6\fs20 StartUpTools}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Getting a Print Record}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Getting a Print Record\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 print record}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Getting back to the Print Manager, the first thing we have to do is allocate a print record.  The print record needs to be a handle, and it needs to be 140 bytes long.  Since you need a print record in every document, it makes sense to allocate one when you create the document record and open the window.\par \par }{\f6\fs20 dPtr^.prHandle := NewHandle(140, userID, 0, nil);\par }{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrDefault}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 What you do with this record depends on whether or not you are creating the record for a new document or opening an existing one that will get a print record from the document's file.  If you are creating a new print record, you need to fill in the print record with default values for all of the fields.  }{\f6\fs20 PrDefault}{\f4  does that for you; you should probably call it in the procedure you have hooked up to handle the menu command New.\par \par }{\f6\fs20 PrDefault(dPtr^.prHandle);\par }{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrValidate}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you are opening a file that has a print record, the natural thing to do is to fill in the print record from the file.  That's fine as far as it goes, but the print record might have been created for a different printer, or even for a different version of the Print Manager that had slightly different requirements.  Either way, you need to give the Print Manager a chance to check all of the information in the print record; you do that like this:\par \par }{\f6\fs20 changed := PrValidate(dPtr^.prHandle);\par }{\f4 \par }{\f6\fs20 PrValidate}{\f4  returns a boolean result that tells you if the print record was changed.  If so, you might want to set a "changed" flag in your document record to make sure the user gets a chance to save the document with the new print record, even if there are no other changes.  Then again, you might feel like I do.  I figure the same call will be made the next time the document is opened, and the user isn't likely to know or care about a change that happens automatically, behind their back.  I just ignore the result.\par It's possible to get errors back from any of these calls, so you need to handle those appropriately.  I think one good way to handle errors here is to flag the error using our normal error handler, then dispose of the print record (if it was even allocated) and set it to nil.  Later, you can check to see if there is a valid print record before trying to print.  That lets the user of the program keep going, even if there is some problem with printing.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Page Setup Dialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Page Setup Dialog\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 page setup}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrStlDialog}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are two menu commands that every program using the Print Manager should include in the File menu.  The first is "Page Setup...", and the second is "Print..."  The Page Setup command calls }{\f6\fs20 PrStlDialog}{\f4  to let the user pick out that second level information we talked about earlier; things like whether the page is in portrait or landscape mode.  The call is pretty simple:\par \par }{\f6\fs20 dPtr^.changed := dPtr^.changed or PrStlDialog(dPtr^.prHandle);\par }{\f4 \par The call returns a flag, just like }{\f6\fs20 PrValidate}{\f4 , that tells whether or not changes were actually made.  For }{\f6\fs20 PrValidate}{\f4 , I mentioned that I normally throw the flag away, since the user doesn't really know we are calling }{\f6\fs20 PrValidate}{\f4 , anyway.  This time, though, the user picked a specific menu command to make specific changes to a document, so I think it's appropriate to make sure the changes get saved.  If you aren't saving the print record with the document, though, you should still throw the value away, and not set the document's changed flag.\par You might notice that there's no figure here telling you what the dialog looks like.  There are two very good reasons for that.  The first is that the dialog is different for different printers and different versions of the Print Manager, so you'd have to check the program to see what was happening, anyway.  The most important reason, though, points out one of the neat things about the way the toolbox works:  }{\i\f4 we don't care what the dialog looks like}{\f4 !  Oh, sure, the user cares, but as a programmer, it just doesn't matter to us.  The Print Manager worries about all of the details, and fills in the print record for us.  All we really care about are a few fields in the print record itself.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Print Dialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Print Dialog\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 print dialog}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last of the dialogs is the one that lets the user pick things that will change from one time the document is printed to the next, like the number of copies that will be printed.  This is the first step you take when the user picks the Print command from the File menu.  The second step, of course, is to actually print the document.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrJobDialog}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Like the other calls that set up information in the print record, }{\f6\fs20 PrJobDialog}{\f4  takes the print record as a parameter, and returns a boolean result.  If the result is true, the user picked out some options and asked you to print the document; if the result is false, you don't do anything.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 if PrJobDialog(dPtr^.prHandle) then\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    \{print the document\};\par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Dimming the Menus}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Dimming the Menus\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 human interface}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dimmed menus}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the nice things a program can do is to let the user know when a command is available, and when it can't be used.  Normally you will want to dim any menu command that isn't available.  That's not something I've made a big deal about so far, since most of our programs have been frameworks for future programs, but now it's time to start thinking about when commands are available and when they are not.\par The idea is to dim a menu command when it can't be used, and undim it as soon as it can be used.  In the case of the print commands, that means the commands should be dim if there isn't an active document window, and they should not be dimmed if a window is open.  The big issue is actually when you dim or undim the windows.\par There are a lot of ways to handle this, but let's talk about two: the obvious solution, and the one I hope you will use.  The obvious solution is to go into the program and insert a check where documents are created and closed, dimming or undimming the print commands then.  That works, but it makes the program very complicated.  It means that you have to think about each and every menu command, and pepper code throughout the program to turn menu commands on and off.  Let me make a very safe prediction: you'll mess it up.  This method is a sure-fire way to create bugs, and they'll be very hard to track down.\par Let's think about this another way.  Instead of peppering the code to handle dimming throughout the program, collect it all in one spot.  For each menu command that may need to be disabled, check the command in this one place for all of the possible conditions and either dim or undim the menu.  This way, if there is a bug, you know exactly where the problem is.\par Of course, you still need to call this subroutine.  In most cases, you can just put the subroutine in the event loop, right before the call to }{\f6\fs20 TaskMaster}{\f4 .  That way, if the event you just handled changed the status of the menus, the menu bar is updated before }{\f6\fs20 TaskMaster}{\f4  gets a shot at an event that might end up pulling down a menu.\par The obvious problem with this method is that it takes time, even if the menus don't need to be changed.  Well, sometimes that's important, and sometimes it isn't.  After all, most of the time spent in the event loop is just time spent waiting on the organic computer at the keyboard to do something, so checking the menu status is sort of the computer equivalent of twiddling your thumbs.  Time consuming work is done outside of the event loop, when the subroutines are called.  Still, maybe the time will be a factor.  To see, try commenting out the call to the subroutine during testing.  After all, you know when the commands are available, right?  If the program runs noticeably faster, go back and make the subroutine itself more efficient, or perhaps set it up so it only gets called when there's a null event.\par I doubt if you'll notice a speed difference, though.  At least, not in this program.  Later in the course, we'll write a program that is a little sensitive to this subroutine, and we'll make a few minor changes \endash  but only for that program.\par \par Problem 7-2:  Update Frame to handle the standard print dialogs.  You will need to add the menu commands "Page Setup..." and "Print..." to your File menu, calling subroutines to make the appropriate Print Manager calls in each case.  You should also set up Frame to create a print record and call }{\f6\fs20 PrDefault}{\f4 .  For now, assume that your program does not save the print record with a document, and set things up appropriately.\par Be sure the print commands are dimmed if no document is open.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Print Loop}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Print Loop\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk45}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once the print record has been filled in by calls to the various Print Manager subroutines it's time to actually print the document.  The print loop is a little complicated, so we'll take it in stages.  Let's start by summarizing the entire print loop.  After that, we'll look at the various steps in detail, learning about several fields in the print record along the way.  Finally, we'll look at an actual print loop.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 spooling}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The print loop is broken up into two parts.  In the first part, you make the calls that actually draw to the printer port.  With some printers, it's possible to spool the printing.  Spooling means that the printing isn't actually done when you issue the various drawing commands; instead, all of the information is saved to a disk file, then the printing is done after you've finished.  That's why there is a second part of the printing process.  After you've finished with the drawing part of the loop, you need to tell the Print Manager it's time to open the spool file and actually start printing.  Of course, if spooled printing wasn't used, the Print Manager knows that and ignores the call.\par Here's an outline of the print loop:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrOpenDoc}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Call }{\f6\fs20 PrOpenDoc}{\f4  to tell the Print Manager to get ready to print.\par \par 2.\tab For each page in your document, do the following:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrOpenPage}}}{\v\f4 \par }\pard \qj\fi-360\li1080\widctlpar\adjustright {\f4 a.\tab Call }{\f6\fs20 PrOpenPage}{\f4  to get the Print Manager ready for a new page.\par \par b.\tab Draw the page, just as you would draw the information in a window.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrClosePage}}}{\v\f4 \par }\pard \qj\fi-360\li1080\widctlpar\adjustright {\f4 c.\tab Call }{\f6\fs20 PrClosePage}{\f4  to tell the Print Manager you're through with this page.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrCloseDoc}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 3.\tab Call }{\f6\fs20 PrCloseDoc}{\f4  to tell the Print Manager you're finished printing.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 spooling}}}{\v\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrError}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrPicFile}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 4.\tab Call }{\f6\fs20 PrError}{\f4  to see if there were any errors while printing.  If not, call }{\f6\fs20 PrPicFile}{\f4 , which will print the document if it was spooled.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Opening the Printer's GrafPort\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 grafPort}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The first step in actually printing a document is to open a }{\f6\fs20 grafPort}{\f4 .  Opening a }{\f6\fs20 grafPort}{\f4  for the printer is a lot like opening a window in the sense that both of these actions give you someplace to draw.  The only difference from your perspective is how you open the }{\f6\fs20 grafPort}{\f4  and how you go about finding out things like how big the drawing area is.  In both cases you use exactly the same drawing commands.  In fact, in a lot of programs, you might even call the same update routine you use to update the document window to draw to the printer's }{\f6\fs20 grafPort}{\f4 .\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrOpenDoc}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You open a printer }{\f6\fs20 grafPort}{\f4  with }{\f6\fs20 PrOpenDoc}{\f4 , like this:\par \par }{\f6\fs20 prPort := PrOpenDoc(dPtr^.prHandle, nil);\par }{\f4 \par The value returned is a }{\f6\fs20 grafPortPtr}{\f4 , just like a window, so you declare }{\f6\fs20 prPort}{\f4  as a }{\f6\fs20 grafPortPtr}{\f4 .  Naturally, one of the things you pass is the print record that has been set up by all of the Print Manager calls we've talked about up to this point.  The last parameter is the }{\f6\fs20 grafPortPtr}{\f4  you want to use; in almost all cases, you just pass nil, telling }{\f6\fs20 PrOpenDoc}{\f4  to create a new grafPort just for printing the document.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Page Sizes and Multiple Pages\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Up until now, we've treated the print record as a black box; something the Print Manager sets up and uses, and that we don't need to know anything about.  There is one thing we have to delve into the print record to find out, though, and that's the size of the page.  The reason, of course, is that we need to know whether the document we're printing will fit on one page, or whether we need to break it up into multiple pages.\par The information we need is actually imbedded in a subrecord inside the main print record.  The subrecord, called }{\f6\fs20 prInfo}{\f4  in the print record, is of type }{\f6\fs20 prInfoRec}{\f4 ; the type is defined like this:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    prInfoRec = record\par        iDev:  integer;\par        iVRes: integer;\par        iHRes: integer;\par        rPage: rect;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The first field doesn't really interest us; it tells what kind of printer is being used.  The two most common values are 1, for an ImageWriter; and 3, for a LaserWriter.  The next two fields give the vertical and horizontal resolution of the printer in pixels per inch.  There are a lot of ways this information can be used, depending on what is being printed.  One common example would be a CAD program, which needs to draw a 1 inch square when you tell it to, no matter what printer is used.  The CAD program could use these fields to find out how many pixels to move in a particular direction to draw a 1 inch line.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 printer page size}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last field, }{\f6\fs20 rPage}{\f4 , is the one we can't do without.  This rectangle defines the actual printable area on a page.  If our document is wider than }{\f6\fs20 rPage.h2-rPage.h1}{\f4  we have to print two pages wide, and if the document is taller than }{\f6\fs20 rPage.v2-rPage.v1}{\f4 , we have to print more than one page high.  In some cases, you might even want to use these values to figure out how much information you will let the user put in the document.  A common example is a word processor, which would make sure that the page wasn't any wider than }{\f6\fs20 rPage.h2-rPage.h1}{\f4 .\par Figuring out just how to map a document onto a printed page depends a lot on the kind of program you are writing, so I'd strongly recommend packaging the process into a subroutine.  That makes Frame a lot easier to change, since all of the information you need to change to print a document is in one neat little subroutine.  The only other change you might have to make is for programs that can save the print record with a document, in which case you have to add the code to save, load, and validate the print record.\par Here's a simple version of the subroutine that assumes the document record has a field called }{\f6\fs20 docRect}{\f4  which defines the total size of the document, and also assumes that you want to print the document with one screen pixel mapping to one printer pixel.\par \par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 procedure GetPageCount(dPtr: documentPtr; var h, v: integer);\par \par \{ Figure out how many printer pages are needed for the document \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    dPtr - document to print                                   \}\par \{    h - (returned) number of horizontal pages in the document  \}\par \{    v - (returned) number of vertical pages in the document    \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \par var\par    infoRec: prInfoRec;                   \{printer info record\}\par \par begin \{GetPageCount\}\par HLock(dPtr^.prHndl);                     \{get a copy of the info record\}\par infoRec := dPtr^.prHndl^^.prInfo;\par HUnlock(dPtr^.prHndl);\par pwidth := infoRec.h2 - infoRec.h1;       \{get the page size\}\par pheight := infoRect.v2 - infoRec.v1;\par with dPtr^.docRect do begin              \{get the document size\}\par    dwidth := h2 - h1;\par    dheight := v2 - v1;\par    end; \{with\}\par h := dwidth div pwidth;                  \{get the page counts\}\par if h*pwidth < dwidth then\par    h := h+1;\par v := dheight div dheight;\par if v*pheight < dheight then\par    v := v+1;\par end; \{GetPageCount\}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 7-2:  Sample }{\f6\fs20 GetPageCount}{\f4  Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par In Frame, we'll just set h and v to 1, and remember to replace these values with more appropriate calculations when Frame is adapted for a specific program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Main Print Loop\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrOpenPage}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrClosePage}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You make a pass through the print loop once for each page that needs to be printed.  In the print loop itself, you do three things: call }{\f6\fs20 PrOpenPage}{\f4  to start a fresh page, draw all of the information for that page, and call }{\f6\fs20 PrClosePage}{\f4  to tell the Print Manager you are finished with the page.\par The first step is to call }{\f6\fs20 PrOpenPage}{\f4 .  This is a pretty simple call:\par \par }{\f6\fs20 PrOpenPage(prPort, nil);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The }{\f6\fs20 prPort}{\f4  parameter, of course, is the printer }{\f6\fs20 grafPort}{\f4  returned by the call to }{\f6\fs20 PrOpenDoc}{\f4 .  The second parameter can point to a rectangle, which the Print Manager will use to automatically scale your drawing.  If you aren't using the automatic scaling feature (and we won't in this course) the parameter is set to nil.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Before you start printing, be sure and set up your drawing tools.  Most of the time, that means calling }{\f6\fs20 PenNormal}{\f4  right after the call to }{\f6\fs20 PrOpenPage}{\f4 .\par The next step is to draw the information that should appear on this page of the document.  By "this page," I'm assuming that you're taking into account which page is actually being printed.  Naturally, you should loop over each of the horizontal and vertical pages the call to }{\f6\fs20 GetPageCount}{\f4  told you to take into account.\par There's one other touchy issue about printing multiple pages, and that's that the Print Manager doesn't shift your image over for you.  For example, let's assume you're printing a 3 page by 3 page document, like the one shown in Figure 7-1.  If you're printing the middle page, it's up to you to subtract the height and width of one sheet of paper from the horizontal and vertical coordinates used for each drawing command.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1047{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex93\picscaley93\piccropl0\piccropr0\piccropt0\piccropb0\picw272\pich203\picwgoal5440\pichgoal4060\macpict\bliptag-1023665150\blipupi72{\*\blipuid c2fc1c02001ac64d2ce5dcf45205510b}0ecdffffffff00ca010f1101a0008201000affffffff00ca010f98001c0000000000a100d80000000000a100d70025003500c7010d000005e75501540006e8aa02a2aa000902555515ea5501540006e8aa02a2aa000902555515ea5501540006e8aa02a2aa000902555515ea5501540006e8aa02a2aa000902555515ea5501540006e8aa02a2aa000902555515ea5501540006e8aa02a2aa000902555515ea550154000af4aa00a8f6aa02a2aa000d02555515f7550050f5550154000bf4aa01a22af7aa02a2aa000e02555515f755014515f6550154000bf4aa01888af7aa02a2aa000e02555515f755011045f6550154000bf4aa012222f7aa02a2aa000f02555515f85502544511f6550154000cf5aa02a88a88f7aa02a2aa000f02555515f85502511544f6550154000df5aa03a22aa22af8aa02a2aa001002555515f8550344555115f7550154000df5aa0388aaa88af8aa02a2aa001002555515f8550311555445f7550154000df5aa0322aaaa22f8aa02a2aa001102555515f955045445555511f7550154000ef6aa04a88aaaaa88f8aa02a2aa001102555515f955045115555544f7550154000ff6aa05a22aaaaaa22af9aa02a2aa001202555515f9550044fe55015115f8550154000ff6aa0088feaa01a88af9aa02a2aa001202555515f9550011fe55015445f8550154000ef6aa0022fdaa0022f9aa02a2aa001202555515fa55015445fd550011f8550154000ff7aa01a88afdaa0088f9aa02a2aa001202555515fa55015115fd550044f85501540010f7aa01a22afdaa01a22afaaa02a2aa001402555515fa55074455555055555115f95501540011f7aa0788aaaa0202aaa88afaaa02a2aa001402555515fa55071155505550555445f9550154000ef7aa0022fbaa0022faaa02a2aa001502555515fb5508544555500000555511f95501540012f8aa04a88aaaaaa8feaa0088faaa02a2aa001502555515fb5508511555505550555544f95501540013f8aa04a22aaaaaa8feaa01a22afbaa02a2aa001602555515fb550944555550555055555115fa5501540013f8aa0088feaa00a8feaa01a88afbaa02a2aa001602555515fb550911555550555055555445fa550154001602aaaa80fb000022feaa00a8fdaa0020fb000202aa001602555545fb5505455555505550fe550015fa550154001602aaaaa0fb00000afeaa00a8fdaa0080fb00020aaa00190355555440fc0005155555505550fe550040fc00030155540019feaa008afeaa010002fdaa00a8fcaa010000feaa038aaaaa001702555554fe5502545551fe5502505550f855035155540019feaa008afeaa01800afdaa00a8fcaa010000feaa038aaaaa001b02555554fe5502541541fe5502505550fd550054fd55035155540018feaa008afeaa00a8fcaa00a8fcaa010aa0feaa038aaaaa001b02555554fe5502541541fe5502505550fd550054fd55035155540018feaa008afeaa00a8fcaa00a8fcaa010aa0feaa038aaaaa001b02555554fe5502541541fe5502505550fd550054fd55035155540018feaa008afeaa00a8fcaa00a8fcaa010aa0feaa038aaaaa001b02555554fe5502541541fe5502505550fd550054fd55035155540018feaa008afeaa00a8fcaa00a8fcaa010aa0feaa038aaaaa001b02555554fe5502541541fe5502505550fd550054fd55035155540018feaa008afeaa00a8fcaa00a8fcaa010aa0feaa038aaaaa001b02555554fe5502541541fe5502500000fd550054fd55035155540015feaa008afeaa01800af7aa010000feaa038aaaaa001b02555554fe5502541541fe5502500000fd550054fd55035155540018feaa008afeaa00a8fcaa00a8fcaa010aa0feaa038aaaaa001b02555554fe5502541541fe5502505550fd550054fd5503515554001bfeaa068aa2aaaaa8aaa2feaa00a8fdaa098a0aa0aaaa2a8aaaaa001d0e555554555155541541515555505550fe55091554555554555155540015feaa018a88fd000008f9000020fd00048a8aaaaa0017045555545551fd550051f9550015fe550554555155540015feaa018a88fd000008f9000020fd00048a8aaaaa001d0e555554555155541541515555545550fe55091554555554555155540016feaa018a88fd800088f98001a000fe80048a8aaaaa001d0e555554555155541541515555505550fe55091554555554555155540016feaa008afe88018008f88809a0000088888a8aaaaa001d0e555554555155545551515555505550fe550015fe550554555155540016feaa058a8808080000f8080920000008088a8aaaaa001c045555545551fd5505515555514141fe550015fe550554555155540015feaa018a88fd000008f9000020fd00048a8aaaaa0017045555545551fd550051f9550015fe55055455515554000bfeaa0080ed00030aaaaa000b02555554ec0003015554000bfeaa008aedaa038aaaaa000c0355555440ed0003115554000bfeaa008aedaa038aaaaa00150355555440fc550041f9550005fd5504501155540013feaa0082fcaa008af9aa00a2fcaa030aaaaa000c0355555450ed0003515554001cfeaa018828fe000b02a0a000008a8800008a0aa0fe0004a08aaaaa001d1b555554514550000151151555544511555545511500005514515554001cfeaa018a2afeaa01a8a8feaa040a82aaaaa8fe2a06aa2aa28aaaaa001d0955555451555000015415fe55014515fe5509505540015554515554001bfeaa018a0afdaa02a82aa8feaa0ca82aaa28aa0a282a828aaaaa001c1255555451155051415514550505555501015451fd550444515554001bfeaa018a2afdaa1228a0aaa82aa82aa82a2aaa0a282aa28aaaaa001b0c55555450155051415500515554fd55015401fd550440515554001bfeaa01882afdaa128aaa0002aaa800002a82aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001d1b555554515550000155515055505555545555155540015554515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaa0002aaa800002aa2aa0a282aa28aaaaa001a0c55555451555051415551505550fc550015fd550454515554001bfeaa018a2afdaa128aaa0002aaa800002aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001bfeaa018a2afdaa128aaaa8aaaaa82aa82aa2aa0a282aa28aaaaa001c1255555451555051415551505550555554555515fd550454515554001cfeaa18800aaa000aaa00aaa8aaaaa82aa82a00aa00002a800aaaaa001a11555554455551555155545055505555545554fb55031155540016feaa0080fb0007aaa8aaaaa82aa82afb00030aaaaa001b045555545515fd550915505550555554555551fd550445515554001afeaa018080fd000920aaa8aaaaa82aa82a08fd0004080aaaaa001b045555545504fd440905505550555554555551fd5504415155540019feaa0080fcaa09a8aaa8aaaaa82aa82a08fd88048a0aaaaa001b045555545504fd440905505550555554555551fd5504415155540018feaa0080fca008a8aa0002aaa800002afc08040a0aaaaa0019045555545504fd440305505550fc550051fd5504415155540018feaa0080fcaa00a8fdaa04a82aa82a08fd88048a0aaaaa001b045555545504fd440905500000555500015551fd5504415155540019feaa01808afd0a0028fdaa04a8aaaa2a08fd80048a0aaaaa001b045555545404fd440905500000555000001541fd5504415155540019feaa018280fd000428a2aaaa2afdaa0028fd00040a0aaaaa0016045555545515fd550014f9000051fd5504455155540015feaa018280fd000028f9aa0028fd00040a0aaaaa000c0355555450ed0003515554000bfeaa008aedaa038aaaaa000b02555554ec5503515554000bfeaa008aedaa038aaaaa000b02555554ec00030155540004e6aa000005e75501540004e6aa000005e75501540004e6aa000005e75501540022005c002eea0022001d007d00eea10096000c02000000020000000000000001000a00000071000c008a2c000c00150948656c7665746963610300150d000a2b750903363430a00097a10096000c02000000020000000000000001000a0058000000640019280061000403333738a0009701000affffffff00ca010f3000260035005d007e300026007d005d00c630002600c5005d010e30005c00c50093010e09000000000000000031005c007d009300c609ffffffffffffffff3830005c00350093007e300092003500c9007e300092007d00c900c630009200c500c9010ea10096000c02000000020000000000000001000a0065008d008900b62b8d0d095072696e74696e67202b080c05746869730d28008600960470616765a0009701000affffffff00ca010f0700020002300025003400c9010ea00083ff}}{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 7-1:  Shifting for Multiple Page Documents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Let's assume that the Print Manager tells us that a page is 378 pixels high, and 640 pixels wide.  If the document is a drawing a picture that is 1134 pixels high and 1920 pixels wide, we might end up with something a lot like the document we just looked at in Figure 7-1.  In that case, when we printed the top left page, everything would work just fine.  The entire picture won't be on the page, but the Print Manager figures that out and only prints the part of the picture that should be printed.  When we print the next page to the right, though, it's very important to subtract 640 from each horizontal coordinate.  For the page being printed in Figure 7-1, we would subtract 640 from each horizontal coordinate, and 378 from each vertical coordinate.\par The simplest thing to do when you draw a page is to just draw the entire document and let the Print Manager figure out what should be on the page and what should be ignored.  That works fine for a lot of programs, but if it takes a long time to do all of the drawing commands, you might want to to some preprocessing yourself.  For example, if you are writing a word processor that will print a 100 page book, you don't want to force QuickDraw II to reformat all 100 pages of text each time a single page is printed.  In a case like that, you should go to the trouble of skipping over the lines that have already been printed, then stopping when you get to the first line that will be on the next page.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrClosePage}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once a page is printed, call }{\f6\fs20 PrClosePage}{\f4  to tell the Print Manager you're through with the page:\par \par }{\f6\fs20 PrClosePage(prPort);\par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Finishing the Print Process\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrCloseDoc}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once all of the pages have been printed in the main print loop, close the document.\par \par }{\f6\fs20 PrCloseDoc(prPort);\par }{\f4 \par If the user didn't ask for spooled printing, or if the Print Manager ignored the user because the printer being used doesn't support spooled printing, this is actually the end of the print loop.  Just in case the document has been spooled, though, you should keep going.  The next step is to check to see if there were any errors flagged during the print loop with a call to }{\f6\fs20 PrError}{\f4 .  If not, you call }{\f6\fs20 PrPicFile}{\f4  to print the document.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    status: PrStatusRec;\par \par ...\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 if PrError = 0 then\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    PrPicFile(dPtr^.prHandle, nil, @status);\par }{\f4 \par The first parameter is the print record, which is natural enough.  The next parameter is the }{\f6\fs20 grafPort}{\f4  you want the Print Manager to use while printing the spooled file.  This is }{\i\f4 not}{\f4  the same }{\f6\fs20 grafPort}{\f4  as the one used when the drawing commands were used in the main print loop; that one was closed by }{\f6\fs20 PrCloseDoc}{\f4 , and doesn't exist anymore.  By passing nil , we're telling the Print Manager to create a working }{\f6\fs20 grafPort}{\f4  for itself.  The last parameter points to a status record.  This record is filled in constantly while the Print Manager prints the spooled document, and you can set up a heartbeat interrupt task that will watch this record and keep the user informed about what is happening.  That's a lot of trouble for a very meager return on the amount of effort you have to expend, so we won't get into that here.  All you have to do is make sure you pass a pointer to a valid status record.\par \par Problem 7-3:  Add the print loop code to Frame.  Use a default }{\f6\fs20 GetPageCount}{\f4  subroutine that always says the document is one page high and one page wide.\par While you aren't printing anything yet, the printer should still cycle, printing a blank page each time you ask the program to print a document.  If you like, add code to print an X.\par \par Problem 7-4:  Add printing to the slide show program you developed as a solution to Problem 6-4.  Keep things simple by assuming that the entire picture will fit on a single page.  With most printers, it will.\par {\*\bkmkend bk45}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 print loop}{\rxe bk45}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 A Few Tips and Tricks}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 A Few Tips and Tricks\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are several odd little things you should know about the Print Manager that I won't go into in detail in this course.  I'll cover a few of them in this section so you know the features exist, but for details you'll have to refer to }{\i\f4 Apple IIGS Toolbox Reference: Volume 1}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Printing a Subrange\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It's possible for the user to pick a subrange of pages to print.  For example, if someone is using a word processor to write a book or long paper, they might want to print just a few pages from a larger document.  The Print Manager lets the user pick a subrange of pages, and it will automatically skip printing the pages that the user didn't ask for.  It's possible for you to poll some fields in the print record to find out if the user asked for a subrange of pages, and with some appropriate tricks, not print the pages that need to be skipped at all.  In some kinds of programs a trick like that could save a lot of time, while in other kinds it just isn't worth the effort, since drawing the document doesn't take much time anyway.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Aborting with Open-Apple Period\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 While the Print Manager is printing a document, it checks for an open-apple period abort key.  If the user holds down the open-apple key and presses the period, the Print Manager will eventually figure that out and stop printing, flagging an error.  If you like, you can draw an alert window with an appropriate message (like "Press open-apple period to cancel") before you drop into the print loop, then close the window after the print loop finishes.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The 10K Check\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 PrPicFile}{\f4  needs one fairly good size chunk of memory, namely one 10K chunk.  There are some situations where }{\f6\fs20 PrPicFile}{\f4  will fail because it can't get this block of memory, but it could have succeeded if you had known in advance that there wasn't enough memory.  This generally happens when your program uses chunks of memory itself for temporary results.  For example, a paint program often keeps a large buffer or two open for something called an off-screen grafPort.  This memory could be freed up if your program knew it was needed.\par If your program falls into this category, you should try to allocate a 10K block of memory before calling }{\f6\fs20 PrPicFile}{\f4 .  If you can't get the memory, stop and dispose of some of your program's temporary buffers, and try again.  Of course, if your program doesn't have any temporary buffers it can dispose of, you can just call }{\f6\fs20 PrPicFile}{\f4  and let it flag an error and return.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Page Gaps and Ribbon Printing\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 page gaps}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the options the user can pick with the ImageWriter printer is "No Gaps Between Pages," which does pretty much what it says.  When the user picks this option, the Print Manager gives you a vertical resolution for the page that goes literally from one fold in the paper to the other.  The neat thing about this option is that it gives you a way to print continuous ribbons from a large document.  For example, you can print a sign sideways, printing a continuous picture that runs right across page gaps.  You can also print a large house plan in a CAD program so the user only has to paste the strips together, and didn't have to tape the drawing together in individual pages.\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1048{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw309\pich152\picwgoal6180\pichgoal3040\macpict\bliptag-1756464198\blipupi72{\*\blipuid 974e7bba1d87401ceb599a4b063d85e4}1827ffffffff009701341101a0008201000affffffff0097013498000800000000004b003800000000004b0035002b00440077006d000002f90002f90006027ffff0fc00070300001fe0fd0007037fffffb8fd0007037ffffffcfd0007037e0001fefd00070303fffc3ffd0007037e0007fffd000804000001ff80fe000804000001bfc0fe000804000001ffe0fe000804003ffdffe0fe000804006004bff0fe000804004004bff8fe0008047fc004eb68fe0008047ffffc7ffcfe00080403900f77fcfe0008000ffeff00ecfe00090778000003efff800009077fffe0003f81800009007ffeff03f781c0000907000007ffffc3e0000907000003801ffee00009070000018071ffe000090700001f87c0fde00009057ffff2fc00e0ff000905000002000070ff000905000002000070ff000905000002000070ff000905000002000078ff000905000002000038ff000905000006000028ff00090500000400003cff00090500000400001eff000905000004000016ff00090500000400001eff00090500000400001eff00090500000400001fff00090700000400000b000008007ffdff02cb000009077ffffe0ffe4b000009077ffffb0f30cb000009077ffffa3b78cb000009077ffffeffc0cb000009077ffffccdfbcb0000090740000cf377cb000009077fffffda7fef000009007ffeff03e7f9000009057ffc07fffc01ff00090700000c000001000009057ffff800000fff0008fe00043ffffb000008007ffdff0082ff0008fe0002ffff82ff0008fe0002f80002ff0006fc000006ff0006fc000006ff0006fc00000eff0006fc00021a000009077ffff8000072000009057ffff80000c2ff0008fe00040fff82000009057ffffff82002ff0007fd00012002ff0007fd0003e002000009007ffeff03e002000009007ffeff01a002ff0007fd00012002ff0007fd00012006ff0007fd00013ffeff0007fd00013ffcff0002f90002f90002f90098000800000000005100380000000000510032002700090079002e000002f90002f90002f90002f90002f90002f90008fe000407ffffc00006fe00007cfd0008fe0004cfffffc0000902000003feff01c0000907000002e00003c0000905000007c1fffeff00090700000fff0003c000070300000bfafd00070300001ffefd00070300003ffcfd00090500003efdffe0ff000905000077e90030ff0009050000ffe90010ff0009070000bff9001fc00009070001fb51ffffc00009050001775f001cff0009070001f6780006000007000ffcff01c00009070c0fe03fffffc00008011c0ffdff01c000070337ffffe0fd000703387f0018fd0007033ff9c038fd0008043f787fffc0fe000907007000107fffc000070300e00010fd00070301c00010fd00070303c00010fd00070303800010fd00070303800010fd00070307800010fd00070307000010fd0007030e000010fd0007030e000018fd0007030e000008fd0007030e000008fd0007031e000008fd0007031c000008fd0007001ffcff01c0000907367fb83fffffc00009073786b82fffffc0000907378fae2fffff800009073789b7bfffff800009073fc6bd9fffff800009073ff3a78c0001c00009073fff3d8fffffc00009072ffffff7ffffc0000801200ffdff01c00007032000000cfd00090738000007ffffc00006023fffe0fc00070010fcff01c000070318ffff80fd0007031800ff80fd00040008fa0004000cfa0004000efa0005010b80fb00090708e00003ffffc000090708300003ffffc0000703081fff80fd000902080100feff01c00005010801fb0006020801e0fc0008010801fdff01c000090208013ffeff01c00005010801fb0005010801fb0005010ffffb0005010ffffb0002f90002f90002f90002f90002f90098002000000000003301000000000000330100006800a3008b012e0000211f178ff7b7beefa9fffda00089f0a0e10525043828418800292829282928292810211f1685ffcebffe7effffa0008a50cf6105250437987c88002fe82fe82fe82fe810211f0ddffbd7b56968a5eca0008a50d2610525043258528800292829282928292810211f03f5ef7b75d867bfbca0008af0d2e105fd043a58528800292829282928292810211f017ffbbbff5e54ecfca0008b50d76105250437587a8800292829282928292810211f005dbffffffdf6eabfa0008a50da6105250432d85688002fe82fe82fe82fe8101c1600577fbfb6d7fbfff5a0008a50d2610525043258528800f9280010211f0054fd5ffacffdce9fa0008af0d2e105fd043a585288002fe82fe82fe82fe810211f0056e77fffaff3623da0008bf0d76105050437587a88002d682d682d682d6810211f005c917f9fed7d68f5a0008b50dae105fd043ad85688002d682d682d682d6810211f004a9ddd5f73f3f7b5a0008b70dbe105ad043ed87688002d682d682d682d6810211f004c81b7fd75eb5cb5a0008bd0dee105ad043bd85e88002d682d682d682d6810211fffc9fe6d7fddc33db5a0008b50dae105ad043ad85688002d682d682d682d6810211f004bffabf9fd72a4b5a0008b50dae105ad043ad85688002d682d682d682d6810211fffcb7e7ee9afb7b0b5a0008b50dae105ad043ad85688002d682d682d682d6810211f0047c96b9fef74cabfa0008bf0dfe105fd043fd87e88002fe82fe82fe82fe81f211f0041c867bf7660d38020008af0d0610401043058428800200820082008200810211fffc1ee5497feeb73ffe003fff0c7e107ff043f1878fe003ff83ff83ff83ff81f210e0041c6f61efde3b1ffe003bffffb7ffeff0df6ffffee003ff83ffb3f1afffa102116ff40ae995abda032a1e00287402a80694a900aa0170a00fe28052e2cc9ffa3fc21168140cc1a7fdbf73cc0c00cf6402a80694a900aa0137980fe10051cd9c3778db42116ff409d6e668efd580000140a402a80694a900aa0128140fe00050d3414ed9a6c1e04807fbc763ffcff0cf7fbc02a80694a900aa01eff7ffdff04d63b007fa91d0c8240b40667bb0340000550623ffaff02e23050fe0005bf3feecefe7f200b82406ee797de003fffe59f82fd000038fe000b020fcc07fffca4b4b92c416b2105aec01fab13dcfe0007058302000e0000eefe000202060afe0005a434a90e0867211fdac00bfd0cb8083fffa5fc0400150081ab0203800101f907fff4b73eedcb6e54211f36c0006805b0082802a70808003581c2aa8706c0008081050054e37c78dfc6f7211fd6c000000418003bfba3f81000358142aa850aa00040ff077f74574af5d5ae9c211f3f7000000cb8000a4a03047000358002aa820aa0003105014940660cd986cc1c211fb5cb000008f8000a4a02feb000558002aa800aa0002bf90149404eb9d3ac9d7e211f33dcecfffce9fffa4be641e000558002aa800ab0003c110149405e3bd78dbc7c211f2a4c3bfb1fefb7fbfbff3fa000558002aa800ab0002fe1017f405a0b5685b40a20057b0bf7eafdfefdff15d04000558002aa800ab00010410fffc03776eddf6eec20044cac5aff5ffdff0df7cff000558002aa800ab0007f81feff05efd5fbf5ffa91c010d3ff9ff15fc0800558002aa800ab0008111ffbffc05febffffffb1501b730f9000a03fc00558002aa800ab001f7ff00fb1e183b1dc1c4a4ca4537592ee30200558002aa800ab00204fe0030fb000006211f0339f67f5abffdf5bf5f753f00558002aa800ab007fefbfdd99b838949958a6f211f73fe6fad2dd5b4bfeaa4570080558002aa800ab00817bdd7fff3ecfeb57fffee1b01ddfbf8ff147fc0558002aa800ab01fec6ca5bfbcdf5a5baf6d7e1702feae7ff9ff0af03fd58002aa800ab0603cf9ff019bfe1c02b61ec0fb000e0fffc000fffc02aa800abfc03fefc0fc000213ea521602bdd240f60008ffc2aa81fff0000d30fb00025f9fbe1002b77840f500023ffffef60002525ae60a02ff6540e700025219ff0a02bb69c0e700025b95ff0a027efb80e7000271bdfd06e4ff02eba4ff07011cf9e400003102e10098002200000000004e011000000000004e010b002300a200530132000002df0002df0002df0002df0002df0006f1000004f00006f1000007f00007f100010780f10007f100010580f10007f1000107c0f10007f1000107a0f10007f100010450f10007f1000107b0f10007f1000104dcf10007f1000105d2f10008f1000206fd80f20008f1000205b680f20007f10001041ef10006f1000004f0000af1000004fc00007ef6000ff7000103f0fd000004fc000042f6000ff700010210fd000004fc00007ef60011f7000103f0fe00feff00f8fe000042f60012f7000c0210000fff54555157ff800042f60012f7000c021007f51554555155457f0042f60012f7000c0210fd5515044011054555f842f60012f7000c02134551100440110044551642f60012f70004023d440110feff04f8440115e2f60012f700040275440ffffe000407ff811572f60012f7000c02d047f0007ffffff0007f105af6001701000ff8ff03407c07fffeaa04afff01f017f8ff0180002321000c5551554555155455510181faaabfffffeaaafc0c045551554555155455518000231f00045551554555155455510e3f57ffc000001fff57e384555155455515545551ff00200d000440110044011004401170d5f8fb000bfd5874401100440110044011ff001f0c0004401100440110044011875ffa000b07d70c401100440110044011ff001201003ff8ff013ae0f900013ae7f8ff01e00016010020f800035700000ffdff0380000750f8000120001701001ff8ff0bb80003f002aaaa007e0000eff8ff01c00017010015f8550b4000feb5eb5556bd53f80015f8550140001701000ff8ff0bc01f01561aaaaac36c07c01ff8ff018000190500080000e2e0fb00096cf5be1f5557c3d57bb0f7000180001a0500080000cda0fc000a01db0d561afffac2ad86dcf7000180001a0500080000d360fc000a036f0faa154015435787b6f7000180001a05000800027d48fc000a05b50d561adfdac2aa856bf7000180001a05000ffffff3f7fcff0afceb0dfe15525543fc86b9f7ff0180001d060004038bcb5c80fd000b08bf0a0e1ad25ac382844880f9000001ff00231f00043ff6c33dbfffbfff8008c10cf6155255437987e8800fffefffefffefffe1ff00231f00042b4df2a4a802a80280089f0d261adfd043258418800a00aa00aa00aa00a1ff00231f00043bf537b6bbfbbbfb8008a50d2e10525043a587c8800efeeefeeefeeefee1ff00231f0004efcfdcdede4a0a4a0008a50d761052504375852880029282928292829281ff00231f0004a92d72dbb64a0a4a0008af0da6105250432d852880029282928292829281ff00231f0004690cf77a6e4a0a4a0008b50d26105fd0432587a880029282928292829281ff00231f00046dca93ffabfa0bfa0008a50d2e10505043a585688002fe82fe82fe82fe81ff00231f0005f7dec37e7e7a0a4a0008a50d76105fd04375852880029282928292829281ff00231f00055dd32b496b4aea4a0008af0dae105ad043ad852880029282928292829281ff00231f00053d834f48660daa4a0008b50dbe105ad043ed87a880029282928292829281ff00231f0006b7adefee54db6bfa0008b70dee105ad043bd85688002fe82fe82fe82fe81ff001f170017b78fc7c6f67d4a0a0008bd0dae105ad043ad87688002fa820081ff0023210014cec1db6e9bdbf7fa0008b50dae105ad043ad85e88002fe82fe82fe82fe81000023210664dfdfe6cc1a0b5fda0008bf0c121fbfefc3ad85688002d682d682d682d6810000232104ef7bf6fa9d6e0b3e5a0008890dfe12554a43fd85688002d682d682d682d6810000232105e7bb7de7ee7f0aaf5a0008f50d0612554a430585688002d682d682d682d6810000232105a43bf5b6b90e10ba1a0008a90f7e12554a43f187e88002d682d682d682d6810000231f03773bdfde7be58ec99a0008af0dd612554a435f84288002d682d682d682d681ff00231f00fd5bfd7749affadbfa0008bd095212554a435487888002fe82fe82fe82fe81ff00231f005f691cff61fdeb7b020008f5095212554a4354877880020082008200820081ff00231f002f6ffafb95efffbffe0008d509521fffffc35485588003ff83ff83ff83ff81ff001f17003cbbfec3a71faa3a0a0008d5097e10000043f485588002fa820081ff001c1600376ddb3fe66f773c040008d50fc21fffffc21f855880f801ff0023160034d9cb4f779bfd58000008ff081e10000043c087f880fe000010fe00011001ff002316009f5badce6deaff68000008810fe2100000423f840880fe000028fe000328010000232102fcfffeeefb9fbb41f00008ff0802100000420087f880007c00ec007c00ec01000023210292df5bfbea5ae4060c00088108021000004200840880018301930183019301000023210290cf77ffffb9ef79f200088108021fffffc200840880027c866cc27c866cc10000232102dcafd7f6daf524d609000881081e1fffffc3f084088004824886448248864100002321038def3f7ff9fd87bfff0008810ffe10000043ff84088007ffcfffc7ffcfffc100002321015db6b5dbf5e7d76f4a0008ff0fe2107ff0420f87f8800292829282928292810000231f0198b4f3fffd9b5feeca0008ff0802104010420087f880029282928292829281ff0030000100050033002f30003200050065002f30006400050096002f30000100010096000650000300020006000550000c0002000f000550001500020018000550001e0002002100055000270002002a00055000300002003300055000390002003c000550004200020045000550004b0002004e000550005400020057000550005d00020060000550006600020069000550006f0002007200055000780002007b000550008100020084000550008a0002008d0005300001002e00960033500003002f0006003250000c002f000f0032500015002f0018003250001e002f00210032500027002f002a0032500030002f00330032500039002f003c0032500042002f0045003250004b002f004e0032500054002f0057003250005d002f00600032500066002f0069003250006f002f00720032500078002f007b0032500081002f0084003250008a002f008d003230000100440033006e30003200440065006e30006400440096006e30000100400096004550000300410006004450000c0041000f004450001500410018004450001e0041002100445000270041002a00445000300041003300445000390041003c004450004200410045004450004b0041004e004450005400410057004450005d00410060004450006600410069004450006f0041007200445000780041007b004450008100410084004450008a0041008d0044300001006d00960072500003006e0006007150000c006e000f0071500015006e0018007150001e006e00210071500027006e002a0071500030006e00330071500039006e003c0071500042006e0045007150004b006e004e0071500054006e0057007150005d006e00600071500066006e0069007150006f006e00720071500078006e007b0071500081006e0084007150008a006e008d007130006801010092013430006800d000920102300068009e009200d1300064009e00690134500065012e00680131500065012500680128500065011c0068011f500065011300680116500065010a0068010d50006501010068010450006500f8006800fb50006500ef006800f250006500e6006800e950006500dd006800e050006500d4006800d750006500cb006800ce50006500c2006800c550006500b9006800bc50006500b0006800b350006500a7006800aa300091009e00960134500092012e00950131500092012500950128500092011c0095011f500092011300950116500092010a0095010d50009201010095010450009200f8009500fb50009200ef009500f250009200e6009500e950009200dd009500e050009200d4009500d750009200cb009500ce50009200c2009500c550009200b9009500bc50009200b0009500b350009200a7009500aa30002901010053013430002900d000530102300029009e005300d1300052009e00570134500053012e00560131500053012500560128500053011c0056011f500053011300560116500053010a0056010d50005301010056010450005300f8005600fb50005300ef005600f250005300e6005600e950005300dd005600e050005300d4005600d750005300cb005600ce50005300c2005600c550005300b9005600bc50005300b0005600b350005300a7005600aa090000000000000000310025009e002a013409ffffffffffffffff38a0008c500026012e00290131500026012500290128500026011c0029011f500026011300290116500026010a0029010d50002601010029010450002600f8002900fb50002600ef002900f250002600e6002900e950002600dd002900e050002600d4002900d750002600cb002900ce50002600c2002900c550002600b9002900bc50002600b0002900b350002600a7002900aaa0008da00083ff}}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 7-2:  Ribbon Printing in Portrait and Landscape Modes\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par To make this work, of course, you have to print the pages in a particular order, and the order changes depending on whether the document is being printed in portrait or landscape mode.  In portrait mode, you should print the document in columns, printing an entire column from top to bottom and then moving on to the next column.  In landscape mode, the document it printed sideways, so you have to switch the printing order, too, printing a row from left to right, then moving to the next row.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson covered the basics of printing from desktop programs using the Print Manager.  Along the way we finished the Frame program, which gives you a great start on almost any desktop program, and learned a new way to start the tools.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 PrDefault\tab PrJobDialog\tab PrCloseDoc\tab PrClosePage\par PrError\tab PrOpenDoc\tab PrOpenPage\tab PrPicFile\par PrStlDialog\tab PrValidate\tab ShutDownTools\tab StartUpTools\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 SysFailMgr\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rToolStartup\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk46}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 printing}{\rxe bk46}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 8 \endash  Thanks for the Memory}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 8 \endash  Thanks for the Memory}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 8 \endash  Thanks for the Memory\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk48}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In past lessons we've made use of Memory Manager calls like }{\f6\fs20 NewHandle}{\f4  and }{\f6\fs20 HLock}{\f4 .  In this lesson, we'll learn about these calls in more detail, exploring the organization of memory on the Apple IIGS and how to effectively use the Memory Manager to get the most out of that memory.  We'll also find out what a handle really is, and look into the advantages and disadvantages of the Memory Manager compared to the standard memory management functions of Pascal, new and dispose.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Memory on the Apple IIGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Memory on the Apple IIGS\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 I'd like to start off with a quick run down on how memory is organized.  I'm doing this mostly to define a few terms, but also to remind you of some computer related facts you don't have to use often in Pascal.  If you've never heard of a byte, bit, or hexadecimal number, this is probably going to be a little to quick.  In that case, I'd recommend looking for a good run down on bits, bytes, binary math, hexadecimal math, and memory organization in a book that goes into a little more detail.  One good source for information like that is an introductory book on assembly language.  Bits and bytes are the bread and butter of assembly language programming, so the beginner books dive into it right away, and generally have a pretty complete description.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 bit}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 byte}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 memory}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Like most modern computers, the memory of the Apple IIGS is organized into addressable units called bytes.  Each byte of memory contains 8 bits, and each bit is an on-off switch.  With a little math, it's easy to see that a byte can hold up to 256 distinct values.\par Each byte of memory has a specific address.  The very first byte of memory has an address of 0, the next byte has an address of 1, and so on.  We generally use hexadecimal math when we talk about memory addresses, mostly because it's easy to see the individual bytes of the address, which is important for reasons we'll talk about in a moment.  The Apple IIGS uses the 65816 CPU.  The 65816 has a three-byte address, and there are two hexadecimal digits in each byte, so we'd write the addresses as $000000, $000001, and so forth.  In practice, we actually use a four byte chunk of memory to store an address, but the fourth byte is not used by the 65816, and rarely written when we're talking about addresses.  We just assume it's zero.\par Because the addresses for bytes of memory are stored in bytes, the computer has some natural chunk sizes for memory.  A page of memory is all of the memory with the same two values in the first two bytes.  Another way of looking at a page of memory is that it's 256 consecutive bytes, numbered $xxxx00 to $xxxxFF, where xxxx has to be the same value.  There are some advantages to keeping some kinds of memory aligned to a page boundary.  The most common is to align something called the direct page register to a page boundary, which makes some kinds of machine language programs run just a bit faster.  Some instructions in the 65816 instruction set also run a tad slower when the memory you are using crosses a page boundary.  Finally, many of the tools ask specifically for memory in page-size chunks, and require that the pages start at an even page boundary.  The Memory Manager has to be able to handle all of this, so it has a flag that lets you tell it to give you a chunk of memory that starts on a page boundary.\par The next natural chunk of memory is called a bank of memory, and it's all of the memory with the same first byte.  For example, $xx0000 to $xxFFFF would be one bank of memory.  A bank of memory is 256 by 256, or 65536 bytes long; we call this 64K, where one K (or Kilobyte) is 1024 bytes.  Banks are important for a lot of reasons.  First, the registers on the 65816 hold two bytes, which means that the computer is a lot more efficient when it deals with information that is in the same bank of memory.  Second, a program can't lie across a bank boundary.  Please notice that I did not say a program can't be in several banks, or that a program can't be bigger than a bank of memory \endash  it can.  The restriction is that a program can't be put in memory so any one piece of it crosses a bank boundary, so all of the pieces must be smaller than 64K, and the all have to be in a specific bank.  The Memory Manager can give you memory that is all in one bank.\par Memory is certainly not created equal.  The 65816 has some special instructions which only work in something called direct page, and direct page memory has to come from bank zero.  (Bank zero is the bank with addresses of $000000 to $00FFFF.  Bank $E1 would be the bank of memory from $E10000 to $E1FFFF, and so on.)  The hardware stack on the 65816 is also restricted to bank zero.  Finally, the Apple IIGS uses a lot of memory in banks $00, $01, $E0 and $E1 for special purposes.  The only memory that's completely free for use by a program is the memory that starts at bank $02, and continues up from there.\par Using the terms from the toolbox reference manuals, the memory that can be used for anything is called "allocatable memory."\par Some memory has a special use, but can be used for something else if you don't need it for the special use.  A good example is the chunk of memory from $E12000 to $E19FFF, which is where the pixels on the screen are stored; that's the only place the screen can go, but if you aren't using the super high resolution graphics screen, you can use that chunk of memory for something else \endash  like your program.  All of this memory is called "special memory," and of course you want to avoid it if you can, just in case it's needed later for its special purpose.  The Memory Manager will let you avoid allocating special memory.\par Memory which can't be used for anything but a very specific purpose, like the language card area or memory mapped I/O areas, is called "unmanaged memory."  The Memory Manager simply won't give you that memory, and you should never try to make use of it unless you know exactly how the Apple IIGS uses that memory, and follow all of the rules imposed by the operating system.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Handles}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Handles\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk47}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In Pascal, C, and most other languages, when you ask for a chunk of memory, you get back a pointer to the first byte of the chunk you get to use.  The pointer, of course, is an address of a byte of memory.  The Apple IIGS Memory Manager doesn't give you a pointer, though.  Instead, you get back something called a handle.  Back when we first started making Memory Manager calls, I told you it was safe to think of a handle as a pointer to a pointer, which is true up to a point.  (Pun intended.)  Actually, a handle is not just a pointer to a pointer, it's a pointer to a record, and the first thing in the record is a pointer.  This is an important distinction, as you'll see in a moment.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Why Handles?\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Before we go any further, though, let's stop and see why the Apple IIGS uses handles instead of pointers.  After all, with all of the confusion and extra code needed to deal with handles, there must be a darn good reason for using them instead of a pointer.\par Let's play a simple mind game, allocating and deallocating memory.  We'll start off and allocate 10 chunks of memory, each 5 bytes long.  Once we're finished, the memory is divided up like you see in Figure 8-1.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1049{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw159\pich129\picwgoal3180\pichgoal2580\macpict\bliptag1582287703\blipupi72{\*\blipuid 5e4fcb574d83b3f490b8c1bd43e8dae9}0831ffffffff0080009e1101a0008201000affffffff0080009e09000000000000000031000100560066009d09ffffffffffffffff380900000000000000003100010056000e006509ffffffffffffffff383000010064000e00733000010072000e00813000010080000e008f300001008e000e009d09000000000000000031000d0056001b006509ffffffffffffffff3809000000000000000031000d0064001b007309ffffffffffffffff3809000000000000000031000d0072001b008109ffffffffffffffff3809000000000000000031000d0080001b008f09ffffffffffffffff3809000000000000000031000d008e001b009d09ffffffffffffffff3830001a00560027006530001a00640027007330001a00720027008130001a00800027008f30001a008e0027009d09000000000000000031002600560034006509ffffffffffffffff3809000000000000000031002600640034007309ffffffffffffffff3809000000000000000031002600720034008109ffffffffffffffff3809000000000000000031002600800034008f09ffffffffffffffff38090000000000000000310026008e0034009d09ffffffffffffffff3830003300560041006530003300640041007330003300720041008130003300800041008f300033008e0041009d0900000000000000003100400056004d006509ffffffffffffffff380900000000000000003100400064004d007309ffffffffffffffff380900000000000000003100400072004d008109ffffffffffffffff380900000000000000003100400080004d008f09ffffffffffffffff38090000000000000000310040008e004d009d09ffffffffffffffff3809000000000000000031004c0056005a006509ffffffffffffffff3809000000000000000031004c0064005a007309ffffffffffffffff3809000000000000000031004c0072005a008109ffffffffffffffff3809000000000000000031004c0080005a008f09ffffffffffffffff3809000000000000000031004c008e005a009d09ffffffffffffffff3809000000000000000031005900560066006509ffffffffffffffff3809000000000000000031005900640066007309ffffffffffffffff3809000000000000000031005900720066008109ffffffffffffffff3809000000000000000031005900800066008f09ffffffffffffffff38090000000000000000310059008e0066009d09ffffffffffffffff3809000000000000000031006500560073006509ffffffffffffffff3809000000000000000031006500640073007309ffffffffffffffff3809000000000000000031006500720073008109ffffffffffffffff3809000000000000000031006500800073008f09ffffffffffffffff38090000000000000000310065008e0073009d09ffffffffffffffff3809000000000000000031007200560080006509ffffffffffffffff3809000000000000000031007200640080007309ffffffffffffffff3809000000000000000031007200720080008109ffffffffffffffff3809000000000000000031007200800080008f09ffffffffffffffff38090000000000000000310072008e0080009d09ffffffffffffffff3871001e0004004a000a005600070056000a004a0007004a0004004a0007005622000700301a00a10096000c02000000020000000000000001000a00010003000d00342c000c00150948656c7665746963610300150d000a2b080a09706f696e7465722031a00097a10096000c02000000020000000000000001000a001b0003002700342a1a09706f696e7465722033a00097a10096000c02000000020000000000000001000a00270003003300342a0c09706f696e7465722034a00097a10096000c02000000020000000000000001000a00330003003f00342a0c09706f696e7465722035a00097a10096000c02000000020000000000000001000a000e0003001a0034280017000809706f696e7465722032a0009701000affffffff0080009e71001e0010004a00160056001300560016004a0013004a0010004a0013005622001300301a0071001e001e004a00240056002100560024004a0021004a001e004a0021005622002100301a0071001e002a004a00300056002d00560030004a002d004a002a004a002d005622002d00301a0071001e0036004a003c005600390056003c004a0039004a0036004a0039005622003900301a00a10096000c02000000020000000000000001000a00400003004c00342a3209706f696e7465722036a0009701000affffffff0080009e71001e0043004a00490056004600560049004a0046004a0043004a0046005622004600301a00a10096000c02000000020000000000000001000a004d0003005900342a0d09706f696e7465722037a0009701000affffffff0080009e71001e004f004a00550056005200560055004a0052004a004f004a0052005622005200301a00a10096000c02000000020000000000000001000a00590003006500342a0c09706f696e7465722038a0009701000affffffff0080009e71001e005c004a00620056005f00560062004a005f004a005c004a005f005622005f00301a00a10096000c02000000020000000000000001000a00650003007100342a0c09706f696e7465722039a0009701000affffffff0080009e71001e0069004a006f0056006c0056006f004a006c004a0069004a006c005622006c00301a00a10096000c02000000020000000000000001000a00710000007d003128007a00020a706f696e746572203130a0009701000affffffff0080009e71001e0073004a00790056007600560079004a0076004a0073004a0076005622007600301a00a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 8-1:  Memory After Initial Allocation\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This is a pretty typical state of affairs in a program that uses dynamic memory, but as you know, it's also fairly common to dispose of memory, and the memory isn't always disposed of in a neat order.  For example, if the program ends up disposing of every other chunk of memory, we end up with memory looking like Figure 8-2.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1050{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw156\pich128\picwgoal3120\pichgoal2560\macpict\bliptag-1432928376\blipupi72{\*\blipuid aa973f8856d930017e2bf108848252e7}0661ffffffff007f009b1101a0008201000affffffff007f009b09000000000000000031000100530066009a09ffffffffffffffff380900000000000000003100010053000e006209ffffffffffffffff383000010061000e0070300001006f000e007e300001007d000e008c300001008b000e009a09112244881122448831000d0053001b006209ffffffffffffffff3809112244881122448831000d0061001b007009ffffffffffffffff3809112244881122448831000d006f001b007e09ffffffffffffffff3809112244881122448831000d007d001b008c09ffffffffffffffff3809112244881122448831000d008b001b009a09ffffffffffffffff3830001a00530027006230001a00610027007030001a006f0027007e30001a007d0027008c30001a008b0027009a09112244881122448831002600530034006209ffffffffffffffff3809112244881122448831002600610034007009ffffffffffffffff38091122448811224488310026006f0034007e09ffffffffffffffff38091122448811224488310026007d0034008c09ffffffffffffffff38091122448811224488310026008b0034009a09ffffffffffffffff38300033005300410062300033006100410070300033006f0041007e300033007d0041008c300033008b0041009a09000000000000000031004b00530059006209ffffffffffffffff3809000000000000000031004b00610059007009ffffffffffffffff3809000000000000000031004b006f0059007e09ffffffffffffffff3809000000000000000031004b007d0059008c09ffffffffffffffff3809000000000000000031004b008b0059009a09ffffffffffffffff3809112244881122448831005800530065006209ffffffffffffffff3809112244881122448831005800610065007009ffffffffffffffff38091122448811224488310058006f0065007e09ffffffffffffffff38091122448811224488310058007d0065008c09ffffffffffffffff38091122448811224488310058008b0065009a09ffffffffffffffff3809000000000000000031006400530072006209ffffffffffffffff3809000000000000000031006400610072007009ffffffffffffffff38090000000000000000310064006f0072007e09ffffffffffffffff38090000000000000000310064007d0072008c09ffffffffffffffff38090000000000000000310064008b0072009a09ffffffffffffffff380911224488112244883100710053007f006209ffffffffffffffff380911224488112244883100710061007f007009ffffffffffffffff38091122448811224488310071006f007f007e09ffffffffffffffff38091122448811224488310071007d007f008c09ffffffffffffffff38091122448811224488310071008b007f009a09ffffffffffffffff3871001e00040047000a005300070053000a0047000700470004004700070053220007002d1a00a10096000c02000000020000000000000001000a00010000000d00312c000c00150948656c7665746963610300150d000a2b050a09706f696e7465722031a00097a10096000c02000000020000000000000001000a001b0000002700312a1a09706f696e7465722035a00097a10096000c02000000020000000000000001000a00270000003300312a0c09706f696e7465722037a00097a10096000c02000000020000000000000001000a00330000003f00312a0c09706f696e7465722039a00097a10096000c02000000020000000000000001000a000e0000001a0031280017000509706f696e7465722033a0009701000affffffff007f009b71001e00180046001e0053001e0053001e0046001b004700180048001e0053220013002d1a0871001e00300046003a0052003a005200350046003300480030004a003a0052220021002d1b1271001e004600460051005100510051004a0046004800480046004b0051005122002d002d1b1b71001e005e00470069005100690051006100470060004a005e004c00690051220039002d1d2709112244881122448831003f0053004d006209ffffffffffffffff3809112244881122448831003f0061004d007009ffffffffffffffff3809112244881122448831003f006f004d007e09ffffffffffffffff3809112244881122448831003f007d004d008c09ffffffffffffffff3809112244881122448831003f008b004d009a09ffffffffffffffff38a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 8-2:  Memory After Deallocation\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par At this point, half of the memory is actually free, for a total of 25 free bytes of memory, but the larges piece of memory available is only 5 bytes long.  If a program asks for a 6 byte piece of memory, it can't get it \endash  and the program might easily fail with an out of memory error, even though there's more than four times as much memory available as it asked for.\par The problem, of course, is that the memory that is available isn't in a single place.  The solution would be to move the allocated pieces of memory together so the 25 free bytes are all in one place, but if we do that, all of the pointers in the program are invalid \endash  they all point to the wrong place.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1051{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw156\pich128\picwgoal3120\pichgoal2560\macpict\bliptag583545873\blipupi72{\*\blipuid 22c83411507d8734a1b0c0d6ca346cbc}0661ffffffff007f009b1101a0008201000affffffff007f009b09000000000000000031000100530066009a09ffffffffffffffff380900000000000000003100010053000e006209ffffffffffffffff383000010061000e0070300001006f000e007e300001007d000e008c300001008b000e009a09000000000000000031000d0053001b006209ffffffffffffffff3809000000000000000031000d0061001b007009ffffffffffffffff3809000000000000000031000d006f001b007e09ffffffffffffffff3809000000000000000031000d007d001b008c09ffffffffffffffff3809000000000000000031000d008b001b009a09ffffffffffffffff3830001a00530027006230001a00610027007030001a006f0027007e30001a007d0027008c30001a008b0027009a09000000000000000031002600530034006209ffffffffffffffff3809000000000000000031002600610034007009ffffffffffffffff38090000000000000000310026006f0034007e09ffffffffffffffff38090000000000000000310026007d0034008c09ffffffffffffffff38090000000000000000310026008b0034009a09ffffffffffffffff38300033005300410062300033006100410070300033006f0041007e300033007d0041008c300033008b0041009a09112244881122448831004b00530059006209ffffffffffffffff3809112244881122448831004b00610059007009ffffffffffffffff3809112244881122448831004b006f0059007e09ffffffffffffffff3809112244881122448831004b007d0059008c09ffffffffffffffff3809112244881122448831004b008b0059009a09ffffffffffffffff3809112244881122448831005800530065006209ffffffffffffffff3809112244881122448831005800610065007009ffffffffffffffff38091122448811224488310058006f0065007e09ffffffffffffffff38091122448811224488310058007d0065008c09ffffffffffffffff38091122448811224488310058008b0065009a09ffffffffffffffff3809112244881122448831006400530072006209ffffffffffffffff3809112244881122448831006400610072007009ffffffffffffffff38091122448811224488310064006f0072007e09ffffffffffffffff38091122448811224488310064007d0072008c09ffffffffffffffff38091122448811224488310064008b0072009a09ffffffffffffffff380911224488112244883100710053007f006209ffffffffffffffff380911224488112244883100710061007f007009ffffffffffffffff38091122448811224488310071006f007f007e09ffffffffffffffff38091122448811224488310071007d007f008c09ffffffffffffffff38091122448811224488310071008b007f009a09ffffffffffffffff3871001e00040047000a005300070053000a0047000700470004004700070053220007002d1a00a10096000c02000000020000000000000001000a00010000000d00312c000c00150948656c7665746963610300150d000a2b050a09706f696e7465722031a00097a10096000c02000000020000000000000001000a001b0000002700312a1a09706f696e7465722035a00097a10096000c02000000020000000000000001000a00270000003300312a0c09706f696e7465722037a00097a10096000c02000000020000000000000001000a00330000003f00312a0c09706f696e7465722039a00097a10096000c02000000020000000000000001000a000e0000001a0031280017000509706f696e7465722033a0009701000affffffff007f009b71001e00180046001e0053001e0053001e0046001b004700180048001e0053220013002d1a0871001e00300046003a0052003a005200350046003300480030004a003a0052220021002d1b1271001e004600460051005100510051004a0046004800480046004b0051005122002d002d1b1b71001e005e00470069005100690051006100470060004a005e004c00690051220039002d1d2709112244881122448831003f0053004d006209ffffffffffffffff3809112244881122448831003f0061004d007009ffffffffffffffff3809112244881122448831003f006f004d007e09ffffffffffffffff3809112244881122448831003f007d004d008c09ffffffffffffffff3809112244881122448831003f008b004d009a09ffffffffffffffff38a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 8-3:  Memory After Compaction\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Handles solve this problem very neatly.  Instead of keeping a pointer to the chunk of memory, the program has a pointer to a chunk of memory that, in turn, points to the memory.  That way, when the Memory Manager moves the memory around to combine the smaller pieces, the program doesn't get messed up.  After all, the program doesn't keep a pointer to the memory at all, it keeps a pointer to a pointer, and the Memory Manager is free to update the actual pointers as the memory is moved around.\par \par }\pard \qc\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1052{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw444\pich129\picwgoal8880\pichgoal2580\macpict\bliptag-1943209641\blipupi72{\*\blipuid 8c2cf95728786fe44910d4073788194e}0fd5ffffffff008001bb1101a0008201000affffffff008001bb0900000000000000003100010173006601ba09ffffffffffffffff380900000000000000003100010173000e018209ffffffffffffffff383000010181000e0190300001018f000e019e300001019d000e01ac30000101ab000e01ba09000000000000000031000d0173001b018209ffffffffffffffff3809000000000000000031000d0181001b019009ffffffffffffffff3809000000000000000031000d018f001b019e09ffffffffffffffff3809000000000000000031000d019d001b01ac09ffffffffffffffff3809000000000000000031000d01ab001b01ba09ffffffffffffffff3830001a01730027018230001a01810027019030001a018f0027019e30001a019d002701ac30001a01ab002701ba09000000000000000031002601730034018209ffffffffffffffff3809000000000000000031002601810034019009ffffffffffffffff38090000000000000000310026018f0034019e09ffffffffffffffff38090000000000000000310026019d003401ac09ffffffffffffffff3809000000000000000031002601ab003401ba09ffffffffffffffff38300033017300410182300033018100410190300033018f0041019e300033019d004101ac30003301ab004101ba0911224488112244883100400173004d018209ffffffffffffffff380911224488112244883100400181004d019009ffffffffffffffff38091122448811224488310040018f004d019e09ffffffffffffffff38091122448811224488310040019d004d01ac09ffffffffffffffff3809112244881122448831004001ab004d01ba09ffffffffffffffff3809112244881122448831004c0173005a018209ffffffffffffffff3809112244881122448831004c0181005a019009ffffffffffffffff3809112244881122448831004c018f005a019e09ffffffffffffffff3809112244881122448831004c019d005a01ac09ffffffffffffffff3809112244881122448831004c01ab005a01ba09ffffffffffffffff3809112244881122448831005901730066018209ffffffffffffffff3809112244881122448831005901810066019009ffffffffffffffff38091122448811224488310059018f0066019e09ffffffffffffffff38091122448811224488310059019d006601ac09ffffffffffffffff3809112244881122448831005901ab006601ba09ffffffffffffffff3809112244881122448831006501730073018209ffffffffffffffff3809112244881122448831006501810073019009ffffffffffffffff38091122448811224488310065018f0073019e09ffffffffffffffff38091122448811224488310065019d007301ac09ffffffffffffffff3809112244881122448831006501ab007301ba09ffffffffffffffff3809112244881122448831007201730080018209ffffffffffffffff3809112244881122448831007201810080019009ffffffffffffffff38091122448811224488310072018f0080019e09ffffffffffffffff38091122448811224488310072019d008001ac09ffffffffffffffff3809112244881122448831007201ab008001ba09ffffffffffffffff3871001e00040167000a017300070173000a016700070167000401670007017322000701561100a10096000c02000000020000000000000001000a00010129000d015a2c000c00150948656c7665746963610300150d000a28000a012e09706f696e7465722031a00097a10096000c02000000020000000000000001000a001b01290027015a2a1a09706f696e7465722035a00097a10096000c02000000020000000000000001000a002701290033015a2a0c09706f696e7465722037a00097a10096000c02000000020000000000000001000a00330129003f015a2a0c09706f696e7465722039a00097a10096000c02000000020000000000000001000a000e0129001a015a280017012e09706f696e7465722033a0009701000affffffff008001bb71001e001001670016017300130173001601670013016700100167001301732200130156110071001e001e016700240173002101730024016700210167001e0167002101732200210156110071001e002a016700300173002d017300300167002d0167002a0167002d017322002d0156110071001e00360167003c017300390173003c01670039016700360167003901732200390156110071001e0004011f000a012b0007012b000a011f0007011f0004011f0007012b220007010e1100a10096000c02000000020000000000000001000a000100e1000d011228000a00e60868616e646c652031a00097a10096000c02000000020000000000000001000a001b00e1002701122a1a0868616e646c652035a00097a10096000c02000000020000000000000001000a002700e1003301122a0c0868616e646c652037a00097a10096000c02000000020000000000000001000a003300e1003f01122a0c0868616e646c652039a00097a10096000c02000000020000000000000001000a000e00e1001a011228001700e60868616e646c652033a0009701000affffffff008001bb71001e0010011f0016012b0013012b0016011f0013011f0010011f0013012b220013010e110071001e001e011f0024012b0021012b0024011f0021011f001e011f0021012b220021010e110071001e002a011f0030012b002d012b0030011f002d011f002a011f002d012b22002d010e110071001e0036011f003c012b0039012b003c011f0039011f0036011f0039012b220039010e1100090000000000000000310001009b006600e209ffffffffffffffff38090000000000000000310001009b000e00aa09ffffffffffffffff3830000100a9000e00b830000100b7000e00c630000100c5000e00d430000100d3000e00e209112244881122448831000d009b001b00aa09ffffffffffffffff3809112244881122448831000d00a9001b00b809ffffffffffffffff3809112244881122448831000d00b7001b00c609ffffffffffffffff3809112244881122448831000d00c5001b00d409ffffffffffffffff3809112244881122448831000d00d3001b00e209ffffffffffffffff3830001a009b002700aa30001a00a9002700b830001a00b7002700c630001a00c5002700d430001a00d3002700e2091122448811224488310026009b003400aa09ffffffffffffffff3809112244881122448831002600a9003400b809ffffffffffffffff3809112244881122448831002600b7003400c609ffffffffffffffff3809112244881122448831002600c5003400d409ffffffffffffffff3809112244881122448831002600d3003400e209ffffffffffffffff38300033009b004100aa30003300a9004100b830003300b7004100c630003300c5004100d430003300d3004100e209000000000000000031004b009b005900aa09ffffffffffffffff3809000000000000000031004b00a9005900b809ffffffffffffffff3809000000000000000031004b00b7005900c609ffffffffffffffff3809000000000000000031004b00c5005900d409ffffffffffffffff3809000000000000000031004b00d3005900e209ffffffffffffffff38091122448811224488310058009b006500aa09ffffffffffffffff3809112244881122448831005800a9006500b809ffffffffffffffff3809112244881122448831005800b7006500c609ffffffffffffffff3809112244881122448831005800c5006500d409ffffffffffffffff3809112244881122448831005800d3006500e209ffffffffffffffff38090000000000000000310064009b007200aa09ffffffffffffffff3809000000000000000031006400a9007200b809ffffffffffffffff3809000000000000000031006400b7007200c609ffffffffffffffff3809000000000000000031006400c5007200d409ffffffffffffffff3809000000000000000031006400d3007200e209ffffffffffffffff38091122448811224488310071009b007f00aa09ffffffffffffffff3809112244881122448831007100a9007f00b809ffffffffffffffff3809112244881122448831007100b7007f00c609ffffffffffffffff3809112244881122448831007100c5007f00d409ffffffffffffffff3809112244881122448831007100d3007f00e209ffffffffffffffff3871001e0004008f000a009b0007009b000a008f0007008f0004008f0007009b22000700751a00a10096000c02000000020000000000000001000a00010048000d007928000a004d09706f696e7465722031a00097a10096000c02000000020000000000000001000a001b0048002700792a1a09706f696e7465722035a00097a10096000c02000000020000000000000001000a00270048003300792a0c09706f696e7465722037a00097a10096000c02000000020000000000000001000a00330048003f00792a0c09706f696e7465722039a00097a10096000c02000000020000000000000001000a000e0048001a0079280017004d09706f696e7465722033a0009701000affffffff008001bb71001e0018008e001e009b001e009b001e008e001b008f00180090001e009b22001300751a0871001e0030008e003a009a003a009a0035008e0033009000300092003a009a22002100751b1271001e0046008e0051009900510099004a008e00480090004600930051009922002d00751b1b71001e005e008f00690099006900990061008f00600092005e00940069009922003900751d2771001e0004003e000a004a0007004a000a003e0007003e0004003e0007004a220007002d1100a10096000c02000000020000000000000001000a00010000000d003128000a00050868616e646c652031a00097a10096000c02000000020000000000000001000a001b0000002700312a1a0868616e646c652035a00097a10096000c02000000020000000000000001000a00270000003300312a0c0868616e646c652037a00097a10096000c02000000020000000000000001000a00330000003f00312a0c0868616e646c652039a00097a10096000c02000000020000000000000001000a000e0000001a003128001700050868616e646c652033a0009701000affffffff008001bb71001e0010003e0016004a0013004a0016003e0013003e0010003e0013004a220013002d110071001e001e003e0024004a0021004a0024003e0021003e001e003e0021004a220021002d110071001e002a003e0030004a002d004a0030003e002d003e002a003e002d004a22002d002d110071001e0036003e003c004a0039004a003c003e0039003e0036003e0039004a220039002d110009112244881122448831003f009b004d00aa09ffffffffffffffff3809112244881122448831003f00a9004d00b809ffffffffffffffff3809112244881122448831003f00b7004d00c609ffffffffffffffff3809112244881122448831003f00c5004d00d409ffffffffffffffff3809112244881122448831003f00d3004d00e209ffffffffffffffff38a00083ff}}{\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 8-4:  Compaction with Handles\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Locking Memory\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Of course, there are some problems with this scheme.  The obvious problem is that there are a lot of cases when you don't want something to move.  If you know much about machine language programs, you can imagine the havoc it would play with a program to move the program itself, or even the program's data, while the program was trying to run!  Even for your own dynamic memory, there may be times when you need to keep pointers to the memory, and it would blow your program out of the water if something moved.  Finally, even if it's OK for a chunk of memory to me moveable most of the time, it needs to hold still while you are trying to read or write to the area \endash  and on a machine like the Apple IIGS, which has a lot of interrupt handlers running in the background, it's quite possible for something to make a Memory Manager call that will shift memory around even if you aren't making any tool calls in your subroutine.  In short, the ability to move chunks of memory around to combine small free pieces into larger ones is pretty neat, but there are a lot or problems with this scheme.\par The Memory Manager handles all of this fairly smoothly with the concept of locked memory.  A locked chunk of memory can't be moved.  If you'll think back, we've been locking and unlocking memory all along, and this is why we've been doing it.  When you are about to read or write to a chunk of memory through a handle, the first step is to lock the memory.  If you like, you can then get the actual pointer; that's called dereferencing the handle, and in some cases it will make your program run a lot faster.  Finally, when you're through with a piece of memory, you unlock it so the Memory Manager can move it again if it needs to.\par So far things look pretty good, but what if you accidentally unlock a chunk of memory that should }{\i\f4 never}{\f4  be moved, like a chunk of memory that holds some executable code?  To prevent that, the Memory Manager lets you ask for memory that is fixed, which basically means that it is always locked.  You can still use }{\f6\fs20 HLock}{\f4  and }{\f6\fs20 HUnlock}{\f4 , and you won't get an error, but the Memory Manager will never move the memory, even if it is unlocked.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Purgeable Memory\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Another really useful feature of the Memory Manager is it's ability to mark memory as purgeable.  When memory is purgeable, it's still there, but the Memory Manager is allowed to get rid of it if someone asks for memory, and there isn't enough around to satisfy the request.\par It may seem strange to have such a thing as purgeable memory, and in a lot of programs you'll never use this idea, but you're still getting the advantage of purgeable memory all of the time.  One way you can take advantage of purgeable memory is to write programs that don't depend on the initial values of global variables.  Basically, that means never assuming that a global variable really starts off with a value of 0.  (Just for the record, the Pascal language doesn't guarantee the initial value of variables anyway, and technically it's an error to read the value of any variable in Pascal until you've actually assigned some value to the variable.  ORCA/Pascal just doesn't enforce that restriction.)  When you do this, your program can be restarted.  What that means is that when you leave the program, it stays in memory \endash  and if the user restarts your program before anything else uses the memory, it starts up from memory, rather than taking the time to reload the program from disk.\par Another place this idea is used is in the ORCA development environment.  When you load a file from disk to edit it or compile it, then close the file, the ORCA shell doesn't actually get rid of the file.  Instead, the file is written to disk, but it stays in memory, too.  Then, when you edit the file again, the copy that's already in memory can be used, saving a lot of time.\par These are the sorts of things you might use purgeable memory for in your own programs, too.  Basically, any time you have temporary information \endash  something you could get from disk or recalculate if you need it again \endash  you should store the information in purgeable memory.  That way, if someone else needs the memory, your purgeable chunk can be used.  In all likelihood, whoever used the memory will free up the memory again before you need it.  All you have to do is check the handle to make sure the memory hasn't been purged before you lock it.  And, incidentally, locking the memory also prevents it from being purged, so the information is safe until you unlock it again.\par We'll look at the calls to mark memory as purgeable, as well as looking at some details about purge levels and the like, a little later in this lesson.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 How Memory is Allocated\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 All of this is starting to get pretty involved.  Memory can be fixed or moveable, purgeable or not purgeable, locked or unlocked \endash  with all of these options, it might seem like it would be pretty easy to end up with memory that was almost as fragmented as with pointers.  Well, it would be \endash  except for a convention the Memory Manager uses when it allocates memory, and that you have to follow to make things work smoothly.\par If your program deals exclusively or mainly with fixed chunks of memory, and does a lot of allocating and deallocating in no particular order, it won't be long before memory gets pretty fragmented.  Also, the current Memory Manager won't change the order of chunks of memory; it just pushes moveable chunks as far towards the end of memory as it can when it needs to make room.  Because of this, if moveable and fixed memory is more or less randomly scattered through memory, you'll still fragment the memory pretty quickly, since the moveable chunks won't be moved around the fixed chunks.\par Obviously, things will work better if the fixed memory is kept near the bottom of memory, and doesn't have many gaps; and if moveable memory is kept near the top of memory, and doesn't have any fixed memory stuffed in the middle.  That's just what the Memory Manager tries to do for you.  If you ask for fixed memory, the Memory Manager gives you the first chunk of memory it can find that meets all of your requirements, starting its search from the lowest memory address and working up.  If you ask for moveable memory, the Memory Manager scans from the end of memory, and works towards the beginning.\par You have to help, though.  If you are asking for a fixed piece of memory, you should make sure it's a chunk that will stay around for a while.  If you won't need the memory long, it might be best to ask for a moveable piece of memory and just keep it locked.  That way, the fixed memory area won't get fragmented.  And, if you ask for moveable memory, you should do everything you can to keep it moveable as much as possible.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Writing Efficient Programs\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the problems with the Memory Manager is that it doesn't deal with huge numbers of handles very well.  As your program, the tools, and the various desk accessories and Inits start to allocate memory, some operations will slow down noticeably compared to a configuration that uses fewer handles.  To keep this problem at bay, I'd recommend allocating a few large chunks of memory instead of a lot of small ones.  That's what ORCA/Pascal does when you use the }{\f6\fs20 new}{\f4  and }{\f6\fs20 dispose}{\f4  procedures, so if you need a lot of small pieces of fixed memory, just use }{\f6\fs20 new}{\f4  and }{\f6\fs20 dispose}{\f4 .  You get better type checking, anyway.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 So What's a Handle?\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Even up until this point, everything we've said about a handle is that it's a pointer to a pointer.  For the most part, that's exactly how you should think of it.  If you stop and think about it, though, you can see that the Memory Manager needs to know a lot more about a chunk of memory than where it is at.  The Memory Manager has to keep track of whether the memory is fixed or moveable, whether it's locked at the moment, and whether the memory is purgeable.  It also needs to know how big the chunk of memory is, whether it has to remain in a fixed bank, whether it is page aligned or bank aligned, and even who owns the memory.  All of that information, and more, is in the record the Memory Manager uses for each and every handle.  The first field in that record is certainly a pointer to the memory, but that isn't all that's in the handle.  So what is actually in the record?  Well, to put it bluntly, it's none of our business.  Except for the first field, the format for a handle is private, and only the Memory Manager knows or cares just what the record looks like.  That's good in most respects, because it means Apple can change and improve the Memory Manager without worrying (much) about breaking other programs.\par The point, though, is that a handle is really not just a pointer to a pointer.  If some tool call asks for a handle, you darn well better give it one.  Don't assume that it's OK to just pass the address of a pointer, or even a pointer to a pointer.  Even if you try it and it works, the toolbox may change in some future version, and break your program.  If the description of a tool call says you are supposed to use a handle, accept no substitutes: pass a handle that was actually created by the Memory Manager.\par {\*\bkmkend bk47}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 handles}{\rxe bk47}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Allocating Memory}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Allocating Memory\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewHandle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 With all of the newfound knowledge, let's go back and take a closer look at the }{\f6\fs20 NewHandle}{\f4  call, and especially at the flags word.  The }{\f6\fs20 NewHandle}{\f4  call looks like this:\par \par }{\f6\fs20 hndl := NewHandle(size, userID, attributes, location);\par }{\f4 \par The size is just the number of bytes you want, and of course the result is a handle.  (If there is an error, nil is returned.)  It's the last three parameters that can be more useful than you would expect from what was mentioned in earlier lessons.\par The }{\f6\fs20 userID}{\f4  is a unique number assigned to your program when it was started.  You can actually ask for your own user ID, but it's rarely a good idea to do that.  The reason is simple: the program launcher that starts your program knows its user ID, and when your program finishes, the program launcher can make sure all of its memory is deallocated, even if your program messes up.  If the program allocates another user ID of its own, the program launcher can't double-check to make sure all of the memory gets deallocated.\par On the other hand, it's nice to be able to set aside some user ID's for yourself, mostly because there are a few Memory Manager calls that can work on a whole group of handles, doing something to all of the handles with a particular user ID.  A common example is }{\f6\fs20 DisposeAll}{\f4 , which disposes of all of the handles that use a particular user ID at the same time.  You can get four distinct sub-user ID's to help make efficient use of the calls that work on more than one handle without resorting to allocating an entirely new user ID.  All you have to do is or the main user ID with $0100, $0200, or $0300.  In fact, ORCA/Pascal does exactly that \endash  when you use ORCA/Pascal's }{\f6\fs20 UserID}{\f4  function, it returns the program's main user ID ored with $0100.\par The attributes flag is the parameter that gives you the most control over the way memory is actually allocated.  This parameter is a series of bit flags.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HLock}}}{\v\f4 \par }\pard \qj\fi-2160\li2520\widctlpar\tx1080\adjustright {\f4 15\tab }{\f6\fs20 attrLocked}{\f4 \tab This bit is set when a handle is locked, and clear when it is not locked.  It's pretty handy when you're allocating memory, since you can allocate the memory in an initial locked state, saving yourself the trouble of an explicit call to }{\f6\fs20 HLock}{\f4  to lock the new handle.\par \par 14\tab }{\f6\fs20 attrFixed}{\f4 \tab This bit is set for fixed memory, and clear for moveable memory.  Both bits 14 and 15 must be clear before the Memory Manager will actually move the memory.\par \par 13-10\tab \tab Reserved; set to 0.\par \par 9-8\tab }{\f6\fs20 attrPurge}{\f4 \tab These two bits define the initial purge level, which can be 0 (00), 1 (01), 2 (10) or 3 (11).  Purge levels are described later in this lesson.\par \par 7-5\tab \tab Reserved; set to 0.\par \par 4\tab }{\f6\fs20 attrNoCross}{\f4 \tab If this bit is set, the Memory Manager will make sure that all of the memory is in a single bank of memory.  This can be pretty important for some applications.  For example, you should always set this bit if you are bypassing Pascal's }{\f6\fs20 new}{\f4  and }{\f6\fs20 dispose}{\f4  calls, but will be using Pascal to access arrays or pointers in the memory.\par \par \tab \tab A common mistake is to ask for more than 64K of memory but set this flag.  Since a bank of memory can only hold 64K, there is no way to allocate more than 64K without crossing a bank boundary, and the Memory Manager returns an out of memory error.\par \par 3\tab }{\f6\fs20 attrNoSpec}{\f4 \tab If this bit is set, the Memory Manager won't give you any special memory.\par \par 2\tab }{\f6\fs20 attrPage}{\f4 \tab If this bit is set, the Memory Manager will make sure the chunk of memory it returns starts on a page boundary.  Another way of looking at it is that the last two digits of the address will be 00.\par \par \tab \tab The most common use for this flag is when you are starting tools without the assistance of }{\f6\fs20 StartDesk}{\f4  or }{\f6\fs20 StartUpTools}{\f4 .  Many of the tools ask for page aligned chunks of memory from bank zero, and you need to set this flag to satisfy the "page aligned" part of the requirement.\par \par 1\tab }{\f6\fs20 attrAddr}{\f4 \tab The toolbox documentation is a little misleading when it describes this flag; it says the flag forces the memory to }{\i\f4 remain}{\f4  at a fixed address.  Actually, this flag forces the memory to be }{\i\f4 allocated}{\f4  at a particular location; specifically, wherever the last parameter, }{\f6\fs20 location}{\f4 , points.  The }{\f6\fs20 attrFixed}{\f4  flag is the one that causes a chunk of memory to stay at a fixed location once it is allocated.\par \par \tab \tab You should almost never use this flag.  The only excuse is when you need a specific piece of memory that is set aside for a particular purpose.  For example, QuickDraw II would use this flag to allocate the screen buffer for the super high resolution graphics screen, which has to be at $E12000.  Some animation programs might also use this flag to allocate the shadow buffer.\par \par 0\tab }{\f6\fs20 attrBank}{\f4 \tab If this flag is set, the memory will come from a specific bank, but it can come from anywhere in the bank.  The most common use for this flag is also for allocating direct page space when initializing tools.\par \par \tab \tab When this flag is set, the last parameter, }{\f6\fs20 location}{\f4 , should point to the proper bank.  It doesn't matter where in the bank }{\f6\fs20 location}{\f4  points; the last two bytes of this address are ignored.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The last parameter, }{\f6\fs20 location}{\f4 , is only used if }{\f6\fs20 attrAddr}{\f4  or }{\f6\fs20 attrBank}{\f4  is set.\par Most of the time you'll ask for memory with a flags word of $8000 or $8010, giving you a moveable chunk of memory that starts locked.  The later case of $8010 also makes sure the memory doesn't cross a bank boundary.  The next most common values would be $C000 or $C010, which gives you a chunk of memory that will never be moved.  In rare cases, you might ask for memory with a flags word of $C015, which says that the memory is fixed, may not cross a bank boundary, is page aligned, and comes from a particular bank.  That's the correct setting for allocating memory from bank zero when you're initializing a tool.  For example, the Print Manager needs one page of memory, so you would get it like this:\par \par }{\f6\fs20 printHandle := NewHandle(256, userID, $C015, pointer(0));\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Even better is to let }{\f6\fs20 StartUpTools}{\f4  start the Print Manager so you don't have to worry about this sort of detail.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Purgeable Memory}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Purgeable Memory\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 purgeable memory}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 At the start of the lesson we talked about a lot of the different things the Memory Manager can do with memory, and one of these was to mark memory as purgeable.  The Memory Manager is allowed to dispose of purgeable memory if it needs to to try and satisfy a }{\f6\fs20 NewHandle}{\f4  call.\par Of course, some things are more important than others, so there are purge levels.  Memory that can't be purged has a purge level of 0.  Purge levels of 1, 2 and 3 are successively more likely to be purged; the Memory Manager will purge all of the memory with a purge level of 3 before it gets desperate and starts in on the memory with a purge level of 2.  Purge level 3 is actually reserved for the System Loader, which uses it for restartable programs.\par You can set the purge level when the memory is originally allocated, or you can set the purge level later with }{\f6\fs20 SetPurge}{\f4 :\par \par }{\f6\fs20 SetPurge(level, myHandle);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Either way, the memory won't be purged if it is locked.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 So what happens if the memory is purged?  Well, the handle is still there, but the pointer is nil (which has a value of 0).  So, if you are using purgeable memory, always start by locking the memory, then check to see if the pointer is nil.  If it is, you need to reallocate the memory and recalculate or reload whatever should be in the chunk of memory.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Finding Free Memory}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Finding Free Memory\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FreeMem}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are three Memory Manager calls that can give you some idea of how much memory is available, although none tell you enough to tell if a particular request is going to succeed.  The first is }{\f6\fs20 FreeMem}{\f4 , which doesn't use any parameters, and returns the total number of free bytes.  This does not include memory that can be made free by purging; it only counts the bytes that are actually unused when }{\f6\fs20 FreeMem}{\f4  is called.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 RealFreeMem}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you want to know how much memory is available, use }{\f6\fs20 RealFreeMem}{\f4 .  Like }{\f6\fs20 FreeMem}{\f4 , this call doesn't need any parameters, and returns a longint value that is the number of free bytes.  This time, though, the call also counts any bytes that are in an unlocked, purgeable chunk of memory.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MaxBlock}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 FreeMem}{\f4  and }{\f6\fs20 RealFreeMem}{\f4  tell you the total amount of free memory, but they don't give you a clue about how that memory is organized.  The most useful single number about how memory is organized is the largest single piece of free memory, which is returned by }{\f6\fs20 MaxBlock}{\f4 .  Like the other calls, it doesn't need any parameters.  }{\f6\fs20 MaxBlock}{\f4  returns the size of the largest piece of free memory.  Like }{\f6\fs20 FreeMem}{\f4 , it doesn't take into account purgeable memory, so you might be able to allocate a bigger block of memory than }{\f6\fs20 MaxBlock}{\f4  says is available.\par In the end, these numbers don't mean much to a running program.  The only way to tell if you can get a particular chunk of memory is to try.  These calls can be useful, though, to tell the user how much memory is lying around.\par \par Problem 8-1:  Change Frame so the about box shows the total free memory (as returned by }{\f6\fs20 RealFreeMem}{\f4 ) and the largest block of free memory (as returned by }{\f6\fs20 MaxBlock}{\f4 ).  Hint:  Use substitution strings.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson has covered the concepts behind the Memory Manager.  You learned what a handle really is, how memory is managed by the Memory Manager, how to use purgeable memory, when to use the Memory Manager and when to use Pascal's }{\f6\fs20 new}{\f4  and }{\f6\fs20 dispose}{\f4  procedures, and how to find out how much free memory is available.\par It's worth repeating something that I pointed out at the start of the course.  This is an introductory toolbox course, and there is no attempt at covering all of the tool calls available.  There are a lot of other Memory Manager tool calls, and it would be a great idea to browse through }{\i\f4 Apple IIGS Toolbox Reference}{\f4 , volumes 1 and 3, to see what else is available.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 FreeMem\tab MaxBlock\tab RealFreeMem\tab SetPurge\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk48}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Memory Manager}{\rxe bk48}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 9 \endash  Drawing on the Front Side of the Screen}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 9 \endash  Drawing on the Front Side of the Screen}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 9 \endash  Drawing on the Front Side of the Screen\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson concentrates on the graphics capabilities of the Apple IIGS.  Of course, we've been using a GUI (Graphical User Interface) all along, but up until now we've concentrated on using existing tools to draw menus, windows, and so forth.  This lesson looks at the graphics package for the Apple IIGS, QuickDraw II.  It also looks at the hardware capabilities of the Apple IIGS that allow it to display colors, and how you can select colors from the palette of 4096 that are available.  Finally, we'll look at a few topics, like regions, that add a lot of power to the basic drawing commands of the Apple IIGS.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Super High Resolution Graphics}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Super High Resolution Graphics\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Super High Resolution Graphics Screen\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 super high resolution graphics}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SHR screen}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Apple IIGS toolbox always draws using super high-resolution (SHR) graphics.  This graphics mode uses a single 32K screen buffer, located at $E12000 in the Apple IIGS's memory.  There are actually three distinct parts of the screen buffer, all of which are read by the display hardware of the Apple IIGS to draw the colored pixels you see on the screen.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scan lines}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The first chunk of memory is a 32000 byte buffer that contains the actual pixels that are displayed on the monitor.  The buffer is arranged as 200 scan lines, one for each of the lines of pixels the Apple IIGS can display.  The lines are arranged top to bottom, so that the top scan line is at $E12000, the next scan line at $E120A0, and so forth.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1053{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw273\pich129\picwgoal5460\pichgoal2580\macpict\bliptag-218504950\blipupi72{\*\blipuid f2f9e10a53b7ef695632b726f1b8fa30}0520ffffffff008001101101a0008201000affffffff0080011009000000000000000031000100490014005c09ffffffffffffffff38300001005b0014006e090000000000000000310001006d0014008009ffffffffffffffff38090000000000000000310001007f0014009209ddff77ffddff77ff3809000000000000000031001300490026005c09ffffffffffffffff38090000000000000000310013005b0026006e09ffffffffffffffff38090000000000000000310013006d0026008009ddff77ffddff77ff380977dd77dd77dd77dd300013007f0026009209000000000000000031002500490038005c09ffffffffffffffff38090000000000000000310025005b0038006e09ddff77ffddff77ff380977dd77dd77dd77dd300025006d0038008009aa55aa55aa55aa55300025007f003800920900000000000000003100370049004a005c09ddff77ffddff77ff380977dd77dd77dd77dd300037005b004a006e09aa55aa55aa55aa55300037006d004a0080098822882288228822300037007f004a00920900000000000000003100490049005c005c0977dd77dd77dd77dd3809aa55aa55aa55aa55300049005b005c006e098822882288228822300049006d005c0080098800220088002200300049007f005c0092a10096000c02000000020000000000000001000a00040009001000402c000c00150948656c7665746963610300150d000a2b100d0724314532303030a00097a10096000c02000000020000000000000001000a00160000002200492a120724314532304130a00097a10096000c02000000020000000000000001000a00280009003400402a120724314532313430a00097a10096000c02000000020000000000000001000a003a0009004600402a120724314532314530a00097a10096000c02000000020000000000000001000a004c0009005800402a120724314532323830a0009701000affffffff0080011009ffffffffffffffff22005b006d002422005b007f001222005b00910009a0008c2200010091360022001300912d00220025009124002200370091120022004900910900a0008d09aa55aa55aa55aa5530005b0049006e005c09882288228822882230006d00490080005c30005b005b006e006e0977dd77dd77dd77dd3000010091001400a409aa55aa55aa55aa5530000100a3001400b63000130091002600a40988228822882288223000250091003800a430001300a3002600b60980000800800008003000490091005c00a409800000000800000030004900a3005c00b609ffffffffffffffff30003700a3004a00b609880022008800220030002500a3003800b609882288228822882230000100b5001400c809880022008800220030001300b5002600c809800000000800000030004900b5005c00c830003700b5004a00c809800008008000080030002500b5003800c809880022008800220030005b006d006e008030000100c7001400da09800008008000080030000100d9001400ec30001300c7002600da09800000000800000030000100eb001400fe30001300d9002600ec30002500c7003800da30003700c7004a00da09800008008000080030005b007f006e009230006d006d0080008009880022008800220030006d005b0080006e09800000000800000030005b0091006e00a430006d007f0080009230005b00a3006e00b630006d0091008000a430002500d9003800ec30001300eb002600fe30000100fd001401100988002200880022003000370091004a00a409800008008000080030003700a3004a00b6a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-1:  Mapping of Scan Lines\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 640 mode}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 320 mode}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In the 640 graphics mode we've used for most of our programs, each of the 160 byte scan lines contains 640 pixels.  The pixels are arranged in a simple, linear map, with the leftmost pixel in the most significant two bits of the first byte of the scan line, and so forth across the screen.  This gives four pixels in each byte, with two bits per pixel.  In 320 mode, each pixel uses four bits, so only two pixels fit in each byte of the scan line.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1054{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw428\pich111\picwgoal8560\pichgoal2220\macpict\bliptag1386403951\blipupi72{\*\blipuid 52a2d86fa4f6486281f4bba33d26e285}0472ffffffff006e01ab1101a0008201000affffffff006e01ab30004000390053005e300040005d005300823000400081005300a630004000a5005300ca30004000c9005300ee30004000ed0053011230004001110053013630004001350053015a3000130039002600823000130081002600ca30001300c90026011230001301110026015aa10096000c02000000020000000000000001000a005700480063004e2c000c00150948656c7665746963610300150d000a2b49600130a00097a10096000c02000000020000000000000001000a0057006c0063007229240131a00097a10096000c02000000020000000000000001000a005700900063009629240132a00097a10096000c02000000020000000000000001000a005700b4006300ba29240133a00097a10096000c02000000020000000000000001000a005700d8006300de29240134a00097a10096000c02000000020000000000000001000a005700fc0063010229240135a00097a10096000c02000000020000000000000001000a005701200063012629240136a00097a10096000c02000000020000000000000001000a005701440063014a29240137a00097a10096000c02000000020000000000000001000a002a005a00360060280033005b0130a00097a10096000c02000000020000000000000001000a002a00a2003600a829480131a00097a10096000c02000000020000000000000001000a002a00ea003600f029480132a00097a10096000c02000000020000000000000001000a002a01320036013829480133a00097a10096000c02000000020000000000000001000a001800000024002d280021000108333230204d6f6465a00097a10096000c02000000020000000000000001000a004500000051002d2a2d08363430204d6f6465a00097a10096000c02000000020000000000000001000a000600480012007128000f00490724314532303030a00097a10096000c02000000020000000000000001000a000600d80012010129900724314532303031a0009701000affffffff006e01ab3000130159002601a23000400159005301a2090000000000000000310001018f006e01ab38098800220088002200220013018ff700098822882288228822220013018bf70009aa55aa55aa55aa552200130186f7000977dd77dd77dd77dd2200130182f700220013017df700098800220088002200220025018ff700098822882288228822220025018bf70009aa55aa55aa55aa552200250186f7000977dd77dd77dd77dd2200250182f700220025017df700098800220088002200220040018ff700098822882288228822220040018bf70009aa55aa55aa55aa552200400186f7000977dd77dd77dd77dd2200400182f700220040017df700098800220088002200220052018ff700098822882288228822220052018bf70009aa55aa55aa55aa552200520186f7000977dd77dd77dd77dd2200520182f700220052017df70009ffffffffffffffff2200130038001222001300c80012220013015800122200400038001222004000c8001222004001580012a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-2:  Mapping of Pixels in a Scan Line\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SCB}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Right after the 32000 bytes that map to pixels are 200 additional bytes, one for each scan line.  Once again, a simple linear order is used: the first byte corresponds to the top line of pixels on the screen, the next byte to the second line, and so on.  These bytes are the scan line control bytes, and each one has control of a number of different characteristics for the scan line.  We'll talk about the scan line control bytes in detail later, after we've looked at colors.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The third area of the screen buffer is a series of 16 color tables, each needing 32 bytes.  These are pretty involved, so we'll break the discussion of colors out into a separate section.\par If you've been counting, we're still 56 bytes short of 32K.  The extra 56 bytes are at the end of the 200 scan line control bytes, right before the color tables.  The extra 56 bytes aren't used for anything, although a few QuickDraw commands will set these bytes in the process of changing the rest of the scan line control bytes.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Colors in 320 Mode\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 320 mode}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 colors}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 ;\par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Each pixel on the 320 mode graphics screen is set using four bits of memory, so it's easy enough to see that you can set any one of 16 values.  You might expect that each of these values would correspond to a particular color, and you'd be right, up to a point.  Each value does correspond to a particular color, but that color is not fixed.  Instead, the Apple IIGS uses a color table, with a two-byte entry for each of the 16 possible pixel values.\par Each of the two byte entries in a color table is broken up into four four-bit fields, like this:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1055{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw292\pich53\picwgoal5840\pichgoal1060\macpict\bliptag-1532555372\blipupi72{\*\blipuid a4a70f94c00208c13097901fb854c015}0b40ffffffff003401231101a0008201000affffffff0034012309000000000000000031000100010014001409ffffffffffffffff3809000000000000000031000100130014002609ffffffffffffffff3809000000000000000031000100250014003809ffffffffffffffff3809000000000000000031000100370014004a09ffffffffffffffff3809000000000000000031000100490014005c09ffffffffffffffff38090000000000000000310001005b0014006e09ffffffffffffffff38090000000000000000310001006d0014008009ffffffffffffffff38300001007f001400923000010091001400a430000100a3001400b630000100b5001400c830000100c7001400da30000100d9001400ec30000100eb001400fe30000100fd00140110a10096000c02000000020000000000000001000a00040002001000132c000c00150948656c7665746963610300150d000a2b050d023135a00097a10096000c02000000020000000000000001000a00040014001000252912023134a00097a10096000c02000000020000000000000001000a00040026001000372912023133a00097a10096000c02000000020000000000000001000a00040038001000492912023132a00097a10096000c02000000020000000000000001000a0004004a0010005b2912023131a00097a10096000c02000000020000000000000001000a0004005c0010006d2912023130a00097a10096000c02000000020000000000000001000a0004006e0010007f29150139a00097a10096000c02000000020000000000000001000a000400800010009129120138a00097a10096000c02000000020000000000000001000a00040092001000a329120137a00097a10096000c02000000020000000000000001000a000400a4001000b529120136a00097a10096000c02000000020000000000000001000a000400b6001000c729120135a00097a10096000c02000000020000000000000001000a000400c8001000d929120134a00097a10096000c02000000020000000000000001000a000400da001000eb29120133a00097a10096000c02000000020000000000000001000a000400ec001000fd29120132a00097a10096000c02000000020000000000000001000a000400fe0010010f29120131a0009701000affffffff00340123300001010f00140122a10096000c02000000020000000000000001000a000401100010012129120130a0009701000affffffff00340123070002000230000000000014004a3000000048001400923000000090001400da30000000d800140122a10096000c02000000020000000000000001000a002700100033003b280030001506756e75736564a00097a10096000c02000000020000000000000001000a0027005800330083295103726564a00097a10096000c02000000020000000000000001000a002700a0003300cb294305677265656ea00097a10096000c02000000020000000000000001000a002700e800330113294b04626c7565a00097a0008ca100d8000400004000a100d6000400004000a000d701000affffffff003401230700000000080017200030010600180037a100ca00080000000000000000a100c80008000000b400b40000070001000160001300250026006e010e005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d908000870004600130025001c004900130049001400490014004900150048001600470017004500180043001800420019003f0019003e001a003b001b0035001c002f001c0029001c0025a100d8000400004000a000bfa000d9a000d7a100d8000400004000a100d6000400004000a000d7070000000008001722001c0025eefca100ca00080000000000000000a100c80008000000b400b400000700010001600013ffdd002600260000005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d908000870004600130001001c0025001c0025001c0021001c001b001b0015001a000f0019000c0019000b0018000800180007001700050016000300150002001400010014000100130001a100d8000400004000a000bfa000d9a000d722001c00250009a0008da0008ca100d8000400004000a100d6000400004000a000d70700000000080017235af3a100ca00080000000000000000a100c80008000000b400b400000700010001600013006d002600b6010e005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d90800087000460013006d001c0091001300910014009100140091001500900016008f0017008d0018008b0018008a0019008700190086001a0083001b007d001c0077001c0071001c006da100d8000400004000a000bfa000d9a000d7a100d8000400004000a100d6000400004000a000d7070000000008001722001c006deefca100ca00080000000000000000a100c80008000000b400b40000070001000160001300250026006e0000005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d908000870004600130049001c006d001c006d001c0069001c0063001b005d001a00570019005400190053001800500018004f0017004d0016004b0015004a001400490014004900130049a100d8000400004000a000bfa000d9a000d722001c006d0009a0008da0008ca100d8000400004000a100d6000400004000a000d70700000000080017235af3a100ca00080000000000000000a100c80008000000b400b40000070001000160001300b5002600fe010e005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d9080008700046001300b5001c00d9001300d9001400d9001400d9001500d8001600d7001700d5001800d3001800d2001900cf001900ce001a00cb001b00c5001c00bf001c00b9001c00b5a100d8000400004000a000bfa000d9a000d7a100d8000400004000a100d6000400004000a000d7070000000008001722001c00b5eefca100ca00080000000000000000a100c80008000000b400b400000700010001600013006d002600b60000005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d908000870004600130091001c00b5001c00b5001c00b1001c00ab001b00a5001a009f0019009c0019009b0018009800180097001700950016009300150092001400910014009100130091a100d8000400004000a000bfa000d9a000d722001c00b50009a0008da0008ca100d8000400004000a100d6000400004000a000d70700000000080017235af3a100ca00080000000000000000a100c80008000000b400b40000070001000160001300fd00260146010e005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d9080008700046001300fd001c0121001301210014012100140121001501200016011f0017011d0018011b0018011a0019011700190116001a0113001b010d001c0107001c0101001c00fda100d8000400004000a000bfa000d9a000d7a100d8000400004000a100d6000400004000a000d7070000000008001722001c00fdeefca100ca00080000000000000000a100c80008000000b400b40000070001000160001300b5002600fe0000005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d9080008700046001300d9001c00fd001c00fd001c00f9001c00f3001b00ed001a00e7001900e4001900e3001800e0001800df001700dd001600db001500da001400d9001400d9001300d9a100d8000400004000a000bfa000d9a000d722001c00fd0009a0008da00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-3:  Master Color Value\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 primary colors}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 master color value}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Each of these color words is called a master color value.  The first four bits aren't used, but the next three groups of bits control the red, green, and blue intensity of the dot, with 0 turning the color off, and 15 giving the brightest value possible for the color.  If you're at all familiar with the physics of color, you'll recognize these three colors as the primary colors; you can get (almost) any color by mixing these three colors together.  If you're not familiar with the physics of color, and you'd like an introduction that is fascinating, easy to read, and very informative, I'd suggest Chapter 35 of }{\i\f4 The Feynman Lectures on Physics}{\f4 .  The title is probably pretty scary, but this particular chapter is the only short article I've ever read which is easy to understand and still manages to explain things like where brown comes from.  (Think about it: you can mix any color from a primary color, right?  Then where is brown in the rainbow?)  Anyway, the book is famous, and should be available in any library.\par A color table has 16 of these master color values, one for each of the 16 possible values of a pixel.  You can set each master color value to anything you'd like \endash  for a fun treat, try creating an Init that periodically sets all of the colors to $0000 (black) or inverts all of the color values (making the screen look like a color negative).\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetColorTable}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetColorTable}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 To change the colors used to display the screen, you use two QuickDraw II calls, }{\f6\fs20 GetColorTable}{\f4  and }{\f6\fs20 SetColorTable}{\f4 .  Each takes two parameters, the color table number and a variable with a type of }{\f6\fs20 colorTable}{\f4 .  The }{\f6\fs20 colorTable}{\f4  type is defined in Common.pas:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20    colorTable = array [0..15] of integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par As a general rule of thumb, you should always set color 0 (the first element of the color table) to black ($0000) and color 15 to white ($0FFF).  If you don't the screen will look, well, strange.  These are the colors used by the toolbox to draw window frames, erase the window to white, and so on.\par Here's the color table that you get if you don't make any changes:\par \par }\pard \li720\ri720\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\tx3600\tx5220\tx6300\tx7920\adjustright {\f4 Number\tab Color\tab Value\tab Number\tab Color\tab Value\par }\pard \li720\ri720\keepn\widctlpar\tx1800\tx3600\tx5220\tx6300\tx7920\adjustright {\f4 0\tab black\tab $0000\tab 8\tab beige\tab $0FA9\par 1\tab dark gray\tab $0777\tab 9\tab yellow\tab $0FF0\par 2\tab brown\tab $0841\tab 10\tab green\tab $00E0\par 3\tab purple\tab $072C\tab 11\tab light blue\tab $04DF\par 4\tab blue\tab $000F\tab 12\tab lilac\tab $0DAF\par 5\tab dark green\tab $0080\tab 13\tab periwinkle blue\tab $078F\par 6\tab orange\tab $0F70\tab 14\tab light gray\tab $0CCC\par 7\tab red\tab $0D00\tab 15\tab white\tab $0FFF\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qc\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 colors}}}{\pard\plain \qc\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 320 mode colors}}}{\v\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-4:  Standard 320 Mode Colors\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Scan Line Control Byte\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scan line control byte}}}{\f4 {\*\bkmkstart bk49}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 I mentioned that there are 16 color tables, which seems pretty silly at first.  After all, there are only 16 possible values for a pixel, and each color table has 16 color entries, so why do we need 16 color tables?  The reason is that you can actually pick a different color table for each scan line.  In fact, you can pick all sorts of things for each scan line.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1056{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw231\pich115\picwgoal4620\pichgoal2300\macpict\bliptag-1125564644\blipupi72{\*\blipuid bce93f1c3c9658d05425a1b1e653a5c8}03c0ffffffff007200e61101a0008201000affffffff007200e609000000000000000031000200020015001509ffffffffffffffff3809000000000000000031000200140015002709ffffffffffffffff3809000000000000000031000200260015003909ffffffffffffffff3809000000000000000031000200380015004b09ffffffffffffffff38090000000000000000310002004a0015005d09ffffffffffffffff38090000000000000000310002005c0015006f09ffffffffffffffff38090000000000000000310002006e0015008109ffffffffffffffff3809000000000000000031000200800015009309ffffffffffffffff38a10096000c01000000020000000000000001000a000400070010000d2c000c00150948656c7665746963610300150d000a2b080d0137a00097a10096000c01000000020000000000000001000a000400190010001f29120136a00097a10096000c01000000020000000000000001000a0004002b0010003129120135a00097a10096000c01000000020000000000000001000a0004003d0010004329120134a00097a10096000c01000000020000000000000001000a0004004f0010005529120133a00097a10096000c01000000020000000000000001000a000400610010006729120132a00097a10096000c01000000020000000000000001000a000400730010007929120131a00097a10096000c01000000020000000000000001000a000400850010008b29120130a0009701000affffffff007200e60700020002300000000000140092070001000160000b004a001e009300b4005a68005a005aa10096000c01000000020000000000000001000a0065002f0071007b28006e00301073657420666f7220363430206d6f6465a0009701000affffffff007200e6220014000b005a231b00a10096000c01000000020000000000000001000a00530041005f00af28005c00421b73657420666f72207363616e206c696e6520696e74657272757074a00097a10096000c01000000020000000000000001000a00410053004d00ac28004a00541473657420666f722066696c6c206d6f6465206f6ea00097a10096000c01000000020000000000000001000a002f0065003b00b328003800661272657365727665643b2073657420746f2030a00097a10096000c01000000020000000000000001000a001d0092002900e5280026009312636f6c6f72207461626c65206e756d626572a0009701000affffffff007200e6220014001d0048231b00220014002f0036231b0022001400410024231b0022001d006e0009231b00a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-5:  The Scan Line Control Byte\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Bits 6 and 5, used for scan line interrupts and fill mode, are generally used by assembly language programmers doing advanced animation programs; in any case, we won't get into them in this course.  The two values you should know about are the }{\f6\fs20 scbColorMode}{\f4  bit, which tells you if the scan line is in 320 or 640 mode, and the color table number.  There are a couple of fairly useful tricks you can do by manipulating these SCB values directly:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 640 mode}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 320 mode}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Since the SCB for each scan line is recorded in a dump of a picture file, you can check the most significant bit of the SCB to figure out if a picture should be displayed in 320 mode or 640 mode.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 2.\tab You can use the QuickDraw II call }{\f6\fs20 SetAllSCBs}{\f4  to change all of the scan line control bytes at once.  One useful feature is to quickly change the color table that you are using, something you could do to switch between the colors for two different pictures.  Here's a quick example that changes a 320 mode screen so it uses color table 1, instead of the default color table of 0:\par \par }\pard \qj\li900\widctlpar\adjustright {\f6\fs20 SetAllSCBs($01);\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \par 3.\tab The Apple IIGS can only display 16 colors, right?  Well, yes and no.  You can only display 16 colors on a single scan line, but since you can use a different color table on each scan line, you can actually use up to 256 colors at once.  This isn't very useful in most desktop programs, but in a game it might be fun to use one color table for a control panel at the bottom of the screen, and another color table for a picture at the top of the screen.  You could even use 640 mode in one area for crisp text, and 320 mode in another area for great color pictures!\par \par \tab Here's a quick sample that shows how to use color table 0 for the top half of the screen, and color table 1 for the bottom half:\par \par }\pard \qj\li900\keepn\widctlpar\adjustright {\f6\fs20 for i := 0 to 99 do begin\par    SetSCB(i, $00);\par    SetSCB(i+100, $01);\par }\pard \qj\li900\widctlpar\adjustright {\f6\fs20    end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are all sorts of creative ways you can use these multiple color tables and the ability to use different resolutions on different lines.  In fact, some clever assembly language programmers have even written programs that switch the color tables }{\i\f4 while the Apple IIGS is drawing the screen!}{\f4   That's a bizarre thing to do to a defenseless piece of silicon, but the result is a staggering ability to display pictures with virtually any of the 4096 colors the Apple IIGS can display, all at the same time.  Unfortunately, while it's pretty, this isn't very useful \endash  all of the computer's time is used up switching color tables, rather than running a program to use all of those colors.\par \par Problem 9-1:  Starting with Frame, create a color explorer.  Your program should open a single window with no close box, no scroll bars or grow box, and no zoom box.  You should also remove all of the commands except Close and Quit from the file menu.  Close is there to support desk accessories; your program should ignore this command.  In short, the user only gets one window.\par Switch the program to use 320 mode graphics.\par Next, add three new menus, labeled Red, Green and Blue.  Each should have 16 entries, the numbers 0 to 15.  These are the levels of each color, and the current level should be checked in each menu.\par Inside the window, draw four rectangles.  Along the left third of the screen, draw three rectangles , one on top of the other.  Paint these rectangles with colors 1, 2 and 3.  Set each of these colors to a pure color from the color menu.  For example, if the user picked a value of 3 for red, set color 1 to $0300.\par The right two-thirds of the screen should be painted with color 4, which, of course, is set to the combination of all three colors.\par This is a pretty simple program, but it's great fun.  Using this program, you can try all sorts of color combinations quickly.\par {\*\bkmkend bk49}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SCB}{\rxe bk49}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Colors in 640 Mode\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 640 mode}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Compared to 320 mode graphics, 640 mode graphics swaps increased resolution for a decrease in the number of colors that can be displayed.  Instead of using four bits per pixel, with 16 distinct colors, 640 mode uses two bits per pixel, giving 4 distinct colors.\par {\*\bkmkstart bk50}If that was all there was to the story, you would be limited to four colors per scan line in 640 mode, but as it turns out, there are some tricks you can use to get more than just four colors at a time.  The trick is called dithering, and it relies on the fact that alternating colored dots in 640 mode get mixed to produce a third color.  For example, if you draw alternating black and white pixels across the 640 mode screen, you'll see a gray screen, not a striped one.  Considering how crisp black and white text looks in 640 mode, that may be a hard one to swallow.  Frankly, I didn't believe it myself.  Just for fun, give it a try with this program:\par \par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 program Dither (input);\par \par uses Common, QuickDrawII;\par \par var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    color: integer;                       \{pen color\}\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    i: integer;                           \{loop variable\}\par \par begin\par StartGraph(640);\par color := 0;\par for i := 0 to 639 do begin\par    SetSolidPenPat(color);\par    MoveTo(i, 0);\par    LineTo(i, 199);\par    color := color ! 3;\par    end; \{for\}\par readln;\par EndGraph;\par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 end.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 Listing 9-1:  A Simple Dithering Demonstration\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Without dithering, the result would be a black and white striped screen, but as you can see, you get a gray screen.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 At first blush, it looks like the color table used for 320 mode graphics is a bit large for 640 mode graphics.  After all, 640 mode only needs the first 4 entries, not all 16 like 320 mode graphics.  Apple's engineers went for another trick, though, that extends the dithered colors quite a bit.  Instead of using the first four entries in the color table, each of the pixels in a byte uses a different set of four colors.  You can certainly set each of the minipalettes up to have the same four colors, and in fact black and white are normally in all four of the minipalettes, but you can also mix the colors.  Since the screen is dithered, that gives you a great mix of colors.  By default, you get black and white for colors 0 and 3 in all four minipalettes.  Pixels in odd columns are colored blue for color 1, and yellow for color 2; while pixels in even columns are colored red and green for colors 1 and 2.  Painting a large area with color 1 mixes the blue and red to give an annoying purple, while color 2 mixes the green and yellow to give a sickly green.  Naturally, you can change the color tables to get other dithered colors.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1057{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw293\pich319\picwgoal5860\pichgoal6380\macpict\bliptag-463069136\blipupi72{\*\blipuid e4662030bebed46d920722109d3d2e95}0cf8ffffffff013e01241101a00082a10096000c02000000020000000000000001000a000400980010009e2c000c00150948656c7665746963610300150d000a2b990d0137a00097a10096000c02000000020000000000000001000a000400aa001000b029120136a00097a10096000c02000000020000000000000001000a000400bc001000c229120135a00097a10096000c02000000020000000000000001000a000400ce001000d429120134a00097a10096000c02000000020000000000000001000a000400e0001000e629120133a00097a10096000c02000000020000000000000001000a000400f2001000f829120132a00097a10096000c02000000020000000000000001000a000401040010010a29120131a00097a10096000c02000000020000000000000001000a000401160010011c29120130a0009701000affffffff013e012407000200023000000091001400b730000000b5001400db30000000d9001400ff30000000fd001401230700010001220088011000942000d000a4001c00a422000100a4001222000100c8001222000100ec00122200010110001222008800947c00a0008ca10096000c01000000020000000000000001000a001f0053002b0074280028005407436f6c6f722030a00097a10096000c01000000020000000000000001000a00310053003d00742a1207436f6c6f722031a00097a10096000c01000000020000000000000001000a00430053004f00742a1207436f6c6f722032a00097a10096000c01000000020000000000000001000a00550053006100742a1207436f6c6f722033a0009701000affffffff013e0124070002000230001b004300650084a10096000c01000000020000000000000001000a00670053007300742a1207436f6c6f722034a00097a10096000c01000000020000000000000001000a00790053008500742a1207436f6c6f722035a00097a10096000c01000000020000000000000001000a008b0053009700742a1207436f6c6f722036a00097a10096000c01000000020000000000000001000a009d005300a900742a1207436f6c6f722037a0009701000affffffff013e0124300063004300ad0084a10096000c01000000020000000000000001000a007f0000008b003a28008800010d6d696e6970616c657474652034a00097a10096000c01000000020000000000000001000a003700000043003a28004000010d6d696e6970616c657474652033a0009701000affffffff013e0124070001000130001c0044002f008430002e0044004100843000400044005300843000520044006500843000640044007700843000760044008900843000880044009b008430009a004400ad0084070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001c0086070923ff12230809a000a301000affffffff013e012422001c00860203230203230206230003230003230002230105230204230305230202a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220064008607f723ffee2308f7a000a301000affffffff013e0124220064008602fd2302fd2302fa2300fd2300fd2300fe2301fb2302fc2303fb2302fea000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200640086070923ff12230809a000a301000affffffff013e012422006400860203230203230206230003230003230002230105230204230305230202a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200ac008607f723ffee2308f7a000a301000affffffff013e01242200ac008602fd2302fd2302fa2300fd2300fd2300fe2301fb2302fc2303fb2302fea000a1a0008da0008ca10096000c01000000020000000000000001000a00af005300bb00742b537807436f6c6f722038a00097a10096000c01000000020000000000000001000a00c1005300cd00742a1207436f6c6f722039a0009701000affffffff013e012407000200023000ab004300f50084a10096000c02000000020000000000000001000a011b004a01270081280124005308436f6c6f72203134a0009701000affffffff013e01243000f30043013d0084a10096000c01000000020000000000000001000a00c7000000d3003a2800d000010d6d696e6970616c657474652031a00097a10096000c01000000020000000000000001000a010f0000011b003a2a480d6d696e6970616c657474652032a0009701000affffffff013e012407000100013000ac004400bf00843000be004400d100843001180044012b008430012a0044013d00843000d0004400e300843000e2004400f500843000f4004401070084300106004401190084a10096000c02000000020000000000000001000a0109004a01150081280112005308436f6c6f72203133a00097a10096000c02000000020000000000000001000a00f7004a01030081280100005308436f6c6f72203132a00097a10096000c02000000020000000000000001000a00e5004a00f100812800ee005308436f6c6f72203131a00097a10096000c02000000020000000000000001000a00d3004a00df00812800dc005308436f6c6f72203130a0009701000affffffff013e0124070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200ac0085070923ff12230809a000a301000affffffff013e01242200ac00850203230203230205230105230002230001230003230001230103230103230102230101230203230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200f4008507f723ffee2308f7a000a301000affffffff013e01242200f4008502fd2302fd2302fb2301fb2300fe2300ff2300fd2300ff2301fd2301fd2301fe2301ff2302fd2301ffa000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200f40085070923ff12230809a000a301000affffffff013e01242200f400850203230203230205230105230002230001230003230001230103230103230102230101230203230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122013c008507f723ffee2308f7a000a301000affffffff013e012422013c008502fd2302fd2302fb2301fb2300fe2300ff2300fd2300ff2301fd2301fd2301fe2301ff2302fd2301ffa000a1a10096000c02000000020000000000000001000a012d004a013900812a5a08436f6c6f72203135a00097a0008d01000affffffff013e01242200d00092120022004000925a002300dc2201180092360020001c00c8011800c8070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220014009205042309ff230406a000a301000affffffff013e012422001400920101230201230301230200230200230100230201230201230203230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001400b6fb0423f7ff23fc06a000a301000affffffff013e012422001400b6ff0123fe0123fd0123fe0023fe0023ff0023fe0123fe0123fe0323ff01a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001400b605042309ff230406a000a301000affffffff013e012422001400b60101230201230301230200230200230100230201230201230203230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001400dafb0423f7ff23fc06a000a301000affffffff013e012422001400daff0123fe0123fd0123fe0023fe0023ff0023fe0123fe0123fe0323ff01a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001400da05042309ff230406a000a301000affffffff013e012422001400da0101230201230301230200230200230100230201230201230203230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001400fefb0423f7ff23fc06a000a301000affffffff013e012422001400feff0123fe0123fd0123fe0023fe0023ff0023fe0123fe0123fe0323ff01a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001400fe05042309ff230406a000a301000affffffff013e012422001400fe0101230201230301230200230200230100230201230201230203230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200140122fb0423f7ff23fc06a000a301000affffffff013e01242200140122ff0123fe0123fd0123fe0023fe0023ff0023fe0123fe0123fe0323ff01a000a1a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-6:  Minipalettes in 640 Mode Graphics\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Dithered colors are pretty neat; they give you a way to get 640 pixels on a scan line for precision, and still get 16 solid colors for things like graphs or colored icons.  There are some disadvantages to dithering, though.  The big one is that you can't draw colored objects with very fine detail, since the colors tend to mix.  Another problem is that an object will shift colors a bit if you move it over one pixel, since the color table alternates by pixel position.  You can avoid that problem by setting all of the minipalettes to the same colors, or by making sure that you always move pictures right and left by even multiples of four pixels.  That's one of two reasons why I said to always be sure you tell }{\f6\fs20 TaskMaster}{\f4  to scroll your window left and right in multiples of eight pixels.  The other reason has to do with pen patterns, which we'll talk about in a moment.\par The last problem with dithered colors is that it's really tough to plan a color palette.  With 320 mode graphics, you could pick any 16 colors you want; but with 640 mode, each color in a palette affects several dithered colors.  Frankly, I have such a tough time with planning 640 mode color palettes that I almost always use the default color table.  If you want to create a new 640 mode color table, I'd suggest trial and error as a good way to go about it.  While it won't be assigned as a problem, a good way to do a lot of trials and see those errors quickly would be to write a 640 mode color explorer, sort of like the 320 mode color explorer from Problem 9-1.\par \par Problem 9-2:  Write a short program to display all 16 possible dithered colors.  This isn't a complicated desktop program; it's just a quickie program to see the actual dithered colors for yourself.  You can base it on the Dither program from this section.\par The screen will be divided into boxes like the ones you see below.\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1058{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw192\pich192\picwgoal3840\pichgoal3840\macpict\bliptag-1867398468\blipupi72{\*\blipuid 90b1c2bcc3d5a44d471db42414109ae2}02beffffffff00bf00bf1101a0008201000affffffff00bf00bf09000000000000000031001300130038003809ffffffffffffffff3809000000000000000031001300400038006509ffffffffffffffff38090000000000000000310013006d0038009209ffffffffffffffff38090000000000000000310013009a003800bf09ffffffffffffffff3809000000000000000031004000130065003809ffffffffffffffff3809000000000000000031004000400065006509ffffffffffffffff38090000000000000000310040006d0065009209ffffffffffffffff38090000000000000000310040009a006500bf09ffffffffffffffff3809000000000000000031006d00130092003809ffffffffffffffff3809000000000000000031006d00400092006509ffffffffffffffff3809000000000000000031006d006d0092009209ffffffffffffffff3809000000000000000031006d009a009200bf09ffffffffffffffff3809000000000000000031009a001300bf003809ffffffffffffffff3809000000000000000031009a004000bf006509ffffffffffffffff3809000000000000000031009a006d00bf009209ffffffffffffffff3809000000000000000031009a009a00bf00bf09ffffffffffffffff3809000000000000000031001300010038000b09ffffffffffffffff3809000000000000000031004000010065000b09ffffffffffffffff3809000000000000000031006d00010092000b09ffffffffffffffff3809000000000000000031009a000100bf000b09ffffffffffffffff380900000000000000003100010013000b003809ffffffffffffffff380900000000000000003100010040000b006509ffffffffffffffff38090000000000000000310001006d000b009209ffffffffffffffff38090000000000000000310001009a000b00bf09ffffffffffffffff38a00083ff}}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Color the small rectangles using colors 0 to 3 from left to right along the top row, then using 0 to 3 again from top to bottom along the left column.  The larger boxes in the middle should be drawn using a combination of the colors from the pure color to the top and left of the box.  You should alternate colors every other vertical line, just like the Dither program from this section alternated black and white to get gray.\par {\*\bkmkend bk50}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dithering}{\rxe bk50}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Screen Dump Files\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 screen dumps}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the graphics file formats for the Apple IIGS is just a snapshot of the screen memory.  It's a pretty good format for simple paint programs or slide shows, but of course it limits a picture to the size of the screen, and there are a lot of cases where that isn't big enough.\par Screen dump files have a file type of $C1 and an auxiliary file type of $0000.  If that looks familiar, it's because the pictures you've loaded in a few of the problems have used these screen dump files.\par \par Problem 9-3:  Now that you know the format for a screen dump file, go back and add two features to finish the slide show program you wrote in Problem 7-4.  First, add checks to make sure the picture can be displayed by your program.  Specifically, you should make sure only one color table is used, and that all of the SCBs are for 320 mode.  If not, warn the user that the picture may not look quite right.  Next, read the color table used by the program and set the current color tables to use the correct colors for the picture.\par Be sure you can handle pictures with different color tables!  An easy way to do this is more or less the way you handle menu dimming, by simply setting the correct color table each time through the event loop.  In a time-critical program you would have to get a bit more sophisticated, but this method will do here.\par You can test your program on the pictures in the Pictures folder.  They use several different color palettes.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Setting the Pen Size}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Setting the Pen Size\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen size}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Most of the QuickDraw drawing commands use the idea of a pen.  You've used this pen already: positioning it with }{\f6\fs20 MoveTo}{\f4 , setting the color of the pen with }{\f6\fs20 SetSolidPenPat}{\f4 , and so forth.  As it turns out, there's a lot more to the drawing pen than you might think.  In addition to setting the size and color of the pen, you can also set the pen pattern so it can draw something besides just a solid color.  You can even change the way the pen works, telling it to reverse the color in bits instead of drawing normally.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 640 mode}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Up until now, we've only used the pen to draw lines, or perhaps set the pen color for some of the commands like }{\f6\fs20 PaintRect}{\f4  that fill a large area with the pen color.  In all cases, we've used the default pen size of 1 pixel by 1 pixel that is set by }{\f6\fs20 PenNormal}{\f4 .  You can actually set the size of the pen to a lot of other values, though.  In fact, the pen can be as large as eight pixels by eight pixels.  One of the most common reasons to change the size of the pen is that horizontal lines are thicker in 640 mode than vertical lines, since each pixel in 640 mode is a little more than twice as high as it is wide.  When I'm doing line drawings in 640 mode, I almost always set the pen to be one pixel high and two pixels wide.  }{\f6\fs20 SetPenSize}{\f4  does the trick:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPenSize}}}{\v\f4 \par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 SetPenSize(2, 1);                        \{use a pen that is two pixels wide\}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Pen Patterns}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Pen Patterns\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen patterns}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSolidPenPat}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 We've used }{\f6\fs20 SetSolidPenPat}{\f4  to change the color of the lines and objects we draw with the pen, but you can also change the pen pattern.  With a pen pattern, you set up an eight by eight array of colored dots, using literally any color you like.\par The pen pattern itself is actually a tiny picture, eight pixels wide and eight pixels high.  Since pixels are not the same size in 640 mode and 320 mode, this means that the pen pattern is also not the same size.  In fact, a pen pattern in 320 mode is 32 bytes long, while a pen pattern in 640 mode is only 16 bytes long.\par You can set up the bytes for the pen pattern a lot of different ways.  In ORCA/Pascal, a pen pattern is defined as an array of bytes, like this:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs20    pattern = array [0..31] of byte;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 (The definition was pulled from the interface file Common.pas.)  What }{\f6\fs20 SetSolidPenPat}{\f4  actually does is to set all of the pixels in a pen pattern to the same color.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Here's one way to set up a pen pattern.  In 320 mode, this pen pattern will give you alternating lines of red (color 7) and white (color 15, or $F), with the lines running vertically.\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 for i := 0 to 31 do\par    myPattern[i] := $F7;\par }\pard \li360\widctlpar\adjustright {\f6\fs20 SetPenPat(myPattern);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par When most people see pen patterns for the first time, it seems like they would be a great way to draw small pictures:  just set up a pattern, then do a }{\f6\fs20 MoveTo}{\f4 , }{\f6\fs20 LineTo}{\f4  at a single point.  That sort of works, but the problem is that patterns are fixed to a very specific grid system.  To visualize how they work, imagine painting over patterned wallpaper, then erasing part of the paint.  You see the original pattern showing through, but nothing short of ripping off the paper will shift the pattern over an eighth of an inch.  Patterns work the same way: they are fixed to the physical coordinate system of the graphics screen itself.  That's why you want to make sure you always scroll left and right by multiples of eight pixels, and why }{\f6\fs20 TaskMaster}{\f4  makes sure your window moves by multiples of eight pixels.  If you moved or scrolled the window by two pixels, then drew part of a pattern again, the old and new areas would clash where they joined together.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Pen Modes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Pen Modes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen modes}}}{\v\f4 \par }{\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPenMode}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The normal thing to expect when you draw a black line across a white screen is for a black line to appear.  That's what QuickDraw does most of the time, but there are a lot of cases when it is very useful to have QuickDraw do something else entirely.  The most useful is to have it reverse the bits, something called exclusive oring the bits.  You can do that, and a lot more, by setting the pen mode with }{\f6\fs20 SetPenMode}{\f4 .\par Actually, this isn't the first time you've seen the }{\f6\fs20 SetPenMode}{\f4  call.  Way back in Lesson 1 you learned to put a }{\f6\fs20 SetPenMode(modeCopy)}{\f4  call into your program to make sure QuickDraw did what you normally want it to do: just copy the colors you tell it to onto the screen.\par }{\f6\fs20 modeCopy}{\f4  is the first of four drawing modes.  The others are }{\f6\fs20 modeOR}{\f4 , which tells QuickDraw to overlay the bits that are being drawn with the ones already on the screen; }{\f6\fs20 modeXOR}{\f4 , which tells QuickDraw to perform an exclusive or on the bits being drawn and the ones already on the screen; and }{\f6\fs20 modeBIC}{\f4 , which flips all of the bits in the pen, then ands them with the image.  If you're familiar with truth tables and boolean logic, you'll recognize most of these operations.  Figure 9-7 shows how they work when you use each of the pen modes to draw a white X across a white box.  The color white has all of the pen bits set, so white would be the equivalent of true in boolean logic, while black would be false.  Of course, some judicious changes in the color table could change those meanings!\par Each of the pen modes also has a "not" version, where all of the bits in the pen are reversed before drawing.  Figure 9-7 also shows these "not" modes.\par \par }\pard \qc\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1059{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw468\pich222\picwgoal9360\pichgoal4440\macpict\bliptag-834315481\blipupi72{\*\blipuid ce455b274393fd3fec98b646bc319eb0}2924ffffffff00dd01d31101a0008201000affffffff00dd01d30900000000000000003100160004005f004d09ffffffffffffffff3809000000000000000031001600040020000e09ffffffffffffffff38310016000d002000173831001600160020002038310016001f00200029383100160028002000323831001600310020003b38310016003a002000443809000000000000000031001600430020004d09ffffffffffffffff3831001f00040029000e3809000000000000000031001f000d0029001709ffffffffffffffff3831001f0016002900203831001f001f002900293831001f0028002900323831001f00310029003b3809000000000000000031001f003a0029004409ffffffffffffffff3831001f00430029004d3831002800040032000e38310028000d003200173809000000000000000031002800160032002009ffffffffffffffff38310028001f00320029383100280028003200323809000000000000000031002800310032003b09ffffffffffffffff38310028003a003200443831002800430032004d383100310004003b000e38310031000d003b0017383100310016003b002038090000000000000000310031001f003b002909ffffffffffffffff380900000000000000003100310028003b003209ffffffffffffffff383100310031003b003b38310031003a003b0044383100310043003b004d3831003a00040044000e3831003a000d004400173831003a0016004400203809000000000000000031003a001f0044002909ffffffffffffffff3809000000000000000031003a00280044003209ffffffffffffffff3831003a00310044003b3831003a003a004400443831003a00430044004d383100430004004d000e38310043000d004d0017380900000000000000003100430016004d002009ffffffffffffffff38310043001f004d0029383100430028004d0032380900000000000000003100430031004d003b09ffffffffffffffff38310043003a004d0044383100430043004d004d3831004c00040056000e3809000000000000000031004c000d0056001709ffffffffffffffff3831004c0016005600203831004c001f005600293831004c0028005600323831004c00310056003b3809000000000000000031004c003a0056004409ffffffffffffffff3831004c00430056004d380900000000000000003100550004005f000e09ffffffffffffffff38310055000d005f0017383100550016005f002038310055001f005f0029383100550028005f0032383100550031005f003b38310055003a005f0044380900000000000000003100550043005f004d09ffffffffffffffff3809000000000000000031001600d3005f011c09ffffffffffffffff3809000000000000000031001600d3002000dd09ffffffffffffffff3831001600dc002000e63831001600e5002000ef3831001600ee002000f83831001600f7002001013831001601000020010a383100160109002001133809000000000000000031001601120020011c09ffffffffffffffff3831001f00d3002900dd3809000000000000000031001f00dc002900e609ffffffffffffffff3831001f00e5002900ef3831001f00ee002900f83831001f00f7002901013831001f01000029010a3809000000000000000031001f01090029011309ffffffffffffffff3831001f01120029011c3831002800d3003200dd3831002800dc003200e63831002800e5003200ef3809000000000000000031002800ee003200f809ffffffffffffffff3809000000000000000031002800f70032010109ffffffffffffffff3831002801000032010a383100280109003201133831002801120032011c3831003100d3003b00dd3831003100dc003b00e63809000000000000000031003100e5003b00ef09ffffffffffffffff3831003100ee003b00f83831003100f7003b0101380900000000000000003100310100003b010a09ffffffffffffffff383100310109003b0113383100310112003b011c3831003a00d3004400dd3831003a00dc004400e63809000000000000000031003a00e5004400ef09ffffffffffffffff3831003a00ee004400f83831003a00f7004401013809000000000000000031003a01000044010a09ffffffffffffffff3831003a0109004401133831003a01120044011c3831004300d3004d00dd3831004300dc004d00e63831004300e5004d00ef3809000000000000000031004300ee004d00f809ffffffffffffffff3809000000000000000031004300f7004d010109ffffffffffffffff383100430100004d010a383100430109004d0113383100430112004d011c3831004c00d3005600dd3809000000000000000031004c00dc005600e609ffffffffffffffff3831004c00e5005600ef3831004c00ee005600f83831004c00f7005601013831004c01000056010a3809000000000000000031004c01090056011309ffffffffffffffff3831004c01120056011c3809000000000000000031005500d3005f00dd09ffffffffffffffff3831005500dc005f00e63831005500e5005f00ef3831005500ee005f00f83831005500f7005f0101383100550100005f010a383100550109005f0113380900000000000000003100550112005f011c09ffffffffffffffff38090000000000000000310016012d005f017609ffffffffffffffff38090000000000000000310016012d0020013709ffffffffffffffff3831001601360020014038310016013f00200149383100160148002001523831001601510020015b38310016015a002001643831001601630020016d38090000000000000000310016016c0020017609ffffffffffffffff3831001f012d002901373809000000000000000031001f01360029014009ffffffffffffffff3831001f013f002901493831001f0148002901523831001f01510029015b3831001f015a002901643809000000000000000031001f01630029016d09ffffffffffffffff3831001f016c0029017638310028012d003201373831002801360032014038090000000000000000310028013f0032014909ffffffffffffffff3809000000000000000031002801480032015209ffffffffffffffff3809000000000000000031002801510032015b09ffffffffffffffff38090000000000000000310028015a0032016409ffffffffffffffff3831002801630032016d38310028016c0032017638310031012d003b0137383100310136003b014038090000000000000000310031013f003b014909ffffffffffffffff380900000000000000003100310148003b015209ffffffffffffffff380900000000000000003100310151003b015b09ffffffffffffffff38090000000000000000310031015a003b016409ffffffffffffffff383100310163003b016d38310031016c003b01763831003a012d004401373831003a0136004401403809000000000000000031003a013f0044014909ffffffffffffffff3809000000000000000031003a01480044015209ffffffffffffffff3809000000000000000031003a01510044015b09ffffffffffffffff3809000000000000000031003a015a0044016409ffffffffffffffff3831003a01630044016d3831003a016c0044017638310043012d004d0137383100430136004d014038090000000000000000310043013f004d014909ffffffffffffffff380900000000000000003100430148004d015209ffffffffffffffff380900000000000000003100430151004d015b09ffffffffffffffff38090000000000000000310043015a004d016409ffffffffffffffff383100430163004d016d38310043016c004d01763831004c012d005601373809000000000000000031004c01360056014009ffffffffffffffff3831004c013f005601493831004c0148005601523831004c01510056015b3831004c015a005601643809000000000000000031004c01630056016d09ffffffffffffffff3831004c016c0056017638090000000000000000310055012d005f013709ffffffffffffffff383100550136005f014038310055013f005f0149383100550148005f0152383100550151005f015b38310055015a005f0164383100550163005f016d38090000000000000000310055016c005f017609ffffffffffffffff38300094000400dd004d3100940004009e000e38310094000d009e0017383100940016009e002038310094001f009e0029383100940028009e0032383100940031009e003b38310094003a009e0044383100940043009e004d3831009d000400a7000e3831009d000d00a700173831009d001600a700203831009d001f00a700293831009d002800a700323831009d003100a7003b3831009d003a00a700443831009d004300a7004d383100a6000400b0000e383100a6000d00b00017383000a6001600b000203000a6001f00b000293000a6002800b000323000a6003100b0003b3100a6003a00b00044383100a6004300b0004d383100af000400b9000e383100af000d00b90017383000af001600b900203000af001f00b900293000af002800b900323000af003100b9003b3100af003a00b90044383100af004300b9004d383100b8000400c2000e383100b8000d00c20017383000b8001600c200203000b8001f00c200293000b8002800c200323000b8003100c2003b3100b8003a00c20044383100b8004300c2004d383100c1000400cb000e383100c1000d00cb0017383000c1001600cb00203000c1001f00cb00293000c1002800cb00323000c1003100cb003b3100c1003a00cb0044383100c1004300cb004d383100ca000400d4000e383100ca000d00d40017383100ca001600d40020383100ca001f00d40029383100ca002800d40032383100ca003100d4003b383100ca003a00d40044383100ca004300d4004d383100d3000400dd000e383100d3000d00dd0017383100d3001600dd0020383100d3001f00dd0029383100d3002800dd0032383100d3003100dd003b383100d3003a00dd0044383100d3004300dd004d38090000000000000000310094007900dd00c209ffffffffffffffff383100940079009e0083380900000000000000003100940082009e008c09ffffffffffffffff38090000000000000000310094008b009e009509ffffffffffffffff380900000000000000003100940094009e009e09ffffffffffffffff38090000000000000000310094009d009e00a709ffffffffffffffff3809000000000000000031009400a6009e00b009ffffffffffffffff3809000000000000000031009400af009e00b909ffffffffffffffff3831009400b8009e00c23809000000000000000031009d007900a7008309ffffffffffffffff3831009d008200a7008c3809000000000000000031009d008b00a7009509ffffffffffffffff3809000000000000000031009d009400a7009e09ffffffffffffffff3809000000000000000031009d009d00a700a709ffffffffffffffff3809000000000000000031009d00a600a700b009ffffffffffffffff3831009d00af00a700b93809000000000000000031009d00b800a700c209ffffffffffffffff380900000000000000003100a6007900b0008309ffffffffffffffff380900000000000000003100a6008200b0008c09ffffffffffffffff383100a6008b00b00095380900000000000000003100a6009400b0009e09ffffffffffffffff380900000000000000003100a6009d00b000a709ffffffffffffffff383100a600a600b000b0380900000000000000003100a600af00b000b909ffffffffffffffff380900000000000000003100a600b800b000c209ffffffffffffffff380900000000000000003100af007900b9008309ffffffffffffffff380900000000000000003100af008200b9008c09ffffffffffffffff380900000000000000003100af008b00b9009509ffffffffffffffff383100af009400b9009e383100af009d00b900a7380900000000000000003100af00a600b900b009ffffffffffffffff380900000000000000003100af00af00b900b909ffffffffffffffff380900000000000000003100af00b800b900c209ffffffffffffffff380900000000000000003100b8007900c2008309ffffffffffffffff380900000000000000003100b8008200c2008c09ffffffffffffffff380900000000000000003100b8008b00c2009509ffffffffffffffff383100b8009400c2009e383100b8009d00c200a7380900000000000000003100b800a600c200b009ffffffffffffffff380900000000000000003100b800af00c200b909ffffffffffffffff380900000000000000003100b800b800c200c209ffffffffffffffff380900000000000000003100c1007900cb008309ffffffffffffffff380900000000000000003100c1008200cb008c09ffffffffffffffff383100c1008b00cb0095380900000000000000003100c1009400cb009e09ffffffffffffffff380900000000000000003100c1009d00cb00a709ffffffffffffffff383100c100a600cb00b0380900000000000000003100c100af00cb00b909ffffffffffffffff380900000000000000003100c100b800cb00c209ffffffffffffffff380900000000000000003100ca007900d4008309ffffffffffffffff383100ca008200d4008c380900000000000000003100ca008b00d4009509ffffffffffffffff380900000000000000003100ca009400d4009e09ffffffffffffffff380900000000000000003100ca009d00d400a709ffffffffffffffff380900000000000000003100ca00a600d400b009ffffffffffffffff383100ca00af00d400b9380900000000000000003100ca00b800d400c209ffffffffffffffff383100d3007900dd0083380900000000000000003100d3008200dd008c09ffffffffffffffff380900000000000000003100d3008b00dd009509ffffffffffffffff380900000000000000003100d3009400dd009e09ffffffffffffffff380900000000000000003100d3009d00dd00a709ffffffffffffffff380900000000000000003100d300a600dd00b009ffffffffffffffff380900000000000000003100d300af00dd00b909ffffffffffffffff383100d300b800dd00c23809000000000000000031009400d300dd011c09ffffffffffffffff3831009400d3009e00dd3809000000000000000031009400dc009e00e609ffffffffffffffff3809000000000000000031009400e5009e00ef09ffffffffffffffff3809000000000000000031009400ee009e00f809ffffffffffffffff3809000000000000000031009400f7009e010109ffffffffffffffff380900000000000000003100940100009e010a09ffffffffffffffff380900000000000000003100940109009e011309ffffffffffffffff383100940112009e011c3809000000000000000031009d00d300a700dd09ffffffffffffffff3831009d00dc00a700e63809000000000000000031009d00e500a700ef09ffffffffffffffff3809000000000000000031009d00ee00a700f809ffffffffffffffff3809000000000000000031009d00f700a7010109ffffffffffffffff3809000000000000000031009d010000a7010a09ffffffffffffffff3831009d010900a701133809000000000000000031009d011200a7011c09ffffffffffffffff380900000000000000003100a600d300b000dd09ffffffffffffffff380900000000000000003100a600dc00b000e609ffffffffffffffff380900000000000000003100a600e500b000ef09ffffffffffffffff383100a600ee00b000f8383100a600f700b00101380900000000000000003100a6010000b0010a09ffffffffffffffff380900000000000000003100a6010900b0011309ffffffffffffffff380900000000000000003100a6011200b0011c09ffffffffffffffff380900000000000000003100af00d300b900dd09ffffffffffffffff380900000000000000003100af00dc00b900e609ffffffffffffffff383100af00e500b900ef380900000000000000003100af00ee00b900f809ffffffffffffffff380900000000000000003100af00f700b9010109ffffffffffffffff383100af010000b9010a380900000000000000003100af010900b9011309ffffffffffffffff380900000000000000003100af011200b9011c09ffffffffffffffff380900000000000000003100b800d300c200dd09ffffffffffffffff380900000000000000003100b800dc00c200e609ffffffffffffffff383100b800e500c200ef380900000000000000003100b800ee00c200f809ffffffffffffffff380900000000000000003100b800f700c2010109ffffffffffffffff383100b8010000c2010a380900000000000000003100b8010900c2011309ffffffffffffffff380900000000000000003100b8011200c2011c09ffffffffffffffff380900000000000000003100c100d300cb00dd09ffffffffffffffff380900000000000000003100c100dc00cb00e609ffffffffffffffff380900000000000000003100c100e500cb00ef09ffffffffffffffff383100c100ee00cb00f8383100c100f700cb0101380900000000000000003100c1010000cb010a09ffffffffffffffff380900000000000000003100c1010900cb011309ffffffffffffffff380900000000000000003100c1011200cb011c09ffffffffffffffff380900000000000000003100ca00d300d400dd09ffffffffffffffff383100ca00dc00d400e6380900000000000000003100ca00e500d400ef09ffffffffffffffff380900000000000000003100ca00ee00d400f809ffffffffffffffff380900000000000000003100ca00f700d4010109ffffffffffffffff380900000000000000003100ca010000d4010a09ffffffffffffffff383100ca010900d40113380900000000000000003100ca011200d4011c09ffffffffffffffff383100d300d300dd00dd380900000000000000003100d300dc00dd00e609ffffffffffffffff380900000000000000003100d300e500dd00ef09ffffffffffffffff380900000000000000003100d300ee00dd00f809ffffffffffffffff380900000000000000003100d300f700dd010109ffffffffffffffff380900000000000000003100d3010000dd010a09ffffffffffffffff380900000000000000003100d3010900dd011309ffffffffffffffff383100d3011200dd011c380900000000000000003100160187005f01d009ffffffffffffffff383100160187002001913831001601900020019a383100160199002001a33831001601a2002001ac3831001601ab002001b53831001601b4002001be3831001601bd002001c73831001601c6002001d03831001f0187002901913831001f01900029019a3831001f0199002901a33831001f01a2002901ac3831001f01ab002901b53831001f01b4002901be3831001f01bd002901c73831001f01c6002901d0383100280187003201913831002801900032019a383100280199003201a33809000000000000000031002801a2003201ac09ffffffffffffffff3809000000000000000031002801ab003201b509ffffffffffffffff3831002801b4003201be3831002801bd003201c73831002801c6003201d0383100310187003b0191383100310190003b019a380900000000000000003100310199003b01a309ffffffffffffffff3831003101a2003b01ac3831003101ab003b01b53809000000000000000031003101b4003b01be09ffffffffffffffff3831003101bd003b01c73831003101c6003b01d03831003a0187004401913831003a01900044019a3809000000000000000031003a0199004401a309ffffffffffffffff3831003a01a2004401ac3831003a01ab004401b53809000000000000000031003a01b4004401be09ffffffffffffffff3831003a01bd004401c73831003a01c6004401d0383100430187004d0191383100430190004d019a383100430199004d01a33809000000000000000031004301a2004d01ac09ffffffffffffffff3809000000000000000031004301ab004d01b509ffffffffffffffff3831004301b4004d01be3831004301bd004d01c73831004301c6004d01d03831004c0187005601913831004c01900056019a3831004c0199005601a33831004c01a2005601ac3831004c01ab005601b53831004c01b4005601be3831004c01bd005601c73831004c01c6005601d0383100550187005f0191383100550190005f019a383100550199005f01a33831005501a2005f01ac3831005501ab005f01b53831005501b4005f01be3831005501bd005f01c73831005501c6005f01d038310094012d00dd017638090000000000000000310094012d009e013709ffffffffffffffff383100940136009e014038310094013f009e0149383100940148009e0152383100940151009e015b38310094015a009e0164383100940163009e016d38090000000000000000310094016c009e017609ffffffffffffffff3831009d012d00a701373809000000000000000031009d013600a7014009ffffffffffffffff3831009d013f00a701493831009d014800a701523831009d015100a7015b3831009d015a00a701643809000000000000000031009d016300a7016d09ffffffffffffffff3831009d016c00a70176383100a6012d00b00137383100a6013600b00140383100a6013f00b00149383100a6014800b00152383100a6015100b0015b383100a6015a00b00164383100a6016300b0016d383100a6016c00b00176383100af012d00b90137383100af013600b90140383100af013f00b90149383100af014800b90152383100af015100b9015b383100af015a00b90164383100af016300b9016d383100af016c00b90176383100b8012d00c20137383100b8013600c20140383100b8013f00c20149383100b8014800c20152383100b8015100c2015b383100b8015a00c20164383100b8016300c2016d383100b8016c00c20176383100c1012d00cb0137383100c1013600cb0140383100c1013f00cb0149383100c1014800cb0152383100c1015100cb015b383100c1015a00cb0164383100c1016300cb016d383100c1016c00cb0176383100ca012d00d40137380900000000000000003100ca013600d4014009ffffffffffffffff383100ca013f00d40149383100ca014800d40152383100ca015100d4015b383100ca015a00d40164380900000000000000003100ca016300d4016d09ffffffffffffffff383100ca016c00d40176380900000000000000003100d3012d00dd013709ffffffffffffffff383100d3013600dd0140383100d3013f00dd0149383100d3014800dd0152383100d3015100dd015b383100d3015a00dd0164383100d3016300dd016d380900000000000000003100d3016c00dd017609ffffffffffffffff38310094018700dd01d0383100940187009e0191383100940190009e019a383100940199009e01a33831009401a2009e01ac3831009401ab009e01b53831009401b4009e01be3831009401bd009e01c73831009401c6009e01d03831009d018700a701913831009d019000a7019a3831009d019900a701a33831009d01a200a701ac3831009d01ab00a701b53831009d01b400a701be3831009d01bd00a701c73831009d01c600a701d0383100a6018700b00191383100a6019000b0019a380900000000000000003100a6019900b001a309ffffffffffffffff383100a601a200b001ac383100a601ab00b001b5380900000000000000003100a601b400b001be09ffffffffffffffff383100a601bd00b001c7383100a601c600b001d0383100af018700b90191383100af019000b9019a383100af019900b901a3380900000000000000003100af01a200b901ac09ffffffffffffffff380900000000000000003100af01ab00b901b509ffffffffffffffff383100af01b400b901be383100af01bd00b901c7383100af01c600b901d0383100b8018700c20191383100b8019000c2019a383100b8019900c201a3380900000000000000003100b801a200c201ac09ffffffffffffffff380900000000000000003100b801ab00c201b509ffffffffffffffff383100b801b400c201be383100b801bd00c201c7383100b801c600c201d0383100c1018700cb0191383100c1019000cb019a380900000000000000003100c1019900cb01a309ffffffffffffffff383100c101a200cb01ac383100c101ab00cb01b5380900000000000000003100c101b400cb01be09ffffffffffffffff383100c101bd00cb01c7383100c101c600cb01d0383100ca018700d40191383100ca019000d4019a383100ca019900d401a3383100ca01a200d401ac383100ca01ab00d401b5383100ca01b400d401be383100ca01bd00d401c7383100ca01c600d401d0383100d3018700dd0191383100d3019000dd019a383100d3019900dd01a3383100d301a200dd01ac383100d301ab00dd01b5383100d301b400dd01be383100d301bd00dd01c7383100d301c600dd01d0380900000000000000003100160079005f00c209ffffffffffffffff3809000000000000000031001600790020008309ffffffffffffffff3831001600820020008c38310016008b002000953831001600940020009e38310016009d002000a73831001600a6002000b03831001600af002000b93809000000000000000031001600b8002000c209ffffffffffffffff3831001f0079002900833809000000000000000031001f00820029008c09ffffffffffffffff3831001f008b002900953831001f00940029009e3831001f009d002900a73831001f00a6002900b03809000000000000000031001f00af002900b909ffffffffffffffff3831001f00b8002900c2383100280079003200833831002800820032008c38090000000000000000310028008b0032009509ffffffffffffffff3831002800940032009e38310028009d003200a73809000000000000000031002800a6003200b009ffffffffffffffff3831002800af003200b93831002800b8003200c2383100310079003b0083383100310082003b008c38310031008b003b0095380900000000000000003100310094003b009e09ffffffffffffffff38090000000000000000310031009d003b00a709ffffffffffffffff3831003100a6003b00b03831003100af003b00b93831003100b8003b00c23831003a0079004400833831003a00820044008c3831003a008b004400953809000000000000000031003a00940044009e09ffffffffffffffff3809000000000000000031003a009d004400a709ffffffffffffffff3831003a00a6004400b03831003a00af004400b93831003a00b8004400c2383100430079004d0083383100430082004d008c38090000000000000000310043008b004d009509ffffffffffffffff383100430094004d009e38310043009d004d00a73809000000000000000031004300a6004d00b009ffffffffffffffff3831004300af004d00b93831004300b8004d00c23831004c0079005600833809000000000000000031004c00820056008c09ffffffffffffffff3831004c008b005600953831004c00940056009e3831004c009d005600a73831004c00a6005600b03809000000000000000031004c00af005600b909ffffffffffffffff3831004c00b8005600c2380900000000000000003100550079005f008309ffffffffffffffff383100550082005f008c38310055008b005f0095383100550094005f009e38310055009d005f00a73831005500a6005f00b03831005500af005f00b93809000000000000000031005500b8005f00c209ffffffffffffffff38a10096000c01000000020000000000000001000a00000012000c003d2c000c00150948656c7665746963610300150d000a2b130906536f75726365a00097a10096000c02000000020000000000000001000a007e0000008a004f280087000e0b44657374696e6174696f6ea00097a10096000c02000000020000000000000001000a007e0075008a00c4297c076e6f74436f7079a00097a10096000c02000000020000000000000001000a007e00cf008a011e295b066e6f74584f52a00097a10096000c02000000020000000000000001000a007e0129008a0178295f056e6f744f72a00097a10096000c02000000020000000000000001000a007e0183008a01d22959066e6f74426963a00097a10096000c02000000020000000000000001000a00000075000c00c42800090084086d6f6465436f7079a00097a10096000c02000000020000000000000001000a000000cf000c011e295b076d6f6465584f52a00097a10096000c02000000020000000000000001000a00000129000c0178295f066d6f64654f72a00097a10096000c02000000020000000000000001000a00000183000c01d22958076d6f6465424943a00097a00083ff}}{\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-7:  Pen Modes\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par It's very important to keep in mind that these operations are bitwise operations.  The distinction doesn't matter when we're looking at black and white pictures, where drawing a white pixel on a white background in }{\f6\fs20 modeXOR}{\f4  will make the pixel black.  It matters a lot when we use colors, though.  For example, if you use }{\f6\fs20 modeXOR}{\f4  to draw a white pixel in 320 mode (value $F, or all four bits set) on a red background (value $7, or 0111 in binary), the result is a beige pixel (value $8, or 1000 in binary).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Rubber-Banding\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rubber-banding}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modeXOR}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 modeXOR}{\f4  has a very useful feature.  If you draw the exact same image twice in }{\f6\fs20 modeXOR}{\f4 , you end up drawing the image and then erasing it.  It doesn't matter how complicated the picture is that you draw, or how complicated the background is, or even what colors are involved: draw the image once and it appears, draw it again and it vanishes.  We can put this technique to work for something called rubber-banding.\par When you use a drawing program to draw a line, you start by pressing the mouse at one end of the line, then you drag until you get to the other end.  While you're doing this, you see the line that you would get if you let up on the mouse button \endash  move the mouse a little, and the line gets redrawn in the new spot.  That's what rubber-banding is.  You get to "stretch" a line or object from one point to another.  The way it's done is with }{\f6\fs20 modeXOR}{\f4 , drawing the image once so you see it, and again to erase it.  You'll put this to use a bit later in a program.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StillDown}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetMouse}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It messes up the event loop to try and handle rubber-banding in the main even loop, so it's best to create a second event loop that handles the rubber-banding, and only exits once the user is finished dragging the shape around.  For such a simple task as following the mouse, though, it doesn't make sense to set up a full-fledged event loop, where you would have to allow for all of the various possible kinds of events.  Instead, you can use two calls, }{\f6\fs20 StillDown}{\f4  and }{\f6\fs20 GetMouse}{\f4 , to track the mouse.  }{\f6\fs20 StillDown}{\f4  checks to see if the mouse button is still down, returning true if it is and false if it isn't.  You stay in your rubber-banding loop as long as }{\f6\fs20 StillDown}{\f4  returns true.  }{\f6\fs20 GetMouse}{\f4  reads the position of the mouse (in local coordinates!).  Putting these two commands to work, here's a simple loop that will handle rubber-banding for a line.  This subroutine is a little more complicated than it has to be, mostly because it bothers to check to see if the mouse has really moved before redrawing the line.  This avoids a nasty problem in simpler rubber-banding subroutines, where the line can flicker while the mouse is held still.  Also, this subroutine just handles the rubber-banding \endash  it's up to the caller to draw the finished line after this subroutine returns.  The caller is also responsible for setting up the pen mode it wants to use; this subroutine leaves the pen mode in }{\f6\fs20 modeXOR}{\f4 .\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 procedure RubberBand (start: point; var finish: point);\par \par \{ Entered to draw a line in rubber-band mode.                   \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    start - initial point on the line                          \}\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 \{    finish - (output) end point for the line                   \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    newPoint: point;                      \{mouse position\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{RubberBand\}\par \{get ready to rubber-band\}\par finish := start;\par PenNormal;\par SetSolidPenPat(15);\par }\pard \li180\widctlpar\adjustright {\f6\fs20 SetPenMode(modeXOR);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{draw the initial line\}\par MoveTo(start.h, start.v);\par }\pard \li180\widctlpar\adjustright {\f6\fs20 LineTo(finish.h, finish.v);\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{rubber-band loop\}\par while StillDown(0) do begin\par    GetMouse(newPoint);\par    if (newPoint.h <> finish.h) or (newPoint.v <> finish.v) then begin\par       MoveTo(start.h, start.v);\par       LineTo(finish.h, finish.v);\par       finish := newPoint;\par       MoveTo(start.h, start.v);\par       LineTo(finish.h, finish.v);\par       end; \{if\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{while\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{erase the line\}\par MoveTo(start.h, start.v);\par LineTo(finish.h, finish.v);\par end. \{RubberBand\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 9-2:  Rubber-Banding\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Pen Masks}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Pen Masks\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen masks}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The pen mask is another eight pixel by eight pixel pattern, just like the pen itself.  Unlike the pen, though, the pen mask is a simple bit map, one bit per pixel in the pen.  If a bit in the pen mask is set, the corresponding bit is drawn on the screen, but if the pen mask bit is clear, that pixel isn't drawn on the screen.\par Probably the most common use for pen masks is to draw something in an unhighlighted or unselected state.  A good example of this is a dimmed menu item.  By setting the pen mask to a checkerboard pattern, and then drawing something, only every other pixel is actually drawn.  That's exactly what you normally see for dimmed menus.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1060{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw258\pich96\picwgoal5160\pichgoal1920\macpict\bliptag-1414295203\blipupi72{\*\blipuid abb3915d37d4739943a7633ab9569c16}0ef4ffffffff005f01011101a0008201000affffffff005f01010900000000000000003100160001005f004a09ffffffffffffffff3809000000000000000031001600010020000b09ffffffffffffffff38090000000000000000310016000a0020001409ffffffffffffffff3831001600130020001d38310016001c002000263831001600250020002f38310016002e002000383809000000000000000031001600370020004109ffffffffffffffff3809000000000000000031001600400020004a09ffffffffffffffff3809000000000000000031001f00010029000b09ffffffffffffffff3809000000000000000031001f000a0029001409ffffffffffffffff3809000000000000000031001f00130029001d09ffffffffffffffff3831001f001c002900263831001f00250029002f3809000000000000000031001f002e0029003809ffffffffffffffff3809000000000000000031001f00370029004109ffffffffffffffff3809000000000000000031001f00400029004a09ffffffffffffffff3831002800010032000b38090000000000000000310028000a0032001409ffffffffffffffff3809000000000000000031002800130032001d09ffffffffffffffff38090000000000000000310028001c0032002609ffffffffffffffff3809000000000000000031002800250032002f09ffffffffffffffff38090000000000000000310028002e0032003809ffffffffffffffff3809000000000000000031002800370032004109ffffffffffffffff3831002800400032004a383100310001003b000b38310031000a003b0014380900000000000000003100310013003b001d09ffffffffffffffff38090000000000000000310031001c003b002609ffffffffffffffff380900000000000000003100310025003b002f09ffffffffffffffff38090000000000000000310031002e003b003809ffffffffffffffff383100310037003b0041383100310040003b004a3831003a00010044000b3831003a000a004400143809000000000000000031003a00130044001d09ffffffffffffffff3809000000000000000031003a001c0044002609ffffffffffffffff3809000000000000000031003a00250044002f09ffffffffffffffff3809000000000000000031003a002e0044003809ffffffffffffffff3831003a0037004400413831003a00400044004a383100430001004d000b38090000000000000000310043000a004d001409ffffffffffffffff380900000000000000003100430013004d001d09ffffffffffffffff38090000000000000000310043001c004d002609ffffffffffffffff380900000000000000003100430025004d002f09ffffffffffffffff38090000000000000000310043002e004d003809ffffffffffffffff380900000000000000003100430037004d004109ffffffffffffffff383100430040004d004a3809000000000000000031004c00010056000b09ffffffffffffffff3809000000000000000031004c000a0056001409ffffffffffffffff3809000000000000000031004c00130056001d09ffffffffffffffff3831004c001c005600263831004c00250056002f3809000000000000000031004c002e0056003809ffffffffffffffff3809000000000000000031004c00370056004109ffffffffffffffff3809000000000000000031004c00400056004a09ffffffffffffffff380900000000000000003100550001005f000b09ffffffffffffffff38090000000000000000310055000a005f001409ffffffffffffffff383100550013005f001d38310055001c005f0026383100550025005f002f38310055002e005f0038380900000000000000003100550037005f004109ffffffffffffffff380900000000000000003100550040005f004a09ffffffffffffffff3809000000000000000031001600b5005f00fe09ffffffffffffffff3809000000000000000031001600b5002000bf09ffffffffffffffff3831001600be002000c83831001600c7002000d13831001600d0002000da3831001600d9002000e33831001600e2002000ec3809000000000000000031001600eb002000f509ffffffffffffffff3831001600f4002000fe3831001f00b5002900bf3809000000000000000031001f00be002900c809ffffffffffffffff3831001f00c7002900d13831001f00d0002900da3831001f00d9002900e33809000000000000000031001f00e2002900ec09ffffffffffffffff3831001f00eb002900f53809000000000000000031001f00f4002900fe09ffffffffffffffff3831002800b5003200bf3831002800be003200c83809000000000000000031002800c7003200d109ffffffffffffffff3831002800d0003200da3809000000000000000031002800d9003200e309ffffffffffffffff3831002800e2003200ec3809000000000000000031002800eb003200f509ffffffffffffffff3831002800f4003200fe3831003100b5003b00bf3831003100be003b00c83831003100c7003b00d13809000000000000000031003100d0003b00da09ffffffffffffffff3831003100d9003b00e33809000000000000000031003100e2003b00ec09ffffffffffffffff3831003100eb003b00f53831003100f4003b00fe3831003a00b5004400bf3831003a00be004400c83809000000000000000031003a00c7004400d109ffffffffffffffff3831003a00d0004400da3809000000000000000031003a00d9004400e309ffffffffffffffff3831003a00e2004400ec3831003a00eb004400f53831003a00f4004400fe3831004300b5004d00bf3809000000000000000031004300be004d00c809ffffffffffffffff3831004300c7004d00d13809000000000000000031004300d0004d00da09ffffffffffffffff3831004300d9004d00e33809000000000000000031004300e2004d00ec09ffffffffffffffff3831004300eb004d00f53831004300f4004d00fe3809000000000000000031004c00b5005600bf09ffffffffffffffff3831004c00be005600c83809000000000000000031004c00c7005600d109ffffffffffffffff3831004c00d0005600da3831004c00d9005600e33831004c00e2005600ec3809000000000000000031004c00eb005600f509ffffffffffffffff3831004c00f4005600fe3831005500b5005f00bf3809000000000000000031005500be005f00c809ffffffffffffffff3831005500c7005f00d13831005500d0005f00da3831005500d9005f00e33831005500e2005f00ec3831005500eb005f00f53809000000000000000031005500f4005f00fe09ffffffffffffffff38090000000000000000310016005b005f00a409ffffffffffffffff38090000000000000000310016005b0020006509ffffffffffffffff3831001600640020006e38090000000000000000310016006d0020007709ffffffffffffffff3831001600760020008038090000000000000000310016007f0020008909ffffffffffffffff383100160088002000923809000000000000000031001600910020009b09ffffffffffffffff38310016009a002000a43831001f005b002900653809000000000000000031001f00640029006e09ffffffffffffffff3831001f006d002900773809000000000000000031001f00760029008009ffffffffffffffff3831001f007f002900893809000000000000000031001f00880029009209ffffffffffffffff3831001f00910029009b3809000000000000000031001f009a002900a409ffffffffffffffff38090000000000000000310028005b0032006509ffffffffffffffff3831002800640032006e38090000000000000000310028006d0032007709ffffffffffffffff3831002800760032008038090000000000000000310028007f0032008909ffffffffffffffff383100280088003200923809000000000000000031002800910032009b09ffffffffffffffff38310028009a003200a438310031005b003b0065380900000000000000003100310064003b006e09ffffffffffffffff38310031006d003b0077380900000000000000003100310076003b008009ffffffffffffffff38310031007f003b0089380900000000000000003100310088003b009209ffffffffffffffff383100310091003b009b38090000000000000000310031009a003b00a409ffffffffffffffff3809000000000000000031003a005b0044006509ffffffffffffffff3831003a00640044006e3809000000000000000031003a006d0044007709ffffffffffffffff3831003a0076004400803809000000000000000031003a007f0044008909ffffffffffffffff3831003a0088004400923809000000000000000031003a00910044009b09ffffffffffffffff3831003a009a004400a438310043005b004d0065380900000000000000003100430064004d006e09ffffffffffffffff38310043006d004d0077380900000000000000003100430076004d008009ffffffffffffffff38310043007f004d0089380900000000000000003100430088004d009209ffffffffffffffff383100430091004d009b38090000000000000000310043009a004d00a409ffffffffffffffff3809000000000000000031004c005b0056006509ffffffffffffffff3831004c00640056006e3809000000000000000031004c006d0056007709ffffffffffffffff3831004c0076005600803809000000000000000031004c007f0056008909ffffffffffffffff3831004c0088005600923809000000000000000031004c00910056009b09ffffffffffffffff3831004c009a005600a438310055005b005f0065380900000000000000003100550064005f006e09ffffffffffffffff38310055006d005f0077380900000000000000003100550076005f008009ffffffffffffffff38310055007f005f0089380900000000000000003100550088005f009209ffffffffffffffff383100550091005f009b38090000000000000000310055009a005f00a409ffffffffffffffff38a10096000c02000000020000000000000001000a0000000b000c003f2c000c00150948656c7665746963610300150d000a2b1509077061747465726ea00097a10096000c02000000020000000000000001000a00000057000c00a6295e046d61736ba00097a10096000c02000000020000000000000001000a000000b1000c0100295d0370656ea00097a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-8:  Pen Mask\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPenMask}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Here's a sample section of code that could be used to set up a dimmed pen mask.  To set the pen back to normal, you could either use }{\f6\fs20 SetPenMask}{\f4  a second time with a mask set to all $FFs, or you could use }{\f6\fs20 PenNormal}{\f4 .\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure DimmedMask;\par \par \{ Set the pen mask for drawing dimmed items                     \}\par \par var\par    i: integer;                           \{loop variable\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    myMask: mask;                         \{pen mask\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{DimmedMask\}\par for i := 0 to 3 do begin\par    myMask[i*2] := $55;\par    myMask[i*2+1] := $AA;\par    end; \{for\}\par SetPenMask(myMask);\par end; \{DimmedMask\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 9-3:  Set the Pen Mask for Dimmed Drawing\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Drawing Shapes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Drawing Shapes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 We've used }{\f6\fs20 PaintRect}{\f4  to fill in large, rectangular areas of the screen, and occasionally to clear a window or even draw a rectangle.  It's almost that easy to draw a lot of other shapes on the screen, too.  In addition, you can do a lot more than just fill them in with the current pen pattern, like }{\f6\fs20 PaintRect}{\f4  does.  Each shape can also be filled; filling works a lot like painting, but you give QuickDraw a pattern along with the shape, so you don't have to set the pen pattern before drawing the object.  You can also erase a shape, which fills in the shape with the background color for the window (generally white).  Shapes can be inverted, which flips all of the bits in the shape.  Inverting a shape has the same effect as setting the pen color to white, setting the pen mode to }{\f6\fs20 modeXOR}{\f4 , and then drawing the shape \endash  but you don't have to set the pen mode or color first, and you don't have to change them back when you've finished drawing.  Finally, you can frame a shape, which outlines the shape using the current pen color and size.  Framing a shape is just like using }{\f6\fs20 MoveTo}{\f4  and }{\f6\fs20 LineTo}{\f4  to outline the shape.\par In the sections below we'll talk about each of these shapes in detail.  Here's a quick map before we start, in the form of a typical picture of each of the basic shapes.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1061{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw272\pich62\picwgoal5440\pichgoal1240\macpict\bliptag-984815513\blipupi72{\*\blipuid c54ce8679a91f43cd6d813bc56cdbf7b}02efffffffff003d010f1101a00082a0008c01000affffffff003d010f3100010001001d002f38a10096000c01000000020000000000000001000a002400030030002b0300140d000a2b042d0952656374616e676c65a00097a0008da0008c01000affffffff003d010f510001003e001d006c58a10096000c01000000020000000000000001000a0024004a0030005e2947044f76616ca00097a0008da0008c01000affffffff003d010f6000010047003800a20000005aa10096000c01000000020000000000000001000a0024008300300092293903417263a00097a0008da0008c01000affffffff003d010f0b001b001b41000100ab001d00d948a10096000c01000000020000000000000001000a002400aa003c00d2292706526f756e64202a0c0952656374616e676c65a00097a0008da0008ca10096000c01000000020000000000000001000a002400e60030010828002d00e707506f6c79676f6ea0009701000affffffff003d010f070000000022e0c0e0c00000a000a0a100a40002070001000a0000000000000000070001000122000b00e11b002300002300f723000023120e23000023ee0d2300002300f723000023e5002300002300f723000084000a0000000000000000a000a301000affffffff003d010f8400f4000200e1001d010e000200fc00fd7fff000300fd00fe7fff000400fe00ff7fff000500ff01007fff0006010001027fff0007010201037fff0008010301047fff0009010401067fff000a010601077fff000b00e100fc010701087fff000c010801097fff000d0109010b7fff000e010b010c7fff000f010c010d7fff0010010d010e7fff0011010d010e7fff0012010c010d7fff0013010a010c7fff001400e100fc0109010a7fff0015010701097fff0016010601077fff0017010501067fff0018010301057fff0019010201037fff001a010001027fff001b00ff01007fff001c00fe00ff7fff001d00fc00fe7fff7fff231b002300f723120e23ee0d2300f723e5002300f7a000a1a0008da00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-9:  The Basic Shapes in QuickDraw II\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Rectangle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure EraseRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EraseRect}}}{\f6\fs20  (r: rect);\par procedure FillRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FillRect}}}{\f6\fs20   (r: rect; p: pattern);\par procedure FrameRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FrameRect}}}{\f6\fs20  (r: rect);\par procedure InvertRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 InvertRect}}}{\f6\fs20 (r: rect);\par procedure PaintRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PaintRect}}}{\f6\fs20  (r: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You've already seen and used rectangles.  The }{\f6\fs20 rect}{\f4  record gets filled in with the top, bottom, left and right dimension of the rectangle, then you make the appropriate call.\par There is one subtle point about how rectangles are drawn that is real easy to miss, and very unexpected (at least to me).  When you paint this rectangle:\par \par }{\f6\fs20 r.h1 := 1;  r.h2 := 10; r.v2 := 1; r.v2 := 10;\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 you might expect to see a picture that looks like the one you would get from this loop:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 for h := 1 to 10 do begin\par    MoveTo(h, 1);\par    LineTo(h, 10);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    end; \{for\}\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Well, it's not.  Actually, }{\f6\fs20 PaintRect}{\f4 , }{\f6\fs20 EraseRect}{\f4  and }{\f6\fs20 FillRect}{\f4  all fill the }{\i\f4 interior}{\f4  of the rectangle outlined by the points in the }{\f6\fs20 rect}{\f4  record.  That means the right and bottom edge are filled up to, but not including the coordinates you give.  In short, the rectangle really looks like the one drawn by this loop:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 for h := 1 to 9 do begin\par    MoveTo(h, 1);\par    LineTo(h, 9);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    end; \{for\}\par }{\f4 \par Framing a rectangle works the same way, so framing our example rectangle would produce a drawing that would look like this one:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 SetPenSize(1, 1);\par MoveTo(1, 1);\par LineTo(9, 1);\par LineTo(9, 9);\par LineTo(1, 9);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 LineTo(1, 1);\par }{\f4 \par There's one other subtlety, though.  The idea is that }{\f6\fs20 FrameRect}{\f4  should only affect pixels that are entirely inside the boundary set by the rect record.  What happens when you set the pen width to something bigger, say 2 by 2?  The answer is that QuickDraw moves in as many pixels as it needs to.  With a pen size of 2 by 2, you would have to pass 8 to }{\f6\fs20 MoveTo}{\f4  and }{\f6\fs20 LineTo}{\f4  to mimic }{\f6\fs20 FrameRect}{\f4 .\par While I'm not going to assign a problem about drawing rectangles, if you are not quite sure what I mean about rectangles being drawn inside the border you set up in the rect record, I'd suggest writing a few short programs to try out the loops from this section, along with a few more that use }{\f6\fs20 FrameRect}{\f4  with pen widths other than one by one.  You can use a short, graphics only program like the Dither program from earlier in this lesson, so it isn't that hard.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Oval\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ovals}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure EraseOval}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EraseOval}}}{\f6\fs20  (r: rect);\par procedure FillOval}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FillOval}}}{\f6\fs20   (r: rect; p: pattern);\par procedure FrameOval}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FrameOval}}}{\f6\fs20  (r: rect);\par procedure InvertOval}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 InvertOval}}}{\f6\fs20 (r: rect);\par procedure PaintOval}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PaintOval}}}{\f6\fs20  (r: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Ovals are basically squashed circles.  Of course, if you draw a "square" oval, with the height and width the same size, you get a perfect, unsquashed circle.\par The only thing you have to tell QuickDraw to draw an oval is how big it is.  QuickDraw figures out all of the messy math and draws an oval.  It even lives up to it's name, drawing the oval pretty quickly.\par As with rectangles, the oval is entirely }{\i\f4 inside}{\f4  the border you set up in the rect record.  For example, this code looks like it would draw a box around an oval:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 r.h1 := 1;\par r.h2 := 10;\par r.v1 := 1;\par r.v2 := 5;\par SetSolidPenPat(5);\par PaintOval(r);\par SetSolidPenPat(1);\par MoveTo(1, 1);\par LineTo(10, 1);\par LineTo(10, 5);\par LineTo(1, 5);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 LineTo(1, 1);\par }{\f4 \par If you think it will, you should try it in a short program.  What actually happens is the top and left lines hit the topmost and leftmost pixels, but the bottom and right lines are one pixel below and to the right of the oval.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Arc\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 arcs}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure EraseArc}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EraseArc}}}{\f6\fs20  (r: rect; startAngle, arcAngle: integer);\par procedure FillArc}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FillArc}}}{\f6\fs20   (r: rect; startAngle, arcAngle: integer; p: pattern);\par procedure FrameArc}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FrameArc}}}{\f6\fs20  (r: rect; startAngle, arcAngle: integer);\par procedure InvertArc}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 InvertArc}}}{\f6\fs20 (r: rect; startAngle, arcAngle: integer);\par procedure PaintArc}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PaintArc}}}{\f6\fs20  (r: rect; startAngle, arcAngle: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 An arc is a chunk cut from an oval, more or less the way you would cut a slice of pie.  You give a start angle and an arc angle, which tell QuickDraw how big of a pie slice you want, and QuickDraw draws just the part of the oval from the start angle to the start angle plus arc angle.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1062{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw187\pich134\picwgoal3740\pichgoal2680\macpict\bliptag1093243272\blipupi72{\*\blipuid 4129918882ad1572cfb930383afb2e06}075dffffffff008500ba1101a0008201000affffffff008500ba6000230011006c005a0000002171001e00240044002e004f002e004f002900440027004600240048002e004f2200290048fefea10096000c01000000020000000000000001000a00390088004500b92c000c00150948656c7665746963610300150d000a2b89420961726320616e676c65a0009701000affffffff008500ba070000000022e0c0e0c00000a000a0a100a40002030001000a00000000000000000700010001090000000000000000220023005802fe23040123fffc23faf923fe0023f0f723fdfe23f7fd23f8fe23f60023f90523fd0223ff0423ef112308fd2311fa2304ff2307fd2303ff2304fc2303072306052305022303032307022302012306ff2302000a000000000000000084000a0000000000000000a000a301000affffffff008500ba8401d40007000e0025005d0007002900317fff000800250029003100367fff000900230025003600397fff000a002200230039003e7fff000b00210022003e00417fff000c00200021004100427fff000d001f0020004200447fff000e001e001f004400467fff000f001d001e004600487fff00100048004a7fff0011001c001d004a004c7fff0012001b001c00360037004c004e7fff00130034003600370038004e00507fff0014001a001b00330034005000517fff00150019001a0032003300380039005100537fff001600180019002e0032005300557fff001700170018002b002e0039003a005500577fff001800160017002a002b003a003b005700587fff0019001500160026002a003b003c005800597fff001a0014001500240026003c003d0059005a7fff001b0013001400210024003d003e005a005b7fff001c00120013001e0021003e003f005b005c7fff001d00110012001b001e003f00407fff001e001000110019001b00400042005c005d7fff001f000f001000160019004200447fff002000130016004400467fff0021000e000f00120013004600477fff0022000e0012004700480059005d7fff00230048004c005800597fff0024004c0050005300587fff0025005000537fff7fff220023005800002301ff2301002302002300002301002300002300002300fe2300002300002300ff23ffff23fffe23ffff23ffff23ffff23ffff23ffff23000023000023feff23feff23fdfe23feff23feff23fcfe23feff23feff23000023000023feff23ffff23ff0023feff23fe0023fcff23feff23fe0023fcff23fd0023fe0023fb0123fe0123fe0223fe0223000023ff0123ff0123000123000023fe0323fe0223fc0423fe0223ff0123fe0223ff0223ff012300002300002300022300ff2301002301002303fe2303ff2303ff2302ff2303ff2303ff2303ff2302ff2300002301002303ff2301ff2301002302ff2301002301002300002301002302fe2301ff2300002302ff2301012301012300012301022302022301012302022302022301002302012302012301012301012302012301002301002302012301002301002300002301012301002302ff230200230200230100a000a1a10096000c01000000020000000000000001000a001e0000002a003128002700010b537461727420616e676c65a0009701000affffffff008500ba09ffffffffffffffff220049003500b8a0008ca100d8000400004000a100d6000400004000a000d70700000000080017233749a100ca00080000000000000000a100c80008000000890089001409000000000000000061002a004d00a900cc010e005a070001000109ffffffffffffffff68010e005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d908000809000000000000000071005e001d00400076007f001d006e001f00700024007400290077002e007a0034007c003b007e0041007f0046007f004a007f004d007f0054007e0059007d005f007b00650078006a0075006f00720074006d0076006b00480040001d006e09ffffffffffffffff700056001d00400076007f001d006e001f00700024007400290077002e007a0034007c003b007e0041007f0046007f004a007f004d007f0054007e0059007d005f007b00650078006a0075006f00720074006d0076006ba100d8000400004000a000bfa000d9a000d7a100d8000400004000a100d6000400004000a000d70700000000080017220076006bf4d4a100ca00080000000000000000a100c800080000008a008a001f070006000609aa55aa55aa55aa5560002c0041009e00b3010e005aa000c9a100d6000400004000a000d7a000d9a100d6000400004000a100d8000400004000a000bea000d90800087000560021005a006d006b0021005e0024006000270063002d0066003100680036006a003b006b003f006b0045006b0048006b004a006b0051006a00550069005a0067005f00650062006300670060006b005c006d005aa100d8000400004000a000bfa000d9a000d7070001000109ffffffffffffffff220083006acbc5233bcb71001e006e00690079007300790069006e006e007000700072007300790069220072006e02fea0008da00083ff}}{\f4 \par \par Figure 9-10:  Angles in an Arc\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you've ever done much with angles on computers, you are used to dealing with radians instead of degrees.  Well, surprise!  You can never get to complacent, because waiting around the corner is some piece of software that blows away all of your conventions.  The arc commands use angles specified in degrees.  They also use compass style headings, with 0 degrees at the top of the circle, 90 degrees to the right, and so on.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Round Rectangle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rounded rectangles}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure EraseRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 EraseRRect}}}{\f6\fs20  (r: rect; ovalWidth, ovalHeight: integer);\par procedure FillRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FillRRect}}}{\f6\fs20   (r: rect; ovalWidth, ovalHeight: integer; p: pattern);\par procedure FrameRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FrameRRect}}}{\f6\fs20  (r: rect; ovalWidth, ovalHeight: integer);\par procedure InvertRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 InvertRRect}}}{\f6\fs20 (r: rect; ovalWidth, ovalHeight: integer);\par procedure PaintRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PaintRRect}}}{\f6\fs20  (r: rect; ovalWidth, ovalHeight: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1063{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw215\pich147\picwgoal4300\pichgoal2940\macpict\bliptag-954875026\blipupi72{\*\blipuid c715c36e0e82b9295505620789f24fce}0225ffffffff009200d61101a00082a10096000c02000000020000000000000001000a00040074001000992c000c00150948656c7665746963610300150d000a2b7b0d057769647468a0009701000affffffff009200d60900000000000000000b00240024410020000e007b009b09ffffffffffffffff4809000000000000000031000e0001009200383831006d0025008900b13831003b0088006e00ad385100200068004a00a809ffffffffffffffff5822003700a7003a2200010068001222000100a7001222002000b9120022004900b91200a10096000c02000000020000000000000001000a002f00b0003b00d52b3a2b06686569676874a0009701000affffffff009200d671001e00070068000d0074000a006800070074000a0074000d0074000a006822000a0074060071001e0007009b000d00a7000a00a7000d009b000a009b0007009b000a00a722000a009bfa0071001e002000bf002c00c5002000c2002c00c5002c00c2002c00bf002000c222002c00c2000271001e003d00bf004900c5004900c2003d00bf003d00c2003d00c5004900c222003d00c200fe09800008008000080022002000321200098822882288228822220020003b120009aa55aa55aa55aa55220020004412000977dd77dd77dd77dd220020004d120009880022008800220022006400a7001209882288228822882222005b00a7001209aa55aa55aa55aa5522005200a7001209ddff77ffddff77ff22004900a70012a00083ff}}{\f4 \par \par Figure 9-11:  Oval Size in a Round Rectangle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 A round rectangle is a rectangle with little quarter-ovals at the corners instead of the normal square corners.  They're pretty cool for button outlines, and you see them sometimes for windows with a slightly rounded corner.\par Of course, you have to tell QuickDraw just how round those corners should be.  You do that by giving the height and width of an oval to take the chunk from.  Remember, you're telling QuickDraw the total size of the oval, not the size of the rounded part of the corner!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Polygon\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 procedure ErasePoly}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ErasePoly}}}{\f6\fs20  (p: polyHandle);\par procedure FillPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FillPoly}}}{\f6\fs20   (p: polyHandle; p: pattern);\par procedure FramePoly}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FramePoly}}}{\f6\fs20  (p: polyHandle);\par procedure InvertPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 InvertPoly}}}{\f6\fs20 (p: polyHandle);\par procedure PaintPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PaintPoly}}}{\f6\fs20  (p: polyHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 All of the shapes we've talked about so far are useful, but fairly simple.  They are used for the vast majority of cases where you want to draw regular objects, like the outline of a window or button.  Polygons are harder to use, but they fill the gap between these simple shapes and the industrial strength shapes you occasionally need for more complicated objects, like arrows in a scroll bar.\par A polygon is a closed object, so it does eventually get back to it's starting point.  A polygon is made up of lines, so you could always duplicate }{\f6\fs20 FramePoly}{\f4  with a series of }{\f6\fs20 MoveTo}{\f4 , }{\f6\fs20 LineTo}{\f4  calls.  (And, unlike the other shapes we've been studying, this time you get exactly the same thing from }{\f6\fs20 MoveTo}{\f4  and }{\f6\fs20 LineTo}{\f4  as you would from }{\f6\fs20 FramePoly}{\f4  \endash  none of the edges get shifted over.)  The lines themselves can be as short as you like, so you could even create an oval with a polygon.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenPoly}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ClosePoly}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Of course, since you can put as many line segments as you want in a polygon, you can't use a simple data structure like the }{\f6\fs20 rect}{\f4  record to create a polygon, and that's the main drawback.  You have to create a polygon by giving QuickDraw all of the points that make up the edge of the polygon.  You start with a call to }{\f6\fs20 OpenPoly}{\f4 , which creates a new polygon record and gives you back a handle for the record.  After that, you draw the object once with an initial }{\f6\fs20 MoveTo}{\f4  call to get to the first point, followed by a series of }{\f6\fs20 LineTo}{\f4  calls to outline the polygon.  Once the polygon is outlined, you call }{\f6\fs20 ClosePoly}{\f4  to finish off the polygon definition.  Creating an arrow like the ones on a scroll bar (but a little bigger!) would look like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 poly := OpenPoly;\par if ToolError <> 0 then\par    poly := nil\par else begin\par    MoveTo(50, 50);\par    LineTo(100, 50);\par    LineTo(100, 25);\par    LineTo(140, 75);\par    LineTo(100, 125);\par    LineTo(100, 100);\par    LineTo(50, 100);\par    LineTo(50, 50);\par    ClosePoly;\par    if ToolError <> 0 then begin\par       KillPoly(poly);\par       poly := nil;\par       end; \{if\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    end; \{else\}\par }{\f4 \par It's worth looking at this code fragment carefully.  Polygons are created with dynamic memory records, so there is a very real chance that an error will pop up while you're creating one, especially if it's a very complex polygon and your program is running low on memory.  In short, the error checking is very important, and you also need to make sure }{\f6\fs20 poly}{\f4  isn't nil before you try to use one of the polygon drawing commands.\par Setting up the polygon is the hard part, though.  Once the polygon exists, you can do all sorts of wonderful things with it very quickly.  Filling, painting, erasing, inverting and framing all work fine, and quickly, too.  Since drawing a polygon is done entirely inside QuickDraw, with no overhead for individual tool calls, even framing a polygon is faster than drawing the same thing with }{\f6\fs20 LineTo}{\f4  calls.  In short, polygons are a great choice anytime a complex shape needs to be drawn more than once, or anytime you have to fill, paint, erase or invert a complex shape.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 KillPoly}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once you are through with a polygon, you use }{\f6\fs20 KillPoly}{\f4  to get rid of the polygon QuickDraw created.  You can see an example of }{\f6\fs20 KillPoly}{\f4  in the sample code fragment that we used to show how to create a polygon.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OffsetPoly}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There is one other useful call that you should know about when you start using polygons, and that's the }{\f6\fs20 OffsetPoly}{\f4  call.  Without }{\f6\fs20 OffsetPoly}{\f4 , you would have to create a separate polygon for each and every object you wanted to draw, in each and every position it might appear in.  Obviously, that's pretty wasteful for something like a scroll bar arrow, which will be drawn in a lot of different places, but doesn't change shape.  }{\f6\fs20 OffsetPoly}{\f4  lets you move a polygon to a new location without changing it's shape.  You give QuickDraw the polygon and a horizontal and vertical offset, and QuickDraw moves the polygon.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \{move a polygon to the right 5 pixels and down 10 pixels\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 OffsetPoly(poly, 5, 10);\par }{\f4 \par Problem 9-4:  Write a short 320 mode "graphics only" program, like Dither, to explore polygons.\par Start by filling the entire screen with gray (14), setting the pen mode to }{\f6\fs20 modeCopy}{\f4 , setting the pen color to blue (4), and creating the polygon you saw in the text \endash  the one that draws a large arrow.\par Now draw the polygon in different positions on the screen using the five polygon drawing commands.  Use }{\f6\fs20 OffsetPoly}{\f4  to draw the five polygons without recreating the polygon each time.  For }{\f6\fs20 FillPoly}{\f4 , set up a pattern with red and white vertical stripes.\par \par Problem 9-5:  For this program you will create a simple draw program that will let you draw lines, rectangles and ovals in any one of eight pen colors.  You'll use rubber-banding to let the user see the shapes as they are drawn.\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 a.\tab Switch Frame to 320 mode.\par \par b.\tab Add menus and menu items to let the user pick the pen color and select between lines, rectangles, and ovals.  These three shapes are the three basic shapes the program will let the user draw.  You should support the following colors:\par \par }\pard \qj\li1080\widctlpar\tx1440\tx2880\tx3240\tx4680\tx5040\tx6480\tx6840\adjustright {\f4 0\tab Black\tab 2\tab Brown\tab 7\tab Red\tab 6\tab Orange\par 9\tab Yellow\tab 10\tab Green\tab 4\tab Blue\tab 3\tab Purple\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \par c.\tab Create a list in the document record that is sort of like the one you used for the point plotting program, but this time, the list needs to be a list of variant records, since each element can be a line, rectangle or oval, and you need to be able to tell the difference between them.\par \par d.\tab When the user presses the mouse button, look to see which shape is selected.  Enter a drawing routine for the appropriate shape.  In the drawing routine, use rubber-banding and framing to let the user create the shape.  On exit, draw the new object and add it to the list for the document.\par \par \tab I would suggest implementing and testing each of the three shapes individually.  Do lines first, rectangles next, and ovals last.\par \par e.\tab Create an update routine that will draw all of the objects in the object list.  Be sure and test overlapping objects, making sure that the object that was created first is drawn first.  Otherwise the picture will change when the window is updated!\par \par f.\tab Add support for printing.\par \par g.\tab Add support for saving and loading files.\par \par h.\tab This is actually the first time in this course we've created a program that can load, change, and save a file, so be sure you handle this!  If the user makes a change to a document, then closes it, double-check to see if the user really wants to close the document.  You can do that with a three-button alert window with a caution icon.  The question should be "Save changes to *0 before closing?" with buttons of Yes, No and Cancel.  When the user quits, do the same sort of check on all of the documents, letting the user save the document, close the document, or cancel the quit operation.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Regions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Regions\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk51}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you look through the chapter on QuickDraw II in }{\i\f4 Apple IIGS Toolbox Reference: Volume 2}{\f4 , you will find one kind of object that I didn't cover in the last section: regions.  I didn't include regions with the "basic" drawing objects for two reasons: regions are generally used for drastically different reasons than the other objects, and there are some restrictions on when you can do with regions.\par Let's talk about that restriction, first.  With some kinds of printers, notably the LaserWriter, you can't print a region.  Any of the drawing commands we talked about in the last section will work just fine, drawing just the way you would expect, but regions don't work.  Because of that restriction, it's a good idea to make sure that all of the parts of your document are drawn without using any regions.\par That's a pretty severe restriction, and a pretty severe recommendation against using regions, too.  If regions can't be used well, they must have a darn good reason for existing, and they do.  To understand this reason, we'll have to explore what regions are.\par Like polygons, regions are built up by drawing other objects.  Unlike polygons, regions are a collection of solid areas, and they don't have to be connected.  You can also have a hole in the middle of a region, something that doesn't work very well with polygons.  (You can sort of fake a hole with a polygon by drawing a line from the outer edge to the inner hole, then retracing your line on the way out, but the connecting line shows up when you call }{\f6\fs20 FramePoly}{\f4 .)\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1064{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw198\pich94\picwgoal3960\pichgoal1880\macpict\bliptag548785743\blipupi72{\*\blipuid 20b5ce4f714836534a33271891aa9d83}0405ffffffff005d00c51101a0008201000affffffff005d00c509aa55aa55aa55aa55510014007c005d00c509ffffffffffffffff58090000000000000000510026008e004b00b309ffffffffffffffff58a10096000c02000000020000000000000001000a0000008b000c00b52c000c00150948656c7665746963610300150d000a2b900906526567696f6ea00097a0008c01000affffffff005d00c5070000000022e0c0e0c00000a000a0a100a40002060001000a0000000000000000070001000109aa55aa55aa55aa5522003b0024eb1f2300002309e623000023e9f0230000231c002300002307e623000023091a230000231b0023000023eb1023000023081a23000023eaf023000023ea102300002315e12300000aaa55aa55aa55aa5584000a0000000000000000a000a301000affffffff005d00c584026400160002005a00480016002400257fff0018002300247fff0019002500267fff001c00220023002600277fff001f00210022002700287fff0022002800297fff0023002000217fff00250029002a7fff0027001f00207fff0028002a002b7fff002a001e001f7fff002b002b002c7fff002e001d001e002c002d7fff00300002001d002d00487fff003100020003004700487fff003200030005004600477fff003300050006004400467fff003400060007004300447fff003500070009004200437fff00360009000a004000427fff0037000a000c003f00407fff0038000c000d003e003f7fff0039000d000f003d003e7fff003a000f0010003b003d7fff003b00100012003a003b7fff003c001200130039003a7fff003d00130014003700397fff003e00140016003600377fff003f00160017003500367fff004000170018003300357fff004100170018003300347fff004400160017003400357fff004700150016003500367fff004a0014001500250026003600377fff004b00240025002600277fff004c00230024002700287fff004d00130014002100230028002a7fff004e00200021002a002b003700387fff004f001e0020002b002d7fff005000120013001d001e002d002e7fff0051001c001d002e002f003800397fff0052001a001c002f00317fff0053001100120019001a003100327fff005400180019003200330039003a7fff005500160018003300357fff00560010001100150016003500367fff00570013001500360038003a003b7fff005800120013003800397fff0059000f0010001100120039003a7fff005a000f0011003a003b7fff7fffa000a109ffffffffffffffff22005a001008e623e9f1231c002308e6230819231b0123eb0f2200410033091923e9f023eb0fa0008da10096000c02000000020000000000000001000a00000011000c003b280009001407506f6c79676f6ea00097a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 9-12:  Comparing Polygons and Regions\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par By far the most common use for a region is to form a complex drawing mask, and that's the only use we'll look at in this course.  That's not the only way to use regions effectively \endash  they're also very handy for things like flood fills in a paint program \endash  but I'll leave you to explore the other uses for regions on your own.\par There are three very important regions associated with any window.  Two are maintained by the Window Manager, and the other is one you can use for your own purposes.\par The regions that are maintained by the Window Manager are called the visible region and the update region.  The visible region is the part of the window's content region that you can actually see.  Since widows can overlap other windows, and can hang partway off of the screen, the visible region is not always a simple rectangular area.  The Window Manager keeps track of the visible region as you shuffle windows around or open and close windows.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using the Update Region\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 update region}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The update region is the part of a window that needs to be redrawn.  When a program is just sitting there, doing nothing, the update region is empty, but if you drag one window so it exposes part of a window that used to be covered, the newly exposed area has to be redrawn.  The Window Manager automatically figures out what needs to be drawn, creating an update region that includes all of the pixels that need to be drawn.  The Window Manager also tells the Event Manager that the window needs to be updated, and the Event Manager reports the update event to your program as soon as all of the higher priority events have been handled.\par Just before }{\f6\fs20 TaskMaster}{\f4  calls your update subroutine, it calls }{\f6\fs20 BeginUpdate}{\f4 .  }{\f6\fs20 BeginUpdate}{\f4  is a Window Manager call that temporarily replaces the visible region with the pixels that are in both the visible region and the update region.  QuickDraw will never draw a pixel unless it is in a grafPort's visible region, so any drawing command outside of the area that needs to be redrawn is ignored.  Once your update routine finishes updating the window and returns to }{\f6\fs20 TaskMaster}{\f4 , }{\f6\fs20 TaskMaster}{\f4  calls }{\f6\fs20 EndUpdate}{\f4 , which restores the original visible region for the window.  All of this happens inside }{\f6\fs20 TaskMaster}{\f4 , so you normally don't have to worry about the process unless you are writing your own event loop without the aid of }{\f6\fs20 TaskMaster}{\f4 , but understanding how it all works will help you see how you can take advantage of this process to make your program simpler and faster.\par The first way to take advantage of this process is to create programs that only draw in the update procedure.  For example, in a simple version of the drawing program from Problem 9-5, all of the objects could be drawn in two places: once when the user draws the object for the first time, and once in the update routine.  Another way to handle this is to not draw the object when the user creates it at all.  Instead, you use the Window Manager's }{\f6\fs20 InvalRect}{\f4  call to tell it to mark the area where the object should be as invalid.  The Window Manager will take it from there, making sure that the window gets updated at the next convenient moment.  The actual drawing takes place in the update routine, so your program is simpler, and you have less chance of making a mistake or creating an incompatibility in the way the object is drawn in the two different places.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \{accumulate the area covered by the rectangle r in the update region\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 InvalRect(r);\par }{\f4 \par Incidentally, you've seen }{\f6\fs20 InvalRect}{\f4  before.  There was a brief discussion about it back in Lesson 5, but I though it would be a good idea to go over the ideas again, now that you know a little more about how the Window Manager and QuickDraw handle updates.\par The second way to take advantage of the update region helps you draw the window faster.  In a lot of cases \endash  like after }{\f6\fs20 TaskMaster}{\f4  scrolls a window, for example \endash  most of the visible region is perfectly OK, and doesn't need to be redrawn.  Also, in a lot of programs, more of the document is actually outside of the window than inside.  For example, you can only see a few lines from a book on the screen at any one time.  Drawing the entire document, as we've done so far, wastes a lot of time.  If you check first, and only draw the parts of the document that are in the update region, you can save a lot of time.  In some kinds of programs, the time you save can be pretty substantial.\par They key to using the update region is twofold: first, you have to find out what it is, and second, you have to check to see if the object you are about to draw is in the update region.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetVisHandle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Getting the region that needs to be updated is pretty easy, but if you look through the toolbox reference manual, it can also be pretty confusing.  The problem is that you don't really want the update region, and when you stumble across the Window Manager call to return the update region, it's real tempting to try to use that call.  The reason you don't want the update region is because }{\f6\fs20 BeginUpdate}{\f4 , which is called by }{\f6\fs20 TaskMaster}{\f4  before your update routine is called, has already set the visible region to the area that actually needs to be updated, and then cleared the update region.  In short, the update region is already empty when your update routine is called.  What you want is the visible region; you get it with a call to }{\f6\fs20 GetVisHandle}{\f4 :\par \par }{\f6\fs20 visRegion := GetVisHandle;\par }{\f4 \par With the region in hand (or at least in a handle), the next step is to test to see if the thing you need to draw is in the update region.  There are several tool calls that can help, but I'm just going to cover the easiest one to use here.  That's }{\f6\fs20 RectInRgn}{\f4 , which checks to see if there are any points in common in a rectangle and a region.  If you pass the }{\f6\fs20 visRegion}{\f4  and a rectangle that surrounds the object you are about to draw, and }{\f6\fs20 RectInRgn}{\f4  returns false, you can skip drawing the object.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 if RectInRgn(objectRect, visRegion) then\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    DrawMyObject;\par }{\f4 \par It's important to use some common sense here.  Testing to see if an object is in a region takes time.  If you do this blindly, you could end up with an update region that takes }{\i\f4 longer}{\f4  than a simpler one that just draws everything.  That's because you're playing a game of averages.  To come out ahead, two things must be true:  First, it has to take less time to check an object to see if it should be drawn than it does to draw the object.  That's not always true.  You may need to do some fancy footwork to get faster tests, doing things like sorting graphics objects or using information about the document itself, like the fact that lines in a text document come one after the other, so you can even skip the tests on a lot of objects.  Second, the total amount of time you save on objects that are not drawn has to exceed the amount of time it takes to test the objects that end up getting drawn.\par In a lot of cases, these conditions will hold some of the time, but not other times.  For example, if you close a window, exposing a second window that was completely covered, the whole second window will have to be redrawn.  Chances are, it will take longer with the "smart" update routine than with a simple dumb one that redraws the entire document.  On the other hand, of you scroll the document down one line, the smart update routine could win big, since only a small part of the screen really needs to be redrawn. Since it's probably more important to update the screen quickly while scrolling than it is to redraw the screen quickly after the entire window has been uncovered, the program will seem faster.  You've won the game of averages, even though, in a few specific cases, your program might be slower.\par All of this really points out the need to use the old neural network stuffed between your ears for more than just remembering rules.  You have to exercise some judgement, too.  In most cases, you end up trying it both ways to see which method works best for a particular program.  Another tried and true method is to try it the simple way first: if it works, and the program seems fast enough, there's no reason to bother with the more complicated update routine.  If the program seems too slow, you can always go back and try the smart update method later.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using the Clip Region\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 clip region}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's another region that QuickDraw maintains for every }{\f6\fs20 grafPort}{\f4  that can be very useful; it's called the clip region.  You already know from experience that QuickDraw won't draw where it isn't supposed to.  For example, if you try to draw outside of the visible part of the window, QuickDraw figures that out and doesn't put any pixels there.  That's due to the fact that QuickDraw never draws outside of the visible region.  As it turns out, QuickDraw is even more selective: not only does it not draw outside of the visible region, but it also doesn't draw outside of the clip region.\par The clip region is for you to use.  One of the most frequent uses is to mask off part of the screen so you don't accidentally draw on part of your window you want to leave alone.  That can save you a lot of time and effort that you would otherwise spend checking to see if what you are about to draw will overwrite something that should be protected.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ClipRect}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One simple way to set the clip region is with }{\f6\fs20 ClipRect}{\f4 , which sets the clip region to a particular rectangle.  Everything outside of the rectangle is masked off, and QuickDraw won't draw to it.  Of course, you need to make sure you fix the clip region when you are through; otherwise, scroll bars, palettes, and anything else in the window will never get updated!  Here's a fairly typical way to use the clip region, assuming }{\f6\fs20 drawRect}{\f4  is a rectangle that includes the part of the window you want to draw to, and r is a work rectangle.  The second call to }{\f6\fs20 ClipRect restores}{\f4  the clip region to the entire window.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 ClipRect(drawRect);\par \{draw the contents here\}\par GetPortRect(r);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ClipRect(r);\par }{\f4 \par There are several other commands that give you more detailed control over the clip region.  While they can be very useful in a lot of specific cases, I'm not going to cover them here.  After all, this is an introductory course!  We don't need to get so bogged down in details we miss the overall picture.\par \par Problem 9-6:  Modify your drawing program from Problem 9-5 so it only draws an object if the object is in the update region.\par {\*\bkmkend bk51}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 regions}{\rxe bk51}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 GrafPorts}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 GrafPorts\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk52}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Throughout this course, we've talked about windows and }{\f6\fs20 grafPort}{\f4 s, and by now you're probably getting pretty used to the terms, not to mention how to make use of them.  I'd like to finish off this lesson with a more detailed definition of these terms.\par A }{\f6\fs20 grafPort}{\f4  is something QuickDraw II can draw to.  In a simple graphics program, like the Dither sample from the beginning of this lesson, the }{\f6\fs20 grafPort}{\f4  is the entire screen.  The clip region and visible region we've talked about are attached to a }{\f6\fs20 grafPort}{\f4 , and each }{\f6\fs20 grafPort}{\f4  has it's own clip region and visible region.  There are a lot of other properties tied to a }{\f6\fs20 grafPort}{\f4 , with each one keeping separate copies, too.  Pen characteristics are a good example.  Changing your pen to }{\f6\fs20 modeXOR}{\f4  affects the current }{\f6\fs20 grafPort}{\f4 , but the pen mode for all of the other }{\f6\fs20 grafPort}{\f4 s doesn't get changed.\par In theory, every }{\f6\fs20 grafPort}{\f4  covers the entire drawing plane, extending from -32767 to 32767 in each direction.  In practice, the real drawing area is always smaller.  It's contained in a }{\f6\fs20 locInfo}{\f4  record that gives, among other things, the actual size of the drawing rectangle.  You saw }{\f6\fs20 locInfo}{\f4  records back when you drew a picture into a window with a single command, }{\f6\fs20 PPToPort}{\f4 .\par Every window has a }{\f6\fs20 grafPort}{\f4 , and in fact, the record that defines a }{\f6\fs20 grafPort}{\f4  is the first thing you find in the record that defines a window.  That's why we can play so fast and loose with }{\f6\fs20 grafPort}{\f4 s and windows:  when you pass a window record to a QuickDraw command that expects a }{\f6\fs20 grafPort}{\f4 , it doesn't miss a beat, since the window record starts with a }{\f6\fs20 grafPort}{\f4 .  In fact, in the header files for Pascal, the Window Manager calls are actually defined to accept }{\f6\fs20 grafPort}{\f4 s, not window records.  Of course, window records have more information after the }{\f6\fs20 grafPort}{\f4 , but that information is private to the Window Manager.  We can read, and when necessary set, all of that information with various Window Manager calls.\par While every window has a }{\f6\fs20 grafPort}{\f4 , every }{\f6\fs20 grafPort}{\f4  is definitely not a window.  The drawing screen in a non-toolbox graphics program like Dither is also a }{\f6\fs20 grafPort}{\f4 , and you've also used a }{\f6\fs20 grafPort}{\f4  when you used the Print Manager.  It's also possible to create a }{\f6\fs20 grafPort}{\f4  that will never be visible.  These }{\f6\fs20 grafPort}{\f4 s, generally called offscreen }{\f6\fs20 grafPort}{\f4 s, are very useful when you want to take some time to create a complicates picture, then draw it all at once on the screen.  Graphics programs use offscreen }{\f6\fs20 grafPort}{\f4 s a lot, as do programs doing animation from the toolbox.  (You have to resort to assembly language for really fast, crisp animation on the Apple IIGS, but a clever programmer can do a lot with toolbox calls from a high-level language.)\par There's a lot to QuickDraw that we haven't covered in this lesson; it's just to big, and many of the features (like offscreen }{\f6\fs20 grafPort}{\f4 s) are only used in very specific circumstances.  In the next lesson, we'll explore another aspect of QuickDraw II and learn about the Font Manager.  It would be a great idea, though, to spend some time now browsing through the chapters in the toolbox reference manual that cover QuickDraw.  Some of the things we've talked about are in the Window Manager, so try and spend some time there, too.  I'd suggest reading the introductory sections at the front of both of those tools.  After that, spend some time flipping through the rest of the chapter, browsing through the descriptions of any calls that catch your eye.  There's a lot to discover!\par {\*\bkmkend bk52}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 grafPorts}{\rxe bk52}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson has concentrated on the graphics capabilities of the Apple IIGS.  We've spent most of our time learning to use QuickDraw, but several important ideas that involve the Window Manager have also been explored.  We've learned how to use colors in both 320 mode and 640 mode, including how to change the color palette to get something other than the default colors.  We've seen how dithering can be used to get more than four colors in 640 mode.\par QuickDraw II uses the idea of a drawing pen, and we've expanded on our ability to use this pen.  We've learned to use pen modes for things like rubber-banding, and seen how to use pen patterns and pen masks.\par QuickDraw II has a wide variety of commands used to draw shapes, including rectangles, ovals, arcs, round rectangles, and polygons.  You can also do a variety of things with each shape, including painting the shape, filling it, erasing it, inverting it, or even framing a shape to draw it's outline.  We've seen how these ideas are implemented as a set of well-ordered calls.\par We've also touched on regions, although we just covered the bare essentials.  We learned about visible regions, update regions, and clip regions, and saw how to use these effectively to simplify and speed up our programs.\par The lesson ended with a short discussion that defined }{\f6\fs20 grafPort}{\f4 s and windows.  We've used these all along, but with some knowledge of QuickDraw and some experience to guide us, we were able to get a little more formal about the definitions.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 ClipRect\tab ClosePoly\tab EraseArc\tab EraseOval\par ErasePoly\tab EraseRect\tab EraseRRect\tab FillArc\par FillOval\tab FillPoly\tab FillRect\tab FillRRect\par FrameArc\tab FrameOval\tab FramePoly\tab FrameRRect\par FrameRect\tab GetColorTable\tab GetMouse\tab GetVisHandle\par InvertArc\tab InvertOval\tab InvertPoly\tab InvertRect\par InvertRRect\tab KillPoly\tab OffsetPoly\tab OpenPoly\par PaintArc\tab PaintOval\tab PaintPoly\tab PaintRRect\par RectInRgn\tab SetAllSCBs\tab SetColorTable\tab SetPenMask\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 SetPenPat\tab SetPenSize\tab SetSCB\tab StillDown\par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 10 \endash  Fonts}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 10 \endash  Fonts}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 10 \endash  Fonts\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk60}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson covers the use of fonts.  You will learn how the Apple IIGS uses font families, sizes and styles to organize a vast array of character shapes you can choose from.  You will also learn how to write text to a }{\f6\fs20 grafPort}{\f4 , including colored text.  Finally, you will learn how to create programs that let the user pick their own fonts.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Defining Some Terms}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Defining Some Terms\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 By now, you're probably getting pretty used to the names of the various tools, so when we start to talk about fonts, you mind probably turns to the Font Manager.  I know mine did the first time I needed to use text in a desktop program.  As it turns out, the Font Manager isn't the only tool you need to worry about, and in many ways it's the least important.  QuickDraw II has a lot to do with fonts, too, and QuickDraw II Auxiliary even gets involved a bit.  There is a pretty clear division of labor, though.  QuickDraw is used to draw text in a }{\f6\fs20 grafPort}{\f4 , and the Font Manager is used to select and manipulate the font QuickDraw II will use to draw.\par In this lesson, we'll start with the drawing commands, so we'll be starting in QuickDraw II.  Rather than getting bogged down in large desktop programs, we'll use short graphics-only programs that just write some text on the screen.  They will look a lot like the Dither program we used in the last lesson to explore dithered colors.  Later in the lesson we'll start to learn how to change to different fonts, and at that point we'll go back to full desktop programs.\par Drawing text really isn't much different from drawing anything else in a }{\f6\fs20 grafPort}{\f4 .  In fact, drawing text is actually quite a bit easier than some of the basic shapes, like polygons.  You just position the pen and make a call to a QuickDraw routine to print the text.  There are a lot of ways to tell QuickDraw what text to draw \endash  you might use a p-string, a c-string, or just a plain text buffer \endash  so there are a lot of different calls to actually draw the text.  They all work pretty much the same way, though.  The hard part, surprisingly enough, is figuring out where to position the pen to get the text to show up at a particular spot.  To understand how text is positioned on the screen, we'll have to define some terms.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1065{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw323\pich217\picwgoal6460\pichgoal4340\macpict\bliptag1811241637\blipupi72{\*\blipuid 6bf55aa520cc652071ebc708fa56b08b}0861ffffffff00d801421101a0008201000affffffff00d80142300001005a0014006d300001006c0014007f300001007e001400913000010090001400a3300013005a0026006d300013006c0026007f300013007e002600913000130090002600a30977dd77dd77dd77dd310025005a0038006d38310025006c0038007f38310025007e003800913809ffffffffffffffff3000250090003800a30977dd77dd77dd77dd310037005a004a006d3809ffffffffffffffff300037006c004a007f300037007e004a00910977dd77dd77dd77dd3100370090004a00a338310049005a005c006d3809ffffffffffffffff300049006c005c007f300049007e005c00910977dd77dd77dd77dd3100490090005c00a33831005b005a006e006d3809ffffffffffffffff30005b006c006e007f30005b007e006e00910977dd77dd77dd77dd31005b0090006e00a33831006d005a0080006d3831006d006c0080007f3831006d007e008000913809ffffffffffffffff30006d0090008000a30977dd77dd77dd77dd31007f005a0092006d3809ffffffffffffffff30007f006c0092007f30007f007e0092009130007f0090009200a30977dd77dd77dd77dd310091005a00a4006d3809ffffffffffffffff300091006c00a4007f300091007e00a40091300091009000a400a322007f00c682002200a300b4940022000100b49400a10096000c02000000020000000000000001000a00100009001c00342c000c00150948656c7665746963610300150d000a2b0a190a6173656e74206c696e65a00097a10096000c02000000020000000000000001000a003d0009004900342b022d08626173656c696e65a00097a10096000c02000000020000000000000001000a00850009009d003428008e000a0a636861726163746572202b080c066f726967696ea00097a10096000c02000000020000000000000001000a00b2000000be00342800bb00020b646573656e74206c696e65a00097a10096000c02000000020000000000000001000a002000cf003800fa28002900d00a636861726163746572202a0c0972656374616e676c65a00097a10096000c02000000020000000000000001000a004d00cd007100fe2b0c21056e6578742028006200d10a636861726163746572202b080c076f726967696e20a0009701000affffffff00d8014230000100a2001400b530001300a2002600b530002500a2003800b530003700a2004a00b530004900a2005c00b530005b00a2006e00b530006d00a2008000b530007f00a2009200b530009100a200a400b551007b00b0008500ba5851007b0056008500605871001e007000b7007b00c1007b00b7007000bc007100be007300c1007b00b722005400d4ea1d71001e003b00a1004400ad004400a1003b00a9003d00ab004000ad004400a122002700cbe016a10096000c02000000020000000000000001000a00b0005b00bc00a12800b900630b696d616765207769647468a00097a0008c01000affffffff00d80142070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200a6005a07062317f9230609a000a301000affffffff00d801422200a6005a01012302012302012303012302002301002303002304ff2301002301002302ff230300230300230201230201230101230201230102a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200a600a2f90623e9f923fa09a000a301000affffffff00d801422200a600a2ff0123fe0123fe0123fd0123fe0023ff0023fd0023fcff23ff0023ff0023feff23fd0023fd0023fe0123fe0123ff0123fe0123ff02a000a1a0008d0700020002300000005900a400a3a10096000c02000000020000000000000001000a00cb006400d700aa2b021b0f636861726163746572207769647468a0009701000affffffff00d80142070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200c1005a0906231df9230709a000a301000affffffff00d801422200c1005a02012302012303012302012303002303002303002305ff2301002301002304ff230300230300230301230201230201230302230001a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200c100b4f70623e3f923f909a000a301000affffffff00d801422200c100b4fe0123fe0123fd0123fe0123fd0023fe0023fd0023fbff23ff0023ff0023fcff23fd0023fc0023fd0123fe0123fe0123fd02230001a000a171001e00720043007e004a007e004a007400430073004600720049007e004a2200400036103371001e0081004c00890058008100580089004e0086004d0083004c00810058220091003617f571001e00a3003d00ae004800a3004800ae004200ab004000a9003d00a300482200b500360af671001e0001003d000c004800010048000c0042000900400007003d0001004822001300360af6a0008c070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200a500fe0cf023f2cc2312f3a000a301000affffffff00d801422200a500fe02fe2302fb2302fc2301fb2301fa2300fb23fffa23fffb23fffc23fffc23fffa2300fb2301fa2301fb2302fd2303fc2303fc2303fea000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122000300fe0c1023f23423120da000a301000affffffff00d8014222000300fe020223020523020423010523010623000523ff0623ff0523ff0423ff0423ff06230005230106230105230203230304230304230302a000a1a0008da10096000c02000000020000000000000001000a004c01120058014128005501130b666f6e7420686569676874a00097a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 10-1:  Terms Used to Describe Characters\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 base line}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Base Line\tab The base line is a horizontal line drawn through the character origin.  In terms of handwritten characters, the base line does exactly the same thing as a line on a piece of paper.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 character origin}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 origin}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Character Origin\tab This is the spot the pen is at when QuickDraw starts to draw a character.  When I was learning about fonts, I expected this point to be at the top left corner or bottom left corner of the character, but it isn't.  In terms of writing, it's where the line would be on a piece of stationary; in the terms used by QuickDraw, the origin is on the base line.  The part of the character above the character origin is "above the line;" characters like "W" and "a" appear entirely above this point, resting on the base line.  Characters like "y", which extend below the base line when you write them by hand on lined paper, also extend below the base line in QuickDraw fonts.\par \par \tab When QuickDraw II draws a character, it starts at the current pen location, which is set with }{\f6\fs20 MoveTo}{\f4 , just like you were getting ready to draw a line.  After a character is drawn, the pen moves to the right a few pixels to the next character origin.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ascent line}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Ascent Line\tab The ascent line is a line over the top of the character.  In most fonts capitol letters and tall lowercase letters (like "k") extend from the ascent line to the base line.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 descent line}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Descent Line\tab The descent line is a line below the bottom of the character.  In most fonts, characters like "y" extend below the base line, touching the descent line.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 kerning}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Kern Max\tab Kerning is a pretty wild concept for those of us who had no background in printing or typesetting before we started writing desktop programs.  It turns out that typesetters sometimes place letters so close together that part of one letter can extend further to the right than the leftmost part of the next character.  For example, if the characters "Ta" are typed, the "a" can be scooted over to the left to appear right next to the "T", or maybe even under the overhang of the top bar in the "T".  The process of pushing characters together like this is called kerning.  In bit mapped fonts like those used on the Apple IIGS, kerning is done by extending part of a character to the left of the character origin.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font rectangle}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Font Rectangle\tab The font rectangle is the rectangle that completely encloses the character.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetFontInfo}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Some of this information, like the ascent and descent distances, is the same for all characters.  QuickDraw's }{\f6\fs20 GetFontInfo}{\f4  call returns a record with all of the global information.  A typical call would look like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    fontInfo: fontInfoRecord;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 begin\par GetFontInfo(fontInfo);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ...\par }{\f4 \par }{\f6\fs20 GetFontInfo}{\f4  tells you about the current font.  In other words, it returns information about the font QuickDraw II will use to draw text if you draw the text before picking another font.\par The font record itself looks like this:\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 fontInfoRecord}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    fontInfoRecord = record\par        ascent:  integer;\par        descent: integer;\par        widMax:  integer;\par        leading: integer;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 base line}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ascent line}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 descent line}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 ascent}{\f4  and }{\f6\fs20 descent}{\f4  fields are pretty obvious; they're the number of pixels between the base line and the ascent and descent lines.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 character width}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 widMax}{\f4  field tells you the width of the widest character in the font.  There are other calls to find out the width of a particular character; we'll look at those in a moment.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 leading}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 Leading}{\f4  is the recommended number of pixels you should leave between lines.  Once you think about it, it's pretty obvious: you should leave more space between lines of 1 inch characters than you would leave between lines of 1/10 inch characters.  Incidentally, this word is pronounced like the metal lead, not like lead a horse.  The term comes from the not so distant past, when thin strips of lead were stuck in between lines of hand set type to increase the space between lines.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Drawing Text}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Drawing Text\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It might seem pretty frightening to spend that much time learning how to figure out the horizontal and vertical values you need to pass to }{\f6\fs20 MoveTo}{\f4  to put text where you want it, but take heart.  We're at the easy part, now.  To actually write text to the screen, all you do is pass a string to QuickDraw.  Here's a short program that writes "Hello, world." on the graphics screen.\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 program Hello (input);\par \par using Common, QuickDrawII;\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 begin\par StartGraph(320);\par PenNormal;\par MoveTo(50, 50);\par DrawString(@"Hello, world.");\par readln;\par EndGraph;\par end.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 10-1:  Writing Text to the Graphics Screen\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawString}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are a lot of different ways to represent strings in memory, and QuickDraw supports several of them with different text drawing commands.  Listing 10-1 uses }{\f6\fs20 DrawString}{\f4 , which takes a pointer to a p-string.  P-strings have a leading length byte, followed by up to 255 characters.  In ORCA/Pascal, any string defined using }{\f6\fs20 string[x]}{\f4 , where }{\f6\fs20 x}{\f4  is less than 255 characters, is a p-string.  You can also get a p-string by defining a variable as }{\f6\fs20 packed array[0..x] of char}{\f4 .  Finally, if you take the address of a string constant with the @ operator, like the sample program in Listing 10-1 does, you get the address of a p-string.\par Ironically, Pascal strings have nothing to do with Standard Pascal.  When Nicholas Wirth designed Pascal, he defined strings in a very specific way, as a packed array of characters.  There is no length byte, and in fact, no way to set the length of a string in Standard Pascal.  That's why the folks who designed UCSD added the string type with a leading length byte \endash  they wanted to have a string that could have a variable length.  Unfortunately, they weren't firing on all neurons that day, and we're stuck with the name Pascal strings applied to this abominable data type to this day.\par Well, enough editorializing.  ORCA/Pascal also supports true Standard Pascal strings, which can have a length up to 32767 characters \endash  a rather distinct advantage over the UCSD Pascal string.  ORCA/Pascal defines the character }{\f6\fs20 chr(0)}{\f4  with a rather peculiar meaning; it means to ignore all of the characters from there to the end of the character array.  With that one convention, ORCA/Pascal accomplishes a lot.  First, Standard Pascal strings have, in effect, a variable length.  Second, as long as the string is one character smaller than the character array holding the string, the string ends with a null character (}{\f6\fs20 chr(0)}{\f4  is called the null character).  That means that ORCA/Pascal strings have the same format as C strings.\par You can get a Standard Pascal string using a type of }{\f6\fs20 string[x]}{\f4 , where }{\f6\fs20 x}{\f4  is 256 or more.  You can also get a Standard Pascal string using a type like }{\f6\fs20 packed array[1..x] of char}{\f4 .  The difference between a Standard Pascal string and a UCSD Pascal string, then, is that the first array element is 1 for Standard Pascal, and 0 for UCSD Pascal.  The 0th array element holds the length byte in UCSD Pascal.  As long as the character array is one element longer than the current string length, the string will also be a C string with a terminating null character.\par Finally, to get a C string from a string constant, add one to the address returned by the @ operator.  In ORCA/Pascal, all string constants start with a leading length byte and are followed by a terminating null, so you can use either format you like.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawCString}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Well, finally I get to the point: to print a C string, pass the address of the string to }{\f6\fs20 DrawCString}{\f4 .  It works just like }{\f6\fs20 DrawString}{\f4 , but expects a string with a terminating null character.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawChar}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are some times when you just need to get some characters out to the screen, either individually, or plucking characters from a large chunk of text.  To print an individual character, pass the character to }{\f6\fs20 DrawChar}{\f4 .\par \par }{\f6\fs20 DrawChar('a');\par }{\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawText}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 To print a block of text, call }{\f6\fs20 DrawText}{\f4 .  This time you need to pass more than the address of the first character in the text block; you also need to pass the number of characters.\par \par }{\f6\fs20 DrawText(@gsosString.theString, gsosString.size);\par }{\f4 \par Problem 10-1:  Create a program that shows how text is placed on the screen.  Start with a white screen in 320 mode graphics, then draw a light gray (color 14) line at the baseline, and light blue lines (11) at the ascent and descent lines.  Next, draw a vertical red line (7) through the character origin.  Finally, write the string "The quick gray Apple IIGS jumped over the lazy black IBM PC" to the screen.\par We'll get to what these calls mean in a moment, but for now, just add them right after you set up QuickDraw:\par \par }{\f6\fs20 SetForeColor(0);\par SetBackColor(15);\par SetTextMode(modeForeCopy);\par }{\f4 \par Actually, the entire line won't fit in 320 mode, but you get the idea.  We'll fix the line width problem in Problem 10-3.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Colorful Text}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Colorful Text\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text\:colored}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The text we've drawn so far is black text on a white background.  That's fine, as far as it goes.  Black text on a white background is the way we usually see it on paper and in windows on the desktop.  Of course, it would be a lot more fun to see colored text every once in a while.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetForeColor}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetForeColor}{\f4  tells QuickDraw to write using colored text.  By foreground, we mean all of the pixels that make up the character itself; the pixels that are in the character's rectangle but that are not a part of the character are called the background.  The foreground color for text can be any of the solid colors, but you can't use dithered colors in 640 mode.  }{\f6\fs20 SetForeColor}{\f4  takes a single parameter, the number of the color you want QuickDraw II to use.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetBackColor}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You can also set the background color of the text using }{\f6\fs20 SetBackColor}{\f4 .  This causes QuickDraw II to fill the rectangle surrounding each character with the background color, usually white.  Like }{\f6\fs20 SetForeColor}{\f4 , you can use the number of any solid color as a parameter for }{\f6\fs20 SetBackColor}{\f4 .\par The pen modes you used in the last lesson to get all of the great effects, like rubber-banding, don't affect the way text is drawn at all.  QuickDraw uses a separate text mode to draw text.  The text modes work just like pen modes, they're just separate from pen modes to make it easier to draw text in one mode and graphics in another.  In fact, all of the pen modes can also be used as text modes, and they work exactly the same way.  You can also use eight other modes.  These work just like the original eight pen modes, but when you use them, QuickDraw II only draws the text \endash  the background is not affected at all.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetTextMode}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The call to set the text mode is }{\f6\fs20 SetTextMode}{\f4 .  It takes a single integer parameter as the text mode.\par Here's a complete list of the pen modes, along with a short description of each one.  For more details, check out the toolbox reference manual.  Be careful, though:  The toolbox reference manual has some mistakes in the description of }{\f6\fs20 SetTextMode}{\f4 .  These mistakes are outlined in Chapter 43 of Volume 3 of the toolbox reference manual.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 modeCopy}{\f4 \tab Copy the foreground and background to the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 notCopy}{\f4 \tab Reverse the bits in the character, then copy the foreground and background to the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 modeOR}{\f4 \tab Or the bits in the foreground and background with the pixels in the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 notOR}{\f4 \tab Reverse the bits in the character, then or the bits in the foreground and background with the pixels in the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 modeXOR}{\f4 \tab Exclusive or the bits in the foreground and background with the pixels in the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 notXOR}{\f4 \tab Reverse the bits in the character, then exclusive or the bits in the foreground and background with the pixels in the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 modeBIC}{\f4 \tab Reverse the pixels in the foreground and background of the text, then and the pixels in the text with the pixels in the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 notBIC}{\f4 \tab And the pixels in the foreground and background of the text with the pixels in the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 modeForeCopy}{\f4 \tab Like }{\f6\fs20 modeCopy}{\f4 , but only the foreground of the text is used.\par }{\f6\fs20 notForeCopy}{\f4 \tab Like }{\f6\fs20 notCopy}{\f4 , but only the foreground of the text is used.\par }{\f6\fs20 modeForeOR}{\f4 \tab Like }{\f6\fs20 modeOR}{\f4 , but only the foreground of the text is used.\par }{\f6\fs20 notForeOR}{\f4 \tab Like }{\f6\fs20 notOR}{\f4 , but only the foreground of the text is used.\par }{\f6\fs20 modeForeXOR}{\f4 \tab Like }{\f6\fs20 modeXOR}{\f4 , but only the foreground of the text is used.\par }{\f6\fs20 notForeXOR}{\f4 \tab Like }{\f6\fs20 notXOR}{\f4 , but only the foreground of the text is used.\par }{\f6\fs20 modeForeBIC}{\f4 \tab Like }{\f6\fs20 modeBIC}{\f4 , but only the foreground of the text is used.\par }{\f6\fs20 notForeBIC}{\f4 \tab Like }{\f6\fs20 notBIC}{\f4 , but only the foreground of the text is used.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 10-2:  Write a graphics program in 320 mode that shows all of the text modes.  Start by drawing a red (color 7) and yellow (color 9) checkerboard pattern across the entire screen.  Set the text foreground color to blue (color 4), and the background color to white (color 15).  (These colors are carefully chosen for maximum eyestrain.)  Finally, draw the name of the various text modes in the appropriate mode.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Formatting Text}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Formatting Text\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tabs}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 QuickDraw figures its job is to take a character number, look up the character in the font, and draw whatever it finds in the current }{\f6\fs20 grafPort}{\f4 .  As far as QuickDraw is concerned, issues like tabs, return characters, and formatting numbers for output are your problem.  It only wants text.  Of course, that means you might have to get a little creative to write certain things on the screen.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using Write and Writeln\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Writeln}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As it turns out, ORCA/Pascal can do a lot of formatting for you.  When you start the tools with }{\f6\fs20 StartDesk}{\f4  or }{\f6\fs20 StartGraph}{\f4 , ORCA/Pascal automatically hooks up the standard Pascal text output routines, }{\f6\fs20 write}{\f4  and }{\f6\fs20 writeln}{\f4 , so they write the text to the graphics screen instead of writing the text to the text screen.  ORCA/Pascal uses }{\f6\fs20 DrawChar}{\f4  and }{\f6\fs20 DrawString}{\f4  to write the text, so all of the color and text mode options work just fine.  ORCA/Pascal will also handle return characters, moving down one text line and moving back to the horizontal pen location that was set when you started writing text.\par There are certainly a lot of times when you need better control over text than you get from }{\f6\fs20 write}{\f4  and }{\f6\fs20 writeln}{\f4 , but when they work, they're just about the easiest way to write formatted text.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using String Conversion Subroutines\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 numbers\:drawing}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The biggest problem with writing text is numbers.  Converting a number, especially a floating-point number, to a string by hand is a harrowing experience.  ORCA/Pascal has several built-in functions that can do the conversions for you, though.  You can then combine the various strings representing the numbers with any other text, and use the standard QuickDraw text drawing commands to draw the strings.\par The ORCA/Pascal functions that convert numbers to strings are }{\f6\fs20 Cnvds}{\f4 , }{\f6\fs20 Cnvis}{\f4  and }{\f6\fs20 Cnvrs}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using the Size of Text\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Of course, you may just be trying to dump a block of text to a window.  In that case, the major problem you will have is figuring out when to split a line and start a new one.  There are two sets of calls that let you do this.  One set returns the width of a character or string, while the other returns a rectangle surrounding the character or string.  There's one of each of these calls for each of the string formats, as well as one for characters.  The width calls are the simplest, and since you already know the height of the text from the }{\f6\fs20 GetFontInfo}{\f4  call, they are the ones you will use most often, too.  Each of them takes the same sort of parameter as the corresponding text drawing command, and each returns an integer that is the width of the string or character in pixels.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CharWidth}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 width := CharWidth('A');\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StringWidth}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 width := StringWidth(@'Hello, world.');\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CStringWidth}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 width := CStringWidth(pointer(ord4(@'Hello, world.')+1));\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TextWidth}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 width := TextWidth(@gsosString.theString, gsosString.size);\par }{\f4 \par The calls that return a rectangle surrounding the text all look like the text drawing commands with an extra parameter at the end of the parameter list.  The extra parameter is the rectangle you want the call to fill in.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CharBounds}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 CharBounds('A', r);\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StringBounds}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 StringBounds(@'Hello, world.', r);\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CStringBounds}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 CStringBounds(pointer(ord4(@'Hello, world.')+1), r);\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TextBounds}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TextBounds(@gsosString.theString, gsosString.size, r);\par }{\f4 \par Problem 10-3:  The text from Problem 10-1 didn't all fit on a single line.  Find where the text should be split, and draw it on two lines.  Be sure to split the text on a space, not in the middle of a word.  Use leading to figure out how much space to leave between the lines.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Standard Character Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Standard Character Set\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you hear someone talk about a character font, it's natural to assume that all of the printing characters you're used to are in the font.  The alphabet, the numeric digits, and the other characters you see on a standard keyboard certainly ought to be there.  On the other hand, folks in France have a different idea about what a standard keyboard looks like than the people in the United States do, and the Germans and British have their own ideas, too.\par One of the nice things about a graphics based font is that all of these differing viewpoints can be accommodated.  Figure 10-2 shows how Apple has defined the font space available with eight bit characters on the Apple IIGS and Macintosh.  It's worth pointing out that very few fonts actually have all of these characters, but if a font uses these characters, they are almost always in the right spot.  It's also worth pointing out that these are conventions, not rules.  Greeks and Japanese have a different enough view of a standard keyboard that this character set is scrapped and replaced, and there are some special purpose fonts that use symbols instead of letters.  The most common is Cairo, but I've also seen an Egyptian hieroglyphics font.\par \par }\pard \li180\keepn\widctlpar\tx540\tx1080\tx1620\tx2160\tx2700\tx3240\tx3780\tx4320\tx4860\tx5400\tx5940\tx6480\tx7020\tx7560\tx8100\tx8640\adjustright {\pard\plain \li180\keepn\widctlpar\tx540\tx1080\tx1620\tx2160\tx2700\tx3240\tx3780\tx4320\tx4860\tx5400\tx5940\tx6480\tx7020\tx7560\tx8100\tx8640\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font\:standard}}}{\v\f4 \par }{\f4 \tab 0\tab 1\tab 2\tab 3\tab 4\tab 5\tab 6\tab 7\tab 8\tab 9\tab A\tab B\tab C\tab D\tab E\tab F\par 0\tab }{\f20 \tab \tab }{\f4\fs20 space}{\f20 \tab 0\tab @\tab P\tab `\tab p\tab \u196\'80\tab \u234\'90\tab \u8224\'a0\tab \u8734\'b0\tab \u191\'c0\tab \endash \par }{\f4 1\tab }{\f20 \tab \u17\'11\tab }{\f20\fs20 !}{\f20 \tab 1\tab A\tab Q\tab a\tab q\tab \u197\'81\tab \u235\'91\tab \u176\'a1\tab \u177\'b1\tab \u161\'c1\tab \emdash \par }{\f4 2\tab }{\f20 \tab \u18\'12\tab "\tab 2\tab B\tab R\tab b\tab r\tab \u199\'82\tab \u237\'92\tab \u162\'a2\tab \u8804\'b2\tab \u172\'c2\tab "\par }{\f4 3\tab }{\f20 \tab \tab #\tab 3\tab C\tab S\tab c\tab s\tab \u201\'83\tab \u236\'93\tab \u163\'a3\tab \u8805\'b3\tab \u8730\'c3\tab "\par }{\f4 4\tab }{\f20 \tab \tab $\tab 4\tab D\tab T\tab d\tab t\tab \u209\'84\tab \u238\'94\tab \u167\'a4\tab \u165\'b4\tab \u402\'c4\tab '\par }{\f4 5\tab }{\f20 \tab \tab %\tab 5\tab E\tab U\tab e\tab u\tab \u214\'85\tab \u239\'95\tab \bullet \tab \u181\'b5\tab \u8776\'c5\tab '\par }{\f4 6\tab }{\f20 \tab \tab &\tab 6\tab F\tab V\tab f\tab v\tab \u220\'86\tab \u241\'96\tab \u182\'a6\tab \u8706\'b6\tab \u8710\'c6\tab \u247\'d6\par }{\f4 7\tab }{\f20 \tab \tab '\tab 7\tab G\tab W\tab g\tab w\tab \u225\'87\tab \u243\'97\tab \u223\'a7\tab \u8721\'b7\tab \u171\'c7\tab \u9674\'d7\par }{\f4 8\tab }{\f20 \tab \tab (\tab 8\tab H\tab X\tab h\tab x\tab \u224\'88\tab \u242\'98\tab \u174\'a8\tab \u8719\'b8\tab \u187\'c8\tab \u255\'d8\par }{\f4 9\tab }{\f20 \tab \tab )\tab 9\tab I\tab Y\tab i\tab y\tab \u226\'89\tab \u244\'99\tab \u169\'a9\tab \u960\'b9\tab \u8230\'c9\tab \par }{\f4 A\tab }{\f20 \tab \tab *\tab :\tab J\tab Z\tab j\tab z\tab \u228\'8a\tab \u246\'9a\tab \u8482\'aa\tab \u8747\'ba\tab }{\f4 space}{\f20 \tab \par }{\f4 B\tab }{\f20 \tab \tab +\tab ;\tab K\tab [\tab k\tab \{\tab \u227\'8b\tab \u245\'9b\tab \u180\'ab\tab \u170\'bb\tab \u192\'cb\tab \par }{\f4 C\tab }{\f20 \tab \tab ,\tab <\tab L\tab \\\tab l\tab |\tab \u229\'8c\tab \u250\'9c\tab \u168\'ac\tab \u186\'bc\tab \u195\'cc\tab \par }{\f4 D\tab }{\f20 \tab \tab -\tab =\tab M\tab ]\tab m\tab \}\tab \u231\'8d\tab \u249\'9d\tab \u8800\'ad\tab \u8486\'bd\tab \u213\'cd\tab \par }{\f4 E\tab }{\f20 \tab \tab .\tab >\tab N\tab ^\tab n\tab ~\tab \u233\'8e\tab \u251\'9e\tab \u198\'ae\tab \u230\'be\tab \u338\'ce\tab \par }{\f4 F\tab }{\f20 \tab \tab /\tab ?\tab O\tab _\tab o\tab \tab \u232\'8f\tab \u252\'9f\tab \u216\'af\tab \u248\'bf\tab \u339\'cf\tab \par }\pard \keepn\widctlpar\adjustright {\f4 \par }\pard \fi-360\li1080\ri720\keepn\widctlpar\adjustright {\f4 \bullet \tab The characters from the space ($20) to the tilde ($7E) are all standard printing ASCII characters.\par \bullet \tab While they have standard definitions, the characters $11..$14, $AD, $B0..$B3, $B5..$BA, $BD, $C2..$C6 and $D6 tend to be rare in most fonts.\par \bullet \tab Character CA is the non-breaking space.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 10-2:  The Standard Graphics Characters\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Font Families}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Font Families\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk53}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 system font}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 So far we've been using the default font, also known as the system font.  Of course, there are a lot of other fonts out there.  To organize all of these fonts, Apple uses font families, font sizes, and font styles.\par Font families are the different kinds of fonts.  Each font family has a name and a number.  Sometimes it's easiest to use the name and sometimes it's easiest to use the number, but you can always count on a particular font number always matching a font name.\par You can get a font family number directly from a name, but in most cases you won't have to.  If you decide to get a font family number from a name, you will need to know the exact font name beforehand, and in most cases, if you know the font name, you know it's number, too.  As a general rule, the Font Manager calls that let the user pick fonts deal with names and give you back a number, so for this lesson, we'll assume you already have a font number.\par Of course, you don't, yet, so here's a few to get you started.  I've also shown the font name.  If you try to use any of the Font Manager calls that need a name, be sure and pass the font name just as it is shown, character for character.  You can't even change an uppercase character to a lowercase character.  If you do, the Font Manager won't recognize the font.\par \par }\pard \qj\li3600\keepn\widctlpar\adjustright {\f6\fs20 2\tab newYork\par 3\tab geneva\par 4\tab monaco\par 20\tab times\par 21\tab helvetica\par 22\tab courier\par -2\tab shaston\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 10-3:  Some Font Family Names and Numbers\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The Font Manager interface file has constants defined for all of these fonts (plus a few more), so you can use the font name when you are writing programs.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 system font}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The system font doesn't have a name, but it does have a number.  It's font number 0.  The system font is the default font, and it's also the one you see on menus, in dialogs, and so forth.\par {\*\bkmkend bk53}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font families}{\rxe bk53}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Font Sizes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Font Sizes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk54}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 points}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Each font family comes in a variety of sizes.  Font sizes are specified in points, a unit of measurement used by printers.  In rough terms, a 72 point font is one inch high \endash  at least, it's one inch high on the printer.  There are some funky scaling issues that take place to display fonts on the Apple IIGS screen, especially in 320 mode.  Also, while a 12" monitor is pretty common on the Apple IIGS, it's not required, so trying to measure a font on the screen isn't going to work.  Finally, some fonts are a little bigger than others, even when you use the same point size.  For example, in this book I've used 12 point Times for text, and 10 point Courier for listings.  They look about the same size to me, though, and 12 point Courier definitely looks a lot bigger than 12 point times.\par You can ask for a font size from 1 to 255 points.  A 1 point font will look pretty weird; about all it's good for is to frustrate people.  Lawyers love it.  For the most part, you should start with about 12 or 14 point for the screen or a dot matrix printer, and 10 or 12 point for a laser printer.  You can always adjust the size later.\par It would take a lot of disk space to save every font in every possible font size, so of course, each font is only stored in a few sizes.  If you ask for a font that isn't available, the Font manager will politely make one for you.  That may not be what you want, since a font created on the fly by the Font Manager doesn't look as good as one created pixel by pixel by an artist, but at least it works.  With some kinds of printers, the output will even be pretty good.  Some laser writers may even have the font built in in the correct size, even if the Font Manager can't find it to display on the screen.\par There are ways to find out what font sizes exist already, and even ways to tell the Font Manager not to scale the fonts, but just to pick the closest fit.  If you're writing a program that does a lot with fonts, like a word processor or page layout program, it would be worth your while to spend some time pouring through the chapter on the Font Manager in the toolbox reference manual to find out about all of these things, but for most programs it isn't an issue, so I'm not going to get bogged down in those details here.\par {\*\bkmkend bk54}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font sizes}{\rxe bk54}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Font Styles}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Font Styles\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk55}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In addition to sizes, fonts can have styles.  Unlike sizes, styles are generally created on the fly, although you can have them created in a bit mapped form.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Plain Text\tab Plain text is the unadorned font, with no extra styling applied.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 outline}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text\:outlined}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\outl\f4 Outline}{\f4 \tab Outlined text is drawn as an outline around the bits that would normally be displayed.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 shadow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text\:shadowed}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\shad\f4 Shadow}{\f4 \tab Shadowed text is a lot like outlined text, but the border is thicker on the bottom and right, giving a shadowed effect.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 underline}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text\:underline}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4\ul Underline}{\f4 \tab Underlined text has a line under it.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 italics}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text\:italic}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\i\f4 Italic}{\f4 \tab Italicized text is slanted.  The pixels on each line or two are moved over one column to get this effect.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 bold}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text\:bold}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\b\f4 Bold}{\f4 \tab Bold text is darker than the normal font.  On the screen, this is done by printing the character twice, with the second character one bit to the right of the first.  Of course, the font is actually preformed, but that's the effect.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par To be really annoying, you can use these styles in combination.  With a little effort, you can take a perfectly readable sentence and apply enough styles so it would take an expert to figure out what the letters really are.\par For the most part, you only need to have QuickDraw II and the Font Manager started to use the capabilities we're talking about in this lesson.  (A quick check of Appendix A or the toolbox reference manual shows that the Font Manager also requires the Memory Manager and Tool Locator, but those are running in any Pascal program.)  If you are using the styles shadow, outline or italic, though, you also have to load QuickDraw II Auxiliary.  Both }{\f6\fs20 StartDesk}{\f4  and }{\f6\fs20 StartGraph}{\f4  load QuickDraw II Auxiliary, but if you're using }{\f6\fs20 StartUpTools}{\f4  you have to remember to include QuickDraw II Auxiliary in your list of tools.\par {\*\bkmkend bk55}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font styles}{\rxe bk55}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Installing a Font}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Installing a Font\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 installing fonts}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 loading fonts}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 All of the information you need to specify a font \endash  the family number, size, and style \endash  can be packed into a single record called a font ID record.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    fontID = record\par        famNum: integer;\par        fontStyle, fontSize: byte;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The family number and size are pretty obvious.  The family number is a number like one of the ones in Figure 10-3, and the size is the size of the font in points.  The font style is a bit map, with one bit for each style element:\par }\pard \qj\fi720\li360\widctlpar\adjustright {\f4 \par }\pard \qj\fi720\li720\keepn\widctlpar\adjustright {\f4\ul bit}{\f4 \tab }{\f4\ul style}{\f4 \par 0\tab Bold\par 1\tab Italic\par 2\tab Underline\par 3\tab Outline\par }\pard \qj\fi720\li720\widctlpar\adjustright {\f4 4\tab Shadow\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par In each case, a style bit of 1 says the style is in use, while a style bit of 0 says the style is not in use.  Plain text, then, would have a style byte of 0, while underlined text would have a style byte of 4.\par For the system font, all three fields are zero.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InstallFont}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you want to use a new font, you first create the font ID, then call }{\f6\fs20 InstallFont}{\f4 .  }{\f6\fs20 InstallFont}{\f4  does all of the work, loading the font if it needs to be loaded.  It also makes the font the current font, so the QuickDraw text drawing commands will use the font until the next time you change it.  In the couple of sections, we'll cover neat ways to let the user pick the font, but even now you can load a font by hard-coding the font ID, like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \{load 10 point plain courier\}\par id.famNum := courier;\par id.fontStyle := 0;\par id.fontSize := 10;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 InstallFont(id, 0);\par }{\f4 \par The first parameter to }{\f6\fs20 InstallFont}{\f4  is pretty obvious; it's the font ID for the font you want to install.  The second parameter is called the scale word.  If it's zero, you're giving the Font Manager permission to scale the font.  If you pass 1, the Font Manager uses the closest font it can find, but doesn't scale the font.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FMGetCurFID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are a lot of cases where you want to use the current font, but change the font size or style.  One way to do that is to read the current font ID, change it, and call }{\f6\fs20 InstallFont}{\f4  with the new font ID.  }{\f6\fs20 FMGetCurFID}{\f4  reads the current font, but there is a catch: Pascal functions can't return a record, so the value is returned as a long integer.  All you have to do is remember to put in a type cast.  If you forget, the compiler will give you a gentle reminder.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \{switch to bold\}\par intID := FMGetCurFID;\par id := fontID(intID);\par id.fontStyle := id.fontStyle | 1;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 InstallFont(id);\par }{\f4 \par Problem 10-4:  Write "Hello, world." to the 320 mode screen in 36 point bold times.  Use red letters.\par Try the same program with 640 mode graphics.  As you see, the font is not the same.\par You can use }{\f6\fs20 StartDesk}{\f4  for this program, then paint the screen white, just like you have done in the short programs that use }{\f6\fs20 StartGraph}{\f4 .  You're loading a lot of tools you don't need, but the point of this problem is to let you see a couple of font calls in action, not spent the afternoon starting tools in a custom way!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Choosing Fonts with ChooseFont}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Choosing Fonts with ChooseFont\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 choosing fonts}}}{\v\f4 \par }{\f4 {\*\bkmkstart bk56}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are two common ways to let the user pick a font.  One involves menus with explicit menu items for each font family, style and size, and the other one just uses one menu item to call up a standard Font Manager alert.  In my own opinion, programs that don't do much with text, but do let the user pick fonts, should use the dialog.  That saves space on the menu bar for other important jobs.  Programs like text editors and page layout programs ought to use the menus, since you can pick the options quicker with menus.\par }{\f6\fs20 ChooseFont}{\f4  is the call that brings up the Font Manager's font chooser dialog.  It's really pretty simple to use.  You need to install a menu item named "Choose Font" somewhere in one of your menus.  When the user picks this item, you call }{\f6\fs20 ChooseFont}{\f4 , passing the current font ID and a word of family specification bits.  }{\f6\fs20 ChooseFont}{\f4  returns the font ID.  Like }{\f6\fs20 FMGetCurFID}{\f4 , }{\f6\fs20 ChooseFont}{\f4  returns the font ID as a long integer.\par \par }{\f6\fs20 id := ChooseFont(currentID, 0);\par }{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 base fonts}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The family specification bits word only has one bit that's currently used.  It's bit 5, which is set if you only want to allow base families and clear otherwise.  All of the other bits should be clear  Base fonts are fonts that actually exist in the font folder, as opposed to those that the Font Manager builds for you by changing the base fonts.\par {\*\bkmkend bk56}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ChooseFont}{\rxe bk56}}}{\v\f4 \par }{\f4 \par Problem 10-5:  Create a font sampler program.  Your program should call }{\f6\fs20 ChooseFont}{\f4  to let the user pick a font.  If any windows are open, it should apply the font ID to the topmost window; if not, the value should be saved and used when the next window is opened.\par The window update routine should print the font ID at the top of the window, using the system font.  It should then print column and row numbers, similar to Figure 10-2, again using the system font.  The table should be filled in with the printable characters from the font selected by the user.\par Be sure to take the size of both the font being sampled and the system font into account when the table is created!\par Printed fonts don't always look quite like you would expect, so be sure you use a version of the Frame program that supports printing as a basis for your program.  There's no point is supporting disk I/O, though.\par Once again, the point is to get some practice working with the Font Manager, not to develop the world's best font sampler.  Keep it simple.  Allow a document size of 640 by 400 \endash  that will print fine on most printers \endash  but don't worry about it when a font is too big to display or print.  Just show what you can.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Choosing Fonts with Full Menus}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Choosing Fonts with Full Menus\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk59}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you want to use full menus to select the fonts, you need to provide three things: a way to select the font family, a way to select the font size, and a way to select the font style.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font menus\:style}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The font style is the easiest.  There are five flags you can set, so you can just put five menu items, one for each style, in a menu.  A simple check works best for showing which styles are selected.  The Menu Manager has some flags that can be used to apply font styles to the menu itself, so, for example, you can use outlined text to write "Outline" in the menu.  That's a classy touch I highly recommend.  (But remember: underline won't work, since the system font doesn't support it.)  It's also traditional to include an option for plain text; it just turns off any style bits that have been selected all in one whack.\par {\*\bkmkstart bk57}The size isn't that much harder to handle.  Most programs give a few common sizes as menu items that can be selected, checking them when a particular size is the current size.  The common font sizes to include are 9, 10, 12, 14, 18 and 24.  Of course, that's just a small selection from the 255 possible font sizes, so most programs also give you the option of using }{\f6\fs20 ChooseFont}{\f4 , and a few even create a custom dialog that lets the user type in a font size in a editline item.  That's something you don't know how to do yet, but it's a pretty simple dialog to create once you've learned a few things about controls.\par There is one thing you should do in a font size menu that's a little tough.  When the Font Manager builds a font, the result isn't generally as good as a font that is created by an artist.  The user may want to pick fonts that will look good, so you need some way to tell them which font sizes actually exist.  The traditional way to show which font sizes exist as bit mapped fonts is to show those sizes using outlined or bold text.  That means you need some way to outline a menu item name, and you also need some way to tell if a font exists on disk.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CountFonts}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 CountFonts}{\f4  is one way to see if the font exists on disk.  There are a lot of ways to use }{\f6\fs20 CountFonts}{\f4 , but we'll only discuss this one.\par You pass two parameters to }{\f6\fs20 CountFonts}{\f4 , a font ID with the proper font family number and size, and a flags word, which for our purposes should be set to $0A.  The font ID should also have the style word set to $FF.  }{\f6\fs20 CountFonts}{\f4  returns the number of fonts that fit the bill.  If it returns 0, the size should be printed in normal text in the font size menu.  If something other than 0 is returned, the size should be printed with outlined text.\par You can change the style for the text in a menu item using the Menu Manager's }{\f6\fs20 SetMItemStyle}{\f4  call.  You pass the menu item number and a style word.  The style word is basically a copy of the font style byte expanded to a word length, so for outlined text you would pass $0008, and for normal text you would pass $0000.\par Putting all of this together, here's the sort of code you would need to set the style on a font size menu item:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 intID := FMGetCurFID;\par id := fontID(intID);\par id.fontStyle := $FF;\par id.fontSize := 10;\par if CountFonts(id, $0A) = 0 then\par    SetMItemStyle(0, size_10)\par else\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    SetMItemStyle(8, size_10);\par }{\f4 \par {\*\bkmkend bk57}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font menus\:size}{\rxe bk57}}}{\v\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk58}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixFontMenu}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last of the three things you need to put in your menus is a list of the font families, listed by name.  The Font Manager has a call that will do this for you.  }{\f6\fs20 FixFontMenu}{\f4  builds a list of font family names, starting with a menu ID for the menu to put the font names into, a starting ID, which will be the first menu ID assigned to one of the font family names; and a family specification bits word, like the one used for }{\f6\fs20 ChooseFont}{\f4 .  You have to tell the Menu Manager to rebuild the menu size after adding these new items, too.  A typical call looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 FixFontMenu(Font_Menu_ID, First_Font_ID, 0);\par }\pard \fi360\widctlpar\adjustright {\f6\fs20 height := FixMenuBar;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The menu item IDs are assigned sequentially, starting with }{\f6\fs20 First_Font_ID}{\f4 .  Your }{\f6\fs20 HandleMenu}{\f4  subroutine should be updated to check for these menu numbers; to make the check easy, you might use a value like 1000 for }{\f6\fs20 First_Font_ID}{\f4 , then make sure all other menu IDs are much smaller.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ItemID2FamNum}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once your menu handler detects a font family choice, pass it to }{\f6\fs20 ItemID2FamNum}{\f4 .  This Font Manager call takes the item ID as input and returns the correct family number.  By combining this family number with the size and style information from the other two menus, you can create a complete font ID.\par \par }{\f6\fs20 id.famNum := ItemID2FamNum(menuItemNum);\par }{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FamNum2ItemID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There's also an inverse to this call.  }{\f6\fs20 FamNum2ItemID}{\f4  returns the item ID for a particular family number, something you need to handled checking and unchecking of the family names as your application switches windows.\par \par }{\f6\fs20 menuItemNum := FamNum2ItemID(id.famNum);\par }{\f4 \par These three different aspects of the font \endash  the family, size and style \endash  don't generally get their own private menus.  I've seen it done that way, but in a lot of programs, menu bar space is precious enough that you just can't use three separate menus.  If you combine any of these menus, though, be sure to put the font families at the bottom, so the other font information doesn't get crowded off of the menu bar if the user has too many fonts installed!\par {\*\bkmkend bk58}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font menus\:family}{\rxe bk58}}}{\*\bkmkend bk59}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 font menus}{\rxe bk59}}}{\v\f4 \par }{\f4 \par Problem 10-6:  Rework the font sampler from Problem 10-5 so it uses three font menus, labeled "Font", "Style", and "Size".  Be sure to support checking of the current font family, style and size, and be sure to outline the sizes that exist as bit mapped fonts on disk.  Also, add "Plain Text" as one of the font styles, and handle it appropriately.\par The first entry in your Font menu should be the call to Choose Font.\par Be sure you keep the proper items checked and outlined!  As the user picks different windows, the checks and outlines should be updated to reflect the front document window.  If something other than a document window is front (like a desk accessory) or if all of the document windows are closed, the checks and outlines should reflect the font that would be used for a new window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson has covered fonts \endash  how to use them and how to select them.  You have learned to use QuickDraw to draw text in a variety of colors and pen modes.  You've also learned how to measure text so you know when to wrap lines.  Finally, you learned to use the Font Manager to select fonts.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 CharBounds\tab CharWidth\tab ChooseFont\tab CountFonts\par CStringBounds\tab CStringWidth\tab DrawChar\tab DrawCString\par DrawString\tab DrawText\tab FamNum2ItemID\tab FixFontMenu\par FMGetCurFID\tab GetFontInfo\tab ItemID2FamNum\tab SetMItemStyle\par SetTextMode\tab StringBounds\tab StringWidth\tab TextBounds\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 TextWidth\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk60}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 fonts}{\rxe bk60}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 11 \endash  TextEdit}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 11 \endash  TextEdit}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 11 \endash  TextEdit\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 {\*\bkmkstart bk63}This lesson introduces one of the most specialized tools in the toolbox, TextEdit.  TextEdit is a fairly sophisticated tool for displaying and editing text.  In fact, you can create a reasonably good text editor using little more than TextEdit \endash  and that's what we'll do in this lesson.  This text editor will be used later in the course to help explore other parts of the toolbox in a realistic program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 An Overview}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 An Overview\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You may not have thought about it quite this way, but you already know enough to write most of a text editor.  About the only things you would need that we haven't covered are some dialogs.  After all, you know how to choose and use fonts.  You know how to figure out how big a string is in a particular font, how to scroll windows, how to draw and erase a line in }{\f6\fs20 modeXOR}{\f4  to create a flashing cursor, how to scroll the screen, how to load and save files, and how to print.  In short, you know all of the things you need to know to actually write an effective text editor up to the point where you would add dialogs.\par Of course, knowing how something is done doesn't mean it is easy, or that you would ever want to do it.  I know how to walk from Albuquerque to Chicago, but I don't ever plan to put that knowledge to use.  It would be a big job, and if I ever really wanted to get to Chicago, there are a dozen better ways.\par The TextEdit tool is a better way to handle something you already know how to do for yourself.  The TextEdit tool can display text in one or several fonts, scroll the text, update the window, and even let the user enter new text.  It gives you relatively easy to use mechanisms to print the text or examine and change it from your program.  In short, it's all you need to put together a very effective little editor.  About the only major things it can't do are wrap text around a picture and scroll horizontally.\par There are two good reasons for learning about the TextEdit tool in an introductory course.  The first is that most programs need to display text, and many need to edit text.  TextEdit gives you a way to get the program finished enormously faster than if you had to do all of that work for yourself.  The second reason we'll use TextEdit is to actually get that word processor.  It's not that I expect you to really need a word processor; you probably have two or three that do more than the one we'll write.  The real reason for wanting the editor is to give us a simple but realistic program we can use later.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using TextEdit}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using TextEdit\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 TextEdit has to be started, and it's not one of the tools that we've been starting so far.  There's not much to adding another tool to the list of tools to start, but you should be sure you add TextEdit to your }{\f6\fs20 StartUpTools}{\f4  tool list.  The tool number for TextEdit is 34 ($22); the version number, as of System Disk 6.0, is 1.3 ($0103 in the resource description file).\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 controls}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The easiest way to use TextEdit is to create a TextEdit control.  That's something we haven't done before, but creating a control is a lot easier than you might think.  For the most part, it's all done with resources.\par Back in lesson 5, when you learned how to set up a window with an }{\f6\fs20 rWindParam1}{\f4  resource, there were two fields at the end that I basically told you to not worry too much about.  They were right at the end of the resource.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 rWindParam1 (1001) \{\par    $DDA5,                      /* wFrameBits */\par    nil,                        /* wTitle */\par    0,                          /* wRefCon */\par    \{0,0,0,0\},                  /* ZoomRect */\par    linedColors,                /* wColor ID */\par    \{0,0\},                      /* Origin */\par    \{1,1\},                      /* data size */\par    \{0,0\},                      /* max height-width */\par    \{8,8\},                      /* scroll ver hors */\par    \{0,0\},                      /* page ver horiz */\par    0,                          /* winfoRefcon */\par    10,                         /* wInfoHeight */\par    \{30,10,183,602\},            /* wposition */\par    infront,                    /* wPlane */\par    nil,                        /* wStorage */\par    $0800                       /* wInVerb */\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 11-1:  Resource For a Standard Document Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The field labeled }{\f6\fs20 wStorage}{\f4  is actually a reference to a list of controls.  The last field, }{\f6\fs20 wInVerb}{\f4 , is named a little more appropriately; it is a flags word that gives some detailed information about the control reference, color table reference, and window title reference.  You used the color table bits, bits 10 and 11, back in Lesson 5 to create a window with a custom color table.  In this lesson, we'll use bits 7-0, which describe the control list.\par (Incidentally, the comments for the fields come from the Types.rez header file that comes with the Rez compiler.  I left the names alone so you would feel comfortable reading that file later.  }{\f6\fs20 wStorage}{\f4  is a horrible comment for what the field is used for.  It's a hold over from the pre-resource days; this position in the window record tells where the window is stored.)\par To create a TextEdit control, the first step is to modify the window resource so it looks for a list of controls.  The modified resource looks like this:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 rWindParam1 (1001) \{\par    $C1A5,                      /* wFrameBits */\par    nil,                        /* wTitle */\par    0,                          /* wRefCon */\par    \{0,0,0,0\},                  /* ZoomRect */\par    linedColors,                /* wColor ID */\par    \{0,0\},                      /* Origin */\par    \{0,0\},                      /* data size */\par    \{0,0\},                      /* max height-width */\par    \{0,0\},                      /* scroll ver hors */\par    \{0,0\},                      /* page ver horiz */\par    0,                          /* winfoRefcon */\par    0,                          /* wInfoHeight */\par    \{30,10,195,630\},            /* wposition */\par    infront,                    /* wPlane */\par    1001,                       /* wStorage */\par    $0802                       /* wInVerb */\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 11-2:  Resource For a Window with Controls\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par {\*\bkmkstart bk61}The 1001 for }{\f6\fs20 wStorage}{\f4  is a resource number for an }{\f6\fs20 rControlTemplate}{\f4  resource.  A value of 2 in bits 7-0 of the }{\f6\fs20 wInVerb}{\f4  parameter tells the Control Manager that the }{\f6\fs20 wStorage}{\f4  parameter is a resource ID, and that it points to a single control, not a list of controls.  (We'll use lists of controls in Lesson 13.)\par The next step is to create the TextEdit control itself.  Here's the }{\f6\fs20 rControlTemplate}{\f4  resource we'll use in the problems to create a TextEdit control.  We'll talk about the individual fields in a moment.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    1001,                              /* Application defined ID */\par    \{0,0,165,620\},                     /* controls bounding rectangle */\par    editTextControl \{\{\par       $0000,                          /* flags */\par       $7C00,                          /* more flags */\par       0,                              /* refcon */\par       $42280000,                      /* text flags */\par       /*--------------------------------------------------*/\par       \{-1,-1,-1,-1\},                  /* indent rect */\par       /*--------------------------------------------------*/\par       $FFFFFFFF,                      /* vert bar */\par       0,                              /* vert Amount */\par       nil,                            /* hor bar */\par       0,                              /* hor amount */\par       /*--------------------------------------------------*/\par       nil,                            /* style ref */\par       /*--------------------------------------------------*/\par       0,                              /* text descriptor */\par       nil,                            /* text ref */\par       0,                              /* text length */\par       /*--------------------------------------------------*/\par       nil,                            /* max chars */\par       nil,                            /* max lines */\par       nil,                            /* Max chars per line */\par       nil,                            /* max height */\par       /*--------------------------------------------------*/\par       nil,                            /* color ref */\par       4,                              /* drawing mode */\par       /*--------------------------------------------------*/\par       nil,                            /* Filter Proc Ptr */\par       \}\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 11-3:  }{\f6\fs20 rControlTemplate}{\f4  for a TextEdit Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par As you can see, there's a lot to this record.  While there's a lot of work setting up this resource, one of the really neat things about the resource is that it's all you have to do.  When you add this resource to your window, TextEdit, the Control Manager, and the Window Manager all take over and work a small miracle.  Suddenly, when your program runs, a cursor appears in the window.  When you close the window, the control and all of its associated data structures are cleaned up.  The user can type text, erase and delete text, cut copy and paste, and all sorts of wonderful things.  We'll get into a lot more detail about that later.  With a few rather simple additions to your program, the user can even change fonts, format the text, load and save files, and print the text.  You'll learn to do all of that shortly.\par Here's the details about the parameters in the }{\f6\fs20 rControlTemplate}{\f4  resource.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 1001,                              /* Application defined ID */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This is the control ID.  You need this number for some Control Manager and TextEdit calls.  It can be anything except 0 or 1, but it causes a little less confusion if you use the same number for the resource ID and the control ID, as we've done here.\par (Actually, 1 would work as a control ID, but it's not a good choice, for reasons we'll explore in a later lesson.)\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 \{0,0,165,620\},                /* controls bounding rectangle */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This rectangle is the size of the TextEdit control.  For our text editor, the size is the same as the window size, and later on we'll set up some flags to tell TextEdit to change the size of the control to match the size of the window.  You can create a TextEdit control that doesn't take up the whole window, though.  That way you can have text in the same window with other controls or pictures.  You can even put more than one TextEdit control in the same window.  You'll learn how to handle more than one control in the same window in Lesson 13.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 $0000,                          /* flags */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 All of the bits but one are unused in this flags word \endash  at least, they are unused for a TextEdit control.  This same resource type is used for a lot of different kinds of controls, and for some of the other controls, more of the bits are used.\par Bit 7 should be clear, as it is in our resource, if you want the control to be visible.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 $7C00,                          /* more flags */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par All of the bits in this flags word are used for TextEdit controls.\par \par }\pard \qj\fi-1080\li2520\ri360\widctlpar\adjustright {\f4 bit 15\tab If this bit is set, the control is the current target.  That means that if the user presses a key, this control is the one that gets the character.  TextEdit sets the bit for itself, though, and we're supposed to leave in clear when the control is defined.\par \par bits 14-12\tab These bits have to be set to 1.  TextEdit uses them for internal flags, and will turn them off if it needs to.\par \par bit 11\tab Setting this bit tells TextEdit to create it's own size box, and to hook that size box to the window.  It replaces the size box we've used in the past, so we'll need to get rid of the size box and scroll bars we generally ask }{\f6\fs20 TaskMaster}{\f4  to handle for us.\par \par \tab If you are creating a TextEdit control that will be a small part of a larger window, you would clear this bit.\par \par bit 10\tab This bit must be set to 1.  It's another one of those internal bits that TextEdit insists must be set when you create the control.\par \par bits 9-4\tab These bits must be set to 0.\par \par bits 3-2\tab You can create a separate color table for the TextEdit control, and there is a field later on in the resource that refers to the color table.  These bits tell what kind of a color table reference we're using.  In this case, we've set the bits to 00 for a pointer reference, and then set the color table pointer to nil, telling TextEdit to use the default color table.\par \par bits 1-0\tab These bits define the reference type for a list of styles.  We will cover styles a little later in this lesson, but we won't use styles from a resource at all, so once again the reference is 00, and the pointer that appears later in the resource is nil.\par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 0,                              /* refcon */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 The Control Manager sets aside this long word field for our own use.  We're not using it, so it's set to 0.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 $42280000,                      /* text flags */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 The text flags long word controls all sorts of things.  This parameter finishes the job started by the flag words, letting you tell TextEdit just how you want the text to look, and how you want it to work.\par \par }\pard \qj\fi-1080\li2520\ri360\widctlpar\adjustright {\f4 bit 31\tab This bit is set if the TextEdit control is supposed to actually be a control.  You can create a TextEdit control and hide it from the Control Manager by clearing this bit, but then you have to do all of the nasty work for yourself.\par \par bit 30\tab This bit must be set to 1, telling TextEdit that there will only be one format used for all of the text.  It's there so Apple can expand TextEdit later.\par \par bit 29\tab If this bit is clear, like it is in our resource, TextEdit will allow any number of different styles of text.  If it's set, only one font, size, and so forth can be used.\par \par bit 28\tab For something like a program listing, you might want to let a line disappear off of the right edge of a page if it is too long.  In that case, you would set this bit.  Text editors normally break a line when they get to the end of a page, starting the next word on a new screen line.  If you clear this bit, as we've done, that's what TextEdit will do with the lines.\par \par \tab Another way to think of this is to label a physical line of text as anything ending with a carriage return character.  If this bit is set, TextEdit only uses one screen line for each physical line, no matter how long the line is.  If this bit is clear, TextEdit treats a physical line as a paragraph, splitting it up so you can see all of the words in the available space.\par \par bit 27\tab Setting this bit disables scrolling.\par \par bit 26\tab TextEdit can be used to display text, as well as edit it.  If you set this bit, the user can read the text, but can't change it.\par \par bit 25\tab TextEdit can handle cutting and pasting text, but there are some problems with simple methods of cutting and pasting.  The problems are related to how you handle cutting and pasting words of text.  If you set this bit, it turns on smart cuts and pastes, which cause TextEdit to apply a few extra rules when it cuts and pastes text.  Specifically, blanks are removed from the start of text when you cut it.  If there are no blanks at the start of the text, blanks at the end are removed.  When text is pasted, blanks are inserted if the pasted text would butt up against characters already in the window.\par \par \tab What this does is apply some reasonable rules to help you cut and paste words.  When you select a word and cut it, TextEdit tries to remove extra spaces from the text you cut.  Then, when you paste the text, TextEdit tries to keep spaces between the words.  The method isn't perfect, but it works more often than it fails.\par \par bit 24\tab If you are using more than one TextEdit control in a window, or if you're mixing TextEdit controls with other controls that can use keys, the Tab key is normally used to move from one control to another.  If you're not using more than one control that uses keys, though, you should let the user type tabs.  Setting this bit tells TextEdit to move to the next control when you type Tab; clearing it, as we've done, tells TextEdit to put tabs in the text.\par \par bit 23\tab If you set this bit, TextEdit draws a box around the control.  That's probably what you would want if the control is a small control in a larger window, but in our case the control fills the entire window, so we left this bit off.\par \par bit 22\tab This bit must be set to 0.\par \par bit 21\tab TextEdit uses a ruler to decide how wide the text is.  If this bit is set, resizing the window automatically resizes the ruler.  To create a program that works a little more like a real text editor, the ruler size should depend on the width of the printed page, not on the width of the window.  In that case, the bit would be clear, and the program would have some other way of setting the ruler width.\par \par bit 20\tab If this bit is clear, TextEdit lets the user select text.  If it is set, the user can't select text.\par \par \tab In most cases, if you're going to let the user edit the text, you should let them select it, too.\par \par bit 19\tab Imagine two open windows on the desktop, both with TextEdit boxes, and both with selected text.  When you select one of them, the controls are drawn differently.  The controls in the window that isn't active are just outlines, while the controls in the active window have arrows, thumbs, and so forth.  If you set this bit, the selections will change, too.  In the active window, selected text will be inverted, like you're used to seeing it.  In the window that isn't active, TextEdit draws an outline around the text.  I sort of like that.  If you don't, clear this bit in your resource.\par \par bits 18-0\tab These bits are not used, and should be set to 0.\par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 \{-1,-1,-1,-1\},                  /* indent rect */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 You don't want text smashed right up against the edge of the window.  This rectangle tells how big of a margin to leave on each side.  The values of -1 we've used tell TextEdit to use some default values.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 $FFFFFFFF,                      /* vert bar */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This is the handle for the vertical scroll bar.  If you don't want a vertical scroll bar, use nil.  If you want TextEdit to create one for you, use $FFFFFFFF.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 0,                              /* vert Amount */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This tells TextEdit how far to scroll when the scroll bar arrow is used.  A value of 0 tells TextEdit to use it's internal default.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* hor bar */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4   \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This field is for the horizontal scroll bar.  Unfortunately, TextEdit doesn't use it.  Maybe someday it will.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 0,                              /* hor amount */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4   \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 If horizontal scroll bars are ever added to TextEdit, this field will be the number of pixels to scroll.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* style ref */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This is a reference to the styles to use in the TextEdit control.  We won't be using predefined styles, so this field is set to nil in our resource.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 0,                              /* text descriptor */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This field tells what sort of value is in the next one.  We've set it to 0, for a pointer.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* text ref */\par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 \par This field is a reference to the initial text for the TextEdit record.  For a help screen, you might want to point this at another resource.  For our text editor, we'll load the text manually, so this field is set to nil.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 0,                              /* text length */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This is the length of the text in the previous field.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* max chars */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 You can limit the number of characters in the TextEdit control, or tell TextEdit it can allow as many characters as it wants.  That's what we've done by setting the field to nil.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* max lines */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 In later versions of TextEdit, you may be able to limit the number of lines in a TextEdit control.  So far, this field isn't actually used, and must be set to nil.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* Max chars per line */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 In later versions of TextEdit, you may be able to limit the number of characters on a  line.  So far, this field isn't actually used, and must be set to nil.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* max height */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 I'm really not sure what this field might be used for some day, but it isn't used yet.  It must be set to nil.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* color ref */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This field is used for color tables.  We aren't using one, so the field is set to nil.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 4,                              /* drawing mode */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 You get some control over the drawing mode TextEdit uses.  We've picked a drawing mode of 4, which is the numeric value for }{\f6\fs20 modeForeCopy}{\f4 .  It's not very fast, but it uses the correct colors.  If you're willing to play with the text colors a bit, you can speed up the text drawing by using one of the other drawing modes.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20 nil,                            /* Filter Proc Ptr */\par }\pard \qj\fi360\li720\ri360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\li720\ri360\widctlpar\adjustright {\f4 This parameter is for a filter procedure, which gives you control over some of the internal functions of TextEdit.  We won't be using filter procedures in this course.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par TextEdit does almost everything for you, but there is one chore you do have to take care of.  Your window update procedure has to make one call to }{\f6\fs20 DrawControls}{\f4  to make sure the control actually gets drawn.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 DrawControls}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 DrawControls(GetPort);\par {\*\bkmkend bk61}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rControlTemplate resource}{\rxe bk61}}}{\v\f4 \par }{\f4 \par Problem 11-1:  Start with the solution to Problem 10-6, which was the font sampler that used full menus.  We'll use that program as the basis for our text editor, which will be used in several problems throughout the rest of the course.  Remove the font sampler code, so all you have left is Frame with the font selection menus.  Now add the TextEdit resource to the document window.\par When you worked problem 10-6, you took out disk I/O.  We'll put that back in later.  You should leave the printing hooks in your program, but for now, don't try to implement printing.  There are some details about TextEdit we need to talk about before you try to print a document.  Finally, while we're starting with the font sampler for the very good reason that we'll implement font selection, we haven't covered how to do it yet.  This problem is just about getting the basic window up.  You should be able to type text, use the mouse, and use cut, copy, paste and clear.  Leave everything else for later.\par Be sure and change the frame bits word in the window resource to get rid of the }{\f6\fs20 TaskMaster}{\f4  scroll bars and grow box.  TextEdit uses it's own, and you don't want two sets of controls in the same window.  Also, remember that TextEdit is a new tool \endash  you need to update your tool startup list appropriately.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Editing with TextEdit}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Editing with TextEdit\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 TextEdit supports quite a few editing operations, doing all of the work for you.  We'll explore them in this section, using the program you wrote as a solution to Problem 11-1.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tabs}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Naturally, you can type characters from the keyboard.  The return key starts a new line, and unlike most other tools, TextEdit supports the tab key.  You can even change where the tab stops are located, although we won't deal with that in this lesson.\par TextEdit uses the standard editing keys, and supports the standard mouse editing features.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\b\f4 Key}{\f4 \tab }{\b\f4 Description}{\f4 \par \par left arrow\tab Backs up one character.  Hold down the command key to back up to the start of the last word, or the option key to move to the start of a line of text.  You can hold down the shift key while you move the cursor to select text.\par \par right arrow\tab Moves forward one character.  Hold down the command key to move to the next word, or the option key to move to the end of the line.  You can hold down the shift key while you move the cursor to select text.\par \par up arrow\tab Moves up one line.  Hold down the command key to move to the top of the page, or the option key to move to the start of the document.  You can hold down the shift key while you move the cursor to select text.\par \par down arrow\tab Moves down one line.  Hold down the command key to move to the bottom of the page, or the option key to move to the end of the document.  You can hold down the shift key while you move the cursor to select text.\par \par delete\tab If any text is selected, the delete key deletes the text.  If nothing is selected, the character to the left of the insertion point is deleted.\par \par clear\tab This key works like the delete key if anything is selected, but is ignored if nothing is selected.\par \par control-F\tab This is a forward delete; it deletes the character to the right of the selection point.  If any text is selected, it works like delete and clear, selecting the selected text.\par \par control-Y\tab Deletes all of the characters from the insertion point to the end of the line.\par \par control-X\tab Copies the selected text to the clipboard, then deletes it.\par \par control-C\tab Copies the selected text to the clipboard.\par \par control-V\tab Pastes the text in the clipboard into the document.  If any text is selected, the selected text is deleted first.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table 11-1: TextEdit Editing Functions\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can also use the mouse, of course.  You can click to move the selection point, or click and drag to select characters.  You can also double-click, which selects words, or even triple-click to select lines.\par Finally, TextEdit knows about your Edit menu.  After all, the Cut, Copy, Paste and Clear commands all have standard menu ID numbers.  Well, TextEdit recognizes them, taking appropriate action when the commands are used.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Changing the Ruler}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Changing the Ruler\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ruler}}}{\f4 {\*\bkmkstart bk62}TextEdit can do some limited formatting of the text it displays \endash  things like left or right justification, or picking out where the tab stops should go.  The values that control these formatting options are collected in a ruler record that looks like this:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20    teRuler = record\par        leftMargin:     integer;\par        leftIndent:     integer;\par        rightMargin:    integer;\par        just:           integer;\par        extraLS:        integer;\par        flags:          integer;\par        userData:       longint;\par        tabType:        integer;\par    (* Change size of array for application. *)\par        tabs:           array [1..1] of teTabItem;\par        tabTerminator:  integer;\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 11-4:  The Ruler Record\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Setting things like tab stops and margins works best with dialogs or interactive rulers.  We haven't talked about dialogs, and we won't talk about interactive rulers, so I'm going to ignore a lot of the fields in this record for now.  If you want to read about all of the fields, flip back to Appendix A.  We'll also talk about a few more of these fields later, when we create some sample dialogs.  For now, I'd like to concentrate on the }{\f6\fs20 just}{\f4  field, which controls text justification.\par Text justification is used to line up lines of text.  Unjustified text, called left justified by TextEdit, is the sort you would normally get with a typewriter.  The left edge of all of the lines match, but the right edges don't \endash  they end after the last character of the last word.  Right justification does just the opposite, lining up the right edges of each line, leaving a ragged left edge.  Fill justification lines up both the left and right edges by inserting small amounts of space between each word (or character, in some editors).  Fill justification is what you normally see in books, like this one.  The last type of justification is centering, which puts the same amount of space on the left and right edge of the text.\par The }{\f6\fs20 just}{\f4  field records the kind of justification TextEdit uses.  You can use any of these values:\par \par }\pard \qj\li720\keepn\widctlpar\adjustright {\f4 0\tab left justification\par -1\tab right justification\par 1\tab center justification\par }\pard \qj\li720\widctlpar\adjustright {\f4 2\tab fill justification \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEGetRuler}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Since there are other fields in the record besides the }{\f6\fs20 just}{\f4  field, the best way to change the way text is justified is to read the current ruler record, change it, and then send the changed record back to TextEdit.  }{\f6\fs20 TEGetRuler}{\f4  is used to read the record.\par \par }\pard \li360\widctlpar\adjustright {\f6\fs20 procedure TEGetRuler (rulerDescriptor: integer; rulerRef: univ longint;\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20    teH: teHandle);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f6\fs20 rulerDescriptor}{\f4 \tab This field tells whether }{\f6\fs20 rulerRef}{\f4  is a pointer, an existing handle, a resource ID, or a pointer to a location to put a handle TextEdit allocates for us.  Since the ruler record doesn't have a fixed length, it's best to let TextEdit figure out how much room it needs and allocate a handle to hold it.  For that, }{\f6\fs20 rulerDescriptor}{\f4  is set to 3.\par \par }{\f6\fs20 rulerRef}{\f4 \tab This is the address where we want TextEdit to place the handle.  If the variable where the handle will be stored is called }{\f6\fs20 rulerHandle}{\f4 , you would use a parameter of }{\f6\fs20 @rulerHandle}{\f4 .\par \par }{\f6\fs20 teH}{\f4 \tab If there are several text edit controls in a single window, you can pass the handle for a specific control for this last parameter.  We just use nil, which tells TextEdit to look at the active control.  Since there's only one of them in our window, we know it will be the right one.  Just be sure you use }{\f6\fs20 SetPort}{\f4  so your window is the active window.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TESetRuler}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 After you change the ruler, call }{\f6\fs20 TESetRuler}{\f4  to force TextEdit to use the new values.  The parameters are almost the same as for the }{\f6\fs20 TEGetRuler}{\f4  call.  The only difference is that you pass 1 for }{\f6\fs20 rulerDescriptor}{\f4  instead of 3, and you pass the actual handle instead of a pointer to the handle.\par Of course, you have to check for errors after the }{\f6\fs20 TEGetRuler}{\f4  call, since you wouldn't want to modify something you thought was a handle when }{\f6\fs20 TEGetRuler}{\f4  had run out of memory or something.  Be sure and lock the handle before you use it, too, and dispose of the handle after the }{\f6\fs20 TESetRuler}{\f4  call.\par Rulers do have one unfortunate limitation.  Each ruler applies to the entire TextEdit document.\par \par Problem 11-2:  Add justification to the editor you wrote in Problem 11-1.  Start by adding four new menu items to the Style menu that you already have for the font style.  These new menu items should be at the bottom, and there should be a separator under the last font style.  The new items are "Left Justify", Right Justify", "Fill Justify", and "Center".  Use a check mark to show which one is currently in use, reading the setting from TextEdit to set the check mark.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CheckMenu}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When the user picks one of these menu items, set the appropriate value for }{\f6\fs20 just}{\f4  in the ruler record.  Dim the menu items if there are no open windows.  Check the appropriate style menu in your }{\f6\fs20 CheckMenu}{\f4  subroutine (the one you call from the event loop to highlight and unhighlight menus), reading the ruler to find out what style to check.  If that seems unnecessary, try setting one style in one window, and another style in a second window, and switch back and forth \endash  I would expect the style that is checked to switch, too.\par Note:  When I added these final checks to my }{\f6\fs20 CheckMenu}{\f4  subroutine, I finally noticed an impact on the program.  The repeated calls to get the ruler were interfering with the flashing of the cursor.  To fix the problem, I just moved the }{\f6\fs20 CheckMenu}{\f4  call to a spot right after the case statement that handles events, then did a simple check, calling it only if the event that was just handled wasn't a }{\f6\fs20 nullEvt}{\f4 .  That way, the subroutine was only called if something happened.  So, why not make this check earlier?  Because the call wasn't a problem earlier, and there is no point in making a program more complicated until you have a reason!\par \par {\*\bkmkend bk62}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text justification}{\rxe bk62}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Changing Fonts}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Changing Fonts\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text styles}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text colors}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 fonts}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 TextEdit uses a style record to hold information about the current font.  The style record looks like this:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    teStyle = record\par        teFont:     fontID;\par        foreColor:  integer;\par        backColor:  integer;\par        userData:   longint;\par        end;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 11-5:  }{\f6\fs20 teStyle}{\f4  Record\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Knowing what you do about fonts, the fields in this record should make a lot of sense.  The first one is the font ID; it's exactly the same one you used in the last lesson.  The }{\f6\fs20 foreColor}{\f4  and }{\f6\fs20 backColor}{\f4  fields are the foreground and background colors.  The last field is for your own use.\par Setting the style is pretty easy.  }{\f6\fs20 TEStyleChange}{\f4  changes the style for all of the text in the current selection.  If there is no selection, }{\f6\fs20 TEStyleChange}{\f4  changes something called the null style record.  That's just a 50\u162\'a2 name for the default style.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 TEStyleChange}}}{\v\f6\fs20 \par }{\f6\fs20 procedure TEStyleChange (flags: integer; var stylePtr: teStyle;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    teH: teHandle);\par }{\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 flags}{\f4 \tab You don't always want to change everything about a particular style.  For example, if the user selects some text and picks a font size of 10, you wouldn't want to set the font style, too.  After all, some of the text might be bold, and some normal text.  You can set and clear bits in this flag to tell }{\f6\fs20 TEStyleChange}{\f4  just what you want to change, and what you want left alone.\par \par }\pard \qj\fi-1080\li3240\widctlpar\adjustright {\f4 bits 15-7\tab Reserved; set to 0.\par bit 6\tab If this bit is set, the font family is changed.\par bit 5\tab If this bit is set, the font size is changed.\par bit 4\tab If this bit is set, the foreground color is changed.\par bit 3\tab If this bit is set, the background color is changed.\par bit 2\tab If this bit is set, the user data is changed.\par bit 1\tab If this bit is set, the style attributes are changed.\par bit 0\tab If this bit is set, the style attributes are reversed.  This only happens if all of the text that is selected already has a style that matches the attributes in the style record.  If the selected text doesn't match the font style in the style record, setting this bit would have the same effect as setting bit 1.  (More on this in a moment.)\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par }{\f6\fs20 stylePtr}{\f4 \tab This is the style record itself.  In the ORCA/Pascal interfaces, this parameter is defined as a var parameter, so you just pass a variable of type }{\f6\fs20 teStyle}{\f4 .\par \par }{\f6\fs20 teH}{\f4 \tab This is the handle of the TextEdit record to change.  If you pass nil, the active TextEdit record is changed.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Most of this is pretty obvious, but bits 0 and 1 of the }{\f6\fs20 flags}{\f4  parameter may seem a bit odd.  The reason for the difference is that a lot of editors will undo a style if you apply it twice.  For example, if you select a word and pick out Bold from the style menu, the word changes to bold text.  If you pick bold again, the text changes back to the way it was.  Setting bit 0 when you change the font style will cause TextEdit to work that way.  Setting bit 1, instead, tells TextEdit to just do it.  You have to pick one or the other, though.  If you set both bits, }{\f6\fs20 TEStyleChange}{\f4  will flag an error.\par Towards the end of a programming project, you'll sometimes hear programmers muttering about the 80-20 rule.  Normally that rule says that a program spends 80 percent of its time in 20 percent of the code.  (I've also heard it as the 90-10 rule.  I guess it depends on the kind of programs you write.)  Towards the end of a programming project, though, the 80-20 rule takes on a new meaning: a programmer spends 80 percent of his programming time writing 20 percent of the program.  Or, saying the same thing a different way, it's the details that sneak up and cause you grief.  And that's what happens with changing fonts, too.\par Everything we've talked about works just fine.  There's just one tiny problem.  When you pull down the font menu, you sort of expect to see a check mark beside the name of the font that you're using.  Multiple fonts create a minor headache, though, since moving the cursor can change the font.  Selecting text presents another problem, since the selected text might include more than one font.  A good way to handle this is not to check a font name unless all of the selected text uses the same font, but that assumes you know what font is being used.  Well, you can find out.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f6\fs20 TEGetSelectionStyle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TEGetSelectionStyle}{\f4  is a little more complicated than the call to set a selection.  It does have to return more than one style, after all.\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 function TEGetSelectionStyle (var commonStyle: teStyle; \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20    styleHandle: TEStyleGroupHndl; teH: teHandle): integer; }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 commonStyle}{\f4 \tab This is the field we actually need.  }{\f6\fs20 TEGetSelectionStyle}{\f4  looks for all of the style elements that are the same in all of the selected text.  Those values are placed in this style record.  Of course, some style elements might be the same, while others are different \endash  the selection might use the same font family, for example, but part of the selection could be bold while part is not.  }{\f6\fs20 TEGetSelectionStyle}{\f4  also returns an integer flag word with bits telling which fields are valid.\par \par }\pard \qj\fi-540\li2880\widctlpar\adjustright {\f4 bit 5\tab This bit is set if the font family is the same throughout the selection.\par bit 4\tab This bit is set if the font size is the same throughout the selection.\par bit 3\tab This bit is set if the foreground color is the same throughout the selection.\par bit 2\tab This bit is set if the background color is the same throughout the selection.\par bit 1\tab This bit is set if the user data field is the same throughout the selection.\par bit 0\tab This bit is set if the font style attributes are the same throughout the selection.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }{\f6\fs20 styleHandle}{\f4 \tab You have to pass a handle for this value, and it should be one that can be moved.  }{\f6\fs20 TEGetSelectionStyle}{\f4  will resize it and put all of the style records that are used throughout the selection into the buffer, one after another.  The very first word of the buffer is the number of style records.\par \par }{\f6\fs20 teH}{\f4 \tab As with the other calls, this is the handle for the text edit control you want to check.  If you pass nil, TextEdit uses the active text edit control.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 11-3:  In this problem, you add font selection to the editor that you created in Problem 11-2.\par Start by adding a call to }{\f6\fs20 TEGetSelectionStyle}{\f4  in your }{\f6\fs20 CheckMenu}{\f4  subroutine.  Check and uncheck the various font menus, leaving all of the items unchecked if a characteristic is mixed.  For example, if the font family varies, none of the font names should be checked.\par Now call }{\f6\fs20 TEStyleChange}{\f4  to change the style when the user picks a new font family, font style, or font size.\par Get rid of the call to }{\f6\fs20 ChooseFont}{\f4 , and get rid of the Choose Font command, to.  There's nothing really wrong with this command, but it makes handling the various style selections a lot more complicated than it needs to be for our purposes, which is to learn about the toolbox.\par You can also get rid of the font variable in the document record, since TextEdit is handling all of that for you, now.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Loading and Saving}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Loading and Saving\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEGetText}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TESetText}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The next step in writing the editor is to load and save text files.  TextEdit has two calls that help.  The first is }{\f6\fs20 TEGetText}{\f4 , which returns the text and the style information for the text in a TextEdit control.  The text and style information come back in two separate buffers.\par }{\f6\fs20 TESetText}{\f4  puts text into a TextEdit control.  It's inputs are the same buffers returned by }{\f6\fs20 TEGetText}{\f4 .\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEGetText}}}{\v\f4 \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 function TEGetText (bufferDescriptor: integer; bufferRef: univ longint;\par    bufferLength: longint; styleDescriptor: integer;\par }\pard \li360\widctlpar\adjustright {\f6\fs20    styleRef: univ longint; teH: teHandle): longint;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f6\fs20 bufferDescriptor}{\f4 \tab This flags word tells }{\f6\fs20 TEGetText}{\f4  what we are passing in }{\f6\fs20 bufferRef}{\f4 .  It also tells }{\f6\fs20 TEGetText}{\f4  what format to use for the text.  We'll use $0019, which tells }{\f6\fs20 TEGetText}{\f4  that }{\f6\fs20 bufferRef}{\f4  is the address of a variable, and that it should put a handle there.  }{\f6\fs20 TEGetText}{\f4  will figure out how big the handle needs to be and allocate the memory.  Of course, we need to remember to dispose of the handle when we're finished saving the text.  This flags word also tells }{\f6\fs20 TEGetText}{\f4  to use a null terminated string for the format of the text.\par \par }{\f6\fs20 bufferRef}{\f4 \tab We'll pass the address of our pointer variable in this spot.  You can look up the call in the toolbox reference manual if you would like to find out what the other possible parameters are.\par \par }{\f6\fs20 bufferLength}{\f4 \tab This field isn't used the way we're calling }{\f6\fs20 TEGetText}{\f4 .  Pass a 0.\par \par }{\f6\fs20 styleDescriptor}{\f4 \tab Pass a 3, which tells }{\f6\fs20 TEGetText}{\f4  that the }{\f6\fs20 styleRef}{\f4  field is a pointer to a variable where it should store a handle.  }{\f6\fs20 TEGetText}{\f4  will allocate the memory and return the handle.\par \par }{\f6\fs20 styleRef}{\f4 \tab This is where you pass the address of the variable where the style handle will be stored.\par \par }{\f6\fs20 teH}{\f4 \tab This is the handle of the TextEdit control we want to know about.  Pass nil, as usual, to tell }{\f6\fs20 TEGetText}{\f4  to use the active TextEdit record.\par \par }{\f6\fs20 TEGetText}{\f4 \tab }{\f6\fs20 TEGetText}{\f4  is a function; it returns the total length of the text.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Both the text and style records need to be saved.  }{\f6\fs20 TEGetText}{\f4  returns the length of the text buffer, so we can use that as part of the output file.  You can write the length as a four byte value at the start of the file, so that you can easily read the length when you load the file.  Right after that, you would write the actual text.  Next would come the length of the style information, followed by the data returned in the style buffer.  The only trick here is to figure out how long the style record is.  You can do that by looking in the style record itself, which has this format:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1066{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw200\pich179\picwgoal4000\pichgoal3580\macpict\bliptag1075606665\blipupi72{\*\blipuid 401c74896bf5e074d895a4e0f54c6b2b}07b7ffffffff00b200c71101a0008201000affffffff00b200c70900000000000000003100010002000f006609ffffffffffffffff38a10096000c02000000020000000000000001000a00020011000d00552c000800140554696d65730300140d00092b260a0776657273696f6ea00097a0008c01000affffffff00b200c7300029000200450066a10096000c02000000020000000000000001000a00310016003c0051280039001c0d7468652052756c65724c697374a0009701000affffffff00b200c709000000000000000030002f006500400066a10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a00000000000000002c000900030647656e6576610300030d0003280038005f09a5202020a5202020a501000affffffff00b200c790000400000000000d002000000000000d002000310062003e0082000170000000700000000000000000000000000000007000000070000000000000000000000000000000700000007000000000000000a0009730002f000200400003a10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a0000000000000000280038fffc09a5202020a5202020a501000affffffff00b200c790000400000000000d002000000000000d00200031ffff003e001f000170000000700000000000000000000000000000007000000070000000000000000000000000000000700000007000000000000000a00097a0008d09ffffffffffffffff30000e0002002a0066a10096000c02000000020000000000000001000a00160016002100510300140d000928001e00170f72756c65724c6973744c656e677468a0009701000affffffff00b200c722001c0002090022001c005c0900300044000200600066a10096000c02000000020000000000000001000a004c0016005700512a360f7374796c654c6973744c656e677468a0009701000affffffff00b200c722005200020900220052005c090030005f0002007b0066a10096000c02000000020000000000000001000a00670016007200512b071b0c7468655374796c654c697374a0009701000affffffff00b200c7090000000000000000300065006500760066a10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a00000000000000000300030d000328006e005f09a5202020a5202020a501000affffffff00b200c790000400000000000d002000000000000d00200067006200740082000170000000700000000000000000000000000000007000000070000000000000000000000000000000700000007000000000000000a00097300065000200760003a10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a000000000000000028006efffc09a5202020a5202020a501000affffffff00b200c790000400000000000d002000000000000d00200067ffff0074001f000170000000700000000000000000000000000000007000000070000000000000000000000000000000700000007000000000000000a0009709ffffffffffffffff300095000200b10066a10096000c02000000020000000000000001000a009d001600a800510300140d00092b2737097468655374796c6573a0009701000affffffff00b200c709000000000000000030009b006500ac0066a10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a00000000000000000300030d00032800a4005f09a5202020a5202020a501000affffffff00b200c790000400000000000d002000000000000d0020009d006200aa0082000170000000700000000000000000000000000000007000000070000000000000000000000000000000700000007000000000000000a0009730009b000200ac0003a10096000c0200005a0200005a00000000a1009a0008ffff00000006000001000a00000000000000002800a4fffc09a5202020a5202020a501000affffffff00b200c790000400000000000d002000000000000d0020009dffff00aa001f000170000000700000000000000000000000000000007000000070000000000000000000000000000000700000007000000000000000a0009709ffffffffffffffff30007a000200960066a10096000c02000000020000000000000001000a00820016008d00510300140d000928008a00170e6e756d6265724f665374796c6573a0009701000affffffff00b200c722008800020900220088005c0900a10096000c01000000020000000000000001000a00160070002100ab28001e0071076c6f6e67696e74a00097a10096000c01000000020000000000000001000a00310070003c00ab2a1b106172726179206f6620746552756c6572a00097a10096000c01000000020000000000000001000a004c0070005700ab2a1b076c6f6e67696e74a00097a10096000c01000000020000000000000001000a00670070007200ab2a1b106172726179206f662074655374796c65a00097a10096000c01000000020000000000000001000a00820070008d00ab2a1b076c6f6e67696e74a00097a10096000c01000000020000000000000001000a009d007000a800c62a1b146172726179206f662074655374796c656c746572a00097a10096000c01000000020000000000000001000a00020070000d00b428000a007107696e7465676572a00097a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 11-1:  The }{\f6\fs20 TEFormat}{\f4  Record Returned by }{\f6\fs20 TEGetText}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par It will take a little pointer math, but you can scan through the record, adding up the lengths of the three long integers.  Of course, you need to add an extra 14 to the length to account for the lengths themselves and the version number at the start of the record.\par The part of the program that reads a file from disk can start by loading the entire file and figuring out where the text and style information start.  With these values in hand, call }{\f6\fs20 TESetText}{\f4 .\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TESetText}}}{\v\f4 \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs20 procedure TESetText (textDescriptor: integer; textRef: teTextRef;\par    textLength: longint; styleDescriptor: integer;\par }\pard \li360\widctlpar\adjustright {\f6\fs20    styleRef: teStyleRef; teH: teHandle);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f6\fs20 textDescriptor}{\f4 \tab Pass 5, telling }{\f6\fs20 TESetText}{\f4  that }{\f6\fs20 textRef}{\f4  is a pointer to a text buffer, and that }{\f6\fs20 textLength}{\f4  contains the length of the text.\par \par }{\f6\fs20 textRef}{\f4 \tab Pass a pointer to the first byte of the text.  (The }{\f6\fs20 teTextRef}{\f4  type is actually a longint, so pass the ord4 of the pointer.)\par \par }{\f6\fs20 textLength}{\f4 \tab Pass the length of the text here.\par \par }{\f6\fs20 styleDescriptor}{\f4 \tab Pass 0, telling }{\f6\fs20 TESetText}{\f4  that }{\f6\fs20 styleRef}{\f4  is a pointer.  (The }{\f6\fs20 teStyleRef}{\f4  type is actually a longint, so pass the ord4 of the pointer.)\par \par }{\f6\fs20 teH}{\f4 \tab Pass nil, telling }{\f6\fs20 TESetText}{\f4  to write to the active TextEdit control.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par I've only told you enough to use these calls one way.  There are lots of other formats you can use.  As with any new call, it would be a good idea to look these up in the toolbox reference manual or Appendix A and read the complete description.\par \par Problem 11-4:  Add file input and output to the editor from Problem 11-3.  Use a file type of $06 and auxiliary file type of $0001, which is a general binary file.\par Hint:  The subroutine we developed in Lesson 6 for writing a file using GS/OS calls was designed to write the file in one block.  You could do it that way, but since TextEdit gives you the file in two pieces, and you have to add some length words, it will be tough.  A better way to handle writing the file would be to do several writes.  That's something we talked about in Lesson 6, but didn't actually do.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Printing}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Printing\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 printing}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 TextEdit has a fairly simple call that lets you print the document.  It's called }{\f6\fs20 TEPaintText}{\f4 .\par \par }\pard \li360\keepn\widctlpar\adjustright {\pard\plain \li360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 TEPaintText}}}{\v\f6\fs20 \par }{\f6\fs20 function TEPaintText (thePort: grafPortPtr; startingLine: longint;\par }\pard \li360\widctlpar\adjustright {\f6\fs20    var destRect: rect; flags: integer; teH: teHandle): longint;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 thePort}{\f4 \tab This is the }{\f6\fs20 grafPort}{\f4  where the text will be drawn.  }{\f6\fs20 TEPaintText}{\f4  can actually draw to any }{\f6\fs20 grafPort}{\f4 .  When you are printing, this parameter should be the }{\f6\fs20 grafPort}{\f4  the Print Manager sets up.\par \par }{\f6\fs20 startingLine}{\f4 \tab This is the line number for the first line to print.  It should be zero for the first call.  }{\f6\fs20 TEPaintText}{\f4  is a function; it returns the line number for the next line to print, so you need to keep track of that value and pass it on the second and all future calls.  }{\f6\fs20 TEPaintText}{\f4  will return -1 when there are no more lines to print.\par \par }{\f6\fs20 destRect}{\f4 \tab This is the size of one page.  I actually covered the information you need to find the page size way back in Lesson 7, but that was a long time ago.  To review, you need to look in the }{\f6\fs20 prInfo}{\f4  record, which is imbedded in the print record.  Inside that record is a rect data structure called }{\f6\fs20 rPage}{\f4 ; }{\f6\fs20 rPage}{\f4  is a rectangle that's the same size as the page.  You might want to look at the data structures listed in Appendix A or flip back to Listing 7-2 for a detailed look at the }{\f6\fs20 prInfo}{\f4  record.\par \par }{\f6\fs20 flags}{\f4 \tab You can ask }{\f6\fs20 TEPaintText}{\f4  to just calculate the lines that would be printed, without actually printing them.  The big use for this feature is to skip pages.  To calculate the proper number of lines without printing, set bit 14.  For normal printing, pass a 0.  All bits except bit 14 must be 0.\par \par }{\f6\fs20 teH}{\f4 \tab This is the handle for the TextEdit control to print.  This should be the actual handle; we'll look at how to find it in the next section.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par We'll add printing to the text editor in Problem 11-5.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Did the Document Change?}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Did the Document Change?\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last step to finish up the basic editor is to see if the document has changed.  The reason we need to know is so we can warn the user if they attempt to close a document that has been changed since the last time it was saved.  You've done this before, back in Lesson 9.  In fact, if you've been snatching code from that lesson, you may have already added most of what you need.\par If the file has changed, you need to bring up an alert that warns the user and asks if he wants to save the file.  The alert should have three buttons: Yes (the default), No, and Cancel (which stops the close operation).  You can create the alert itself with }{\f6\fs20 AlertWindow}{\f4 , which you've been using for a long time.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlHandleFromID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The problem is when to display the alert.  After all, TextEdit is doing so much of the work for you that it's hard to tell if the user even typed anything!  To find out, you need to delve into the TextEdit record itself to grab a flag called }{\f6\fs20 fRecordDirty}{\f4 .  This flag is bit 6 of the }{\f6\fs20 ctrlFlag}{\f4  byte, which is located 16 bytes into the text edit record.  The text edit record is the thing we've been ignoring up until now, passing nil whenever we were supposed to pass a record handle.  All you need to get the handle is the control ID number and the window pointer; after that, you call }{\f6\fs20 GetCtlHandleFromID}{\f4 , passing the window pointer and the control ID.  }{\f6\fs20 GetCtlHandleFromID}{\f4  returns the control handle.\par Putting all of that together, here's a subroutine that checks to see if a text edit record has changed.\par \par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 function TextEditChange (id: integer; wPtr: grafPortPtr): boolean;\par \par \{ Check to see if the text or style information has changed     \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    id - control ID for the record to check                    \}\par \{    wPtr - window containing the record                        \}\par \{                                                               \}\par \{ Returns: true if the record changed, false if not or error    \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \par var\par    ctlHandle: ctlRecHndl;                \{control handle\}\par    ptr: ^byte;                           \{work pointer\}\par \par begin \{TextEditChange\}\par ctlHandle := GetCtlHandleFromID(wPtr, id);\par TextEditChange := false;\par if ToolError = 0 then begin\par    HLock(ctlHandle);\par    ptr := pointer(ord4(ctlHandle^)+16);\par    TextEditChange := (ptr^ & $40) <> 0;\par    HUnlock(ctlHandle);\par    end; \{if\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 end; \{TextEditChange\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 11-6:  Subroutine to See if Text Has Changed\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 11-5:  Add printing and checks for changes to your program.  Before quitting, make sure all windows are closed.  Before closing a document, check to see if the text has changed.  If so, bring up a dialog like the one discussed in this section.\par If the user picks Cancel, your program should not close the window.  If you are in the process of quitting, you should stop the process.\par If the user picks No, go ahead and close the window.\par If the user picks Yes, save the document and then close the window.\par One last detail:  your save subroutine needs to clear the }{\f6\fs20 fRecordDirty}{\f4  bit, just in case the user saves the document, but leaves it open.  TextEdit has no idea when (or if) you save the document, so it depends on you to clear the }{\f6\fs20 fRecordDirty}{\f4  bit after you've done a save.  You can do that with a subroutine based on the one in Listing 11-6.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson introduced TextEdit, a very handy tool for displaying and editing text.  The problems in the lesson ended with a simple text editor.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx3600\tx6480\adjustright {\f6\fs20 GetCtlHandleFromID\tab TEGetRuler\tab TEGetSelectionStyle\par TEGetText\tab TEPaintText\tab TESetRuler\par }\pard \qj\li720\widctlpar\tx3600\tx6480\adjustright {\f6\fs20 TESetText\tab TEStyleChange\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rControlTemplate\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk63}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text edit}{\rxe bk63}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 12 \endash  Scraps}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 {\*\bkmkstart bk65}\par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 12 \endash  Scraps}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 12 \endash  Scraps\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson introduces the Scrap Manager.  The Scrap Manager is the tool that is used for cutting, copying and pasting.  When you use the Scrap Manager for these operations, you can create programs that can cut, copy and paste information to and from other applications.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Scrap Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Scrap Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The obvious difference between programs written for the Apple IIGS or Macintosh and programs written for MS DOS computers is the desktop interface.  Another difference that, in many ways, is just as important but a lot less obvious is that programs on the Apple IIGS and Macintosh have a remarkable ability to share data.  You can bring up a spread sheet, do some pretty heavy duty calculations, then move some of the cells to a word processor to create a table for a report.  Pictures move just as easily as text.  The Scrap Manager makes all of this possible with amazingly little effort.\par There are two problems that the Scrap Manager has to handle to make cutting and pasting between applications work smoothly.  The first is where the information is stored.  After all, on the Apple IIGS at least, you have to shut down one application and start another to move information from a spread sheet to a text editor.  The second problem the Scrap Manager has to deal with is the format for the information.  The information in a spread sheet is obviously very different from the information in a word processor, and the Scrap Manager has to handle this some way.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Scraps}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Scraps\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PutScrap}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Scraps are the chunks of information you cut and paste.  The Scrap Manager keeps track of scraps for you, saving the information your program passes when it cuts or copies, and passing the information back when it pastes.  When the program cuts or copies information, it calls }{\f6\fs20 PutScrap}{\f4  to tell the Scrap Manager to save the information.\par \par }{\f6\fs20 PutScrap(numBytes, scrapType, srcPtr);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The first parameter is the number of bytes you want the Scrap Manager to remember.  This parameter is a long integer, so you don't have to worry about 64K limits.  The next parameter is the scrap type, which tells the Scrap Manager what kind of information it is remembering.  We'll talk a little more about the scrap type in a moment.  The last parameter is a pointer to the information the Scrap Manager should remember.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Scrap Manager makes a copy of the information, so you can safely change the original information right after the call.  For example, if you are cutting a word out of a text buffer, you can pass a pointer to the start of the word in }{\f6\fs20 srcPtr}{\f4 , then remove the word right away.  Since }{\f6\fs20 PutScrap}{\f4  made it's own copy, you don't have to preserve the buffer.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetScrapSize}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When your program needs to get the information that's in the scrap to paste it into the document, you start with a call to }{\f6\fs20 GetScrapSize}{\f4  to find out how big the scrap is.  Of course, if the size of the scrap is zero, there's nothing to paste.\par \par }{\f6\fs20 size := GetScrapSize(scrapType);\par }{\f4 \par Once you know how big the scrap is, you can ask for the handle.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetScrapHandle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 scrapHandle := GetScrapHandle(scrapType);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 You can lock the handle and copy the information out, just like you would with any other handle.  Be sure to unlock the handle when you are through.  Don't delete the handle when you're though, though: this is the Scrap Manager's copy, so all you should do is copy the information into your document.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Scrap Types}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Scrap Types\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 {\*\bkmkstart bk64}One of the problems I said the Scrap Manager had to solve was the problem of what format to use for all of the information.  In a sense, the Scrap Manager solves this problem by ignoring it.  Instead of worrying about the format any particular program wants to use, the Scrap Manager lets you specify any one of 65536 different scrap types!  Well, that's obviously enough to handle more than just a couple of formats, but it presents a problem for your program.  You simply can't handle that many kinds of input data.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 private scraps}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 public scraps}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scraps\:private}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scraps\:public}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The whole issue is resolved by having two different kinds of scrap, private scraps and public scraps.  A private scrap is yours and yours alone.  You pick out a number for the scrap type, and you decide what format to use for the information.  If you are writing a dungeon style game, your data format might include pictures for animating the figure, hit points, and so forth.  For a spread sheet, you might include the formula used to compute the value in a cell.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text scraps}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scraps\:text}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 picture scraps}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scraps\:picture}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The other kind of scrap is the public scrap.  There are two kinds of public scrap.  Text scraps have a scrap type of 0.  Text scraps are just ASCII character sequences.  To find the length, you need to look in the length of the scrap.  Scrap type 1 is set aside for picture scraps.  Pictures are a kind of recorded drawing that you can create or draw using QuickDraw II.\par Let's imagine a sophisticated word processor to see how these scrap types work together in a real program.  Let's say you are using the text editor, and select a chapter from a book like this one, then copy it.  The text editor will actually create two different scraps, one text scrap and one more complicated scrap that includes font information, the position and contents of pictures, tab settings, and so forth.\par Now let's imagine pasting this scrap into two different programs, the original word processor and a paint program.  When you paste the scrap into the word processor, it looks for its private scrap type \endash  and finds it.  The text editor uses the private scrap type, using all of the font, tab, and picture information it saved in the private scrap.\par Now imagine pasting the same scrap in a paint program.  The paint program doesn't have any idea what to do with the text editor's private scrap.  In fact, it doesn't even look for it.  Instead, the paint program probably looks for it's own private scrap type, which might contain things like the color palette to use with a picture.  It doesn't find it, so its next step is to look at one of the public scraps.  This is the key point that makes the Scrap Manager work: the paint program, like every other program, should be able to read and use either one of the public scrap types.  Naturally, it will look for the picture scrap first.  Since the text editor didn't create a picture scrap, it will then grab the text scrap and draw the text in the picture window.\par Now, it's pretty obvious that the text won't look quite the way it did in the text editor.  Any pictures are lost.  Tabs, fonts, and other formatting information is also lost.  But the text itself does get passed.  A spread sheet would also create a text scrap, and the cell contents could be pasted into the word processor or onto a graph in the paint program.  In short, because every program must create at least one of the public scrap types, and every other program is responsible for being able to use either one of them, you can always move information from one program to another.\par In practice, there are problems.  Almost any program can read and use text, but not all programs can handle a picture.  Our small text editor can't, for example.  In that case, the program treats the scrap as if it were empty.  It's not perfect, but it works in the vast majority of cases.  Most people wouldn't expect to be able to paste a picture into a text only editor, anyway, so they won't even be surprised when it doesn't work.\par {\*\bkmkend bk64}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scrap types}{\rxe bk64}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Multiple Scraps}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Multiple Scraps\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PutScrap}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Creating more than one scrap type is really pretty easy.  Just call }{\f6\fs20 PutScrap}{\f4  one time for each scrap type, passing the proper scrap type as a parameter each time.  The Scrap Manager handles all of the details.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetScrapSize}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Using multiple scraps is almost as easy.  When you call }{\f6\fs20 GetScrapSize}{\f4 , check first for your private scrap type.  If the Scrap Manager returns an error or a scrap length of zero, check for the public scrap type that is easiest to handle.  A text editor would check for a text scrap, for example.  If you still come up blank, check the other public scrap type.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ZeroScrap}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It's actually possible to accumulate information in a scrap.  For example, if you call }{\f6\fs20 PutScrap}{\f4  ten times in a row with the same information, then paste the result, you'll get ten copies of the information.  That can be useful in situations where you have to preprocess the information, and may not have enough memory to create the entire scrap in one chunk.  Most of the time, though, it's something you want to avoid, and you avoid it by calling }{\f6\fs20 ZeroScrap}{\f4  just before you start copying information into the scrap with the }{\f6\fs20 PutScrap}{\f4  calls.  }{\f6\fs20 ZeroScrap}{\f4  doesn't have any parameters, and doesn't return anything.  It just deletes the current scrap, so the Scrap Manager creates a new scrap with the next series of }{\f6\fs20 PutScrap}{\f4  calls.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Scrap File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Scrap File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scrap file}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 UnloadScrap}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The second problem the Scrap Manager has to solve is where to put the scrap.  For the short term, the answer is pretty obvious: the scrap is kept in memory.  This doesn't work well when you switch between programs, though, since the Scrap Manager, like all of the tools, is shut down in the process of leaving your program.  To handle this situation, the Scrap Manager lets you save the scrap to disk by calling }{\f6\fs20 UnloadScrap}{\f4 .  }{\f6\fs20 UnloadScrap}{\f4  doesn't have any parameters.  It just tells the Scrap Manager to save the scrap.\par You can actually tell the Scrap Manager where to save the scrap, but that's rarely a good idea.  After all, the idea is for another program to be able to find your scrap.  Unless you're trying to hide the scrap, you want the Scrap Manager to be able to find it in its normal place.  That's in the system folder; you need to know that so you are aware that your program may ask for the system disk.  Beyond that, the location, type, and all other information about the scrap file is really not your concern.  You can look it up if you want, but I wouldn't bother.  (And didn't.)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LoadScrap}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When your program starts, you need to make a call to }{\f6\fs20 LoadScrap}{\f4 .  That tells the Scrap Manager to look for the scrap file on disk, loading it into memory where it can be used by }{\f6\fs20 GetScrapSize}{\f4  and }{\f6\fs20 GetScrapHandle}{\f4 .  Like }{\f6\fs20 UnloadScrap}{\f4 , }{\f6\fs20 LoadScrap}{\f4  doesn't have any parameters.\par \par Problem 12-1:  Add scrap file handling to the text editor you created in Problem 11-5.  All you really have to add are the calls to }{\f6\fs20 LoadScrap}{\f4  and }{\f6\fs20 UnloadScrap}{\f4 .  }{\f6\fs20 LoadScrap}{\f4  should be called right as your program starts, and }{\f6\fs20 UnloadScrap}{\f4  just before you shut down the tools.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 A Scrapbook Program}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 A Scrapbook Program\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scrapbook}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 We'll put a lot of this information to use by creating a scrapbook program.  There are two tool calls I'd like to describe which are needed for this program but don't really fit in with the lesson as a whole, and some program design issues I'd like to talk about, too.  So, rather than jump right into the problem, I'd like to discuss those other issues first.\par A scrapbook is a program that let's you collect a lot of scraps in a single, convenient location.  Our program, like most scrapbooks, will be pretty simple.  It will handle multiple scraps, displaying the first one in a window when the program starts.  It will call }{\f6\fs20 LoadScrap}{\f4  when it starts, and when you select Paste, it will create a new scrap entry and put the pasted scrap in the new spot.  Cutting will remove a scrap from the scrapbook, placing it in the scrap.  Copying will also place a scrap in the clipboard, but in this case the scrap won't be removed from the scrapbook.  Finally, Clear will remove a scrap from the scrapbook without calling the Scrap Manager to put it in the clipboard.\par Scrapbooks generally only display one scrap at a time, and ours is no exception.  For now, we'll use a menu called Move with two items, Next Scrap and Last Scrap, to move through the scraps in the scrapbook.\par The scrap itself will be displayed in the scrap window, displaying it as a picture if possible, and as a text scrap if there is no picture.  If a scrap is loaded which doesn't have a text or picture scrap type, the scrapbook should post an appropriate message.\par Figure 12-1 summarizes the program, showing the menus and the scrap window from the solution to Problem 12-2.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1067{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw649\pich410\picwgoal12980\pichgoal8200\macpict\bliptag1368647891\blipupi72{\*\blipuid 5193e8d3b1ad92a7ca395bc72e2c0264}19de00000000019a02891101a00082a0008e01000a000000000240030898005200000000007e029000000000007e028900000000007e0289000102af0002af0007003fb2ff01fe0007003fb2ff01fe0007003fb2ff01fe0007003fb2ff01fe0007003fb2ff01fe000f003ef200001ffcff00f8c800011e000f003ef200001ffcff00f8c800011e0013043e000001c0f600001ffcff00f8c800011e0013043e000001c0f600001ffcff00f8c800011e001d123e00000780003e30e0000001f03180001ff7dffeff00f8c800011e001d123e00000780003e30e0000001f03180001ff7dffeff00f8c800011e001d123e0001f9f000300060000001803006001ff39ffeff00f8c800011e001d123e0001f9f000300060000001803006001ff39ffeff00f8c800011e001d163e0007ffe000307060f0000181f38f801ff11c39ce1ff8c800011e001d163e0007ffe000307060f0000181f38f801ff11c39ce1ff8c800011e001d163e0007ffc0003c3061980001e33186001ff01999cccff8c800011e001d163e0007ffc0003c3061980001e33186001ff01999cccff8c800011e001d163e0007fff800303061f80001833186001ff2999c9c0ff8c800011e001d163e0007fff800303061f80001833186001ff2999c9c0ff8c800011e001d163e0003fff000303061800001833186c01ff3999c9cfff8c800011e001d163e0003fff000303061800001833186c01ff3999c9cfff8c800011e001d163e0001f7c0003078f0f00001f1f3c3801ff39c3e3e1ff8c800011e001d163e0001f7c0003078f0f00001f1f3c3801ff39c3e3e1ff8c800011e000f003ef200001ffcff00f8c800011e000f003ef200001ffcff00f8c800011e000f003ef200001ffcff00f8c800011e000f003ef200001ffcff00f8c800011e0007003fb2ff01fe0007003fb2ff01fe00100038f2200038f6000101a0cf20012e00100038f2000038f600010180cf00010e0010003af2020038f600010182cf02010e00100038f2000038f600010180cf00010e00160038f22002380008fd0000a0fd000101a0cf20012e00160038f20002380008fd0000a0fd00010180cf00010e0017003af202073800100000040110fd000101facf02010e00170038f200073800100000040110fd000101f8cf00010e00180038f2200d3800080a8a0a0080a0a0a2a001f8cf20012e00180038f2000d3800080a8a0a0080a0a0a2a001f8cf00010e0018003af2020d38001011100400511141111001facf02010e00180038f2000d38001011100400511141111001f8cf00010e00180038f2200d380008088a0800088082222001f8cf20012e00180038f2000d380008088a0800088082222001f8cf00010e0018003af2020d38001011010501111101111001facf02010e00180038f2000d38001011010501111101111001f8cf00010e00180038f2200d38000a8a8a0200a0a080a2a001f8cf20012e00180038f2000d38000a8a8a0200a0a080a2a001f8cf00010e0012003af2020038f80003010001facf02010e00120038f2000038f80003010001f8cf00010e00100038f2200038f6000101f8cf20012e00100038f2000038f6000101f8cf00010e0010003af2020038f6000101facf02010e00100038f2000038f6000101f8cf00010e000f0038f220003ff5ff00f8cf20012e000f0038f200003ff5ff00f8cf00010e000f003af202003ff5ff00facf02010e000f0038f200003ff5ff00f8cf00010e00160038f220033fffee7ffeff000ffcff00f8cf20012e00160038f200033fffee7ffeff000ffcff00f8cf00010e0016003af202073fffe67ffff3fe67fcff00facf02010e00160038f200073fffe67ffff3fe67fcff00f8cf00010e00180038f2200d3fffe270e660fe7f0e4e0c1ffff8cf20012e00180038f2000d3fffe270e660fe7f0e4e0c1ffff8cf00010e0018003af2020d3fffe06670f3ff0e663ccccffffacf02010e00180038f2000d3fffe06670f3ff0e663ccccffff8cf00010e00180038f2200d3fffe46079f3ffe67e7ccccffff8cf20012e00180038f2000d3fffe46079f3ffe67e7ccccffff8cf00010e0018003af2020d3fffe667f0f27e66667ccccffffacf02010e00180038f2000d3fffe667f0f27e66667ccccffff8cf00010e00180038f2200d3fffe770e678ff0f0e7e0c1e7ff8cf20012e00180038f2000d3fffe770e678ff0f0e7e0c1e7ff8cf00010e0012003af202003ff8ff03fcfebffacf02010e00120038f200003ff8ff03fcfebff8cf00010e00110038f220003ff7ff02fedff8cf20012e00110038f200003ff7ff02fedff8cf00010e0011003af202003ff7ff02feeffacf02010e00110038f200003ff7ff02feeff8cf00010e00110038f220003ff7ff02fef7f8cf20012e00110038f200003ff7ff02fef7f8cf00010e000f003af102f7ff02fefbfacf02010e000f0038f100f7ff02fefbf8cf00010e000b0038e62000fcce20012e000b0038e60000fcce00010e000b003ae60200fece02010e000b0038e60000fece00010e000b0038e62000f8ce20012e000b0038e60000d8ce00010e000b003ae602000ece02010e000b0038e600000cce00010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e000f0038f320003fd0ff00fcf320012e000f0038f300001fd0ff00fcf300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e0024003af3020319f9fffcf3ff02f801e0fe000807c00006001801e00ff0ff00e6f302010e00240038f3000319f9fffcf3ff02f801e0fe000807c00006001801e00ff0ff00e4f300010e00220038f320033801800cf200010330fe00070660000600780260ef000004f320012e00220038f300031801800cf200010330fe00070660000600780260ef000004f300010e0024003af3020319f9800cf3ff0ef80301e363e7c663c3c6601806600ff0ff00e6f302010e00240038f3000319f9800cf3ff0ef80301e363e7c663c3c6601806600ff0ff00e4f300010e00220038f320033801800cf2000c01e333866667c66666c0180660ef000004f320012e00220038f300031801800cf2000c01e333866667c66666c0180660ef000004f300010e0023003af3020319f9800cf3ff04f800330306fd660567801806600ff0ff00e6f302010e00230038f3000319f9800cf3ff04f800330306fd660567801806600ff0ff00e4f300010e00200038f320033801800cf2000303333306fc6603c0180640ef000004f320012e00200038f300031801800cf2000303333306fc6603c0180640ef000004f300010e0024003af3020319f9fffcf3ff0ef801e1e303e7c7c3c3c6607e67800ff0ff00e6f302010e00240038f3000319f9fffcf3ff0ef801e1e303e7c7c3c3c6607e67800ff0ff00e4f300010e00130038f3200038eb000006e7000004f320012e00130038f3000018eb000006e7000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f320003fd0ff00fcf320012e000f0038f300001fd0ff00fcf300010e000f003af3020018d0000006f302010e00980052007e000000fc0290007e000000fc0289007e000000fc028900010f0038f3000018d0000004f300010e00150038f320063800fcc0600018d6000004f320012e00150038f300061800fcc0600018d6000004f300010e0019003af30203180030c0fb000360000060dd000006f302010e00190038f30003180030c0fb000360000060dd000004f300010e001c0038f3200d380030f8e1e0387807c0f87878f8dd000004f320012e001c0038f3000d180030f8e1e0387807c0f87878f8dd000004f300010e001c003af3020d180030cc630018c00cc060ccc060dd000006f302010e001c0038f3000d180030cc630018c00cc060ccc060dd000004f300010e001c0038f3200d380030cc61e018780cc060fc7860dd000004f320012e001c0038f3000d180030cc61e018780cc060fc7860dd000004f300010e001c003af3020d180030cc6030180c0cc06cc00c6cdd000006f302010e001c0038f3000d180030cc6030180c0cc06cc00c6cdd000004f300010e001d0038f3200e380030ccf1e03c7807c038787838c0de000004f320012e001d0038f3000e180030ccf1e03c7807c038787838c0de000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e0098005200fc0000017a029000fc0000017a028900fc0000017a028900010f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af3020018d0000006f302010e000f0038f3000018d0000004f300010e000f0038f3200038d0000004f320012e000f0038f3000018d0000004f300010e000f003af302001fd0ff00fef302010e000f0038f300001fd0ff00fcf300010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00980052017a0000019a0290017a0000019a0289017a0000019a02890001070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003ab202010e00070038b200010e00070038b220012e00070038b200010e0007003fb2ff01fe0007003fb2ff01fe0007003fb2ff01fe0002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 12-1:  The Scrapbook Program\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are three internal design issues you will have to deal with before you can write this program.  The first is the matter of how to store the scraps in the scrap file.  The solution disk has a scrap file for you to use, so you should use the same file format the solution uses.  The file consists of a series of scraps.  Each scrap starts with a count word; this simply tells you how many scrap types exist for a particular scrap.  If there are no more scraps, the count word is zero.  The count word is followed by the scrap records, one for each scrap type.  Each scrap record consists of three fields.  The first is a two-byte scrap type.  The next field is a four-byte scrap length.  The last field is variable length; it's the scrap contents.  It's worth pointing out that we really don't care what the scrap contents are; all we need to know is the length.  To skip to the next scrap, then, you would add the scrap length plus six to the location of the first scrap.  The type for the file is $06, a general binary file, so you can use standard Pascal file I/O.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetIndScrap}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The next issue that you need to deal with is how to figure out what the scrap types are, so you can paste all of them in the scrapbook.  After all, it would be a shame to miss the preferred scrap type for a program, but it just wouldn't make much sense to find the scrap length for each and every possible scrap type.  The }{\f6\fs20 GetIndScrap}{\f4  call is used by scrapbooks to find and read all of the scrap types for a scrap.  It looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 scrapBuffer = record\par    scrapType: integer;\par    scrapSize: longint;\par    scrapHandle: handle;\par    end;\par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetIndScrap}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 GetIndScrap(index: integer; var buffer: scrapBuffer);\par }{\f4 \par To get all of the scraps, start calling }{\f6\fs20 GetIndScrap}{\f4  with an index of 1.  It will fill in the scrap buffer you pass with the scrap type, scrap size, and scrap handle for the first scrap.  Repeat this with an index of 2, and so forth, until }{\f6\fs20 GetIndScrap}{\f4  returns an error.  At that point, you've read all of the scrap types.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawPicture}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last design issue is how to display the scrap.  You already know how to draw text strings, so displaying a text scrap is no problem.  What about picture scraps, though?  The answer is, fortunately, very simple.  QuickDraw II Auxiliary has a call called }{\f6\fs20 DrawPicture}{\f4 .  To draw a picture scrap, you just pass the handle to }{\f6\fs20 DrawPicture}{\f4 , along with the destination rectangle.\par \par }{\f6\fs20 procedure DrawPicture (picHandle: handle; var destRect: rect);\par }{\f4 \par There is still one overriding problem with this program, and that is that using it is pretty awkward.  To put a scrap in the scrapbook, you have to cut or copy it from a program, quit, run the scrapbook, and paste it into the scrapbook.  To paste a scrap from the scrapbook into a document, you have to quit the original program, run the scrapbook, copy the scrap, rerun the program, and paste the scrap.  To be technical, ick.\par The solution is to turn the scrapbook into a desk accessory, so it can be used by almost any desktop program without leaving the program.  While there won't actually be a problem assigned to convert this program into an NDA, you'll eventually learn all of the things you need to know to make the conversion.\par \par Problem 12-2:  Write the scrapbook program.  To be useful, this program would eventually be turned into a desk accessory, so it can't depend on any custom menu items, and must have a single window.  That makes the detailed requirements look a little strange for an application!\par Your program should have a single, fixed size window that stays open all of the time.  The window should be moveable, though.  The program should support cut, copy, paste, clear and close, all of which are standard menus.  (Close should do what Quit normally does; for now, you can hook the two menu items together, so both quit.)  The program should look for a scrap file when it starts, loading it if there is one, and automatically write the scrap file before quitting.  Use the name "ScrapBook" for the file; you'll find one in the Lesson 12 folder on your disks.  The single new menu, Move, should have two items, Next Scrap and Last Scrap.\par Internally, I'd suggest setting up the scraps as a doubly linked list of records, one record for each scrap.  That makes it easier to insert and delete scraps.  Inside each record, you'll need another linked list; this one lists the various scrap styles for a particular scrap.  The scraps themselves should be in moveable handles.\par I'd suggest starting with the solution to Problem 9-1, which also uses a single window.\par Test your program by moving a scrap from your text editor to the scrapbook, then by moving a different scrap back to a text editor document.  You might try some of your other desktop applications, too.  Some of them will support the Scrap Manager, while some will not.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson covered the Scrap Manager, and how it is used to create programs that can cut, copy and paste information.  It showed how programs share information, too.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 DrawPicture\tab GetIndScrap\tab GetScrapHandle\tab GetScrapSize\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 LoadScrap\tab PutScrap\tab UnloadScrap\tab ZeroScrap\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk65}{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scraps}{\rxe bk65}}}{\v\f4 \par }{\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 13 - Controls, Part 1}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 {\*\bkmkstart bk80}{\*\bkmkstart bk81}\par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 13 \endash  Controls, Part 1}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 13 \endash  Controls, Part 1\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In this lesson, you will learn to create windows with your own controls.  We'll cover a few basic controls, concentrating on how the program interacts with the Control Manager and Window Manager to create and use controls.  More advanced controls will be covered in Lesson 14.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 A Quick History Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 A Quick History Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Before getting started, I'd like to caution you a little bit about the Control Manager and how it has grown over the years.  I hope you are reading }{\i\f4 Apple IIGS Toolbox Reference }{\f4 as you go through the course.  If so, it would be pretty natural to flip open volume 1 and read the introductory section of the chapter on the Control Manager.  If you do that, you're going to find something that doesn't look much like what this lesson covers.\par The Control Manager has changed a lot over the years.  One of the major changes is the use of resources, with a clean, unified mechanism for defining controls, coupled with a mechanism for attaching them to a particular window from inside the resource fork.  None of this was possible when the original two volumes of the toolbox reference manual were released.  Back then, all controls were created by setting up a record and making a Control Manager call.  In the next two lessons, we'll use the newer, resource based method exclusively.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Control Records and Control Lists}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Control Records and Control Lists\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Actually, you've already created a control, and it's the most complicated control of all.  The text editor you wrote in Lesson 11 used a text edit control.  The resource you filled in to create the text edit record is actually a special case of a much more complicated resource.  The complete }{\f6\fs20 rControlTemplate}{\f4  resource, which includes the text edit control as a subset, is shown in Listing 13-1.  This is the raw definition from the Types.rez header file used by the Resource Manager.  Seen all in one chunk, it can be very intimidating, but we'll break it down in byte size pieces over the next two lessons.  I'm showing you the resource here so you have something to refer back to.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 type rControlTemplate \{\par         integer = 3+$$optionalcount (Fields);/* pCount must be at least 6 */\par         _mybase_ longint;                   /* Application defined ID */\par         rect;                              /* controls bounding rectangle */\par         switch \{\par \par         case SimpleButtonControl:\par             key longint = 0x80000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* Title Ref */\par                 _mybase_ longint;           /* color table ref */\par                 KeyEquiv;\par             \};\par \par         case CheckControl:\par             key longint = 0x82000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* Title Ref */\par                 integer;                    /* initial value */\par                 _mybase_ longint;           /* color table ref */\par                 KeyEquiv;\par             \};\par \par         case RadioControl:\par                 key longint = 0x84000000;   /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* Title Ref */\par                 integer;                    /* initial value */\par                 _mybase_ longint;           /* color table ref */\par                 KeyEquiv;\par             \};\par         case scrollControl:\par             key longint = 0x86000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 integer;                    /* Max Size */\par                 integer;                    /* viewSize */\par                 integer;                    /* initial value */\par                 _mybase_ longint;           /* color table ref */\par             \};\par \par         case statTextControl:\par             key longint = 0x81000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* Text Ref */\par                 integer;                    /* text size */\par                 integer leftJust,\par                         centerJust,\par                         fullJust,\par                         rightJust = -1;     /* text justification */\par             \};\par \par         case editLineControl:\par             key longint = 0x83000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 integer;                    /* Max Size */\par                 _mybase_ longint;           /* resource ID of the text */\par                 integer;                    /* password character - 6.0 */\par             \};\par \par         case PopUpControl:\par             key longint = 0x87000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 integer;                    /* Title Width */\par                 _mybase_ longint;           /* menu Ref */\par                 integer;                    /* Initial Value */\par                 _mybase_ longint;           /* Color table ref */\par             \};\par \par         case ListControl:\par             key longint = 0x89000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 integer;                    /* list size */\par                 integer;                    /* List View */\par                 _mybase_ integer;           /* List Type */\par                 integer;                    /* List Start */\par                 longint =0 ;                /* member drawing routine */\par                 integer;                    /* ListMemHeight */\par                 integer;                    /* List Mem Size */\par                 _mybase_ longint;           /* List Ref */\par                 _mybase_ longint;           /* Color Ref */\par             \};\par \par         case growControl:\par             key longint = 0x88000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* color table ref */\par             \};\par \par         case PictureControl:\par             key longint = 0x8D000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* picture ref */\par             \};\par \par         case editTextControl:\par             key longint = 0x85000000;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* text flags */\par                 rect;                       /* indent rect */\par                 _mybase_ longint;           /* vert bar */\par                 integer;                    /* vert Amount */\par                 _mybase_ longint;           /* hor bar */\par                 integer;                    /* hor amount */\par                 _mybase_ longint;           /* style ref */\par                 _mybase_ integer;           /* text descriptor */\par                 _mybase_ longint;           /* text ref */\par                 longint;                    /* text length */\par                 longint;                    /* max chars */\par                 longint;                    /* max lines */\par                 integer;                    /* Max chars per line */\par                 integer;                    /* max height */\par                 _mybase_ longint;           /* color ref */\par                 _mybase_ integer;           /* drawing mode */\par                 _mybase_ LongInt;           /* Filter Proc Ptr */\par             \};\par \par         case IconButtonControl:\par             key longint = 0x07FF0001;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 _mybase_ longint;           /* Icon Ref */\par                 _mybase_ longint;           /* Title Ref */\par                 _mybase_ longint;           /* color table ref */\par                 _mybase_ integer;           /* Display mode */\par                 KeyEquiv;\par             \};\par \par         case rectangleControl:\par             key longint = 0x87FF0003;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 integer;                    /* pen height */\par                 integer;                    /* pen width */\par                 hex string[8];              /* penmask */\par                 hex string[32];             /* penpattern */\par             \};\par \par         case thermometerControl:\par             key longint = 0x87FF0002;       /* procRef */\par             optional Fields \{\par                 _mybase_ integer;           /* flags */\par                 _mybase_ integer;           /* more flags */\par                 _mybase_ longint;           /* refcon */\par                 integer;                    /* value for pos of mercury */\par                 integer;                    /* scale for mercury */\par                 _mybase_ longint;           /* color table reference */\par             \};\par \par         \};\par \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 Listing 13-1:  The Complete }{\f6\fs20 rControlTemplate}{\f4  Resource\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par When you created the text edit control for the text editor, you told the Window Manager to look for a single }{\f6\fs20 rControlTemplate}{\f4  resource.  It's pretty rare to have a window with just one control, so in most cases, we want to tell the Window Manager to look for a list of controls.  We do that by coding 9 as the last byte of the last parameter in the }{\f6\fs20 rWindParam1}{\f4  resource; that's the field with the comment of }{\f6\fs20 /* wInVerb */}{\f4 .  In the text editor, this field is $0802; now it will be $0809.  This tells the Window Manager that the resource ID in the previous field (labeled }{\f6\fs20 wStorage}{\f4 ) is the resource ID for an }{\f6\fs20 rControlList}{\f4  resource, rather than an }{\f6\fs20 rControlTemplate}{\f4  resource.  (The $x8xx part is used for the window color table.)  The }{\f6\fs20 rControlList}{\f4  resource is a list of resource IDs for }{\f6\fs20 rControlTemplate}{\f4  resources.  Listing 13-2 shows a typical }{\f6\fs20 rControlList}{\f4  resource.  This one lists three controls, with resource IDs of 1001, 1002, and 1003.  If you need more controls, just tack a few more resource IDs on the end of the list.\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 rControlList resource}}}{\v\f6\fs20 \par }{\f6\fs20 resource rControlList (1001) \{\par    \{\par       1001,\par       1002,\par       1003\par       \}\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 13-2:  A Typical }{\f6\fs20 rControlList}{\f4  Resource\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Simple Buttons}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Simple Buttons\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 {\*\bkmkstart bk66}{\*\bkmkstart bk67}The first control we'll look at is the simple button.  Simple button controls are the (usually) oval shaped buttons with text in the middle, like the ubiquitous OK button shown in Figure 13-1.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1068{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw72\pich38\picwgoal1440\pichgoal760\macpict\bliptag1595450123\blipupi72{\*\blipuid 5f18a30b1d8d10915da3dbec154c3ff0}01bd00000000002600481101a00082a0008e01000a0000000002d0024098000a000000000026004800000000002600480000000000260048000102f70002f70009010007fcff00e0ff0009010007fcff00e0ff00090100f8fc00001fff00090100f8fc00001fff000901078ffcff02f1e0000901078ffcff02f1e00009010e78fc00021e700009010e78fc00021e700009011dc0fc000203b80009011dc0fc000203b8000b093b8000078c600001dc000b093b8000078c600001dc000b093b80000cccc00001dc000b093b80000cccc00001dc000b093b80000ccd800001dc000b093b80000ccd800001dc000b093b80000ccf000001dc000b093b80000ccf000001dc000b093b80000ccd800001dc000b093b80000ccd800001dc000b093b80000cccc00001dc000b093b80000cccc00001dc000b093b8000078c600001dc000b093b8000078c600001dc0009011dc0fc000203b80009011dc0fc000203b80009010e78fc00021e700009010e78fc00021e70000901078ffcff02f1e0000901078ffcff02f1e000090100f8fc00001fff00090100f8fc00001fff0009010007fcff00e0ff0009010007fcff00e0ff0002f70002f700a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-1:  A Typical Simple Button Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can click on a simple button, but that's about it.  When you click on the simple button, the program does something right away.  The OK button, for example, is usually the button you press to accept some choices you've made in a complicated dialog, or to acknowledge that you have read the message in an alert.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Defining the Control}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Defining the Control\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Listing 13-3 shows the }{\f6\fs20 rControlTemplate}{\f4  resource for an OK button.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    1,                                 /* control ID */\par    \{100,10,0,0\},                      /* control rect */\par    SimpleButtonControl \{\{\par       $0001,                          /* flags */\par       $3002,                          /* more flags */\par       0,                              /* refcon */\par       1001,                           /* Title Ref */\par       0,                              /* color table ref */\par       \{"\\$0D","\\$0D",0,0\}             /* key equivalents */\par       \}\};\par    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (1001) \{"OK"\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 Listing 13-3:  Resources for an OK Button\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The first two lines are common to all controls.  The first of these is the control ID, which works sort of like a menu ID.  Each control in the window has a unique ID number, and it's that ID number that we usually use to identify a control.  In some cases, the control handle is used, instead.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 default control}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 controls\:default}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 control ID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 A control ID of 1 has a special meaning in dialogs.  The control with an ID of 1 is the default control.  The default control is frequently a simple button, and when it is a simple button, it's the one with a double outline.  The default control should be hooked to the return key, so that the window or dialog acts like the default control was picked if the return key is pressed.  If there is no default control, there shouldn't be a control with a control ID of 1, either.\par The default control should represent the "normal" action for the control, which should also be the safe action.  For example, if you are about to reformat a hard disk, and you're asking the user if you should go ahead, the default action should be to not format the disk.  Make the user pick the dangerous action by hand!  The default button isn't always the OK button.\par The next line is a rectangle that tells the Control Manager where to put the control.  The first two coordinates are the top and left coordinates for the control, respectively, while the last two are the bottom and right edges for the control.  Of course, there is the minor issue that you may not know how big the button should be, especially if the user picks out an alternate system font or changes the button message to another language.  For most controls, the Control Manager can figure out the correct bottom and right coordinates for you.  To ask the Control Manager to pick out the size, set the last two coordinates for the rectangle to 0, as we did in the example.\par The next line is the one that finally determines just what sort of control we are creating, in this case a }{\f6\fs20 SimpleButtonControl}{\f4 .\par The next four entries can change from control to control, but they don't change very often.  All of the controls defined as of System 6.0 have two integer flag words and a long integer field you can use for your own purposes, and most controls also have the fourth parameter, a title reference.  There's a lot of variation in how the two flag words are used, though, so we'll give a little table with each control that lists the meaning of each of the flag bits.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\widctlpar\adjustright {\f4 7\tab 0 for a visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 6-2\tab Reserved; set to 0.\par 1-0\tab Determines the style for the button.  There are four button styles:\par }\pard \fi-360\li2880\widctlpar\adjustright {\f4 00\tab An oval button with a single line outlining the button.\par 01\tab An oval button with a double outline.  The double outline should only be used for the default button.\par 10\tab A square button with a single line outlining the button.\par 11\tab A square button with a drop shadow.  This is the default button form for the square button.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }{\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-14\tab Reserved; set to 0.\par 13\tab Set this bit to 1 if the button has a keystroke equivalent.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-4\tab Reserved; set to 0.\par 3-2\tab Defines the type of reference in the color table field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 1-0\tab Defines the type of reference in the title field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Title reference is a pointer.\par 01\tab Title reference is a handle.\par 10\tab Title reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The next field is the }{\f6\fs20 refcon}{\f4  field.  It's a long integer value you can use for your own purposes.\par The title reference field is the resource ID for an }{\f6\fs20 rPString}{\f4  resource.  This is the string that will appear in the button.\par The next field is the color table reference.  It can be pretty distracting to have chartreuse buttons on a mustard background, but with a little effort, you can create truly annoying colored buttons.  We'll cover that topic in detail later, but for now, use a pointer of 0 \endash  which tells the Control Manager to pick a boring black on white for the button color.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 key equivalents}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last field is used to define keyboard equivalents for the button.  It this example, we've set up a key equivalent of }{\f6\fs20 "\\$0D"}{\f4 , coding the numeric equivalent of the return key (13, or $0D) as an escape sequence.  The first two entries in the key equivalent record are the uppercase and lowercase version of the key.  Since the return key works the same way, whether or not the shift key is pressed, we've set both values to 13.  You should use characters if they are printable.  For example,\par \par }{\f6\fs20 \{"C","c",0,0\}\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 would work just fine.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last two items are the key modifiers and a flags word called the key care bits.  These two words let you do fancy tricks, like only allowing the return key, and not allowing the enter key.  I'm not going to go over them in detail here.  If you want to treat the keys some special way, check out the detailed description in the toolbox reference manual.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using the Control}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Using the Control\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMaster}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the things }{\f6\fs20 TaskMaster}{\f4  checks for as it preprocesses an event is whether or not a keypress or mouse down event involves a control.  If it does, }{\f6\fs20 TaskMaster}{\f4  does all of the work to track the mouse and highlight the control, then returns }{\f6\fs20 wInControl}{\f4 .  Some fields in the event record tell us what actually happened:\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 taskData2}{\f4 \tab The handle for the control will be in this field.  The control handle is used by several Control Manager calls, some of which we'll look at later.\par }{\f6\fs20 taskData3}{\f4 \tab The part code for the control is in }{\f6\fs20 taskData3}{\f4 .  The part code tells us what part of the control was hit by a mouse down event.  For most controls, including simple buttons, there is only one part, so this value isn't very useful.  We'll use the value later, though, for scroll bars.\par }{\f6\fs20 taskData4}{\f4 \tab The control ID is placed here.  This is the value we really need; it tells us which control was hit.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 13-1:  Create a program that opens a single alert style window.  Use 320 mode graphics, since we'll add some colored objects to this program later in the lesson, and we want to be able to use lots of colors.  Get rid of everything in the File menu except Quit and Close.  (Close is required to support desk accessories, but your program should ignore it.)\par Create two simple buttons in the window.  The first should be called "Beep Once."  It is the default button, and should have a double outline and use the return key as a key equivalent.  The other button should be called "Beep Twice."  It should have a normal outline, and a key equivalent of 2.\par Your program should detect hits on the buttons, calling }{\f6\fs20 SysBeep}{\f4  once when the first button is pressed, and twice when the second button is pressed.\par We're going to use this same program as a test bed over the next two lessons, creating a control sampler.  Because of that, you need lots of room, so make the window as big as you can.  The controls should be layed out more or less like you see in Figure 13-2.\par Hint: Don't forget to call }{\f6\fs20 DrawControls}{\f4  in your window update procedure, just like you did for the text editor.  The controls aren't drawn unless you do.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1069{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag719555818\blipupi72{\*\blipuid 2ae38ceae55d4bb590402d7c598369ae}12aa00000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00b003cbd000030f7000103c00b003cbd000030f7000103c00b003cbd00003cf7000103c00b003cbd00003cf7000103c00b003cbd00003ff7000103c00b003cbd00003ff7000103c00c003cbd00013fc0f8000103c00c003cbd00013fc0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffff8000103c00c003cbd00013ffff8000103c00c003cbd00013cf0f8000103c00c003cbd00013cf0f8000103c00b003cbc00003cf8000103c00b003cbc00003cf8000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c02e033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000103c0ec000103c02e033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000103c0ec000103c02a033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000103c0ec000103c02a033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000103c0ec000103c040033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000103c0ec000103c040033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000103c0ec000103c034033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec304c0000003c0ec000103c034033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec304c0000003c0ec000103c03e033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef00e000f03cf3c0f03c003ffc0000003c0ec000103c03e033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef00e000f03cf3c0f03c003ffc0000003c0ec000103c038033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000103c0ec000103c038033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000103c0ec000103c040033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000103c0ec000103c040033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000103c0ec000103c01f033c00003cf800003cf400003cfd0000f0f80000f0f3000103c0ec000103c01f033c00003cf800003cf400003cfd0000f0f80000f0f3000103c0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-2:  Control Sampler Window\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk66}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 button control}{\rxe bk66}}}{\*\bkmkend bk67}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 simple button control}{\rxe bk67}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Colored Controls}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Colored Controls\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 controls\:colors}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 colored controls}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It's possible to create a control that isn't made up of black text and lines on a white background by adding a color resource.  Listing 13-4 shows the OK button with a typical color resource that draws all of the parts that are normally black in blue \endash  at least, it's blue on a 320 mode screen with the standard color palette.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    1,                                 /* control ID */\par    \{100,10,0,0\},                      /* control rect */\par    SimpleButtonControl \{\{\par       $0000,                          /* flags */\par       $300A,                          /* more flags */\par       0,                              /* refcon */\par       1001,                           /* Title Ref */\par       1001,                           /* color table ref */\par       \{13,13,0,0\}                     /* key equivalents */\par       \}\};\par    \};\par \par resource rPString (1001) \{"OK"\};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 data rCtlColorTbl (1001) \{\par    $"3000 F000 3000 F300 3F00"\par    \}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 Listing 13-4:  A Blue OK Button\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are two steps needed to add the color resource to the }{\f6\fs20 rControlTemplate}{\f4 .  The first step is to set bits 3-2 for the }{\f6\fs20 moreFlags}{\f4  parameter to 10, telling the Control Manager that the color table reference field is a resource ID for a color table.  The second step, of course, is to put the resource number for the color table in the color table reference field.  Following our long standing convention, we've used the same resource number of 1001 for the color table reference that we've used for all of the other resources associated with this control.\par The resource for the color table itself looks a little odd.  That's because there isn't a resource defined in Apple's header files for a color table, so we have to put in the fields as raw data.  Unfortunately, that wasn't just an oversight on their part.  There's a very good reason for not putting in a color table resource type: the color table format varies from control to control.\par Other than the bizarre format, though, there's nothing special about using raw data instead of a resource defined via a type.  The resource as you see it defines five integers, each entered as a hexadecimal value.  The bytes appear in the string in the same order they appear in memory, so the least significant byte comes first.  In normal hexadecimal format, the five numbers you see are $0030, $00F0, $0030, $00F3 and $003F.\par All five integers are bit maps, divided up into various fields to control the color of the button.  It's possible, for example, to create a simple button with a blue outline and red letters.  Here's a detailed breakdown of the color table for a simple button, in the same order you see them in Listing 13-4.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Button Outline\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The first word contains the button outline color, which controls the color of the oval or box around the outside of the button.  This includes the double outline of a default button and the drop shadow that appears under a square button.  The color itself is in bits 7-4.  They are generally set to $0, which gives a black outline.  All other bits are unused, and should be set to 0.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Unhighlighted Button Interior\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This word controls the color of the interior of the button when it's just sitting there on the screen.  The button looks different when you are pressing it with the mouse.\par Bits 7-4 control the background color.  They are generally set to $F, which gives a white background.  All of the other bits are unused, and should be set to 0.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Highlighted Button Interior\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This word controls the color of the interior of the button when you are pressing on the button with the mouse.  The toolbox reference manuals call this the highlighted state or the selected state.  Once again, only bits 7-4 are used.  These bits are normally set to $0 for black; in the example, you see them set to $3, for blue.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Unhighlighted Button Text\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The fourth word controls the color of the text when the button is not selected.  The most significant 8 bits are unused, and should be set to 0.  The next four bits, bits 7-4, control the background color for the text.  These bits should almost always match the background color for the button itself, so they are usually set to $F.  Bits 3-0 control the foreground color for the text.  For the standard black text, the value would be $0.  For our blue button, these bits are $3.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Highlighted Button Text\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last word controls the highlighted color for the text.  The bits are used the same way as for unhighlighted text, but since the button normally inverts when you highlight it, the "black" part becomes "white", and the "white" part becomes "black."\par \par I've included this section mostly for your information.  If I were ever inclined towards bad puns, I might mention that it's here for local color.  This section tells you enough about control colors and how they are used for you to be able to find and read the color table definitions for the various controls in the toolbox reference manual, but I won't spend a lot of time going over all of the color tables for each and every control.\par There are three reasons for skipping over the color table information.  The first I've mentioned: once you know basically how to use them, it's pretty simple to get the information you need to color a particular control from the toolbox reference manuals.  The second is that I have a fair amount of respect for the number of trees the paper would consume, not to mention the boredom factor for making you skip over all of those detailed bit maps of color tables you may never use.  The most important, though, is that color tables are rarely used in most applications.  Black buttons on a white background are the default for a reason: they are easy to see on any screen, color or black and white.  They can be seen by people who are color blind.  Black and white are rarely changed in the color palette, so they are rarely messed up by changing the color palette.  Even on a color screen with a normally sighted person, getting carried away with colors can lead to a very distracting program.  In fact, about the only group of programmers who regularly use colored buttons are game programmers, and they have such particular requirements for things like shadowed toggle switches or 3-D buttons that they often create custom controls instead of using simple color tables, anyway.\par That's not to say colors are not useful.  The odd program here or there that uses blue or green buttons can be enough of a subtle change to make the program interesting without being garish.  You might want to use colored buttons in a simple children's game, too.  Colors are like the C programming language: they aren't bad in and of themselves, but they are sometimes used too often or for the wrong reason.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Static Text}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Static Text\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par {\*\bkmkstart bk68}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rTextForLETextBox2 resource}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The next control we'll look at is the static text control.  Static text controls just write some text on the screen.  It's possible to have the program do something when the user clicks on a static text control, but most of the time, static text controls are just used for labels in a complicated window or dialog.  A typical resource definition for a static text control is shown in Listing 13-5.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{10,10,21,200\},                    /* control rect */\par    statTextControl \{\{\par       $0000,                          /* flags */\par       $1002,                          /* more flags */\par       0,                              /* refcon */\par       1001                            /* Title Ref */\par       \}\};\par    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rTextForLETextBox2 (1001) \{"Control Test Platform"\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 13-5:  A Typical Static Text Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Here's how the bits are used in the two flag words:\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\keepn\widctlpar\adjustright {\f4 7\tab 0 for a visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 6-2\tab Reserved; set to 0.\par 1\tab Set this bit for text substitution, or clear it if text substitution is not used.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 0\tab Set this bit if the text is a Pascal string, and clear it for a C string.  This bit isn't used if the text is in a resource.\par \par }{\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-2\tab Reserved; set to 0.\par 1-0\tab Defines the type of reference in the title field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Title reference is a pointer.\par 01\tab Title reference is a handle.\par 10\tab Title reference is a resource ID for an }{\f6\fs20 rTextForLETextBox2}{\f4  resource.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rTextForLETextBox2 resource}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In a static text control, the title field is actually the text.  The text is in a new type of resource, }{\f6\fs20 rTextForLETextBox2}{\f4  .  This resource works just like an }{\f6\fs20 rPString}{\f4  resource, but it creates a simple block of text, which can be longer than 255 characters.  The Control Manager figures out how many characters to draw by looking at the size of the resource.\par Setting bit 1 of the flag word tells the Control Manager to perform text substitution.  This lets you substitute text in a static text string, more or less like you did in an alert window.  It's a useful capability, but I'm not going to go over it in detail here.  I want you to be aware that text substitution is possible, but I'll leave it up to you to dig the details out of the toolbox reference manual if you need to.\par The only really tricky part of defining a static text control is picking the size of the control rectangle.  Unfortunately, you can't let the Control Manager do it for you, like we did with simple buttons.  The only foolproof way to do it is to set up the text in a sample program and make the proper QuickDraw II calls to see how big the text actually is.  Even then, you have to make some assumptions.  The basic assumption is that the system font is being used.  In practice, you can allow 11 pixels for each line, then experiment with the width of the control rectangle to make sure it is wide enough that none of the text is chopped off.  For a start, try 10 pixels per character for the width.  This is also a great time to put a program like Design Master to work, since you can just draw and let Design Master tell you how big the rectangle should be.\par There are also two optional fields for the control record.  The first is the length of the text; it's used when you use a pointer to the text.  Since we're using resources, it isn't an issue.  The other is a text justification flag.  Using it, you can have the Control Manager left justify (0, }{\f6\fs20 leftJust}{\f4 ), fill justify (2, }{\f6\fs20 fullJust}{\f4 ), right justify (-1, }{\f6\fs20 rightJust}{\f4 ) or center the text (1, }{\f6\fs20 centerJust}{\f4 ) in the control rectangle.  Here's what the static text resource would look like for centered text:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{10,10,21,200\},                    /* control rect */\par    statTextControl \{\{\par       $0000,                          /* flags */\par       $1002,                          /* more flags */\par       0,                              /* refcon */\par       1001,                           /* Title Ref */\par       0,                              /* text length; not used */\par       centerJust                      /* center the text */\par       \}\};\par    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 13-2:  Start with the solution to Problem 13-1, and add a title to the window using a static text control.  The title should say "Control Test Platform," just like the sample resource definition.\par Make sure you can detect hits on the control by calling }{\f6\fs20 SysBeep}{\f4  3 times when the control is selected, but take the calls to }{\f6\fs20 SysBeep}{\f4  out afterwards.  It's generally not a good idea to have the program do something when the user clicks on static text.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1070{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag-1001365508\blipupi72{\*\blipuid c4505ffce5d57a64034620b69076f1b0}14b400000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00b003cbd000030f7000103c00b003cbd000030f7000103c00b003cbd00003cf7000103c00b003cbd00003cf7000103c00b003cbd00003ff7000103c00b003cbd00003ff7000103c00c003cbd00013fc0f8000103c00c003cbd00013fc0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffff8000103c00c003cbd00013ffff8000103c00c003cbd00013cf0f8000103c00c003cbd00013cf0f8000103c00b003cbc00003cf8000103c00b003cbc00003cf8000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c02e033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000103c0ec000103c02e033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000103c0ec000103c02a033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000103c0ec000103c02a033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000103c0ec000103c040033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000103c0ec000103c040033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000103c0ec000103c034033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec304c0000003c0ec000103c034033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec304c0000003c0ec000103c03e033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef00e000f03cf3c0f03c003ffc0000003c0ec000103c03e033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef00e000f03cf3c0f03c003ffc0000003c0ec000103c038033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000103c0ec000103c038033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000103c0ec000103c040033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000103c0ec000103c040033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000103c0ec000103c01f033c00003cf800003cf400003cfd0000f0f80000f0f3000103c0ec000103c01f033c00003cf800003cf400003cfd0000f0f80000f0f3000103c0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-3:  Control Sampler with Static Text Title\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par {\*\bkmkend bk68}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 static text control}{\rxe bk68}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Radio Buttons}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Radio Buttons\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 {\*\bkmkstart bk69}Radio buttons are used when you want to present a choice, and the user is supposed to pick exactly one of the alternatives.  For example, PRIZM's link dialog let's you pick one of four executable file types: EXE, S16, NDA or CDA.  Figure 13-4 shows the link dialog that contains the radio buttons that let you pick the file format.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1071{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw518\pich284\picwgoal10360\pichgoal5680\macpict\bliptag-990732306\blipupi72{\*\blipuid c4f29fee640537d951f46bfeef57cbb2}1cca00000000011c02061101a00082a0008e01000a0000000002d0024098004200000000009e020800000000009e020600000000009e0206000102bf0002bf0007003fc2ff01f00007003fc2ff01f000070030c200013000070030c200013000070030c200013000070030c2000130000901307fc4ff02f830000901307fc4ff02f830000901307fc4ff02f830000901307fc4ff02f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000f01307cf3000001d5ff04fc00f830000f01307cf3000001d5ff04fc00f830001001307cf300010180d600040c00f830001001307cf300010180d600040c00f830001a05307c003c600cfe00020f8c38fd00010180d600040c00f830001a05307c003c600cfe00020f8c38fd00010180d600040c00f830001a04307c006660fe0003600c0018fd00010180d600040c00f830001a04307c006660fe0003600c0018fd00010180d600040c00f830001b11307c00667c1c7878f80c1c183c6000000180d600040c00f830001b11307c00667c1c7878f80c1c183c6000000180d600040c00f830001b0c307c0066660ccccc600f0c1866fe00010180d600040c00f830001b0c307c0066660ccccc600f0c1866fe00010180d600040c00f830001b0c307c0066660cfcc0600c0c187efe00010180d600040c00f830001b0c307c0066660cfcc0600c0c187efe00010180d600040c00f830001b0c307c0066660cc0cc6c0c0c1860fe00010180d600040c00f830001b0c307c0066660cc0cc6c0c0c1860fe00010180d600040c00f830001b11307c003c7c6c7878380c1e3c3c6000000180d600040c00f830001b11307c003c7c6c7878380c1e3c3c6000000180d600040c00f830001401307cfe000038f700010180d600040c00f830001401307cfe000038f700010180d600040c00f830001001307cf300010180d600040c00f830001001307cf300010180d600040c00f830000f01307cf3000001d5ff04fc00f830000f01307cf3000001d5ff04fc00f830000901307cc40002f830000901307cc40002f830000f01307cf3000001d5ff04fc00f830000f01307cf3000001d5ff04fc00f830001001307cf300010180d600040c00f830001001307cf300010180d600040c00f830001703307c0063fe00010230fa00010180d600040c00f830001703307c0063fe00010230fa00010180d600040c00f830001703307c0066fe00010330fa00010180d600040c00f830001703307c0066fe00010330fa00010180d600040c00f830001b0c307c006c1e1e3e03b1f7f0f180fe00010180d600040c00f830001b0c307c006c1e1e3e03b1f7f0f180fe00010180d600040c00f830001a03307c0078fe330403f336d998fd00010180d600040c00f830001a03307c0078fe330403f336d998fd00010180d600040c00f830001a0b307c006c3f3f33037336d9f8fd00010180d600040c00f830001a0b307c006c3f3f33037336d9f8fd00010180d600040c00f830001a0b307c0066303033033336d980fd00010180d600040c00f830001a0b307c0066303033033336d980fd00010180d600040c00f830001b0c307c00631e1e3e0311f6d8f180fe00010180d600040c00f830001b0c307c00631e1e3e0311f6d8f180fe00010180d600040c00f830001401307cfd000030f800010180d600040c00f830001401307cfd000030f800010180d600040c00f830001001307cf300010180d600040c00f830001001307cf300010180d600040c00f830000f01307cf3000001d5ff04fc00f830000f01307cf3000001d5ff04fc00f830000901307cc40002f830000901307cc40002f830000f01307cf3000001d5ff04fc00f830000f01307cf3000001d5ff04fc00f830001001307cf300010180d600040c00f830001001307cf300010180d600040c00f830002e05307c00603180fd001b7c000038c000018033003031e3e1e1e01e03301e3e3e1e3e1e3e3c06ea00040c00f830002e05307c00603180fd001b7c000038c000018033003031e3e1e1e01e03301e3e3e1e3e1e3e3c06ea00040c00f830002d05307c00600180fd000b660000600000018063003063fe3304303306300cfd33030c30660cea00040c00f830002d05307c00600180fd000b660000600000018063003063fe3304303306300cfd33030c30660cea00040c00f830002e1d307c006071f1b1f36660666c78f9c6660180c3e1f0c333330330030c300cfd33030c306018ea00040c00f830002e1d307c006071f1b1f36660666c78f9c6660180c3e1f0c333330330030c300cfd33030c306018ea00040c00f830002f25307c00603199c33386607c70cc60c3c001818333318333e303300618300c3e3e333e0c3c3c30ea00040c00f830002f25307c00603199c33386607c70cc60c3c001818333318333e303300618300c3e3e333e0c3c3c30ea00040c00f830002f25307c00603199833306e06060fc60c180018303333303336303f00c30300c33363f360c300660ea00040c00f830002f25307c00603199833306e06060fc60c180018303333303336303f00c30300c33363f360c300660ea00040c00f830002e08307c00603199833303fe6009c060c3c0018603333603fe3304301860300cfd33030c3066c0ea00040c00f830002e08307c00603199833303fe6009c060c3c0018603333603fe3304301860300cfd33030c3066c0ea00040c00f830002f08307c007e79f181f304fe60127861e66601840331f401e331e3333f403f1e3efe33031e3e3c80ea00040c00f830002f08307c007e79f181f304fe60127861e66601840331f401e331e3333f403f1e3efe33031e3e3c80ea00040c00f830001501307cfb000103c0fb00010180d600040c00f830001501307cfb000103c0fb00010180d600040c00f830001001307cf300010180d600040c00f830001001307cf300010180d600040c00f830000f01307cf3000001d5ff04fc00f830000f01307cf3000001d5ff04fc00f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000d05307c00fffffec80002f830000d05307c00fffffec80002f830001707307c00c000060780f5000401c1800006db0002f830001707307c00c000060780f5000401c1800006db0002f83000180a307c00c000060cc000000cf70002c00006da0002f83000180a307c00c000060cc000000cf70002c00006da0002f83000221a307c00c000060c0d8f0f9f0f00f80f0f199b1e1e00c3878f8e3e1fdd0002f83000221a307c00c000060c0d8f0f9f0f00f80f0f199b1e1e00c3878f8e3e1fdd0002f83000221a307c00c000060c0e19998c1981981819999c333300c18c06063333dd0002f83000221a307c00c000060c0e19998c1981981819999c333300c18c06063333dd0002f83000221a307c00c000060c0c1f998c1f81980f199998303f00c18786063333dd0002f83000221a307c00c000060c0c1f998c1f81980f199998303f00c18786063333dd0002f83000221a307c00c000060ccc18198d98019801999998333000c180c6c6331fdd0002f83000221a307c00c000060ccc18198d98019801999998333000c180c6c6331fdd0002f83000230d307c00c00006078c0f0f870f00f8fe0f0a981e1e01e3c7838f332330de0002f83000230d307c00c00006078c0f0f870f00f8fe0f0a981e1e01e3c7838f332330de0002f830001105307c00fffffeed00001edd0002f830001105307c00fffffeed00001edd0002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000d05307c00fffffec80002f830000d05307c00fffffec80002f830001a07307c00c000060780f800020c0007fe0001c070db0002f830001a07307c00c000060780f800020c0007fe0001c070db0002f830001d0a307c00c000060cc000000cfb00070c0003006000c030db0002f830001d0a307c00c000060cc000000cfb00070c0003006000c030db0002f830002119307c00c000060c0d8f0f9f0f00f80f19bf8f878300f87cf83078dc0002f830002119307c00c000060c0d8f0f9f0f00f80f19bf8f878300f87cf83078dc0002f830002119307c00c000060c0e19998c1981981819b6ccccc30060cccc30ccdc0002f830002119307c00c000060c0e19998c1981981819b6ccccc30060cccc30ccdc0002f830002119307c00c000060c0c1f998c1f81980f1bb6ccccc30060cccc30fcdc0002f830002119307c00c000060c0c1f998c1f81980f1bb6ccccc30060cccc30fcdc0002f830002119307c00c000060ccc18198d980198018db6ccccc3006ccccc30c0dc0002f830002119307c00c000060ccc18198d980198018db6ccccc3006ccccc30c0dc0002f83000221a307c00c00006078c0f0f870f00f80f11b6cf878780387cf87878c0dd0002f83000221a307c00c00006078c0f0f870f00f80f11b6cf878780387cf87878c0dd0002f830001105307c00fffffef800000fd20002f830001105307c00fffffef800000fd20002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000d05307c00fffffec80002f830000d05307c00fffffec80002f830001b07307c00f0001e0f80fa000070fe000438300180c0da0002f830001b07307c00f0001e0f80fa000070fe000438300180c0da0002f830001d06307c00ce00e60cfd00000cfe0007c180000018000180d90002f830001d06307c00ce00e60cfd00000cfe0007c180000018000180d90002f830002119307c00c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0dc0002f830002119307c00c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0dc0002f830002119307c00c038060f0f1999998c198198c1833380183199b0c66660dc0002f830002119307c00c038060f0f1999998c198198c1833380183199b0c66660dc0002f83000980042009e0000011c0208009e0000011c0206009e0000011c020600012119307c00c1c7060c061f98198c1f8198c183f300183199e0c66660dc0002f830002119307c00c1c7060c061f98198c1f8198c183f300183199e0c66660dc0002f830002119307c00ce00e60c0f1819998d980198c1b30300183199b0c663e0dc0002f830002119307c00ce00e60c0f1819998d980198c1b30300183199b0c663e0dc0002f830002119307c00f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466dc0002f830002119307c00f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466dc0002f830001205307c00fffffeef000103c0dc0002f830001205307c00fffffeef000103c0dc0002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000d05307c00fffffec80002f830000d05307c00fffffec80002f830001f07307c00f0001e0780f6000560380001c61cfd0003031800c0e30002f830001f07307c00f0001e0780f6000560380001c61cfd0003031800c0e30002f830002307307c00ce00e60cc0f9001030000060180003000c00018000030000c0e30002f830002307307c00ce00e60cc0f9001030000060180003000c00018000030000c0e30002f830002820307c00c1c7060c07cc63c03c663c3c667c3c3e7c183c07ce0c1e03e1e01f3878cce30002f830002820307c00c1c7060c07cc63c03c663c3c667c3c3e7c183c07ce0c1e03e1e01f3878cce30002f83000280c307c00c03806078ccc6660663cfe660030fe660c186603060c330183303318c0d8e30002f83000280c307c00c03806078ccc6660663cfe660030fe660c186603060c330183303318c0d8e30002f830002820307c00c1c70600ccc6c7e07e187e6066307e6666187e03060c3f018330331878f0e30002f830002820307c00c1c70600ccc6c7e07e187e6066307e6666187e03060c3f018330331878f0e30002f830002820307c00ce00e60cccc6c600603c60666636606666186003060c3001b33033180cd8e30002f830002820307c00ce00e60cccc6c600603c60666636606666186003060c3001b33033180cd8e30002f830002921307c00f0001e0787c383c03c663c3c3e1c3c3e7c3c3c030f1e1e00e1e01f3c78ccc0e40002f830002921307c00f0001e0787c383c03c663c3c3e1c3c3e7c3c3c030f1e1e00e1e01f3c78ccc0e40002f830000d05307c00fffffec80002f830000d05307c00fffffec80002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830001b04307c0003fef900017fc0fa00010ff8fa000101ffe30002f830001b04307c0003fef900017fc0fa00010ff8fa000101ffe30002f830002c08307c001c01c03e667cfe000603803803c183c0fe000570070078f878fe00050e00e0119f0fe70002f830002c08307c001c01c03e667cfe000603803803c183c0fe000570070078f878fe00050e00e0119f0fe70002f830002c08307c0061fc30306660fe00050c0006066786fe0003018000c0feccfe000630001819999980e80002f830002c08307c0061fc30306660fe00050c0006066786fe0003018000c0feccfe000630001819999980e80002f830002d08307c00c7ff18303c60fe000f180003060187c0000003000060c0ccccfe000660000c1d999980e80002f830002d08307c00c7ff18303c60fe000f180003060187c0000003000060c0ccccfe000660000c1d999980e80002f830002d08307c00cfff983c1878fe000f18000303c18660000003000060c0ccccfe000660000c1f999980e80002f830002d08307c00cfff983c1878fe000f18000303c18660000003000060c0ccccfe000660000c1f999980e80002f830002d08307c00c7ff18303c60fe000f18000300618660000003000060c0ccfcfe000660000c1b999f80e80002f830002d08307c00c7ff18303c60fe000f18000300618660000003000060c0ccfcfe000660000c1b999f80e80002f830002c08307c0061fc30306660fe000c0c0006066186600000018000c0feccfe000630001819999980e80002f830002c08307c0061fc30306660fe000c0c0006066186600000018000c0feccfe000630001819999980e80002f830002d08307c001c01c03e667cfe000603803803c7e3c0fe000570070078f8ccfe00060e00e0189f1980e80002f830002d08307c001c01c03e667cfe000603803803c7e3c0fe000570070078f8ccfe00060e00e0189f1980e80002f830001b04307c0003fef900017fc0fa00010ff8fa000101ffe30002f830001b04307c0003fef900017fc0fa00010ff8fa000101ffe30002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830001101307cf400007ff6ff00e0de0002f830001101307cf400007ff6ff00e0de0002f830001201307cf500010f80f600001fde0002f830001201307cf500010f80f600001fde0002f830002704307c00003ffcff00c0fe000078f5ff04f1e000003ffaff03f000000ff4ff0080fb0002f830002704307c00003ffcff00c0fe000078f5ff04f1e000003ffaff03f000000ff4ff0080fb0002f830002804307c0001e0fc000078fe0001e780f600041e700001e0fa00031e000078f40000f0fb0002f830002804307c0001e0fc000078fe0001e780f600041e700001e0fa00031e000078f40000f0fb0002f830002503307c0007fb00040e000001dcf5000303b80007f90003038001c0f400001cfb0002f830002503307c0007fb00040e000001dcf5000303b80007f90003038001c0f400001cfb0002f830004017307c000e000c0600300007000003b8001e000001e0000180fe000601dc000e000780fe000f070001c0038001e000003e000e000038fe00000efb0002f830004017307c000e000c0600300007000003b8001e000001e0000180fe000601dc000e000780fe000f070001c0038001e000003e000e000038fe00000efb0002f830003f16307c000e000c0000300007000003b80033001803300180fd000601dc000e000cc0fe0013030001c00380033001803300180000183000000efb0002f830003f16307c000e000c0000300007000003b80033001803300180fd000601dc000e000cc0fe0013030001c00380033001803300180000183000000efb0002f830004038307c000e000c0e3e330007000003b800301e3e0333e3e3878f878001dc000e000c07cf8787830001c003800301e3e0331e3e3e66187c3c000efb0002f830004038307c000e000c0e3e330007000003b800301e3e0333e3e3878f878001dc000e000c07cf8787830001c003800301e3e0331e3e3e66187c3c000efb0002f830004021307c000e000c0633360007000003b8001e3318033331818ccccc0001dc000e000c0cfecc13c30001c0038001e331803333186666183060000efb0002f830004021307c000e000c0633360007000003b8001e3318033331818ccccc0001dc000e000c0cfecc13c30001c0038001e331803333186666183060000efb0002f830004038307c000e000c06333c0007000003b800033f18033331818cccc78001dc000e000c0ccccc0fc30001c003800033f180333f18666618303c000efb0002f830004038307c000e000c06333c0007000003b800033f18033331818cccc78001dc000e000c0ccccc0fc30001c003800033f180333f18666618303c000efb0002f830003f20307c000e000c0633360007000003b80033301b033331b18cccc0c001dc000e000cfdcc13030001c00380033301b03330186666183606000efb0002f830003f20307c000e000c0633360007000003b80033301b033331b18cccc0c001dc000e000cfdcc13030001c00380033301b03330186666183606000efb0002f830004038307c000e000fcf33330007000003b8001e1e0e01e3e0e3c78cc78001dc000e000787ccc787878001c0038001e1e0e03e1e183e3e3c1c3c000efb0002f830004038307c000e000fcf33330007000003b8001e1e0e01e3e0e3c78cc78001dc000e000787ccc787878001c0038001e1e0e03e1e183e3e3c1c3c000efb0002f830002903307c000efb000407000003b8fc000003fb000301dc000ef9000301c00380f400000efb0002f830002903307c000efb000407000003b8fc000003fb000301dc000ef9000301c00380f400000efb0002f830002503307c0007fb00040e000001dcf5000303b80007f90003038001c0f400001cfb0002f830002503307c0007fb00040e000001dcf5000303b80007f90003038001c0f400001cfb0002f830002804307c0001e0fc000078fe0001e780f600041e700001e0fa00031e000078f40000f0fb0002f830002804307c0001e0fc000078fe0001e780f600041e700001e0fa00031e000078f40000f0fb0002f830002704307c00003ffcff00c0fe000078f5ff04f1e000003ffaff03f000000ff4ff0080fb0002f830002704307c00003ffcff00c0fe000078f5ff04f1e000003ffaff03f000000ff4ff0080fb0002f830001201307cf500010f80f600001fde0002f830001201307cf500010f80f600001fde0002f830001101307cf400007ff6ff00e0de0002f830001101307cf400007ff6ff00e0de0002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307cc40002f830000901307fc4ff02f830000901307fc4ff02f830000901307fc4ff02f830000901307fc4ff02f83000070030c200013000070030c200013000070030c200013000070030c20001300007003fc2ff01f00007003fc2ff01f00002bf0002bf00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-4:  PRIZM's Link Dialog Shows Some Typical Radio Buttons\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Radio buttons are grouped in families.  Only one of the radio buttons in any particular family can be selected at any one time.  You don't really have to do any work to make this happed; the Control Manager automatically deselects one radio button when the user clicks on one of the other radio buttons in the same family, and }{\f6\fs20 TaskMaster}{\f4  selects a radio button when the user clicks on it.  The active radio button is the one with the dot in the middle of the circle.  The others have a circle with nothing inside.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{10,20,0,0\},                       /* control rect */\par    RadioControl \{\{\par       $0001,                          /* flags */\par       $3002,                          /* more flags */\par       0,                              /* refcon */\par       1001,                           /* Title Ref */\par       0,                              /* initial value */\par       0,                              /* color table */\par       \{"G","g",0,0\}                   /* key equivalents */\par       \}\};\par    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (1001) \{"Green"\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 13-6:  A Typical Radio Button Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Like simple buttons, the Control Manager will be happy to figure out the size for the control, so you can (and usually should) set the last two entries in the control rectangle to 0.\par Also like the simple button, you can use key equivalents for radio button controls.  The last two fields are optional, though.  If you aren't using color tables or key equivalents, you can safely leave the entries off entirely.  If you are using key equivalents, though, you do have to put in something for the color table, even if you aren't using one.\par The initial value field should be 0 if the control is not supposed to be the one that is selected with the window is created, and 1 if it should be selected.  Exactly one of the controls in a particular family should be selected.\par The flags for the radio button control are:\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\widctlpar\adjustright {\f4 7\tab 0 for a visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 6-0\tab This is the family number for the radio button.\par \par }{\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-14\tab Reserved; set to 0.\par 13\tab Set this bit to 1 if the button has a keystroke equivalent.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-4\tab Reserved; set to 0.\par 3-2\tab Defines the type of reference in the color table field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 1-0\tab Defines the type of reference in the title field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Title reference is a pointer.\par 01\tab Title reference is a handle.\par 10\tab Title reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 13-3:  Start with the program from Problem 13-2.  Add a family of three radio buttons, labeled Red, Green and Blue.  Group these controls to the right of a rectangle that is outlined in black and filled with the color whose radio button is active.\par Use key equivalents for the various colors, assigning the first letter of the color as the key equivalent.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1072{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag-256008421\blipupi72{\*\blipuid f0bd9f1b3226febea472c72a6bfd2441}17a800000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00b003cbd000030f7000103c00b003cbd000030f7000103c00b003cbd00003cf7000103c00b003cbd00003cf7000103c00b003cbd00003ff7000103c00b003cbd00003ff7000103c00c003cbd00013fc0f8000103c00c003cbd00013fc0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffff8000103c00c003cbd00013ffff8000103c00c003cbd00013cf0f8000103c00c003cbd00013cf0f8000103c00b003cbc00003cf8000103c00b003cbc00003cf8000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c02e033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000103c0ec000103c02e033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000103c0ec000103c02a033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000103c0ec000103c02a033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000103c0ec000103c040033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000103c0ec000103c040033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000103c0ec000103c034033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec304c0000003c0ec000103c034033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec304c0000003c0ec000103c03e033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef00e000f03cf3c0f03c003ffc0000003c0ec000103c03e033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef00e000f03cf3c0f03c003ffc0000003c0ec000103c038033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000103c0ec000103c038033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000103c0ec000103c040033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000103c0ec000103c040033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000103c0ec000103c01f033c00003cf800003cf400003cfd0000f0f80000f0f3000103c0ec000103c01f033c00003cf800003cf400003cfd0000f0f80000f0f3000103c0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-5:  Control Sampler with Radio Buttons\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par {\*\bkmkend bk69}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 radio button control}{\rxe bk69}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Check Boxes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Check Boxes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 {\*\bkmkstart bk70}Check boxes are used for yes/no choices.  It's pretty common to have a series of related yes/no choices grouped together, but unlike radio buttons, check boxes don't have families.  Any grouping you see is there for organization, not because the Control Manager attaches any special significance to more than one check box.\par Figure 13-6 shows a typical use of check boxes.  It's the Find dialog from PRIZM, which uses check boxes to let you select some options for the string search.  If the option is on (selected) the box will have an X.  If the option is off (not selected) the box is empty.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1073{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw328\pich180\picwgoal6560\pichgoal3600\macpict\bliptag1694747234\blipupi72{\*\blipuid 6503ca6293b682b70a3dbf896eedd9b2}0ca10000000000b401481101a00082a0008e01000a0000000002d0024098002a0000000000b401480000000000b401480000000000b40148000102d70002d70007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0012033ffc0007f3ff04fc1cfffe7ff0ff01fc0012033ffc0007f3ff04fc1cfffe7ff0ff01fc0012033ffcffe7f3ff04fcfffffe7ff0ff01fc0012033ffcffe7f3ff04fcfffffe7ff0ff01fc0012033ffcffe7f3ff04fcf8e0f07ff0ff01fc0012033ffcffe7f3ff04fcf8e0f07ff0ff01fc0012033ffcffe7f3ff04fc3ce6667ff0ff01fc0012033ffcffe7f3ff04fc3ce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffc0007f3ff04fcf866707ff0ff01fc0012033ffc0007f3ff04fcf866707ff0ff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc00070030da00010c00070030da00010c00070030da00010c00070030da00010c000c0030fc00003fe1ff02c00c000c0030fc00003fe1ff02c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000e063001f18000c030e10002c00c000e063001f18000c030e10002c00c000e063001800000c030e10002c00c000e063001800000c030e10002c00c000e063001838f87cc30e10002c00c000e063001838f87cc30e10002c00c000e063001e18cccc030e10002c00c000e063001e18cccc030e10002c00c000e063001818cccc030e10002c00c000e063001818cccc030e10002c00c000e063001818cccc030e10002c00c000e063001818cccc030e10002c00c000e06300183ccc7cc30e10002c00c000e06300183ccc7cc30e10002c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000c0030fc00003fe1ff02c00c000c0030fc00003fe1ff02c00c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000b043003fffff8de00010c000b043003fffff8de00010c00150e30030000186198000e00030c000018e800010c00150e30030000186198000e00030c000018e800010c00150e30030000186198000600030c000018e800010c00150e30030000186198000600030c000018e800010c00150e30030000186d9f0f060f036c78d8f8e800010c00150e30030000186d9f0f060f036c78d8f8e800010c00150e30030000186d99998619836ccce198e800010c00150e30030000186d99998619836ccce198e800010c00150e30030000186d9999861f836cccc198e800010c00150e30030000186d9999861f836cccc198e800010c00150e300300001833199986180198ccc198e800010c00150e300300001833199986180198ccc198e800010c00160f300300001833198f0f0f019878c0f980e900010c00160f300300001833198f0f0f019878c0f980e900010c000b043003fffff8de00010c000b043003fffff8de00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000b043003fffff8de00010c000b043003fffff8de00010c00120530030000181efa0002018006e900010c00120530030000181efa0002018006e900010c001005300300001833f9000006e800010c001005300300001833f9000006e800010c0018113003000018301f1e1e01e1e3e1e38f8e318feb00010c0018113003000018301f1e1e01e1e3e1e38f8e318feb00010c00191230030000183033303303033333018606319980ec00010c00191230030000183033303303033333018606319980ec00010c001912300300001830331e3f01e3f331e186061b1f80ec00010c001912300300001830331e3f01e3f331e186061b1f80ec00010c001811300300001833330330003303303186c61b18eb00010c001811300300001833330330003303303186c61b18eb00010c00191230030000181e1f1e1e01e1e331e3c38f0e0f18ec00010c00191230030000181e1f1e1e01e1e331e3c38f0e0f18ec00010c000b043003fffff8de00010c000b043003fffff8de00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000b043003fffff8de00010c000b043003fffff8de00010c001207300300001861980ced000038f600010c001207300300001861980ced000038f600010c001308300300001861980030ee000018f600010c001308300300001861980030ee000018f600010c00231c30030000186d9f1c7c3c3c7c3e3c3c03c3cfe3e1f363c3c03c3e663e18f600010c00231c30030000186d9f1c7c3c3c7c3e3c3c03c3cfe3e1f363c3c03c3e663e18f600010c00210a30030000186d998c306660fd660806666db33333866600fd660018f600010c00210a30030000186d998c306660fd660806666db33333866600fd660018f600010c00231830030000186d998c307e3c6666607e06066db3333307e3c07efe660018f600010c00231830030000186d998c307e3c6666607e06066db3333307e3c07efe660018f600010c00230a300300001833198c366006fe660a6006666db3333306006060fe660018f600010c00230a300300001833198c366006fe660a6006666db3333306006060fe660018f600010c002418300300001833199e1c3c3c7c3e3c3c03c3cdb3e1f303c3c03cfe3e013c60f700010c002418300300001833199e1c3c3c7c3e3c3c03c3cdb3e1f303c3c03cfe3e013c60f700010c0017043003fffff8fb000060fb000003fb000006f300010c0017043003fffff8fb000060fb000003fb000006f300010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000e033000007ff8ff00c0e700010c000e033000007ff8ff00c0e700010c000e0330000f80f800003ee700010c000e0330000f80f800003ee700010c001402300078f7ff01e3c0fc00f9ff00c0f600010c001402300078f7ff01e3c0fc00f9ff00c0f600010c0018033000e780f800013ce0fd00010780fa000078f600010c0018033000e780f800013ce0fd00010780fa000078f600010c0016023001dcf700010770fd00001cf900000ef600010c0016023001dcf700010770fd00001cf900000ef600010c0021093003b8003e3000181180fe000103b8fd000238001efd00021c0007f600010c0021093003b8003e3000181180fe000103b8fd000238001efd00021c0007f600010c00210e3003b800300000181980000c0003b8fd0002380033fd00020c0007f600010c00210e3003b800300000181980000c0003b8fd0002380033fd00020c0007f600010c00220e3003b8003071f0f81d8f199f0003b8fd00093800301f3e1e1e0c0007f600010c00220e3003b8003071f0f81d8f199f0003b8fd00093800301f3e1e1e0c0007f600010c00210e3003b8003c3199981f998f0c0003b8fd0002380030fd33020c0007f600010c00210e3003b8003c3199981f998f0c0003b8fd0002380030fd33020c0007f600010c00220e3003b800303199981b9f860c0003b8fd00093800303333303f0c0007f600010c00220e3003b800303199981b9f860c0003b8fd00093800303333303f0c0007f600010c00210e3003b8003031999819980f0d8003b8fd00013800fd3303300c0007f600010c00210e3003b8003031999819980f0d8003b8fd00013800fd3303300c0007f600010c00220e3003b800307998f8188f19870003b8fd000438001e1f33fe1e010007f600010c00220e3003b800307998f8188f19870003b8fd000438001e1f33fe1e010007f600010c0016023003b8f7000103b8fd000038f9000007f600010c0016023003b8f7000103b8fd000038f9000007f600010c0016023001dcf700010770fd00001cf900000ef600010c0016023001dcf700010770fd00001cf900000ef600010c0018033000e780f800013ce0fd00010780fa000078f600010c0018033000e780f800013ce0fd00010780fa000078f600010c001402300078f7ff01e3c0fc00f9ff00c0f600010c001402300078f7ff01e3c0fc00f9ff00c0f600010c000e0330000f80f800003ee700010c000e0330000f80f800003ee700010c000e033000007ff8ff00c0e700010c000e033000007ff8ff00c0e700010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c0007003fdaff01fc0007003fdaff01fc0002d70002d700a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-6:  A Typical Use of Check Box Controls\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Listing 13-7 shows a typical resources for a check box control.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{10,20,0,0\},                       /* control rect */\par    CheckControl \{\{\par       $0000,                          /* flags */\par       $3002,                          /* more flags */\par       0,                              /* refcon */\par       1001,                           /* Title Ref */\par       0,                              /* initial value */\par       0,                              /* color table */\par       \{'3','#',0,0\}                   /* key equivalents */\par       \}\};\par    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (1001) \{"Check Here"\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 13-7:  A Typical Check Box Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This looks a lot like the the resource for a radio button, and it is.  The only difference, other than the fact that you specify }{\f6\fs20 CheckControl}{\f4  instead of }{\f6\fs20 RadioControl}{\f4 , is that there is no family number.  Here's the official list of flags, just for completeness, though:\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\widctlpar\adjustright {\f4 7\tab 0 for a visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 6-0\tab Reserved; set to 0.\par \par }{\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-14\tab Reserved; set to 0.\par 13\tab Set this bit to 1 if the button has a keystroke equivalent.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-4\tab Reserved; set to 0.\par 3-2\tab Defines the type of reference in the color table field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 1-0\tab Defines the type of reference in the title field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Title reference is a pointer.\par 01\tab Title reference is a handle.\par 10\tab Title reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 13-4:  Start with the solution to Problem 13-3.  Add a check box labeled "Sound On."  When the program starts, the control should be selected (i.e. there should be an X in the box).  When this control is not selected, the simple buttons that call }{\f6\fs20 SysBeep}{\f4  shouldn't make any sound.\par This control should not have a key equivalent, so the last two parameters (the color table and key equivalents parameters) should be left off.  Be sure you check the flag words, too \endash  bit 13 of }{\f6\fs20 moreFlags}{\f4  should be clear!\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1074{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag1592869429\blipupi72{\*\blipuid 5ef14235c144b854b247d2e1b85ed6e7}187a00000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00b003cbd000030f7000103c00b003cbd000030f7000103c00b003cbd00003cf7000103c00b003cbd00003cf7000103c00b003cbd00003ff7000103c00b003cbd00003ff7000103c00c003cbd00013fc0f8000103c00c003cbd00013fc0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffff8000103c00c003cbd00013ffff8000103c00c003cbd00013cf0f8000103c00c003cbd00013cf0f8000103c00b003cbc00003cf8000103c00b003cbc00003cf8000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-7:  Control Sampler with Check Box\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par {\*\bkmkend bk70}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 check box control}{\rxe bk70}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Scroll Bars}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Scroll Bars\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk71}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Scroll bars are most commonly used to scroll through a document, but that's not their only use.  You can use a scroll bar any time you want to allow a smooth range of choices.  The position of the window in a document is one case where you have a smooth range of choices, but so is selecting the intensity of a color or picking a scrap from a bunch of choices in a scrap book.\par Setting up a scroll bar isn't that much different from setting up any other control.  Here's the resource and flags for a typical scroll bar control:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{10,10,20,100\},                    /* control rect */\par    scrollControl \{\{\par       $001C,                          /* flags */\par       $1000,                          /* more flags */\par       0,                              /* refcon */\par       16,                             /* document size */\par       1,                              /* view size */\par       0,                              /* initial value */\par       0                               /* color table */\par       \}\};\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 13-8:  A Typical Scroll Bar Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\keepn\widctlpar\adjustright {\f4 7\tab 0 for a visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 6-5\tab Reserved; set to 0.\par 4\tab 0 for a vertical scroll bar, 1 for a horizontal scroll bar.\par 3\tab Set to 1 if the scroll bar should have a right arrow, or zero if there is no right arrow.  The Control Manager ignores this flag for vertical scroll bars.\par 2\tab Set to 1 if the scroll bar should have a left arrow, or zero if there is no left arrow.  The Control Manager ignores this flag for vertical scroll bars.\par 1\tab Set to 1 if the scroll bar should have a down arrow, or zero if there is no down arrow.  The Control Manager ignores this flag for horizontal scroll bars.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 0\tab Set to 1 if the scroll bar should have an up arrow, or zero if there is no up arrow.  The Control Manager ignores this flag for horizontal scroll bars.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-4\tab Reserved; set to 0.\par 3-2\tab Defines the type of reference in the color table field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 1-0\tab Reserved; set to 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The color table is optional, so you can leave that parameter off if you like.\par As you can see, you can define a scroll bar with or without arrows, and the size of the scroll bar is completely under your control.  It's possible, for example, to create a short, fat vertical scroll bar, rather than the tall thin one you are used to.\par There are three new parameters in this control that you haven't seen before; they are used to control the value, or position, of the scroll bar.  To understand how the scroll bar handles positions, let's think of it as it's used to scroll through a document.  There are three parameters that control what the scroll bar looks like.  The first is the size of the document, which is set to 16 in Listing 13-8.  That tells us that the scroll bar can represent up to 16 different values.  You might use the number of lines in a document, the number of pages, or even some fixed value that's used like a percentage.  There are tool calls to read and write this value, so you can change the value as the size of the document changes.  We'll look at those a bit later.\par The initial value tells the Control Manager where the thumb is at.  As the scroll bar is used, or as the program scrolls a document for some other reason, this value is updated.  As you'll see when we start looking at the calls that deal with the scroll bar, this value can be changed either by your program or by the Control Manager, so you will need to be able to read and write the value after the control exists.\par Finally, scroll bars on the Apple IIGS change size based on the relative size of the document and the display area.  If the window can show half of a document, the scroll bar's thumb fills half of the space between the scroll bar arrows.  If the window can only display a quarter of the document, the thumb only fills a quarter of the scroll bar.  At some point, the thumb reaches it's smallest size and doesn't shrink any more, but for a lot of applications, the variable size thumb is pretty cool.  The view size is used to set the thumb size.  The ratio of the view size to the document size should be the same as the ratio between the amount of information the window can display and the size of the entire document.\par Creating a scroll bar is a lot like creating any other control, but using one is a very different.  The reason for the difference is that scroll bars need to do five different things, depending on where the mouse is pressed.  There are several ways to handle a scroll bar control, but the easiest is to set up a scroll bar action procedure, then tell the Control Manager to call your scroll bar action procedure whenever the user presses on the scroll bar.  The }{\f6\fs20 SetCtlAction}{\f4  call is used to tell the Control Manager (in conjunction with }{\f6\fs20 TaskMaster}{\f4 ) to call your action procedure; a typical call looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlHandleFromID}}}{\v\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetCtlAction}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetCtlAction(@ScrollAction, GetCtlHandleFromID(wPtr, ctlID));\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The first parameter is the address of the action procedure; we'll talk more about the action procedure in a moment.  The second parameter is the handle for the control.  Since you know the control ID, not the control handle, you need to call }{\f6\fs20 GetCtlHandleFromID}{\f4  to get the handle.  You've seen that call once before, but to refresh your memory, you pass a pointer to the window containing the control and the control ID, and }{\f6\fs20 GetCtlHandleFromID}{\f4  returns the control handle.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Your action procedure looks and works a lot like a window update procedure.  It's called from the tools, so you need to use the databank directive to switch to the program's data bank.  The scroll bar action procedure has two parameters.  The first is an integer part number, and the second is the control handle.  You'll need to do different things based on what part of the scroll is being used; here's the part codes that can be returned for a scroll bar control.  These definitions are straight out of the Control Manager interface files for ORCA/Pascal, so you can (and should) use the names instead of the numbers.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20   UpArrow          =   $05;            (* up arrow on scroll bar   *)\par   DownArrow        =   $06;            (* down arrow on scroll bar *)\par   PageUp           =   $07;            (* page up                  *)\par   PageDown         =   $08;            (* page down                *)\par }\pard \li180\widctlpar\adjustright {\f6\fs20   Thumb            =   $81;            (* thumb                    *)\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par If you look at the part codes, you can see that there's a clear definition for up and down arrows.  Of course, not all scroll bars are vertical.  For horizontal scroll bars, "up" means left, and "down" means right.\par Listing 13-9 shows a sample action procedure.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{$databank+\}\par \par procedure ScrollAction (part: integer; ctlHandle: ctlRecHndl);\par \par \{ Scroll bar action procedure                                   \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    part - scroll bar part code                                \}\par \{    ctlHandle - scroll bar handle                              \}\par \par const\par    pageSize = 4;                        \{size of a page\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    maxPos = 16;                         \{max position for the scroll bar\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par }\pard \li180\widctlpar\adjustright {\f6\fs20    value, oldValue: integer;            \{control value\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{ScrollAction\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 value := GetCtlValue(ctlHandle);\par oldValue := value;\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 case part of\par    upArrow:     value := value-1;\par    downArrow:   value := value+1;\par    pageUp:      value := value-pageSize;\par    pageDown:    value := value+pageSize;\par    thumb:       begin value := oldValue; oldValue := value-1; end;\par    otherwise:   ;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{case\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 if value < 0 then\par    value := 0\par else if value > maxPos then\par }\pard \li180\widctlpar\adjustright {\f6\fs20    value := maxPos;\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 if value <> oldValue then begin\par    SetCtlValue(value, ctlHandle);\par    \{do any action to update the thing being scrolled here\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{if\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 end; \{ScrollAction\}\par \par \{$databank+\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 13-9:  A Sample Scroll Bar Action Procedure\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetCtlValue}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As you can see, it's up to the action procedure to decide how far the scroll bar should be moved, and then to actually call }{\f6\fs20 SetCtlValue}{\f4  to move the scroll bar.  You can (and should) also do anything you need to to update the document, or whatever it is you are scrolling, from inside of the action procedure.  You should not just invalidate the effected rectangle, since the scroll bar can be used to scroll continuously by pressing the mouse button on an arrow or in the page area, and when that happens, your scroll action procedure is called continuously, too, without ever returning to the event loop.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In general, you'll use a single }{\f6\fs20 ScrollAction}{\f4  procedure to handle several different scroll bars.  Since you get the control handle, but no the control ID, you need some way of switching between the two.  }{\f6\fs20 GetCtlID}{\f4  takes the control handle as a parameter and returns the control ID.  It's the inverse of a call you've already seen, }{\f6\fs20 GetCtlHandleFromID}{\f4 , which takes the control ID as a parameter and returns the control handle.\par \par }{\f6\fs20 id := GetCtlID(ctlHandle);\par }{\f4 \par Scroll bar controls have one other problem to deal with on occasion, too: they change size.  If you are looking at the middle of a text document, then paste in a chunk of text that is half the size of the whole document, you're not at the middle anymore \endash  you're 1/3 of the way down.  The position of the thumb needs to change to reflect that.  The size of the thumb may change, too, since the size of the page relative to the whole document has changed, and the thumb's size reflects that proportion until the document is so large that the thumb would have to shrink too much to stay in the correct proportion.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SetCtlParams}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GetCtlParams}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Changing the scroll bar control's value changes the position of the thumb.  To change the size of a page or the size of the document, you need to use }{\f6\fs20 SetCtlParams}{\f4 .  This call takes the document size (or data size) as the first parameter and the page size as the second.  If you only want to change one of the values, you can pass -1 for the other.  Here's a typical call, setting the view size to 10 and the data size to 100:\par \par }{\f6\fs20 SetCtlParams(100, 10, ctlHandle);\par }{\f4 \par If you need to read the value for some reason, use }{\f6\fs20 GetCtlParams}{\f4 .\par \par }{\f6\fs20 parms := GetCtlParams(ctlHandle);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The two values are returned in a long integer, so you have to pull them apart, but you're probably getting pretty used to that by now.  The view size is in the most significant word; the least significant word holds the data size.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 13-5:  In this problem, you'll add a color mixer to the control sampler we've been creating in this lesson.\par Start with the solution to Problem 13-4.  Add three horizontal scroll bars, and use static text controls to label them Red, Green and Blue.  Set a document size of 16 for each scroll bar and a view size of 1.  The Control Manager allows the scroll bar to scroll from a position of 0 to the data size minus the page size, so this gives positions ranging from 0 to 15.  Assume a page has a size of 1, too.  That's unusual, but since our "document" is basically the 16 possible values for the red, green, and blue color guns of the CRT, it doesn't make much sense to move by anything larger than 1.\par Just to the left of the scroll bars, which should be stacked on top of each other, create a rectangle with a black outline and an interior that is filled with some unused color.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetCtlValue}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As part of initializing the program, set the color table entry for the color you've used to fill the rectangle to black \endash  that would be $0 for all three colors.  Set the position for the scroll bars to 0 using }{\f6\fs20 SetCtlValue}{\f4 , too.\par Whenever the value of one of the scroll bars changes, adjust the color table entry appropriately.  The result is a simple but effective color mixer.\par Hint: You can use }{\f6\fs20 SetColorTable}{\f4  and }{\f6\fs20 GetColorTable}{\f4  to change the color table, but it would be easier to use }{\f6\fs20 SetColorEntry}{\f4  and }{\f6\fs20 GetColorEntry}{\f4 .  We haven't discuss those calls in the course, and won't \endash  but it would be good practice to find out about the calls by looking in the toolbox reference manuals, figuring out how to use them on your own.  They are also documented in Appendix A.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1075{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag1156045208\blipupi72{\*\blipuid 44e7d9986538e56ae48d123a9bbbd572}1f7800000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c012033c00003ff9ff00c0f300e8ffe5000103c012033c00003ff9ff00c0f300e8ffe5000103c025033c00003af9aa02c00ffcfe00000ff90003c000c000f333063ffffc000c0003e5000103c025033c00003af9aa02c00ffcfe00000ff90003c000c000f333063ffffc000c0003e5000103c025033c00003af9aa02c00f0ffe00000ff90004c003c0003cf3cc05003c000f0003e5000103c025033c00003af9aa02c00f0ffe00000ff90004c003c0003cf3cc05003c000f0003e5000103c025033c00003af9aa06c00f0f03fc03fff90003c00cffc0f333063c003c0ffcc003e5000103c025033c00003af9aa06c00f0f03fc03fff90003c00cffc0f333063c003c0ffcc003e5000103c023033c00003af9aa02c00ffcfd0ff90004c03000c03cf3cc05003c0c003003e5000103c023033c00003af9aa02c00ffcfd0ff90004c03000c03cf3cc05003c0c003003e5000103c025033c00003af9aa06c00f3c0fff0f0ff90003c0c000c0f333063c003c0c000c03e5000103c025033c00003af9aa06c00f3c0fff0f0ff90003c0c000c0f333063c003c0c000c03e5000103c025033c00003af9aa00c0fe0f02000f0ff90004c03000c03cf3cc05003c0c003003e5000103c025033c00003af9aa00c0fe0f02000f0ff90004c03000c03cf3cc05003c0c003003e5000103c025033c00003af9aa06c00f0f03fc03fff90003c00cffc0f333063c003c0ffcc003e5000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000125033c00003af9aa06c00f0f03fc03fff90003c00cffc0f333063c003c0ffcc003e5000103c01f033c00003af9aa00c0f30004c003c0003cf3cc05003c000f0003e5000103c01f033c00003af9aa00c0f30004c003c0003cf3cc05003c000f0003e5000103c01f033c00003af9aa00c0f30003c000c000f333063ffffc000c0003e5000103c01f033c00003af9aa00c0f30003c000c000f333063ffffc000c0003e5000103c012033c00003af9aa00c0f300e8ffe5000103c012033c00003af9aa00c0f300e8ffe5000103c00e033c00003af9aa00c0be000103c00e033c00003af9aa00c0be000103c012033c00003af9aa00c0f300e8ffe5000103c012033c00003af9aa00c0f300e8ffe5000103c024033c00003af9aa02c003fcf50003c000c000f73301fffffd33043c000c0003e5000103c024033c00003af9aa02c003fcf50003c000c000f73301fffffd33043c000c0003e5000103c025033c00003af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc03000f0003e5000103c025033c00003af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc03000f0003e5000103c02c033c00003af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33043c0ffcc003e5000103c02c033c00003af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33043c0ffcc003e5000103c029033c00003af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc030c003003e5000103c029033c00003af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc030c003003e5000103c02c033c00003af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33043c0c000c03e5000103c02c033c00003af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33043c0c000c03e5000103c02d033c00003af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc030c003003e5000103c02d033c00003af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc030c003003e5000103c02c033c00003af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33043c0ffcc003e5000103c02c033c00003af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33043c0ffcc003e5000103c023033c00003af9aa00c0f30004c003c0003cf9cc02cf000cfccc03000f0003e5000103c023033c00003af9aa00c0f30004c003c0003cf9cc02cf000cfccc03000f0003e5000103c022033c00003af9aa00c0f30003c000c000f73301fffffd33043c000c0003e5000103c022033c00003af9aa00c0f30003c000c000f73301fffffd33043c000c0003e5000103c012033c00003af9aa00c0f300e8ffe5000103c012033c00003af9aa00c0f300e8ffe5000103c00e033c00003af9aa00c0be000103c00e033c00003af9aa00c0be000103c012033c00003af9aa00c0f300e8ffe5000103c012033c00003af9aa00c0f300e8ffe5000103c024033c00003af9aa04c00ffc03f0f70006c000c0003ffff3f433043c000c0003e5000103c024033c00003af9aa04c00ffc03f0f70006c000c0003ffff3f433043c000c0003e5000103c023033c00003af9aa04c00f0f00f0f70006c003c0003c003cf3cc03000f0003e5000103c023033c00003af9aa04c00f0f00f0f70006c003c0003c003cf3cc03000f0003e5000103c027033c00003af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333043c0ffcc003e5000103c027033c00003af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333043c0ffcc003e5000103c025033c00003af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc030c003003e5000103c025033c00003af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc030c003003e5000103c027033c00003af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333043c0c000c03e5000103c027033c00003af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333043c0c000c03e5000103c025033c00003af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc030c003003e5000103c025033c00003af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc030c003003e5000103c027033c00003af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333043c0ffcc003e5000103c027033c00003af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333043c0ffcc003e5000103c01f033c00003af9aa00c0f30006c003c0003c003cf3cc03000f0003e5000103c01f033c00003af9aa00c0f30006c003c0003c003cf3cc03000f0003e5000103c020033c00003af9aa00c0f30006c000c0003ffff3f433043c000c0003e5000103c020033c00003af9aa00c0f30006c000c0003ffff3f433043c000c0003e5000103c012033c00003ff9ff00c0f300e8ffe5000103c012033c00003ff9ff00c0f300e8ffe5000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00b003cbd000030f7000103c00b003cbd000030f7000103c00b003cbd00003cf7000103c00b003cbd00003cf7000103c00b003cbd00003ff7000103c00b003cbd00003ff7000103c00c003cbd00013fc0f8000103c00c003cbd00013fc0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffff8000103c00c003cbd00013ffff8000103c00c003cbd00013cf0f8000103c00c003cbd00013cf0f8000103c00b003cbc00003cf8000103c00b003cbc00003cf8000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-8:  Control Sampler with Scroll Bars\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 13-6:  In Problem 12-2 you created a scrapbook that used two menu items to scroll back and forth through a list of scraps.  Get rid of the menu and add a scroll bar near the bottom of the window, using the scroll bar to move among the various scraps.  Use }{\f6\fs20 FrameRect}{\f4  to draw a box in the window, and draw the scrap inside of the box.\par Make sure your program keeps track of the data size and view size, setting the scroll bar's parameters accordingly.  You should see the thumb size change as you cut or paste scraps, and you should be able to scroll through all of the scraps.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1076{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw408\pich252\picwgoal8160\pichgoal5040\macpict\bliptag1768272642\blipupi72{\*\blipuid 6965b302afb32d0939e3aac5961d560c}0c4a0000000000fc01981101a00082a0008e01000a0000000002d002409800340000000000c801980000000000c801980000000000c80198000102cd0002cd0007003fd0ff01fc0007003fd0ff01fc00070030d000010c00070030d000010c00070030d000010c00070030d000010c001c0333f3fff9f3ff02f003c0fe00080f80000c003003c01ff0ff01cc001c0333f3fff9f3ff02f003c0fe00080f80000c003003c01ff0ff01cc001a0330030018f200010660fe00070cc0000c00f004c0ef00010c001a0330030018f200010660fe00070cc0000c00f004c0ef00010c001c0333f30019f3ff0ef00603c6c7cf8cc7878cc0300cc01ff0ff01cc001c0333f30019f3ff0ef00603c6c7cf8cc7878cc0300cc01ff0ff01cc001a0330030018f2000c03c6670ccccf8ccccd80300cc0ef00010c001a0330030018f2000c03c6670ccccf8ccccd80300cc0ef00010c001b0333f30019f3ff04f00066060cfdcc05cf00300cc01ff0ff01cc001b0333f30019f3ff04f00066060cfdcc05cf00300cc01ff0ff01cc00190330030018f200030666660cfdcc04cd80300c80ef00010c00190330030018f200030666660cfdcc04cd80300c80ef00010c001c0333f3fff9f3ff0ef003c3c607cf8f87878cc0fccf001ff0ff01cc001c0333f3fff9f3ff0ef003c3c607cf8f87878cc0fccf001ff0ff01cc000b0030eb00000ce700010c000b0030eb00000ce700010c00070030d000010c00070030d000010c0007003fd0ff01fc0007003fd0ff01fc00070030d000010c00070030d000010c00070030d000010c00070030d000010c000901303fd2ff02fc0c000901303fd2ff02fc0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c000f07303001f980c00030d800020c0c000f07303001f980c00030d800020c0c0013043030006180fb0003c00000c0df00020c0c0013043030006180fb0003c00000c0df00020c0c00160e30300061f1c3c070f00f81f0f0f1f0df00020c0c00160e30300061f1c3c070f00f81f0f0f1f0df00020c0c00160e3030006198c60031801980c19980c0df00020c0c00160e3030006198c60031801980c19980c0df00020c0c00160e3030006198c3c030f01980c1f8f0c0df00020c0c00160e3030006198c3c030f01980c1f8f0c0df00020c0c00160e3030006198c06030181980d98018d8df00020c0c00160e3030006198c06030181980d98018d8df00020c0c00170f3030006199e3c078f00f8070f0f07180e000020c0c00170f3030006199e3c078f00f8070f0f07180e000020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0098003400c8000000fc019800c8000000fc019800c8000000fc0198000109013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c0009013030d200020c0c000901303fd2ff02fc0c000901303fd2ff02fc0c00070030d000010c00070030d000010c00070030d000010c00070030d000010c000901300fd2ff02f00c000901300fd2ff02f00c001304300c00e007edff00f5ed5505e00e00300c001304300c00e007edff00f5ed5505e00e00300c001405300c036007c0ee000035ed5505e00d80300c001405300c036007c0ee000035ed5505e00d80300c001405300c0c7fc7c0ee000035ed5505e7fc60300c001405300c0c7fc7c0ee000035ed5505e7fc60300c001405300c3000c7c0ee000035ed5505e60018300c001405300c3000c7c0ee000035ed5505e60018300c001405300cc000c7c0ee000035ed5505e60006300c001405300cc000c7c0ee000035ed5505e60006300c001405300c3000c7c0ee000035ed5505e60018300c001405300c3000c7c0ee000035ed5505e60018300c001405300c0c7fc7c0ee000035ed5505e7fc60300c001405300c0c7fc7c0ee000035ed5505e7fc60300c001405300c036007c0ee000035ed5505e00d80300c001405300c036007c0ee000035ed5505e00d80300c001304300c00e007edff00f5ed5505e00e00300c001304300c00e007edff00f5ed5505e00e00300c000901300fd2ff02f00c000901300fd2ff02f00c00070030d000010c00070030d000010c00070030d000010c00070030d000010c00070030d000010c00070030d000010c0007003fd0ff01fc0007003fd0ff01fc0002cd0002cd00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 13-9:  Scrapbook With Scroll Bar\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk71}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar control}{\rxe bk71}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Grow Box}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Grow Box\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk72}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The grow box control is almost always used to change the size of a window, although it is technically possible to use it inside a window, just like any other control.  Defining a grow box is very similar to defining the other simple controls.  Here's a typical resource, followed by the definitions for the flag words:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{90,90,10,10\},                     /* control rect */\par    growControl \{\{\par       $0001,                          /* flags */\par       $1000,                          /* more flags */\par       0,                              /* refcon */\par       0                               /* color table */\par       \}\};\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 Listing 13-10:  A Typical Scroll Bar Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\keepn\widctlpar\adjustright {\f4 7\tab 0 for a visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 6-1\tab Reserved; set to 0.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 0\tab Set this bit to 1 if the grow control is being used to resize a window.  This tells the Control Manager to draw a window outline as the user drags the control around, and to change the size of the window when the control is released.  Set this bit to 0 if you will do all of the tracking manually.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-4\tab Reserved; set to 0.\par 3-2\tab Defines the type of reference in the color table field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 1-0\tab Reserved; set to 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Setting bit 0 of the flags word tells the Control Manager to make all of the appropriate calls to handle changing the size of a window.  An outline of the window with the new size is shown, and changes as the mouse moves.  When the mouse is released, the size of the window is changed.\par I'm not going to assign a problem involving the grow box, since it's not that different from other controls, and it's generally created and handled for you as a part of something else \endash  like a set of }{\f6\fs20 TaskMaster}{\f4  controlled scroll bars and grow box, or as part of a TextEdit control.  If you would like to experiment with the control, I'd suggest using a program with a single window, placing the control at the bottom right of the window and using it to change the window's size.\par {\*\bkmkend bk72}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 grow box control}{\rxe bk72}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson introduced controls, showing how to use some of the basic control types.  You learned about simple buttons, radio buttons, check boxes, static text, scroll bars, and grow boxes.  In addition to using the controls individually, you also learned how to set up and use your own scroll bars and grow box for a document window.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 GetColorEntry\tab GetCtlID\tab GetCtlParams\tab GetCtlValue\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 SetColorEntry\tab SetCtlAction\tab SetCtlParams\tab SetCtlValue\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rControlList\tab rTextForLETextBox2\par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 14 - Controls, Part 2}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 14 \endash  Controls, Part 2}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 14 \endash  Controls, Part 2\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson is a continuation of the last one.  In this lesson you will learn how to create and use several kinds of controls, including rectangles, thermometers, icon buttons, pictures, pop-up menus, lists, and edit line controls.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Rectangles}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Rectangles\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk73}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Rectangle controls are usually used as dividers or boxes in a complicated dialog.  A thin rectangle can be used as a dividing line.  You can also make it look like a control or text item is "poked through" the edge of the rectangle by putting the rectangle after the other controls in the control list.  This takes advantage of the fact that controls are drawn in the opposite order of their appearance in the control list to draw some other control over the top of the rectangle control.\par Here's a typical resource for a rectangle control, followed by the definitions for the flag words:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{8,8,22,102\},                      /* control rect */\par    rectangleControl \{\{\par       $0002,                          /* flags */\par       $1000,                          /* more flags */\par       0,                              /* refcon */\par       1;                              /* pen height */\par       2;                              /* pen width */\par       "FFFFFFFFFFFFFFFF",             /* penmask */\par       "FFFFFFFFFFFFFFFF",             /* penpattern */\par       "FFFFFFFFFFFFFFFF",\par       "FFFFFFFFFFFFFFFF",\par       "FFFFFFFFFFFFFFFF",\par       \}\};\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-1:  A Typical Rectangle Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\keepn\widctlpar\adjustright {\f4 7\tab 0 for a visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 6-2\tab Reserved; set to 0.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 1-0\tab Control pattern.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Transparent control.  Nothing is drawn, but you can still test for hits in the rectangle.\par 01\tab Gray pattern.\par 10\tab Black pattern\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-0\tab Reserved; set to 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The last four parameters in the resource are optional.  If you leave them out, you will get a pen that is one pixel high and two pixels wide.  The pen width you specify is always divided by two if you are using 320 mode.  While the pen width and pen height are both optional, you have to put both in or leave both out \endash  you can't code the pen height and leave off the pen width.\par The last two bits of the first flag word control the pen pattern.  You can get a transparent control, which draws nothing but can be used to test for a mouse hit; a solid black outline, or a gray outline.  You can also specify the pen pattern and pen mask, which gives you complete control over picking colored edges or complicated patterns.  If you do include a pen pattern and pen mask, you should set the last two bits of the flag word to 10.\par \par Problem 14-1:  Start with your solution to Problem 13-5.  Add a rectangle control around the three scroll bars and colored rectangle to group the color picker controls together, separating them from the other controls.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1077{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag1651800578\blipupi72{\*\blipuid 62747a0274c6ad4eaa3ac5e244a913df}200600000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa000503c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c02d053c00003aaaabfa00050c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0e4000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c038053c00003aaaabfa001930fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd000b300000c00f0f00f00f0f03fce8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c034053c00003aaaabfa000533fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0fe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c039053c00003aaaabfa001030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f00ffe8000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c037053c00003aaaabfa00030c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0fe7000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c039053c00003aaaabfa000903c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe000b03c03c000ffc03fc03ff03fce8000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c01b053c00003aaaabf900013fc0f7000103fcf100013fc0df000103c00c053c00003aaaabb7000103c00c053c00003aaaabb7000103c00c053c00003fffffb7000103c00c053c00003fffffb7000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000126033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c012033c00033af9aa00c0da000030e6000103c012033c00033af9aa00c0da000030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c025033c00033af9aa02c003fcf50003c000c000f73301fffffd33053c000c000330e6000103c025033c00033af9aa02c003fcf50003c000c000f73301fffffd33053c000c000330e6000103c026033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc04000f000330e6000103c026033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc04000f000330e6000103c02d033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33053c0ffcc00330e6000103c02d033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33053c0ffcc00330e6000103c02a033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc040c00300330e6000103c02a033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc040c00300330e6000103c02d033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33053c0c000c0330e6000103c02d033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33053c0c000c0330e6000103c02e033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc040c00300330e6000103c02e033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc040c00300330e6000103c02d033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33053c0ffcc00330e6000103c02d033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33053c0ffcc00330e6000103c024033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc04000f000330e6000103c024033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc04000f000330e6000103c023033c00033af9aa00c0f30003c000c000f73301fffffd33053c000c000330e6000103c023033c00033af9aa00c0f30003c000c000f73301fffffd33053c000c000330e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c012033c00033af9aa00c0da000030e6000103c012033c00033af9aa00c0da000030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00b003cbd000030f7000103c00b003cbd000030f7000103c00b003cbd00003cf7000103c00b003cbd00003cf7000103c00b003cbd00003ff7000103c00b003cbd00003ff7000103c00c003cbd00013fc0f8000103c00c003cbd00013fc0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffff8000103c00c003cbd00013ffff8000103c00c003cbd00013cf0f8000103c00c003cbd00013cf0f8000103c00b003cbc00003cf8000103c00b003cbc00003cf8000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-1:  Rectangle Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par {\*\bkmkend bk73}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangle control}{\rxe bk73}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Thermometers}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Thermometers\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk74}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Thermometers are used to show how far something has progressed.  The most familiar example of a thermometer is the one you see each time you boot your computer.  It's on the boot screen, and fills up gradually as the computer boots.  Here's a preview of the thermometer you'll create in Problem 14-2.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1078{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw336\pich86\picwgoal6720\pichgoal1720\macpict\bliptag-116674404\blipupi72{\*\blipuid f90bb09ce866bfed0beab4aeb0fec1ed}051f00000000005601501101a00082a0008e01000a0000000002d002d098002a000000000056015000000000005601500000000000560150000102d70002d70006003fd9ff00fc06003fd9ff00fc06003cd900003c06003cd900003c06003cd900003c06003cd900003c08013c0fdbff01f03c08013c0fdbff01f03c08013c0fdbff01f03c08013c0fdbff01f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c18043c0fc000fffe0000fcfc0000fcfc0000f0ef000203f03c18043c0fc000fffe0000fcfc0000fcfc0000f0ef000203f03c18083c0fc003c3c000003cfc00003cfe0000f0ed000203f03c18083c0fc003c3c000003cfc00003cfe0000f0ed000203f03c20183c0fc003c000ffc03c00ff03c3c03c00ffc3ff03f03ff00ffcf3000203f03c20183c0fc003c000ffc03c00ff03c3c03c00ffc3ff03f03ff00ffcf3000203f03c1e093c0fc003c003c3c03c03fec307c03c03c3c0f000f0fd3cf3000203f03c1e093c0fc003c003c3c03c03fec307c03c03c3c0f000f0fd3cf3000203f03c1e143c0fc003c003c3c03c03c003c3c03c03c3c0f000f0fd3cf3000203f03c1e143c0fc003c003c3c03c03c003c3c03c03c3c0f000f0fd3cf3000203f03c20033c0fc003fec302c03c03fec30bc03c03c3c0f3c0f03c3c0ffcf3000203f03c20033c0fc003fec302c03c03fec30bc03c03c3c0f3c0f03c3c0ffcf3000203f03c21173c0fc000ff00ffc0ff00ff00ffc0ff00ffc03f03fc3c3c30fd3cf6000203f03c21173c0fc000ff00ffc0ff00ff00ffc0ff00ffc03f03fc3c3c30fd3cf6000203f03c0f023c0fc0ed00010ff0f3000203f03c0f023c0fc0ed00010ff0f3000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0c033c0fc00fdfff03f003f03c0c033c0fc00fdfff03f003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c10033c0fc00ffaff00c0e700033003f03c0c033c0fc00fdfff03f003f03c0c033c0fc00fdfff03f003f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c0a023c0fc0dd000203f03c08013c0fdbff01f03c08013c0fdbff01f03c08013c0fdbff01f03c08013c0fdbff01f03c06003cd900003c06003cd900003c06003cd900003c06003cd900003c06003fd9ff00fc06003fd9ff00fc02d70002d700a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-2:  A Thermometer Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The resource definition and flags words look like this:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{8,8,200,16\},                      /* control rect */\par    thermometerControl \{\{\par       $0001,                          /* flags */\par       $1000,                          /* more flags */\par       0,                              /* refcon */\par       1,                              /* value for pos of mercury */\par       2,                              /* scale for mercury */\par       $00000000,                      /* color table reference */\par       \}\};\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-2:  A Typical Thermometer Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-1\tab Reserved; set to 0.\par }\pard \fi-1800\li2160\widctlpar\adjustright {\f4 0\tab 0 for a vertical control, 1 for a horizontal control.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-2\tab Reserved; set to 0.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 1-0\tab Defines the type of reference in the color table field.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par As usual, the color table is optional.  The thermometer control is the only one that uses color by default, though.  By default, the control is outlined with a black rectangle, and the "mercury" fills in with red in 640 mode, and blue in 320 mode.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetCtlValue}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The thermometer itself is controlled by two fields, labeled }{\f6\fs20 /* value for pos of mercury */}{\f4  and }{\f6\fs20 /* scale for mercury */}{\f4 .  The last of these tells the Control Manager what scale to use, starting at 0.  For example, to show a thermometer based on percent completion, you could use a scale value of 100.  The first value sets the original position of the thermometer, so it is almost always set to 0.  As you complete a task, your program should make calls to }{\f6\fs20 SetCtlValue}{\f4  to change the thermometer setting.\par Let's look at how this would work in a simple example.  We'll run the Savage floating-point benchmark, using a thermometer to show how far we've progressed.  The Savage benchmark repeatedly adds one to a value, using one of the most complicated ways to increment a number around \endash  but then, the purpose is to do a quick check of how fast floating-point calculations are performed.  The main loop looks like this:\par \par }\pard \qj\fi180\keepn\widctlpar\adjustright {\f6\fs20 sum := 1.0;\par for i := 1 to 250 do\par }\pard \qj\fi180\widctlpar\adjustright {\f6\fs20    sum := tan(arctan(exp(ln(sqrt(sqr(sum))))))+1.0;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par To use a thermometer to show the progress, we'd start by drawing a window with a static text item that said something like "Calculating..." and a thermometer control.  Since the loop will go from 0 to 250, it makes sense to set the scale to 250, and just use the loop variable }{\f6\fs20 i}{\f4  to set the control value.  Assuming the thermometer control has a control ID of 2, here's how to modify the loop to show the progress.  (Setting up and removing the window is left as an exercise for the reader \endash  literally.  See Problem 14-2.)\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlHandleFromID}}}{\v\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 ctlHandle := GetCtlHandleFromID(wPtr, 2);\par }\pard \qj\fi180\keepn\widctlpar\adjustright {\f6\fs20 sum := 1.0;\par for i := 1 to 250 do begin\par    SetCtlValue(i, ctlHandle);\par    sum := tan(arctan(exp(ln(sqrt(sqr(sum))))))+1.0;\par }\pard \qj\fi180\widctlpar\adjustright {\f6\fs20    end; \{for\}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are some things to keep in mind when you are using a thermometer.  The biggest is that updating the control takes time, too, and you don't want to add significantly to the time it takes to complete an operation by updating the thermometer too often.  The other is that some tasks don't like to be interrupted.  You may have to be a little creative in some circumstances.  For example, there is no convenient way for the boot code to know how long it will take you to boot your computer, since you can customize the operating system, use a variety of disk drives, and even add accelerator cards, and all of these effect the boot time.  Apple's programmer's took a rather pragmatic approach:  the boot code times itself, and writes the time to the disk after you boot.  Since you don't change the operating system very often, the boot time doesn't change often, either.  The thermometer itself is updated with an interrupt handler that simply watches the system clock to see how much time has elapsed.\par \par Problem 14-2:  Start with the solution to Problem 14-1.  Add a simple button called Savage.  When this button is pressed, bring up a new window with two controls, a static text control with a title of "Calculating..." and a thermometer control, as described in the text.  Update the thermometer as the benchmark runs.\par Try running the benchmark with and without updating the thermometer.  How much of the time is spent calculating, and how much time is spent showing the user how far things have progressed?  Is it worth it?\par You might immediately say, "No!"  Keep in mind, though, that in a real program the actual wait isn't nearly as important as the psychological wait.  An interesting example is the amount of time it takes to use the mouse as opposed to the keyboard.  Apple did a study which compared the two, but also asked the people who were being timed which took longer.  The result was interesting:  the people being tested said the keyboard was faster, but the stopwatch disagreed.\par {\*\bkmkend bk74}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 thermometer control}{\rxe bk74}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Icon Buttons}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Icon Buttons\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk75}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 An icon button is basically a simple button control with a picture inside the button instead of the text you are used to for a simple button.  You can also put text under the icon, more or less like a title.\par Icon controls really aren't very hard to create or use, but there are lots of options.  You can change the type of border, or eliminate it altogether; use text or leave it out; and you have a lot of control over how the icon is drawn.  Icons themselves are not just a picture, and there are a lot of little things you need to know about icons to use them effectively.  We'll cover all of these options and concepts in this section, but I want to start with a typical resource definition for an icon button, and the bit-by-bit breakdown of the flag words in an icon control.  It's a little complicated, but don't get bogged down in the details, yet.  Just skim through the definitions to see where things are, and refer back to this example and the flag words as you read the rest of the section.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{8,8,42,64\},                       /* control rect */\par    IconButtonControl \{\{\par       $0000,                          /* flags */\par       $1022,                          /* more flags */\par       0,                              /* refcon */\par       1001,                           /* Icon Ref */\par       1001,                           /* Title Ref */\par       0,                              /* color table ref */\par       $0F00,                          /* Display mode */\par       \{"P","p",0,0\}                   /* key equivalents */\par       \}\};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 rIcon resource}}}{\v\f6\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rIcon (1001) \{\par    $8000,                        /* Icon Type bit 15  1 = color, 0 = mono */\par    10,                                /* height of icon in pixels */\par    16,                                /* width of icon in pixels */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"AAAAAAAAAAAAAAAA"                /* icon image */\par    $"AAAAAAAAAAAAAAAA"\par    $"AAAAAAAAAAAAAAAA"\par    $"AAAAAAAAAAAAAAAA"\par    $"AAAAAAAAAAAAAAAA"\par    $"AAAAAAAAAAAAAAAA"\par    $"AAAAAAAAAAAAAAAA"\par    $"AAAAAAAAAAAAAAAA"\par    $"AAAAAAAAAAAAAAAA"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"AAAAAAAAAAAAAAAA",\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"FFFFFFFFFFFFFFFF"                /* icon mask */\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"FFFFFFFFFFFFFFFF";\par    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (1001) \{"Icon"\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-3:  A Typical Icon Button Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab These bits set the }{\f6\fs20 ctlHilite}{\f4  field for the control.\par 7\tab 0 for a normal, visible control, 1 for an invisible control.\par 6-3\tab Reserved; set to 0.\par 2\tab 0 for a border, 1 for no border.  The border is an outline around the edge of the button, like the rounded rectangle used on standard simple button controls.\par }\pard \fi-1800\li2160\keepn\widctlpar\adjustright {\f4 1-0\tab Assuming bit 2 is set, these bits determine the type of border that will be drawn.\par }\pard \fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Normal rounded rectangle.\par 01\tab A bold rounded rectangle.  As with simple buttons, this is a double outline with the outer line a little thicker than the inner line.\par 10\tab Normal square outline.\par }\pard \fi-360\li2880\widctlpar\adjustright {\f4 11\tab Square outline with a drop shadow.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-6\tab Reserved; set to 0.\par 5-4\tab Defines the type of reference for the field labeled }{\f6\fs20 /* Icon Ref */}{\f4 .\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Icon reference is a pointer.\par 01\tab Icon reference is a handle.\par 10\tab Icon reference is a resource ID.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 3-2\tab Defines the type of reference in the color table field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 1-0\tab Defines the type of reference for the field labeled }{\f6\fs20 /* Title Ref */}{\f4 .\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Title reference is a pointer.\par 01\tab Title reference is a handle.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 10\tab Title reference is a resource ID.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul displayMode}{\f4\ul  bits}{\f4  }{\f4\ul use}{\f4 \par 15-12\tab This is the background color; it is used instead of black for black and white icons.\par 11-8\tab This is the foreground color; it replaces white in black and white icons.\par 7-3\tab Reserved; set to 0.\par 2\tab If this bit is set, the icon image is anded with a gray pattern as it is drawn, giving an "unselected" look.  If the bit is clear, the image is not changed.\par 1\tab If this bit is set, a light gray pattern is used instead of the icon image.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 0\tab If this bit is set, the icon image is inverted.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 A Typical Icon Button}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 A Typical Icon Button\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 We'll start with a fairly typical, general case of the icon button.  Our starting case is a picture with text underneath, surrounded by a rounded rectangle border.  This is actually the same icon button that is defined in Listing 14-3; it's shown below in Figure 14-3.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1079{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw104\pich64\picwgoal2080\pichgoal1280\macpict\bliptag-1804719190\blipupi72{\*\blipuid 946e2baaad84a43cd2fc4afa64c35be0}031b00000000004000681101a00082a0008e01000a0000000002d0024098000e000000000040006800000000004000680000000000400068000102f30002f300060000f6ffff00060000f6ffff0009010fc0f8000203f00009010fc0f8000203f00007003ff60001fc0007003ff60001fc0007003cf600013c0007003cf600013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c000d003cfe00000ffdfffe00013c0007003cf600013c000a033c0000fff900013c000a033c0000fff900013c000a033c00003cf900013c000a033c00003cf900013c000f0d3c00003c00ff00ff03ff00003c000f0d3c00003c00ff00ff03ff00003c000d043c00003c03fcc303c0003c000d043c00003c03fcc303c0003c000f063c00003c03c003fec303c0003c000f063c00003c03c003fec303c0003c000d043c00003c03fcc303c0003c000d043c00003c03fcc303c0003c000f0d3c0000ff00ff00ff03c3c0003c000f0d3c0000ff00ff00ff03c3c0003c0007003cf600013c0007003cf600013c0007003cf600013c0007003cf600013c0007003cf600013c0007003cf600013c0007003ff60001fc0007003ff60001fc0009010fc0f8000203f00009010fc0f8000203f000060000f6ffff00060000f6ffff0002f30002f300a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-3:  A Typical Icon Button\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This icon button shows the three parts of an icon button: the border, the icon, and the text.  Two of these parts are optional; you can leave out the border or the text.  When the user clicks inside the icon rectangle, the icon button switches to a highlighted state, then switches back when the mouse is released, just like a simple button control.  The hit is reported the same way as a simple button control, too.\par Besides the three visible parts of the icon, you also need to specify the icon rectangle.  If you are using a border, the border will be drawn right inside of the rectangle.  The rectangle is important even if you aren't using a border, though, since it is used to position the icon and text.  To do that, the Control Manager starts by positioning the text right below the icon, forming a "super icon."  The resulting picture is centered in the rectangle.  Of course, the icon and text can be larger than the rectangle, and in that case they will overflow.  That causes all sorts of unsightly things to happen, though.  The three most severe are that the entire control isn't erased if you hide the control, only the part inside the rectangle; if the user clicks on a part of the icon that is outside of the rectangle, the button doesn't work; and when the button is inverted, only the part inside the rectangle is changed.  In short, it pays to make sure the control rectangle is large enough to hold the icon and text, even if you aren't using a border.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Controlling the Outline}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Controlling the Outline\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The least significant three bits of the flags word controls the border.  If bit 2 is clear (i.e. set to 0) there won't be a border at all, and bits 0 and 1 are ignored.  If bit 2 is set, bits 0 and 1 control the style of the border.  You get the same four styles that were available for a simple button, namely a rounded rectangle (the bits would be 100), a bold rounded rectangle (bits 101), a square button (bits 110) or a square button with a drop shadow (bits 111).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Title}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Title\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The title for the icon button is specified as a p-string.  Using resources, the easiest way to create a title is with an }{\f6\fs20 rPString}{\f4  resource, like the one you saw in the icon button example at the start of this section.\par The title becomes a part of the icon button, centered just below the icon itself.  That's not always what you want, since text inside of the icon button can ruin the effect of a picture used as a button.  To get rid of the title entirely, use 00 for bits 4 and 5 of the }{\f6\fs20 moreFlags}{\f4  field, then use 0 for the }{\f6\fs20 /* Title Ref */}{\f4  field.  This tells the Control Manager that the title reference is a pointer, then passes nil as the pointer.  The title itself will vanish, and the icon will be centered in the control rectangle.  You can use a static text control right below the icon for a title-like effect where the text doesn't become a part of the button itself.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Icons and Icon Masks}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Icons and Icon Masks\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 icon mask}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you look closely at Listing 14-3, you will see that there are actually two versions of the little picture that is drawn as the icon.  The first is the actual picture that will be drawn, and that's the part that is called the icon.  The second version of the picture is called the icon mask.  The icon mask tells QuickDraw II Auxiliary (which is the tool that actually ends up drawing the icons) what bits actually make up an icon.  The mask lets you create irregularly shaped pictures and drop them onto a background without wiping out the background itself.  That's why icons in the Finder don't have to be square, and why the blue desktop shows around the edges of even the most complicated icon.\par You can also create hollow icons using a hollow mask.  For example, here's a doughnut shaped icon.  The center is literally hollow, since the mask for the center is set to 0.  Whatever was on the screen before this icon is drawn will show up in the middle of the doughnut.\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 rIcon resource}}}{\v\f6\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rIcon (1001) \{\par    $8000,                        /* Icon Type bit 15  1 = color, 0 = mono */\par    10,                                /* height of icon in pixels */\par    16,                                /* width of icon in pixels */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"0000000AA0000000"                /* icon image */\par    $"000AAAAAAAAAA000"\par    $"00AAAAAAAAAAAA00"\par    $"0AAAAA0000AAAAA0"\par    $"AAAAA000000AAAAA"\par    $"AAAAA000000AAAAA"\par    $"0AAAAA0000AAAAA0"\par    $"00AAAAAAAAAAAA00"\par    $"000AAAAAAAAAA000"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"0000000AA0000000",\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"0000000FF0000000"                /* icon mask */\par    $"000FFFFFFFFFF000"\par    $"00FFFFFFFFFFFF00"\par    $"0FFFFF0000FFFFF0"\par    $"FFFFF000000FFFFF"\par    $"FFFFF000000FFFFF"\par    $"0FFFFF0000FFFFF0"\par    $"00FFFFFFFFFFFF00"\par    $"000FFFFFFFFFF000"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"0000000FF0000000";\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-4:  A Doughnut Shaped Icon\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There is also one restrictions on the size of the icon: all icons must be a multiple of eight pixels wide.  The icon you see here, for example, is 16 pixels wide.  Since icons can be irregularly shaped, though, this isn't really a severe limitation.  If you need an icon that is 14 pixels wide, create it with 16 pixels in the definition and use the icon mask to mask out the left and right pixel on each side.  The icon will end up being 16 pixels wide, but the figure drawn on the screen will be 14 pixels.  Since the Control Manager centers the icon in the icon button control, you won't even be able to tell that the icon is a little wider than the button.\par The mechanics of typing the icon definition are also sort of interesting.  The resource compiler has a mechanism for creating long hexadecimal fields using strings, which is what we're doing with this icon definition.  The icon itself is variable length, so the resource compiler needs some way of knowing where the end of the icon and the start of the icon mask is.  That's what the lone comma you see on the last line of the icon is for; it marks the end of one hexadecimal field.  The other lines must not have any punctuation after them at all \endash  no comma and no semicolon.  The resource compiler combines all of these lines into a single, long chunk, and fills in the values in the resource file with the appropriate hexadecimal values.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Display Mode Bits}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Display Mode Bits\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 displayMode}{\f4  field is a flags word that the Control Manager passes along to QuickDraw II Auxiliary when the icon is drawn.  It controls several obscure icon drawing options.  The first is that icons can be either colored or black and white.  The choice is actually made in the }{\f6\fs20 rIcon}{\f4  resource by setting or clearing the most significant bit of the first entry; setting the bit gives a colored icon, while clearing it gives a black and white icon.  While you'll probably use colored icons more often than black and white icons, there are some interesting things you can do with a black and white icon.  The most significant four bits of the }{\f6\fs20 displayMode}{\f4  field is a color; it replaces any white pixels in the icon.  The next four bits are also a color, controlling the black bits.  By setting these bits, you can quickly change the color of an icon without changing the icon image itself.  For a good example of how this capability can be used, try setting the color of a folder in the Finder.\par The last three bits if the }{\f6\fs20 displayMode}{\f4  field control some masking options.  You can use these three bits in combination to get a variety of masks, or you can set just one of the bits.  Most of the time, you'll leave all three bits clear, though.\par Bit 2 ands a light gray pattern with the image, giving a deselected look.  The Finder uses this mask when it draws the icon for a folder that is open.  You can use it for an icon button that is inactive.  Bit 1 copies a light gray pattern instead of drawing the picture; the Finder uses this for devices that are offline.  Finally, bit 0 inverts the image before drawing it.  The Finder uses this bit for icons that are selected.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Inactive Icon Buttons}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Inactive Icon Buttons\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Bits 15-8 of the }{\f6\fs20 flags}{\f4  word are passed on to the Control Manager as the }{\f6\fs20 ctlHilite}{\f4  field.  }{\f6\fs20 ctlHilite}{\f4  is used to make a control inactive.  For example, there may be situations when a control can't be used until something is selected in the dialog.  In that case, you would draw the icon in it's inactive state, and the Control Manager would not report hits on the control.\par I really have no idea why this field is available for an icon button but not for any of the other controls we've seen so far.  There is another way to set the active state for a control if you need to, using Control Manager calls.  I'd recommend setting these bits to 0 all of the time, creating active controls, then using Control Manager calls to activate and deactivate controls if you need to.  That way, all of the Controls are handled the same way, and there is less chance that you will make a mistake writing a program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Creating Icons in the Real World}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Creating Icons in the Real World\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It's certainly possible to create an icon by hand coding bit maps in a resource compiler source file, but it's very time consuming and pretty close to extremely boring.  In real life, if you want to use icon buttons, you really need some sort of a tool to draw the pictures.  A program like Design Master, which is very handy for laying out dialogs, is a good choice, since it can write the finished icon as an }{\f6\fs20 rIcon}{\f4  resource, and you can paste the result into your resource file for the program.  In a pinch, you can also use an icon editor or paint program, then write a quick program to dump the result as hexadecimal strings.  It's not hard to do, but of course a real programmer's CAD tool like Design Master saves you the trouble.\par \par Problem 14-3:  Start with the solution to Problem 14-2.  Add two arrow-shaped icons, one to the left of the three color radio buttons, and one to the right, as shown below.  Hook up the left arrow so clicking on it finds the current color radio button and sets the one to the left.  The right arrow button should select the radio button to the right on the one that is selected when the button is pressed.\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 rIcon resource}}}{\v\f6\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rIcon (1001) \{\par    $8000,                        /* Icon Type bit 15  1 = color, 0 = mono */\par    9,                                 /* height of icon in pixels */\par    8,                                 /* width of icon in pixels */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"FFFF0FFF"                        /* icon image */\par    $"FFF00FFF"\par    $"FF0F0000"\par    $"F0FFFFF0"\par    $"0FFFFFF0"\par    $"F0FFFFF0"\par    $"FF0F0000"\par    $"FFF00FFF"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"FFFF0FFF",\par    $"0000F000"                        /* icon mask */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"000FF000"\par    $"00FFFFFF"\par    $"0FFFFFFF"\par    $"FFFFFFFF"\par    $"0FFFFFFF"\par    $"00FFFFFF"\par    $"000FF000"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"0000F000";\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-5:  Left Arrow Icon\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1080{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex48\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag-64507173\blipupi72{\*\blipuid fc27b2db0a87c80ae8a6845009b88d4b}226a00000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000126033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0da00033000003fed000503f0000003c019033c00033af9aa00c0da00033000003fed000503f0000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c017033c00033af9aa00c0da000330000003ecfffe000103c017033c00033af9aa00c0da000330000003ecfffe000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00b003cbd000030f7000103c00b003cbd000030f7000103c00b003cbd00003cf7000103c00b003cbd00003cf7000103c00b003cbd00003ff7000103c00b003cbd00003ff7000103c00c003cbd00013fc0f8000103c00c003cbd00013fc0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ff0f8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffcf8000103c00c003cbd00013ffff8000103c00c003cbd00013ffff8000103c00c003cbd00013cf0f8000103c00c003cbd00013cf0f8000103c00b003cbc00003cf8000103c00b003cbc00003cf8000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-4:  Control Sampler Window\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk75}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 icon button control}{\rxe bk75}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Pictures}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Pictures\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk76}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Picture controls are used to put large, rectangular pictures into a window.  They are usually disabled, since they really aren't much good as buttons, and icon buttons do the job of creating a pictorial button better, anyway.  The reason picture controls don't make good buttons is that they just sit there.  Nothing visibly changes when you click on the picture.  In addition, you can't have a border and you can't create text titles.\par It's fair to ask why there is even such a thing as a picture control, since you could just draw whatever you wanted into the window with QuickDraw II commands.  Using a picture, though, you can create a background for the controls, drawing the picture before the controls are drawn.  (Controls are drawn in the reverse of the order in which they appear in the list of controls.)  You can also use the picture control to draw pictures automatically, at the same time the controls are drawn, avoiding any chance of flicker if there happens to be a lot of time between when the controls are drawn and when the picture is drawn.\par Here's a very simple picture control.  It creates a small gray square on the screen.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{23,43,40,64\},                     /* control rect */\par    PictureControl \{\{\par       $FF00,                          /* flags */\par       $1002,                          /* more flags */\par       0,                              /* refcon */\par       1001                            /* Picture Ref */\par       \}\};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 data rPicture (1001) \{\par    $"00000200020013001700118201000A0001C001C0FF3FFF3F9000000000000C00"\par    $"2A003C003B0054002A003D003B00540002000200130019000000EEEEEEEEEEEE"\par    $"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"\par    $"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"\par    $"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"\par    $"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"\par    $"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"\par    $"EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"\par    $"EEEEEEEEEEEE"\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-6:  Typical Picture Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab These bits set the }{\f6\fs20 ctlHilite}{\f4  field for the control.  For a picture control, this will normally be $FFxx, giving an inactive control.\par 7\tab 0 for a normal, visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 6-0\tab Reserved; set to 0.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab This bit tells the Control Manager that you are using a standard control.  It must be set to 1.\par 11-2\tab Reserved; set to 0.\par 1-0\tab Defines the type of reference for the field labeled }{\f6\fs20 /* Picture Ref */}{\f4 .\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Picture reference is a pointer.\par 01\tab Picture reference is a handle.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 10\tab Picture reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The various fields in the resource for the control and the various flag bits are all things you've seen several times by now, so I won't go over them point by point.  The only unusual feature of a picture control is the control rectangle.  Pictures can start out as any size, although they do fit into a rectangle.  If the control rectangle is not the same size as the picture, though, the picture is automatically scaled to fit into the rectangle, shrinking or enlarging the picture as necessary.  If you want the tools to figure out how big the picture is on the fly, just leave the bottom right coordinates for the rectangle at 0.  The Control Manager will fill in the proper values for a "normal" size picture before drawing the picture.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Creating Pictures}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Creating Pictures\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You might think that a picture would be a bit map, but that isn't actually true.  Pictures are a recording of various QuickDraw drawing commands.  In fact, one way to create the original data for a picture is to ask QuickDraw to start recording a picture, then draw something, and finally ask QuickDraw for the binary version of the picture.\par It's probably obvious, but this isn't something you're likely to do by hand.  By far the easiest and best way to create an }{\f6\fs20 rPicture}{\f4  resource definition is to use a program like Design Master, which can, among other things, read in a bit mapped drawing and convert it to a picture resource.\par If you would like to learn more about pictures, or even take a crack at creating some by hand, you'll need to do some reading outside of this course.  QuickDraw II Auxiliary is used to create and manipulate pictures; you can find a description of this tool in the }{\i\f4 Apple IIGS Toolbox Reference: Volume 2}{\f4 .  The format for a picture is outlined in }{\f4\ul Apple II Technical Notes, Apple IIGS #46: DrawPicture Data Format}{\f4 .  Appendix C tells you more about the technical notes and where to get them.\par Since creating pictures by hand isn't really a viable option I won't be assigning a problem that deals with pictures.  The picture control shown in Figure 14-6 will work, so if you want to try creating a picture control and don't have a program that will do it for you, you can give the control in Listing 14-6 a try.\par {\*\bkmkend bk76}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 picture controls}{\rxe bk76}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 EditLine Items}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 EditLine Items\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk77}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Edit line controls are the ones that let you enter a single line of text.  A common example is a string search dialog, like the one shown here from PRIZM.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1081{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw328\pich180\picwgoal6560\pichgoal3600\macpict\bliptag1694747234\blipupi72{\*\blipuid 6503ca6293b682b70a3dbf896eedd9b2}0ca10000000000b401481101a00082a0008e01000a0000000002d0024098002a0000000000b401480000000000b401480000000000b40148000102d70002d70007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0012033ffc0007f3ff04fc1cfffe7ff0ff01fc0012033ffc0007f3ff04fc1cfffe7ff0ff01fc0012033ffcffe7f3ff04fcfffffe7ff0ff01fc0012033ffcffe7f3ff04fcfffffe7ff0ff01fc0012033ffcffe7f3ff04fcf8e0f07ff0ff01fc0012033ffcffe7f3ff04fcf8e0f07ff0ff01fc0012033ffcffe7f3ff04fc3ce6667ff0ff01fc0012033ffcffe7f3ff04fc3ce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffcffe7f3ff04fcfce6667ff0ff01fc0012033ffc0007f3ff04fcf866707ff0ff01fc0012033ffc0007f3ff04fcf866707ff0ff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc0007003fdaff01fc00070030da00010c00070030da00010c00070030da00010c00070030da00010c000c0030fc00003fe1ff02c00c000c0030fc00003fe1ff02c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000e063001f18000c030e10002c00c000e063001f18000c030e10002c00c000e063001800000c030e10002c00c000e063001800000c030e10002c00c000e063001838f87cc30e10002c00c000e063001838f87cc30e10002c00c000e063001e18cccc030e10002c00c000e063001e18cccc030e10002c00c000e063001818cccc030e10002c00c000e063001818cccc030e10002c00c000e063001818cccc030e10002c00c000e063001818cccc030e10002c00c000e06300183ccc7cc30e10002c00c000e06300183ccc7cc30e10002c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000c0030fc000030e10002c00c000c0030fc00003fe1ff02c00c000c0030fc00003fe1ff02c00c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000b043003fffff8de00010c000b043003fffff8de00010c00150e30030000186198000e00030c000018e800010c00150e30030000186198000e00030c000018e800010c00150e30030000186198000600030c000018e800010c00150e30030000186198000600030c000018e800010c00150e30030000186d9f0f060f036c78d8f8e800010c00150e30030000186d9f0f060f036c78d8f8e800010c00150e30030000186d99998619836ccce198e800010c00150e30030000186d99998619836ccce198e800010c00150e30030000186d9999861f836cccc198e800010c00150e30030000186d9999861f836cccc198e800010c00150e300300001833199986180198ccc198e800010c00150e300300001833199986180198ccc198e800010c00160f300300001833198f0f0f019878c0f980e900010c00160f300300001833198f0f0f019878c0f980e900010c000b043003fffff8de00010c000b043003fffff8de00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000b043003fffff8de00010c000b043003fffff8de00010c00120530030000181efa0002018006e900010c00120530030000181efa0002018006e900010c001005300300001833f9000006e800010c001005300300001833f9000006e800010c0018113003000018301f1e1e01e1e3e1e38f8e318feb00010c0018113003000018301f1e1e01e1e3e1e38f8e318feb00010c00191230030000183033303303033333018606319980ec00010c00191230030000183033303303033333018606319980ec00010c001912300300001830331e3f01e3f331e186061b1f80ec00010c001912300300001830331e3f01e3f331e186061b1f80ec00010c001811300300001833330330003303303186c61b18eb00010c001811300300001833330330003303303186c61b18eb00010c00191230030000181e1f1e1e01e1e331e3c38f0e0f18ec00010c00191230030000181e1f1e1e01e1e331e3c38f0e0f18ec00010c000b043003fffff8de00010c000b043003fffff8de00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000b043003fffff8de00010c000b043003fffff8de00010c001207300300001861980ced000038f600010c001207300300001861980ced000038f600010c001308300300001861980030ee000018f600010c001308300300001861980030ee000018f600010c00231c30030000186d9f1c7c3c3c7c3e3c3c03c3cfe3e1f363c3c03c3e663e18f600010c00231c30030000186d9f1c7c3c3c7c3e3c3c03c3cfe3e1f363c3c03c3e663e18f600010c00210a30030000186d998c306660fd660806666db33333866600fd660018f600010c00210a30030000186d998c306660fd660806666db33333866600fd660018f600010c00231830030000186d998c307e3c6666607e06066db3333307e3c07efe660018f600010c00231830030000186d998c307e3c6666607e06066db3333307e3c07efe660018f600010c00230a300300001833198c366006fe660a6006666db3333306006060fe660018f600010c00230a300300001833198c366006fe660a6006666db3333306006060fe660018f600010c002418300300001833199e1c3c3c7c3e3c3c03c3cdb3e1f303c3c03cfe3e013c60f700010c002418300300001833199e1c3c3c7c3e3c3c03c3cdb3e1f303c3c03cfe3e013c60f700010c0017043003fffff8fb000060fb000003fb000006f300010c0017043003fffff8fb000060fb000003fb000006f300010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c000e033000007ff8ff00c0e700010c000e033000007ff8ff00c0e700010c000e0330000f80f800003ee700010c000e0330000f80f800003ee700010c001402300078f7ff01e3c0fc00f9ff00c0f600010c001402300078f7ff01e3c0fc00f9ff00c0f600010c0018033000e780f800013ce0fd00010780fa000078f600010c0018033000e780f800013ce0fd00010780fa000078f600010c0016023001dcf700010770fd00001cf900000ef600010c0016023001dcf700010770fd00001cf900000ef600010c0021093003b8003e3000181180fe000103b8fd000238001efd00021c0007f600010c0021093003b8003e3000181180fe000103b8fd000238001efd00021c0007f600010c00210e3003b800300000181980000c0003b8fd0002380033fd00020c0007f600010c00210e3003b800300000181980000c0003b8fd0002380033fd00020c0007f600010c00220e3003b8003071f0f81d8f199f0003b8fd00093800301f3e1e1e0c0007f600010c00220e3003b8003071f0f81d8f199f0003b8fd00093800301f3e1e1e0c0007f600010c00210e3003b8003c3199981f998f0c0003b8fd0002380030fd33020c0007f600010c00210e3003b8003c3199981f998f0c0003b8fd0002380030fd33020c0007f600010c00220e3003b800303199981b9f860c0003b8fd00093800303333303f0c0007f600010c00220e3003b800303199981b9f860c0003b8fd00093800303333303f0c0007f600010c00210e3003b8003031999819980f0d8003b8fd00013800fd3303300c0007f600010c00210e3003b8003031999819980f0d8003b8fd00013800fd3303300c0007f600010c00220e3003b800307998f8188f19870003b8fd000438001e1f33fe1e010007f600010c00220e3003b800307998f8188f19870003b8fd000438001e1f33fe1e010007f600010c0016023003b8f7000103b8fd000038f9000007f600010c0016023003b8f7000103b8fd000038f9000007f600010c0016023001dcf700010770fd00001cf900000ef600010c0016023001dcf700010770fd00001cf900000ef600010c0018033000e780f800013ce0fd00010780fa000078f600010c0018033000e780f800013ce0fd00010780fa000078f600010c001402300078f7ff01e3c0fc00f9ff00c0f600010c001402300078f7ff01e3c0fc00f9ff00c0f600010c000e0330000f80f800003ee700010c000e0330000f80f800003ee700010c000e033000007ff8ff00c0e700010c000e033000007ff8ff00c0e700010c00070030da00010c00070030da00010c00070030da00010c00070030da00010c0007003fdaff01fc0007003fdaff01fc0002d70002d700a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-5:  PRIZM's Find Dialog\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Edit line controls are fairly straight-forward to define and use.  In fact, probably the most complicated thing about this type of control is that it has two names.  There seems to have been a subtle argument over whether this is an edit line control or a line edit control.  Being strictly neutral, I use both terms.\par Here's a typical edit line control, followed by the definition for the flags.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{8,8,19,208\},                      /* control rect */\par    editLineControl \{\{\par       $0000,                          /* flags */\par       $7000,                          /* more flags */\par       0,                              /* refcon */\par       20,                             /* Max Size */\par       0,                              /* text Ref */\par       $D7,                            /* password character - 6.0 */\par       \}\};\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-7:  A Typical EditLine Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par 7\tab 0 for a normal, visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 6-0\tab Reserved; set to 0.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15\tab Reserved; set to 0.\par 14-12\tab Must be set to 1.\par 11-2\tab Reserved; set to 0.\par 1-0\tab Defines the type of reference for the text field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Text reference is a pointer.\par 01\tab Text reference is a handle.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 10\tab Text reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par When the control is drawn, the control rectangle will be surrounded by a box, and the editable text appears inside of this box.  Assuming you aren't doing anything really tricky, you'll be using the system font.  In that case, make sure the rectangle is at least 11 pixels high \endash  if it is any shorter, the Control Manager won't draw the text.  The width of the rectangle doesn't matter a whole lot, since the text will scroll sideways to accommodate text that is too long for the rectangle.\par You have the option of showing some default text in an edit line item when it is first drawn.  For example, SFO shows the default name for a file in an edit line item that let's the user enter a file name.  If you want to create some default text, set bits 0 and 1 of the }{\f6\fs20 moreFlags}{\f4  field to 10, then add an }{\f6\fs20 rPString}{\f4  resource with the default text, putting the resource ID for the text in the text reference field.  If you don't want default text, set bits 0 and 1 to 00 and use 0 for the text reference field.  Most of the time, any default text will change as the program runs (the search string will be the last one used, the file name will be the last one saved, and so on) so you'll set the default string in the resource to nil and set up any default string in from the program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Accessing Text}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Accessing Text\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Creating a line edit control is no harder than creating any other control.  Using one is pretty easy, too, since the Control Manager and }{\f6\fs20 TaskMaster}{\f4  handle all of the details of flashing the cursor and selecting text.  The major thing you have to do manually is read the text to see what the user typed.  That's done with }{\f6\fs20 GetLETextByID}{\f4 :\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GetLETextByID}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 GetLETextByID(wPtr, editLineID, textBuffer);\par }{\f4 \par The three parameters are a pointer to the window containing the control, the control ID, and a buffer to put the text in.  The buffer itself has to be two characters longer than the longest possible string the user can type.  That maximum length is a value you set when the control is defined; it's the value in the field labeled }{\f6\fs20 /* Max Size */}{\f4 .  If the maximum size is 255 characters or less, you can use the string as a Pascal string.  That second extra character you had to allow for in the buffer, though, is a null character that will be stuffed at the end of the string.  If you create a pointer to the byte right past the length byte at the start of the string, you have a pointer to a valid null-terminated string.  ORCA/Pascal's string handling facilities will work just fine with a null terminated string, allowing edit line strings up to 32K characters in length.  Of course, anything even approaching that length should be handled with a text edit control, like the one you used for your editor in Lesson 11.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetLETextByID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You can also put text into a text edit control, generally to create a default.  That's done with }{\f6\fs20 SetLETextByID}{\f4 :\par \par }{\f6\fs20 SetLETextByID(wPtr, editLineID, str);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The first two parameters are the same as for }{\f6\fs20 GetLETextByID}{\f4 ; the third is a p-string containing the default text.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Cut, Copy, Paste and Clear}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Cut, Copy, Paste and Clear\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Cut command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Copy command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Paste command}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Clear command}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Back when we created a TextEdit control, you saw that the Control Manager, }{\f6\fs20 TaskMaster}{\f4  and the TextEdit Tool Set worked together to handle the editing commands (cut, copy, paste and clear) for you.  }{\f6\fs20 TaskMaster}{\f4  does so much, in fact, that you may be starting to expect it to do everything.  Well, almost.  As it turns out, the editing commands don't get handled automatically for edit line controls.  If you want to support the editing commands in a window (and you should) you need to do a little extra work.\par In some ways, handling the editing commands is pretty easy, and in some ways it's ridiculously hard.  Actually handling the editing commands is pretty straight forward, at least on the surface.  When the user uses one of the menu editing commands, and your window has an edit line control, you just make a single call, passing the handle for the edit line item.  The LineEdit Tool Set takes things from there, deleting or adding text and redrawing the edit line control.\par \par }\pard \qj\li360\keepn\widctlpar\tx2520\adjustright {\f4\ul Menu Command}{\f4 \tab }{\f4\ul LineEdit Call}{\f4 \par }{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LECopy}}}{\v\f4 \par }{\f4 Copy\tab }{\f6\fs20 LECopy(leHandle);}{\f4 \par }{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEDelete}}}{\v\f4 \par }{\f4 Clear\tab }{\f6\fs20 LEDelete(leHandle);}{\f4 \par }{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LECut}}}{\v\f4 \par }{\f4 Cut\tab }{\f6\fs20 LECut(leHandle);}{\f4 \par }{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEPaste}}}{\v\f4 \par }\pard \qj\li360\widctlpar\tx2520\adjustright {\f4 Paste\tab }{\f6\fs20 LEPaste(leHandle);}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 So far, the hardest part is remembering that the LineEdit Tool Set calls Clear Delete.\par }\pard \qj\li360\keepn\widctlpar\tx2520\adjustright {\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEToScrap}}}{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEFromScrap}}}{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scraps}}}{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Scrap Manager}}}{\pard\plain \qj\li360\keepn\widctlpar\tx2520\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LineEdit Tool Set}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The LineEdit Tool Set uses a private scrap to store the stuff it copies, and pastes from the private scrap, too.  Sometimes that's what you want.  For example, you might want to allow copying and pasting between two edit line items in a search and replace dialog without effecting the scrap being used by the text editor.  In other cases, you do want to use the Scrap Manager.  In general, unless there is a good reason for not using the Scrap Manager, you should tell the LineEdit Tool Set to use the Scrap Manager.  To to that, call }{\f6\fs20 LEToScrap}{\f4  right after any Copy or Cut operation to move the LineEdit Tool Set scrap to the Scrap Manager, and call }{\f6\fs20 LEFromScrap}{\f4  just before calling }{\f6\fs20 LEPaste}{\f4  to copy the Scrap Manager's scrap into the LineEdit Tool Set's scrap.  Neither call has any parameters.  The only issue, and it's a minor one, is }{\f6\fs20 LEFromScrap}{\f4  will ignore the Scrap Manager's scrap if it has more than 255 characters.  No harm is done, it just won't use a scrap that is longer than 255 characters.\par So far, this looks pretty easy \endash  and it is.  The problem is figuring out just what the handle for the line edit item actually is, so you can pass it to the appropriate call.  There are two parts to this problem.  The first is figuring out which LineEdit control an editing command applies to (if any) and the second is figuring out what the line edit handle is \endash  unfortunately, it's not the same as the control handle for the line edit control!\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 target control}}}{\v\f4 \par }{\f4 Multiple controls are handled using the idea of the target control.  In loose terms, the target control is the one the user is typing in.  Unless you prevent it, the user can use the tab key to move from one target control to another.  (You would block the use of the tab key by, for example, allowing the user to use the tab key in a TextEdit control.)  The user can also pick the target control by clicking on the control, something they might do naturally to place the insertion point at a specific spot or select text.  You should only call the LineEdit Tool Set for an editing command if a line edit control is the target control.  To find out which control is the target control, call }{\f6\fs20 FindTargetCtl}{\f4 .  It works on the active window, returning a control handle.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FindTargetCtl}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ctl := FindTargetCtl;\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 You can pass the control handle to }{\f6\fs20 GetCtlID}{\f4  to find the control ID, then check to see if it matches the control IDs for any of your line edit controls.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you dig through the toolbox reference manuals, you will find out that the LineEdit Tool Set is completely independent of the Control Manager.  The Control Manager knows about the LineEdit Tool Set, and can set up a control that uses LineEdit Tool Set calls to function, but the LineEdit Tool Set has no idea what a control is.  The reason this is important is that the calls you just learned about (}{\f6\fs20 LECut}{\f4  and it's palls) are LineEdit Tool Set calls, so you can't just pass the control handle to them.  The line edit handle the LineEdit Tool Set calls expect is buried inside of the control record itself.  To make matters worse, there is no call to fetch the line edit handle directly; you have to fish out the values yourself.  Rather that make you suffer through a long discussion of how that's done, though, I'm just going to give you a subroutine that returns the correct field from the control record.  The subroutine is called }{\f6\fs20 GetCtlData}{\f4 , since the field it retrieves is actually called the }{\f6\fs20 ctlData}{\f4  field.  The subroutine is shown in Listing 14-8, along with a sample }{\f6\fs20 DoCut}{\f4  subroutine that implements all of the ideas we've talked about in this section.\par }{\f6\fs20 DoCut}{\f4  should be called when the user picks Cut from the Edit menu.  You can use this subroutine as a model to build subroutines to handle the other three editing commands.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function GetCtlData (ctl: ctlRecHndl): longint;\par \par \{ Returns the contents of a controls ctlData field              \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    ctl - control                                              \}\par \{                                                               \}\par \{ Returns: ctlData field                                        \}\par \par var\par    swap: integer;                       \{used to swap words\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    val: long;                           \{param/ctlData field\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{GetCtlData\}\par }{\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GetCtlParams}}}{\v\f6\fs20 \par }{\f6\fs20 val.long := GetCtlParams(ctl);\par swap := val.msw;\par val.msw := val.lsw;\par val.lsw := swap;\par GetCtlData := val.long;\par }\pard \li180\widctlpar\adjustright {\f6\fs20 end; \{GetCtlData\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure DoCut;\par \par \{ Handle a cut command                                          \}\par \par var\par    ctl: ctlRecHndl;                     \{target control handle\}\par    id: longint;                         \{control ID\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    port: grafPortPtr;                   \{caller's grafPort\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{DoCut\}\par port := GetPort;\par SetPort(wPtr);\par ctl := FindTargetCtl;\par id := GetCtlID(ctl);\par if (id = ctlLine1) or (id = ctlLine2) then begin\par    LECut(leRecHndl(GetCtlData(ctl)));\par    LEToScrap;\par    end; \{if\}\par SetPort(port);\par end; \{DoCut\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-8:  Sample }{\f6\fs20 DoCut}{\f4  Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Passwords}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Passwords\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 passwords}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Text edit controls are sometimes used to enter a password for online services or data encryption programs.  One of the customary things to do when a user types a password is to hide the actual characters typed, displaying some bogus character.  The last parameter in the text edit control resource definition is the character to display instead of the characters that are actually typed.  If you leave the parameter off, the text edit control works like you would normally expect, displaying the characters the user actually types.  If you put in a character, that is the character displayed.\par $D7 is the traditional password character on Apple computers.  This shows up as a hollow diamond character.\par \par Problem 14-4:  Start with the solution to problem 14-3.  Add two edit line items with a maximum allowed length of 20 characters.\par Make sure your controls support the Cut, Copy, Paste and Clear commands.  In particular, you should be able to cut or copy text from one control and paste it into another.\par The radio button controls in your program have key equivalents of R, G and B.  Try typing these characters in your line edit control.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1082{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag-1970966741\blipupi72{\*\blipuid 8a856f2b22512bbd29129bc051da5ccd}25a400000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000126033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0da00033000003fed000503f0000003c019033c00033af9aa00c0da00033000003fed000503f0000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c017033c00033af9aa00c0da000330000003ecfffe000103c017033c00033af9aa00c0da000330000003ecfffe000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c010033c00003fd1fff0000030f7000103c010033c00003fd1fff0000030f7000103c012033c000030d2000003f000003cf7000103c012033c000030d2000003f000003cf7000103c01d093c00003000fff0f0003cfe000103c0dd000003f000003ff7000103c01d093c00003000fff0f0003cfe000103c0dd000003f000003ff7000103c01f073c000030000f00f0f400003cfc00003cea000003f000013fc0f8000103c01f073c000030000f00f0f400003cfc00003cea000003f000013fc0f8000103c02c1c3c000030000f00ffc0fc03fc000fc03fc0003ff000ffc03fc03fc0ffc0eb000003f000013ff0f8000103c02c1c3c000030000f00ffc0fc03fc000fc03fc0003ff000ffc03fc03fc0ffc0eb000003f000013ff0f8000103c02b163c000030000f00f0f03c0f000003c0f00000f0f0003c00fef001003cea000003f000013ffcf8000103c02b163c000030000f00f0f03c0f000003c0f00000f0f0003c00fef001003cea000003f000013ffcf8000103c02b1b3c000030000f00f0f03c03fc0003c03fc000f0f0003c00fff03fc03cea000003f000013ffff8000103c02b1b3c000030000f00f0f03c03fc0003c03fc000f0f0003c00fff03fc03cea000003f000013ffff8000103c02c1c3c000030000f00f0f03c000f0003c000f000f0f0003cf0f00000f03cf0eb000003f000013cf0f8000103c02c1c3c000030000f00f0f03c000f0003c000f000f0f0003cf0f00000f03cf0eb000003f000013cf0f8000103c02b1c3c000030000f00f0f0ff03fc000ff03fc0003ff0000fc03fc03fc00fc0eb000003ef00003cf8000103c02b1c3c000030000f00f0f0ff03fc000ff03fc0003ff0000fc03fc03fc00fc0eb000003ef00003cf8000103c00e033c000030d2000003e5000103c00e033c000030d2000003e5000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c007003cb2000103c007003cb2000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c00e033c000030d2000003e5000103c00e033c000030d2000003e5000103c019093c00003000fff0f0003cfe000103c0dd000003e5000103c019093c00003000fff0f0003cfe000103c0dd000003e5000103c016073c000030000f00f0f600000fe2000003e5000103c016073c000030000f00f0f600000fe2000003e5000103c023183c000030000f00ffc0fc03fc000fc03fc000003ff00ff00ff0e7000003e5000103c023183c000030000f00ffc0fc03fc000fc03fc000003ff00ff00ff0e7000003e5000103c0210f3c000030000f00f0f03c0f000003c0f0fe00010f00fd3ce7000003e5000103c0210f3c000030000f00f0f03c0f000003c0f0fe00010f00fd3ce7000003e5000103c021143c000030000f00f0f03c03fc0003c03fc000000f00fd3ce7000003e5000103c021143c000030000f00f0f03c03fc0003c03fc000000f00fd3ce7000003e5000103c020133c000030000f00f0f03c000f0003c000f000000ffc3ce7000003e5000103c020133c000030000f00f0f03c000f0003c000f000000ffc3ce7000003e5000103c023183c000030000f00f0f0ff03fc000ff03fc03c0003f00ff00ff0e7000003e5000103c023183c000030000f00f0f0ff03fc000ff03fc03c0003f00ff00ff0e7000003e5000103c012033c000030f40000f0e0000003e5000103c012033c000030f40000f0e0000003e5000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-6:  Control Sampler with Edit Line Controls\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk77}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}{\rxe bk77}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 List Controls}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 List Controls\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk78}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 List controls are used to display more than one choice in a box.  It's possible, and even common, to have more things in the list than can be displayed in the box, so list controls come complete with their own scroll bars.  The most common examples of list controls are the lists of file names in the SFO dialogs.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1083{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich264\picwgoal6960\pichgoal5280\macpict\bliptag1379873753\blipupi72{\*\blipuid 523f33d930829dfac94898c196c28b6e}1b82000000000108015c1101a00082a0008e01000a0000000002d0024098002c0000000000eb01600000000000eb015c0000000000eb015c000102d50002d50006003fd7ff00c006003fd7ff00c0060030d70000c0060030d70000c0060030d70000c0060030d70000c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00e06307c000ffffff0df000203e0c00e06307c000ffffff0df000203e0c01e0a307c000c00003c00fc0018fb0008f0033e00007c3c3c60f2000203e0c01e0a307c000c00003c00fc0018fb0008f0033e00007c3c3c60f2000203e0c01f0a307c000cffff3c0303fc18fc000501800c330000fe660018f2000203e0c01f0a307c000cffff3c0303fc18fc000501800c330000fe660018f2000203e0c0200a307c000c3ffc3c03000318fd0f0a1f01f01833363c6666600cf2000203e0c0200a307c000c3ffc3c03000318fd0f0a1f01f01833363c6666600cf2000203e0c02114307c000c0ff03cffffc31819981819998198183e38fe66013c0cf2000203e0c02114307c000c0ff03cffffc31819981819998198183e38fe66013c0cf2000203e0c02114307c000c03c03c300033181f8f0f19998198183030fe6601060cf2000203e0c02114307c000c03c03c300033181f8f0f19998198183030fe6601060cf2000203e0c02014307c000c00003c0c000f1818018199998198183030fd66000cf2000203e0c02014307c000c00003c0c000f1818018199998198183030fd66000cf2000203e0c0210b307c000ffffffc03ffff1f8ffe0f0a1998f00c30303c7c3c3c18f2000203e0c0210b307c000ffffffc03ffff1f8ffe0f0a1998f00c30303c7c3c3c18f2000203e0c01606307c0003fffffcf6000003fb000060f2000203e0c01606307c0003fffffcf6000003fb000060f2000203e0c00901307cda000203e0c00901307cda000203e0c01a08307c003c3c187c01c0fd0006701e3f1e1e3180ec000203e0c01a08307c003c3c187c01c0fd0006701e3f1e1e3180ec000203e0c01707307c006660786003fc0002c03303fe33eb000203e0c01707307c006660786003fc0002c03303fe33eb000203e0c01e12307c00067c187c07cd8f0f00f1f03306033336f800f6ff04fc0003e0c01e12307c00067c187c07cd8f0f00f1f03306033336f800f6ff04fc0003e0c02112307c001c661806030e19998198c0330c0e1e3cf900010780f70004078003e0c02112307c001c661806030e19998198c0330c0e1e3cf900010780f70004078003e0c02412307c0006661806030c1f9f8198c01f0c033336f900051c000018c007fa0003e003e0c02412307c0006661806030c1f9f8198c01f0c033336f900051c000018c007fa0003e003e0c0230f307c0066661866030c18180198c00318fe33f9000538000018c003fa00037003e0c0230f307c0066661866030c18180198c00318fe33f9000538000018c003fa00037003e0c02913307c003c3c7e3c030c0f0f00f0c01e181e1e3198fa001038000018c7830cdfc3c3c000007003e0c02913307c003c3c7e3c030c0f0f00f0c01e181e1e3198fa001038000018c7830cdfc3c3c000007003e0c01701307ce800093800000d8cc30cdb6666fe00037003e0c01701307ce800093800000d8cc30cdb6666fe00037003e0c01701307ce800103800000d8cc30cdb67e3c000007003e0c01701307ce800103800000d8cc30cdb67e3c000007003e0c01701307ce80010380000070cc30cdb66006000007003e0c01701307ce80010380000070cc30cdb66006000007003e0c01701307ce8001038000007078787db63c3c000007003e0c01701307ce8001038000007078787db63c3c000007003e0c00e01307ce800001cf50003e003e0c00e01307ce800001cf50003e003e0c01202307c00eaff02000780f70004078003e0c01202307c00eaff02000780f70004078003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01c03307c00c0fe000615000010014004f9000303003003f2000203e0c01c03307c00c0fe000615000010014004f9000303003003f2000203e0c01c0d307c00c02aaa0008800020020028f900030300cc03f2000203e0c01c0d307c00c02aaa0008800020020028f900030300cc03f2000203e0c02211307c00c01004401111141401400401415140fd00fd03010000f6ff04fc0003e0c02211307c00c01004401111141401400401415140fd00fd03010000f6ff04fc0003e0c02410307c00c0200a800a082222022008022222fc0006030c00c3000680f70004038003e0c02410307c00c0200a800a082222022008022222fc0006030c00c3000680f70004038003e0c02c11307c00c01000401010111101100401111140fd000e033f03f3001c000100000150014010fe0003e003e0c02c11307c00c01000401010111101100401111140fd000e033f03f3001c000100000150014010fe0003e003e0c02a11307c00c02000800808222202200802222020fd00fd030300380022fe000380008020fe00037003e0c02a11307c00c02000800808222202200802222020fd00fd030300380022fe000380008020fe00037003e0c02a11307c00c01000401010141411411511415140fd00fd031100300011144101014041514140007003e0c02a11307c00c01000401010141411411511415140fd00fd031100300011144101014041514140007003e0c02306307c00c02aaa80fa000002fa00fd03110038002a222880a22082222280003003e0c02306307c00c02aaa80fa000002fa00fd03110038002a222880a22082222280003003e0c01e03307c00c0ef00150303ff0300300015154501011041115100007003e0c01e03307c00c0ef00150303ff0300300015154501011041115100007003e0c01e03307c00c0ef00150300000300380022202200822082220200003003e0c01e03307c00c0ef00150300000300380022202200822082220200003003e0c02803307c00c0fe000615000010014004f9000003feff1100380011141101014141514100007003e0c02803307c00c0fe000615000010014004f9000003feff1100380011141101014141514100007003e0c01f0d307c00c02aaa0008800020020028f9000003feff01001cf50003e003e0c01f0d307c00c02aaa0008800020020028f9000003feff01001cf50003e003e0c02411307c00c01004401111141401400401414540fd000503c0000f0007f60004058003e0c02411307c00c01004401111141401400401414540fd000503c0000f0007f60004058003e0c02411307c00c0200a800a08222202200802822080fd000503c0000f0000f6ff04fc0003e0c02411307c00c0200a800a08222202200802822080fd000503c0000f0000f6ff04fc0003e0c01f10307c00c010004010101111011004010541fc000303c0000ff2000203e0c01f10307c00c010004010101111011004010541fc000303c0000ff2000203e0c01e0d307c00c020008008082222022008fe02fc000303c0000ff2000203e0c01e0d307c00c020008008082222022008fe02fc000303c0000ff2000203e0c02011307c00c01000401010141411411511014540fd000303c0000ff2000203e0c02011307c00c01000401010141411411511014540fd000303c0000ff2000203e0c01506307c00c02aaa80f2000303c0000ff2000203e0c01506307c00c02aaa80f2000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01203307c00c0ef000303c0000ff2000203e0c01c03307c00c0fe000615000010014014f9000303c0000ff2000203e0c01c03307c00c0fe000615000010014014f9000303c0000ff2000203e0c01c0d307c00c02aaa0008800020020022f9000303c0000ff2000203e0c01c0d307c00c02aaa0008800020020022f9000303c0000ff2000203e0c02411307c00c01004401111141401400101415140fd000503c0000f0000f6ff04fc0003e0c02411307c00c01004401111141401400101415140fd000503c0000f0000f6ff04fc0003e0c02410307c00c0200a800a082222022002022222fc000603c0000f000680f70004038003e0c02410307c00c0200a800a082222022002022222fc000603c0000f000680f70004038003e0c02711307c00c01000401010111101100401111140fd000503c0000f001cfd000050fa0003e003e0c02711307c00c01000401010111101100401111140fd000503c0000f001cfd000050fa0003e003e0c02711307c00c02000800808222202200802222020fd000503c0000f0038fd000088fa00037003e0c02711307c00c02000800808222202200802222020fd000503c0000f0038fd000088fa00037003e0c02911307c00c01000401010141411411511415140fd000503c0000f0030fd000044fe50fd00037003e0c02911307c00c01000401010141411411511415140fd000503c0000f0030fd000044fe50fd00037003e0c02006307c00c02aaa80fa000002fa000503c0000f0038fd00fd88fd00033003e0c02006307c00c02aaa80fa000002fa000503c0000f0038fd00fd88fd00033003e0c01c03307c00c0ef000503c0000f0030fd000344445444fd00037003e0c01c03307c00c0ef000503c0000f0030fd000344445444fd00037003e0c01c03307c00c0ef000503c0000f0038fd000388888088fd00033003e0c01c03307c00c0ef000503c0000f0038fd000388888088fd00033003e0c02503307c00c0fe000615000010014014f9000503c0000f0038fd00fe500044fd00037003e0c02503307c00c0fe000615000010014014f9000503c0000f0038fd00fe500044fd00037003e0c0230d307c00c02aaa0008800020020022f9000503c0000f001cfc000080fb0003e003e0c0230d307c00c02aaa0008800020020022f9000503c0000f001cfc000080fb0003e003e0c02411307c00c01004401111141401400101414540fd000503c0000f0007f60004058003e0c02411307c00c01004401111141401400101414540fd000503c0000f0007f60004058003e0c02411307c00c0200a800a08222202200202822080fd000503c0000f0000f6ff04fc0003e0c02411307c00c0200a800a08222202200202822080fd000503c0000f0000f6ff04fc0003e0c01e10307c00c010004010101111011004010541fc000003fefff2000203e0c01e10307c00c010004010101111011004010541fc000003fefff2000203e0c01e0d307c00c020008008082222022008fe02fc000303555557f2000203e0c01e0d307c00c020008008082222022008fe02fc000303555557f2000203e0c02011307c00c01000401010141411411511014540fd000303555557f2000203e0c02011307c00c01000401010141411411511014540fd000303555557f2000203e0c01906307c00c02aaa80f20005035555570000f6ff04fc0003e0c01906307c00c02aaa80f20005035555570000f6ff04fc0003e0c01703307c00c0ef000603555557000780f70004078003e0c01703307c00c0ef000603555557000780f70004078003e0c01a03307c00c0ef000503555557001cfe00010787fa0003e003e0c01a03307c00c0ef000503555557001cfe00010787fa0003e003e0c02403307c00c0fe000615000010014014f90005035555570038fe00010cc3fa00037003e0c02403307c00c0fe000615000010014014f90005035555570038fe00010cc3fa00037003e0c0280d307c00c02aaa0008800020020022f90005035555570038fe00050c0307878780fe00037003e0c0280d307c00c02aaa0008800020020022f90005035555570038fe00050c0307878780fe00037003e0c02c11307c00c01004401111141401400101415140fd0005035555570038fe00050c030ccc0cc0fe00037003e0c02c11307c00c01004401111141401400101415140fd0005035555570038fe00050c030ccc0cc0fe00037003e0c02b10307c00c0200a800a08222202200a022222fc0005035555570038fe00050c030cc78fc0fe00037003e0c02b10307c00c0200a800a08222202200a022222fc0005035555570038fe00050c030cc78fc0fe00037003e0c02b11307c00c01000401010111101100101111140fd0005035555570038fe00040cc30cc0ccfd00037003e0c02b11307c00c01000401010111101100101111140fd0005035555570038fe00040cc30cc0ccfd00037003e0c02b11307c00c02000800808222202202202222020fd0005035555570038fe000007fd870080fe00037003e0c02b11307c00c02000800808222202202202222020fd0005035555570038fe000007fd870080fe00037003e0c02311307c00c01000401010141411411411415140fd000503555557001cf50003e003e0c02311307c00c01000401010141411411411415140fd000503555557001cf50003e003e0c01e06307c00c02aaa80fa000002fa000003feff02000780f70004078003e0c01e06307c00c02aaa80fa000002fa000003feff02000780f70004078003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01603307c00c0ef0005030000030000f6ff04fc0003e0c01203307c00c0ef00030303ff03f2000203e0c01203307c00c0ef00030303ff03f2000203e0c01903307c00c0fe000615000010014014f900fd03f2000203e0c01903307c00c0fe000615000010014014f900fd03f2000203e0c0190d307c00c02aaa0008800020020022f900fd03f2000203e0c0190d307c00c02aaa0008800020020022f900fd03f2000203e0c01d11307c00c01004401111141401400101414540fd00fd03f2000203e0c01d11307c00c01004401111141401400101414540fd00fd03f2000203e0c02011307c00c0200a800a08222202200a02822080fd0003033f03f3f2000203e0c02011307c00c0200a800a08222202200a02822080fd0003033f03f3f2000203e0c01f10307c00c010004010101111011001010541fc0003030c00c3f2000203e0c01f10307c00c010004010101111011001010541fc0003030c00c3f2000203e0c01b0d307c00c020008008082222022022fe02fc00fd03f2000203e0c01b0d307c00c020008008082222022022fe02fc00fd03f2000203e0c02011307c00c01000401010141411411411014540fd00030300cc03f2000203e0c02011307c00c01000401010141411411411014540fd00030300cc03f2000203e0c01506307c00c02aaa80f2000303003003f2000203e0c01506307c00c02aaa80f2000303003003f2000203e0c01703307c00c0ef00060300000300007ff7ff04f80003e0c01703307c00c0ef00060300000300007ff7ff04f80003e0c01202307c00eaff02000f80f7000407c003e0c01202307c00eaff02000f80f7000407c003e0c00f01307ce8000078f6ff04fc7803e0c00f01307ce8000078f6ff04fc7803e0c01001307ce80001e680f70004039c03e0c01001307ce80001e680f70004039c03e0c01a03307c003cfd0001e30ef1000101dcfd000050fa0003ee03e0c01a03307c003cfd0001e30ef1000101dcfd000050fa0003ee03e0c01b03307c0066fe0002018006f1000103b8fd000088fa00037703e0c01b03307c0066fe0002018006f1000103b8fd000088fa00037703e0c0230d307c00603e631e03e7060f00f8f0f5000103b0fe00040100510450fd00037703e0c0230d307c00603e631e03e7060f00f8f0f5000103b0fe00040100510450fd00037703e0c0210d307c003c66633301830619819980f5000103b8fd0000a0fe88fd00033703e0c0210d307c003c66633301830619819980f5000103b8fd0000a0fe88fd00033703e0c0220d307c000666363f0183061f8198f0f5000103b0fd000311105054fd00037703e0c0220d307c000666363f0183061f8198f0f5000103b0fd000311105054fd00037703e0c0210d307c006666363001830618019818f5000103b8fd00fe880080fd00033703e0c0210d307c006666363001830618019818f5000103b8fd00fe880080fd00033703e0c0210f307c003c3e1c1e01878f0f00f8f19980f7000103b8fd00fd50fd00037703e0c0210f307c003c3e1c1e01878f0f00f8f19980f7000103b8fd00fd50fd00037703e0c00f01307ce9000101dcf50003ee03e0c00f01307ce9000101dcf50003ee03e0c00f01307ce80000e7f60004059c03e0c00f01307ce80000e7f60004059c03e0c00f01307ce8000078f6ff04fc7803e0c00f01307ce8000078f6ff04fc7803e0c01001307ce800010f80f7000407c003e0c01001307ce800010f80f7000407c003e0c01202307c00eaff0200007ff7ff04f80003e0c01202307c00eaff0200007ff7ff04f80003e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c01303307c00c2ec0002030000f6ff04fc0003e0c01303307c00c2ec0002030000f6ff04fc0003e0c01403307c00c2ec000303000780f70004078003e0c01403307c00c2ec000303000780f70004078003e0c01a03307c00c2ec000203001cfe000078fd000070fe0003e003e0c01a03307c00c2ec000203001cfe000078fd000070fe0003e003e0c01a03307c00c2ec0002030038fe0000ccfd000030fe00037003e0c01a03307c00c2ec0002030038fe0000ccfd000030fe00037003e0c01b03307c00c2ec0002030038fe0005c07cf8787830fe00037003e0c01b03307c00c2ec0002030038fe0005c07cf8787830fe00037003e0c01a03307c00c2ec0002030038fe0000c0fdcc0030fe00037003e0c01a03307c00c2ec0002030038fe0000c0fdcc0030fe00037003e0c01b03307c00c2ec0002030038fe0005c0ccccc0fc30fe00037003e0c01b03307c00c2ec0002030038fe0005c0ccccc0fc30fe00037003e0c01903307c00c2ec0002030038fe00fdcc01c030fe00037003e0c098002c00eb00000108016000eb00000108015c00eb00000108015c00011903307c00c2ec0002030038fe00fdcc01c030fe00037003e0c01a03307c00c2ec0002030038fe0002787cccfe78fe00037003e0c01a03307c00c2ec0002030038fe0002787cccfe78fe00037003e0c01203307c00c0ec000203001cf50003e003e0c01203307c00c0ec000203001cf50003e003e0c01403307c00c0ec000303000780f70004078003e0c01403307c00c0ec000303000780f70004078003e0c01303307c00c0ec0002030000f6ff04fc0003e0c01303307c00c0ec0002030000f6ff04fc0003e0c00f03307c00c0ec000003f2000203e0c00f03307c00c0ec000003f2000203e0c00c02307c00eafff2000203e0c00c02307c00eafff2000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00901307cda000203e0c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c00801307fd9ff01e0c0060030d70000c0060030d70000c0060030d70000c0060030d70000c006003fd7ff00c006003fd7ff00c002d50002d500a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-7:  The SFO Save As Dialog Uses a List for Files\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par I've assumed throughout this course that you know how to }{\i\f4 use}{\f4  desktop programs, but list controls have a lot of options that you may not be aware of.  I'm going to mention them briefly here; if you want to know more about the options, you can look up lists in either the user documentation that comes with the computer and system software, or you can dig the same information out of the toolbox reference manuals.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 target control}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Most lists let you select more than one member by holding down the shift key or option key and clicking.  You can tab from one control to another \endash  if a list control is the target control, you can type a character key, and the List Manager will select the first element of the list that starts with the character you type.  The arrow keys can also be used to move through a list, or you can use the old standby and click on the scroll bar, then click on the list member you want to select.\par As usual, we'll start with a typical resource for a list control and the flags, then go over the details.  As with the icon control, there are a lot of options, so don't get too bogged down in the details, yet.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                /* control ID */\par    \{8,8,60,128\},                      /* control rect */\par    ListControl \{\{\par       $0000,                          /* flags */\par       $1400,                          /* more flags */\par       0,                              /* refcon */\par       0,                              /* list size */\par       5,                              /* List View */\par       $0000,                          /* List Type */\par       0,                              /* List Start */\par       10,                             /* ListMemHeight */\par       5,                              /* List Mem Size */\par       0,                              /* List Ref */\par       0.                              /* Color Ref */\par       \}\};\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-9:  A Typical Icon Button Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab Reserved; set to 0.\par 7\tab 0 for a normal, visible control, 1 for an invisible control.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 6-0\tab Reserved; set to 0.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-13\tab Reserved; set to 0.\par 12\tab Must be set to 1.\par 11\tab Reserved; set to 0.\par 10\tab Must be set to 1.\par 9-4\tab Reserved; set to 0.\par 3-2\tab Defines the type of reference for the color table field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 1-0\tab Defines the type of reference for the list field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab List reference is a pointer.\par 01\tab List reference is a handle.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 10\tab List reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Creating the List Control}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Creating the List Control\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The list control itself is made up of a rectangle and a scroll bar.  The scroll bar appears just to the right of the rectangle, and is always the same height as the rectangle.\par The items in the list are displayed inside the rectangle.  You have control over how many items are visible, and how high each line is, but you cannot control the width (it always matches the width of the rectangle), create sideways lists, or create scattered lists.  In other words, lists are line oriented.\par The fact that lists are line oriented doesn't mean they can only use text, though.  While we won't go into details here, it's possible to create a list of pictures, or anything else you'd like to draw.  The only restriction is that each item in the list must be the same height, and as I mentioned, one entire line will always be set aside for each member of the list.\par With this in mind, it's pretty easy to understand the various flag settings and the fields in the list resource.  Here's a field by field breakdown of the parts of the resource that are specific to the list control, along with the values from our example:\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20       0,                              /* list size */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You can create a list with nothing in it and fill in the list under program control, or you can create a list with some items already there.  Frankly, it's pretty tough to create the list from a resource, since the format for a list actually changes, and some lists need a custom drawing routine.  In most cases, you'll want to create an empty list and fill it in from the program.  That's how we'll do it in this section.  For an empty list, the list size field is set to 0.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20       5,                              /* List View */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This field gives the number of items you can see at any one time.  This has nothing to do with the number of items that are actually in the list; this is the number of lines that the user can see.\par The height of the list is set in a separate field labeled }{\f6\fs20 ListMemHeight}{\f4 .  The height of the control rectangle should be }{\f6\fs20 ListMemHeight*ListView+2}{\f4 ; the extra two pixels give a small border at the top and bottom of the list.\par The width is up to you.  If something in the list is too long to display, the right side will be chopped off.  The user can't scroll a list horizontally, so it's a good idea to make lists wide enough to see the entire line.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20       $0000,                          /* List Type */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The list type field is another flags word.  Something happened here that would be convenient if it were done throughout the toolbox: to get the default list control, you set all of the bits to 0.\par Bits 15 to 3 are reserved, and must be set to 0.\par Bit 2 controls how the scroll bar is drawn.  Normally, the scroll bar is drawn to the right of the control rectangle, so the area covered by the control is a little wider than the rectangle you code in the resource.  If you set this bit, the size of the list area is reduced enough so the scroll bar lies entirely inside of the control rectangle.  This hacks a little off of the end of each line, but it gives you better control over the space in the window, allowing very precise alignment of the right edge with other controls.\par Bit 1 controls the type of selections allowed.  Normally the user can select any number of items in the list by shift clicking or one of the other selection shortcuts.  If this bit is set, only one item can be selected at a time.\par Bit 0 controls the type of strings used in the list.  Setting the bit to 0 gives the normal p-strings, with a leading length byte.  If the bit is set to 1, the strings should be null terminated strings.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20       0,                              /* List Start */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When the list is first drawn, you can set things up so a particular item in the list appears at the top.  Normally this value is set to 1 to show the first item in the list, or to 0 when you aren't supplying a default list in the resource.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20       10,                             /* ListMemHeight */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This value gives the height of one line of the list, in pixels.  A value of 10 works well when the list contains text strings using the system font.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20       5,                              /* List Mem Size */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The list itself is defined as an array of list items, but strangely enough, the elements of the array don't have a fixed size.  We'll go into this in gory detail in a moment, but for now, this is the field you use to specify the length of each element of the list array.\par \par }\pard \li180\keepn\widctlpar\adjustright {\b\f6\fs20       0,                              /* List Ref */\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This field points to a list resource.  Using the list resource, you can set up a default list, but there are a number of dicey technical issues related to doing so, especially if your list needs a special list drawing routine.  If you want to try setting up a default list, refer to the }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , pages 28-57 and E-51 to get started.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Building a List}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Building a List\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 With a list control in place, the next step is to create the list.  The list itself is an array with two fixed fields in front, and any number of other fields afterward.  As a general rule, it's best to define your own list type instead of using the one from the interface file.  After all, the size of each element in the list and the size of the list itself need to be customized for each list.\par In the simplest, and normal, case, each list element is a five byte long record.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 type\par    listElement = record\par       memPtr: pStringPtr;\par       memFlag: byte;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20       end;\par }{\f4 \par }{\f6\fs20 memPtr}{\f4  is a pointer to a p-string; this is the text the List Manager will draw on each line.  If the first thing in your list isn't a p-string, you have to supply your own custom drawing routine to draw the list elements.  }{\f6\fs20 memFlag}{\f4  is a flag byte.  (Since it is a byte, not a word, there are only eight bits, not the sixteen bits you are used to in flag words.)  Bits 6 and 7, in combination, let you tell the List Manager if the list member can be selected, and let the List Manager tell you if the memory actually has been selected.  This flag byte has to be in this location for the List Manager to work correctly with your list.\par \par }\pard \qj\li360\keepn\widctlpar\tx1440\adjustright {\f4\ul Bits 7-6}{\f4 \tab }{\f4\ul Meaning}{\f4 \par 00\tab The list member can be selected, but it isn't currently selected.\par 01\tab The list member is disabled, and always shows up as dimmed.\par 10\tab The list member can be selected, and at the moment, it is selected.\par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f4 11\tab The list member is disabled, but it is currently selected.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The list itself is an array of these records.  You can create the list dynamically if it will change size, or you can just use a fixed size array.  Using a fixed size array, you might have something like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 const\par    listSize = 8;\par \par type\par    listArray = array[1..listSize] of listElement;\par \par var\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    list: listArray;\par }{\f4 \par The list itself should be filled in before you pass the list to the List Manager.  Be sure and fill in both the pointer to the string and the flag byte.  (The flag byte is normally initialized to 0.)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewList2}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once you have a list and a control, the next step is to connect the two.  That's done with the List Manager's }{\f6\fs20 NewList2}{\f4  tool call:\par \par }{\f6\fs20 NewList2(nil, 1, ord4(@listArray), 0, listSize, cHandle);}{\f4 \par \par There are several parameters, most of which are actually overriding values from the resource definition.  The first parameter is the address of the procedure that draws lines in the list.  Passing nil, as we're doing here, tells the List Manager to do that for us.  Passing }{\f6\fs20 pointer(-1)}{\f4  tells the List Manager to keep on using whatever drawing routine it was using before.  You can also pass the address of a custom drawing routine; that's something we'll talk about a little later.\par The second parameter, which is a 1 in our sample call, is the element in the list to put at the top.  The first element in the list is numbered 1.\par The next two parameters are the list itself.  The first is a pointer to the first element of the list, but there's a catch: you pass the parameter as a long integer.  The reason is that it doesn't have to be a pointer; it could also be a handle or a resource ID.  The parameter right after, which is a 0 in our sample call, tells the List Manager what sort of value we are passing for the list.  The 0 we are passing tells the List Manager to expect a pointer, 1 is used for a handle, and 2 is used if the list is given as a resource number.\par The next element is the size of the list; that's the number of elements that are actually in the list at the current time.  In this example, we're passing the size of the array, so each element of the array needs to point to a valid string, and needs to have the flag byte initialized.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlHandleFromID}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last parameter is the control handle, which you can get by calling }{\f6\fs20 GetCtlHandleFromID}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Sorting Lists}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Sorting Lists\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sometimes it makes sense to sort a list, say alphabetically, before you display the list, but it's easier to build the list out of order.  The most common list of all, a list of file names, is a good example.  Making calls to GS/OS, it's pretty easy to get all of the file names, but GS/OS passes them back in the order that the files appear on disk, which isn't usually alphabetical order.  People are used to seeing the file names in alphabetical order, though, and some of the keyboard shortcuts the List Manager supports only work when the list is sorted alphabetically.\par The List Manager can sort the list for you.  In fact, it's pretty easy to sort the list:\par \par }{\f6\fs20 SortList2(nil, cHandle);}{\f4 \par \par }\pard \qj\widctlpar\adjustright {\f4 This call sorts the list, doing all sorts of intelligent things, like ignoring the case of letters and handling foreign characters, like \u252\'9f, in a reasonable way.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 You can get tricky with this call, passing a custom sort procedure for the first parameter.  Unfortunately, the person who designed the mechanism for custom sort routines either didn't know or didn't care how high-level languages work, and as a result, you have to define the sort routine from assembly language.  If you would like to see the details, refer to the }{\i\f4 Apple IIGS Toolbox Reference: Volume 1}{\f4 , page 11-24.\par The last parameter, of course, is the list control handle.\par If you sort the list after it has already been displayed, or if you add, remove, or change a member of the list, you need to tell the List Manager to redraw all or part of the list.  After all, the List Manager really doesn't know what you are doing to the list while your program has control.  To redraw the list, make a call to }{\f6\fs20 DrawMember2}{\f4 , like this:\par \par }{\f6\fs20 DrawMember2(item, cHandle);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 DrawMember2}{\f4  draws the entire list if you pass 0, and a specific item from the list if you pass some other value.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Custom Draw Procedures}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Custom Draw Procedures\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fortunately, custom draw procedures don't suffer the same limitation as custom sort procedures \endash  you can define one in Pascal!  Here's a framework for a custom list draw procedure:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{$databank+\}\par \par procedure CustomDraw (r: rect; member: listElementPtr;\par    ctlHandle: ctlRecHndl);\par \par \{ Custom List Drawing Procedure                                 \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    r - rectangle enclosing the area where the list element is \}\par \{        to be drawn                                            \}\par \{    member - pointer to the list element to draw               \}\par \{    ctlHandle - scroll bar handle                              \}\par \par begin \{CustomDraw\}\par end; \{CustomDraw\}\par \par \{$databank+\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-10:  Custom Draw Procedure Framework\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par To use this procedure, pass the address of the procedure (}{\f6\fs20 @CustomDraw}{\f4 ) as the first parameter to }{\f6\fs20 NewList2}{\f4 .  As with any procedure that will be called by the tools, you must remember to tell the compiler to reset the data bank register with the }{\f6\fs20 \{$databank+\}}{\f4  directive.\par The first of the parameters is a rectangle enclosing the area where the list element is to be drawn.  You're on the honor system \endash  drawing outside of the lines leads to a messy window.  The next parameter is a pointer to the list element to draw.  If you need to know the relative position, you can count it off by scanning your array, or calculate it based on the address of the array.  Be sure to check the flag byte to see if the list member is disabled; you generally need to draw the item in a dimmed state if it is.  You also need to check to see if the item is selected; selected items are generally drawn in inverse.\par \par Problem 14-5:  Start with the solution to problem 14-4.  Add a list control that is tall enough for 4 items and 130 pixels wide, as seen in Figure 14-8.  From your program, create a list with ten states:\par \par }\pard \qj\li720\widctlpar\tx2520\tx4320\tx6120\tx7920\adjustright {\f4 California\tab Colorado\tab Connecticut\tab New Hampshire\tab New York\par New Mexico\tab New Jersey\tab Alaska\tab Alabama\tab Arkansas\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Create the list with the states in this order, then call }{\f6\fs20 SortList2}{\f4  to sort the items before calling }{\f6\fs20 NewList2}{\f4  to display the list.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 You should be able to select any of the states, or even a range of states, and you should be able to use keyboard characters to select a particular member.  Make sure all of that works for your list.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1084{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag444637227\blipupi72{\*\blipuid 1a80a02ba5f3f5199dad26d2e12fad92}2d0600000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000126033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0da00033000003fed000503f0000003c019033c00033af9aa00c0da00033000003fed000503f0000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c017033c00033af9aa00c0da000330000003ecfffe000103c017033c00033af9aa00c0da000330000003ecfffe000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c010033c00003fd1fff0000030f7000103c010033c00003fd1fff0000030f7000103c012033c000030d2000003f000003cf7000103c012033c000030d2000003f000003cf7000103c01d093c00003000fff0f0003cfe000103c0dd000003f000003ff7000103c01d093c00003000fff0f0003cfe000103c0dd000003f000003ff7000103c01f073c000030000f00f0f400003cfc00003cea000003f000013fc0f8000103c01f073c000030000f00f0f400003cfc00003cea000003f000013fc0f8000103c02c1c3c000030000f00ffc0fc03fc000fc03fc0003ff000ffc03fc03fc0ffc0eb000003f000013ff0f8000103c02c1c3c000030000f00ffc0fc03fc000fc03fc0003ff000ffc03fc03fc0ffc0eb000003f000013ff0f8000103c02b163c000030000f00f0f03c0f000003c0f00000f0f0003c00fef001003cea000003f000013ffcf8000103c02b163c000030000f00f0f03c0f000003c0f00000f0f0003c00fef001003cea000003f000013ffcf8000103c02b1b3c000030000f00f0f03c03fc0003c03fc000f0f0003c00fff03fc03cea000003f000013ffff8000103c02b1b3c000030000f00f0f03c03fc0003c03fc000f0f0003c00fff03fc03cea000003f000013ffff8000103c02c1c3c000030000f00f0f03c000f0003c000f000f0f0003cf0f00000f03cf0eb000003f000013cf0f8000103c02c1c3c000030000f00f0f03c000f0003c000f000f0f0003cf0f00000f03cf0eb000003f000013cf0f8000103c02b1c3c000030000f00f0f0ff03fc000ff03fc0003ff0000fc03fc03fc00fc0eb000003ef00003cf8000103c02b1c3c000030000f00f0f0ff03fc000ff03fc0003ff0000fc03fc03fc00fc0eb000003ef00003cf8000103c00e033c000030d2000003e5000103c00e033c000030d2000003e5000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c007003cb2000103c007003cb2000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c00e033c000030d2000003e5000103c00e033c000030d2000003e5000103c019093c00003000fff0f0003cfe000103c0dd000003e5000103c019093c00003000fff0f0003cfe000103c0dd000003e5000103c016073c000030000f00f0f600000fe2000003e5000103c016073c000030000f00f0f600000fe2000003e5000103c023183c000030000f00ffc0fc03fc000fc03fc000003ff00ff00ff0e7000003e5000103c023183c000030000f00ffc0fc03fc000fc03fc000003ff00ff00ff0e7000003e5000103c0210f3c000030000f00f0f03c0f000003c0f0fe00010f00fd3ce7000003e5000103c0210f3c000030000f00f0f03c0f000003c0f0fe00010f00fd3ce7000003e5000103c021143c000030000f00f0f03c03fc0003c03fc000000f00fd3ce7000003e5000103c021143c000030000f00f0f03c03fc0003c03fc000000f00fd3ce7000003e5000103c020133c000030000f00f0f03c000f0003c000f000000ffc3ce7000003e5000103c020133c000030000f00f0f03c000f0003c000f000000ffc3ce7000003e5000103c023183c000030000f00f0f0ff03fc000ff03fc03c0003f00ff00ff0e7000003e5000103c023183c000030000f00f0f0ff03fc000ff03fc03c0003f00ff00ff0e7000003e5000103c012033c000030f40000f0e0000003e5000103c012033c000030f40000f0e0000003e5000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c00c033c00000fdbffdb000103c00c033c00000fdbffdb000103c012033c00000ce0000003fe000003db000103c012033c00000ce0000003fe000003db000103c022073c00000c00000c0ffc000203c3c0f90002f0003cf700040300030003db000103c022073c00000c00000c0ffc000203c3c0f90002f0003cf700040300030003db000103c020073c00000c00000f0ffc000203c3c0f90000f0f5000403000cc003db000103c020073c00000c00000f0ffc000203c3c0f90000f0f5000403000cc003db000103c02d1e3c00000c00000fcf03fc3c03c003c3c0ffcfffc0ffc03fc0ffc0fc0f3c0ff0fb00040300303003db000103c02d1e3c00000c00000fcf03fc3c03c003c3c0ffcfffc0ffc03fc0ffc0fc0f3c0ff0fb00040300303003db000103c02c123c00000c00000fff0f0f3cf3c003ffc3c3cf3cfdf00700f0f03c0fc03c3cfb00040300c00c03db000103c02c123c00000c00000fff0f0f3cf3c003ffc3c3cf3cfdf00700f0f03c0fc03c3cfb00040300c00c03db000103c02d0d3c00000c00000f3f0fff3cf3c003fec301cf3cfef0083fc0f0f03c0f003ffcfb00040303f03f03db000103c02d0d3c00000c00000f3f0fff3cf3c003fec301cf3cfef0083fc0f0f03c0f003ffcfb00040303f03f03db000103c02c053c00000c0000fe0f04000f0f0003fec301cf3cfef00000fef0033c0f003cfa00040300303003db000103c02c053c00000c0000fe0f04000f0f0003fec301cf3cfef00000fef0033c0f003cfa00040300303003db000103c02d1e3c00000c00000f0303fc0f0f0003c3c0ffcf3cf0ffc03fc0f0f0ff0f000ff0fb00040300303003db000103c02d1e3c00000c00000f0303fc0f0f0003c3c0ffcf3cf0ffc03fc0f0f0ff0f000ff0fb00040300303003db000103c016033c00000cf10000f0f100040300303003db000103c016033c00000cf10000f0f100040300303003db000103c012033c00000ce0000403003ff003db000103c012033c00000ce0000403003ff003db000103c012033c00000ce0000003fe000003db000103c012033c00000ce0000003fe000003db000103c019073c00000c00000c0ffb000103c0ec000003fdffdb000103c019073c00000c00000c0ffb000103c0ec000003fdffdb000103c01b073c00000c00000f0ffb000103c0ec000003fecc00cfdb000103c01b073c00000c00000f0ffb000103c0ec000003fecc00cfdb000103c025183c00000c00000fcf03fc3c03c00003c0ff03cf03fc03fc0f0ff5000003fd33db000103c025183c00000c00000fcf03fc3c03c00003c0ff03cf03fc03fc0f0ff5000003fd33db000103c0250e3c00000c00000fff0f0f3cf3c00003fec302f00f00fd0ff5000003fecc00cfdb000103c0250e3c00000c00000fff0f0f3cf3c00003fec302f00f00fd0ff5000003fecc00cfdb000103c025183c00000c00000f3f0fff3cf3c00003c3ffc3c003fc0fff0f3ff5000003fd33db000103c025183c00000c00000f3f0fff3cf3c00003c3ffc3c003fc0fff0f3ff5000003fd33db000103c027053c00000c0000fe0f0f000f0f0003c3c3c003c0000f0f0003cff5000003fecc00cfdb000103c027053c00000c0000fe0f0f000f0f0003c3c3c003c0000f0f0003cff5000003fecc00cfdb000103c025183c00000c00000f0303fc0f0f0000ff00ff03c003fc03fc0c0ff5000003fd33db000103c025183c00000c00000f0303fc0f0f0000ff00ff03c003fc03fc0c0ff5000003fd33db000103c017033c00000cee000103fcf5000003fecc00cfdb000103c017033c00000cee000103fcf5000003fecc00cfdb000103c010033c00000ce0000003fd33db000103c010033c00000ce0000003fd33db000103c00c033c00000fdbffdb000103c00c033c00000fdbffdb000103c01f073c00000ffffff3f0fcff02fcffcffdff00c3f0ff03c000000fdb000103c01f073c00000ffffff3f0fcff02fcffcffdff00c3f0ff03c000000fdb000103c01b073c00000ffffff0f0fcff02fc3f0febff03c000000fdb000103c01b073c00000ffffff0f0fcff02fc3f0febff03c000000fdb000103c026183c00000ffffff030fc03c3fc3ffc0c0fc03f0f0f03fc03fc03f4ff03c000000fdb000103c026183c00000ffffff030fc03c3fc3ffc0c0fc03f0f0f03fc03fc03f4ff03c000000fdb000103c0240e3c00000ffffff000f0f0c30c3ffc00fe0f02c03fc3fdf0f4ff03c000000fdb000103c0240e3c00000ffffff000f0f0c30c3ffc00fe0f02c03fc3fdf0f4ff03c000000fdb000103c026183c00000ffffff0c0f000c30c3ffc330f000ff0ffc3f0fff0f0f4ff03c000000fdb000103c026183c00000ffffff0c0f000c30c3ffc330f000ff0ffc3f0fff0f0f4ff03c000000fdb000103c024053c00000ffffffef00bfff0f0fffc3f0f0fffc03fc3fdf0f4ff03c000000fdb000103c024053c00000ffffffef00bfff0f0fffc3f0f0fffc03fc3fdf0f4ff03c000000fdb000103c021183c00000ffffff0fcfc03f0f0fffc3f0fc03f0f0f00fc03fc03f0ffdb000103c021183c00000ffffff0fcfc03f0f0fffc3f0fc03f0f0f00fc03fc03f0ffdb000103c00c033c00000fdbffdb000103c00c033c00000fdbffdb000103c010033c00000fdffffe000003db000103c010033c00000fdffffe000003db000103c012033c00000ce0000403003ff003db000103c012033c00000ce0000403003ff003db000103c020073c00000c00000c0ffc000203c3c0fe00000ff000040300303003db000103c020073c00000c00000c0ffc000203c3c0fe00000ff000040300303003db000103c020073c00000c00000f0ffc000203c3c0fe00000ff000040300303003db000103c020073c00000c00000f0ffc000203c3c0fe00000ff000040300303003db000103c023143c00000c00000fcf03fc3c03c003c3c0ff03cf0f0ff100040300303003db000103c023143c00000c00000fcf03fc3c03c003c3c0ff03cf0f0ff100040300303003db000103c023143c00000c00000fff0f0f3cf3c000ff03c3c3f00f3cf100040303f03f03db000103c023143c00000c00000fff0f0f3cf3c000ff03c3c3f00f3cf100040303f03f03db000103c023143c00000c00000f3f0fff3cf3c0003c03c3c3c00ff0f100040300c00c03db000103c023143c00000c00000f3f0fff3cf3c0003c03c3c3c00ff0f100040300c00c03db000103c023053c00000c0000fe0f0b000f0f00003c03c3c3c00f3cf100040300303003db000103c023053c00000c0000fe0f0b000f0f00003c03c3c3c00f3cf100040300303003db000103c023143c00000c00000f0303fc0f0f00003c00ff03c00f0ff1000403000cc003db000103c023143c00000c00000f0303fc0f0f00003c00ff03c00f0ff1000403000cc003db000103c012033c00000ce000040300030003db000103c012033c00000ce000040300030003db000103c012033c00000ce0000003fe000003db000103c012033c00000ce0000003fe000003db000103c00c033c00000fdbffdb000103c00c033c00000fdbffdb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-8:  Control Sampler with List Control\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk78}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 list controls}{\rxe bk78}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Pop-up Menus}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Pop-up Menus\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk79}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Pop-up menus are a cross between the concept of a radio button and the user interface of a menu.  The control itself has two parts, a title (on the left in Figure 14-9) and the result, or pop-up rectangle (on the right).  Figure 14-9 shows a window with a typical pop-up control; this one is from Design Master.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1085{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw197\pich154\picwgoal3940\pichgoal3080\macpict\bliptag1467382658\blipupi72{\*\blipuid 57767b82449ce3ce579bdecb11935e82}09c300000000009a00c51101a00082a0008e01000a0000000002d0024098001a00000000009a00c800000000009a00c500000000009a00c5000102e70002e7000af800003ff4ff00fcff000af800003ff4ff00fcff000af8000030f400000cff000af8000030f400000cff000af8000030f400000cff000af8000030f400000cff0010f8000030fd00021800f0fb00000cff0010f8000030fd00021800f0fb00000cff0010f8000030fd0002180198fb00020fc00010f8000030fd0002180198fb00020fc00014f8000a300007f0f0f8f180f1f198fe00020fc00014f8000a300007f0f0f8f180f1f198fe00020fc00014f80003300006d9fe990381999998fe00020fc00014f80003300006d9fe990381999998fe00020fc00014f8000a300006d99999f9819999b8fe00020fc00014f8000a300006d99999f9819999b8fe00020fc00014f8000a300006d9999981999998d8fe00020fc00014f8000a300006d9999981999998d8fe00020fc00014f8000a300006d8f0f8f0f0f1f118fe00020fc00014f8000a300006d8f0f8f0f0f1f118fe00020fc00010f8000030fa00020180f0fe00020fc00010f8000030fa00020180f0fe00020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000c001ff9ff00f0f400020fc0000c001ff9ff00f0f400020fc0000c001ff9ff00f0f400020fc0000c001ff9ff00f0f400020fc00013001ff9ff00f0fd00031800f1f0fc00020fc00013001ff9ff00f0fd00031800f1f0fc00020fc00015011f07fbff019ff0fd000318019998fc00020fc00015011f07fbff019ff0fd000318019998fc00020fc00016011f33fbff099ff00007f0f0f8f19998fc00020fc00016011f33fbff099ff00007f0f0f8f19998fc00020fc000180c1f332704f3e03c3c1c300006d9fd9900f0fc00020fc000180c1f332704f3e03c3c1c300006d9fd9900f0fc00020fc00019051f331e6493e4fe9908b00006d99999f999b0fc00020fc00019051f331e6493e4fe9908b00006d99999f999b0fc00020fc00019111f333e6493e4999998300006d99999819998fc00020fc00019111f333e6493e4999998300006d99999819998fc00020fc00019051f333e6667e4fe9908f00006d8f0f8f0f198fc00020fc00019051f333e6667e4fe9908f00006d8f0f8f0f198fc00020fc00011091f073f0667e49c3c1c30f400020fc00011091f073f0667e49c3c1c30f400020fc0000c001ff9ff00f0f400020fc0000c001ff9ff00f0f400020fc0000c001ff9ff00f0f400020fc0000c001ff9ff00f0f400020fc00009f800003ff3ff01c00009f800003ff3ff01c00009f800003ff3ff01c00009f800003ff3ff01c00011f800003ffdff04e7fe670e0ffcff01c00011f800003ffdff04e7fe670e0ffcff01c00011f800003ffdff04e7fe666667fcff01c00011f800003ffdff04e7fe666667fcff01c00012f800093ffff80f0f070f0e6667fcff01c00012f800093ffff80f0f070f0e6667fcff01c00014f800103ffff9266666679e660ffffff3ffffc00014f800103ffff9266666679e660ffffff3ffffc00014f800103ffff9266666070e664ffffff5ffffc00014f800103ffff9266666070e664ffffff5ffffc00014f800103ffff92666667e666667fffff6ffffc00014f800103ffff92666667e666667fffff6ffffc00014f800103ffff9270f070e670e67fffff77fffc00014f800103ffff9270f070e670e67fffff77fffc0000cf800003ff6ff04f7bfffc0000cf800003ff6ff04f7bfffc0000cf800003ff6ff04f7dfffc0000cf800003ff6ff04f7dfffc0000cf800003ff6ff04f7efffc0000cf800003ff6ff04f7efffc0000cf8000030f6000407f00fc0000cf8000030f6000407f00fc0000cf8000030f6000406c00fc0000cf8000030f6000406c00fc00012f8000030fd00011801fef0fe0003600fc00012f8000030fd00011801fef0fe0003600fc00012f8000030fd00041801986198fd00020fc00012f8000030fd00041801986198fd00020fc00013f80009300007f0f0f8f1986180fd00020fc00013f80009300007f0f0f8f1986180fd00020fc00013f80003300006d9fe9902f06180fd00020fc00013f80003300006d9fe9902f06180fd00020fc00013f80009300006d99999f9986180fd00020fc00013f80009300006d99999f9986180fd00020fc00013f80009300006d9999981986198fd00020fc00013f80009300006d9999981986198fd00020fc00012f80006300006d8f0f8f1fef0fd00020fc00012f80006300006d8f0f8f1fef0fd00020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc00013f8000030fd00051801180000f0fe00020fc00013f8000030fd00051801180000f0fe00020fc00013f8000030fd000518019800c198fe00020fc00013f8000030fd000518019800c198fe00020fc00014f80010300007f0f0f8f1d8f1f180f1f1980fc00014f80010300007f0f0f8f1d8f1f180f1f1980fc00014f80003300006d9fe9909f998c1819999980fc00014f80003300006d9fe9909f998c1819999980fc00014f80010300006d99999f9b998c1819999b80fc00014f80010300006d99999f9b998c1819999b80fc00014f80010300006d99999819998d9999998d80fc00014f80010300006d99999819998d9999998d80fc00014f80010300006d8f0f8f188f070f0f1f1180fc00014f80010300006d8f0f8f188f070f0f1f1180fc0000df8000030f700050180f00fc0000df8000030f700050180f00fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000ef8000430007fff80f800020fc0000ef8000430007fff80f800020fc0000df8000330001ffef700020fc0000df8000330001ffef700020fc0000df80003300007f8f700020fc0000df80003300007f8f700020fc0000df80003300001e0f700020fc0000df80003300001e0f700020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc0000af8000030f400020fc00009f800003ff3ff01c00009f800003ff3ff01c00009f800003ff3ff01c00009f800003ff3ff01c00002e70002e700a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-9:  A Typical Pop-up Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Figure 14-9 shows the control in its "popped" state, when the user is pressing on the control.  In this state, the menu associated with the control is visible.  If there are more menu items than will fit in the available space, the uppermost or bottom-most menu item will be a scroll arrow, so there is no theoretical limit to the number of choices you can offer, other than the number of menu items you can specify.  In the "unpopped" state, the menu vanishes, and the currently selected choice is shown in the pop-up rectangle.  The title is just there for information, but if you click on the title, the menu pops up.\par I mentioned that the pop-up control implements the concept of a radio button, and that's perfectly true.  In both cases, the idea is to offer the user one choice out of a lot of possible choices.  The advantage of pop-up controls over radio buttons is that they don't use much space, even when you need to offer a lot of choices.  The advantage of radio buttons is that the user can see all of the available choices easily, without popping the control.\par Technically, you can use a pop-up control to select multiple choices from a list by checking the active choices, but from a user interface viewpoint, this stinks.  A pop-up menu can only show one choice, not all of the ones that are selected.  You could also do the same thing with radio buttons by putting each radio button in a separate family.  That's bad, too.  If you need to offer multiple on-off choices, use check boxes.\par While pop-up controls are pretty complicated, there isn't nearly as much to learn before you can use them as you might think.  The reason is that a pop-up control really is a pop-up menu; the menu itself looks just like any other menu you might create for your main menu bar.  You still have all of the same options and choices, and you even use the same resource types to define the menu.  In fact, most of this section deals with the choices you can make that effect the way the control itself is drawn.\par Here's a typical pop-up control resource, along with its associated menu and menu item resources.  The flags are defined below, and the various fields and flags are discussed in detail below the flag definitions.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rControlTemplate (1001) \{\par    10,                                  /* control ID */\par    \{8,8,20,108\},                        /* control rect */\par    PopUpControl \{\{\par       $0000,                            /* flags */\par       $3002,                            /* more flags */\par       0,                                /* refcon */\par       50,                               /* Title Width */\par       1001,                             /* menu Ref */\par       300,                              /* Initial Value */\par       0,                                /* Color Ref */\par       \}\};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (1001) \{                 /* the Color menu */\par    1001,                                /* menu ID */\par    refIsResource*menuTitleRefShift      /* flags */\par       + refIsResource*itemRefShift\par       + fAllowCache,\par    1001,                                /* menu title resource ID */\par    \{300,301,302\};                       /* menu item resource IDs */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (300) \{\par    300,                                 /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    300                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (301) \{\par    301,                                 /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    301                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (302) \{\par    302,                                 /* menu item ID */\par    "","",                               /* key equivalents */\par    0,                                   /* check character */\par    refIsResource*itemTitleRefShift,     /* flags */\par    302                                  /* menu item title resource ID */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (1001, noCrossBank) \{"Color"\};\par resource rPString (300, noCrossBank) \{"Red"\};\par resource rPString (301, noCrossBank) \{"Green"\};\par resource rPString (302, noCrossBank) \{"Blue"\};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 14-11:  A Typical Pop-up Control\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul flag}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-8\tab These bits set the }{\f6\fs20 ctlHilite}{\f4  field for the control.  For a pop-up control, this will normally be $00xx, giving an active control.  If you want to create an inactive control, use $FFxx.  (You can change the control from active to inactive using Control Manager calls, but they aren't covered in this course.)\par 7\tab 0 for a normal, visible control, 1 for an invisible control.\par 6\tab If this bit is set, the pop-up control will have extra white space for scrolling.  In the examples we'll use here, the bit will always be clear.  Refer back to the toolbox reference manual if you want to explore this option.\par 5\tab Setting this bit highlights the menu title; clearing it draws the title in the normal way.\par 4\tab This bit is used to get rid of the title.  (For a pop-up control, the title is the name that appears in the rectangle at the left of the pop-up part of the control.)  If this bit is set, no title will be shown.  Even if you don't want a title, though, you still have to put something valid in the title field, and the title width field is still used.\par 3\tab The current selection is generally shown in the box that pops up when the control is selected.  If this bit is set, the box is left empty.\par 2\tab Pop-up controls can be quite long, expanding well beyond the edge of a window.  Setting this bit tells the Control Manager not to allow the pop-up control to extend beyond the edge of the window, even if there are enough menu items that all of the choices can't be shown.\par 1\tab The title is normally left justified.  If this bit is set, the title is right justified, and the left edge of the title rectangle and the title width field are adjusted to eliminate unused pixels on the left side of the control.  (See the description of the title width field for some pictures that explain this better.)\par 0\tab The selection rectangle normally extends from title width pixels past the left edge of the control rectangle to the right edge of the control rectangle, with the selected text left justified in the available space.  Setting this bit right justifies the selected item, adjusting the size of the selection rectangle to fit near the left edge of the text.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20\ul moreFlags}{\f4\ul  bits}{\f4 \tab }{\f4\ul use}{\f4 \par 15-14\tab Reserved; set to 0.\par 13-12\tab Must be set to 1.\par 11-5\tab Reserved; set to 0.\par 4-3\tab Defines the type of reference for the color table field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Color table reference is a pointer.\par 01\tab Color table reference is a handle.\par 10\tab Color table reference is a resource ID.\par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4 2\tab Defines the type of reference in the menu reference field.  A value of zero tells the Control Manager that the menu is given as a menu template, just like you are used to laying out menus for the program.  A value of one tells the Control Manager to expect a menu string.  We'll use a value of zero, since it matches what you are already used to doing, and works just as well as the other method.  For details about menu text strings, see the toolbox reference manual.\par 1-0\tab Defines the type of reference for the menu field.\par }\pard \qj\fi-360\li2880\keepn\widctlpar\adjustright {\f4 00\tab Menu reference is a pointer.\par 01\tab Menu reference is a handle.\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 10\tab Menu reference is a resource ID.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Size of the Control and Text Justification}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Size of the Control and Text Justification\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The size of the pop-up control is determined by two things: the control rectangle and the title width field.  The control rectangle sets the overall size of the control, extending from the left edge of the title to the right edge of the pop-up rectangle, and from the top to bottom of both fields.  The text you use in the title and in the various menu items will govern the width of the control.  The height should generally be 12 pixels, which gives enough room to display text in the system font, but doesn't take up any extra screen space.\par The title width field determines where the boundary is between the title and the pop-up rectangle.  It's measured from the left edge of the control.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1086{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw156\pich90\picwgoal3120\pichgoal1800\macpict\bliptag1609621694\blipupi72{\*\blipuid 5ff0e0be0d1cdbaa205e20b99f816b9c}02d0ffffffff0059009b1101a0008201000affffffff0059009b31002e00010041009b3809000000000000000031001c0052002f009b09ffffffffffffffff3809000000000000000031001f006a002c0082a10096000c01000000020000000000000001000a001f006a002b00812c000c00150948656c7665746963610300150d000a2b6b2803526564a00097a10096000c0100000002000000000000000e0000001e01000a00310012003d009105000328003a001320436f6c6f72202020202020202020202020202020202020202020202020202020a000970e0000002101000affffffff0059009b09ffffffffffffffff310031006a003e0094a10096000c0100000002000000000000000e0000001e01000a0031006a003d0093295805477265656ea000970e0000002101000affffffff0059009b09000000000000000031004000520053009b09ffffffffffffffff38090000000000000000310043006a00500082a10096000c01000000020000000000000001000a0043006a004f00810500012a1204426c7565a0009701000affffffff0059009b09ffffffffffffffff220025000100dc220013009a00eea10096000c02000000020000000000000001000a000400200010007b28000d002911636f6e74726f6c2072656374616e676c65a0009701000affffffff0059009b71001e00070001000d000d000a00010007000d000a000d000d000d000a000122000a000d180071001e0007008e000d009a000a009a000d008e000a008e0007008e000a009a22000a00761800220058000100eea10096000c02000000020000000000000001000a004c00100058004428005500150b7469746c65207769647468a0009701000affffffff0059009b71001e004e00010054000d00510001004e000d0051000d0054000d00510001220051000d060071001e004e004400540050005100500054004400510044004e00440051005022005100410300a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-10:  The Rectangle and Title Width Fields\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The title text is normally left justified in the part of the control rectangle to the left of title width.  If you set bit 1 of the }{\f6\fs20 flag}{\f4  word, the title text is right justified.  The rectangle itself also shrinks, pulling even with the left edge of the title text (with a small margin to make things look  neat).  This doesn't change the overall width of the control, it just doesn't use all of the available space.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1087{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw156\pich90\picwgoal3120\pichgoal1800\macpict\bliptag-1166432805\blipupi72{\*\blipuid ba79a5db520d769603c870db611d0ed1}04f8ffffffff0059009b1101a0008201000affffffff0059009b09882288228822882230002e00010041003809000000000000000031001c0052002f009b09ffffffffffffffff3809000000000000000031001e0069002c0082a10096000c01000000020000000000000001000a001e006a002a007d2c000c00150948656c7665746963610300150d000a2b6b2703526564a0009701000affffffff0059009b09ffffffffffffffff31002e00320041009b38a10096000c0100000002000000000000000e0000001e01000a00300036003c005a05000328003900371b436f6c6f7220202020202020202020202020202020202020202020a000970e0000002101000affffffff0059009b3100300069003e0094a10096000c0100000002000000000000000e0000001e01000a0030006a003c0086293405477265656ea000970e0000002101000affffffff0059009b09000000000000000031004000520053009b09ffffffffffffffff38090000000000000000310042006900500082a10096000c01000000020000000000000001000a0042006a004e007f0500012a1204426c7565a0009701000affffffff0059009b09ffffffffffffffff220025000100dc220013009a00eea10096000c02000000020000000000000001000a00030028000f007228000c002911636f6e74726f6c2072656374616e676c65a0009701000affffffff0059009b070000000022e0c0e0c00000a000a0a100a40002060001000a0000000000000000070001000122000900000cfd23000023000323000023000323000023f4fd23000084000a0000000000000000a000a301000affffffff0059009b84004400060002000c000c0006000b000c7fff00070007000b7fff0008000300077fff0009000200037fff000a000200067fff000b0006000a7fff000c000a000c7fff7fffa000a122000a000d1800070000000022e0c0e0c00000a000a0a100a40002060001000a000000000000000007000100012200090099f4032300002300fd2300002300fd230000230c0323000084000a0000000000000000a000a301000affffffff0059009b8400440006008d000c00980006008d008f7fff0007008f00937fff0008009300977fff0009009700987fff000a009400987fff000b009000947fff000c008d00907fff7fffa000a122000a00761800220058000100eea10096000c02000000020000000000000001000a004b00140057003e28005400150b7469746c65207769647468a0009701000affffffff0059009b070000000022e0c0e0c00000a000a0a100a40002060001000a0000000000000000070001000122005000000cfd23000023000323000023000323000023f4fd23000084000a0000000000000000a000a301000affffffff0059009b840044004d00020053000c004d000b000c7fff004e0007000b7fff004f000300077fff0050000200037fff0051000200067fff00520006000a7fff0053000a000c7fff7fffa000a1220051000d0500070000000022e0c0e0c00000a000a0a100a40002060001000a00000000000000000700010001220050004ff4032300002300fd2300002300fd230000230c0323000084000a0000000000000000a000a301000affffffff0059009b840044004d00430053004e004d004300457fff004e004500497fff004f0049004d7fff0050004d004e7fff0051004a004e7fff00520046004a7fff0053004300467fff7fffa000a122005100410300a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-11:  Right Justified Title\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The selection is normally left justified, too.  You can right-justify the text in the pop-up rectangle by setting bit 0 of the flag word.  The box still gets shrunk, so the net effect is to shrink the visible part of the pop-up rectangle so it is even with the right edge of the text.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Display Options}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Display Options\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 flag}{\f4  word has a number of options to control the overall appearance of the pop-up control.  You can tell the Control Manager to print the title normally or in a highlighted state, to skip printing either the control title or the currently selected value, to add some extra whitespace to make scrolling easier, or to restrict the control's popped state so it doesn't draw past the edge of the window.  Once you finish Problem 14-6 you can experiment with these flags to see exactly what they do.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Detecting the Control State}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Detecting the Control State\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 GetCtlValue}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When the user selects something from a pop-up menu, the Control Manager will report a hit on the control.  Once you know something has happened to the control, you can use }{\f6\fs20 GetCtlValue}{\f4  to read the state of the control.  The value returned will be the menu item id for the menu item the user selected.\par As far as when you look at the menu item, you have two choices.  In most dialogs, you really don't care what the user picks until the dialog is closed.  In that case, you can ignore hits on the control, and just wait until the dialog is closed and read the control value once.  If you need to do something in the window or dialog as soon as the user picks a new value, though, you will need to track the hits on the control a little more carefully, reading the control value after each hit.\par \par Problem 14-6:  Add the color picker pop-up control we used as an example in this section to the solution to Problem 14-5.  Add a colored rectangle above the pop-up control, coloring it appropriately as the user picks colors using the control.\par This completes the control sampler, which now has one example of nearly every control type available in System 6.0.  (We left out TextEdit and Picture controls.)\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1088{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw652\pich414\picwgoal13040\pichgoal8280\macpict\bliptag-545256223\blipupi72{\*\blipuid df800ce1a7a924be85474718ecaa371b}2fde00000000019e028c1101a00082a0008e01000a0000000002d002d098005200000000007d029000000000007d028c00000000007d028c000102af0002af0006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c007003fb200010fc007003fb200010fc00b003ffd00003cb700010fc00b003ffd00003cb700010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01c003ffd0000f0fd00040ffc0f00fcfb000503ff000f03c0cc00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc01f003ffe0002ff3fc0fe00000ffe00003cfb000603c0000f00003ccd00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00060f003f003c00fffd000703c003ff0fc0ffc0ce00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc021053f000003fffffd00070ff00f003c03c3c0fe000603fc0f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022063f000003fffff0fe00070f000f003c03ffc0fe000603c00f0f03c03ccd00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc022003ffe0002ffffc0fe00060f000f003c03c0fd000703c00f0f03c03cf0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc021003ffe00013f3ffd00060f003fc0ff00fffd000703ff03ff0ff00fc0ce00010fc007003fb200010fc007003fb200010fc007003fb200010fc007003fb200010fc006003fb1ff00c006003fb1ff00c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c01f043c000003fcf700040fc0003ffcfa00033ff00fc0fd000103f0d6000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c027043c00000f0ffd000103c0fd000403c00003c0fd000b0f00003c3c03c000000f000fd5000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c0312a3c00000f0003fc0ffc0ffc0f3c0ff003c00003c00ff00ff03ff0003c3c03c00ffc3ff03ff03fc0f3cfffc0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f0a03c00fc03c3c03c00003c0fe3c13000f00003ff003c03c3c0f000f00f0f0fc0f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c030043c00000f00fd0f1b03c00f003c3c03c00003c03ffc0ff00f00003c0003c03c3c0f000f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c02e023c0000fb0f1b03cf0f003c3c03c00003c03c00003c0f3c003c0003c03c3c0f3c0f00fef0020f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c0312a3c000003fc03fc0f0f00fc0f000ff00ff00003c00ff00ff003f0003c000ff00ffc03f00f003fc0f00f3cf0dc000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f00f00f00003c03c000ffcfe00000ffe00053c03c0003fc0f6000703c03c000ffc03f0fc00030f00f00fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c038123c00003aaaab0000f033fcf0000c3fc3000f0ffe00000ffe0005c0003000f0f0f600070c0003000f0f00f0fc00030f3fcc0fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c041263c00003aaaab0000f0c00cf00030fff0c00f0f03fc03ff00000300000c00f000f3c0ff00ff03fffd0010300000c00f0f00f00f0f03fc000f30030fed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c03e123c00003aaaab0000f3000cf00033fffcc00ffcfd0f0a00000300000c00f3f0fc03fcc300c0fe0007300000c00ffc00f0fd0f04000f3000cfed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c0421d3c00003aaaab0000f0c00cf00030fff0c00f3c0fff0f0f00000300000c00fef00603ffc3ffc3c3c0fe0007300000c00f0f00f0fe0f05ff000f30030fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042103c00003aaaab0000f033fcf0000c3fc300fe0f02000f0ffe0003c0003000fef00603c003c003c3c0fe00070c0003000f0f00f0fe0f0500000f3fcc0fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c042163c00003aaaab0000f00f00f00003c03c000f0f03fc03fffe000d3c03c0003fc0f000ff00ff03c3c0fe001003c03c000ffc03fc03ff03fc000f00f00fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0270f3c00003aaaab0000fc0303f000003fc0f7000103fcf100013fc0f700030fc0c03fed000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0190b3c00003aaaab00003f000fc0d5000303f000fced000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c0170a3c00003fffff000003fffcd300023fffc0ed000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00ffcfe00000ff90003c000c000f333073ffffc000c000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa02c00f0ffe00000ff90004c003c0003cf3cc06003c000f000330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c024033c00033af9aa02c00ffcfd0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa06c00f3c0fff0f0ff90003c0c000c0f333073c003c0c000c0330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa00c0fe0f02000f0ff90004c03000c03cf3cc06003c0c00300330e6000103c026033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c0980052007d000000fa0290007d000000fa028c007d000000fa028c000126033c00033af9aa06c00f0f03fc03fff90003c00cffc0f333073c003c0ffcc00330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30004c003c0003cf3cc06003c000f000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c020033c00033af9aa00c0f30003c000c000f333073ffffc000c000330e6000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0f300e8ff0330000003ecfffe000103c019033c00033af9aa00c0da00033000003fed000503f0000003c019033c00033af9aa00c0da00033000003fed000503f0000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c01a033c00033af9aa00c0f300e8ff03300000fcec0004fc000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c030033c00033af9aa02c003fcf50003c000c000f73301fffffd33083c000c0003300000f0fe00013fc0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c031033c00033af9aa02c00f0ff50004c003c0003cf9cc02cf000cfccc07000f0003300000f0fe0001f0f0f100043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c042033c00033af9aa0ac00f000f3c0ff00ff03ff0fd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000bf0003ff0f03c0ffc0ffc0ff0fb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c039033c00033af9aa04c00f3f0fc0fb3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00013fc0fef0fa3cfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c03f033c00033af9aa00c0fe0f06003ffc3ffc3c3cfd0003c0c000c0f73301000ffd33083c0c000c03300000f0fd00fef0013cf0fd3c013ffcfb00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c040033c00033af9aa00c0fe0f06003c003c003c3cfd0004c03000c03cf9cc02cf000cfccc070c003003300000f0fe00fdf0063cf03c3c0ffc3cfa00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c044033c00033af9aa0ac003fc0f000ff00ff03c3cfd0003c00cffc0f73301000ffd33083c0ffcc003300000f0fe000b3fc03ff00fc00ffc303c0ff0fe3cfe00043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c02f033c00033af9aa00c0f30004c003c0003cf9cc02cf000cfccc07000f0003300000f0f600010ff0f900043c000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c029033c00033af9aa00c0f30003c000c000f73301fffffd33083c000c0003300000fcec0004fc000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c01b033c00033af9aa00c0f300e8ff033000003fed000503f0000003c017033c00033af9aa00c0da000330000003ecfffe000103c017033c00033af9aa00c0da000330000003ecfffe000103c014033c00033af9aa00c0f300e8ff0030e6000103c014033c00033af9aa00c0f300e8ff0030e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c025033c00033af9aa04c00ffc03f0f70006c000c0003ffff3f433053c000c000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c024033c00033af9aa04c00f0f00f0f70006c003c0003c003cf3cc04000f000330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00f0f00f00f0f03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00ffc00f0fd0ffb0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c028033c00033af9aa04c00f0f00f0fe0f00fffb0005c0c000c03c00f333053c0c000c0330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c026033c00033af9aa04c00f0f00f0fe0ffa0006c03000c03c003cf3cc040c00300330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c028033c00033af9aa08c00ffc03fc03ff03fcfb0005c00cffc03c00f333053c0ffcc00330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c020033c00033af9aa00c0f30006c003c0003c003cf3cc04000f000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c021033c00033af9aa00c0f30006c000c0003ffff3f433053c000c000330e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c014033c00033ff9ff00c0f300e8ff0030e6000103c00d023c0003d0000030e6000103c00d023c0003d0000030e6000103c00d023c0003d0ff00f0e6000103c00d023c0003d0ff00f0e6000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c010033c00003fd1fff0000030f7000103c010033c00003fd1fff0000030f7000103c012033c000030d2000003f000003cf7000103c012033c000030d2000003f000003cf7000103c01d093c00003000fff0f0003cfe000103c0dd000003f000003ff7000103c01d093c00003000fff0f0003cfe000103c0dd000003f000003ff7000103c01f073c000030000f00f0f400003cfc00003cea000003f000013fc0f8000103c01f073c000030000f00f0f400003cfc00003cea000003f000013fc0f8000103c02c1c3c000030000f00ffc0fc03fc000fc03fc0003ff000ffc03fc03fc0ffc0eb000003f000013ff0f8000103c02c1c3c000030000f00ffc0fc03fc000fc03fc0003ff000ffc03fc03fc0ffc0eb000003f000013ff0f8000103c02b163c000030000f00f0f03c0f000003c0f00000f0f0003c00fef001003cea000003f000013ffcf8000103c02b163c000030000f00f0f03c0f000003c0f00000f0f0003c00fef001003cea000003f000013ffcf8000103c02b1b3c000030000f00f0f03c03fc0003c03fc000f0f0003c00fff03fc03cea000003f000013ffff8000103c02b1b3c000030000f00f0f03c03fc0003c03fc000f0f0003c00fff03fc03cea000003f000013ffff8000103c02c1c3c000030000f00f0f03c000f0003c000f000f0f0003cf0f00000f03cf0eb000003f000013cf0f8000103c02c1c3c000030000f00f0f03c000f0003c000f000f0f0003cf0f00000f03cf0eb000003f000013cf0f8000103c02b1c3c000030000f00f0f0ff03fc000ff03fc0003ff0000fc03fc03fc00fc0eb000003ef00003cf8000103c02b1c3c000030000f00f0f0ff03fc000ff03fc0003ff0000fc03fc03fc00fc0eb000003ef00003cf8000103c00e033c000030d2000003e5000103c00e033c000030d2000003e5000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c007003cb2000103c007003cb2000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c00e033c000030d2000003e5000103c00e033c000030d2000003e5000103c019093c00003000fff0f0003cfe000103c0dd000003e5000103c019093c00003000fff0f0003cfe000103c0dd000003e5000103c016073c000030000f00f0f600000fe2000003e5000103c016073c000030000f00f0f600000fe2000003e5000103c023183c000030000f00ffc0fc03fc000fc03fc000003ff00ff00ff0e7000003e5000103c023183c000030000f00ffc0fc03fc000fc03fc000003ff00ff00ff0e7000003e5000103c0210f3c000030000f00f0f03c0f000003c0f0fe00010f00fd3ce7000003e5000103c0210f3c000030000f00f0f03c0f000003c0f0fe00010f00fd3ce7000003e5000103c021143c000030000f00f0f03c03fc0003c03fc000000f00fd3ce7000003e5000103c021143c000030000f00f0f03c03fc0003c03fc000000f00fd3ce7000003e5000103c020133c000030000f00f0f03c000f0003c000f000000ffc3ce7000003e5000103c020133c000030000f00f0f03c000f0003c000f000000ffc3ce7000003e5000103c023183c000030000f00f0f0ff03fc000ff03fc03c0003f00ff00ff0e7000003e5000103c023183c000030000f00f0f0ff03fc000ff03fc03c0003f00ff00ff0e7000003e5000103c012033c000030f40000f0e0000003e5000103c012033c000030f40000f0e0000003e5000103c00c033c00003fd1ffe5000103c00c033c00003fd1ffe5000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c098005200fa00000177029000fa00000177028c00fa00000177028c000107003cb2000103c007003cb2000103c012033c00000fdbfff9000003e6ff03c00003c012033c00000fdbfff9000003e6ff03c00003c018033c00000ce0000003fe000003f9000003e65503c00003c018033c00000ce0000003fe000003f9000003e65503c00003c028073c00000c00000c0ffc000203c3c0f90002f0003cf700040300030003f9000003e65503c00003c028073c00000c00000c0ffc000203c3c0f90002f0003cf700040300030003f9000003e65503c00003c026073c00000c00000f0ffc000203c3c0f90000f0f5000403000cc003f9000003e65503c00003c026073c00000c00000f0ffc000203c3c0f90000f0f5000403000cc003f9000003e65503c00003c0331e3c00000c00000fcf03fc3c03c003c3c0ffcfffc0ffc03fc0ffc0fc0f3c0ff0fb00040300303003f9000003e65503c00003c0331e3c00000c00000fcf03fc3c03c003c3c0ffcfffc0ffc03fc0ffc0fc0f3c0ff0fb00040300303003f9000003e65503c00003c032123c00000c00000fff0f0f3cf3c003ffc3c3cf3cfdf00700f0f03c0fc03c3cfb00040300c00c03f9000003e65503c00003c032123c00000c00000fff0f0f3cf3c003ffc3c3cf3cfdf00700f0f03c0fc03c3cfb00040300c00c03f9000003e65503c00003c0330d3c00000c00000f3f0fff3cf3c003fec301cf3cfef0083fc0f0f03c0f003ffcfb00040303f03f03f9000003e65503c00003c0330d3c00000c00000f3f0fff3cf3c003fec301cf3cfef0083fc0f0f03c0f003ffcfb00040303f03f03f9000003e65503c00003c032053c00000c0000fe0f04000f0f0003fec301cf3cfef00000fef0033c0f003cfa00040300303003f9000003e65503c00003c032053c00000c0000fe0f04000f0f0003fec301cf3cfef00000fef0033c0f003cfa00040300303003f9000003e65503c00003c0331e3c00000c00000f0303fc0f0f0003c3c0ffcf3cf0ffc03fc0f0f0ff0f000ff0fb00040300303003f9000003e65503c00003c0331e3c00000c00000f0303fc0f0f0003c3c0ffcf3cf0ffc03fc0f0f0ff0f000ff0fb00040300303003f9000003e65503c00003c01c033c00000cf10000f0f100040300303003f9000003e65503c00003c01c033c00000cf10000f0f100040300303003f9000003e65503c00003c018033c00000ce0000403003ff003f9000003e65503c00003c018033c00000ce0000403003ff003f9000003e65503c00003c018033c00000ce0000003fe000003f9000003e65503c00003c018033c00000ce0000003fe000003f9000003e65503c00003c01f073c00000c00000c0ffb000103c0ec000003fdfff9000003e65503c00003c01f073c00000c00000c0ffb000103c0ec000003fdfff9000003e65503c00003c021073c00000c00000f0ffb000103c0ec000003fecc00cff9000003e65503c00003c021073c00000c00000f0ffb000103c0ec000003fecc00cff9000003e65503c00003c02b183c00000c00000fcf03fc3c03c00003c0ff03cf03fc03fc0f0ff5000003fd33f9000003e65503c00003c02b183c00000c00000fcf03fc3c03c00003c0ff03cf03fc03fc0f0ff5000003fd33f9000003e65503c00003c02b0e3c00000c00000fff0f0f3cf3c00003fec302f00f00fd0ff5000003fecc00cff9000003e65503c00003c02b0e3c00000c00000fff0f0f3cf3c00003fec302f00f00fd0ff5000003fecc00cff9000003e65503c00003c02b183c00000c00000f3f0fff3cf3c00003c3ffc3c003fc0fff0f3ff5000003fd33f9000003e65503c00003c02b183c00000c00000f3f0fff3cf3c00003c3ffc3c003fc0fff0f3ff5000003fd33f9000003e65503c00003c02d053c00000c0000fe0f0f000f0f0003c3c3c003c0000f0f0003cff5000003fecc00cff9000003e65503c00003c02d053c00000c0000fe0f0f000f0f0003c3c3c003c0000f0f0003cff5000003fecc00cff9000003e65503c00003c02b183c00000c00000f0303fc0f0f0000ff00ff03c003fc03fc0c0ff5000003fd33f9000003e65503c00003c02b183c00000c00000f0303fc0f0f0000ff00ff03c003fc03fc0c0ff5000003fd33f9000003e65503c00003c01d033c00000cee000103fcf5000003fecc00cff9000003e65503c00003c01d033c00000cee000103fcf5000003fecc00cff9000003e65503c00003c016033c00000ce0000003fd33f9000003e65503c00003c016033c00000ce0000003fd33f9000003e65503c00003c012033c00000fdbfff9000003e65503c00003c012033c00000fdbfff9000003e65503c00003c025073c00000ffffff3f0fcff02fcffcffdff00c3f0ff03c000000ff9000003e65503c00003c025073c00000ffffff3f0fcff02fcffcffdff00c3f0ff03c000000ff9000003e65503c00003c021073c00000ffffff0f0fcff02fc3f0febff03c000000ff9000003e65503c00003c021073c00000ffffff0f0fcff02fc3f0febff03c000000ff9000003e65503c00003c02c183c00000ffffff030fc03c3fc3ffc0c0fc03f0f0f03fc03fc03f4ff03c000000ff9000003e6ff03c00003c02c183c00000ffffff030fc03c3fc3ffc0c0fc03f0f0f03fc03fc03f4ff03c000000ff9000003e6ff03c00003c0240e3c00000ffffff000f0f0c30c3ffc00fe0f02c03fc3fdf0f4ff03c000000fdb000103c0240e3c00000ffffff000f0f0c30c3ffc00fe0f02c03fc3fdf0f4ff03c000000fdb000103c026183c00000ffffff0c0f000c30c3ffc330f000ff0ffc3f0fff0f0f4ff03c000000fdb000103c026183c00000ffffff0c0f000c30c3ffc330f000ff0ffc3f0fff0f0f4ff03c000000fdb000103c024053c00000ffffffef00bfff0f0fffc3f0f0fffc03fc3fdf0f4ff03c000000fdb000103c024053c00000ffffffef00bfff0f0fffc3f0f0fffc03fc3fdf0f4ff03c000000fdb000103c021183c00000ffffff0fcfc03f0f0fffc3f0fc03f0f0f00fc03fc03f0ffdb000103c021183c00000ffffff0fcfc03f0f0fffc3f0fc03f0f0f00fc03fc03f0ffdb000103c00c033c00000fdbffdb000103c00c033c00000fdbffdb000103c017033c00000fdffffe000003ef000003f1ff04fc000003c017033c00000fdffffe000003ef000003f1ff04fc000003c019033c00000ce0000403003ff003ef000003f100040c000003c019033c00000ce0000403003ff003ef000003f100040c000003c02c073c00000c00000c0ffc000203c3c0fe00000ff000040300303003ef000003fe00010ff0f600040c000003c02c073c00000c00000c0ffc000203c3c0fe00000ff000040300303003ef000003fe00010ff0f600040c000003c034073c00000c00000f0ffc000203c3c0fe00000ff000040300303003f800043fc000003ffd000003fe00013c3cf600040c000003c034073c00000c00000f0ffc000203c3c0fe00000ff000040300303003f800043fc000003ffd000003fe00013c3cf600040c000003c03f143c00000c00000fcf03fc3c03c003c3c0ff03cf0f0ff100040300303003f80004f0f000000ffd000003fe00093c003cf03fc03fc0ffc0fe00040fc00003c03f143c00000c00000fcf03fc3c03c003c3c0ff03cf0f0ff100040300303003f80004f0f000000ffd000003fe00093c003cf03fc03fc0ffc0fe00040fc00003c03c143c00000c00000fff0f0f3cf3c000ff03c3c3f00f3cf100040303f03f03f80009f0003fc00f003fc0f3c3fe00033cfc3f00fbf0fe00040fc00003c03c143c00000c00000fff0f0f3cf3c000ff03c3c3f00f3cf100040303f03f03f80009f0003fc00f003fc0f3c3fe00033cfc3f00fbf0fe00040fc00003c03e143c00000c00000f3f0fff3cf3c0003c03c3c3c00ff0f100040300c00c03f80009f000f0f00f00f0f0fc03fe00fe3c0300fff0fffef0fe00040fc00003c03e143c00000c00000f3f0fff3cf3c0003c03c3c3c00ff0f100040300c00c03f80009f000f0f00f00f0f0fc03fe00fe3c0300fff0fffef0fe00040fc00003c03f053c00000c0000fe0f0b000f0f00003c03c3c3c00f3cf100040300303003f80005f000f0f00f00fef00003fe00fe3c0600f000f000f0f0fe00040fc00003c03f053c00000c0000fe0f0b000f0f00003c03c3c3c00f3cf100040300303003f80005f000f0f00f00fef00003fe00fe3c0600f000f000f0f0fe00040fc00003c03e143c00000c00000f0303fc0f0f00003c00ff03c00f0ff1000403000cc003f800fdf0010f00fef00003fe00090ff03c003fc03fc0f0f0fe00040fc00003c03e143c00000c00000f0303fc0f0f00003c00ff03c00f0ff1000403000cc003f800fdf0010f00fef00003fe00090ff03c003fc03fc0f0f0fe00040fc00003c022033c00000ce000040300030003f800093fc03fc03fc03fc0f003f100040fc00003c022033c00000ce000040300030003f800093fc03fc03fc03fc0f003f100040fc00003c019033c00000ce0000003fe000003ef000003f100040fc00003c019033c00000ce0000003fe000003ef000003f100040fc00003c012033c00000fdbffef000003f0ff03c00003c012033c00000fdbffef000003f0ff03c00003c00b003cc400f1ff03c00003c00b003cc400f1ff03c00003c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c098005201770000019e029001770000019e028c01770000019e028c000118043c00000fc0ec000103f0fd00003fe900003feb000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c017033c00003fea0000fcfd0000fce900010fc0ec000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c032033c00003cfe00013ff0fa00010ff0f800003cfd0000f0fe0001ffc0fa0004fff000000ffa000303c00003fefff1000103c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c038033c00003cfe00013c3cfa00013c3cf800003cfd0000f0fe0001f0f0fa00000ff6000903c00003c0000f000ff0fa00073c000ff0000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c04e033c00003cfe00103c3c0ff00ff03ff0003c3c3ff00ff00ff0fe00003cfd0000f0fe0011f0f03fc03fc0ffc0000f03c03c3f00ff00fffe000903c000033c00f3003c3cfa00073c003c3c000003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c046033c00003cfe00013ff0fb3c0000f93cfe00003cfd0000f0fe0001ffc0fbf006000f03cf3c0f03fec31bc0000003c0000303cf03003c000ff03c3c3ff00ffc003c3c3ff003c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c04a033c00003cfe00083c3c3ffc3ffc3c3c00fc3c02003ffcfe00003cfd0000f0fe0004f0f0fff0fffef016000f03cf3c0f03c003ffc0000003c00003003003000ff0f93c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c043033c00003cfe00fe3c05003c003c3c00fa3cfd00003cfd0000f0fe00fef00e00f000f0f0000f00f0f00f03c3c3c0fe000803c0000303cf030000f83c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c04a033c00003cfe00103ff00ff00ff03ff0000ff03c3c0ff00ff0fe00003cfd0000f0fe0011ffc03fc03fc0ffc0000f00f0f03fc0ff00fffe000703c000033c00f300f73c0000fd3c0103c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c031033c00003cf800003cf400003cfd0000f0f80000f0f3001803c00003c0000f000ff00ff00ffc3c3c0ffc000ff03c3c03c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c01b033c00003fea0000fcfd0000fce900030fc00003fefff1000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c018043c00000fc0ec000103f0fd00003fe900003feb000103c013003cfe00eafffc000003e9ff00f0eb000103c013003cfe00eafffc000003e9ff00f0eb000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c007003cb2000103c006003fb1ff00c006003fb1ff00c006003fb1ff00c006003fb1ff00c002af0002af00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 14-12:  The Completed Control Sampler Window\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk79}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pop-up menu control}{\rxe bk79}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson and the last one have covered all of the controls available as of Apple IIGS System Disk 6.0 except for the TextEdit control, which was covered separately in Lesson 11.  In each case, you learned how to create the control, how to track the control manually in a window, and how to read the setting of the control.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 DrawMember2\tab GetLETextByID\tab FindTargetCtl\tab LECopy\par LECut\tab LEDelete\tab LEFromScrap\tab LEPaste\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 LEToScrap\tab NewList2\tab SetLETextByID\tab SortList2\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rIcon\tab rPicture\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk80}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rControlTemplate resource}{\rxe bk80}}}{\*\bkmkend bk81}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 controls}{\rxe bk81}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 15 \endash  Meaningful Dialogs}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 {\*\bkmkstart bk87}\par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 15 \endash  Meaningful Dialogs}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 15 \endash  Meaningful Dialogs\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson covers dialogs.  By the end of the lesson, you will know the difference between modal and modeless dialogs, and how to create and use each kind of dialog.  You will learn when to use a modal dialog and when to use a modeless dialog, and you'll find out about some of the human interface issues that apply to dialogs and menu commands that bring up dialogs.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Death of a Tool}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Death of a Tool\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Before you flip open your toolbox reference manual to the chapter on the Dialog Manager, I want to take a moment to warn you that the Dialog Manager is obsolete.  Back when the Apple IIGS was first released, the Dialog Manager was a great tool.  It handled alerts, modal dialogs and modeless dialogs, making it a lot easier to handle the various controls.  In a very real sense, the Dialog Manager did for control events what }{\f6\fs20 TaskMaster}{\f4  does for the main event loop: it packaged the process in a few neat tool calls so you didn't have to reinvent the wheel every time you used a dialog.\par As time moved on, though, Apple's engineers extended the controls available and added resources, both of which strained the design of the original Dialog Manager.  Today, the Window Manager call }{\f6\fs20 AlertWindow}{\f4  has replaced the original Dialog Manager calls to handle alerts, and resources and the Window Manager's }{\f6\fs20 DoModalWindow}{\f4  have replaced the old Dialog Manager calls that handled modal dialogs and modeless dialogs.\par If you troll the online services for source code samples, you will run into a lot of old programs (and a few new ones written by programmers that haven't caught up with the new tool calls) that use the Dialog Manager.  After reading this lesson, you shouldn't have any trouble figuring out what those calls do by reading the descriptions in the toolbox reference manual.  The concepts haven't changed, just the calls and which tool the calls are found in.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Dialogs are Simple Windows with Controls}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Dialogs are Simple Windows with Controls\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last two lessons spent a lot of time covering controls, but if you think about it, most programs don't use many controls in their document window.  Whether you are using a text editor, spread sheet, CAD program, or whatever, most of the windows that show data have scroll bars, a size box, and not much else in the way of controls.  (The big exceptions are the hyper-environments, like HyperCard GS and HyperStudio.)  Most of the controls appear in supplementary windows that pop up in response to picking a menu command.  These supplementary windows are, of course, dialogs.\par From a user's viewpoint, dialogs are special windows that let the user pick options, conduct searches, and so forth.  From the programmer's standpoint, dialogs are windows with controls.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modal dialogs}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs\:modal}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are two major kinds of dialogs.  Modal dialogs lock the user in a mode \endash  all the user can do is operate the various controls in the dialog.  An alert is actually a special, restricted form of modal dialog.  Another common example of modal dialogs are the various dialogs in SFO.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modeless dialogs}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs\:modeless}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Modeless dialogs work pretty much the same way as a modal dialog, but they are true windows.  The user can click on a document window or another modeless dialog to bring the other window to front and work on it, and the modeless dialog is still available.  String search and string search and replace dialogs are usually modeless dialogs.\par Visually, a modal dialog should generally use an alert frame, while a modeless dialog generally looks like any other window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Creating a Dialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Creating a Dialog\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modal dialogs}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs\:modal}}}{\v\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modeless dialogs}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs\:modeless}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Whether you are creating a modal dialog or a modeless dialog, you create the window the same way you created the control sampler window in lessons 13 and 14.  In short, you use an }{\f6\fs20 rWindParam1}{\f4  resource, with all of the controls attached via an }{\f6\fs20 rControlList}{\f4  resource.  About the only difference between a standard window with controls and a dialog window is that it's customary to use an alert frame for a modal dialog window.  You do that by setting bit 13 of the }{\f6\fs20 wFrameBits}{\f4  flag word in the }{\f6\fs20 rWindParam1}{\f4  resource.  Some modal dialogs can be moved.  In that case, you need the title bar.  That does cause some problems, since the Window Manager doesn't like to create windows with alert frames and title bars, so you'll have to draw the alert frame for yourself \endash  or use another tool call that will.  (Stay tuned!  We'll get back to this point later.)\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Handling Events in a Modal Dialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Handling Events in a Modal Dialog\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk83}{\*\bkmkstart bk84}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are a lot of problems with modal dialogs that aren't very apparent at first glance.  Here are a few of the major ones:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \bullet \tab Modal dialogs have to be the front-most window from the time they first appear until the user does something to make the dialog go away.  You've seen this with alert windows, which don't let the user select any other window until one of the alert window buttons is clicked.  Our main event loop has always been set up to allow the user to select any window at any time.  While there are ways to prevent this, it messes up the main event loop, making the program more complicated.\par \par \bullet \tab A modal dialog should grab the user's attention for the program they are running, preventing them from selecting some other program window, but it's handy to be able to use desk accessories while a modal dialog is in use.  After all, the user may want to do some calculating with a calculator desk accessory, or scan a disk with some disk utilities, to figure out what to do about the dialog.  This is possible from the main event loop, but it is very messy.\par \par \bullet \tab Inside your program, you usually use a modal dialog in a situation where you need to get some information, then move on to process it, finally returning to the main event loop.  Ideally, your subroutine would consist of three main parts:\par \par }\pard \qj\fi-360\li1440\widctlpar\adjustright {\f4 1.\tab Draw the dialog.\par 2.\tab Handle any user events to set the various controls.\par 3.\tab Act on the user's choices.\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \par \tab To see what I mean, think about this ruler dialog from Quick Click Draw:\par \par }\pard \qc\fi-360\li720\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1089{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw481\pich358\picwgoal9620\pichgoal7160\macpict\bliptag-463714358\blipupi72{\*\blipuid e45c47caa9daf990c96509ab39b433a4}26c300000000016601e11101a00082a0008e01000a0000000002d0024098003e0000000000aa01e80000000000aa01e10000000000aa01e1000102c30002c30008003fc7ff00feff0008003fc7ff00feff00080030c7000006ff00080030c7000006ff00080030c7000006ff00080030c7000006ff000901307fc8ff0006ff000901307fc8ff0006ff000901307fc8ff0006ff000901307fc8ff0006ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff001001307cd5000001fdfffa00011f06ff001001307cd5000001fdfffa00011f06ff001201307cd500003efd0000f8fb00011f06ff001201307cd500003efd0000f8fb00011f06ff001e0c307c0007c00380000078000060e1000101e3fdff008ffb00011f06ff001e0c307c0007c00380000078000060e1000101e3fdff008ffb00011f06ff001e0b307c00066001800000cc0060e00001039efd0001f380fc00011f06ff001e0b307c00066001800000cc0060e00001039efd0001f380fc00011f06ff00220f307c0006666183c6c0ccf8f8e1e3e1e3e400010770fd00011dc0fc00011f06ff00220f307c0006666183c6c0ccf8f8e1e3e1e3e400010770fd00011dc0fc00011f06ff00220e307c0007c661866700cccc60633333e300070ee00078c6000ee0fc00011f06ff00220e307c0007c661866700cccc60633333e300070ee00078c6000ee0fc00011f06ff00230f307c0006c66187e600cccc60633331e0e400070ee000cccc000ee0fc00011f06ff00230f307c0006c66187e600cccc60633331e0e400070ee000cccc000ee0fc00011f06ff00230f307c00066661860600cccc6c63333030e400070ee000ccd8000ee0fc00011f06ff00230f307c00066661860600cccc6c63333030e400070ee000ccd8000ee0fc00011f06ff00230f307c000663e3c3c60078f838f1e331e3e400070ee000ccf0000ee0fc00011f06ff00230f307c000663e3c3c60078f838f1e331e3e400070ee000ccf0000ee0fc00011f06ff001901307cf90000c0df00070ee000ccd8000ee0fc00011f06ff001901307cf90000c0df00070ee000ccd8000ee0fc00011f06ff001501307cd600070ee000cccc000ee0fc00011f06ff001501307cd600070ee000cccc000ee0fc00011f06ff001501307cd600070ee00078c6000ee0fc00011f06ff001501307cd600070ee00078c6000ee0fc00011f06ff001401307cd600010ee0fd00010ee0fc00011f06ff001401307cd600010ee0fd00010ee0fc00011f06ff001401307cd600010770fd00011dc0fc00011f06ff001401307cd600010770fd00011dc0fc00011f06ff002401307cfe0008f00180c0c06000001efe000018e60001039efd0001f380fc00011f06ff002401307cfe0008f00180c0c06000001efe000018e60001039efd0001f380fc00011f06ff001f09307c000001980000c0c0fe000033e2000101e3fdff008ffb00011f06ff001f09307c000001980000c0c0fe000033e2000101e3fdff008ffb00011f06ff002514307c00000181b387c0c0e3e1e0303e1f1e38f87cc0e800003efd0000f8fb00011f06ff002514307c00000181b387c0c0e3e1e0303e1f1e38f87cc0e800003efd0000f8fb00011f06ff00220d307c000001b9c18cc0c06333301efe330218cccce7000001fdfffa00011f06ff00220d307c000001b9c18cc0c06333301efe330218cccce7000001fdfffa00011f06ff001c13307c00000199818cc0c06333f00333333018ccccdb00011f06ff001c13307c00000199818cc0c06333f00333333018ccccdb00011f06ff001b0c307c00000199818cc0c0633300fd330218cc7cdb00011f06ff001b0c307c00000199818cc0c0633300fd330218cc7cdb00011f06ff001d01307cfe000ff183c7c0fcf331e01e3e1f1e3ccc8cc0dc00011f06ff001d01307cfe000ff183c7c0fcf331e01e3e1f1e3ccc8cc0dc00011f06ff001201307cf5000030fd000078db00011f06ff001201307cf5000030fd000078db00011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff002401307cfd000103fef9000103fefb00013fe0f900013fe0f7000003f9fffe00011f06ff002401307cfd000103fef9000103fefb00013fe0f900013fe0f7000003f9fffe00011f06ff003401307cfd00051c01c00c031efd00031c01c00cfe000e01c01c00c00c031e000001c01c01e0f900001efa000501e000001f06ff003401307cfd00051c01c00c031efd00031c01c00cfe000e01c01c00c00c031e000001c01c01e0f900001efa000501e000001f06ff003301307cfd00056000303c0633fd000361fc303cfe000e06000303c03c063300000600030330f9000070f900043800001f06ff003301307cfd00056000303c0633fd000361fc303cfe000e06000303c03c063300000600030330f9000070f900043800001f06ff003701307cfd0005c000180c0c03fd0003c7ff180cfe000e0c000180c00c0c0300000c00018030f90002e00078fd000670001c00001f06ff003701307cfd0005c000180c0c03fd0003c7ff180cfe000e0c000180c00c0c0300000c00018030f90002e00078fd000670001c00001f06ff003701307cfd0005c000180c1806fd0003cfff980cfe000e0c000180c00c180600000c00018060f90002e000ccfd000630001c00001f06ff003701307cfd0005c000180c1806fd0003cfff980cfe000e0c000180c00c180600000c00018060f90002e000ccfd000630001c00001f06ff003801307cfd0005c000180c300cfd0003c7ff180cfe000e0c000180c00c300c00000c000180c0f9000de000c07cf8787830001c00001f06ff003801307cfd0005c000180c300cfd0003c7ff180cfe000e0c000180c00c300c00000c000180c0f9000de000c07cf8787830001c00001f06ff003701307cfd00056000300c6018fd000361fc300cfe000e06000300c00c601800000600030180f90002e000c0fdcc0630001c00001f06ff003701307cfd00056000300c6018fd000361fc300cfe000e06000300c00c601800000600030180f90002e000c0fdcc0630001c00001f06ff003801307cfd00051c01c03f403ffd00031c01c03ffe000e01c01c03f03f403f000001c01c03f0f9000de000c0ccccc0fc30001c00001f06ff003801307cfd00051c01c03f403ffd00031c01c03ffe000e01c01c03f03f403f000001c01c03f0f9000de000c0ccccc0fc30001c00001f06ff002901307cfd000103fef9000103fefb00013fe0f900013fe0f70001e000fdcc07c030001c00001f06ff002901307cfd000103fef9000103fefb00013fe0f900013fe0f70001e000fdcc07c030001c00001f06ff001601307cd50004e000787cccfe7805001c00001f06ff001601307cd50004e000787cccfe7805001c00001f06ff001101307cd50000e0f900041c00001f06ff001101307cd50000e0f900041c00001f06ff001101307cd5000070f900043800001f06ff001101307cd5000070f900043800001f06ff001201307cd500001efa000501e000001f06ff001201307cd500001efa000501e000001f06ff001001307cd5000003f9fffe00011f06ff001001307cd5000003f9fffe00011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff001007307c0000019800c0cf00011f06ff001007307c0000019800c0cf00011f06ff001007307c000001980003cf00011f06ff001007307c000001980003cf00011f06ff001209307c00000199f1c7c3c6d100011f06ff001209307c00000199f1c7c3c6d100011f06ff001108307c0000019998c306d000011f06ff001108307c0000019998c306d000011f06ff001209307c0000019998c303c0d100011f06ff001209307c0000019998c303c0d100011f06ff001209307c0000019998c36060d100011f06ff001209307c0000019998c36060d100011f06ff001201307cfe0004f199e1c3c6d100011f06ff001201307cfe0004f199e1c3c6d100011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff001901307cfd000103fef70001ff80f300013fe0eb00011f06ff001901307cfd000103fef70001ff80f300013fe0eb00011f06ff002901307cfd00061c01c0180000c0fd0002070070fd000006f9000701c01c0001800007f000011f06ff002901307cfd00061c01c0180000c0fd0002070070fd000006f9000701c01c0001800007f000011f06ff002c01307cfd000261fc30fe0000c0fd000218000cfe000006fe00000cfc0002060003fd000003f000011f06ff002c01307cfd000261fc30fe0000c0fd000218000cfe000006fe00000cfc0002060003fd000003f000011f06ff003201307cfd0024c7ff1838f878f87878000030000607878f8f8e7f0f1f0f1b1e00000c000183e38cc7830780f200011f06ff003201307cfd0024c7ff1838f878f87878000030000607878f8f8e7f0f1f0f1b1e00000c000183e38cc7830780f200011f06ff003001307cfd0003cfff9818fdcc1bc000003000060cccccc6066d998c199c3000000c00018331878cc30cf100011f06ff003001307cfd0003cfff9818fdcc1bc000003000060cccccc6066d998c199c3000000c00018331878cc30cf100011f06ff003201307cfd0024c7ff1818ccc0ccfc7800003000060c0fccc6066d9f8c1f981e00000c00018331830fc30780f200011f06ff003201307cfd0024c7ff1818ccc0ccfc7800003000060c0fccc6066d9f8c1f981e00000c00018331830fc30780f200011f06ff003201307cfd000361fc3018fecc1dc00c000018000c0ccc0cc6c66d980d98180300000600030331878c0300c0f200011f06ff003201307cfd000361fc3018fecc1dc00c000018000c0ccc0cc6c66d980d98180300000600030331878c0300c0f200011f06ff003201307cfd00241c01c03ccc78cc7878000007007007878cc38f6d8f070f181e000001c01c03e3ccc7878780f200011f06ff003201307cfd00241c01c03ccc78cc7878000007007007878cc38f6d8f070f181e000001c01c03e3ccc7878780f200011f06ff001a01307cfd000103fef70001ff80f300023fe003ec00011f06ff001a01307cfd000103fef70001ff80f300023fe003ec00011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff0098003e00aa0000015401e800aa0000015401e100aa0000015401e100010a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff002008307c000001180000c0fe0003070208c0fe0004f86000c003df00011f06ff002008307c000001180000c0fe0003070208c0fe0004f86000c003df00011f06ff001b08307c000001980000c0fe00020c0318fd0000ccdb00011f06ff001b08307c000001980000c0fe00020c0318fd0000ccdb00011f06ff00241b307c000001d99bf8f878d80f1f03b9c7c3c6c0cce319c3c70f1f0f18e300011f06ff00241b307c000001d99bf8f878d80f1f03b9c7c3c6c0cce319c3c70f1f0f18e300011f06ff00231a307c000001f99b6ccccce0198c03f8c6666700cc6318c603199998e200011f06ff00231a307c000001f99b6ccccce0198c03f8c6666700cc6318c603199998e200011f06ff00231a307c000001b99b6cccfcc0198c0358c6666600cc61b0c3c319998fe200011f06ff00231a307c000001b99b6cccfcc0198c0358c6666600cc61b0c3c319998fe200011f06ff00241b307c000001999b6cccc0c0198c0318c6666600cc61b0c06319998180e300011f06ff00241b307c000001999b6cccc0c0198c0318c6666600cc61b0c06319998180e300011f06ff00241b307c00000188fb6cf878c00f0c0319e663c600f8f0e1e3c78f198f18e300011f06ff00241b307c00000188fb6cf878c00f0c0319e663c600f8f0e1e3c78f198f18e300011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff003601307cfd00031c01c00cfe000401c01c01e0fe00031c01c01efe000301c01c03fd00031c01c03efe000401c01c01e0f700011f06ff003601307cfd00031c01c00cfe000401c01c01e0fe00031c01c01efe000301c01c03fd00031c01c03efe000401c01c01e0f700011f06ff003601307cfd00036000303cfe00040600030330fe000360003033fe00040600030330fe000360003030fe000306000303f600011f06ff003601307cfd00036000303cfe00040600030330fe000360003033fe00040600030330fe000360003030fe000306000303f600011f06ff003701307cfd0003c000180cfe00040c00018030fe0003c0001803fe00040c00018330fe0003c000183efe00040c000183e0f700011f06ff003701307cfd0003c000180cfe00040c00018030fe0003c0001803fe00040c00018330fe0003c000183efe00040c000183e0f700011f06ff003701307cfd0003c000180cfe00040c00018060fe0003c000180efe00040c00018330fe0003c0001803fe00040c00018330f700011f06ff003701307cfd0003c000180cfe00040c00018060fe0003c000180efe00040c00018330fe0003c0001803fe00040c00018330f700011f06ff003701307cfd0003c000180cfe00040c000180c0fe0003c0001803fe00040c000183f0fe0003c0001803fe00040c00018330f700011f06ff003701307cfd0003c000180cfe00040c000180c0fe0003c0001803fe00040c000183f0fe0003c0001803fe00040c00018330f700011f06ff003701307cfd00036000300cfe00040600030180fe000360003033fe00040600030030fe000360003033fe00040600030330f700011f06ff003701307cfd00036000300cfe00040600030180fe000360003033fe00040600030030fe000360003033fe00040600030330f700011f06ff003701307cfd00031c01c03ffe000401c01c03f0fe00031c01c01efe000401c01c0030fe00031c01c01efe000401c01c01e0f700011f06ff003701307cfd00031c01c03ffe000401c01c03f0fe00031c01c01efe000401c01c0030fe00031c01c01efe000401c01c01e0f700011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff003801307cfd00031c01c01efe002301c01c00c0f000001c01c00c1e000001c01c00c1e000001c01c01e30000001c01c01e1e0f800011f06ff003801307cfd00031c01c01efe002301c01c00c0f000001c01c00c1e000001c01c00c1e000001c01c01e30000001c01c01e1e0f800011f06ff003801307cfd000361fc3033fe001306000303c13000006000303c33000006000303c3fe000c60003033330000060003033330f800011f06ff003801307cfd000361fc3033fe001306000303c13000006000303c33000006000303c3fe000c60003033330000060003033330f800011f06ff003801307cfd0003c7ff1833fe00230c000180c3300000c000180c0300000c000180c3e00000c00018033300000c0001803030f800011f06ff003801307cfd0003c7ff1833fe00230c000180c3300000c000180c0300000c000180c3e00000c00018033300000c0001803030f800011f06ff003801307cfd0003cfff981efe00230c000180c3300000c000180c0600000c000180c3300000c00018063300000c000180e060f800011f06ff003801307cfd0003cfff981efe00230c000180c3300000c000180c0600000c000180c3300000c00018063300000c000180e060f800011f06ff003801307cfd0003c7ff1833fe00230c000180c3300000c000180c0c00000c000180c3300000c000180c3f00000c00018030c0f800011f06ff003801307cfd0003c7ff1833fe00230c000180c3300000c000180c0c00000c000180c3300000c000180c3f00000c00018030c0f800011f06ff003801307cfd000361fc3033fe002306000300c32000006000300c18000006000300c330000060003018030000060003033180f800011f06ff003801307cfd000361fc3033fe002306000300c32000006000300c18000006000300c330000060003018030000060003033180f800011f06ff003801307cfd00031c01c01efe002301c01c03f3c000001c01c03f3f000001c01c03f1e000001c01c03f03000001c01c01e3f0f800011f06ff003801307cfd00031c01c01efe002301c01c03f3c000001c01c03f3f000001c01c03f1e000001c01c03f03000001c01c01e3f0f800011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff00170e307c000001180000c00000c000003cd600011f06ff00170e307c000001180000c00000c000003cd600011f06ff001908307c000001980000c0fc000018fa000030de00011f06ff001908307c000001980000c0fc000018fa000030de00011f06ff002017307c000001d99bf8f878d9c7c3e0187c3c6c79fc3c7c7c60df00011f06ff002017307c000001d99bf8f878d9c7c3e0187c3c6c79fc3c7c7c60df00011f06ff001f16307c000001f99b6ccccce0c6666018666670cdb6666630de00011f06ff001f16307c000001f99b6ccccce0c6666018666670cdb6666630de00011f06ff001f16307c000001b99b6cccfcc0c6666018666060fdb67e6630de00011f06ff001f16307c000001b99b6cccfcc0c6666018666060fdb67e6630de00011f06ff001f16307c000001999b6cccc0c0c663e018666660c1b6606636de00011f06ff001f16307c000001999b6cccc0c0c663e018666660c1b6606636de00011f06ff002017307c00000188fb6cf878c1e664603c663c6079b63c661c60df00011f06ff002017307c00000188fb6cf878c1e664603c663c6079b63c661c60df00011f06ff000f01307cf7000103c0d500011f06ff000f01307cf7000103c0d500011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff003601307cfd00031c01c00cfe000401c01c01e0fe00031c01c01efe000301c01c03fd00031c01c03efe000401c01c01e0f700011f06ff003601307cfd00031c01c00cfe000401c01c01e0fe00031c01c01efe000301c01c03fd00031c01c03efe000401c01c01e0f700011f06ff003601307cfd000361fc303cfe00040600030330fe000360003033fe00040600030330fe000360003030fe000306000303f600011f06ff003601307cfd000361fc303cfe00040600030330fe000360003033fe00040600030330fe000360003030fe000306000303f600011f06ff003701307cfd0003c7ff180cfe00040c00018030fe0003c0001803fe00040c00018330fe0003c000183efe00040c000183e0f700011f06ff003701307cfd0003c7ff180cfe00040c00018030fe0003c0001803fe00040c00018330fe0003c000183efe00040c000183e0f700011f06ff003701307cfd0003cfff980cfe00040c00018060fe0003c000180efe00040c00018330fe0003c0001803fe00040c00018330f700011f06ff003701307cfd0003cfff980cfe00040c00018060fe0003c000180efe00040c00018330fe0003c0001803fe00040c00018330f700011f06ff003701307cfd0003c7ff180cfe00040c000180c0fe0003c0001803fe00040c000183f0fe0003c0001803fe00040c00018330f700011f06ff003701307cfd0003c7ff180cfe00040c000180c0fe0003c0001803fe00040c000183f0fe0003c0001803fe00040c00018330f700011f06ff003701307cfd000361fc300cfe00040600030180fe000360003033fe00040600030030fe000360003033fe00040600030330f700011f06ff003701307cfd000361fc300cfe00040600030180fe000360003033fe00040600030030fe000360003033fe00040600030330f700011f06ff003701307cfd00031c01c03ffe000401c01c03f0fe00031c01c01efe000401c01c0030fe00031c01c01efe000401c01c01e0f700011f06ff003701307cfd00031c01c03ffe000401c01c03f0fe00031c01c01efe000401c01c0030fe00031c01c01efe000401c01c01e0f700011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff003801307cfd00031c01c01efe002301c01c00c0f000001c01c00c1e000001c01c00c1e000001c01c01e30000001c01c01e1e0f800011f06ff003801307cfd00031c01c01efe002301c01c00c0f000001c01c00c1e000001c01c00c1e000001c01c01e30000001c01c01e1e0f800011f06ff003801307cfd000360003033fe001306000303c13000006000303c33000006000303c3fe000c60003033330000060003033330f800011f06ff003801307cfd000360003033fe001306000303c13000006000303c33000006000303c3fe000c60003033330000060003033330f800011f06ff003801307cfd0003c0001833fe00230c000180c3300000c000180c0300000c000180c3e00000c00018033300000c0001803030f800011f06ff003801307cfd0003c0001833fe00230c000180c3300000c000180c0300000c000180c3e00000c00018033300000c0001803030f800011f06ff003801307cfd0003c000181efe00230c000180c3300000c000180c0600000c000180c3300000c00018063300000c000180e060f800011f06ff003801307cfd0003c000181efe00230c000180c3300000c000180c0600000c000180c3300000c00018063300000c000180e060f800011f06ff003801307cfd0003c0001833fe00230c000180c3300000c000180c0c00000c000180c3300000c000180c3f00000c00018030c0f800011f06ff003801307cfd0003c0001833fe00230c000180c3300000c000180c0c00000c000180c3300000c000180c3f00000c00018030c0f800011f06ff003801307cfd000360003033fe002306000300c32000006000300c18000006000300c330000060003018030000060003033180f800011f06ff003801307cfd000360003033fe002306000300c32000006000300c18000006000300c330000060003018030000060003033180f800011f06ff003801307cfd00031c01c01efe002301c01c03f3c000001c01c03f3f000001c01c03f1e000001c01c03f03000001c01c01e3f0f800011f06ff003801307cfd00031c01c01efe002301c01c03f3c000001c01c03f3f000001c01c03f1e000001c01c03f03000001c01c01e3f0f800011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff002801307cfd000103fefb00013fe0fc000103fefb00013fe0fc000103fefb00013fe0f500011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff0098003e01540000016601e801540000016601e101540000016601e100010a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000a01307cc900011f06ff000901307fc8ff0006ff000901307fc8ff0006ff000901307fc8ff0006ff000901307fc8ff0006ff00080030c7000006ff00080030c7000006ff00080030c7000006ff00080030c7000006ff0008003fc7ff00feff0008003fc7ff00feff0002c30002c300a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi-360\li720\widctlpar\adjustright {\f4 Figure 15-1:  Ruler Dialog from Quick Click Draw\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \par \tab This dialog appears when the user picks the "Custom Rulers..." command from the Layout menu.  The natural way to write the program is:\par \par }\pard \qj\fi-360\li1440\widctlpar\adjustright {\f4 1.\tab Draw the dialog.\par 2.\tab Handle any user events.\par 3.\tab Make the appropriate changes to the internal tables that control the ruler in a drawing.\par 4.\tab Redraw the front-most user window with the new ruler settings.\par 5.\tab Return control to the main event loop.\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \par \tab This leaves you between a rock and a hard place concerning the program design, though.  The first choice is to mess up this clean subroutine design (and your main program loop) by bailing out to the main program loop after drawing the dialog, letting the main event loop handle user events, then call some other subroutine to handle the ruler changes.  The other choice is to create a second event loop to handle the dialog.  That is bad for two reasons: it makes the program larger, and it creates a second event loop, making the program harder to modify and making errors more likely.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par {\*\bkmkstart bk82}Well, I wouldn't have spent all that time telling you about all of these problems if there wasn't a solution, and there is.  The Window Manager has a call called }{\f6\fs20 DoModalWindow}{\f4 .  It's sort of like }{\f6\fs20 TaskMaster}{\f4  for modal dialogs.  You call }{\f6\fs20 DoModalWindow}{\f4  repeatedly, just like you call }{\f6\fs20 TaskMaster}{\f4  in your main event loop.  }{\f6\fs20 DoModalWindow}{\f4  returns the control that was hit (if any), just like }{\f6\fs20 TaskMaster}{\f4  returns the event code, and even returns 0 if no control was hit, just as }{\f6\fs20 TaskMaster}{\f4  returns null events.  You just call this subroutine until you see a hit on one of the buttons that gets rid of the dialog, like an OK button or a Cancel button, then drop out of your loop and do whatever else you need to do.\par }{\f6\fs20 DoModalWindow}{\f4  is defined like this:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20 function DoModalWindow (event: eventRecord;\par }\pard \fi360\widctlpar\adjustright {\f6\fs20    updateProc, eventHook, beepProc: procPtr; flags: integer): longint;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Using the call isn't very complicated, but there are a lot of options.  I'm going to go into detail on a couple, and gloss over some others.  The reason is to keep this discussion simple, and concentrate on the concepts rather than getting bogged down in details.\par The first parameter is an event record; }{\f6\fs20 DoModalWindow}{\f4  uses this event record for calls to }{\f6\fs20 GetNextEvent}{\f4 .  You can pass the same event record that you use in your main event loop, but I'd recommend against it.  A local event record will keep the two loops separate, and just might prevent some hard to track down bugs.  Keeping separate code separate is one of the fundamental principles of modularized coding, and that's really what you are doing when you use a local event record.\par The next three parameters are addresses to procedures that will replace standard procedures inside }{\f6\fs20 DoModalWindow}{\f4 , or that give you a chance to get into the act, doing something while }{\f6\fs20 DoModalWindow}{\f4  processes an event.  The ideas behind writing these procedures are the same as the ideas behind other procedures you have already learned about.  I'm not going to go into details about these procedures here.  If you are curious, you can refer to the toolbox reference manuals for details.  All of these procedures have default procedures; you can pass nil for all three parameters to get the defaults.\par The last parameter is a flag word.  Here's a bit-by-bit breakdown:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 bit 15\tab If this bit is set, the dialog can be moved.  If the bit is clear, the dialog can't be moved.\par \par \tab Setting this bit is a start, but you still have to have something to click on with the mouse.  If you want a moveable dialog, you have to set this bit }{\i\f4 and}{\f4  make sure the dialog has a title bar.\par \par bit 14\tab Some windows may need to be updated while }{\f6\fs20 DoModalWindow}{\f4  has control.  If the dialog is moveable, just moving it might uncover part of another window.  Even if the dialog can't be moved, a desk accessory or interrupt handler (like a message from the AppleTalk network software) could wipe out part of a window.  If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  will try to call the update procedure for any window that needs to be updated; that will work fine the way we've defined windows and update procedures in this course.  If this bit is not set, windows other than the dialog itself and desk accessory windows won't get updated unless you do it manually in the loop that calls }{\f6\fs20 DoModalWindow}{\f4 .\par \par bits 13-6\tab These bits are reserved, and must be set to 0.\par \par bit 5\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  returns any time it handles an activate event, giving your program a chance to do any clean-up tasks it might want to do after a system window appears or vanishes.  If this bit is clear, }{\f6\fs20 DoModalWindow}{\f4  doesn't return after an activate event; instead, it loops and checks for another event.\par \par bit 4\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  allows desk accessories to operate, and does everything appropriate to handle them.\par \par bit 3\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  will switch the cursor from the normal arrow to an I-beam cursor when the cursor is over an edit line or text edit control.  That's what you would normally want.  Be careful, though \endash  if this bit is set, and if your dialog actually has an edit line or text edit control, the cursor might still be an I-beam cursor when the dialog closes.  It's up to you to call }{\f6\fs20 InitCursor}{\f4  to make sure the cursor is reset to an arrow.\par \par bit 2\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  calls }{\f6\fs20 MenuKey}{\f4  to see if keys pressed while the open-apple key is pressed are menu command equivalents.  If this bit is clear, }{\f6\fs20 DoModalWindow}{\f4  returns all key events except the standard keyboard equivalents for cut (}{\outl\f4\fs20 \u-3\'f0}{\f4 X), copy (}{\outl\f4\fs20 \u-3\'f0}{\f4 C), paste (}{\outl\f4\fs20 \u-3\'f0}{\f4 V), and undo (}{\outl\f4\fs20 \u-3\'f0}{\f4 Z).  Those four key equivalents are always handled by }{\f6\fs20 DoModalWindow}{\f4 .\par \par bit 1\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  will allow the user to pull down menus and use menu commands.  }{\f6\fs20 DoModalWindow}{\f4  will handle any of the standard editing commands, but your program will have to handle any other menu commands.  Of course, you could disable all of the menu commands except the ones you want to handle while you are in the dialog.\par \par bit 0\tab If this bit is clear, }{\f6\fs20 DoModalWindow}{\f4  uses the Scrap Manager for cut, copy and paste.  If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  doesn't use the Scrap Manager.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Since }{\f6\fs20 DoModalWindow}{\f4  returns the part control for any controls that are hit, you can handle the controls the way you did in lessons 13 and 14.\par Putting these ideas together, here's how you would use }{\f6\fs20 DoModalWindow}{\f4  in a typical loop:\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 dPtr := NewWindow2(@'Test', 0, nil, nil, $02, 1001, $800E);\par repeat\par    part := DoModalWindow(myEvent, nil, nil, nil, $C01E);\par    case part of\par       \{handle control hits here\}\par       end; \{case\}\par until part in [\{put a list of the part codes for exit buttons here\}];\par CloseWindow(dPtr);\par InitCursor;\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 \{take action based on control settings here\}}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 15-1:  Start with the solution to Problem 12-1; that's the latest version of your text editor.  In this problem, you'll add margin adjustment.\par Create a menu command called "Margins...", adding it to the Style menu.  (The "..." after the menu command name is a convention \endash  all menu commands that bring up a dialog end with "...")  When this menu command is used, bring up a modal dialog like the one shown below.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1090{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw216\pich212\picwgoal4320\pichgoal4240\macpict\bliptag918589739\blipupi72{\*\blipuid 36c0912bbbbf787820744470632e492a}0fd10000000000d400d81101a00082a0008e01000a0000000002d0024098001c0000000000d400d80000000000d400d80000000000d400d8000102e50002e50007003fe8ff01fc0007003fe8ff01fc00070030e800010c00070030e800010c00070030e800010c00070030e800010c00130033f9ff08802080000018000001f9ff01cc00130033f9ff08802080000018000001f9ff01cc000c0030f800013180f300010c000c0030f800013180f300010c00130033f9ff08803b8f9b1f38f87801f9ff01cc00130033f9ff08803b8f9b1f38f87801f9ff01cc00110030f800063f999c3318ccc0f800010c00110030f800063f999c3318ccc0f800010c00130033f9ff08803599983318cc7801f9ff01cc00130033f9ff08803599983318cc7801f9ff01cc00110030f800063199981f18cc0cf800010c00110030f800063199981f18cc0cf800010c00130033f9ff0880318f98233ccc7801f9ff01cc00130033f9ff0880318f98233ccc7801f9ff01cc000b0030f500001ef500010c000b0030f500001ef500010c00070030e800010c00070030e800010c0007003fe8ff01fc0007003fe8ff01fc00070030e800010c00070030e800010c00070030e800010c00070030e800010c000901307feaff02fe0c000901307feaff02fe0c000901307feaff02fe0c000901307feaff02fe0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c001505307c03c00380fe000041fe000030f600023e0c001505307c03c00380fe000041fe000030f600023e0c001109307c0660018000030063f200023e0c001109307c0660018000030063f200023e0c00170f307c0603c183c3c7c0771f363e71f0f0f800023e0c00170f307c0603c183c3c7c0771f363e71f0f0f800023e0c00170f307c03c661866663007f333866319980f800023e0c00170f307c03c661866663007f333866319980f800023e0c00170f307c0067e187e603006b3330663198f0f800023e0c00170f307c0067e187e603006b3330663198f0f800023e0c00170f307c066601860663606333303e319818f800023e0c00170f307c066601860663606333303e319818f800023e0c001802307c03fdc30ac1c0631f30467998f19980fa00023e0c001802307c03fdc30ac1c0631f30467998f19980fa00023e0c000d01307cf700003cf500023e0c000d01307cf700003cf500023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000f01307cf400fbff0080fe00023e0c000f01307cf400fbff0080fe00023e0c001201307cf40000c0fd00010180fe00023e0c001201307cf40000c0fd00010180fe00023e0c001d07307c060001c00082fe000060fe0001c078fe00010180fe00023e0c001d07307c060001c00082fe000060fe0001c078fe00010180fe00023e0c001907307c0600030600c6fa0001c098fe00010180fe00023e0c001907307c0600030600c6fa0001c098fe00010180fe00023e0c001d10307c0603c7cf80ee3e6c7ce3e00000c198fe00010180fe00023e0c001d10307c0603c7cf80ee3e6c7ce3e00000c198fe00010180fe00023e0c001d10307c0606630600fe6670cc63300000c198fe00010180fe00023e0c001d10307c0606630600fe6670cc63300000c198fe00010180fe00023e0c001d10307c0607e30600d66660cc63300000c198fe00010180fe00023e0c001d10307c0607e30600d66660cc63300000c198fe00010180fe00023e0c001d10307c06060306c0c666607c63300000c190fe00010180fe00023e0c001d10307c06060306c0c666607c63300000c190fe00010180fe00023e0c001d10307c07e3c30380c63e608cf3300000c1e0fe00010180fe00023e0c001d10307c07e3c30380c63e608cf3300000c1e0fe00010180fe00023e0c001601307cf9000078fd0000c0fd00010180fe00023e0c001601307cf9000078fd0000c0fd00010180fe00023e0c001201307cf40000c0fd00010180fe00023e0c001201307cf40000c0fd00010180fe00023e0c000f01307cf400fbff0080fe00023e0c000f01307cf400fbff0080fe00023e0c000901307cea00023e0c000901307cea00023e0c000f01307cf400fbff0080fe00023e0c000f01307cf400fbff0080fe00023e0c001301307cf40006c3fffffc000180fe00023e0c001301307cf40006c3fffffc000180fe00023e0c001d08307c07c30018000104fe0009c00000c20f0e0c000180fe00023e0c001d08307c07c30018000104fe0009c00000c20f0e0c000180fe00023e0c001a08307c066000180c018cfb0006c27e667c000180fe00023e0c001a08307c066000180c018cfb0006c27e667c000180fe00023e0c001d15307c06670f9f1f01dc7cd8f9c7c000c20e660c000180fe00023e0c001d15307c06670f9f1f01dc7cd8f9c7c000c20e660c000180fe00023e0c001d15307c07c319998c01fccce198c66000c3e70fe4000180fe00023e0c001d15307c07c319998c01fccce198c66000c3e70fe4000180fe00023e0c001d15307c06c319998c01acccc198c66000c3e667e4000180fe00023e0c001d15307c06c319998c01acccc198c66000c3e667e4000180fe00023e0c001d15307c06630f998d818cccc0f8c66000c2666664000180fe00023e0c001d15307c06630f998d818cccc0f8c66000c2666664000180fe00023e0c001d15307c0667919987018c7cc119e66000c30f0f0c000180fe00023e0c001d15307c0667919987018c7cc119e66000c30f0f0c000180fe00023e0c001a04307c00000ffb0000f0fe0006c3fffffc000180fe00023e0c001a04307c00000ffb0000f0fe0006c3fffffc000180fe00023e0c001201307cf40000c0fd00010180fe00023e0c001201307cf40000c0fd00010180fe00023e0c000f01307cf400fbff0080fe00023e0c000f01307cf400fbff0080fe00023e0c000901307cea00023e0c000901307cea00023e0c000f01307cf400fbff0080fe00023e0c000f01307cf400fbff0080fe00023e0c001201307cf40000c0fd00010180fe00023e0c001201307cf40000c0fd00010180fe00023e0c001903307c07c0fb000018fd0001c078fe00010180fe00023e0c001903307c07c0fb000018fd0001c078fe00010180fe00023e0c001903307c0660fb000018fd0001c098fe00010180fe00023e0c001903307c0660fb000018fd0001c098fe00010180fe00023e0c001d0b307c0663e6c7c7cd8f9f1f0ffe0001c198fe00010180fe00023e0c001d0b307c0663e6c7c7cd8f9f1f0ffe0001c198fe00010180fe00023e0c001d0b307c07c6670cccce19999998fe0001c198fe00010180fe00023e0c001d0b307c07c6670cccce19999998fe0001c198fe00010180fe00023e0c001d0b307c0606660ccccc1999998ffe0001c198fe00010180fe00023e0c001d0b307c0606660ccccc1999998ffe0001c198fe00010180fe00023e0c001d10307c0606660cc7cc19999981800000c190fe00010180fe00023e0c001d10307c0606660cc7cc19999981800000c190fe00010180fe00023e0c001d0b307c0603e607c8cc0f9f198ffe0001c1e0fe00010180fe00023e0c001d0b307c0603e607c8cc0f9f198ffe0001c1e0fe00010180fe00023e0c001901307cfd000307800018fc0000c0fd00010180fe00023e0c001901307cfd000307800018fc0000c0fd00010180fe00023e0c001201307cf40000c0fd00010180fe00023e0c001201307cf40000c0fd00010180fe00023e0c000f01307cf400fbff0080fe00023e0c000f01307cf400fbff0080fe00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000901307cea00023e0c000f03307c001ffeff00f0f000023e0c000f03307c001ffeff00f0f000023e0c001003307c03e0fe00010f80f100023e0c001003307c03e0fe00010f80f100023e0c001803307c1e3ffeff01f8f0fd00003ffaff00f0fe00023e0c001803307c1e3ffeff01f8f0fd00003ffaff00f0fe00023e0c001903307c39e0fe00010f38fe000101e0fa00001efe00023e0c001903307c39e0fe00010f38fe000101e0fa00001efe00023e0c001702307c77fd000101dcfe000007f90006038000003e0c001702307c77fd000101dcfe000007f90006038000003e0c001d08307cee00078c6000eefe00030e000780fe0008070001c000003e0c001d08307cee00078c6000eefe00030e000780fe0008070001c000003e0c001d08307cee000cccc000eefe00030e000cc0fe0008030001c000003e0c001d08307cee000cccc000eefe00030e000cc0fe0008030001c000003e0c001d08307cee000ccd8000eefe000f0e000c07cf8787830001c000003e0c001d08307cee000ccd8000eefe000f0e000c07cf8787830001c000003e0c001d08307cee000ccf0000eefe00030e000c0cfecc08c30001c000003e0c001d08307cee000ccf0000eefe00030e000c0cfecc08c30001c000003e0c001d08307cee000ccd8000eefe000f0e000c0ccccc0fc30001c000003e0c001d08307cee000ccd8000eefe000f0e000c0ccccc0fc30001c000003e0c001c08307cee000cccc000eefe00020e000cfdcc08030001c000003e0c001c08307cee000cccc000eefe00020e000cfdcc08030001c000003e0c001d08307cee00078c6000eefe000f0e000787ccc787878001c000003e0c001d08307cee00078c6000eefe000f0e000787ccc787878001c000003e0c001602307ceefc0000eefe00000ef9000601c000003e0c001602307ceefc0000eefe00000ef9000601c000003e0c001702307c77fd000101dcfe000007f90006038000003e0c001702307c77fd000101dcfe000007f90006038000003e0c001903307c39e0fe00010f38fe000101e0fa00001efe00023e0c001903307c39e0fe00010f38fe000101e0fa00001efe00023e0c001803307c1e3ffeff01f8f0fd00003ffaff00f0fe00023e0c001803307c1e3ffeff01f8f0fd00003ffaff00f0fe00023e0c001003307c03e0fe00010f80f100023e0c001003307c03e0fe00010f80f100023e0c000f03307c001ffeff00f0f000023e0c000f03307c001ffeff00f0f000023e0c000901307cea00023e0c000901307cea00023e0c000901307feaff02fe0c000901307feaff02fe0c000901307feaff02fe0c000901307feaff02fe0c00070030e800010c00070030e800010c00070030e800010c00070030e800010c0007003fe8ff01fc0007003fe8ff01fc0002e50002e500a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 15-2:  Margin Adjustment Dialog\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The user should be able to move this dialog, use desk accessories, and use menu commands.\par Once the OK or Cancel button is selected, drop out of the }{\f6\fs20 DoModalWindow}{\f4  loop.  If the Cancel button was hit, don't do anything.  If the OK button was hit, change the ruler and redraw the window.\par Hint:  You will need to call }{\f6\fs20 TESetRuler}{\f4  to implement this command, but you're also dealing with more then one window.  That makes it tough to use nil for the last parameter, telling TextEdit to use the current text record.  The program will be a lot easier to write if you use }{\f6\fs20 GetCtlHandleFromID}{\f4  to fetch the actual TextEdit control handle, and pass the result as the last parameter to }{\f6\fs20 TESetRuler}{\f4 .\par {\*\bkmkend bk82}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DoModalWindow}{\rxe bk82}}}{\*\bkmkend bk83}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modal dialogs}{\rxe bk83}}}{\*\bkmkend bk84}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs\:modal}{\rxe bk84}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Modeless Dialogs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Modeless Dialogs\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk85}{\*\bkmkstart bk86}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 A modeless dialog is just another window with a lot of controls instead of data.  Since modeless dialogs are just windows, you need to handle them from the main event loop.  One way to handle this situation is to implement two subroutines, one to see if the front window is a dialog, and the other to actually handle any event that might occur in the dialog.  The possible events are usually limited to control events, so you don't usually have to make the check in every position in the event loop.  Here's a typical event loop, modified to check for modeless dialog events:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20 repeat\par    event := TaskMaster($076E, lastEvent);\par    case event of\par       wInSpecial,\par       wInMenuBar:  HandleMenu;\par \par       wInGoAway:   DoClose(grafPortPtr(myEvent.taskData));\par \par       wInControl:  if IsDialog(FrontWindow) then\par                       HandleDialog(FrontWindow);\par \par       otherwise:   ;\par       end; \{case\}\par }\pard \fi360\widctlpar\adjustright {\f6\fs20 until done;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par If there is more than one dialog, }{\f6\fs20 HandleDialog}{\f4  should probably call a separate subroutine for each one.  Any duplication of effort this creates will be well paid for with a program that is easy to modify and debug.\par When you actually use a modeless dialog, it's quite common to select a document window, bringing it to front, and covering up the dialog in the process.  The natural reaction when you want the dialog and don't see it is to pull down the menu and use the command to bring up the dialog.  The best way to handle this in your program is to check to see if the dialog is already open before you call }{\f6\fs20 NewWindow2}{\f4 .  If the dialog is already open, just bring the dialog window to front by calling }{\f6\fs20 BringToFront}{\f4 , like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 BringToFront}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 BringToFront(dialogWPtr);\par }{\f4 \par Problem 15-2:  Start with the solution to Problem 15-1, and add a new menu called Find.  This menu should have one menu item, "Find..."  (In a complete editor, it would also have a search and replace dialog, and perhaps some other movement commands.)  Use a dialog like this for the command:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1091{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw208\pich110\picwgoal4160\pichgoal2200\macpict\bliptag-2022885052\blipupi72{\*\blipuid 876d39441439f65d291cd1d2cea834fa}06b100000000006e00d01101a00082a0008e01000a0000000002d0024098001a00000000006e00d000000000006e00d000000000006e00d0000102e70002e70006003fe9ff00fc06003fe9ff00fc060030e900000c060030e900000c060030e900000c060030e900000c120333f3fff9fbff05803e30001803f8ff00cc120333f3fff9fbff05803e30001803f8ff00cc100330030018fa000330000018f700000c100330030018fa000330000018f700000c120333f30019fbff05803071f0f803f8ff00cc120333f30019fbff05803071f0f803f8ff00cc100330030018fa00033c319998f700000c100330030018fa00033c319998f700000c120333f30019fbff05803031999803f8ff00cc120333f30019fbff05803031999803f8ff00cc100330030018fa000330319998f700000c100330030018fa000330319998f700000c120333f3fff9fbff0580307998f803f8ff00cc120333f3fff9fbff0580307998f803f8ff00cc060030e900000c060030e900000c060030e900000c060030e900000c06003fe9ff00fc06003fe9ff00fc060030e900000c060030e900000c060030e900000c060030e900000c060030e900000c060030e900000c090030fa00f1ff01c00c090030fa00f1ff01c00c0f0030fa0000c0fe000002f60001c00c0f0030fa0000c0fe000002f60001c00c13083001f18000c00000c0fe000002f60001c00c13083001f18000c00000c0fe000002f60001c00c130c3001800000c00000c0c00000c2f60001c00c130c3001800000c00000c0c00000c2f60001c00c130c3001838f87cc0000c1f0f199f2f60001c00c130c3001838f87cc0000c1f0f199f2f60001c00c130c3001e18cccc00000c0c198f0c2f60001c00c130c3001e18cccc00000c0c198f0c2f60001c00c130c3001818cccc00000c0c1f860c2f60001c00c130c3001818cccc00000c0c1f860c2f60001c00c130c3001818cccc00000c0d980f0daf60001c00c130c3001818cccc00000c0d980f0daf60001c00c130c300183ccc7cc0000c070f19872f60001c00c130c300183ccc7cc0000c070f19872f60001c00c0f0030fa0000c0fe000002f60001c00c0f0030fa0000c0fe000002f60001c00c0b0030fa0000c0f20001c00c0b0030fa0000c0f20001c00c090030fa00f1ff01c00c090030fa00f1ff01c00c060030e900000c060030e900000c060030e900000c060030e900000c060030e900000c060030e900000c0c02300007fcff00c0f100000c0c02300007fcff00c0f100000c0c023000f8fc00003ef100000c0c023000f8fc00003ef100000c110230078ffcff01e3c0fc00f9ff02c0000c110230078ffcff01e3c0fc00f9ff02c0000c1402300e78fc00013ce0fd00010780fa000278000c1402300e78fc00013ce0fd00010780fa000278000c1302301dc0fc00010770fd00001cf900020e000c1302301dc0fc00010770fd00001cf900020e000c1909303b8003e300018003b8fd000238001efd00041c0007000c1909303b8003e300018003b8fd000238001efd00041c0007000c1909303b80030000018003b8fd0002380033fd00040c0007000c1909303b80030000018003b8fd0002380033fd00040c0007000c1a09303b8003071f0f8003b8fd000b3800301f3e1e1e0c0007000c1a09303b8003071f0f8003b8fd000b3800301f3e1e1e0c0007000c1909303b8003c319998003b8fd0002380030fd33040c0007000c1909303b8003c319998003b8fd0002380030fd33040c0007000c1a09303b80030319998003b8fd000b3800303333303f0c0007000c1a09303b80030319998003b8fd000b3800303333303f0c0007000c1909303b80030319998003b8fd00013800fd3305300c0007000c1909303b80030319998003b8fd00013800fd3305300c0007000c1a09303b800307998f8003b8fd000438001e1f33fe1e030007000c1a09303b800307998f8003b8fd000438001e1f33fe1e030007000c1302303b80fc000103b8fd000038f9000207000c1302303b80fc000103b8fd000038f9000207000c1302301dc0fc00010770fd00001cf900020e000c1302301dc0fc00010770fd00001cf900020e000c1402300e78fc00013ce0fd00010780fa000278000c1402300e78fc00013ce0fd00010780fa000278000c110230078ffcff01e3c0fc00f9ff02c0000c110230078ffcff01e3c0fc00f9ff02c0000c0c023000f8fc00003ef100000c0c023000f8fc00003ef100000c0c02300007fcff00c0f100000c0c02300007fcff00c0f100000c060030e900000c060030e900000c060030e900000c060030e900000c060030e900000c060030e900000c06003fe9ff00fc06003fe9ff00fc02e70002e700a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 15-3:  Sample Find Dialog\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Add appropriate subroutines to create this dialog, detect and handle hits in the dialog from the main event loop, and to make the dialog go away when the appropriate button is hit.  Use a close box with the dialog, and support closing the dialog when the cancel button is hit, when the close box is hit, or when Close is selected from the File menu and the dialog is the front window.\par The point of this problem is to handle a modeless dialog, not to delve into the data structures and algorithms for searching a text edit buffer.  If you would like to actually handle the Find and Replace commands, go for it: it's a great programming exercise, but it won't teach you much about using dialogs.  The solution does implement the commands, though.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f6\fs20 GetNextWindow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f6\fs20 TEGetSelection}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f6\fs20 TESetSelection}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you do decide to implement the Find command, there are two problems you'll have to deal with.  The first is finding the window to search \endash  it's not the front window, since the Find dialog is active.  You can use }{\f6\fs20 GetNextWindow}{\f4  to scan the open windows, starting with the Find window, to find the topmost document.  The other problem is that you'll have to find the current selection point (so you know where to start the search) and set the selection point (to select the string, if you find it).  }{\f6\fs20 TEGetSelection}{\f4  and }{\f6\fs20 TESetSelection}{\f4  will find and set the selection point.  See Appendix A or the toolbox reference manuals for details about these calls.\par {\*\bkmkend bk85}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modeless dialogs}{\rxe bk85}}}{\*\bkmkend bk86}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs\:modeless}{\rxe bk86}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson introduced dialogs, which are the main kind of window used with controls.  The lesson covered the difference between modal and modeless dialogs.  It showed you that creating a dialog is no different than creating a standard window with controls.  The lesson also covered the calls and ideas needed to handle events in both modal and modeless dialogs without destroying the structure of your program's main event loop.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 BringToFront\tab DoModalWindow\tab GetNextWindow\tab TEGetSelection\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 TESetSelection\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk87}{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 dialogs}{\rxe bk87}}}{\v\f4 \par }{\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 16 \endash  Sound Off!}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 16 \endash  Sound Off!}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 16 \endash  Sound Off!\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk92}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The 'S' in Apple IIGS stands for sound.  This lesson introduces the various sound tools.  It would be easy to fill a book this size with nothing but information about sound, and still not cover everything completely, so this lesson doesn't even attempt to cover all of the things you can do with sound on the Apple IIGS.  Instead, this lesson shows you how to handle two of the most common and useful kinds of sound on the Apple IIGS: playback of digitally recorded sound and using the Apple IIGS to play notes using an instrument.\par Along the way, the lesson tells you enough about what sound is for you to understand what the sound tools are doing.  It also reviews the various tools, hardware devices, and software packages that you can explore to create and play back various kinds of sound.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Physics of Sound}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Physics of Sound\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 It's easier to see how the sound tools work, and a lot easier to design instrument files, if you have some idea what sound really is.  You've probably heard that sound is a wave, but what does that mean?  Most people think of a wave of water crashing onto a beach, or ripples in a pond.  That's certainly one kind of wave, and there are a lot of similarities between ripples in a pond and sound waves.  There are a lot of differences, too, though.\par You see, there are three kinds of waves.  Ripples on a pond are transverse waves; they happen when something moves back and forth (or up and down; in this case, the surface of the water).  Sound waves are a compression wave, or longitudinal wave; sound is a compression of the air.  The third kind of wave is a torsional wave, like a kid twisting the ropes on a swing, turning first to the left, and then to the right.  Each of these waves behaves a little differently.\par Sound gets started when something vibrates in the air.  A really simple example is a guitar string.  When you pluck the string, the string vibrates back and forth (a transverse wave).  As it vibrates, the string moves air back and forth, too, first compressing it and then pulling back, forming a mild vacuum, which pulls on the air.  All of those little air molecules get busy, banging into each other.  As they do, a wave forms, which spreads out at the speed of sound.  Imagining sound at the molecular level, with all of those little molecules bumping into each other, you can see why the speed of sound depends on a lot of things, like what those air molecules are made of (generally how much moisture is in the air), how many of them there are in a given amount of space (the density, measured as barometric pressure) and how fast the molecules were moving on their own (the temperature).  In any case, the sound moves out from the string.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1092{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw231\pich126\picwgoal4620\pichgoal2520\macpict\bliptag1018443322\blipupi72{\*\blipuid 3cb4363a8be8d2c5c82c5ef06d66334e}0720ffffffff007d00e61101a0008201000affffffff007d00e698001e00000000006800e800000000006800e500110000007a00e6000002e30002e30002e30007fe00011ffce8000905000003e003c0e900090500001c0ff838e9000905000021f00786e9000a060000ce00007180ea000a0600031000000c60ea000a0600046000000330ea000a02000980fe00008cea0009010012fd000066ea0009010024fd000013ea000a010048fd00010880eb000a010090fd00010640eb000a0100a0fd00010120eb000d010120fc0004b000000ff0ef000d010140fc0004980000f00eef000e010240fc00054c000787e180f0000e010280fc000526003c381c60f0000e010480fc00051380e1c00310f0000d0005fb000508c38e0000c8f0000d0009fb0005063c30000024f0000d000afb00050181c0000012f0000c000afa00007efe00000af000080012f6000009f000080014f6000005f000080014f6000005f000090014f600010480f100090024f600010280f100090028f600010280f100090028f600010280f100090028f600010240f100090048f600010140f100090050f600010140f1000f0050f600010140f700021e38f8fe000f0050f600010140f70002122888fe00130050fc000078fc00010140f70002122888fe00150050fc00074800001fc0000140f700021c3870fe00150050fc00074800007ff0000120f70002142850fe00150090fc0007480001fffc0000a0f8000001fefffe001600a0fc0007480003fffe0000a0f8000302000001fe001300a0fc0004480007fffff50003041c3871fe001300a0fd000501fffffc0003f4ff02f42851fe001b00a0fc000b48000fffffd5492492445a08fc1006281ff8f08000001400a0fd000501fffff00000f4ff05f0ff008000001d00a0fc001748001fffffd5492492445a081450145014a87f00004000001500a0fd000601fffff000007ff5ff058000004000001d00a0fc001148001fffffd5492492445a081450145014a8fe00024000001400a0fd000601fffff000007ff5fffe00024000001d00a0fc001748001fffffd5492492445a081450145014a8fc00004000001500a0fd000601fffff000007ff5ff05fbe0004000001d00a0fc001748003fffffd5492492445a0817d017d017a807ff808000001400a0fd000501fffff80001f4ff05fc38708000001600a0fc0007480007ffff8000a0f8000308142851fe001600a0fc0007480007ffff0000a0f80003041c3871fe001600a0fc0007480003fffe0000a0f8000302000001fe00150090fc0007480001fffc0000a0f8000001fefffe00150050fc00074800007ff0000120f70002142850fe00150050fc00074800001fc0000140f700021c3870fe00130050fc000078fc00010140f70002244450fe000f0050f600010140f70002244450fe000f0050f600010140f700023c7c70fe00090050f600010140f100090048f600010140f100090028f600010240f100090028f600010280f100090028f600010280f100090024f600010280f100090014f600010480f100080014f6000005f000080014f6000005f0000c0012fa0000fcfe000009f0000d000afb00010307fe00000af0000d000afb00050478f0000012f0000d0009fb000508c784000024f0000d0005fb00050b00730000c8f0000e010480fc0005120018c00310f0000e010280fc0005240006381c60f0000e010240fc000548000387e180f0000d010140fc0004900000700eef000d010120fc0004b000000ff0ef000a0100a0fd00010120eb000a010090fd00010660eb000a010048fd000108c0eb0009010024fd000013ea0009010013fd000066ea000a02000880fe00008cea000a0600066000000330ea000a0600011800000c60ea000a060000c700007180ea000905000030f00786e900090500000e0ff838e9000905000001e003c0e90007fe00011ffce80002e30002e30002e30002e30002e30002e30002e30002e30002e3000988002200880022005000290037005700655000170025006800765000010010007d008c070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000109ffffffffffffffff220041003406ff2305022305012305fe2309022308fd230b042308fb230d042309fc2308042309fd230900230603230afd2307032306fe230302a000a301000affffffff007d00e6220041003401002303002302002303002300002301012302002301002302012302002301ff2301002304002303002301002302002302002302002301ff2301002302002303002302012301002302012302002303002302002301ff2301ff2303ff2302002303012301002302012303002303002302002301ff2301002303ff2302002302012301002301012302002302002302002302ff2302002305ff2302002302002304012301002301012302002302002301002302ff230200230400230200230101230100230200230300230000230000230200230200230201230000a000a1a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 16-1:  A Vibrating Guitar String Causes Sound\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par One of the big differences between a transverse wave, like ripples in a pond, and a longitudinal wave, like sound, is what happens when the wave hits something.  When a water wave hits the side of a pool, for example, the water rises, then sinks, and the wave bounces back towards the middle of the pool.  Sound does that, too; that's what causes an echo.  The water doesn't jerk the side of the pool up and down, though, sending the wave through the surrounding concrete, soil, and so forth.  On the other hand, sound does keep right on going.  When sound hits a window, for example, it vibrates the window back and forth.  Some of the energy in the sound wave is wasted, bouncing back towards the source.  Some of the energy gets absorbed by the molecules in the glass, heating them up a bit.  Some of the sound reappears on the other side, though, as the glass vibrates the air and sends the sound on it's way on the other side.  With all of the energy that gets absorbed, it's easy to see why it's hard to hear someone on the other side of a window \endash  but you can certainly hear them.\par Eventually, sound arrives at your ear.  The sound waves vibrate your eardrum, just like they vibrated the window.  Your eardrum separates out the various frequencies of sound in a tuba shaped organ called the cochlea \endash  each frequency ends up vibrating a little better in one part of the tube compared to the other parts.  Nerves in the tube determine whether there is any vibration at a particular frequency, and how loud it is.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1093{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw254\pich148\picwgoal5080\pichgoal2960\macpict\bliptag-955598201\blipupi72{\*\blipuid c70aba872ff5eabbf93b461259cc962c}18bfffffffff009300fd1101a0008201000affffffff009300fd070000000022e0c0e0c00000a000a0a100a40002030001000a000000000000000007000100010911224488112244882200490097f801230602230c06230907230a062300ff2300ee23f80323f8fe23f2fc0a112244881122448884000a0000000000000000a000a301000affffffff009300fd8400d800490092005e00b40049009500967fff004a009200950097009c7fff004b00920094009c009f7fff004c00940096009f00a27fff004d0096009800a200a600b000b37fff004e0098009a00a600b07fff004f009a009c00b300b47fff0050009c009d7fff0051009d009f7fff0052009f00a07fff005300a000a27fff005400a200a47fff005500a400a67fff005600a600a77fff005700a700a97fff005800a900aa7fff005900aa00ab7fff005a00ab00ac7fff005b00ac00ae7fff005c00ae00b07fff005d00b000b27fff005e00b200b47fff7fff2200490097ff0023ff0023fe0123ff0023000023000023ff002301012300002300002303012302012302012302012303022305032302012303022305042302012302012302012300002301002300002300f72300ff2300fe2300ff23fffe2300ff23ffff23000023ff0023ff0023ff0123fe0023fe0023fe0023ff0023000023ff0023fdff23ff0023feff23fcff23fdff23fe0023feffa000a1070000000022e0c0e0c00000a000a0a100a40002030001000a00000000000000000700010001220072004500032302062300062303fe2305fb2303fe2302fb2308f92304fb2305f92305fb2306fd2301fc2303fc2301fe23fd0023fa0423fc0223fa0323fd0323fa0323f80823fc0323fd0423fb0323ff0384000a0000000000000000a000a301000affffffff009300fd8401fc004e004400800074004e007300747fff004f007100737fff0050006f00717fff0051006e006f007300747fff0052006d006e007200737fff0053006a006d7fff00540069006a007100727fff0055006500697fff0056006400657fff0057006300647fff005800600063007000717fff0059006f00707fff005a005f0060006d006f7fff005b005c005f006b006d7fff005c005b005c006a006b7fff005d005a005b0068006a7fff005e0059005a006700687fff005f00570059006600677fff006000560057006500667fff006100550056006400657fff0062005400557fff006300530054006300647fff006400520053006200637fff006500510052006100627fff0066005000517fff0067004f0050006000617fff0068004e004f005f00607fff0069004c004e7fff006a004b004c005e005f7fff006b005d005e7fff006c004a004b005c005d7fff006d0048004a005b005c7fff006e00470048005a005b7fff006f004600470059005a7fff007000450046005800597fff007100440045005700587fff0072005600577fff0073005500567fff0074005400557fff007500450046005300547fff0077005200537fff007800460047005100527fff0079005000517fff007a004f00507fff007b004e004f7fff007d004d004e7fff007e004c004d7fff007f004b004c7fff00800047004b7fff7fff220072004500022301032300012301022300032300012300012300002300012302002300002300002303fe2301ff2301ff2302fd2300002301002302fd2300ff2300002301ff2302fe2301ff2301ff2302fe2303fd2301ff2301ff2302fd2301fe2302fe2302fd2301ff2301ff2303fe2302ff2302ff2302fe2300ff2300ff2301fe2300ff2301ff2301ff2300ff2300002300002300ff23000023ff0023000023fe0123fe0123ff0123fd0223ff0023ff0123fd0123ff0023ff0123fd0223ff0023000123fd0223ff0023ff0123fc0323fe0223fe0223fd0323ff0123ff0123fe0123ff0123000123fe0223ff0023ff0123fe0223ff02a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000109ffffffffffffffff22002d00b50ee12313f4231202230f1423052423fb1723ee1c23f91223f81123f2ff23f8f8a000a301000affffffff009300fd22002d00b502fc2303fa2303f92303fb2303fb2303fc2302fe2302fd2302ff2302ff2306fd2305ff23030023030023010023030123010023030223020123020223010123020223010223020323030523030823020823000423010523010823000623ff0723ff0323000323fe0623fd0623fc0823fe0323fe0323fc0623fd0623fd0623ff0223ff0423fc0923fe0423000123fe0323ff0123ff0123ff0123fe0123ff0023fe0023ff0023fe0023fdff23fcfe23fcfd23fefea000a1070000000022e0c0e0c00000a000a0a100a40002030001000a0000000000000000070001000122003c00bdfe142305172307ee230bf523faeb23f70023fa0984000a0000000000000000a000a301000affffffff009300fd840104003500bc006200d0003500c600c97fff003600c400c600c900cb7fff003700c300c400cb00cc7fff003800c100c300cc00cd7fff003a00c000c100cd00ce7fff003b00bf00c07fff003c00be00bf00ce00cf7fff003d00bd00be7fff004100bc00bd00cf00d07fff004a00cf00d07fff004c00ce00cf7fff004d00cd00ce7fff004f00cc00cd7fff005000cb00cc7fff005100ca00cb7fff005200c900ca7fff005300c800c97fff005500c700c87fff005700bc00bd00c600c77fff005900c500c67fff005b00c400c57fff005c00bd00be7fff005d00c300c47fff005f00be00bf7fff006000c200c37fff006100bf00c000c100c27fff006200c000c17fff7fff22003c00bd000223ff062300042300042300042300032300032301042300012300012301022301032301012301002300002301fe2301ff2300ff2301fe2302fc2302fc2303fc2301ff2301ff2301fe2301ff2301fe2300fe2300ff2300fd23fffd2300ff2300ff23fffe23fffe23fffe23ffff23ffff23feff23000023ff0023000023ff0023fe0123ff0123fe0123000123fe0223ff0123ff02a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122003f00bc03f32311e02312fea000a301000affffffff009300fd22003f00bc01fc2302f92303f92303f92302fc2301fe2303fc2302fe2303fd2304fd2303ff2305fe2304ff230200a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122001200db0c0523061223061f23fc06a000a301000affffffff009300fd22001200db020123020123030223010123030223010123020323010223000123010323010423020723010623010423000223010423000323000323000323000223ff0323000123ff01a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122002000e1021123061423fa1223f613a000a301000affffffff009300fd22002000e1010523010723010723010523010323010323010523000423ff0423ff0323000123ff0223fe0423ff0323fe0423ff0323fe0423fd0523ff02a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122008900c0fdf02302f623f7f423fff1a000a301000affffffff009300fd22008900c000fe23fffc2300fe23fffc2300fe2300fe2300fe2300fd2300002300ff2300fd23fffd23fefd23ffff23000023fffe23fffe23fffd23fffd2300fe23fffc2300fc2300ffa000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122007f00bef70023faf023e7f423e0fd23ef0c23f90923f80c23f707a000a301000affffffff009300fd22007f00befe0023fcff23fdfe23fefd23fffe2300ff23ffff23fefd23ffff23fefe23fefe23fcfe23feff23feff23fdff23fafd23f9fe23f8ff23fcff23fc0023f90023fa0123fa0323fe0123fe0223fd0223fc0323fe0223ff0123ff0223fc0623fe0323ff0223fd0323fd0323fd0323fd02a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220070004618e6230dfca000a301000affffffff009300fd220070004603fd2306f92304fc2306fb2304fd2304fd2305fd2303ff2302ffa000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122000400b6ff1823fe0f23031023000c23f90923f5fd23f9fd23000023f6fea000a301000affffffff009300fd22000400b6000323000523ff0623000423000323000423ff0323000323000023000423000823000423010423010723000323000223000223ff0223fe0323ff0123ff0223fe0123fe0123fe0023feff23fe0023fbfe23feff23fdff23f6fea000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200300071faf82303f82308fd230507a000a301000affffffff009300fd2200300071fffe23fdfc23fffd2300fe2300ff2301ff2301fe2302ff2301ff230100230000230100230200230100230101230000230302230001230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220031006dfcf92300f62308fb23070223070b230c0323030823ff0823f805230902230402a000a301000affffffff009300fd220031006dfffe23fffd23fffd23fffd2300ff2300ff2301fd2301fe2301002301ff2301ff2302ff23010023020023010023010023010123030223010123010223010223020123030323030123010023020123020123010123020223000123010123000223000223000223000123000123000123ff0223fe0223ff0023ff0123ff01230001230101230100230301230401230201a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220031007108032308fb23080023020823f90623fe00a000a301000affffffff009300fd220031007102012304012302002303ff2301ff2302ff2304ff23020023010023020123010123010123000123000123000223ff0223ff0123ff0123ff0123fe0123ff0123000023ff00a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200330085f90223fe052304fe2307fc23fdffa000a301000affffffff009300fd2200330085fe0123fd0123fe0123ff012300002300002300012300022301ff2300002301002303fe2301ff2301002301ff2300ff23ffff230000a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220024007b0407230c0423010823f90523fe01a000a301000affffffff009300fd220024007b010223020223030323030223010023020123020123010123010223000123000123000223ff0223ff0123ff0023fe0223fe0223ff00a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122003e006ffbff2305072306ff2302fa23fbf923f7ff23f90423ff082307092307042309fb2304f82300ffa000a301000affffffff009300fd22003e006fff0023fe002300002300022301012301012301012301012301002301002301002302fe2301fe2300002300fe2300fe2300ff23ffff23ffff23fefe23feff23ffff23ff0023fe0023fc0123fe0123ff0123fe0123000123ff022300012300012300022300022301022301012301012302032301012303022300002301012302002302002302ff2301ff2301002303fe2301ff2302fe2300ff2301ff2300ff2301fe2300ff230000a000a1070000000022e0c0e0c00000a000a0a100a40002030001000a00000000000000000700010001091122448811224488220056007df906230aff230dff230d05230704230904230e0a23050023fcf923f2f923f4f823f0fb23efff84000a0000000000000000a000a301000affffffff009300fd84015400550079007100bc0055007e00867fff00560086008d7fff0057007c007d008d00937fff0058007b007c009300957fff0059007a007b009500997fff005a0079007a0099009c7fff005b00790091009c009e7fff005c00910094009e00a17fff005d0094009600a100a37fff005e0096009900a300a47fff005f0099009b00a400a67fff0060009b009c00a600a77fff0061009c009e00a700a97fff0062009e00a000a900ab7fff006300a000a200ab00ac7fff006400a200a400ac00ae7fff006500a400a600ae00b17fff006600a600a800b100b37fff006700a800aa00b300b57fff006800aa00ab00b500b67fff006900ab00ad00b600b87fff006a00ad00af00b800b97fff006b00af00b100b900ba7fff006c00b100b200ba00bb7fff006d00b200b300bb00bc7fff006e00b300b47fff006f00b400b67fff007000b600b900bb00bc7fff007100b900bb7fff7fff220056007dff0123ff0123ff0123ff012300002300012300002302002300002303002306002303002301002303002304002303012301002302012302012303012303022300002302012304022302012302012302012303022304022301012301012303022302012303012300002301002300002301fe2300ff23ffff23000023fefe23fefe23fdfe23feff23fdff23f9fc23fdfe23fdfe23f9fd23fcff23ff0023feff23fdff23fe0023fcff23fd0023fcff23fc0023fe00a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000109ffffffffffffffff22006a00b9f8fd23f4f723f6fb23f2fc23f40023fe00a000a301000affffffff009300fd22006a00b9fcff23f9fc23fdfd23fdfe23fbfd23fdfe23feff23fafe23fcff23fdff23f9ff23fd0023ff0023fd0023fe0023ff0023ff00a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220055007efa0323fa0923fa05a000a301000affffffff009300fd220055007efe0123fd0223fe0223ff0123ff0223ff0123fe0323ff0123fc0323ff01a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220040007c0400230903230302a000a301000affffffff009300fd220040007c0200230401230201230301230401230101a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122003d006f01032303002301fd23fefd23fdfe23fa0023fd032301052304042303022306fe2303fd2300fd23ffffa000a301000affffffff009300fd22003d006f00002301022300002301012300002301002301ff2300ff2300002301fe23ffff23000023feff23ffff23000023feff23fe0023ff0023fd0123000023ff012300002300012300022300002300022301022301012301012302022300002301012302002302ff2301002302ff2301ff2301ff2301fe2300ff2300002300ff23ffffa000a1070000000022e0c0e0c00000a000a0a100a40002010001000a00000000000000000700010001220036006ffefba000a301000affffffff009300fd220036006ffefba000a1a10096000c01000000020000000000000001000a007e007b008a00ac2c000c00150948656c7665746963610300150d000a2b7c8707436f63686c6561a0009701000affffffff009300fd71001e003800430044004d0044004d003c0043003a0046003800480044004d22003a0046f0ea71001e0022004f0028005b0026005b0028004f0025004f0022004f0026005b220025004fe7fea10096000c02000000020000000000000001000a001c000000280039280025000809496e6e657220656172a0009701000affffffff009300fd070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122005a005cf5ff23f6f923f8fc2302fc230cfb2308fa230902230402a000a301000affffffff009300fd22005a005cfe0023fbff23fcff23fcfe23ffff23feff23fbfd23feff23ff0023ffff23ffff2300ff2300ff2300002301ff2302ff2302ff2302ff2303ff2305fd2302fe2301ff2303ff230100230200230200230201230401230201a000a171001e003f006d004b0075003f006d0048007500490072004b0070003f006d22004900721933070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122003d0061f8fd23f6ff2301fd2304fb23040323080223030223ff0023ff05a000a301000affffffff009300fd23feff23fcff23fdff23fdff23ff0023ff0023fe0023feff2300002300ff2300002302fe2301fe2300002301ff23010023020023000023010123030223020023020123030123010023010123000023ff0123000023ff03230001a000a1070000000022e0c0e0c00000a000a0a100a40002010001000a000000000000000007000100012200350068f9f723fbf72301f52300f92303fa230cfe230bff230efb2305fea000a301000affffffff009300fd2200350068fefd23fdfc23fefd23fffe23fffe23ffff23fffd2300ff2300fd2300fe2300fe2300fb2300fe2300ff2301fc2300ff2301ff2301ff2302ff2303ff2301002303002305ff2303ff2302002302002303ff2304ff2302ff2304ff2306fe2302ffa000a1a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 16-2:  The Inner Ear\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Your brain has a lot more to do with sound than most people think (pun intended).  Sound doesn't stop at the cochlea, to be replaced by some nerve impulse that says, "That's just Mildred, again."  The neural network of your brain starts filtering the sound right away, ignoring some parts and "paying more attention" to others.  That's why you can "hear" someone talking from across the room, when a dozen other people's voices are at least as loud.  As you turn your attention from one person to the next, you hear the one you are listening to, but the others are just a distraction.\par To see how all of this impacts computerized sound, let's put the computer in the middle.  This time, the sound hits a microphone.  While there are a lot of different kinds of microphones, the original, and still one of the simplest, uses a cone to catch the sound.  As sound waves hit the cone, the cone vibrates, and this in turn compresses a pack of carbon powder, a crystal, or something else that will change its electrical properties when it's compressed..  Current running through the carbon, for example, goes through easier when the carbon is compressed (less resistance) and has a harder time when the carbon is not compressed (higher resistance).  The microphone, then, turns the sound into a changing electric current.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1094{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw253\pich183\picwgoal5060\pichgoal3660\macpict\bliptag-440654454\blipupi72{\*\blipuid e5bc258ad827e275cbda37ecdd1457ce}0178ffffffff00b600fc1101a0008201000affffffff00b600fc0980100220010840043100400059007700750900000000000000003809ffffffffffffffff2200400074e500230036231b00220049007436b809000000000000000051000100a600b600b009ffffffffffffffff5822006d0074364822004900740024a10096000c02000000020000000000000001000a004f00000067003d2c000c00150948656c7665746963610300150d000a2b0e58077061636b6564202b010c06636172626f6ea0009701000affffffff00b600fc71001e00580056005e0062005b0062005e0056005b005600580056005b006222005b00352100a10096000c02000000020000000000000001000a004f00be006700fb28005800c20b6d6963726f70686f6e65202b100c04636f6e65a0009701000affffffff00b600fc71001e005800ab005e00b7005b00ab005800b7005b00b7005e00b7005b00ab22005b00c6f100220040006b00ee23dc00220076006b001223dc00a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 16-3:  A Simple Microphone\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are a lot of ways to record the electric impulses created by the microphone.  With a few intervening steps, though, the computer ends up converting the electric impulses into digital data.  Ignoring all of the problems that might distort the sound, ideally the resulting digital data, when plotted, should be a plot of the pressure from the original sound wave.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1095{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw319\pich118\picwgoal6380\pichgoal2360\macpict\bliptag-792232729\blipupi72{\*\blipuid d0c77ce77170dafa225ca8df30da5994}03bbffffffff0075013e1101a0008201000affffffff0075013e070000000022e0c0e0c00000a000a0a100a40002010001000a0000000000000000070001000122004900010de2230bea230cf0230ffc230f0a23091c2309202313112319022312fc2310f9230df1230b0123141d2306fd230cee2312e02313e72308f523150d230b0ba000a301000affffffff0075013e220049000102fc2303f92302fb2303f92302fc2302fb2302fb2301fe2301fe2302fd2303fb2303fb2303fc2301fe2302fe2303fc2303fe2303ff2302ff2302002304ff23030123050223010123010123010123030223010223020323010223010323020423000123030723040f2302082301042303072304062304052302022302022306042305022306022303002303002306002306002304002303ff2305ff2308fd2304fe2302ff2304fe2304fd2303fd2301fe2302fe2303fe2303fe2303ff2301002300002303012302012301012302022302022302032303042301012301012303052302022301012303032301012300002301002301002300002303fe2302fd2303fd2301fe2302fd2303fb2304fa2304f92302fc2302fc2305f82304fa2305f82302fd2303fd2304fa2303fd2303fc2301fe2301ff2301ff230100230100230300230100230201230201230201230302230604230404230605230303a000a1a10096000c01000000020000000000000001000a00640003007400142c000900030647656e6576610300030d000c2b0470023033a00097a10096000c01000000020000000000000001000a0064001e0074002f291b023036a00097a10096000c01000000020000000000000001000a006400390074004a291b023037a00097a10096000c01000000020000000000000001000a0064005400740065291b023033a00097a10096000c01000000020000000000000001000a0064006f00740080291b023032a00097a10096000c01000000020000000000000001000a0064008a0074009b291b023032a00097a10096000c01000000020000000000000001000a006400a5007400b6291b023033a00097a10096000c01000000020000000000000001000a006400c0007400d1291b023034a00097a10096000c01000000020000000000000001000a006400db007400ec291b023032a00097a10096000c01000000020000000000000001000a006400f600740107291b023034a00097a10096000c01000000020000000000000001000a0064011100740122291b023037a00097a10096000c01000000020000000000000001000a0064012c0074013d291b023035a00097a00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 16-4:  Sound Becomes Digital Data\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par What you see in Figure 16-4 is a digital recording of sound.  This is the idea behind Compact Disc (CD) players, and it is also the idea behind the Sound Tool Set.  While there are some details, the Sound Tool Set's basic function is to take a recorded stream of bytes and convert them back into sound.  Through some very sophisticated electronic wizardry, the bytes of data are used to vibrate the cone of a speaker, which in turn vibrates the air, sending out a pretty good copy of the original sound wave.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 speaker}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As a quick aside, pop the cover off of your computer some time and take a look at the speaker that's built into the Apple IIGS.  First off, it's not a particularly good speaker.  Second, no speaker, no matter how good it is, is going to give very good sound sitting underneath a metal power supply box and sending the sound straight onto your table top.  If you want good sound, take a few dollars down to Radio Shack and buy a really cheap external speaker with the proper cables to hook it into your Apple IIGS.  Even with the cheapest speaker, the difference is amazing.  In fact, you'll get quite an improvement if you just take your speaker out of the computer and lay it on a paper towel or thick pad of paper in front of the computer.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Digitally Recorded Sound}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Digitally Recorded Sound\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk88}{\*\bkmkstart bk89}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The type of sound we talked about in the last section is digitally recorded sound.  Disregarding distortion, it's an exact copy of the original sound wave, converted to digital data.  Even with sound values stored in a single byte and the rather unsophisticated speaker built into the Apple IIGS, you get some pretty amazing sound.  It's also easy to play with the sound in this form \endash  making certain parts louder, cutting and pasting sounds, blending one sound into another, playing old Beetles records backwards, and so forth.  The disadvantage of digitally recorded sound is the amount of space it takes.  Think about it this way: the CD ROM format was invented to hold the sound from a single music album, which is generally about 45 minutes long.  A single CD ROM holds about 250M of data.  Even a decked out Apple IIGS rarely has more than 5M of memory, and most hard disks range from 40M to 100M.\par Another way to think about the amount of information is to figure out the number of bytes it takes to hold one second of sound.  It's important to realize that the more bytes you use for each second of sound, the better the reproduction will be.  After all, more samples let you create a better copy of the original sound wave.  Of course, it also takes more memory to hold all of that sound.\par Let's assume you want to get about the same sound quality as an AM radio station.  That means you need to record at a rate of 16KHz, or 16,000 samples per second.  That's about 16K of memory per second of sound.  A little time with a calculator shows you can hold 4 seconds of sound in 1K of memory, or about one hour of sound per megabyte.\par This also tells you a little about the sound quality of a CD!  AM radio station quality is fine for speech, but is a bit on the light side for high quality music.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Sound Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Sound Tool Set\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Ensoniq chip}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Sound Tool Set is designed to give you more or less direct access to the Ensoniq synthesizer chip that is built into the Apple IIGS.  This chip is literally a small music synthesizer, with 64K of it's own memory and up to 16 channels of sound.  These sound channels are used in pairs, and one is reserved, but you can still play up to 7 distinct tracks of sound simultaneously.  And, because the sound chip is really a separate sound-specific CPU, playing sound has very little or no impact on the main 65816 CPU.  (For longer sound sequences, there is some impact as the sound data is moved back and forth from main memory.  Some features of the sound tool also use the CPU, as you'll see.  For a short, digitally recorded sound played over and over, the CPU isn't effected at all.)\par We're going to use a few of the Sound Tool Set calls to play a digitally recorded sound.  As you write the sample program, though, keep in mind that there's a lot more you can do with the Sound Tool Set.  Not only that, but if the Sound Tool Set is getting in your way, it's even possible to bypass the tools entirely and program the Ensoniq chip directly.  You'll need to drop into assembly language to do some things, of course.  If you want to program the Ensoniq chip directly, you'll also need the }{\i\f4 Apple IIGS Hardware Reference}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Basic Sound Calls}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Basic Sound Calls\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FFStartSound}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The basic tool call for playing a digitally recorded sound in }{\f6\fs20 FFStartSound}{\f4 .  Here's a typical call:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 FFStartSound($0201, soundBlock);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par That looks simple enough.  The first parameter controls the channel and synthesizer we'll be using, as well as identifying what sort of sound we're playing.  I'll let you refer to the detailed description of the }{\f6\fs20 FFStartSound}{\f4  call to see how this parameter is used to play multiple sounds, but the $0201 value will work find for playing a single sound at a time.  The second parameter is a record, and it's a pretty complicated one.  Here's the record declaration, from the SoundMgr.pas file in the ORCA/Pascal header files:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20    soundParamBlock = record\par        waveStart:     ptr;                 (* starting address of wave    *)\par        waveSize:      integer;             (* waveform size in pages      *)\par        freqOffset:    integer;             (* waveform playback frequency *)\par        DOCBuffer:     integer;             (* DOC buffer starting address *)\par        DOCBufferSize: integer;             (* DOC buffer size code        *)\par        nextWAddr:     soundPBPtr;          (* ptr to next waveform block  *)\par        volSetting:    integer;             (* DOC volume setting          *)\par        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The various fields contain very specific information, and we'll need to step through them carefully.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\tx2520\adjustright {\f6\fs20 waveStart}{\f4 \tab Pointer to the first byte of the digitally recorded sound wave.  The wave itself consists of a series of bytes.\par \par \tab The way you allocate memory for the wave itself is very critical.  As you'll see in a moment, the memory has to be allocated in one page chunks, and the number of pages must be a power of two.  The buffer also has to be aligned in memory on the same boundary as the size of the buffer.  For example, since the smallest buffer is one page (256, or $100 bytes) the sound for a one-page buffer has to be aligned to a 256 byte boundary.  That means that memory starting at $030400 would be fine, but memory starting at $030480 would not work.  For a bigger buffer, the alignment is more critical.  For a 4K buffer ($1000) you would need to align the memory buffer to a 4K boundary, so a buffer starting at $030400 won't work \endash  you would need one starting at, say, $031000.\par \par \tab In practice, the easiest way to make sure the buffer is aligned properly is to get memory with }{\f6\fs20 NewHandle}{\f4  calls rather than with Pascal's new procedure, and ask the Memory Manager to align the memory to a bank boundary.  That will work for sound buffers up to 256 pages long.  If the sound you need to play is longer than 256 pages (64K), you can break it up into smaller pieces.  From a memory management standpoint, that's probably a good idea, anyway.\par \par \tab Here's a sample }{\f6\fs20 NewHandle}{\f4  call you could use to allocate a 64K sound buffer.  I'll let you verify the various parameters by checking with the description of the }{\f6\fs20 NewHandle}{\f4  call on your own.\par \par }{\f6\fs20 \tab \tab soundHandle := NewHandle($010000, userID, $C014, nil);\par }{\f4 \par \tab This buffer is too big for the largest single chunk of sound, which is 32K long, but allocating a full bank is the only way to guarantee that the memory is aligned to a 32K boundary.  The memory allocated by this call will actually be aligned to a 64K boundary.  Of course, you can use the memory for two 32K sound buffers.\par \par \tab The sound bytes themselves range from 1 to 255 for each byte.  A zero byte marks the end of the sound wave, so you can stop the sound before the end of a page boundary.\par \par }{\f6\fs20 waveSize}{\f4 \tab Size of the wave buffer, in pages.  For a 32K sound (128 pages) the value is 128.  If you need to calculate this value on the fly, use the equation\par \par }{\f6\fs20 \tab \tab (size_in_bytes + 255) div 256\par }{\f4 \par }{\f6\fs20 freqOffset}{\f4 \tab This value is related to the playing frequency for the sound.  Basically, you have to tell the Sound Manager what the sampling rate for the sound is, in hertz.  (As used here, hertz is samples per second, not the normal cycles per second.)\par \par \tab The relationship isn't straight-forward, though.  This parameter should be\par \par }{\f6\fs20 \tab \tab round(32.0*hertz/1645.0)\par }{\f4 \par \tab where hertz is the frequency of the sample.\par \par \tab This simplification will work fine for our introduction, but I'm skipping over some details.  You should refer to the complete documentation for the }{\f6\fs20 FFStartSound}{\f4  call before trying anything beyond playing back a prerecorded sound.\par \par }{\f6\fs20 DOCBuffer}{\f4 \tab The Ensoniq sound chip has 64K of it's own memory.  The sound memory isn't handled by the Memory Manager, so it's up to you to make sure your sounds don't step on each other.  This parameter is the location in that 64K of memory where the sound data will be placed.  It should always be a multiple of 256 ($100), since the sound data is assumed to be in one-page chunks.  For a single sound, you can use 0.\par \par }{\f6\fs20 DOCBufferSize}{\f4 \tab The smallest sound buffer is one page, or 256 bytes.  Each higher size is twice the size of the next smallest buffer.  This parameter represents the sound buffer size; it ranges from 0 to 7:\par \par }\pard \qj\fi-1440\li3960\keepn\widctlpar\adjustright {\f4\ul parameter}{\f4 \tab }{\f4\ul sound buffer size}{\f4 \par 0\tab 256\par 1\tab 512\par 2\tab 1024\par 3\tab 2048\par 4\tab 4096\par 5\tab 8192\par 6\tab 16384\par }\pard \qj\fi-1440\li3960\widctlpar\adjustright {\f4 7\tab 32768\par }\pard \qj\fi-1800\li2160\widctlpar\tx2520\adjustright {\f4 \par }{\f6\fs20 nextWAddr}{\f4 \tab This is a pointer to the next waveform to be played.  By pointing one record to another, you can set up a sequence of sounds that will automatically be played one after the other.  If the value is nil, nothing else is played.  To play a single sound over and over, set this pointer to point to the current sound record.\par \par }{\f6\fs20 volSetting}{\f4 \tab This is the volume for the sound.  You can use any value from 0 (no sound) to 255 (the loudest).\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FFSoundDoneStatus}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Besides starting a sound, there are two other basic operations you may need to perform.  The first is checking to see if a sound has finished playing.  You do that by checking a specific sound generator; we're using generator 2, so the check would look like this:\par \par }\pard \qj\fi180\widctlpar\adjustright {\f6\fs20 while not FFSoundDoneStatus(2) do \{nothing\};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The parameter for }{\f6\fs20 FFSoundDoneStatus}{\f4  is the generator you want to check; the call returns true if the sound has finished, and false if it hasn't.  The example will wait until the sound has finished; that's something we'll use in one of the sample programs a little later in the lesson.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The other thing you might want to do is to stop a sound.  That's particularly useful if you've looped a sound back on itself by setting the }{\f6\fs20 nextWAddr}{\f4  parameter of the record to point back to the original record.  That gives you a continuous background sound without taking up any CPU time, so your program runs just as fast as it would without sound.  Before your program finishes, though, it should turn off the sound.  }{\f6\fs20 FFStopSound}{\f4  does the job.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FFStopSound}}}{\v\f4 \par }\pard \qj\fi180\widctlpar\adjustright {\f6\fs20 FFStopSound($7FFF);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 With the parameter set to $7FFF, as it is in the example, }{\f6\fs20 FFStopSound}{\f4  turns off all sound, not just the sound for generator 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The only other thing to keep in mind is that you're using a new tool, so you need to add it to your tool start up table.  The Sound Tool Set is tool 8.  For System 6.0, you should use a version number of 3.3, coding $0303 in your }{\f6\fs20 rToolStartup}{\f4  resource.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Creating and Playing a Sound}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Creating and Playing a Sound\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 For our first sound example, we'll create a sound from scratch.  A "pure" sound, created by a perfect oscillator, would just be a sine wave.  Middle C is 256 hertz.  (For those of you who are about as musically knowledgeable as I am, Middle C is a musical note.)  We can create a digitized sound that will play a pure middle C by creating a single sine wave as a series of bytes, then playing the sound over and over by pointing the sound packed back on itself.  Rather than creating a full desktop program to do something this simple, we'll just use a simple text program that plays the sound until a key is pressed.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Sine Wave Generator                                          \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par program SineWave (input, output);\par \par uses Common, SoundMgr, ResourceMgr, MemoryMgr, ToolLocator, MscToolSet;\par \par label 98, 99;\par \par const\par }\pard \li180\widctlpar\adjustright {\f6\fs20    twoPi = 6.28318531;                  \{2*pi\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    i: integer;                          \{loop/index variable\}\par    soundBlock: soundParamBlock;         \{sound parameter block\}\par    soundHandle: handle;                 \{sound block handle\}\par    soundPtr: ptr;                       \{sound block pointer\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    startStopParm: longint;              \{tool start/shutdown parameter\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{SineWave\}\par startStopParm :=                        \{start up the tools\}\par    StartUpTools(userID, 2, 1);\par if ToolError <> 0 then begin\par    writeln('Could not start tools: ', ToolError:1);\par    goto 99;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{if\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20                                         \{create the sound buffer\}\par soundHandle := NewHandle($010000, userID, $C014, nil);\par if ToolError <> 0 then begin\par    writeln('Could not allocate a sound buffer: ', ToolError:1);\par    goto 98;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{if\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 writeln('Setting up the sound...');     \{put a sine wave in the buffer\}\par soundPtr := soundHandle^;\par for i := 1 to 256 do begin\par    soundPtr^ := round(sin(i/256.0*twoPi)*120 + 128);\par    soundPtr := pointer(ord4(soundPtr)+1);\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{for\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 with soundBlock do begin                \{set up the sound parameter block\}\par    waveStart := soundHandle^;\par    waveSize := 1;\par    freqOffset := round(32.0*65536.0/1645.0);\par    DOCBuffer := 0;\par    DOCBufferSize := 0;\par    nextWaddr := @soundBlock;\par    volSetting := 250;\par }\pard \li180\widctlpar\adjustright {\f6\fs20    end; \{with\}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 writeln('Playing the sound...');        \{start the sound\}\par FFStartSound($0201, soundBlock);\par }\pard \li180\widctlpar\adjustright {\f6\fs20 writeln('Press return to stop the sound.');\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 readln;                                 \{wait for a keypress\}\par FFStopSound($7FFF);                     \{stop the sound\}\par \par 98:\par ShutDownTools(1, startStopParm);        \{shut down the tools\}\par 99:\par end. \{SineWave\}\par }\pard \qj\fi180\keepn\widctlpar\adjustright {\f6\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 16-1A:  A Program to Play Pure Middle C\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /*--------------------------------------------------------------*/\par /*                                                              */\par /*  Resources for Sine Wave                                     */\par /*                                                              */\par /*--------------------------------------------------------------*/\par \par #include "types.rez"\par \par resource rToolStartup(1) \{\par    mode640,\par    \{\par        3, $0302,                        /* Misc Tool */\par        8, $0303,                        /* Sound Tools */\par       \}\par    \};\par }\pard \qj\fi180\keepn\widctlpar\adjustright {\f6\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 16-1B:  Resource Description File for the Sound Program\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 16-1:  Games often use a ray-gun blast as a sound effect.  One way to create a simple sound that will do is to create a series of sine waves that gradually diminish in volume, then repeat the sound several times.\par Create a program that makes a sound like this, repeating the sound ten times.  After the sound stops, the program should quit.  The entire sound cycle should last for one second, and should be based on a 4096 hertz sine wave.  Each 1/10 second sound burst should start at full volume and decrease evenly to zero volume.\par Hint:  Create ten separate sound records, each pointing to the same 1/10 second sound buffer.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Loading Sounds from Disk}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Loading Sounds from Disk\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In most cases, you won't create a sound from scratch.  Instead, you'll load a prerecorded sound from disk, and play the recording.  There are a lot of formats used for sound, mostly depending on how the sound was created.  Apple's file type notes (see Appendix C) list several formats, and the documentation for various sound cards list even more.\par You'll find a file called Hello.Sound on the disk that comes with this course.  It's a recording of Fred greeting a guest.  The sound was recorded on an Applied Engineering Sonic Blaster card using a microphone from Radio Shack.  The software that comes with the Sonic Blaster records the sound as a header file followed by the actual sound bytes.  Here's the format for the header:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4\ul bytes}{\f4 \tab }{\f4\ul information}{\f4 \par 0-3\tab The characters 'AEPM', as an identifier.  The actual values are $41 $45 $50 $4D.  You can skip over these bytes.\par 4-5\tab This is the kind of sound information.  The Hello.Sound file has a value of 0, which means that the sound data is just a sequence of bytes.  A value of 1 is used for sound that has been compressed to half its original size by the ACE Tool Set, while 2 means the sound has been compressed to 3/8 of its original size using ACE.\par 6-7\tab This word will be 0 for mono, and 1 for stereo.  It's zero in the Hello.Sound file.\par 8-11\tab This is the length of the sound sample, in bytes.\par 12-13\tab This is the sampling frequency, in hertz.  You need to set the }{\f6\fs20 freqOffset}{\f4  field of the sound record based on this value.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are two differences between playing a prerecorded sound as opposed to playing a synthesized sound, like we did in the last section.  First, the sound bytes are read from disk rather than being created by an equation.  Reading the file should not be a big problem.  Since speed isn't an issue, you can just declare a file of byte and let Pascal handle the file input.\par The second difference is that you don't really know what frequency the sound was recorded at, so you need to read the frequency from the sound header and calculate a value for the }{\f6\fs20 freqOffset}{\f4  field of the sound record.  This isn't hard, but it is the easiest place to make a mistake.  Assuming you are reading the file as a series of bytes, and have read the frequency bytes into variables called byte12 and byte13, you can calculate the }{\f6\fs20 freqOffset}{\f4  value like this:\par \par }{\f6\fs20 hertz := byte12 + byte13*256;\par soundBlock.freqOffset := round(32.0*hertz/1645.0);\par }{\f4 \par Problem 16-2:  Write a program that loads the Hello.Sound file, plays the sound once, and exits.  You can find the file in the Lesson.16 folder on the course disks.  Be sure to wait until the sound finishes playing before exiting!\par {\*\bkmkend bk88}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 sound\:digitized}{\rxe bk88}}}{\*\bkmkend bk89}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 digitized sound}{\rxe bk89}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Note Synthesizer}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Note Synthesizer\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk90}{\*\bkmkstart bk91}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Recorded sound has it's place, but when it comes to musical instruments, you expect something a little more flexible.  If you want to play middle C with an oboe, it doesn't make much sense to load a prerecorded sound!  That's when the Note Synthesizer tool comes in.  With this tool, you can actually say (in effect) that you want to play middle C on an oboe, and the computer takes over and creates the sound.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Instruments}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Instruments\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The obvious problem, of course, is that the Apple IIGS has even less of an idea as to what an oboe sounds like than I do.  Instrument files are used to teach the computer what a particular instrument should sound like.\par There are two issues to deal with with instruments, and once those are out of the way, using the instrument is pretty easy.  The first is what the Apple IIGS thinks an instrument is.  The second issue is where you get one.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Instrument Record}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Instrument Record\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Note Synthesizer calls that play a note ask for a pointer to an instrument record.  Here's the definition for an instrument record, straight from ORCA/Pascal's tool interface files:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    instrument = record\par      envelope:          array [1..24] of byte;\par      releaseSegment:    byte;\par      priorityIncrement: byte;\par      pitchBendRange:    byte;\par      vibratoDepth:      byte;\par      vibratoSpeed:      byte;\par      spare:             byte;\par      aWaveCount:        byte;\par      bWaveCount:        byte;\par      aWaveList:         array [1..1] of waveForm; (* aWaveCount * 6 bytes *)\par      bWaveList:         array [1..1] of waveForm; (* bWaveCount * 6 bytes *)\par }\pard \li180\widctlpar\adjustright {\f6\fs20      end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are actually two parts to an instrument definition.  The instrument record is the first part; it deals with things like how quickly an instrument starts making sound (a drum starts pretty quickly, while a flute builds up gradually), how the sound dies off, and so forth.  These facts are stored in the envelope, and to a lesser extent, the various other fields.  There's a lot more that's different between two instruments than the way the sound builds up and dies, though.  Let's think about another familiar source of sound to see what I mean: your voice.  Even if you do your very best to say something just like another person, it's usually pretty easy to tell the two of you apart.  That's because the actual sound waves have a different shape.  The same thing is true with instruments.  The second part of the instrument definition deals with this issue; it's essentially a recording of the shape of the sound wave produced by an instrument.  These wave forms are actually placed in the 64K of sound memory.  The instrument record has some pointers which point to the start of the waves, and a field that tells how long the wave is.  This information is stored in }{\f6\fs20 waveForm}{\f4  records:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    waveForm = record\par      topKey:      byte;\par      waveAddress: byte;\par      waveSize:    byte;\par      DOCMode:     byte;\par      relPitch:    integer;\par }\pard \li180\widctlpar\adjustright {\f6\fs20      end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The critical field is the }{\f6\fs20 waveAddress}{\f4  field; this changes depending on where you put the wave in the sound RAM.  You won't have to worry about these fields for the sample programs in this lesson, since the samples will only use one instrument.  Because of that, we can load the wave forms for the instruments right at the start of the sound RAM.  Since the address field in the }{\f6\fs20 waveForm}{\f4  record in an instrument file is a displacement from 0, the }{\f6\fs20 waveAddress}{\f4  values will be correct.  If you are using more than one instrument, though, you would have to figure out where to put each wave form, and adjust the }{\f6\fs20 waveAddress}{\f4  fields appropriately.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ASIF Instrument Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ASIF Instrument Files\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ASIF files}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are a lot of different ways to store instruments on a disk file.  Apple recommends one particular file format for people using the Note Synthesizer.  The files are called ASIF files; they have a file type of $D8, with an auxiliary file type of $0002.  The most popular program that uses this file format is Sound Smith.  You can find lots of ASIF instrument files by using key words instrument, Sound Smith, or ASIF in the music special interest forums on national online services.  In fact, the ones you'll be using in a moment were downloaded from America Online.\par The ASIF file format is very flexible, with lots of optional fields.  We're not going to go into all of the possibilities here, nor are we going to go into technical details on what all of the fields mean.  This is a very nuts and bolts section.  All the theory will be tossed to the wind, and we'll concentrate on the mechanics of actually loading an instrument from an ASIF file.  If you want to design your own instruments, deal with ASIF files, or write programs that use multiple instruments, you'll need to learn a few more details than we'll cover here.  In that case, you should get a copy of the Apple IIGS File Type Notes, particularly the one for file type $D8, auxiliary file type $0002.  There's also a lot of good information about the fields in the description of the Note Synthesizer tool, which you'll find in Chapter 41 of the }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 .  And now, back to our regularly scheduled nuts and bolts section...\par ASIF files are made up of a series of data blocks called chunks, all imbedded in a super-chunk.  There are a lot of different kinds of chunks with different kinds of information and different lengths, but all of the chunks start the same way: a four-character block-type identifier and a four byte length.  There's nothing special about the four-character type; it's just four ASCII characters.  The length is a little odd, though \endash  the bytes are in the opposite order of what they would normally be in a file.  (The first byte is the most significant byte, instead of the least significant byte.)\par Because of the regular structure of the chunks, you don't have to know what all of them are to use an ASIF instrument file.  In fact, the file is designed that way on purpose, so new kinds of chunks can be added without breaking old programs.  When you come across a chunk in the file, you check the four-character type.  If it's a chunk you need, you process the information.  If it's not a chunk that you need, you add the length in the second four bytes plus 8 to the address of the start of the chunk, and the result is a pointer to the start of the next chunk.\par Let's assume you already have a pointer to the first of the normal chunks, and you know what four-character type you are looking for.  In addition, you know the total length of all of the chunks (that's the key piece of information imbedded in the super-chunk, which we'll talk about in a moment).  Here's a subroutine that will scan the chunks, returning either a pointer to the first byte of data in the correct chunk, or nil if the chunk you are looking for doesn't exist.\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 type\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    chunkType = packed array[1..4] of char; \{used to identify chunk types\}\par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 function FindChunk (p: ptr; chunk: chunkType; len: longint): ptr;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 \{ Locate a chunk in an ASIF file                                \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    p - pointer to the start of the first chunk                \}\par \{    chunk - character type for the chunk to find               \}\par \{    len - number of bytes left in the file                     \}\par \{                                                               \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20 \{ Returns: Pointer to the chunk data; nil if not found.         \}\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 var\par    disp: longint;                       \{length of the data in the chunk\}\par    i: integer;                          \{loop variable\}\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    id: chunkType;                       \{chunk type for the current chunk\}\par \par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20    function GetByte: integer;\par \par    \{ Read a byte from the file buffer                           \}\par    \{                                                            \}\par    \{ Returns: Byte from the file                                \}\par \par    begin \{GetByte\}\par    GetByte := p^;\par    p := pointer(ord4(p)+1);\par }\pard \qj\li180\widctlpar\adjustright {\f6\fs20    end; \{GetByte\}\par \par \par }\pard \qj\li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{FindChunk\}\par repeat\par    for i := 1 to 4 do\par       id[i] := chr(GetByte);\par    for i := 1 to 4 do\par       disp := (disp << 8) | GetByte;\par    FindChunk := p;\par    p := pointer(ord4(p)+disp);\par    len := len - disp;\par    if len <= 0 then\par       if id <> chunk then begin\par          p := nil;\par          FindChunk := nil;\par          end; \{if\}\par until (p = nil) or (chunk = id);\par end; \{FindChunk\}\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 16-2:  Function for Locating ASIF Chunks\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par I've mentioned the super-chunk a couple of times.  Basically, the entire ASIF file is one huge chunk, and the data for the chunk is a series of smaller chunks.  Each ASIF file is only supposed to have one of these super-chunks, but it's probably a good idea to allow for other information after the super-chunks.  That way, if someone starts creating files with multiple super-chunks, your program will still work.\par The super-chunk itself starts off with a type of 'FORM'.  The next four bytes are the length.  The length works just like the length for the regular chunks, so adding 8 to the length should give the length of the entire file.  The next four bytes are the type of the file, and should be 'ASIF'.  This is followed by the various normal chunks in the file.\par Let's put all of this together, now, and sketch the overall form for handling these files.  The program should read the entire file into memory, using the same ideas we used in Lesson 6.  Next, check the two four-character type fields in the super-chunk to make sure the file is the right type of file.  Finally, the pointer to the first normal chunk is formed by adding 12 to the pointer to the start of the file, and the length of all of the normal chunks is formed by reading the four-byte length field and subtracting 4 from the length.  These two values are the values we need to pass to the }{\f6\fs20 FindChunk}{\f4  subroutine to locate a particular chunk in the file.\par While an ASIF file can have all sorts of chunks, there are only two we need to worry about, and both of them are supposed to be in any ASIF file.  The two chunks we need to find are the 'WAVE' chunk, which contains the wave form we need to copy into the sound RAM, and the 'INST' chunk, which contains the instrument record.  (Actually, an ASIF file can have more than one 'INST' chunk.  The way we'll write our program, well use the first instrument, and ignore any others, if there are any.)\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The 'WAVE' Chunk}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The 'WAVE' Chunk\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Let's start of with the 'WAVE' chunk.  There's a lot of information in this chunk, but all we really need for our program is the waveform itself, which comes at the very end.  I'll summarize the various fields we skip over, but the only part of the information you really need to use the instrument is how to skip the various fields.  The names of the fields are taken straight from the file type notes, so you can cross reference what I'm telling you here with the more detailed information in the file type notes, if you like.\par \par }\pard \qj\fi-2880\li3240\keepn\widctlpar\tx1800\adjustright {\f4\ul name}{\f4 \tab }{\f4\ul length}{\f4 \tab }{\f4\ul use}{\f4 \par }\pard \qj\fi-2880\li3240\widctlpar\tx1800\adjustright {\f6\fs20 ckID}{\f4 \tab 4 bytes\tab This is the chunk type, 'WAVE'.  }{\f6\fs20 FindChunk}{\f4  skips this field for you.\par }{\f6\fs20 chSize}{\f4 \tab 4 bytes\tab This is the length of the chunk, minus the 8 bytes used by the name and this field.  }{\f6\fs20 FindChunk}{\f4  also skips this field.\par }{\f6\fs20 waveName}{\f4 \tab variable\tab This is a name field for the wave itself.  It's a p-string, so you can skip this field by reading the first byte, which is a length byte, and adding the length plus one (the one is for the length byte itself) to the pointer.\par }{\f6\fs20 waveSize}{\f4 \tab 2 bytes\tab This is the size of the wave form.  You need to read this value and save it so you know how many bytes have to be copied into the sound RAM.  Unlike the length field in the header, this value is in the normal number order for the 65816, so the actual value is the value of the first byte plus 256 times the value of the second byte.\par }{\f6\fs20 numSamples}{\f4 \tab 2 bytes\tab This is the number of samples imbedded in the wave form.  This isn't important when we're using the wave, but you still need to read the value, since there are }{\f6\fs20 numSamples}{\f4  copies of the next field.\par }{\f6\fs20 sampleTable}{\f4 \tab 12 bytes\tab These sample tables give some information about the way the wave form was originally sampled.  Each of the sample tables is 12 bytes long, but there can be more than one of them.  To skip these fields, add }{\f6\fs20 12*numSamples}{\f4  to the pointer.\par }{\f6\fs20 waveData}{\f4 \tab }{\f6\fs20 waveSize}{\f4 +1\tab Finally!  Here are the actual bytes in the wave form.  These are the bytes that need to be moved to the sound RAM.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The documentation for the ASIF file format says that }{\f6\fs20 waveSize}{\f4  is a zero based counter, so a value of 0 means the wave contains one byte, and so forth.  In all of the files I downloaded and looked at, though, the size of the wave was exactly }{\f6\fs20 waveSize}{\f4  bytes.  I'd suggest treating the wave form as if it is exactly }{\f6\fs20 waveSize}{\f4  bytes long.  If that turns out to be wrong, you loose a single byte \endash  and that isn't likely to be something you'll miss when the wave form is used.  If you want to be extra careful, though, you could calculate the actual wave form size on the fly by subtracting the location of the chunk after the 'WAVE' chunk from the start of the }{\f6\fs20 waveData}{\f4  field.  Either way, the program won't loose track of the data, since the program keeps track of things based on the original chunk length.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 WriteRamBlock}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Now that you know how to find the wave, the next step is copying it into the sound RAM.  You do that with the Sound Tool Set call }{\f6\fs20 WriteRamBlock}{\f4 :\par \par }{\f6\fs20 WriteRamBlock(p, 0, waveSize);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The first parameter is a pointer to the first byte of the wave itself.  The next parameter is the starting location in the sound RAM; we want to put the wave form right at the start of the sound RAM, so we pass a 0.  The next parameter is the number of bytes in the wave, which we read from the chunk.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 interrupts}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This particular call has two very strange requirements.  The fist is that the wave itself can't be in banks $00, $01, $E0 or $E1.  As it turns out, all four of those banks have some memory that is reserved by the Memory Manager, so one cheap way to fulfil this requirement is to make sure you allocate at least 64K of memory when you read the instrument file.  The second requirement is that you have to disable interrupts before you make the call.  There is no practical way to disable interrupts from Pascal, so I've included two assembly language subroutines that will get the job done.  The subroutines are called }{\f6\fs20 DisableInterrupts}{\f4  and }{\f6\fs20 EnableInterrupts}{\f4 ; you can think of them and use them as if they were new tool calls.  You'll find these files in the folder for Lesson 16:\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 Interrupt.asm\tab Assembly language source files for the two subroutines.  You don't need this for the course, but if you have the ORCA/M assembler, you can look at and modify the source files.\par Interrupt.pas\tab The header file source code for the module.  This is the equivalent of the tool header files in the TOOL.INTERFACE folder on your ORCA/Pascal disks.  You can look at this file to find out the proper parameters.  As it turns out, there aren't any.\par \par Interrupt.int\tab The interface file.  Copy this file to the ORCAPascalDefs folder of your ORCA libraries folder.\par \par Interrupt\tab This is a library containing the executable code for the two subroutines.  Copy this file to the ORCA libraries folder.  As you may know, ORCA is fairly sensitive to the order of the library files, but this library can appear anywhere in your libraries folder without causing any conflicts.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Once you've copied these files into the proper folders, be sure to put a\par \par }{\f6\fs20 uses Interrupt;\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 statement at the start of your program, just like you would for a tool header file.  Then, when you are ready to set up the instrument wave form, make the calls like this:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 DisableInterrupts;\par WriteRamBlock(p, 0, waveSize);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 EnableInterrupts;\par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The 'INST' Chunk}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The 'INST' Chunk\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The instrument record is the main component of the 'INST' chunk.  Like I mentioned earlier, there has to be at least one 'INST' chunk, but it's possible to have more than one, too.  As long as we're just trying to use a single instrument from a file, it will work fine to just scan for the first 'INST' chunk and use it.\par The 'INST' chunk starts off with the characters 'INST' and a four-byte length, just like all of the other chunks.  These eight bytes are skipped by }{\f6\fs20 FindChunk}{\f4 .  There are two more fields we need to skip before we get to the instrument record itself.  The first is the name of the instrument; this is a Pascal string, so you can skip this field by adding the one-byte length of the string plus one to the pointer.  The next field is a sample number; this is a bookkeeping field that helps keep track of waves in 'WAVE' chunks that have several sub-waves imbedded in a single wave packet.  The field is two bytes long.  We don't need it for anything, so just add two to the pointer.\par At this point, you have a pointer to the start of the instrument record.  Since we're only copying one wave into the sound RAM at a time, the pointer is all you need.  Save the pointer for later, when we actually play some notes.\par {\*\bkmkend bk90}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 instruments}{\rxe bk90}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Some Practical Comments About Instrument Files}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Some Practical Comments About Instrument Files\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Now that you've seen the file format for an instrument, you can see that there are two distinct parts for an instrument definition.  The 'WAVE' chunk is literally a digital recording of the instrument, playing a note at a constant volume.  When you download an instrument file, this is the important part that you're after \endash  this recording of the instrument is something you can't fake easily.\par The other part of the instrument definition is all of the entries in the instrument record itself.  If you think about it for a moment, instruments don't really play a single note at a constant volume.  The process of converting a sound into another note is something the Note Synthesizer does pretty well, but there is another issue we have to be concerned with, and it's one that the Note Synthesizer can't face, and that the folks who upload instruments don't worry much about.  That's the issue of how the volume of a note changes over time.\par Let's start looking at this issue with a couple of examples.  Let's say you hit a tight drum head with a drumstick.  The sound you hear starts very quickly, and stops almost as quickly as it starts.  Now compare that to a gentle note on a violin.  The note starts slowly, builds up to a maximum volume, then fades away slowly, too.  The point is that the shape of the sound wave as a function of volume verses time is very different for these two instruments.  Other instruments are different, too.  Plucked string and percussion instruments, as a general rule, build up volume very quickly, then the volume drops off.  In some instruments, like a guitar or loose base drum, the sound may hang in there for quite a while.  Wind instruments and stroked string instruments vary a lot, but as a group, they hold their maximum volume longer than the plucked string instruments or percussion instruments.\par The Note Synthesizer has a pretty good way of handling this situation, as well as another we'll talk about in a moment.  You literally define the wave form as volume verses time.  The problem is that all of the instrument files I found used a constant wave envelope that built up and dropped off very quickly \endash  so quickly that even the percussion instruments were hard to recognize.  As a result, you can't just load a sound file and play it if you expect to get good results.  You also have to modify the instrument definition.\par In the next two sections, I'm going to do two things.  First, I'm going to tell you how the }{\f6\fs20 envelope}{\f4 , }{\f6\fs20 releaseSegment}{\f4 , }{\f6\fs20 vibratoDepth}{\f4  and }{\f6\fs20 vibratoSpeed}{\f4  fields of the instrument file work, so you can create your own sound profiles for your instruments.  Next, I'm going to give you a canned set of parameters that will make most of the instruments on the disks that comes with this course sound pretty good.  If you're interested in getting the program to work, but don't care about the details, skip the next section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Changing the Sound Quality for an Instrument}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Changing the Sound Quality for an Instrument\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The major task in creating an instrument profile is to tell the Note Synthesizer how the volume should vary over a period of time.  The }{\f6\fs20 envelope}{\f4  parameter in the instrument record is basically just a plot of volume verses time, coded in a rather obscure way.  In the instrument record, you see a 24 byte array, but in fact, the envelope is really a series of eight three byte fields.  In each case, the first byte is a volume, and the next two bytes are an integer telling the Note Synthesizer how fast it should change from the old volume to the new one.  Let's work through an example to see how these fields are used.\par When the note starts, it starts at a volume level of zero.  The highest volume for the note is 127, and for the most part, we want to jump up to that peak volume fairly quickly.  Let's say we want to get there in 0.01 seconds.  To figure out the second parameter, we use this formula:\par \par }{\f6\fs20 rise := round(deltaVolume*0.128/time);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 where }{\f6\fs20 deltaVolume}{\f4  is the difference between the original volume and the new one (127 in this case) and }{\f6\fs20 time}{\f4  is the amount of time it should take to make the change, in seconds (0.01).  If this is what we want to do for the first part of the note envelope, we would set the first byte of envelope to 127, and the next word to }{\f6\fs20 rise}{\f4 , like this:\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 envelope[1] := 127;\par envelope[2] := rise & $00FF;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 envelope[3] := rise >> 8;\par }{\f4 \par This rise time parameter works in either direction.  The Note Synthesizer looks at the two volumes to figure out if it should move up or down; you always put the rise time in as a positive integer.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 volume}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 decibels}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The units for time are pretty obvious, but the units for volume are something you may not be as familiar with as the units for time.  Volume is measured in decibels, which is a logarithmic scale.  Changing the volume by 16 is equivalent to changing the sound level by 6 decibels.  Increasing the volume parameter by 37 roughly doubles the actual sound, while cutting the volume parameter by 37 cuts the volume in half.\par You may not need all eight parts of the volume profile.  Later on, in fact, we'll only use four entries for our canned waveform.  If you don't need all of the entries, set the extra ones to zero.  The last entry should always have a volume of zero, too.\par Obviously I'm skipping over some background here, like where the equation comes from, what a decibel really is, and so forth.  Most of that theory is covered in the toolbox reference manuals.  (The definition for a decibel isn't \endash  one decibel is a ratio between two sound intensities such that  }{\f6\fs20 20*ln(volume1/volume2)}{\f4  is one, if you're curious.)  It's also not important when it comes to designing the instrument profile.  What you really need to do is sketch the waveform out as volume verses time, then use this equation to generate the numbers for the waveform table.  As you create the table, keep in mind that changing the volume parameter by one unit has a much bigger effect when the volume is high than when the volume is low.  There's a lot of art in defining the instrument profile, and you're going to have to play with it a bit to get one right.  The details I'm skipping over wouldn't help design the instrument envelope any better.\par For a lot of instruments, you can start to play, then hold a note for quite a long time.  That's something the Note Synthesizer can do, too.  Once you start a note, you can either wait until it fades out, or you can stop the note early.  If you stop the note early, the Note Synthesizer skips from wherever it is in the note sequence to the release segment, and picks up from there.  The }{\f6\fs20 releaseSegment}{\f4  parameter in the instrument record is an index into the envelope array, from 0 to 7.  Generally you point it to the last entry you used \endash  the one that finally decays to a volume of 0.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 vibrato}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Stop ant try to imagine what it really sounds like as a violin, trumpet, or even a human voice tries to hold a constant note.  It usually isn't quite constant, and isn't supposed to be.  Instead, it wobbles back and forth.  That's called vibrato; it's a little volume shift that's in almost every sound.  You can use the }{\f6\fs20 vibratoDepth}{\f4  and }{\f6\fs20 vibratoSpeed}{\f4  fields to create vibrato in an instrument.  The }{\f6\fs20 vibratoDepth}{\f4  field varies from 0 to 127; it's the amount of change you're introducing.  The }{\f6\fs20 vibratoSpeed}{\f4  field is the speed of the change, which ranges from 0 to 255.  The units aren't outlined exactly in the toolbox reference manuals, but it wouldn't help much even if they were.  In practice, you have to play with these numbers until you get something that sounds good.\par Unlike most of the other sound effects, vibrato is implemented in software.  If you use anything but 0 for }{\f6\fs20 vibratoDepth}{\f4 , you will have some effect on the speed of the program you're running while the sound is played.  If you're writing a game, you might want to be sure }{\f6\fs20 vibratoDepth}{\f4  is set to zero, even though vibrato adds a lot to the quality of the sound.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Canned Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Canned Parameters\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In the last section, I went into enough of the details about how the instrument record is used for you to customize the volume envelope for an instrument.  That's something you need to do for all of the instruments I've found on the online services, since the authors seemed to spend more time collecting good sound samples than developing a proper volume envelope.  There is no single proper volume envelope, but here's one that will get you close enough to recognize most of the instruments on the solutions disk.  (They're in the Instruments folder, by the way.)  This sample code fragment assumes you are working from a pointer to the instrument record, which is what you'll have if you follow the outline for loading the files from a few pages back.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 with instrumentPtr^ do begin\par    envelope[1] := 127;\par    envelope[2] := $80;\par    envelope[3] := $3F;\par    envelope[4] := 100;\par    envelope[5] := $B3;\par    envelope[6] := $00;\par    envelope[7] := 90;\par    envelope[8] := $06;\par    envelope[9] := $00;\par    envelope[10] := 0;\par    envelope[11] := $26;\par    envelope[12] := $01;\par    releaseSegment := 3;\par    vibratoDepth := 80;\par    vibratoSpeed := 40;\par    end; \{with\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 16-3:  A General Purpose Volume Envelope\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Using the Note Synthesizer}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Using the Note Synthesizer\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 With a little work, you can turn the information in the last few sections into a program that can load an ASIF sound file and install the first instrument from that file.  I'll let you put that information to use in a problem in a moment, but first we need to cover what to }{\i\f4 do}{\f4  with the instrument!  Fortunately, loading and installing the instrument is the hard part.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AllNotesOff}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Note Synthesizer has a number of calls that let you play notes.  The first one you should call, though, is }{\f6\fs20 AllNotesOff}{\f4 .  It doesn't take any parameters.  }{\f6\fs20 AllNotesOff}{\f4  will turn off any notes that were already playing; there shouldn't be any, but this makes sure.  You should call }{\f6\fs20 AllNotesOff}{\f4  again before you quit.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AllocGen}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Before you can play a note, you need to allocate a generator.  That's done with }{\f6\fs20 AllocGen}{\f4 , like this:\par \par }{\f6\fs20 generator := AllocGen(100);\par }{\f4 \par Earlier in this lesson, I mentioned that the Ensoniq sound chip could play more than one sound at a time.  The Note Sequencer makes use of this fact to let you play more than one note at a time.  If there is more than one instrument in the sound RAM, you can even play notes from different instruments; that's something that is very important for playing real songs.  The }{\f6\fs20 AllocGen}{\f4  call is the mechanism that lets all of this happen smoothly.  Before playing a note, you ask for one of the available generators, and get back a number from 0 to 13.  That's your generator number, and you use it for the rest of the calls associated with playing the note.\par Of course, it's possible for more than 14 notes to be playing at any one time.  In that case, only 14 can be played, so you need some way of telling the Note Synthesizer which notes are most important.  The parameter to }{\f6\fs20 AllocGen}{\f4  is a priority; if it's higher than the priority for some note that's already playing, the Note Synthesizer will stop that note and give you it's generator.  If all of the notes that are playing have a higher priority than the new note, }{\f6\fs20 AllocGen}{\f4  returns an error, and you should skip playing the note.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NoteOn}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once you have a generator, the next step is to start playing a note.  That's done with the }{\f6\fs20 NoteOn}{\f4  call:\par \par }{\f6\fs20 NoteOn(generator, note, volume, instrument);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 generator}{\f4  is the generator number returned by }{\f6\fs20 AllocGen}{\f4 .  }{\f6\fs20 note}{\f4  is a note number.  Note numbers are assigned sequentially, starting with 1, which is a low note, and ranging up to 127, which is a high frequency note.  Middle C is 60.  There are 12 notes (7 major notes and 5 sharps) per octave, so 72 and 48 are also C notes.  }{\f6\fs20 volume}{\f4  is the volume for the note, which can vary from note to note; in general, you can also think of this as the force or speed for the note, like how hard a piano key is struck.  This parameter can also range from 1 to 127.  A good starting value is 64.  The final parameter is a pointer to the instrument record; that's the value we spent so much time getting ready when the instrument file was loaded.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The next step is a little touchy; you need to wait for a while.  The problem is that the right amount of time to wait is different for different instruments.  What you're waiting for is the proper time for the note to start fading away.  For a piano, that's right away \endash  the note starts to fade as soon as the piano wire is struck.  For a flute, the note doesn't start to fade until the flutist stops playing the note.\par \par }{\f6\fs20 NoteOff(generator, note);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Once the note fades away to nothingness, the Note Synthesizer shuts off the generator and makes it available for other notes.  If the user stops the program before a note is quite finished, the }{\f6\fs20 AllNotesOff}{\f4  call I mentioned at the start of the section will shut things down properly.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Problem 16-3:  This problem puts the Note Synthesizer to work, creating a simple test bed program that let's you try out ASIF instruments.  There are two main parts to the program.\par The first part is the user interface.  Start with the Frame program, setting it up so there is always one open window.  Use the 640 mode version of frame, and set the window size to 377 by 50 pixels.  This is divided into 21 equal piano keys with vertical black lines, with sharp keys formed with black rectangles, as in the picture.  You're main event loop should check for mouse presses on the key; set it up so it starts the note when the mouse is pressed, and calls }{\f6\fs20 NoteOff}{\f4  when the mouse is released.  While you're waiting for the mouse up event, check to see if the mouse moves to another key; if it does, turn off the current note and start the new one.  That let's the user "strum" the keys.\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1096{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw385\pich132\picwgoal7700\pichgoal2640\macpict\bliptag1537030326\blipupi72{\*\blipuid 5b9d38b65561501373a16354aeee3fca}16eb00000000008401811101a00082a0008e01000a0000000002d00240980032000000000084018800000000008401810000000000840181000102cf0002cf0008003fd3ff00feff0008003fd3ff00feff00080030d3000006ff00080030d3000006ff00080030d3000006ff00080030d3000006ff001b0333f3fff9f7ff01c00ff70000f0fe000370000003f4ff00e6ff001b0333f3fff9f7ff01c00ff70000f0fe000370000003f4ff00e6ff001c0330030018f600030600000cfc00020c0198fe000030f1000006ff001c0330030018f600030600000cfc00020c0198fe000030f1000006ff00220333f30019f7ff13c0061f0f1f1b337f0f1f1f0180fbf8f83078d803f4ff00e6ff00220333f30019f7ff13c0061f0f1f1b337f0f1f1f0180fbf8f83078d803f4ff00e6ff00200330030018f600110619980c1c336d99998c00f19b6ccc30cce0f3000006ff00200330030018f600110619980c1c336d99998c00f19b6ccc30cce0f3000006ff00220333f30019f7ff13c006198f0c18336d9f998c00199b6ccc30fcc003f4ff00e6ff00220333f30019f7ff13c006198f0c18336d9f998c00199b6ccc30fcc003f4ff00e6ff00200330030018f600110619818d98336d98198d81999b6ccc30c0c0f3000006ff00200330030018f600110619818d98336d98198d81999b6ccc30c0c0f3000006ff00220333f3fff9f7ff13c00f198f07181f6d8f198700f0fb6cf87878c003f4ff00e6ff00220333f3fff9f7ff13c00f198f07181f6d8f198700f0fb6cf87878c003f4ff00e6ff000c0030e50000c0f0000006ff000c0030e50000c0f0000006ff00080030d3000006ff00080030d3000006ff0008003fd3ff00feff0008003fd3ff00feff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f30003ff00ffc003000ffc03ff00ffc003000ffc03ff000c003ff00ffc03ff000c003ff00ffc003000ffc03ff000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff00332f3000030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c00030000c0006ff0008003fd3ff00feff0008003fd3ff00feff0002cf0002cf00a0008fa00083ff}}{\f4 \par \par Figure 16-8:  The Keyboard\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Start with a volume value of 120, and set the keyboard up so the leftmost note has a note number of 36.  You can change those values if you like, but they're good starting places.\par Your program should include an Open call in the File menu, but New, Close, Save and Save As should all be missing.  Naturally, you can't play a note until an instrument is loaded, so if the user plays a note right away, display an appropriate dialog.\par The second main part of the program is the part that loads an instrument.  We covered loading the file in the text of the session.  Besides implementing those mechanics, you also need to hook up an SFO Open dialog that only allows the user to open files with a file type of $D8 and auxiliary file type of $0002.  Once the ASIF file has been loaded, patch the instrument file with the code from Listing 16-3.\par Your program will be using calls from both the Sound Tool Set and the Note Sequencer, so be sure both tools are started in your }{\f6\fs20 StartUpTools}{\f4  call.\par {\*\bkmkend bk91}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Note Synthesizer}{\rxe bk91}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Getting the Most from Instruments}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Getting the Most from Instruments\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 At first blush, you might think that all of the talk about the Note Synthesizer is only useful if you want to write a music program.  Wrong!\par Try your instrument sampler on some of the instruments from the solutions disk.  Play a single note from the instrument, trying them at various notes.  I'd particularly recommend listening carefully to the instruments Again, Parrot, Phasor and Pistola \endash  none of which are an instrument in the traditional, musical sense.  With the proper instruments and a little imagination, you can use the Note Synthesizer for almost all of the sound effects in a typical game or education program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Sound Tools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Sound Tools\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Ultimately, all sounds produced by the computer end up as vibrations of a speaker cone, but there are a lot of ways to get that final result.  Depending on what you are trying to do, you have a wide variety of sound tools available, too.  And, of course, there's the whole topic of getting sounds into the computer in the first place!\par You've seen a little of what the Apple IIGS can do with the Sound Tool Set and the Note Synthesizer.  In the rest of this section, we'll take a look at some of the other sound related tools.  Some of these are true tool sets, either built into the Apple IIGS or in the Tools folder of your system disk, but I'm not going to limit the information to just the things that come with the system.  After all, that wouldn't give you any way to get sound into the computer!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Audio Compression and Expansion Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Audio Compression and Expansion Tool Set\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 sound\:compression}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ACE Tool Set}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In most cases, the biggest drawback to digitally recorded sound is the sheer size of the sound files.  The Audio Compression and Expansion Tool Set (ACE) is used to compress some of those huge chunks of data.  ACE uses a clever technique of compression that doesn't always give you back exactly what you put in.  That sounds like it would cause problems (sorry about the pun!) but in practice the results are very impressive.  ACE can compress a sound to either 3/8 or 5/8 of it's original size, then expand the sound back out to something that is close enough to the original sound that you generally can't hear the difference.\par ACE is a RAM based tool.  It's on your System Disk (Tool029 in the Tools folder).  ACE is documented in Chapter 27 of }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Note Sequencer}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Note Sequencer\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Note Sequencer}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 synthesized sound}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 sound\:synthesized}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 We used the Note Synthesizer to play individual notes using a variety of instruments.  The Note Synthesizer is designed to string those notes together into multi-instrument songs.  Once you get a song going, it can even play the song in the background while the main CPU of the Apple IIGS keeps right on working.  That's real handy in a game, for example.  You could even create a desk accessory to play background music while you use other programs.\par The Note Sequencer is a RAM based tool.  It's on your System Disk (Tool026 in the Tools folder).  The Note Sequencer is documented in Chapter 40 of }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The MIDI Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The MIDI Tool Set\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MIDI}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you walk into a store that sells musical instruments mumbling "MIDI," they will know exactly what you're talking about.  The Musical Instrument Digital Interface (MIDI) is a common hardware and software interface that let's musical devices talk to each other.  You'll need a MIDI card and one or more MIDI compatible musical instruments to get going, but with those installed, you can turn your Apple IIGS into an awesome music box.  For a very simple example, you could record what you play on a MIDI keyboard (most MIDI keyboards look more or less like a piano or organ keyboard), edit the results in the computer to clean up timing, and play the edited song back through the MIDI device.\par The MIDI Tool Set was created to make it easier for you to deal with all of the different MIDI instruments and cards.  It gives you a standard interface with a well defined set of tool calls that let you talk to virtually any MIDI instrument.\par The MIDI Tool Set is a RAM based tool.  It's on your System Disk (Tool032 in the Tools folder).  The MIDI Tool Set is documented in Chapter 38 of }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 .  Several commercially available music programs can use the MIDI tools to talk to MIDI instruments, too.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 synthLAB}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 synthLAB\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MIDI}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 synthLAB is actually an application, created by Apple Computer and distributed with System 6.0.  synthLAB is designed as a MIDI editing tool, but it's also a great way to play with the instrument and music capabilities of the Apple IIGS.\par synthLAB is a self contained package, with documentation right on the disk.  Just catalog the synthLAB disk from System 6.0 and start exploring!\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The Media Control Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The Media Control Tool Set\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 multi-media}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Media Control Tool Set does for stereo systems what the MIDI Tool Set does for MIDI instruments: it gives you a single, well defined tool that can talk to virtually any modern stereo component.  You can control CDs, Laser Discs and VCRs, all with a single tool.  In theory, you can turn your Apple IIGS into a rather powerful computerized video or sound DJ.\par The Media Control Tool Set is new with System Disk 6.0.  It is documented in Chapter 11 of }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Talking Tools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Talking Tools\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 speech}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When we looked at the Note Synthesizer, you saw how the computer could take an instrument file and a computerized version of sheet music and play a song.  The computer can also take some computerized knowledge of the English language and straight ASCII text and create sound from the text.  The Talking Tools package does exactly that.\par In practice, the rules for speaking are a lot more complicated than the rules for playing an instrument.  You would never mistake the computer for a real person.  The voice is easy to understand, though, and you do have some control over it \endash  like picking a male or female voice, controlling the speed, and controlling the volume.\par There are two big reasons for picking text to speech conversion over a digitally recorded voice.  The first, of course, is space.  You can easily store an entire novel on an 800K floppy disk using ASCII text, then read the novel with Talking Tools.  There's no way you could get a digital recording of an entire book on a floppy disk, though.\par The other reason for picking text to speech conversion is flexibility.  With a digitally recorded voice, you're stuck with a specific sequence of words.  With text to speech conversion, you can have the computer say anything you like \endash  even, for example, asking for the name of the user and fitting it into future spoken sentences.\par The Talking Tools package comes with the tools themselves, demonstration programs, documentation for the tools, and interfaces for a variety of languages, including ORCA/Pascal.  It is published by the Byte Works.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Sound Input}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Sound Input\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 sound input}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Apple IIGS doesn't have a built-in microphone or any other sound input device, so if you want to create digital recordings of your own, you'll need some sort of sound input device.  There are a lot of them out there, ranging in price from about $30 to a couple of hundred dollars.  The cheaper devices plug right into your motherboard, and usually include a small card.  These are pretty good for playing around, but electrical interference from the computer itself limits the quality of the sound.  The more expensive cards can approach CD quality sound.\par All of the various cards have standard jacks, so you can plug a lot of different things into the card.  Of course, the obvious choice is a microphone, but you can also connect the computer to a VCR or stereo to record songs or sound effects.  Some of the cards also have stereo output \endash  the built-in output on the Apple IIGS can only play one channel, even thought the sound chip can easily handle stereo.\par One of the inexpensive sound input systems comes bundled with HyperStudio, published by Roger Wagner Publishing.  For the more expensive systems, get a recent catalog from a mail order house, or check out the cards offered by Applied Engineering.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This lesson has reviewed the major tools, hardware, and software used to make sounds on the Apple IIGS.  You learned to use some of the features of two of these tools: the Sound Tool Set for playing digitally recorded sound, and the Note Sequencer for creating musical notes using instruments.  You also learned to load instruments from ASIF instrument files.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 AllNotesOff\tab AllocGen\tab FFSoundDoneStatus\tab FFStartSound\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 FFStopSound\tab NoteOff\tab NoteOn\tab WriteRamBlock\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk92}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 sound}{\rxe bk92}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 17 \endash  Professional Polish}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 17 \endash  Professional Polish}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 17 \endash  Professional Polish\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk98}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 At this point, you can crank out a pretty complete desktop program, but it still doesn't have that polished look of a professional program.  One of the big differences between your programs and the professional programs is that the professional programs interact with the operating system through icons and messages.  This lesson shows you how to make your own programs work smoothly with the Apple IIGS operating system, and especially with the Finder.  Topics covered include icons, Finder information, and using the message center.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Finder Resources}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Finder Resources\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk93}\par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The }{\b\f6 rComment(1)}{\b\f4  Resource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The }{\b\v\f6 rComment(1)}{\b\v\f4  Resource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you're in the Finder, you can ask for information about a program.  When the Finder is asked for information, it looks in the resource fork of the file for an }{\f6\fs20 rComment}{\f4  resource with a resource ID of 1.  If it finds one, it displays the text in the resource.  This comment resource is generally reserved for the user, who can write comments about the program or data files, but you can also use the }{\f6\fs20 rComment}{\f4  resource to imbed information you think the user might need, like the amount of memory and minimum hardware or software your program needs.  There's another place for you to record copyright information, so you normally won't put that here.\par Listing 17-1 shows a sample resource for an }{\f6\fs20 rComment}{\f4  resource.  Figure 17-1 shows the information as it's displayed by the Finder when you use the Icon Info command under the Finder's Special menu.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rComment (1) \{\par    "Finder comments look like this."\par    \};\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 17-1:  }{\f6\fs20 rComment}{\f4  Resource for a Typical Program\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1097{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw408\pich258\picwgoal8160\pichgoal5160\macpict\bliptag1700203808\blipupi72{\*\blipuid 65570d20fbd92177dcbffccf1e9f734b}0d5000000000010201981101a00082a0008e01000a0000000002d002409800340000000000c801980000000000c801980000000000c80198000102cd0002cd0007003fd0ff01fc0007003fd0ff01fc00070030d000010c00070030d000010c00070030d000010c00070030d000010c001f0333f3fff9f5ff03003c001cfd000a6cf8f878f8030fc0306c01f2ff01cc001f0333f3fff9f5ff03003c001cfd000a6cf8f878f8030fc0306c01f2ff01cc001c0330030018f40002180030fd0000d8fdcc040f00c0f06cf100010c001c0330030018f40002180030fd0000d8fdcc040f00c0f06cf100010c001f0333f30019f5ff0800187c7c78078f80d8fdcc0503018030d801f2ff01cc001f0333f30019f5ff0800187c7c78078f80d8fdcc0503018030d801f2ff01cc001d0330030018f4000f186630cc0cccc000f8f8ccf803030030f000010c001d0330030018f4000f186630cc0cccc000f8f8ccf803030030f000010c00200333f30019f5ff1200186630cc0cccc000c0d8cccc030300300001f2ff01cc00200333f30019f5ff1200186630cc0cccc000c0d8cccc030300300001f2ff01cc001d0330030018f40008186630cc0cccc000c0fecc0303060030f000010c001d0330030018f40008186630cc0cccc000c0fecc0303060030f000010c00200333f3fff9f5ff12003c663078078cc000c0cc78f8cfc60cfc0001f2ff01cc00200333f3fff9f5ff12003c663078078cc000c0cc78f8cfc60cfc0001f2ff01cc00070030d000010c00070030d000010c00070030d000010c00070030d000010c0007003fd0ff01fc0007003fd0ff01fc00070030d000010c00070030d000010c00070030d008010c00070030d008010c00070030d022010c00070030d022010c00070033d0ef01cc00070033d0ef01cc00070033d020014c00070033d020014c00070033d0ec01cc00070033d0ec01cc00070033d0ec01cc00070033d0ec01cc00070033d0fc01cc00070033d0fc01cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc001b05330007c60003f600060e00001800e0c6fe00016030ec0001cc001b05330007c60003f600060e00001800e0c6fe00016030ec0001cc001c05330006000003f8000cc0000600001800600600003060eb0001cc001c05330006000003f8000cc0000600001800600600003060eb0001cc00241d3300060e3e1f1e3603c3cfe7f0f1f1f0f0060f0f198061c663c07c7c70f0ed0001cc00241d3300060e3e1f1e3603c3cfe7f0f1f1f0f0060f0f198061c663c07c7c70f0ed0001cc00240333000786fe33163806666db6d99998c1800619999b0060c6c66030663180ed0001cc00240333000786fe33163806666db6d99998c1800619999b0060c6c66030663180ed0001cc00241d3300060633333f3006066db6d9f998c0f00619999e0060c787e0306630f0ed0001cc00241d3300060633333f3006066db6d9f998c0f00619999e0060c787e0306630f0ed0001cc00241d330006063333303006666db6d98198d8180619999b0060c6c60036663018ed0001cc00241d330006063333303006666db6d98198d8180619999b0060c6c60036663018ed0001cc0025103300060f331f1e3003c3cdb6d8f19870f0fe0f0a1980f1e663c01c6678f180ee0001cc0025103300060f331f1e3003c3cdb6d8f19870f0fe0f0a1980f1e663c01c6678f180ee0001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc0098003400c800000102019800c800000102019800c80000010201980001070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc000d0033ebfff700007ff1ff01cc000d0033ebfff700007ff1ff01cc001601300cf800010c30f8000130c0f80000c0f100010c001601300cf800010c30f8000130c0f80000c0f100010c002003300c000ffc00071c000c300000c330fc000330c001e0fa0000c0f100010c002003300c000ffc00071c000c300000c330fc000330c001e0fa0000c0f100010c002304300c001980fd00070c000c300000c330fc000330c00330fc00026000c0f100010c002304300c001980fd00070c000c300000c330fc000330c00330fc00026000c0f100010c002821300c00180f1f0f1b1f0c000c300000db3e1e363c000030c00301e7f3f878f8f800c0f100010c002821300c00180f1f0f1b1f0c000c300000db3e1e363c000030c00301e7f3f878f8f800c0f100010c002803300c001bfe991a9c330c000c300000db33333866000030c0030336db6ccccc6000c0f100010c002803300c001bfe991a9c330c000c300000db33333866000030c0030336db6ccccc6000c0f100010c002821300c00199f999f98330c000c300000db333f307e000030c0030336db6cfccc6000c0f100010c002821300c00199f999f98330c000c300000db333f307e000030c0030336db6cfccc6000c0f100010c002821300c001998199818330c000c3000006633303060000030c0033336db6cc0cc6c00c0f100010c002821300c001998199818330c000c3000006633303060000030c0033336db6cc0cc6c00c0f100010c002821300c000f0f198f181f1e000c30000066331e303c000030c001e1e6db6c78cc3800c0f100010c002821300c000f0f198f181f1e000c30000066331e303c000030c001e1e6db6c78cc3800c0f100010c001601300cf800010c30f8000130c0f80000c0f100010c001601300cf800010c30f8000130c0f80000c0f100010c0017013007f80001381cf80001e070f900010380f100010c0017013007f80001381cf80001e070f900010380f100010c0016013001f8ff01e007f8ff01801ff9ff00fef000010c0016013001f8ff01e007f8ff01801ff9ff00fef000010c00070030d000010c00070030d000010c0007003fd0ff01fc0007003fd0ff01fc0002cd0002cd00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 17-1:  The Finder's Comment Box\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The }{\b\f6 rComment(2)}{\b\f4  Resource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The }{\b\v\f6 rComment(2)}{\b\v\f4  Resource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Another resource the Finder recognizes is an }{\f6\fs20 rComment}{\f4  resource with a resource ID of 2.  The Finder shows the text from this resource whenever the user clicks on the icon for a file that can't be opened.  That might happen if your program is used to create a data file, but someone is trying to open the data file on another computer.  This resource is a good place to put some information about your program, like the name and where to get a copy!  To do that, though, you need to create a resource under program control.  Creating a resource fork and adding a resource is a lot like writing data to a file, but there are some differences, especially in the particular calls used.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenResourceFile}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The first step is to open the resource fork on the data file.  }{\f6\fs20 OpenResourceFile}{\f4  does that; here's a sample call:\par \par }{\f6\fs20 id := OpenResourceFile(2, nil, fileName);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The first parameter tells the Resource Manager whether you want have read access (use a value of 1) write access (use a value of 2) or both (use a value of 3).  In this case, we're supposedly creating a new resource fork and adding a new resource, so all we want is write access.  The next parameter is a pointer to the resource map for the file; this is almost always nil, especially for a new resource file.  The last parameter is a GS/OS path name (the parameter type is }{\f6\fs20 gsosInString}{\f4 ), just like the one you use to open the data fork for the file.  }{\f6\fs20 OpenResourceFile}{\f4  returns a file ID for the resource fork and makes the resource fork the current one.  In practical terms, this means you could cause problems by doing anything with resources before the file is closed, so keep this section of code tight!  You will need the file ID to close the resource fork.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AddResource}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The next step is to add the new resource.  That's done with an }{\f6\fs20 AddResource}{\f4  call:\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs20 AddResource(dataHandle, $0300, $802A, 2);}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 This call adds the resource to the current resource file.  }{\f6\fs20 OpenResourceFile}{\f4  made your new resource file the current resource file, so the resource will get added to the resource fork of your data file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 dataHandle}{\f4  parameter is a handle containing the information you actually want to put in the resource.  The handle needs to be the right size, so you need to allocate the handle specifically for this resource.  Once you make this call, the memory belongs to the Resource Manager, and will be disposed of at the proper time by the Resource manager.  In short, after this call, forget the handle exists!  The information you stuff in this particular resource should be straight ASCII text.\par The $0300 parameter is a flags word with attributes for the resource.  The ones I'm giving here work fine for our purpose, but if you want to do anything else with }{\f6\fs20 AddResource}{\f4 , be sure to read the complete description of the attributes.\par The next parameter is the type number for an }{\f6\fs20 rComment}{\f4  resource.  It would be good style to create a constant called }{\f6\fs20 rComment}{\f4 , and use }{\f6\fs20 rComment}{\f4  as the parameter, in any real program.\par The last parameter is the resource ID.  We're defining an }{\f6\fs20 rComment(2)}{\f4  resource, so this parameter should be 2.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseResourceFile}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Finally, you need to close the resource file.\par \par }{\f6\fs20 CloseResourceFile(id);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 The }{\f6\fs20 id}{\f4  parameter is the same one returned by }{\f6\fs20 OpenResourceFile}{\f4 .  By now, I'm assuming you're tuned in to details of error handling, and wouldn't even thing of making the }{\f6\fs20 AddResource}{\f4  or }{\f6\fs20 CloseResourceFile}{\f4  calls unless the }{\f6\fs20 OpenResourceFile}{\f4  call succeeded.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the side effects of the }{\f6\fs20 CloseResourceFile}{\f4  call is that it will change the current resource fork back to its setting before the }{\f6\fs20 OpenResourceFile}{\f4  call.  (This is a simplification, but it's true the way we've used the calls here.)  That means that after this call is made, any resource file activity will point back to your program's resource fork, which is where it should be.\par {\*\bkmkend bk93}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rComment resource}{\rxe bk93}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The }{\b\f6 rVersion}{\b\f4  Resource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The }{\b\v\f6 rVersion}{\b\v\f4  Resource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk94}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 rComment}{\f4  resource is optional, but your program must have an }{\f6\fs20 rVersion}{\f4  resource and an }{\f6\fs20 rBundle}{\f4  resource to work properly with the Finder.  These two resources are used by the Finder to identify your program and decide how some advanced features should be handled.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rVersion(1) \{\par    \{\par       1,                                    /* Major revision */\par       0,                                    /* Minor revision */\par       0,                                    /* Bug version */\par       final,                                /* Release stage */\par       0,                                    /* Non-final release # */\par       \},\par    verUS,                                   /* Region code */\par    "My Program",                            /* Short version number */\par    "Copyright 1992, John Doe",              /* Long version number */\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 17-2:  A Sample }{\f6\fs20 rVersion}{\f4  Resource\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par As you can see, the }{\f6\fs20 rVersion}{\f4  resource contains version information.  The Finder shows the user some of this information when the user uses the Icon Info command.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1098{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw408\pich258\picwgoal8160\pichgoal5160\macpict\bliptag1485798939\blipupi72{\*\blipuid 588f7e1b801f9420d7bf742567b1d32f}17d200000000010201981101a00082a0008e01000a0000000002d002409800340000000000c801980000000000c801980000000000c80198000102cd0002cd0007003fd0ff01fc0007003fd0ff01fc00070030d000010c00070030d000010c00070030d000010c00070030d000010c001f0333f3fff9f5ff03003c001cfd000a6cf8f878f8030fc0306c01f2ff01cc001f0333f3fff9f5ff03003c001cfd000a6cf8f878f8030fc0306c01f2ff01cc001c0330030018f40002180030fd0000d8fdcc040f00c0f06cf100010c001c0330030018f40002180030fd0000d8fdcc040f00c0f06cf100010c001f0333f30019f5ff0800187c7c78078f80d8fdcc0503018030d801f2ff01cc001f0333f30019f5ff0800187c7c78078f80d8fdcc0503018030d801f2ff01cc001d0330030018f4000f186630cc0cccc000f8f8ccf803030030f000010c001d0330030018f4000f186630cc0cccc000f8f8ccf803030030f000010c00200333f30019f5ff1200186630cc0cccc000c0d8cccc030300300001f2ff01cc00200333f30019f5ff1200186630cc0cccc000c0d8cccc030300300001f2ff01cc001d0330030018f40008186630cc0cccc000c0fecc0303060030f000010c001d0330030018f40008186630cc0cccc000c0fecc0303060030f000010c00200333f3fff9f5ff12003c663078078cc000c0cc78f8cfc60cfc0001f2ff01cc00200333f3fff9f5ff12003c663078078cc000c0cc78f8cfc60cfc0001f2ff01cc00070030d000010c00070030d000010c00070030d000010c00070030d000010c0007003fd0ff01fc0007003fd0ff01fc00070030d000010c00070030d000010c00070030d008010c00070030d008010c00070030d022010c00070030d022010c00070033d0ef01cc00070033d0ef01cc00070033d020014c00070033d020014c00070033d0ec01cc00070033d0ec01cc00070033d0ec01cc00070033d0ec01cc00070033d0fc01cc00070033d0fc01cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00100033fb00003cdc00063fffff8000cc00100033fb00003cdc00063fffff8000cc00230033fb0000c3fc000807c7c3c7c0187e0180f1000d180000180001803000018000cc00230033fb0000c3fc000807c7c3c7c0187e0180f1000d180000180001803000018000cc00250033fc00020300c0fd000006fe66046078060780f1000d180000180001803000018000cc00250033fc00020300c0fd000006fe66046078060780f1000d180000180001803000018000cc00250033fc00020c0030fd000006fe660460180c0180f1000d180f0f198f0f803000018000cc00250033fc00020c0030fd000006fe660460180c0180f1000d180f0f198f0f803000018000cc00250033fc000230000cfd000807c7c667c018180180f1000d1819999b1999803000018000cc00250033fc000230000cfd000807c7c667c018180180f1000d1819999b1999803000018000cc00250033fc0002c00003fd00080606c6666018180180f1000d1819981e1f99803000018000cc00250033fc0002c00003fd00080606c6666018180180f1000d1819981e1f99803000018000cc00270033fd000003fe0000c0fe0008060666666018300180f1000d1819999b1819803000018000cc00270033fd000003fe0000c0fe0008060666666018300180f1000d1819999b1819803000018000cc00270033fd00000cfe000030fe0008060663c7c67e3067e0f1000d1f8f0f198f0f803000018000cc00270033fd00000cfe000030fe0008060663c7c67e3067e0f1000d1f8f0f198f0f803000018000cc00140033fd00043000003c0cde00063fffff8000cc00140033fd00043000003c0cde00063fffff8000cc000f0033fd0004c00000c3c3d90001cc000f0033fd0004c00000c3c3d90001cc00110033fe0006030000033030c0da0001cc00110033fe0006030000033030c0da0001cc000f0033fd0004c0000ccc0fd90001cc000f0033fd0004c0000ccc0fd90001cc00100033fd00053003fffc03fcda0001cc00100033fd00053003fffc03fcda0001cc001e0033fd000b0c000cf000fc00000410003efb000401801e001eeb0001cc001e0033fd000b0c000cf000fc00000410003efb000401801e001eeb0001cc001e0033fd000b0300030000fc000006300033fb00040780260026eb0001cc001e0033fd000b0300030000fc000006300033fb00040780260026eb0001cc00200033fc0015c000fffffc000007733033363c3e6c7dfc0180663e66eb0001cc00200033fc0015c000fffffc000007733033363c3e6c7dfc0180663e66eb0001cc001f0033fc001230000c00fc000007f3303e38666670cdb60180fe66eb0001cc001f0033fc001230000c00fc000007f3303e38666670cdb60180fe66eb0001cc001e0033fc00020c0030fd000b06b3703030666660cdb60180fe66eb0001cc001e0033fc00020c0030fd000b06b3703030666660cdb60180fe66eb0001cc001f0033fc00020300c0fd000e0631b03030663e60cdb60180646664eb0001cc001f0033fc00020300c0fd000e0631b03030663e60cdb60180646664eb0001cc001d0033fb0000c3fc00010632fe30093c46607db607e6783e78eb0001cc001d0033fb0000c3fc00010632fe30093c46607db607e6783e78eb0001cc00140033fb00003cfb000101e0fe00003ce30001cc00140033fb00003cfb000101e0fe00003ce30001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc001f0033fb000b318c0006000003c3c063c3c0fe00013830fe0000c0eb0001cc001f0033fb000b318c0006000003c3c063c3c0fe00013830fe0000c0eb0001cc001e0033fb000b330000060000066660c66660fe000018fe0000c0ea0001cc001e0033fb000b330000060000066660c66660fe000018fe0000c0ea0001cc00210033fb0016361c7c3e60000606018666003e7c7c1870f0f9f1c3c7c0ed0001cc00210033fb0016361c7c3e60000606018666003e7c7c1870f0f9f1c3c7c0ed0001cc00210033fb000b3c0c6666000006e3c30663c0fe660718319998c0c66660ed0001cc00210033fb000b3c0c6666000006e3c30663c0fe660718319998c0c66660ed0001cc00210033fb000b360c66660000066066066060fe660718318198c0c66660ed0001cc00210033fb000b360c66660000066066066060fe660718318198c0c66660ed0001cc00210033fb000b330c6666000006666c066660fe660718319998d8c66660ed0001cc00210033fb000b330c6666000006666c066660fe660718319998d8c66660ed0001cc00210033fb0016319e663e600003c3c803c3c03e7c7c3c78f0f871e3c660ed0001cc00210033fb0016319e663e600003c3c803c3c03e7c7c3c78f0f871e3c660ed0001cc000c0033ee00016060e50001cc000c0033ee00016060e50001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00230033fb00010f0cfd00060183c01e303e03fb0003061818c0fe0002c60030f30001cc00230033fb00010f0cfd00060183c01e303e03fb0003061818c0fe0002c60030f30001cc00260033fb00011980fd000907866033333003000180fe00031e199980fe0002c00030f30001cc00260033fb00011980fd000907866033333003000180fe00031e199980fe0002c00030f30001cc00270033fb001c181c7e3c600001806033333e03e333e1e1e00006199b0078f807ce1e33f30001cc00270033fb001c181c7e3c600001806033333e03e333e1e1e00006199b0078f807ce1e33f30001cc00270033fb001c0f0c0c6600000180c01e33030333318333000006199e00cccc0cc63036f30001cc00270033fb001c0f0c0c6600000180c01e33030333318333000006199e00cccc0cc63036f30001cc00270033fb001c018c187e0000018180333f0303337183f1e000061f9b00cccc0cc61e3cf30001cc00270033fb001c018c187e0000018180333f0303337183f1e000061f9b00cccc0cc61e3cf30001cc00270033fb001c198c306000000183003303330331b1b300300006019980cccc0cc60336f30001cc00270033fb001c198c306000000183003303330331b1b300300006019980cccc0cc60336f30001cc00270033fb000e0f1e7e3c600007e7e31e031e03e230fee10a801f8198c078cc07cf1e33f30001cc00270033fb000e0f1e7e3c600007e7e31e031e03e230fee10a801f8198c078cc07cf1e33f30001cc00130033f3000006fd000401e0000003e80001cc00130033f3000006fd000401e0000003e80001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc001e0033f5000103c0fe000e0600300000c1e1e1e000180180001ff00001cc001e0033f5000103c0fe000e0600300000c1e1e1e000180180001ff00001cc001d0033f500010660fc000d301803c333333000180180001980f10001cc001d0033f500010660fc000d301803c333333000180180001980f10001cc00200033f500150603c7c666ce1f3e3e00c33330300018f1f1f0198f0ff20001cc00200033f500150603c7c666ce1f3e3e00c33330300018f1f1f0198f0ff20001cc00210033f5001606066666670633331800c3333060001999999819999980f30001cc00210033f5001606066666670633331800c3333060001999999819999980f30001cc00210033f5001606066666e60633331800c1f1f0c0001999999819999f80f30001cc00210033f5001606066666e60633331800c1f1f0c0001999999819999f80f30001cc00200033f5000e0666666366061f331b00c030318001fe990398199998f20001cc00200033f5000e0666666366061f331b00c030318001fe990398199998f20001cc00200033f5001503c3c7c4660f23330e03f1e1e3f180f0f199981f0f0ff20001cc00200033f5001503c3c7c4660f23330e03f1e1e3f180f0f199981f0f0ff20001cc00130033f300040603c0001efb000003ea0001cc00130033f300040603c0001efb000003ea0001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00270033fe00001efc00040600000410fe000060fef00c01800000060000780f8c00f882f20001cc00270033fe00001efc00040600000410fe000060fef00c01800000060000780f8c00f882f20001cc00290033fe000033fe001a30000600000630000001e1999998018000001e0000cc0c0cc0ccc6f20001cc00290033fe000033fe001a30000600000630000001e1999998018000001e0000cc0c0cc0ccc6f20001cc00290033fe001e30363c3e7c3c3e60000771e3e0006199981801999f000600000ccf8cc0cceef20001cc00290033fe001e30363c3e7c3c3e60000771e3e0006199981801999f000600000ccf8cc0cceef20001cc00290033fe001e30386666306666000007f333300061999830019999800600001800ccc0f8fef20001cc00290033fe001e30386666306666000007f333300061999830019999800600001800ccc0f8fef20001cc00290033fe001e30307e66307e66000006b333300060f8f860019999800600003000cfc0c0d6f20001cc00290033fe001e30307e66307e66000006b333300060f8f860019999800600003000cfc0c0d6f20001cc00290033fe001a3330606636606600000633333000601818c019999980060000600cfec000c6f20001cc00290033fe001a3330606636606600000633333000601818c019999980060000600cfec000c6f20001cc00290033fe001e1e303c3e1c3c3e60000631e33181f8f0f1f80f0f99801f8c00fcc780c0c0c6f20001cc00290033fe001e1e303c3e1c3c3e60000631e33181f8f0f1f80f0f99801f8c00fcc780c0c0c6f20001cc000f0033f2000003f7000018eb0001cc000f0033f2000003f7000018eb0001cc00070033d00001cc00070033d00001cc0098003400c800000102019800c800000102019800c80000010201980001070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00290e33000004100031838c000600000410fe000060fef00c01800000060000780c0780f882f20001cc00290e33000004100031838c000600000410fe000060fef00c01800000060000780c0780f882f20001cc002922330000063000300600000600000630000001e1999998018000001e0000c00ccc00ccc6f20001cc002922330000063000300600000600000630000001e1999998018000001e0000c00ccc00ccc6f20001cc0029223300000771e1f38f9c3c3e60000771e3e0006199981801999f00060000f8cccf80cceef20001cc0029223300000771e1f38f9c3c3e60000771e3e0006199981801999f00060000f8cccf80cceef20001cc00292233000007f33331860c6666000007f33330006199983001999980060000cc0cccc0f8fef20001cc00292233000007f33331860c6666000007f33330006199983001999980060000cc0cccc0f8fef20001cc00292233000006b33331860c7e66000006b333300060f8f86001999980060000cc0fccc0c0d6f20001cc00292233000006b33331860c7e66000006b333300060f8f86001999980060000cc0fccc0c0d6f20001cc00292233000006333331860c606600000633333000601818c019999980060000cc00ccc0c0c6f20001cc00292233000006333331860c606600000633333000601818c019999980060000cc00ccc0c0c6f20001cc0029223300000631e1f3c61e3c3e60000631e33181f8f0f1f80f0f99801f8c0078c0c780c0c6f20001cc0029223300000631e1f3c61e3c3e60000631e33181f8f0f1f80f0f99801f8c0078c0c780c0c6f20001cc000f0033f2000003f7000018eb0001cc000f0033f2000003f7000018eb0001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc00070033d00001cc000c0133f0f8000007dbff01cc000c0133f0f8000007dbff01cc001601300cf800010c30f8000130c0f80000c0f100010c001601300cf800010c30f8000130c0f80000c0f100010c002003300c000ffc00071c000c300000c330fc000330c001e0fa0000c0f100010c002003300c000ffc00071c000c300000c330fc000330c001e0fa0000c0f100010c002304300c001980fd00070c000c300000c330fc000330c00330fc00026000c0f100010c002304300c001980fd00070c000c300000c330fc000330c00330fc00026000c0f100010c002821300c00180f1f0f1b1f0c000c300000db3e1e363c000030c00301e7f3f878f8f800c0f100010c002821300c00180f1f0f1b1f0c000c300000db3e1e363c000030c00301e7f3f878f8f800c0f100010c002803300c001bfe991a9c330c000c300000db33333866000030c0030336db6ccccc6000c0f100010c002803300c001bfe991a9c330c000c300000db33333866000030c0030336db6ccccc6000c0f100010c002821300c00199f999f98330c000c300000db333f307e000030c0030336db6cfccc6000c0f100010c002821300c00199f999f98330c000c300000db333f307e000030c0030336db6cfccc6000c0f100010c002821300c001998199818330c000c3000006633303060000030c0033336db6cc0cc6c00c0f100010c002821300c001998199818330c000c3000006633303060000030c0033336db6cc0cc6c00c0f100010c002821300c000f0f198f181f1e000c30000066331e303c000030c001e1e6db6c78cc3800c0f100010c002821300c000f0f198f181f1e000c30000066331e303c000030c001e1e6db6c78cc3800c0f100010c001601300cf800010c30f8000130c0f80000c0f100010c001601300cf800010c30f8000130c0f80000c0f100010c0017013007f80001381cf80001e070f900010380f100010c0017013007f80001381cf80001e070f900010380f100010c0016013001f8ff01e007f8ff01801ff9ff00fef000010c0016013001f8ff01e007f8ff01801ff9ff00fef000010c00070030d000010c00070030d000010c0007003fd0ff01fc0007003fd0ff01fc0002cd0002cd00a0008fa00083ff}}{\f4 \par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure 17-2:  What the Finder Shows\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The Finder also uses this resource to keep track of some icon information.  For example, if you change the icons and release a new version of your program, and keep track of the version numbers properly, the Finder automatically updates some internal files containing your icons.\par As for the resource itself, the first number is the major release number.  From the time you start working on your program until the first release of the program, this should be 1.  Technically, it's up to you when you change this to a 2.  Personally, I only change the major revision number when a program changes so much that it writes data in a way that older versions cannot handle, or when I feel like I have to release a whole new book to describe all of the changes.  A lot of other people are pretty free with major version numbers, though, changing them for almost any new release.\par The second number is the minor release number.  This should be 0 up until the first release.  I generally change this number whenever the program changes in any way the user can see.  For example, when I added support for CDevs in ORCA/Pascal, the version number went from 1.3 to 1.4.\par The next number is the bug fix level.  This number should start at 0 and be increased for any release that changes anything, unless the version number or minor version number is changed.  For example, ORCA/Pascal 1.4 had some bug fixes, but since I was changing the version number from 1.3, this bug fix digit stayed at 0.  (The full version number for 1.4 would be 1.4.0, but I don't usually type the bug fix digit if it is zero.)  Later, when some bugs were found in the 1.4 version, I released a new version of the compiler with a version number of 1.4.1.\par The next field tells the Finder what release stage you're at.  I'll go over the various legal values, and give you one interpretation of how to use them.\par \par }\pard \qj\fi-1980\li2340\widctlpar\adjustright {\f6\fs20 development}{\f4 \tab The development stage is the point when you're writing the program.\par }{\f6\fs20 alpha}{\f4 \tab The alpha stage starts when the program is far enough along in the development cycle to be useful.  By this point, all of the features you planned to put in should be there, and most or all of the bugs should be gone.  In a large company, a good way to think about alpha is that it's when the programmer thinks he's done.  This is when testers and upper management starts getting involved in a big way.  (Some testers are generally involved from the very beginning, but this is the point when the testing starts getting serious.  On a large project, this is when more testers are added.)\par }{\f6\fs20 beta}{\f4 \tab Beta is the stage when the managers agree with the programmer.  By this time, some changes have been made based on the comments from people inside the company, and a few trusted outside testers have also tried the program and made some comments.  The beta release is generally sent to quite a few testers outside the company.  This is when the program is put through its paces by some carefully selected "real users."  There should be no known bugs by the time this stage is released.  The documentation should be finished.  If the development team has done it's job well, there won't be many bugs found, and the beta testers won't ask for many changes to the program.\par }{\f6\fs20 final}{\f4  or }{\f6\fs20 release}{\f4 \tab Either of these values are used for the final, commercial release of the program.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Of course, you might not need all of these stages.  If you're writing a freeware game, for example, you might use the development stage until you finish, then bump the designation to final when you post the program online.\par During the development cycle, the main version number should be 1.0.0.  The field after the release stage is used to keep track of the release number for a particular stage.  It goes up by one each time you release a new version of the program at the same stage, and is set back to zero when the stage advances.  This field gets set back to 0 permanently when the program is released.\par The region code tells the Finder which country or area the program is intended for.  This helps keep track of special versions that are used with special character sets, languages, or keyboards.  Here are the values that are available as of System Disk 6.0:\par \par }\pard \qj\widctlpar\tx360\tx2520\tx4680\tx6840\adjustright {\f6\fs20 \tab verUS\tab verFrance\tab verBritain\tab verGermany\tab verItaly\tab verNetherlands\tab verBelgiumLux\tab verFrBelgiumLux\tab verSweden\tab verSpain\tab verDenmark\tab verPortugal\tab verFrCanada\tab verNorway\tab verIsrael\tab verJapan\tab verAustralia\tab verArabia\tab verArabic\tab verFinland\tab verFrSwiss\tab verGrSwiss\tab verGreece\tab verIceland\tab verMalta\tab verCyprus\tab verTurkey\tab verYugoslavia\tab verYugoCroatian\tab verIndia\tab verIndiaHindi\tab verPakistan\tab verLithuania\tab verPoland\tab verHungary\tab verEstonia\tab verLatvia\tab verLapland\tab verFaeroeIsl\tab verIran\tab \tab verRussia\tab verIreland\tab verKorea\tab verChina\tab \tab verTaiwan\tab verThailand}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f4 Frankly, I doubt if some of those places even have an Apple IIGS, but you never know!\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The last two fields are text strings.  You can put anything you want there, or even leave them blank.  The Finder itself uses these fields for the name of the program and the copyright for the program.\par {\*\bkmkend bk94}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rVersion resource}{\rxe bk94}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 The }{\b\f6 rBundle}{\b\f4  Resource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 The }{\b\v\f6 rBundle}{\b\v\f4  Resource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\*\bkmkstart bk95}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 icons}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Finder icons}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Finder also looks for an }{\f6\fs20 rBundle}{\f4  resource in your application's resource fork.  The }{\f6\fs20 rBundle}{\f4  resource serves two different purposes.  First, it tells the Finder what icon to show then the user sees the application itself in a folder or on the desktop.  Second, it tells the Finder what kind of application files the program can handle, and exactly how they are handled.\par When the Finder runs you application for the first time, it looks for this resource.  Assuming it finds one, it collects the }{\f6\fs20 rBundle}{\f4  resource and puts it in a local data table.  This local data table is in a file, so the Finder doesn't normal ever look at the }{\f6\fs20 rBundle}{\f4  resource again \endash  it uses it's own, internal copy.  That's why the }{\f6\fs20 rVersion}{\f4  resource is so important: it tells the Finder that the application has changed, so the Finder will reread your }{\f6\fs20 rBundle}{\f4  resource.\par Once the Finder has read the }{\f6\fs20 rBundle}{\f4  resource, it uses the icon you give it when it displays your program in a folder or on the desktop.\par The other thing that's in the }{\f6\fs20 rBundle}{\f4  resource is one or more structures called }{\f6\fs20 oneDoc}{\f4  structures.  Each }{\f6\fs20 oneDoc}{\f4  structure tells the Finder about one kind of data file your program can handle.  You can get pretty detailed here, right down to telling the Finder that you can handle a specific file type, auxiliary file type, file name, a specific creation date and so forth.  You can also tell the Finder whether your program created the document, or is just able to handle it.  Finally, you can give the Finder an icon to use when the document is displayed on the desktop.  The Finder uses all of this information for two things.  The first, obviously, is when it shows the file on the desktop, and uses the icon you give it.  The other use is when the user double-clicks on a document.  When that happens, the Finder scans all of the }{\f6\fs20 oneDoc}{\f4  structures it knows about, trying to find some application that can deal with the document.  If it finds one, it runs the application and passes a message.  (We'll see how your program can use that message later in the lesson.)  If there aren't any applications that can deal with the document, the Finder lets the user look for one.\par Listing 17-3 shows a sample }{\f6\fs20 rBundle}{\f4  resource.  We'll spend the rest of this section going over this sample in detail, talking about the various options and how the information is actually used by the Finder.\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rBundle (1, preload, nospecialmemory) \{\par    1001,                          /* rIcon ID for application or NIL */\par    1,                             /* rBundle ID of this rBundle */\par    \{                              /* first oneDoc structure */\par       \{\par          $0081,                   /* bit 0 = launch this = boolean */\par                                   /* bits 4-7 = voting clout */\par          \{0\},                     /* rFinderPath ID for this document */\par          \{1002\},                  /* rIcon ID for large icon for document */\par          \{1003\},                  /* rIcon ID for small icon for document */\par          "",                  /* string to describe this type of document */\par          \},\par       $00000003,                  /* match field bits*/\par       MatchFileType \{\{$D8\}\},      /* file type to match */\par       MatchAuxType \{              /* auxiliary file type to match */\par          \{$FFFFFFFF,$00000002\}\par          \},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\}\par       \}\par    \{                              /* second oneDoc structure */\par       \{\par          $0021                    /* bit 0 = launch this = boolean */\par                                   /* bits 4-7 = voting clout */\par          \{0\},                     /* rFinderPath ID for this document */\par          \{1004\},                  /* rIcon ID for large icon for document */\par          \{1005\},                  /* rIcon ID for small icon for document */\par          "",                  /* string to describe this type of document */\par          \},\par       $00000001,                  /* match field bits*/\par       MatchFileType \{\{$D6\}\},      /* file type to match */\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\}\par       \}\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 17-3:  A Sample }{\f6\fs20 rBundle}{\f4  Resource\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There's a lot to talk about in this resource, so we'll go over everything through the first }{\f6\fs20 oneDoc}{\f4  structure line by line.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20 1001,                       /* rIcon ID for application or NIL */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This is the resource ID for an }{\f6\fs20 rIcon}{\f4  resource.  The Finder will use this icon when it shows your application.  You can use a 0 instead of a resource ID for an icon; in that case, the Finder uses the default application icon.\par There's nothing special about the }{\f6\fs20 rIcon}{\f4  resource itself.  It's defined and used just like the icon in an icon button control.  The only thing to keep in mind is that the Finder can align icons on a grid, and if you make your program's icon too big, it can hang off of the edge of the window or overlap with other icons.  To avoid that, make sure the icon is no more than 22 pixels high.  The width isn't usually a problem.\par As I write this course, there aren't any icon editors around that are designed specifically for creating icons for }{\f6\fs20 rBundle}{\f4  resources.  On the other hand, you can always create an icon button with a program like Design Master, have it write out the result as a Rez source file, and use just the }{\f6\fs20 rIcon}{\f4  part for your program's icon.\par (As of Finder 6.0, this field is always set to nil, and the icon is ignored.)\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20 1,                             /* rBundle ID of this rBundle */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This is the resource id for this resource.  The Finder uses this field for its own purposes.  You should always set it to 1.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20 \{                              /* first oneDoc structure */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par As I said earlier, the }{\f6\fs20 oneDoc}{\f4  structures tell the Finder what sort of document files your program can deal with.  You can have as many of these as you want, and may need more than one.  For example, if you are adding a }{\f6\fs20 oneDoc}{\f4  structure to your text editor, it's pretty obvious that it can handle your own file type, with a minor change or two,  it can handle standard text files,and source code files.  To tell the Finder about both possibilities, you need two }{\f6\fs20 oneDoc}{\f4  structures.  To create two }{\f6\fs20 oneDoc}{\f4  structures, you just pop in another one right after the first, just like you see in the sample.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20    \{\par       $0081                   /* bit 0 = launch this = boolean */\par                               /* bits 4-7 = voting clout */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The first entry in the }{\f6\fs20 oneDoc}{\f4  structure is a flag word.  The least significant bit is 1 if the Finder should launch your program when the user double-clicks on the document, and 0 if you are just creating an icon.  For example, you might want to create an icon for a preferences file, but not actually launch the program if the user picks the file.  In that case, the least significant bit should be 0.\par Bits 4-7 are the voting clout for the program.  This is where you tell the Finder what you can do with the file.\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4\ul bit}{\f4 \tab }{\f4\ul use}{\f4 \par 7\tab This is the highest priority of all.  If you set bit 7, you are telling the Finder that you are the owner of the file type.  Normally you would only set this bit if you reserve a specific file type for the files for your program.  For example, AppleWorks GS should lay claim to all of the AppleWorks GS specific file types.\par 6\tab This bit says your program knows exactly what to do with the file, and can read and write the file.  When the user double-clicks on a document, the Finder will try to run the program that claims ownership with bit 7, but failing that, the Finder will try to find some program that sets bit 6, claiming that it can read and write the file.  For example, if you updated your word processor to handle text files, it should set this bit for text files and source files.\par 5\tab This bit says you can read the file, and may be able to write it \endash  but not necessarily using the same format.  The Finder will pick you in a pinch.\par 4\tab Setting this bit says you can read the file, but that's about it.  If the Finder is really desperate, and can't find anyone else to deal with the file, it will use your program.  You might use this bit, for example, with your instrument player from the last lesson, telling the Finder you can play the file.  If a music editor is around, though, it will have a higher priority, since it can read and write the file, and the Finder will pick it first.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par (Voting isn't actually implemented in Finder 6.0, but the voting bits should be set anyway, since voting may be implemented at some point in the future.)\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20       \{0\},                 /* rFinderPath ID for this document */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The Finder uses this field to keep track of your program once the }{\f6\fs20 rBundle}{\f4  resource is moved to the Finder's internal table.  You should set it to 0 in your resource definition.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20       \{1002\},          /* rIcon ID for large icon for document */\par       \{\{1003\}\},        /* rIcon ID for small icon for document */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can define a resource for the document here, giving the Finder two }{\f6\fs20 rIcon}{\f4  resource numbers.  The first is used when the document is shown using a full-size icon, and the second is used when the Finder is displaying small icons.  You can also use 0 for either or both entries, telling the Finder to use the default icon.\par Normally you will only set up an icon if you own the file, letting the real owner define the icon if you have a voting priority less than 7.  If you do define the icons, the large icon should generally be 22 pixels high or less, while the small icon should be 8 pixels high and 16 to 80 pixels wide.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20       "",          /* string to describe this type of document */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The Finder has a file it can read to find a short text description for various file types; the result is displayed in the Kind entry when you ask for information about the icon.  If you can give a better description than the one the Finder will normally use, put it here.  If you can't use a null string, like you see in this example.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20    $00000003,                  /* match field bits*/\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par So far, all of the fields in the }{\f6\fs20 oneDoc}{\f4  structure have been used to tell the Finder what to do with a particular file.  The rest of the }{\f6\fs20 oneDoc}{\f4  structure tells the Finder what file we're talking about.\par There are a lot of different ways you can tell the Finder what files you are referring to, and I'm not going to go over all of them here.  After all, it's not likely that most of you are going to try to match a particular creation date right away.  Instead, I'll show you how to use the two most common file selectors, then I'll list the others that are available as of Finder 6.0.  If you want to use one of the other file selectors you can find all of the technical information you need in }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par The first of the file matching fields is the flag long word you see above.  Each of the bits is used to tell the Finder that you will use one particular kind of file selector.  In this case, bits 0 and 1 are set.  Bit 0 is set when you are telling the Finder to pick a particular file type, and bit 1 is set to tell the Finder you will also be selecting the file based on the auxiliary file type.  The Finder will only consider a file a match to this }{\f6\fs20 oneDoc}{\f4  structure if both the file type and auxiliary file type match.\par Of course, all you've done here is to tell the Finder what to expect next.  The actual values to use come right after this flag long word.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20    MatchFileType \{\{$D8\}\},      /* file type to match */\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This field tells the Finder which file type the current }{\f6\fs20 oneDoc}{\f4  record refers to.  You don't actually have to select the file by the file type, but in practice the file type is almost always used.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20    MatchAuxType \{              /* auxiliary file type to match */\par       \{$FFFFFFFF,$00000002\}\par       \},\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This field matches an auxiliary file type, but it does it in sort of an odd way.  You might want to handle some, but not all, auxiliary file types, so the Finder lets you mask out certain bits.  When the Finder is trying to decide if this }{\f6\fs20 oneDoc}{\f4  structure refers to a file that is being opened, it starts by anding the file's auxiliary file type with the first value in this entry.  In this case, the mask has all of the bits set, so the result is just the original value.  The Finder compares the result to the second entry; if they match, the Finder passes the file.  Assuming all of the other tests pass, too, the Finder applies this }{\f6\fs20 oneDoc}{\f4  structure to the file.\par \par }\pard \li180\widctlpar\adjustright {\b\f6\fs20       empty \{\}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par These lines tell the resource compiler that you aren't defining the rest of the tests.  You do have to have the right number of entries, so for each test you leave out, there must be one line like this one.\par Here's a short summary of the other tests that are available in Finder 6.0.  Again, for details, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs20 matchFilename}{\f4 \tab Match a particular file name.  You can use wild cards.\par }{\f6\fs20 matchCreateDateTime}{\f4 \tab Match a particular creation date.  This doesn't have to be an exact match; you can match files that are more recent than a certain date, or files that are older than a certain date.\par }{\f6\fs20 matchModDateTime}{\f4 \tab Match a particular modification date.  Again, you can check for files that are more recent than a certain date, or files that are older than a certain date.\par }{\f6\fs20 matchLocalAccess}{\f4 \tab Match files with specific access bits set.  For example, you could match only files that need to be backed up.\par }{\f6\fs20 matchNetworkAccess}{\f4 \tab Files on a network can have different access bits set.  This field lets you match the access bits for the network, as opposed to the local access bits.\par }{\f6\fs20 matchExtended}{\f4 \tab Match files that have a resource fork.\par }{\f6\fs20 matchHFSFileType}{\f4 \tab Match files based on the HFS file type.\par }{\f6\fs20 matchHFSCreator}{\f4 \tab Match files based on the HFS creator.  (This is sort of like the ProDOS FST's auxiliary file type.)\par }{\f6\fs20 matchOptionList}{\f4 \tab Match based on fields in the option list for a file.\par }{\f6\fs20 matchEOF}{\f4 \tab Match files of a certain size.  As with dates, you can do comparisons.  For example, you can pick all files that are longer than some value, or all files that are shorter than some value.\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk95}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rBundle resource}{\rxe bk95}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Desktop File}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Desktop File\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 desktop file}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 icons}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 As of System 6.0, when the Finder runs a program with an }{\f6\fs20 rBundle}{\f4  and }{\f6\fs20 rVersion}{\f4  resource, it actually saves some information about the program in a file named DeskTop, located in a folder called Icons on the same disk as the application.  As you develop, delete, and change applications, this file will eventually fill up with old information, not all of which you need.  Especially on your development disks or partitions, you should delete this folder from time to time to free up all of the old stuff.  (Hopefully someday some utilities will be available to clean up this file \endash  that's a hint!)  You might also want to delete this file if you've made some changes that just don't seem to be registering when you use your program.\par Deleting the DeskTop file wipes out all of the things the Finder knows about programs on the disk or partition, so you will have to run all applications again before the Finder will realize they exist and save the appropriate information in a new desktop file.\par \par Problem 17-1:  Add an }{\f6\fs20 rBundle}{\f4  and }{\f6\fs20 rVersion}{\f4  resource to the instrument sampler you created in Problem 16-3.  Tell the Finder your program can handle files with a file type of $D8 and an auxiliary file type of $0002, but set your voting status to 4.\par Use the following icons.  Icon 1001 is for your program, icon 1002 is the large icon for file type $D8, and icon 1003 is the small icon for file type $D8.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rIcon (1001, preload, nospecialmemory) \{\par    $8000,                        /* Icon Type bit 15  1 = color, 0 = mono */\par    21,                                /* height of icon in pixels */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    24,                                /* width of icon in pixels */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"FFFFFFFFFF00FFFFF0000FFF"        /* icon image */\par    $"FFFFFFFFF0FF00000FFFFFFF"\par    $"FFFFFFFF0FFF00FFFFFFFFFF"\par    $"FFFFFFF0FFFF000FFF0000FF"\par    $"FFFFFF0FFFFF000000FFFFFF"\par    $"FFFFF0FFFFFF00FF0FFFFFFF"\par    $"FFFF0FFFFFFF00FFF0FFFFFF"\par    $"FFF0FFFFFFFF00FFFF0FFFFF"\par    $"FF0FFFFFFFFF00FFFFF0FFFF"\par    $"F0FFFFFFFFFF00FFFFFF0FFF"\par    $"0FFFFFFFFFFF00FFFFFFF0FF"\par    $"F0FFFFFFFFFF00FFFFFF0FFF"\par    $"FF0FFFFFFFFF00FFFFF0FFFF"\par    $"FFF0FFFF000000FFFF0FFFFF"\par    $"FFFF0FF0000000FFF0FFFFFF"\par    $"FFFFF0FF00000FFF0FFFFFFF"\par    $"FFFFFF0FFFFFFFF0FFFFFFFF"\par    $"FFFFFFF0FFFFFF0FFFFFFFFF"\par    $"FFFFFFFF0FFFF0FFFFFFFFFF"\par    $"FFFFFFFFF0FF0FFFFFFFFFFF"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"FFFFFFFFFF00FFFFFFFFFFFF",\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"0000000000FF00000FFFF000"          /* icon mask */\par    $"000000000FFFFFFFF0000000"\par    $"00000000FFFFFF0000000000"\par    $"0000000FFFFFFFF000FFFF00"\par    $"000000FFFFFFFFFFFF000000"\par    $"00000FFFFFFFFFFFF0000000"\par    $"0000FFFFFFFFFFFFFF000000"\par    $"000FFFFFFFFFFFFFFFF00000"\par    $"00FFFFFFFFFFFFFFFFFF0000"\par    $"0FFFFFFFFFFFFFFFFFFFF000"\par    $"FFFFFFFFFFFFFFFFFFFFFF00"\par    $"0FFFFFFFFFFFFFFFFFFFF000"\par    $"00FFFFFFFFFFFFFFFFFF0000"\par    $"000FFFFFFFFFFFFFFFF00000"\par    $"0000FFFFFFFFFFFFFF000000"\par    $"00000FFFFFFFFFFFF0000000"\par    $"000000FFFFFFFFFF00000000"\par    $"0000000FFFFFFFF000000000"\par    $"00000000FFFFFF0000000000"\par    $"000000000FFFF00000000000"\par    $"0000000000FF000000000000"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rIcon (1002, preload, nospecialmemory) \{\par    $8000,                        /* Icon Type bit 15  1 = color, 0 = mono */\par    16,                                /* height of icon in pixels */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    16,                                /* width of icon in pixels */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"00000000000000FF"                /* icon image */\par    $"0FFFFFFFFFFF0F0F"\par    $"0FFFFFFFFFFF0FF0"\par    $"0FFFFFFF000F0000"\par    $"0FFFFF000FFFFFF0"\par    $"0FFFFF00F000FFF0"\par    $"0FFFFF0000FFFFF0"\par    $"0FFFFF00FFFFFFF0"\par    $"0FFFFF00FFFFFFF0"\par    $"0FFFFF00FFFFFFF0"\par    $"0FFFFF00FFFFFFF0"\par    $"0FFF0000FFFFFFF0"\par    $"0FF00000FFFFFFF0"\par    $"0FFF000FFFFFFFF0"\par    $"0FFFFFFFFFFFFFF0"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"0000000000000000",\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"FFFFFFFFFFFFFF00"                  /* icon mask */\par    $"FFFFFFFFFFFFFFF0"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par    $"FFFFFFFFFFFFFFFF"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rIcon (1003, preload, nospecialmemory) \{\par    $8000,                        /* Icon Type bit 15  1 = color, 0 = mono */\par    8,                                 /* height of icon in pixels */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    8,                                 /* width of icon in pixels */\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"0000000F"                        /* icon image */\par    $"0FFF00F0"\par    $"0FFF0000"\par    $"0FFF0FF0"\par    $"0F000FF0"\par    $"0FF00FF0"\par    $"0FFFFFF0"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    $"00000000",\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    $"FFFFFFF0"                          /* icon mask */\par    $"FFFFFFFF"\par    $"FFFFFFFF"\par    $"FFFFFFFF"\par    $"FFFFFFFF"\par    $"FFFFFFFF"\par    $"FFFFFFFF"\par    $"FFFFFFFF"\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 17-4:  }{\f6\fs20 rIcon}{\f4  Resources for Problem 17-1\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 GS/OS Aware Bits}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 GS/OS Aware Bits\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GS/OS aware bits}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are a lot of programs around for the Apple IIGS that were written before System Disk 4.0, when Apple introduced GS/OS.  GS/OS handles prefixes differently than the older ProDOS 16 file system, and allows much longer path names.  Your programs can handle the longer prefixes, but so far don't \endash  that's because you haven't told GS/OS that you are a modern program.  You do that by setting the auxiliary file type for your program.  The auxiliary file type is a flag long word; here are the bit definitions:\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 bits 31-16\tab Reserved; set to 0.\par bits 15-8\tab These bits should be set to $DB, telling GS/OS that the next 7 bits are valid.\par bits 7-3\tab Reserved; set to 0.\par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 message center}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 bit 2\tab Set this bit if your program handles message center messages.  It doesn't, yet, but will in a moment!\par bit 1\tab Set this bit to 1 for all desktop applications.  This bit should be clear for text applications.\par bit 0\tab Set this bit if your program handles the long, GS/OS style path names.  All of the programs from this course do.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can set the auxiliary file type several different ways, but the method varies with the various versions of the programming languages.  See your reference manual for details.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Formatting Disks}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Formatting Disks\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 initializing disks}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 formatting disks}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HandleDiskInsert}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Let's say you're using a program, and run out of space on your work disk.  The natural thing to do is to pop in a new disk, right?  Of course, that doesn't do much good unless the program will recognize the disk and give you a chance to format the new disk.  That's what }{\f6\fs20 HandleDiskInsert}{\f4  is for.  If you put this call:\par \par }{\f6\fs20 device := HandleDiskInsert($C000, 0);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 in your main event loop, the Window Manager will check the various disk drives for new disks, letting the user format any that need to be formatted.  }{\f6\fs20 device}{\f4  is a long integer; we don't need this result for anything, so you can put it in a junk variable and ignore the value.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are some other options for this call, but they aren't used in most programs.  For details, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Opening and Printing Files on Entry}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Opening and Printing Files on Entry\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk96}{\*\bkmkstart bk97}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Assuming you've set bit 2 of the auxiliary file type for your program, like we talked about in the last section, the Finder will pass a message to your program when the user runs the program by opening a document.  If the user just runs your program, there won't be a message.  The message itself is a series of path names, along with a flag telling you if you should open the documents or print them.\par To get this message, create a handle for a moveable chunk of memory (it doesn't matter how big it is, so just create one with one byte) and call }{\f6\fs20 MessageCenter}{\f4 , like this:\par \par }{\f6\fs20 MessageCenter(getMessage, 1, msgHandle);\par }{\f4 \par The Tool Locator scans the message center to see if the Finder posted a message with a message type of 1.  If so, }{\f6\fs20 MessageCenter}{\f4  expands the handle you passed to the proper size and stuffs the message into the handle.  If there is no message, }{\f6\fs20 MessageCenter}{\f4  returns an error code of $0111.\par Assuming }{\f6\fs20 MessageCenter}{\f4  returns with no error, the next step is to get rid of the message, like this:\par \par }{\f6\fs20 MessageCenter(deleteMessage, 1, msgHandle);\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 This removes the message from the messages in the message center, so the message won't pop up again later.  The last parameter isn't actually used when you ask }{\f6\fs20 MessageCenter}{\f4  to delete a message, so the message you just read isn't damaged.  Incidentally, even through }{\f6\fs20 MessageCenter}{\f4  changed the size of this handle, it belongs to your program, so you need to dispose of it when you've finished.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 The message you get back looks like this:\par \par }\pard \qj\fi-2880\li3240\keepn\widctlpar\tx1800\adjustright {\f4\ul displacement}{\f4 \tab }{\f4\ul length (bytes)}{\f4 \tab }{\f4\ul use}{\f4 \par }\pard \qj\fi-2880\li3240\widctlpar\tx1800\adjustright {\f4 0\tab 4\tab Handle of the next message.  This is used by the message center; you should ignore it.\par 4\tab 2\tab Message type.  This will be 1, since you asked for message type 1.\par 6\tab 2\tab This value will be 0 if you are supposed to open the files, and 1 if the files should be printed.\par 8\tab varies\tab This is a string with a leading length byte.  The string is a full or partial path name for the file you are supposed to open or print.  There can be more than one of these strings!  Right after the last one, there will be a zero byte.  You can take this to mean a string of length 0, and that's a convenient way of dealing with it in the program, or you can take this to mean a separate field, which is how it's defined in the toolbox reference manual.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are two issues we need to discuss about this record: the mechanics of using it, and what you're actually supposed to do with the information.\par First, the mechanics.  The easiest way to deal with the record is to create two pointers, one defined as a pointer to a boolean, and the other defined as a pointer to a string, like this:\par \par }{\f6\fs20 var\par    bPtr: ^boolean;\par    sPtr: pStringPtr;\par }{\f4 \par Start by locking the handle, then use pointer math to set the boolean pointer to point to the print flag, and the string pointer to the first path name, like this:\par \par }{\f6\fs20 HLock(msgHandle);\par bPtr := pointer(ord4(msgHandle^)+6);\par sPtr := pointer(ord4(bPtr)+2);\par }{\f4 \par Now you have a convenient way to use the information in the message.  To see if you are supposed to print the file, just dereference the first pointer.  When it comes time to open or print a file, check the length of the string pointed to by the second pointer.  If it's 0, you're done.  If it isn't, do whatever you are supposed to do with the file, then advance the string pointer to point to the next string by adding the length of the current string plus one to the pointer.\par If you are supposed to open the files, you should treat each of the file names as if the user had launched the program and immediately used the Open command to open the files.  There is one big difference you need to keep in mind, though: the message center is giving you a p-string, while SFO gives you a GS/OS path name.  You'll probably want to convert the p-string into a GS/OS string to handle this difference.  Once all of the files are open, drop into your main event loop.\par Printing files is a little different.  It's probably easiest to do a normal start-up on your program, the do an open-print-close sequence on each of the files that you are supposed to print.  You should not leave a file open after it is printed, for two reasons.  The first is that you could run out of memory trying to open all of the files.  The second is that you're program is supposed to quit as soon as all of the files are printed anyway, so there's no reason to run the risk of running out of memory.\par Whether you are supposed to open the files or print the files, don't forget to dispose of the message when you finish!\par {\*\bkmkend bk96}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 printing}{\rxe bk96}}}{\*\bkmkend bk97}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 message center}{\rxe bk97}}}{\v\f4 \par }{\f4 \par Problem 17-2:  Start with the result of problem 17-1, and add message center support.  Your instrument sampler can only load one instrument at a time, so if there is more than one file in the message, warn the user.  It doesn't make much sense to print an instrument, either, so if the Finder asks you to print an instrument, put up an appropriate error dialog.\par Be sure to set the proper GS/OS aware bits so the Finder knows your program can use the message center.\par Also, add a call to }{\f6\fs20 HandleDiskInsert}{\f4  so your program will recognize new disks and give the user a chance to format them.\par {\*\bkmkend bk98}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Finder}{\rxe bk98}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In this lesson, you've learned to put a professional touch on your programs.  You've learned how to tell the Finder what documents your program can deal with, and you've learned how to create programs that will open or print documents when the user picks those options from the Finder.  Your programs will recognize new disks and give the user a chance to format one.  You can also create icons, both for your program and for the document files it handles.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 AddResource\tab CloseResourceFile\tab HandleDiskInsert\tab MessageCenter\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 OpenResourceFile\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Resource types used for the first time in this lesson:\par \par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 rBundle\tab rComment\tab rVersion\par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Lesson 18 \endash  New Desk Accessories}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Lesson 18 \endash  New Desk Accessories}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Lesson 18 \endash  New Desk Accessories\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Goals for This Lesson}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Goals for This Lesson\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 {\*\bkmkstart bk99}{\*\bkmkstart bk100}{\*\bkmkstart bk101}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 New desk accessories are the mini-programs that show up under the Apple menu in most desktop programs.  This lesson shows you how to write a new desk accessory.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Anatomy of an NDA}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Anatomy of an NDA\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 New Desk Accessories are a rather interesting hybrid: they are sort of an application, and sort of not an application.  Desk accessories are available from any desktop program that is written in the normal way and doesn't go out of it's way to keep you from using them.  Your program doesn't have to shut down when you use a desk accessory, either.\par There's really nothing to stop you from writing full-fledged applications that are desk accessories, but generally, desk accessories are small utility programs that are used while some other main application is running.\par The desk accessory itself isn't handled like a normal application at all.  The operating system knows about desk accessories right away, letting them do things as the computer boots.  Desk accessories get called as your program starts, too, so they can do things almost right away.  They also have to be able to shut down when the user picks Quit from the main application, and they get called then, too.\par There are a lot of ways that these different calls could have been handled, but as it turns out, the Apple IIGS handles them by making desk accessories a lot different from standard applications.  Instead of a single entry point at the main body of the program, desk accessories have several entry points, one for each purpose.  The Pascal compiler has to do several things behind your back to make all of that work, so you need to tell it right up front that you want to create a desk accessory, and not a standard application.  You do that using the }{\f6\fs20 NewDeskAcc}{\f4  directive.  It looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 NewDeskAcc directive}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 \{$NewDeskAcc NDAOpen NDAClose NDAAction NDAInit 60 $03FF '  Sample\\H**'\}\par }{\f4 \par This directive goes before the program statement, right at the top of your program.  The first four parameters are the various entry points; each of these will end up being a function or procedure in the program.  The main part of the program doesn't actually get used, and should be empty.  We'll talk about all four of these entry points in detail in a moment, but I'd like to mention that there is nothing special about the names you see here.  You can pick any four names you like; I picked these because the names are pretty close to the names used in the toolbox reference manual.\par Right after the names of the four entry points for the NDA are three other parameters.  The first, 60, is the update period.  One of the things the Desk Manager can do is call your NDA every so often.  That makes it easy to implement something like a clock NDA.  If you use a value of -1, the Desk Manager will only call you if an event occurs while your desk accessory has control.  Use a 0, and the Desk Manager will call your NDA as often as possible.  That's generally a bad idea, though, since your NDA could slow down the main application if it gets called too often.  Any other value is the number of ticks to wait between calls.  Since one tick is 1/60th of a second, the value of 60 you see in the sample tells the Desk Manager to call the NDA once every second \endash  a good value for a clock.\par The next parameter is an event mask.  It works just like the one you pass to }{\f6\fs20 TaskMaster}{\f4 , telling the Desk Manager what events the NDA will handle.\par The last parameter is a menu string; it's used to form the menu item that the user will see in the Apple menu.  It must start with two spaces and end with the characters '\\H**'.  The rest of the name is what the user will see.\par Before we get bogged down in the details, let's step back and get an overview of how the various subroutines in the NDA are used.  While there are some ways to get around it, an NDA should have exactly one window \endash  no more and no less.  When the user picks your NDA from the Apple menu, the Desk Manager calls your open routine.  The open routine is a function.  You are supposed to open your one window, returning a pointer to the window to the Desk Manager as the function result, or nil if there is some problem and you can't start.  When the user clicks on the close box of your NDA, or picks close from the File menu while your NDA is active, the Desk Manager calls your close routine.  That, of course, is your cue to close your window.  The action routine gets called based on what events are posted and how you've set the period in the }{\f6\fs20 NewDeskAcc}{\f4  directive, but it will only be called while your window is open.  Finally, the Init routine is called both when the tools are started and when they are shut down.\par As we go through the four entry points, I'll give you an example of a simple but complete desk accessory, a Clock NDA.  In fact, the }{\f6\fs20 NewDeskAcc}{\f4  sample directive from a few paragraphs back is the first part of the Clock NDA.  Assembling the pieces will be left for a problem.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Init Routine}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Init Routine\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DeskStartup}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DeskShutDown}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartDesk}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 A moment ago, I mentioned that the Init routine is called as the tools are started and shut down.  Actually, to be precise, the Init routine is called when }{\f6\fs20 DeskStartUp}{\f4  and }{\f6\fs20 DeskShutDown}{\f4  are called.  }{\f6\fs20 DeskStartUp}{\f4  is the actual tool call made by }{\f6\fs20 StartDesk}{\f4  or }{\f6\fs20 StartUpTools}{\f4  when the Desk Manager is started, and }{\f6\fs20 DeskShutDown}{\f4  is called when the Desk Manager is shut down.  Of course, it's sort of important to know whether the tools are being started or shut down!  That's why the Init routine has a parameter.  It's a single integer, set to 1 if the tools are being started, and 0 if they are being shut down.\par Naturally, you can do any sort of initialization or clean-up you like in your Init routine, but there are two things you should always do.  The first is to close your window if it is open, and the second is to close any tools you started.  Of course, you have to know if the window is open and whether you actually did start any tools, so you should create some global variables to tell you whether you did either of these things, and set them to false at start up time.\par We'll talk more about the issue of tools later.  Here's a sample Init routine that deals with the issue of whether the window has been opened or not, though:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure NDAInit (code: integer);\par \par \{ Init entry point                                              \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    code - 1 for tool start up time, 0 for tool shut down time \}\par \par begin \{NDAInit\}\par if code = 1 then\par    clockActive := false\par else\par    if clockActive then\par       NDAClose;\par end; \{NDAInit\}\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 18-1:  }{\f6\fs20 NDAInit}{\f4  Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Of course, the open and close routines will have to get in the act, too, setting and clearing the }{\f6\fs20 clockActive}{\f4  variable as the window is opened and closed.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Open Routine}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Open Routine\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The main job for the open routine is to open the main NDA window.  This subroutine is actually a function returning a window pointer to the newly opened window.  You can create and open the window itself using a resource, just like you normally do, but there is one housekeeping chore you have to take care of that's done automatically in a standard application: you have to open your own resource fork.  We'll talk about that in the next section.  In Listing 18-2A, the problem is swept under the rug by calling subroutines to do the work \endash  which isn't a bad idea anyway.\par Here's the }{\f6\fs20 NDAOpen}{\f4  subroutine for the Clock NDA.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function NDAOpen: grafPortPtr;\par \par \{ Open entry point                                              \}\par \{                                                               \}\par \{ Returns: Pointer to the new NDA window                        \}\par \par const\par    rWindParam1 = $800E;                 \{window resource type\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    wrNum = 1001;                        \{window resource number\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{NDAOpen\}\par NDAOpen := nil;\par if not clockActive then\par    if OpenResourceFork then begin\par       clockWinPtr :=\par          NewWindow2(@' Clock ', 0, nil, nil, $02, wrNum, rWindParam1);\par       if ToolError = 0 then begin\par          SetSysWindow(clockWinPtr);\par          clockActive := true;\par          NDAOpen := clockWinPtr;\par          end; \{if\}\par       CloseResourceFork;\par       end; \{if\}\par end; \{NDAOpen\}\par }\pard \qc\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 18-2A:  }{\f6\fs20 NDAOpen}{\f4  Function\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rWindParam1 (1001) \{\par    $C0A5,                      /* wFrameBits */\par    nil,                        /* wTitle */\par    0,                          /* wRefCon */\par    \{0,0,0,0\},                  /* ZoomRect */\par    linedColors,                /* wColor ID */\par    \{0,0\},                      /* Origin */\par    \{0,0\},                      /* data size */\par    \{0,0\},                      /* max height-width */\par    \{0,0\},                      /* scroll ver hors */\par    \{0,0\},                      /* page ver horiz */\par    0,                          /* winfoRefcon */\par    0,                          /* wInfoHeight */\par    \{50,50,62,200\},               /* wposition */\par    infront,                    /* wPlane */\par    nil,                        /* wStorage */\par    $0800                       /* wInVerb */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rWindColor (linedColors) \{\par    0x0000,                     /* frameColor */\par    0x0F00,                     /* titleColor */\par    0x020F,                     /* tbarColor */\par    0xF0F0,                     /* growColor */\par    0x00F0,                     /* infoColor */\par    \};\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 18-2B:  Resources for the Clock Window\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There's one extra step in }{\f6\fs20 NDAOpen}{\f4  besides the housekeeping you were probably expecting.  The extra step is the call to }{\f6\fs20 SetSysWindow}{\f4 , which tells the Window Manager that the window you just created belongs to an NDA, and not to an application.  This is a very important step!  Without it, the toolbox won't realize when it should give control to your NDA instead of the main program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using Resources in an NDA}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Resources in an NDA\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In all of your programs up to this point, the resource fork for your program is opened and made the current resource fork automatically.  This isn't done for you in an NDA, so you need to open your resource fork manually before you use any tool calls that will need to load a resource from your resource fork.  You also have to remember to close your resource fork before you return to the Desk Manager, since leaving it open can interfere with the application.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenResourceFork}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseResourceFork}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Opening and closing the resource fork isn't really that hard.  In fact, you've already seen how to do it \endash  in the last lesson, you learned how to use }{\f6\fs20 OpenResourceFile}{\f4  and }{\f6\fs20 CloseResourceFile}{\f4  to write an }{\f6\fs20 rComment}{\f4  resource.  The only difference between what you saw then and what you need to do now is that you open the resource fork for input, not for output.\par Strangely enough, the real problem is figuring out what file name to use.  After all, an NDA will be moved to any number of disks, all of which have a different name.  The user might rename the program, too, so your program can't even count on knowing it's own file name, let alone it's full path name.  Fortunately, your program can call the System Loader and ask what it's name is, like this:\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LGetPathname2}}}{\v\f6\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs20 fPtr := LGetPathname2(id, 1);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 LGetPathname2}{\f4  returns a pointer to a GS/OS input string, which is exactly what you want to pass to }{\f6\fs20 OpenResourceFile}{\f4 .  The first parameter is the user ID for your program.  The second parameter is your program's file number, which is always 1.\par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LGetPathname2}}}{\v\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 LGetPathname2}{\f4  comes with two of it's own problems, though.  The first is that ORCA/Pascal doesn't have a header file for the System Loader, most of which has to be called from assembly language to be useful.  To get around that problem, put this declaration right after all of your global variable declarations:\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 LGetPathname2}}}{\v\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 function LGetPathname2 (userID, fileNum: integer): gsosInStringPtr;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20    tool ($11, $22);}{\f4 \par \par The second problem is that you need the original user ID used by the loader, which is not the same one returned by ORCA/Pascal's }{\f6\fs20 UserID}{\f4  function.  You can get the original user ID with a couple of new GS/OS calls:\par \par }\pard \li180\keepn\widctlpar\adjustright {\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 SetHandleID}}}{\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 FindHandle}}}{\v\f6\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs20 id := SetHandleID(0, FindHandle(@OpenResourceFork));\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 FindHandle}{\f4  takes a pointer to any location in memory and returns the handle for the location.  In this case, we're giving }{\f6\fs20 FindHandle}{\f4  the address of a subroutine in the program.  }{\f6\fs20 SetHandleID}{\f4  is generally used to change the user ID of a handle, changing the owner.  In this case, though, we're passing 0 for the new user ID, which tells }{\f6\fs20 SetHandleID}{\f4  not to change the user ID.  }{\f6\fs20 SetHandleID}{\f4  always returns the user ID for the handle, so we get what we need.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Here's a pair of subroutines that implement these ideas.  These are the same ones called by }{\f6\fs20 NDAOpen}{\f4  in Listing 18-2B.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function OpenResourceFork: boolean;\par \par \{ Open the resource fork for this DA                            \}\par \par var\par    fPtr: gsosInStringPtr;               \{GS/OS file name pointer\}\par    id: integer;                         \{user ID for our executable chunk\}\par \par begin \{OpenResourceFork\}\par id := SetHandleID(0, FindHandle(@OpenResourceFork));\par fPtr := LGetPathname2(id, 1);\par if ToolError = 0 then\par    rID := OpenResourceFile(1, nil, fPtr^);\par OpenResourceFork := ToolError = 0;\par }\pard \li180\widctlpar\adjustright {\f6\fs20 end; \{OpenResourceFork\}\par \par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure CloseResourceFork;\par \par \{ Close the resource fork opened by OpenResourceFork            \}\par \par begin \{CloseResourceFork\}\par CloseResourceFile(rID);\par end; \{CloseResourceFork\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 18-3:  Opening and Closing Our Resource Fork\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Close Routine}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Close Routine\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The close routine doesn't have any parameters.  It is called when the user wants to close the window, so naturally, that's what you should do.  Since the window pointer isn't passed, though, you have to get it from the global variable, which is why the open subroutine saved the window pointer.  (One of the reasons, anyway.)\par There is one subtle point you have to be careful of in your close routine.  It can be called even if the open routine is never called at all, and it can be called more than once.  Because of that, you have to write it carefully so you don't try to close a window that doesn't exist.  If you forget, the best thing you can expect is for the Window Manager to crash.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure NDAClose;\par \par \{ Close entry point                                             \}\par \par begin \{NDAClose\}\par if clockActive then begin\par    CloseWindow(clockWinPtr);\par    clockActive := false;\par    end; \{if\}\par end; \{NDAClose\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 18-4:  }{\f6\fs20 NDAClose}{\f4  Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 The Action Routine}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 The Action Routine\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The action routine is the one that gets called when your NDA is actually supposed to do something.  There are two parameters.  The first is a code that tells the action routine why the call is being made.  The second parameter is only used for one of the action codes: for }{\f6\fs20 eventAction}{\f4 , the second parameter is the event record for the event your program is supposed to handle.  For all other action codes, the second parameter is not used, and should be ignored.  The action routine is also a function, but only a few of the action codes need to return a value.\par Here's the various action codes, along with what they mean and what the second parameter is.  The names you see here are declared as constants in the ORCA/Pascal interface files, and are also listed in the toolbox reference manual and Appendix A with the numeric values for the names.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f4\ul code}{\f4 \tab }{\f4\ul use}{\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 eventAction}{\f4 \tab This code is used when your NDA needs to handle an event.  in this case, the second parameter is a pointer to an event record containing the event you are supposed to handle.\par \par \tab Some events aren't passed to NDAs.  If the event mask in the }{\f6\fs20 NewDeskAcc}{\f4  directive has the proper bits enabled, the NDA will get button down events, button up events, and key down events.  No matter how the bits are set, the NDA will always get its own activate events and update events.  All other events are always passed to the application.\par \par }{\f6\fs20 runAction}{\f4 \tab This is the code used when the time period you set up in the }{\f6\fs20 NewDeskAcc}{\f4  directive expires.\par \par }{\f6\fs20 cursorAction}{\f4 \tab This action code is used when the NDA window is the front window when }{\f6\fs20 SystemTask}{\f4  is called.  (}{\f6\fs20 SystemTask}{\f4  is called by }{\f6\fs20 TaskMaster}{\f4 ; you don't have to worry about calling it in your program if you use }{\f6\fs20 TaskMaster}{\f4 .)  The intent is to give you a chance to change the cursor if it's over the NDA window.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20 undoAction}{\f4 , }{\f6\fs20 cutAction}{\f4 , }{\f6\fs20 copyAction}{\f4 , }{\f6\fs20 pasteAction}{\f4 , }{\f6\fs20 clearAction}{\f4 \tab \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \tab These five action codes are used when the user uses one of these standard editing operations.  If your NDA handles the editing operation, you should return true; if your NDA did not handle the operation, you should return false.\par \par \tab While the action routine is always a function, you only have to return a value for these five action codes.  Returning a value for one of the other action codes doesn't hurt, but it isn't required, either.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMasterDA}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Handling an event in an NDA isn't really any harder than handling an event in an application, but it isn't any easier, either.  There's a }{\f6\fs20 TaskMasterDA}{\f4  call that's designed for NDAs.  It looks and works just like }{\f6\fs20 TaskMaster}{\f4 , except that the event mask (the first parameter) isn't really used for anything; it's just there to make }{\f6\fs20 TaskMasterDA}{\f4  look like }{\f6\fs20 TaskMaster}{\f4 .\par Here's the action routine for the Clock.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 function NDAAction (code: integer; myEvent: eventRecord): boolean;\par \par \{ Action entry point                                            \}\par \{                                                               \}\par \{ Parameters:                                                   \}\par \{    code - action code; tells why the call is being made       \}\par \{    event - if the code is eventAction, this is an event       \}\par \{       record; the parameter is unused for all other codes     \}\par \{                                                               \}\par \{ Returns: True if one of the five editing codes is handled,    \}\par \{    false if not.                                              \}\par \par var\par    event: integer;                      \{TaskMaster event code\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    port: grafPortPtr;                   \{caller's grafPort\}\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 begin \{NDAAction\}\par NDAAction := false;\par case code of\par    eventAction:\par }\pard \li180\widctlpar\adjustright {\f6\fs20       event := TaskMasterDA(0, myEvent);\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    runAction: begin\par       port := GetPort;\par       SetPort(clockWinPtr);\par       DrawTime;\par       SetPort(port);\par }\pard \li180\widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    otherwise: ;\par    end; \{case\}\par end; \{NDAAction\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 18-5:  }{\f6\fs20 NDAAction}{\f4  Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par For completeness sake, here's the }{\f6\fs20 DrawTime}{\f4  subroutine used by the Clock NDA to actually read the time and draw it in the window.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 procedure DrawTime;\par \par \{ Draw the time in the window                                   \}\par \par var\par    i: integer;                          \{loop variable\}\par    timeString: packed array[1..21] of char; \{string to hold time\}\par \par begin \{DrawTime\}\par ReadAsciiTime(@timeString);\par for i := 1 to 20 do\par    timeString[i] := chr(ord(timeString[i])&$7F);\par timeString[21] := chr(0);\par MoveTo(7, 10);\par DrawCString(pointer(@timeString));\par end; \{DrawTime\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Listing 18-6:  }{\f6\fs20 DrawTime}{\f4  Subroutine\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReadAsciiTime}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 time}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 clock}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There is one new call here, }{\f6\fs20 ReadAsciiTime}{\f4 .  This call gets the current time from the Miscellaneous Tool Set, returning the time more or less as a 20 character ASCII string.  In the }{\f6\fs20 DrawTime}{\f4  subroutine the characters are turned into a true ASCII string by anding out the extra bit }{\f6\fs20 ReadAsciiTime}{\f4  sets in each character.  After that, it's a simple matter to add a terminating null character and draw the string in the window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Starting and Shutting Down Tools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Starting and Shutting Down Tools\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 One of the points I glossed over and said I would come back to is the issue of starting and stopping tools.  This is a really touchy point in an NDA, and there really isn't any completely safe solution.\par Let's start by looking at the tools that are always started when an NDA is running.  They are:\par \par }\pard \qj\li360\keepn\widctlpar\tx3240\tx6120\adjustright {\f4 Tool Locator\tab Memory Manager\tab Resource Manager\par Loader\tab Miscellaneous Tool Set\tab QuickDraw II\par Event Manager\tab Window Manager\tab Menu Manager\par Control Manager\tab LineEdit Tool Set\tab Dialog Manager\par }\pard \qj\li360\widctlpar\tx3240\tx6120\adjustright {\f4 Scrap Manager\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par So how do you know that these tools are started?  Believe it or not, you have to trust the application.  An application isn't supposed to allow NDAs unless all of these tools are started.  Fortunately, with the exception of the last three tools, you really can't write much of a program unless all of these tools are started.\par If your NDA needs some tool other that one of the ones listed here, there's a chance it won't be started.  The natural reaction is to start the tools you need in your Init procedure, then shut them down in the same place.  Unfortunately, that doesn't work.  The application will be starting the Desk Manager, and thus calling your NDA, pretty early in the tool start up sequence, and you don't want to interfere with the application by starting a tool before it does!  The next possibility is to start any tools you need in your open routine, and that works, to a point.  You just need to be sure the tool hasn't already been started before you try, and be sure you can handle the situation gracefully (i.e. without interfering with the application!) if you fail.\par The next problem is shutting the tools down.  Since you started your tools in the open routine, the natural solution would be to shut the tools down in the close routine.  That can cause problems, though.  Think about this sequence of events:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Your NDA is opened, and needs the Print Manager.  The application didn't start the Print Manager, so you do.\par 2.\tab The user opens another NDA, which also uses the Print Manager.  This NDA sees that the Print Manager has been started, so it doesn't start the Print Manager.\par 3.\tab The user closes your NDA, so you shut down the Print Manager.\par 4.\tab The user then tries to print something with the second NDA, which promptly crashes because the Print Manager isn't active.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Well, that's a problem, all right.  The best you can do is to take two other steps.  First, always check to be sure a tool is started just before you use it, and start the tool if it hasn't been started already.  Do that even if you think you've already started the tool.  Second, shut down tools when the Init routine is called at tool shutdown time, and not before.  In addition, always check to make sure a tool is still active before you shut it down.\par This system still isn't perfect.  Most applications start all of the tools they need at start up time, and shut down all of the tools they started just before exiting, but it's possible for the application itself to start a tool and shut it down at any time.  You can protect yourself from the application by always double checking to be sure all of the tools you need are going, but the application may get upset if it tries to start a tool and it's already going.  You can't do anything practical to avoid this situation, so it's fortunate that it doesn't come up very often.\par I've talked a lot about checking to see if a tool is active in this section.  While I'm not going to go into details on how to do that, you can follow up on the idea if you like.  Every tool has a status call, and that status call will tell you if the tool is installed and active.  The status call works even if the tool is a RAM based tool and hasn't been loaded, so it's always safe.  It's this status call that lets you check to see if the tool is active so you can decide if you need to start the tool.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Installing an NDA}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Installing an NDA\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 There are two other steps you have to take to create an NDA.  The first is to be sure and set the file type to $B8 (NDA) instead of leaving it as $B5 (EXE) or setting it to $B3 (S16) like you've done for your other programs.  After all, the NDA isn't called like other programs.  Trying to call an NDA like any other application would cause a crash.\par The other step is to put the NDA in the right place.  All desk accessories have to be in the System:Desk.Accs folder on your boot disk; that's the only place the Desk Manager will look.  There are several utilities around that can bypass this restriction, including PRIZM, but in general you need to copy your NDA to the desk accessories folder, then reboot the computer.\par \par Problem 18-1:  Put all of the pieces together to create a Clock NDA.  Install the NDA and test it.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Summary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Summary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This final lesson of the course covered NDAs \endash  how to create them and how to install them.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Tool calls used for the first time in this lesson:\par \par }\pard \qj\li720\keepn\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 FindHandle\tab LGetPathname2\tab ReadAsciiTime\tab SetHandleID\par }\pard \qj\li720\widctlpar\tx2880\tx5040\tx7200\adjustright {\f6\fs20 SetSysWindow\tab TaskMasterDA\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk99}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 desk accessories}{\rxe bk99}}}{\*\bkmkend bk100}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 New Desk Accessories}{\rxe bk100}}}{\*\bkmkend bk101}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA}{\rxe bk101}}}{\v\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Appendix A \endash  Abridged Toolbox Reference Manual}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Appendix A \endash  Abridged Toolbox Reference Manual}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Appendix A \endash  Abridged Toolbox Reference Manual\tcl1}}}{\b\f4\fs36 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par \par }{\b\f4\fs28 Control Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Control Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Control Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named ControlMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawControls}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawControls\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawControls\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 update procedure}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawControls (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Draws all of the controls in a window.  If your window defines controls other than the scroll bars and grow box used by }{\f6\fs20 TaskMaster}{\f4 , you should include a call to DrawControls in your update procedure.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FindTargetCtl}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FindTargetCtl\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FindTargetCtl\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 target control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FindTargetCtl: ctlRecHndl;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1004\tab noCtlError}{\f4 \tab No controls in the window\par \tab }{\f6\fs20 $1005\tab noExtendedCtlError}{\f4 \tab No extended controls in the window\par \tab }{\f6\fs20 $1006\tab noCtlTargetError}{\f4 \tab No extended control is currently the target control\par \tab }{\f6\fs20 $100C\tab noFrontWindowError}{\f4 \tab There is no front window\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the control handle for the current target control.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetCtlHandleFromID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetCtlHandleFromID\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlHandleFromID\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetCtlHandleFromID (theWindow: grafPortPtr; ctlID: univ longint):\par    ctlRecHndl;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1004\tab noCtlError}{\f4 \tab No controls in the window\par \tab }{\f6\fs20 $1005\tab noExtendedCtlError}{\f4 \tab No extended controls in the window\par \tab }{\f6\fs20 $1009\tab noSuchIDError}{\f4 \tab The specified control ID cannot be found\par \tab }{\f6\fs20 $100C\tab noFrontWindowError}{\f4 \tab There is no front window\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 GetCtlHandleFromID}{\f4  returns the control handle for a control, given the window containing the control and the control ID.\par }{\f6\fs20 GetCtlHandleFromID}{\f4  only works with extended controls.  All of the controls we've defined and used in this course are extended controls, so you can always used }{\f6\fs20 GetCtlHandleFromID}{\f4  safely for solutions to the problems.  If you are defining controls without resources, though, you should check the detailed description of this command in }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 , page 28-27 to make sure it will work.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetCtlID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetCtlID\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlID\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetCtlID (theControl: ctlRecHndl): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1004\tab noCtlError}{\f4 \tab No controls in the window\par \tab }{\f6\fs20 $1007\tab notExtendedCtlError}{\f4 \tab The action is valid only for extended controls\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the control ID for the given control handle.\par }{\f6\fs20 GetCtlID}{\f4  only works with extended controls.  All of the controls we've defined and used in this course are extended controls, so you can always used }{\f6\fs20 GetCtlID}{\f4  safely for solutions to the problems.  If you are defining controls without resources, though, you should check the detailed description of this command in }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 , page 28-28 to make sure it will work.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetCtlParams}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetCtlParams\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlParams\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetCtlParams (theControl: ctlRecHndl): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 GetCtlParams}{\f4  returns the control parameters.\par In one place in this course }{\f6\fs20 GetCtlParams}{\f4  is used to fetch the current document size and page size for a scroll bar control.  The data size is returned in the least significant word of the long result, while the view size is returned in the most significant word.\par }{\f6\fs20 GetCtlParams}{\f4  is also used in the }{\f6\fs20 GetCtlData}{\f4  subroutine from Lesson 14.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetCtlValue}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetCtlValue\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetCtlValue\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar control}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 radio button control}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 check box control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetCtlValue (theControl: ctlRecHndl): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the current value for a control.  For a scroll bar control, this will be the position of the thumb.  For a radio button or check box, the value will be zero if the button is off, and some non-zero value if the button is on.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetLETextByID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetLETextByID\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetLETextByID\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure GetLETextByID (theWindow: grafPortPtr; controlID: longint;\par    var text: pString);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Control Manager errors are returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 GetLETextByID}{\f4  returns the text from a line edit control.\par The text returned starts with a length byte, which is set to 0 if the text is longer than 255 characters.  This is followed by the text itself, then by a terminating null character (}{\f6\fs20 chr(0)}{\f4 );\par Because of this format, you must make sure the string buffer the text is placed in is at least two characters longer than the longest allowed string for the line edit control.  You can use the result directly as a p-string, or skip the first byte and use the remainder of the entry as a c-string.  (ORCA/Pascal will handle a c-string as a Standard Pascal string.)\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetCtlAction}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetCtlAction\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetCtlAction\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetCtlAction (newAction: procPtr; theControl: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Changes the action procedure for the given control to }{\f6\fs20 newAction}{\f4 .  In this course, }{\f6\fs20 SetCtlAction}{\f4  is used to define a procedure to handle continuous scrolling for scroll bar controls.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetCtlParams}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetCtlParams\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetCtlParams\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar controls}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetCtlParams (param2, param1: integer; theControl: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the parameters for the control.\par In this course, this call is used to change the document size and data size for a scroll bar.  For a scroll bar control, the first parameter (}{\f6\fs20 param2}{\f4 ) is the document size, while the next parameter (}{\f6\fs20 param1}{\f4 ) is the view size.\par You can pass a -1 for either parameter to tell the Control Manager to leave that value alone.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetLETextByID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetLETextByID\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetLETextByID\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetLETextByID (windPtr: grafPortPtr; leCtlID: longint;\par    text: pString);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Control Manager errors are returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetLETextByID}{\f4  sets the text in a line edit control to the contents of the given string.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetCtlValue}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetCtlValue\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetCtlValue\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar control}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 radio button control}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 check box control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetCtlValue (curValue: integer; theControl: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the current value for a control and redraws the control with the new value.  For a scroll bar control, changing the value changes the position of the thumb.  For a radio button or check box, setting the value will to zero turns the button is off, while setting the value to 1 turns the button on (and, for radio buttons, turns off any other buttons in the same family).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Desk Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Desk Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Desk Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named DeskMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FixAppleMenu}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FixAppleMenu\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixAppleMenu\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 apple menu}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FixAppleMenu (menuID: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The names of all of the currently installed NDAs are added to the menu specified by }{\f6\fs20 menuID}{\f4 .  NDAs are traditionally added to the apple menu, which should already contain an About menu item.  The menu items added by this call will appear after any items that are already in the menu.\par The menu items are given menu ID numbers numbered sequentially, starting with a menu ID of 1.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Event Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Event Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Event Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named EventMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetMouse}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetMouse\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetMouse\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 mouse}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure GetMouse (var mouseLocPtr: point);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the current location of the mouse using the local coordinates of the current }{\f6\fs20 grafPort}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetNextEvent}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetNextEvent\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextEvent\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetNextEvent (eventMask: integer; var theEvent: eventRecord):\par    boolean;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 GetNextEvent}{\f4  checks to see if any events have occurred, returning true if there are events the program needs to handle and false if there are no pending events.\par It's possible for more than one event to occur before the program has time to call }{\f6\fs20 GetNextEvent}{\f4 .  To handle this situation, the Event Manager places events in an event queue, which is a prioritized first in, first out list.  (Some kinds of events have a higher priority than others, and are always reported first, but events with the same priority are treated in a true first in, first out basis.)    The length of the list is specified when you start the Event Manager, and is normally set to 20.  When you call }{\f6\fs20 GetNextEvent}{\f4 , it removes the next event from the queue and returns the information about that event.\par You can use the }{\f6\fs20 eventMask}{\f4  parameter to tell }{\f6\fs20 GetNextEvent}{\f4  what kind of events you would like to see.  If you ask for a certain kind of event, say a keyboard event, but only mouse events are in the event queue, }{\f6\fs20 GetNextEvent}{\f4  returns false, and the unwanted events remain in the event queue.  The }{\f6\fs20 eventMask}{\f4  parameter is a series of bit fields telling what events to report.  Figure A-1 shows the bit fields and what they are used for.  See the definitions section for a series of predefined names that can be added together to get various bit mask combinations.\par \par }\pard \qc\fi360\widctlpar\adjustright {{\pict{\*\picprop\shplid1099{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw404\pich308\picwgoal8080\pichgoal6160\macpict\bliptag1663197894\blipupi72{\*\blipuid 632262c63806e0f0c994245f7f580123}075000070007013b019b1101a00082a0008ca0008c01000a00070007013b019b0a000000000000000034000a000b001d001e38a100960006060000000226a1009a0008fffd000000070000a000980300150d000c2b0d16023135a00099a00097a0008da0008c34000a002f001d004238a100960006060000000226a1009a0008fffd000000070000a000982924023133a00099a00097a0008da0008c34000a0053001d006638a100960006060000000226a1009a0008fffd000000070000a000982924023131a00099a00097a0008da0008c34000a0077001d008a38a100960006060000000226a1009a0008fffd000000030000a0009829280139a00099a00097a0008da0008c34000a009b001d00ae38a100960006060000000226a1009a0008fffd000000030000a0009829240137a00099a00097a0008da0008c34000a00bf001d00d238a100960006060000000226a1009a0008fffd000000030000a0009829240135a00099a00097a0008da0008c34000a00e3001d00f638a100960006060000000226a1009a0008fffd000000030000a0009829240133a00099a00097a0008da0008c34000a0107001d011a38a100960006060000000226a1009a0008fffd000000030000a0009829240131a00099a00097a0008da0008c34000a001d001d003038a100960006060000000226a1009a0008fffd000000070000a00098280016001f023134a00099a00097a0008da0008c34000a0041001d005438a100960006060000000226a1009a0008fffd000000070000a000982924023132a00099a00097a0008da0008c34000a0065001d007838a100960006060000000226a1009a0008fffd000000070000a000982924023130a00099a00097a0008da0008c34000a0089001d009c38a100960006060000000226a1009a0008fffd000000030000a0009829280138a00099a00097a0008da0008c34000a00ad001d00c038a100960006060000000226a1009a0008fffd000000030000a0009829240136a00099a00097a0008da0008c34000a00d1001d00e438a100960006060000000226a1009a0008fffd000000030000a0009829240134a00099a00097a0008da0008c34000a00f5001d010838a100960006060000000226a1009a0008fffd000000030000a0009829240132a00099a00097a0008da0008c34000a0119001d012c38a100960006060000000226a1009a0008fffd000000030000a0009829240130a00099a00097a0008da0008d22001c01220009231200a100960006050000000208a1009a0008fffd0000001a0000a000982b1f12087265736572766564a00099a000972200370134dc0022001c0110001ba100960006050000000208a1009a0008fffd0000002d0000a000982a120c6d6f757365446f776e457674a00099a00097a100960006050000000208a1009a0008fffd000000250000a000982a120a6d6f7573655570457674a00099a0009722001c00fe002d2200490134ca0022001c00b60075237e0020001c00a400a300a42100a3013420001c009200b5009220001c008000c7008020001c006e00d9006e20001c005c00eb005c20001c004a00fd004a20001c0038010f003820001c0026012100262000b5009200b501342000c7013400c700802000d9013400d9006e2000eb013400eb005c2000fd013400fd004a20010f0134010f0038200121013401210026a100960006050000000208a1009a0008fffd000000250000a000982a120a6d6f7573655570457674a00099a0009722001c00ec003f23480022006d00da5a00a100960006050000000208a1009a0008fffd0000001a0000a000982a12087265736572766564a00099a0009722001c00da005122007f00c86c00a100960006050000000208a1009a0008fffd000000210000a000982a100a6175746f4b6579457674a00099a0009722007f00c8009da100960006050000000208a1009a0008fffd0000001d0000a000982a1209757064617465457674a00099a0009720001c001401330014200133013401330014a100960006050000000208a1009a0008fffd0000001a0000a000982a12087265736572766564a00099a00097a100960006050000000208a1009a0008fffd0000001f0000a000982a120b6163746976617465457674a00099a00097a100960006050000000208a1009a0008fffd0000001b0000a000982a1209737769746368457674a00099a00097a100960006050000000208a1009a0008fffd000000210000a000982a120a6465736b416363457674a00099a00097a100960006050000000208a1009a0008fffd0000001a0000a000982a1209647269766572457674a00099a00097a100960006050000000208a1009a0008fffd000000180000a000982a120761707031457674a00099a00097a100960006050000000208a1009a0008fffd000000180000a000982a120761707032457674a00099a00097a100960006050000000208a1009a0008fffd000000180000a000982a120761707033457674a00099a00097a100960006050000000208a1009a0008fffd000000180000a000982a120761707034457674a00099a00097a00083ff}}{\par \par }{\f4 Figure A-1: Event Masks\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Information is returned in the event record any time a call is made to }{\f6\fs20 GetNextEvent}{\f4 , whether or not an event needs to be handled.  There are five fields in the event record:\par \par }\pard \qj\fi-1800\li2160\keep\keepn\widctlpar\adjustright {\f6\fs20 eventWhat}{\f4 \tab The event that occurred.\par }{\f6\fs20 eventMessage}{\f4 \tab Information about the specific event.\par }{\f6\fs20 eventWhen}{\f4 \tab When the event occurred.  When the tools are started, an internal clock begins counting 1/60ths of a second; this time is the number of 1/60ths of a second that have elapsed from when the tools were started and when the event was detected.\par }{\f6\fs20 eventWhere}{\f4 \tab Position of the cursor (mouse) when the event was detected.\par }{\f6\fs20 eventModifiers}{\f4 \tab Extra information about the state of the computer when the event was detected.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The }{\f6\fs20 eventMessage}{\f4  field contains a variety of information based on the kind of event that occurred.  Table A-1 shows the kinds of events by the name used in the Pascal toolbox interface files, along with what the }{\f6\fs20 eventMessage}{\f4  field contains.  For the numeric value of the events, see the definitions section for the Event Manager.\par \par }\pard \qj\fi-2160\li2520\keepn\widctlpar\adjustright {\f6\fs20\ul eventWhat}{\f6\fs20 \tab }{\f6\fs20\ul eventMessage}{\f6\fs20 \par nullEvt}{\f4 \tab Undefined.\par }{\f6\fs20 mouseDownEvt}{\f4 \tab Button number (1 or 0) in low-order word, high-order word undefined.\par }{\f6\fs20 mouseUpEvt}{\f4 \tab Button number (1 or 0) in low-order word, high-order word undefined.\par }{\f6\fs20 keyDownEvt}{\f4 \tab ASCII character code in low-order byte, other bytes undefined.\par }{\f6\fs20 autoKeyEvt}{\f4 \tab ASCII character code in low-order byte, other bytes undefined.\par }{\f6\fs20 updateEvt}{\f4 \tab Pointer to the window to update.\par }{\f6\fs20 activateEvt}{\f4 \tab Pointer to the window that was activated.\par }{\f6\fs20 switchEvt}{\f4 \tab Undefined.\par }{\f6\fs20 deskAccEvt}{\f4 \tab Undefined.\par }{\f6\fs20 driverEvt}{\f4 \tab Defined by the device driver.\par }{\f6\fs20 app1Evt}{\f4 \tab Defined by the application.\par }{\f6\fs20 app2Evt}{\f4 \tab Defined by the application.\par }{\f6\fs20 app3Evt}{\f4 \tab Defined by the application.\par }{\f6\fs20 app4Evt}{\f4 \tab Defined by the application.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table A-1: Event Messages by Event Type\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The }{\f6\fs20 eventModifiers}{\f4  field is a series of bit flags that give specific information about the state of the computer when the event was detected.  Figure A-2 shows the bit fields and what they are used for.  See the definitions section for a set of predefined constants that can be used to form bit masks for the event modifiers field.\par \par }\pard \qc\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1100{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley49\piccropl0\piccropr0\piccropt0\piccropb0\picw491\pich589\picwgoal9820\pichgoal11780\macpict\bliptag79371263\blipupi72{\*\blipuid 04bb1bff1e88a1580e20ef8ce6409dbb}0a7000070007025401f21101a00082a0008c01000a00070007025401f20a00000000000000000b001b001b44001c000a002f002f4834001c000a0025002ea0008da0008c44001c00be002f01074834001c00be00250106a0008da0008ca0008c34000a000a001d001d38a100960006060000000219a1009a0008fffd000000070000a000980300150d000c2b0d16023135a00099a00097a0008da0008c34000a002e001d004138a100960006060000000219a1009a0008fffd000000070000a000982924023133a00099a00097a0008da0008c34000a0052001d006538a100960006060000000219a1009a0008fffd000000070000a000982924023131a00099a00097a0008da0008c34000a0076001d008938a100960006060000000219a1009a0008fffd000000040000a0009829270139a00099a00097a0008da0008c34000a009a001d00ad38a100960006060000000219a1009a0008fffd000000040000a0009829240137a00099a00097a0008da0008c34000a00be001d00d138a100960006060000000219a1009a0008fffd000000040000a0009829240135a00099a00097a0008da0008c34000a00e2001d00f538a100960006060000000219a1009a0008fffd000000040000a0009829240133a00099a00097a0008da0008c34000a0106001d011938a100960006060000000219a1009a0008fffd000000040000a0009829240131a00099a00097a0008da0008c34000a001c001d002f38a100960006060000000219a1009a0008fffd000000070000a00098280016001f023134a00099a00097a0008da0008c34000a0040001d005338a100960006060000000219a1009a0008fffd000000070000a000982924023132a00099a00097a0008da0008c34000a0064001d007738a100960006060000000219a1009a0008fffd000000070000a000982924023130a00099a00097a0008da0008c34000a0088001d009b38a100960006060000000219a1009a0008fffd000000040000a0009829270138a00099a00097a0008da0008c34000a00ac001d00bf38a100960006060000000219a1009a0008fffd000000040000a0009829240136a00099a00097a0008da0008c34000a00d0001d00e338a100960006060000000219a1009a0008fffd000000040000a0009829240134a00099a00097a0008da0008c34000a00f4001d010738a100960006060000000219a1009a0008fffd000000040000a0009829240132a00099a00097a0008da0008c34000a0118001d012b38a100960006060000000219a1009a0008fffd000000040000a0009829240130a00099a00097a0008da0008d22001c01210009231200a100960006050000000274a1009a0008000b0000004f0000a000982b1f120b616374697665466c61670da00099a1009a0008fffd0000004f0000a000982a0e1b31202d2077696e646f77206265696e67206163746976617465640da00099a1009a0008ffef0000004f0000a000982a0e1c30202d2077696e646f77206265696e67206465616374697661746564a00099a000972200520133dc0022001c010f0036a100960006050000000274a1009a000800120000004d0000a000982a110b6368616e6765466c61670da00099a1009a000800040000004d0000a000982a0e1c31202d206368616e67696e672066726f6d2073797374656d20746f0da00099a1009a0008fff60000004d0000a000982a0e202020202020206170706c69636174696f6e206f7220766963652076657273610da00099a1009a0008ffe80000004d0000a000982a0e0d30202d206e6f206368616e6765a00099a00097a100960006050000000274a1009a0008fffd0000001a0000a000982a15087265736572766564a00099a0009722002e00e200632200910133af00a100960006050000000274a1009a0008000b000000450000a000982a120a62746e3153746174650da00099a1009a0008fffd000000450000a000982a0e1831202d206d6f75736520627574746f6e203120646f776e0da00099a1009a0008ffef000000450000a000982a0e1730202d206d6f75736520627574746f6e203020646f776ea00099a00097a100960006050000000274a1009a0008000b000000450000a000982a1a0a62746e3053746174650da00099a1009a0008fffd000000450000a000982a0e1831202d206d6f75736520627574746f6e203020646f776e0da00099a1009a0008ffef000000450000a000982a0e1730202d206d6f75736520627574746f6e203120646f776ea00099a0009722002500b5007e237e0020002500a300d900a32100d901332000250091010f0091200025007f0145007f200025006d017b006d200025005b01b1005b200025004901e7004920002500370214003720002e001c024a001ca100960006050000000274a1009a0008000b000000420000a000982a1a096170706c654b65790da00099a1009a0008fffd000000420000a000982a0e1731202d206170706c65206b65792077617320646f776e0da00099a1009a0008ffef000000420000a000982a0e1430202d206170706c65206b657920776173207570a00099a0009720010f0091010f0133a100960006050000000201a1009a0008000b0000003f0000a000982a1a0973686966744b65790da00099a1009a0008fffd0000003f0000a000982a0e1731202d207368696674206b65792077617320646f776e0da00099a1009a0008ffef0000003f0000a000982a0e1430202d207368696674206b657920776173207570a00099a0009720014501330145007fa100960006050000000201a1009a0008000b0000004c0000a000982a1a09636170734c6f636b0da00099a1009a0008fffd0000004c0000a000982a0e1b31202d2063617073206c6f636b206b65792077617320646f776e0da00099a1009a0008ffef0000004c0000a000982a0e1830202d2063617073206c6f636b206b657920776173207570a00099a0009720017b0133017b006da100960006050000000201a1009a0008000b000000430000a000982a1a0a6f7074696f6e4b65790da00099a1009a0008fffd000000430000a000982a0e1831202d206f7074696f6e206b65792077617320646f776e0da00099a1009a0008ffef000000430000a000982a0e1530202d206f7074696f6e206b657920776173207570a00099a000972001b1013301b1005ba100960006050000000201a1009a0008000b000000450000a000982a1a0b636f6e74726f6c4b65790da00099a1009a0008fffd000000450000a000982a0e1931202d20636f6e74726f6c206b65792077617320646f776e0da00099a1009a0008ffef000000450000a000982a0e1630202d20636f6e74726f6c206b657920776173207570a00099a000972001e7013301e70049a100960006050000000201a1009a0008000b000000590000a000982a11076b65795061640da00099a1009a0008fffd000000590000a000982a0e1e31202d206b65792070726573736564206f6e20746865206b65797061640da00099a1009a0008ffef000000590000a000982a0e1f30202d206b65792070726573736564206f6e20746865206b6579626f617264a00099a00097200214013302140037a100960006050000000201a1009a0008fffd0000001a0000a000982a1a087265736572766564a00099a0009720024a0133024a001ca00083ff}}{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Figure A-2:  Modifier Flags\par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }{\b\f4 StillDown}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 StillDown\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StillDown\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 mouse}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 button}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function StillDown (buttonNumber: integer): boolean;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0605\tab emBadBttnNoErr}{\f4 \tab The button number given was not 0 or 1\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This call is used after the Event Manager detects and returns a mouse down event.  }{\f6\fs20 StillDown}{\f4  will return true until a mouse up event occurs; it will then return false, whether or not the application has made a call to see the event.  }{\f6\fs20 StillDown}{\f4  also handles multiple presses correctly; if the mouse button has been released since the last time the application detected a mouse down event, }{\f6\fs20 StillDown}{\f4  will return false, even if the mouse has been pressed again.\par The button number for a single button mouse is 0.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Event Manager Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Event Manager Definitions\tcl3}}}{\b\f4 \par }{\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 const\par    \{eventWhat values\}\par    nullEvt         =   $0000;\par    mouseDownEvt    =   $0001;\par    mouseUpEvt      =   $0002;\par    keyDownEvt      =   $0003;\par    autoKeyEvt      =   $0005;\par    updateEvt       =   $0006;\par    activateEvt     =   $0008;\par    switchEvt       =   $0009;\par    deskAccEvt      =   $000A;\par    driverEvt       =   $000B;\par    app1Evt         =   $000C;\par    app2Evt         =   $000D;\par    app3Evt         =   $000E;\par }\pard \widctlpar\adjustright {\f6\fs20    app4Evt         =   $000F;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    \{event masks\}\par    mDownMask       =   $0002;      \{call applies to mouse-down events\}\par    mUpMask         =   $0004;      \{call applies to mouse-up events\}\par    keyDownMask     =   $0008;      \{call applies to key-down events\}\par    autoKeyMask     =   $0020;      \{call applies to auto-key events\}\par    updateMask      =   $0040;      \{call applies to update events\}\par    activeMask      =   $0100;      \{call applies to activate events\}\par    switchMask      =   $0200;      \{call applies to switch events\}\par    deskAccMask     =   $0400;      \{call applies to desk accessory events\}\par    driverMask      =   $0800;      \{call applies to device driver events\}\par    app1Mask        =   $1000;      \{call applies to application-1 events\}\par    app2Mask        =   $2000;      \{call applies to application-2 events\}\par    app3Mask        =   $4000;      \{call applies to application-3 events\}\par    app4Mask        =   $8000;      \{call applies to application-4 events\}\par }\pard \widctlpar\adjustright {\f6\fs20    everyEvent      =   $FFFF;      \{call applies to all events\}\par \par    \{Modifier flags\}\par    activeFlag    = $0001;          \{set if window was activated\}\par    changeFlag    = $0002;          \{set if active window changed state\}\par    btn1State     = $0040;          \{set if button 1 was up\}\par    btn0State     = $0080;          \{set if button 0 was up\}\par    appleKey      = $0100;          \{set if Apple key was down\}\par    shiftKey      = $0200;          \{set if Shift key was down\}\par    capsLock      = $0400;          \{set if Caps Lock key was down\}\par    optionKey     = $0800;          \{set if Option key was down\}\par    controlKey    = $1000;          \{set if Control key was down\}\par    keyPad        = $2000;          \{set if keypress was from key pad\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    \{event record (interface file uses the TaskMaster version)\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 event record}}}{\v\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    eventRecord = record\par        eventWhat:      integer;\par        eventMessage:   longint;\par        eventWhen:      longint;\par        eventWhere:     point;\par        eventModifiers: integer;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Font Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Font Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Font Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named FontMgr.  This header file makes use of the Common unit and the QuickDrawII.  All of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ChooseFont}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ChooseFont\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ChooseFont\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function ChooseFont (currentID: fontID; famSpecs: integer): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1B08\tab fmBadFamNumErr}{\f4 \tab Illegal family number\par \tab }{\f6\fs20 $1B09\tab fmBadSizeErr}{\f4 \tab Illegal font size\par \tab Memory Manager errors are returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ChooseFont}{\f4  brings up a dialog that allows the user to choose a font family, font size, and font style, then returns the values selected in a longint with the same format as a }{\f6\fs20 fontID}{\f4 .  The result can be type cast to }{\f6\fs20 fontID}{\f4  and stored in a }{\f6\fs20 fontID}{\f4  variable.\par }{\f6\fs20 currentID}{\f4  is a starting font ID; it is used to create defaults for the font family, font size, and font style.\par }{\f6\fs20 famSpecs}{\f4  is a flags word.  If bit 5 (}{\f6\fs20 baseOnlyBit}{\f4 ) is set, }{\f6\fs20 ChooseFont}{\f4  will only display base font families.  (Roughly, that means it will only display the fonts that actually exist as bit maps.)  If the bit is clear, the user can pick any combination of font families, sizes and styles.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CountFonts}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CountFonts\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CountFonts\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function CountFonts (desiredID: fontID; specs: integer): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1B08\tab fmBadFamNumErr}{\f4 \tab Illegal family number\par \tab }{\f6\fs20 $1B09\tab fmBadSizeErr}{\f4 \tab Illegal font size\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 CountFonts}{\f4  returns the number of fonts that fit a given specification.  While there are many uses for this call, in this course we use it to find out if a given font size exists as a bit mapped font, or if the Font Manager will have to scale the font; this information is used to highlight appropriate font sizes in the font size menu.  For this purpose, pass the }{\f6\fs20 fontID}{\f4  for the font with the font style byte set to $FF, and the font family and size set normally.  The }{\f6\fs20 specs}{\f4  flags word should be $0A.\par For other ways to use this call, and a complete description of the various bit flags, see the }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 1}{\f4 , page 8-29.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FamNum2ItemID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FamNum2ItemID\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FamNum2ItemID\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixFontMenu}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FamNum2ItemID (familyNum: integer): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1B04\tab fmFamNotFndErr}{\f4 \tab Family not found\par \tab }{\f6\fs20 $1B0B\tab fmMenuErr}{\f4 \tab FixFontMenu never called\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 FamNum2ItemID}{\f4  takes a font family number as input and returns the menu item ID used by }{\f6\fs20 FixFontMenu}{\f4  when the font family was placed in the menu bar.  An error is generated if the font family is not in the menu, or if }{\f6\fs20 FixFontMenu}{\f4  was never called.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FixFontMenu}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FixFontMenu\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixFontMenu\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixMenuBar}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FixFontMenu (menuID, startingID, famSpecs: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors are returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Attaches the names of all of the font families to a specified menu.\par }{\f6\fs20 menuID}{\f4  is the menu number to attach the menu items to.  }{\f6\fs20 startingID}{\f4  is the first menu item ID to use; the remaining menu item IDs are assigned sequentially until all of the font families have been added to the menu.  }{\f6\fs20 famSpecs}{\f4  is a flags word.  In this course, the }{\f6\fs20 famSpecs}{\f4  parameter set to 0; see the }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 1}{\f4 , page 8-36 for other possibilities.\par You must call }{\f6\fs20 FixMenuBar}{\f4  before the menu is actually displayed.  In most programs, the call to }{\f6\fs20 FixFontMenu}{\f4  and }{\f6\fs20 FixAppleMenu}{\f4  will be made in the same place that the menu bar is set up.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FMGetCurFID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FMGetCurFID\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FMGetCurFID\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FMGetCurFID: longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the font ID for the current font.  Functions cannot return records, so the value is returned as a long integer.  Font ID records, though, are four bytes long, so you can use type casting to store the result in a font ID variable.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ItemID2FamNum}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ItemID2FamNum\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ItemID2FamNum\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixFontMenu}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function ItemID2FamNum (itemID: integer): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1B04\tab fmFamNotFndErr}{\f4 \tab Family not found\par \tab }{\f6\fs20 $1B0B\tab fmMenuErr}{\f4 \tab FixFontMenu never called\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Takes a menu item ID for a menu item created by }{\f6\fs20 FixFontMenu}{\f4  and returns the corresponding font family number.  An error is generated if the menu ID was not created by }{\f6\fs20 FixFontMenu}{\f4 , or if }{\f6\fs20 FixFontMenu}{\f4  was never called.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Font Manager Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Font Manager Definitions\tcl3}}}{\b\f4 \par }{\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 const\par    (* Family Numbers *)\par    newYork         =   $0002;\par    geneva          =   $0003;\par    monaco          =   $0004;\par    venice          =   $0005;\par    london          =   $0006;\par    athens          =   $0007;\par    sanFran         =   $0008;\par    toronto         =   $0009;\par    cairo           =   $000B;\par    losAngeles      =   $000C;\par    times           =   $0014;\par    helvetica       =   $0015;\par    courier         =   $0016;\par    symbol          =   $0017;\par    taliesin        =   $0018;\par }\pard \widctlpar\adjustright {\f6\fs20    shaston         =   $FFFE;\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type\par    (* Font ID *)\par    fontID = record\par        famNum: integer;\par        fontStyle, fontSize: byte;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 GS/OS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 GS/OS\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GS/OS}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for GS/OS is named GSOS.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Path Names}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Path Names\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 path names}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Path names are used to uniquely identify files on a disk.  (They are also used for other things; see }{\i\f4 Apple IIGS GS/OS Reference}{\f4  for details.)  The full path name consists of the name of the diskette, followed by the names of any folders you would have to open to get to the file using the Finer, followed by the name of the file itself.  These names are separated from each other with either : characters or / characters.\par For example, let's say you are trying to identify a file named MyFile.  This file is located on a disk called MyDisk, inside a folder called MyFolder.  The full path name for the file is\par \par }{\f6\fs20 :MyDisk:MyFolder:MyFile\par }{\f4 \par When you are writing toolbox programs, you generally don't have to worry about issued like partial path names, device names, or just what the rules are for creating a path name, since SFO makes sure the path names are legal before it returns the name to your program.  The only special situation you should be aware of is that * is used for the boot disk.  So, for example, if you want to store a file called ScrapBook in the System folder of the boot disk, you could use the name\par \par }{\f6\fs20 *:System:ScrapBook\par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 File Types}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 File Types\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 auxiliary file type}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 File Type Notes}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Table A-2 shows the file types and auxiliary file types used in this course, as well as a few of the other common file types you will see as you program.  For a complete list of the file types and auxiliary file types (and in many cases, descriptions of the file formats) see the Apple IIGS File Type Notes.\par In the table, Code refers to the three letter file type abbreviation you see when you use a text shell to catalog a disk.  If the Auxiliary file type is not listed, it generally means that it can vary without effecting the internal format for the file.  In those cases, you will have to refer to Apple's file type notes for details.\par \par }\pard \qj\fi-3240\li3600\widctlpar\tx1440\tx2520\adjustright {\f4 File\tab Auxiliary\par }{\f4\ul Type}{\f4 \tab }{\f4\ul File Type}{\f4 \tab }{\f4\ul Code}{\f4 \tab }{\f4\ul Description\par }{\f4 $04\tab \tab TXT\tab ASCII text file\par $06\tab \tab BIN\tab General-purpose binary file\par $0F\tab \tab DIR\tab Folder (directory)\par $B0\tab $0005\tab SRC\tab ORCA/Pascal source code\par $B0\tab $0006\tab SRC\tab Script (exec) file source code\par $B0\tab $0015\tab SRC\tab Rez source code\par $B1\tab \tab OBJ\tab Object file (compiler output, linker input)\par $B2\tab \tab LIB\tab Object code library\par $B3\tab \tab S16\tab GS/OS application\par $B5\tab \tab EXE\tab Shell application\par $B8\tab \tab NDA\tab New Desk Accessory\par $BA\tab \tab TOL\tab Tool file\par $C0\tab $0000\tab PNT\tab Paintworks packed picture\par $C0\tab $0001\tab PNT\tab Packed super high resolution screen\par $C0\tab $0002\tab PNT\tab Apple preferred format image\par $C1\tab $0000\tab PIC\tab Super high resolution screen dump\par $C1\tab $0001\tab PIC\tab QuickDraw II Pic file\par $C8\tab $0000\tab FON\tab Standard font\par }\pard \qj\fi-3240\li3600\keepn\widctlpar\tx1440\tx2520\adjustright {\f4 $D8\tab $0002\tab SND\tab ASIF instrument\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table A-2:  Some Common File Types\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CloseGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CloseGS\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseGS\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    closeOSDCB = record\par       pcount: integer;\par       refNum: integer;\par       end;\par \par procedure CloseGS (var parms: closeOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $27\tab drvrIOError}{\f4 \tab I/O error\par \tab }{\f6\fs20 $2B\tab drvrWrtProt}{\f4 \tab Device is write protected\par \tab }{\f6\fs20 $2E\tab drvrDiskSwitch}{\f4 \tab The disk has been switched\par \tab }{\f6\fs20 $43\tab invalidRefNum}{\f4 \tab Invalid reference number\par \tab }{\f6\fs20 $48\tab volumeFull}{\f4 \tab The volume is full\par \tab }{\f6\fs20 $5A\tab damagedBitMap}{\f4 \tab Block number too large\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This call closes an open file.  Any information GS/OS has buffered in memory will be written to the disk in the process.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 pcount}{\f4 \tab Must be 1.\par \par }{\f6\fs20 refNum}{\f4 \tab This is the reference number (returned by }{\f6\fs20 OpenGS}{\f4 ) for the file to close.  A }{\f6\fs20 refNum}{\f4  of 0 tells GS/OS to close all open files.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CreateGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CreateGS\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CreateGS\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    createOSDCB = record\par        pcount:        integer;\par        pathName:      gsosInStringPtr;\par        access:        integer;\par        fileType:      integer;\par        auxType:       longint;\par        storageType:   integer;\par        dataEOF:       longint;\par        resourceEOF:   longint;\par        end;\par \par procedure CreateGS (var parms: createOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $10\tab devNotFound}{\f4 \tab Device not found\par \tab }{\f6\fs20 $27\tab drvrIOError}{\f4 \tab I/O error\par \tab }{\f6\fs20 $2B\tab drvrWrtProt}{\f4 \tab Device is write protected\par \tab }{\f6\fs20 $2F\tab drvrOffLine}{\f4 \tab Device offline or no media present\par \tab }{\f6\fs20 $40\tab badPathSyntax}{\f4 \tab Invalid path name syntax\par \tab }{\f6\fs20 $44\tab pathNotFound}{\f4 \tab Subdirectory does not exist\par \tab }{\f6\fs20 $45\tab volNotFound}{\f4 \tab Volume not found\par \tab }{\f6\fs20 $46\tab fileNotFound}{\f4 \tab File not found\par \tab }{\f6\fs20 $47\tab dupPathname}{\f4 \tab Create or rename attempted with a name that already exists\par \tab }{\f6\fs20 $48\tab volumeFull}{\f4 \tab The volume is full\par \tab }{\f6\fs20 $49\tab volDirFull}{\f4 \tab The volume directory is full\par \tab }{\f6\fs20 $4B\tab badStoreType}{\f4 \tab Unsupported or incorrect storage type\par \tab }{\f6\fs20 $52\tab unknownVol}{\f4 \tab Unknown volume type\par \tab }{\f6\fs20 $58\tab notBlockDev}{\f4 \tab Not a block device\par \tab }{\f6\fs20 $5A\tab damagedBitMap}{\f4 \tab Block number too large\par \tab }{\f6\fs20 $70\tab resExistsErr}{\f4 \tab Cannot expand file; resource already exists\par \tab }{\f6\fs20 $71\tab resAddErr}{\f4 \tab Cannot add a resource fork to this kind of file\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Creates a new file.  For the purpose of this call, a directory is also a file; it's just a file with a file type of $0F.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 pcount}{\f4 \tab Any value from 1 to 7.  This tells how many of the following parameters to use.  In most cases, you should use a value of 5.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 pathName}{\f4 \tab Pointer to a GS/OS input string of type }{\f6\fs20 gsosInString}{\f4 .  This parameter is the name of the file to create.  See "Path Names" at the start of this section for details about the names.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 access}{\f4 \tab This flag word determines how the file can be accessed.  These are the bits you can set or clear from shells and the Finder to lock and unlock files.  This parameter is normally set to $C3.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ProDOS}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FST}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \tab While all of these bits are available with the ProDOS FST, some of the bits will be unavailable with other FSTs.\par \par }\pard \qj\fi-1080\li3240\widctlpar\adjustright {\f4 bits 15-8\tab Reserved; set to 0.\par bit 7\tab Set this bit if the file can be deleted.\par bit 6\tab Set this bit if the file can be renamed.\par bit 5\tab Set this bit if the file needs to be backed up.  (GS/OS sets this bit anytime the file is changed.)\par bits 4-3\tab Reserved; set to 0.\par bit 2\tab Set this bit if the file should be invisible.  Invisible files normally can't be seen with shells or the Finder unless you specifically ask to see them.\par bit 1\tab Set this bit if the file can be written to.\par bit 0\tab Set this bit if the file can be read from.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 file type}}}{\v\f6\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 fileType}{\f4 \tab This is the file type for the file.  See "File Types" at the start of this section for some common file types.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 auxiliary file type}}}{\v\f6\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 auxType}{\f4 \tab This is the auxiliary file type for the file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 storageType}{\f4 \tab This entry determines what sort of file you are creating.\par \par }\pard \qj\fi-720\li2880\widctlpar\adjustright {\f4 0-3\tab Creates a normal data file with a data fork.  Some of these values were used for special purposes in older versions of the operating system; they are all converted to 1 in GS/OS, so that's what you would normally use.\par \par }\pard \qj\fi-720\li2880\keepn\widctlpar\adjustright {\pard\plain \qj\fi-720\li2880\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 extended file}}}{\pard\plain \qj\fi-720\li2880\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 data fork}}}{\pard\plain \qj\fi-720\li2880\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource fork}}}{\v\f4 \par }\pard \qj\fi-720\li2880\widctlpar\adjustright {\f4 5\tab Creates a file with both a data fork and a resource fork.  These files are also called extended files.\par \par 13\tab Create a directory.  If you use this parameter, make sure the file type is $0F.\par \par $8005\tab Adds a resource fork to an existing file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 dataEOF}{\f4 \tab This value is used to allocate a specific amount of disk space for the data fork of the file.  As a general rule, don't use it.  See }{\i\f4 Apple IIGS GS/OS Reference}{\f4  for details.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\tx9800\adjustright {\f6\fs20 resourceEOF}{\f4 \tab This value is used to allocate a specific amount of disk space for the resource fork of the file.  As a general rule, don't use it.  See }{\i\f4 Apple IIGS GS/OS Reference}{\f4  for details.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DestroyGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DestroyGS\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DestroyGS\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    destroyOSDCB = record\par        pcount:   integer;\par        pathName: gsosInStringPtr;\par        end;\par \par procedure DestroyGS (var parms: destroyOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $10\tab devNotFound}{\f4 \tab Device not found\par \tab }{\f6\fs20 $27\tab drvrIOError}{\f4 \tab I/O error\par \tab }{\f6\fs20 $2B\tab drvrWrtProt}{\f4 \tab Device is write protected\par \tab }{\f6\fs20 $40\tab badPathSyntax}{\f4 \tab Invalid path name syntax\par \tab }{\f6\fs20 $44\tab pathNotFound}{\f4 \tab Subdirectory does not exist\par \tab }{\f6\fs20 $45\tab volNotFound}{\f4 \tab Volume not found\par \tab }{\f6\fs20 $46\tab fileNotFound}{\f4 \tab File not found\par \tab }{\f6\fs20 $4B\tab badStoreType}{\f4 \tab Unsupported or incorrect storage type\par \tab }{\f6\fs20 $4E\tab invalidAccess}{\f4 \tab Access not allowed\par \tab }{\f6\fs20 $50\tab fileBusy}{\f4 \tab File is already open\par \tab }{\f6\fs20 $52\tab unknownVol}{\f4 \tab Unknown volume type\par \tab }{\f6\fs20 $58\tab notBlockDev}{\f4 \tab Not a block device\par \tab }{\f6\fs20 $5A\tab damagedBitMap}{\f4 \tab Block number too large\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This command deletes a file.  If the file is an extended file, both the resource fork and the data fork are deleted.\par It is possible to delete directories with this command, but only if all of the files in the directory have already been deleted.\par This command will fail if the disk is write protected or if the delete access bit for the file is not enabled.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 pcount}{\f4 \tab Must be 1.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 pathName}{\f4 \tab Pointer to a GS/OS input string of type }{\f6\fs20 gsosInString}{\f4 .  This parameter is the name of the file to create.  See "Path Names" at the start of this section for details about the names.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 OpenGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 OpenGS\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenGS\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    openOSDCB = record\par        pcount:          integer;\par        refNum:          integer;\par        pathName:        gsosInStringPtr;\par        requestAccess:   integer;\par        resourceNumber:  integer;\par        access:          integer;\par        fileType:        integer;\par        auxType:         longint;\par        storageType:     integer;\par        createDateTime:  timeField;\par        modDateTime:     timeField;\par        optionList:      optionListPtr;\par        dataEOF:         longint;\par        blocksUsed:      longint;\par        resourceEOF:     longint;\par        resourceBlocks:  longint;\par        end;\par \par procedure OpenGS (var parms: openOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $27\tab drvrIOError}{\f4 \tab I/O error\par \tab }{\f6\fs20 $28\tab drvrNoDevice}{\f4 \tab No device connected\par \tab }{\f6\fs20 $2E\tab drvrDiskSwitch}{\f4 \tab The disk has been switched\par \tab }{\f6\fs20 $40\tab badPathSyntax}{\f4 \tab Invalid path name syntax\par \tab }{\f6\fs20 $44\tab pathNotFound}{\f4 \tab Subdirectory does not exist\par \tab }{\f6\fs20 $45\tab volNotFound}{\f4 \tab Volume not found\par \tab }{\f6\fs20 $46\tab fileNotFound}{\f4 \tab File not found\par \tab }{\f6\fs20 $4A\tab badFileFormat}{\f4 \tab Version error (incompatible file type)\par \tab }{\f6\fs20 $4E\tab invalidAccess}{\f4 \tab Access not allowed\par \tab }{\f6\fs20 $4F\tab buffTooSmall}{\f4 \tab Buffer too small\par \tab }{\f6\fs20 $50\tab fileBusy}{\f4 \tab File is already open\par \tab }{\f6\fs20 $52\tab unknownVol}{\f4 \tab Unknown volume type\par \tab }{\f6\fs20 $58\tab notBlockDev}{\f4 \tab Not a block device\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This command opens a file.  The open command returns a file reference number (}{\f6\fs20 refNum}{\f4 ) which is used with many of the other GS/OS commands.  You must open a file using this command and get a valid }{\f6\fs20 refNum}{\f4  before using any of the commands that require a }{\f6\fs20 refNum}{\f4  instead of a path name.  In general, that's the commands that manipulate the file itself, like }{\f6\fs20 ReadGS}{\f4  and }{\f6\fs20 WriteGS}{\f4 .\par In the process of opening the file, }{\f6\fs20 OpenGS}{\f4  can tell you a great deal about the file itself.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 pcount}{\f4 \tab Any value from 2 to 15.  This tells how many of the following parameters to use.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 refNum}{\f4 \tab This value is returned; it is set to the reference number to use with subsequent GS/OS calls.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 pathName}{\f4 \tab Pointer to a GS/OS input string of type }{\f6\fs20 gsosInString}{\f4 .  This parameter is the name of the file to open.  See "Path Names" at the start of this section for details about the names.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 requestAccess}{\f4 \tab This value must be set to 1, 2 or 3 before the call.  A value of 1 opens the file with read only access.  A value of 2 opens the file with write only access.  A value of 3 opens the file for both reading and writing.  If }{\f6\fs20 pcount}{\f4  is 2, GS/OS opens the file for both input and output.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 resourceNumber}{\f4 \tab If the file is an extended file and this parameter is set to 1, GS/OS opens the resource fork instead of the data fork.  If the file is not an extended file or if this value is set to 0, the data fork is opened.\par \par \tab Resource forks should only be manipulated with Resource Manager calls, so this parameter should always be set to 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 access}{\f4 \tab This value is returned; it is the current setting for the access bits.  See }{\f6\fs20 CreateGS}{\f4  for a description of these bits.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 file type}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 fileType}{\f4 \tab This value is returned; it is the file type for the file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 auxiliary file type}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 auxType}{\f4 \tab This value is returned; it is the auxiliary file type for the file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 data fork}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource fork}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 storageType}{\f4 \tab This value is returned; it is the storage type for the file.  For a standard file (a file with just a data fork) this will be 1; for an extended file (a file with a resource fork, whether or not the data fork is empty) this will be 5; for a directory, this will be 13.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 creation time}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 createDateTime}{\f4 \tab This value is returned; it is the creation date and time for the file.  See }{\i\f4 Apple IIGS GS/OS Reference}{\f4  for details.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 modification time}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 modDateTime}{\f4 \tab This value is returned; it is the date and time when the file was last modified.  See }{\i\f4 Apple IIGS GS/OS Reference}{\f4  for details.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FST}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 optionList}{\f4 \tab You can pass a pointer to a GS/OS output string buffer or nil for this parameter.  If you pass the address of a GS/OS output string, }{\f6\fs20 OpenGS}{\f4  returns some FST specific information in the buffer.  See }{\i\f4 Apple IIGS GS/OS Reference}{\f4  for details.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EOF}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 data fork}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 dataEOF}{\f4 \tab This value is returned; it is the number of bytes of information stored in the data fork.  GS/OS can do some rudimentary file compression (it doesn't actually store blocks of zeros on the disk), so this value should not be used to see how much space is used on the disk.  Instead, this is the amount of memory you need to reserve to load the entire data fork into memory.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 disk space}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 data fork}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 blocksUsed}{\f4 \tab This value is returned; it is the number of blocks of disk space needed to store the data fork of the file.  This includes the data fork and blocks used to keep track of the file.  On most devices used on the Apple IIGS, one block is 512 bytes.\par \par \tab Add this value to }{\f6\fs20 resourceBlocks}{\f4  to get the total number of disk blocks used by the file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EOF}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource fork}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 resourceEOF}{\f4 \tab This value is returned; it is the number of bytes of information stored in the resource fork.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 disk space}}}{\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource fork}}}{\v\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 resourceBlocks}{\f4 \tab This value is returned; it is the number of disk blocks needed to store the resource fork of the file.\par \par \tab Add this value to }{\f6\fs20 blocksUsed}{\f4  to get the total number of disk blocks used by the file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ReadGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ReadGS\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReadGS\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    readWriteOSDCB = record\par        pcount:         integer;\par        refNum:         integer;\par        dataBuffer:     ptr;\par        requestCount:   longint;\par        transferCount:  longint;\par        cachePriority:  integer;\par        end;\par \par procedure ReadGS (var parms: readWriteOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $27\tab drvrIOError}{\f4 \tab I/O error\par \tab }{\f6\fs20 $2E\tab drvrDiskSwitch}{\f4 \tab The disk has been switched\par \tab }{\f6\fs20 $43\tab invalidRefNum}{\f4 \tab Invalid reference number\par \tab }{\f6\fs20 $4C\tab eofEncountered}{\f4 \tab End of file encountered\par \tab }{\f6\fs20 $4E\tab invalidAccess}{\f4 \tab Access not allowed\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ReadGS}{\f4  reads bytes from a file opened by }{\f6\fs20 OpenGS}{\f4 .\par There are a number of options and strange ways you can use this command that are not covered here; see }{\i\f4 Apple IIGS GS/OS Reference Manual}{\f4  for details.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 pcount}{\f4 \tab This can be 4 or 5.\par \par }{\f6\fs20 refNum}{\f4 \tab Set this value to the }{\f6\fs20 refNum}{\f4  returned by the }{\f6\fs20 OpenGS}{\f4  call.\par \par }{\f6\fs20 dataBuffer}{\f4 \tab The bytes read from disk are placed in memory starting at this address.\par \par }{\f6\fs20 requestCount}{\f4 \tab Set this parameter to the number of bytes you wish to read.\par \par \tab It is possible to read the file in pieces.  Opening the file sets things up so you start reading from the start of the file.  If you only read part of the file, the next read command will pick up where the previous read command left off.  There are also GS/OS commands (not covered in this appendix) that will let you start reading from a specific spot in the file.\par \par }{\f6\fs20 transferCount}{\f4 \tab This value is returned; it is the number of bytes actually read.  It can be smaller than }{\f6\fs20 requestCount}{\f4  if the end of file was reached, if a disk error occurs, or when some GS/OS options not discussed here are in effect.  If you are reading disk files as described in this course, though, and being careful not to ask for more bytes than are in the file, }{\f6\fs20 transferCount}{\f4  will always equal }{\f6\fs20 requestCount}{\f4  unless an error occurs.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1800\li2160\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 cache}}}{\v\f6\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 cachePriority}{\f4 \tab If you will be reading a file several times, you can use this parameter to speed up the process.  If this value is 1, it instructs GS/OS to try to cache blocks from the file.  Assuming there is enough memory available in the GS/OS cache buffer, the blocks from the file will still be in memory when you read them the next time.  Use a value of 0 to tell GS/OS not to cache the file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 WriteGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 WriteGS\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 WriteGS\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    readWriteOSDCB = record\par        pcount:         integer;\par        refNum:         integer;\par        dataBuffer:     ptr;\par        requestCount:   longint;\par        transferCount:  longint;\par        cachePriority:  integer;\par        end;\par \par procedure WriteGS (var parms: readWriteOSDCB);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $27\tab drvrIOError}{\f4 \tab I/O error\par \tab }{\f6\fs20 $28\tab drvrNoDevice}{\f4 \tab No device connected\par \tab }{\f6\fs20 $2E\tab drvrDiskSwitch}{\f4 \tab The disk has been switched\par \tab }{\f6\fs20 $40\tab badPathSyntax}{\f4 \tab Invalid path name syntax\par \tab }{\f6\fs20 $43\tab invalidRefNum}{\f4 \tab Invalid reference number\par \tab }{\f6\fs20 $48\tab volumeFull}{\f4 \tab The volume is full\par \tab }{\f6\fs20 $4E\tab invalidAccess}{\f4 \tab Access not allowed\par \tab }{\f6\fs20 $5A\tab damagedBitMap}{\f4 \tab Block number too large\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 WriteGS}{\f4  writes to a file, transferring bytes from memory to the disk file.  The parameters \endash  and in fact, the type of the record passed \endash  are identical to those used for the }{\f6\fs20 ReadGS}{\f4  call; see }{\f6\fs20 ReadGS}{\f4  for a complete description.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GS/OS Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GS/OS Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \li180\widctlpar\adjustright {\f6\fs20 type\par    (* GS/OS class 1 input string *)\par    gsosInString = record\par        size:  integer;\par    (* Change the array size as needed for your application *)\par        theString:  packed array [1..254] of char;\par        end;\par    gsosInStringPtr = ^gsosInString;\par \par    (* GS/OS class 1 output string *)\par    gsosOutString = record\par        maxSize:    integer;\par        theString:  gsosInString;\par        end;\par    gsosOutStringPtr = ^gsosOutString;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 LineEdit Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 LineEdit Tool Set\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LineEdit Tool Set}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named LineEdit.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LECopy}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LECopy\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LECopy\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LECopy (LEHandle: leRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab QuickDraw II errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Copies the selected text from the given line edit record into the line edit scrap.  If no text is selected, the line edit scrap is emptied.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LECut}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LECut\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LECut\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LECut (LEHandle: leRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab QuickDraw II errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Copies the selected text from the given line edit record into the line edit scrap, then deletes the characters from the line edit record and redraws the contents.  If no text is selected, the line edit scrap is emptied, but the text in the control is not changed.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LEDelete}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LEDelete\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEDelete\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LEDelete (LEHandle: leRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab QuickDraw II errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Removes any selected characters from the given line edit record.  If no text is selected, the call does nothing.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LEFromScrap}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LEFromScrap\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEFromScrap\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LEFromScrap;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1404\tab leScrapErr}{\f4 \tab The desk scrap is too big to copy\par \tab Scrap Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Copies the text scrap from the Scrap Manager into the line edit scrap buffer.\par The text edit scrap is not changed if the text scrap in the Scrap Manager's scrap is longer than 255 characters.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LEPaste}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LEPaste\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEPaste\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LEPaste (LEHandle: leRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab QuickDraw II errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If any text is selected, it is deleted.  The text in the line edit scrap is then inserted at the insertion point.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LEToScrap}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LEToScrap\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LEToScrap\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 line edit control}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LEToScrap;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Scrap Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The text in the line edit scrap is copied into the Scrap Manager's scrap.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 List Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 List Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 List Manager}}}{\f4 {\*\bkmkstart bk102}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named ListMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawMember2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawMember2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawMember2\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawMember2 (itemnum: integer; theListCtl: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 After your application changes a list that is being displayed in a list control, you should call }{\f6\fs20 DrawMember2}{\f4 .  To draw a single list entry, pass the relative number of the entry (i.e., the first item in the list is 1, the next item is 2, and so on) for }{\f6\fs20 itemnum}{\f4 .  To redraw the entire list, pass 0 for }{\f6\fs20 itemnum}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NewList2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NewList2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewList2\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure NewList2 (drawRtn: procPtr; listStart: integer; listRef: longint;\par    listRefDesc, listSize: integer; theListCtl: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 NewList2}{\f4  changes the list in a given list control.  If there was already a list being displayed, the control forgets about the original list.  It is up to the application to dispose of the original list, if that is appropriate.\par For details about how to use resources for the list itself, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , page 35-7.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 drawRtn}{\f4 \tab This is the address of a subroutine that will draw the list.  This subroutine can be defined in Pascal, so long as the databank directive is used to reset the data bank register.  The procedure should be declared with three parameters:\par \par }\pard \qj\li2160\widctlpar\adjustright {\f6\fs20 procedure DrawListEntry (r: rect; entry: listEntry;\par    h: ctlRecHndl);\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par \tab The first parameter is a rectangle surrounding the area where the list element should be drawn.  }{\f6\fs20 entry}{\f4  is the list element to redraw; it can be declared as you see it, as a var parameter, or as a pointer to a list entry.  }{\f6\fs20 h}{\f4  is the control handle for the list control.\par \par \tab The draw routine should take the highlight and selection state for the list entry into account.\par \par \tab Pass nil to use the default list draw subroutine.  Pass -1 to use the drawing routine that is already in place.\par \par }{\f6\fs20 listStart}{\f4 \tab This is the number of the list element to display at the top of the list.  Pass 1 to display the first member of the list, 2 to place the second list item at the top, and so forth.\par \par }{\f6\fs20 listRef}{\f4 \tab A pointer, handle, or resource ID for the list to display.\par \par }{\f6\fs20 listRefDesc}{\f4 \tab Controls the type of parameter passed for }{\f6\fs20 listRef}{\f4 .  Pass 0 for a pointer, 1 for a handle, 2 for a resource ID, and -1 to leave the current list in place.\par \par }{\f6\fs20 listSize}{\f4 \tab Number of elements in the list.\par \par }{\f6\fs20 theListCtl}{\f4 \tab Control handle for the list control.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SortList2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SortList2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SortList2\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SortList2 (compareRtn: procPtr; theListCtl: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sorts the elements in a list.  Call }{\f6\fs20 DrawMember2}{\f4  after making this call to redraw the list.\par }{\f6\fs20 compareRtn}{\f4  is a pointer to a compare procedure.  Pass nil to use the default compare procedure, which sorts the list based on the leading string in each list element.  For details about how to write your own compare subroutine, see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 1}{\f4 , page 11-24.  For information about exactly how characters are compared, see }{\i\f4 Programmer's Reference to System 6.0}{\f4 .\par {\*\bkmkend bk102}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 list controls}{\rxe bk102}}}{\v\f4 \par }{\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Loader}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Loader\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Loader}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The loader is a tool documented in Apple IIGS GS/OS Reference; it is used to load programs.  Most of the tool calls in this tool can't be used effectively from a high level language, so ORCA/Pascal does not have an interface file for this tool.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LGetPathname2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LGetPathname2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LGetPathname2\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 function LGetPathname2 (userID, fileNum: integer): gsosInStringPtr;\par    tool ($11, $22);}{\f4 \par \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1101\tab }{\f4 Entry not found\par \tab }{\f6\fs20 $1103\tab }{\f4 Path name error\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 LGetPathname2}{\f4  returns a pointer to the full path name for an executing program.  The path name is an internal name in a loader table, so it should not be modified in any way.\par }{\f6\fs20 userID}{\f4  is the user ID for the program.\par }{\f6\fs20 fileNum}{\f4  is the load file number for the program.  This will always be 1 for an application running from a single executable file.\par There is no interface file for the loader, so you must declare this call in your program.  To declare the call, include the definition exactly as you see it, with the tool directive, in your program.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Memory Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Memory Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Memory Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named MemoryMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DisposeHandle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DisposeHandle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DisposeHandle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DisposeHandle (theHandle: handle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0206\tab handleErr}{\f4 \tab Invalid handle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Deallocates the memory associated with the handle, allowing the memory to be reused.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FindHandle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FindHandle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FindHandle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FindHandle (memLocation: ptr): handle;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 FindHandle}{\f4  returns the handle for the block of memory that contains the byte pointed to by }{\f6\fs20 memLocation}{\f4 .  }{\f6\fs20 FindHandle}{\f4  returns nil if the byte isn't in an allocated memory handle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FreeMem}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FreeMem\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FreeMem\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FreeMem: longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the total amount of free memory, in bytes.  This does not include memory that could be made free by purging.\par The fact that this call says a certain number of bytes are free does not indicate that all of the memory can be allocated with a single }{\f6\fs20 NewHandle}{\f4  call, since the free memory is not all at one location.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HLock}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HLock\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HLock\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure HLock (theHandle: handle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0206\tab handleErr}{\f4 \tab Invalid handle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Locks the handle.  Once locked, the memory pointed to by the handle cannot be moved or purged.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HUnlock}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HUnlock\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HUnlock\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure HUnLock (theHandle: handle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0206\tab handleErr}{\f4 \tab Invalid handle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Unlocks the handle.  If the handle is moveable, unlocking the handle allows it to be moved.  If the purge level for the handle is greater than zero, unlocking the handle allows the memory to be purged.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 MaxBlock}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MaxBlock\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MaxBlock\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function MaxBlock: longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the size, in bytes, of the largest block of free memory.  Purging or compacting memory could increase this value.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NewHandle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NewHandle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewHandle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function NewHandle (blockSize: longint; userID, memAttributes: integer;\par    memLocation: univ ptr): handle;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0201\tab memErr}{\f4 \tab Unable to allocate memory\par \tab }{\f6\fs20 $0204\tab lockErr}{\f4 \tab Illegal operation on a locked or immovable block\par \tab }{\f6\fs20 $0207\tab idErr}{\f4 \tab Invalid user ID\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Allocates a blocks of memory and returns a handle to that block of memory.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 blockSize}{\f4 \tab This is the amount of memory to set aside, in bytes.\par \par }{\f6\fs20 userID}{\f4 \tab This is the user ID for the memory.  In most cases, this is the program's memory ID, as returned by Pascal's }{\f6\fs20 UserID}{\f4  function.\par \par }{\f6\fs20 memAttributes}{\f4 \tab This flags word controls the way the memory is allocated \endash  where it comes from, whether it can be moved, and whether it can be purged.\par \par }\pard \qj\fi-2160\li4680\widctlpar\tx3240\adjustright {\f4 15\tab }{\f6\fs20 attrLocked}{\f4 \tab If this bit is set, the handle will be initially locked; if this bit is clear, the handle will be unlocked.\par \par 14\tab }{\f6\fs20 attrFixed}{\f4 \tab This bit is set for fixed memory, and clear for moveable memory.  Both bits 14 and 15 must be clear before the Memory Manager will actually move the memory.\par \par 13-10\tab \tab Reserved; set to 0.\par \par 9-8\tab }{\f6\fs20 attrPurge}{\f4 \tab These two bits define the initial purge level, which can be 0 (00), 1 (01), 2 (10) or 3 (11).\par \par 7-5\tab \tab Reserved; set to 0.\par \par 4\tab }{\f6\fs20 attrNoCross}{\f4 \tab If this bit is set, the Memory Manager will make sure that all of the memory is in a single bank of memory.\par \par 3\tab }{\f6\fs20 attrNoSpec}{\f4 \tab If this bit is set, the Memory Manager won't give you any special memory.  Special memory includes most of the memory in banks $00, $01, $E0 and $E1.\par \par 2\tab }{\f6\fs20 attrPage}{\f4 \tab If this bit is set, the Memory Manager will make sure the chunk of memory it returns starts on a page boundary.\par \par 1\tab }{\f6\fs20 attrAddr}{\f4 \tab This flag forces the memory to be allocated at a particular location; specifically, wherever the last parameter, }{\f6\fs20 location}{\f4 , points.\par \par 0\tab }{\f6\fs20 attrBank}{\f4 \tab If this flag is set, the memory will come from a specific bank, but it can come from anywhere in the bank.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }{\f6\fs20 memLocation}{\f4 \tab If the }{\f6\fs20 attrAddr}{\f4  bit is set, this location is the address of the first byte of memory to be allocated; the Memory Manager will return an out of memory error if the memory is not available.  If the }{\f6\fs20 attrBank}{\f4  bit is set, the memory will be allocated from the same bank as this location, but can be allocated from any position within that bank.\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 RealFreeMem}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RealFreeMem\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 RealFreeMem\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function RealFreeMem: longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the total amount of memory that is currently free, plus the amount of memory that could be freed by purging.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetHandleID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetHandleID\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetHandleID\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function SetHandleID (newID: integer; theHandle: handle): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetHandleID}{\f4  changes the user ID for the specified handle to }{\f6\fs20 newID}{\f4 , returning the old user ID in the process.  Pass 0 for }{\f6\fs20 newID}{\f4  to read the user ID for a handle without changing the handle's current user ID.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetPurge}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetPurge\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPurge\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetPurge (purgeLevel: integer; theHandle: handle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0206\tab handleErr}{\f4 \tab Invalid handle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Set the purge level for the given handle.  The purge level should be a value from 0 to 3.  Handles with a purge level of 0 cannot be purged.  Handles with any other purge level may be deallocated if the handle is unlocked and the Memory Manager can't allocate enough memory for a }{\f6\fs20 NewHandle}{\f4  call without purging.\par If memory is purged, handles with a purge level of 3 are purged first, then handles with a purge level of 2, and finally those with a purge level of 1.\par A purge level of 3 is reserved for use by the System Loader.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Memory Manager Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Memory Manager Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type\par }{\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 ptr}}}{\v\f6\fs20 \par }{\f6\fs20    ptr        = ^byte;\par }{\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 handle}}}{\v\f6\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs20    handle     = ^ptr;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Menu Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Menu Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Menu Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named MenuMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CheckMItem}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CheckMItem\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:checked}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CheckMItem\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure CheckMItem (checkedFlag: boolean; itemNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If }{\f6\fs20 checkedFlag}{\f4  is true, a check mark is placed beside the menu item specified by }{\f6\fs20 itemNum}{\f4 .  If }{\f6\fs20 checkedFlag}{\f4  is false, any character to the left of menu item }{\f6\fs20 itemNum}{\f4  is erased.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DisableMItem}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DisableMItem\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:disabled}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DisableMItem\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DisableMItem (itemNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Menu item }{\f6\fs20 itemNum}{\f4  is dimmed.  The item can't be selected from the menu until it has been enabled by a call to }{\f6\fs20 EnableMItem}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawMenuBar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawMenuBar\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawMenuBar\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawMenuBar;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Draws the current menu bar, along with the titles for any menus in the menu bar.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EnableMItem}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EnableMItem\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EnableMItem\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:disabled}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure EnableMItem (itemNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Menu item }{\f6\fs20 itemNum}{\f4  is enabled.  The menu item is drawn normally the next time the menu is pulled down, and the menu item can be selected.\par See also }{\f6\fs20 DisableMItem}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FixMenuBar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FixMenuBar\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FixMenuBar\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FixMenuBar: integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Computes the sizes of the menu bar and the menus in the menu bar.  The height of the menu bar depends on the fonts used in the titles of the various menus in the menu bar.  The widths of each menu title are also calculated.  Finally, }{\f6\fs20 CalcMenuSize}{\f4  is called for each of the menus in the menu bar.\par If you don't make this call, it is quite possible that your program will crash the first time you use the menu bar.\par }{\f6\fs20 FixMenuBar}{\f4  returns the height of the menu bar in pixels.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetMenuFlag}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetMenuFlag\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetMenuFlag\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetMenuFlag (menuNum: integer): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the menu flags for menu }{\f6\fs20 menuNum}{\f4 .  See }{\f6\fs20 SetMenuFlag}{\f4  for a description of the menu flags returned by this call.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HiliteMenu}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HiliteMenu\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HiliteMenu\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure HiliteMenu (hiliteFlag: boolean; menuNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Highlights or unhighlights menu }{\f6\fs20 menuNum}{\f4 .  Set }{\f6\fs20 hiliteFlag}{\f4  to true to highlight the menu, or to false to unhighlight the menu.\par When a menu item is selected by the user, either though a keyboard command identified by }{\f6\fs20 MenuKey}{\f4  or through a mouse down handled by }{\f6\fs20 MenuSelect}{\f4 , the Menu Manager highlights the menu containing the selected command.  According to the Apple human interface guidelines, the menu should stay highlighted until your program finishes executing the command.  Once your program finishes executing the command, you should call }{\f6\fs20 HiliteMenu}{\f4  with the appropriate menu number and with }{\f6\fs20 hiliteFlag}{\f4  set to false.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InsertMenu}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InsertMenu\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InsertMenu\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InsertMenu (addMenu: menuHandle; insertAfter: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Inserts the menu }{\f6\fs20 addMenu}{\f4  into the current menu bar.  If }{\f6\fs20 insertAfter}{\f4  is 0, the menu is placed to the left of all of the menus currently in the menu bar.  If }{\f6\fs20 insertAfter}{\f4  is not zero, the new menu is inserted to the right of the menu whose ID is specified by }{\f6\fs20 insertAfter}{\f4 .\par After making this call, you need to call }{\f6\fs20 FixMenuBar}{\f4  and }{\f6\fs20 DrawMenuBar}{\f4  before you enter your event loop.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 MenuKey}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MenuKey\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MenuKey\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 keyboard equivalent}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure MenuKey (var theTask: eventRecord; theMenuBar: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you find a key down event in your event loop and the command key is being held down, make a call to }{\f6\fs20 MenuKey}{\f4  to see if the keypress is a menu command key equivalent.  When you call }{\f6\fs20 MenuKey}{\f4 , you pass an event record; this is generally the same event record you used when you called }{\f6\fs20 GetNextEvent}{\f4 .  You also pass the handle of the menu bar you want }{\f6\fs20 MenuKey}{\f4  to check; in general, you pass nil to indicate the system menu bar.\par If the keystroke is a menu command key equivalent, the menu bar containing the correct menu item becomes the current menu bar, the menu containing the menu item selected is highlighted, and the task record is modified.  The }{\f6\fs20 taskData}{\f4  field of the event record is set so the least significant word is menu item ID, while the most significant word holds the menu ID for the menu containing the selected menu item.\par If the keystroke is not a menu command key equivalent, the least significant word of the }{\f6\fs20 taskData}{\f4  field is set to 0.\par If there is more than one menu item with the same keyboard equivalent, }{\f6\fs20 MenuKey}{\f4  returns the menu item for the first one it finds.  Of course, you shouldn't have two menu items with the same keyboard equivalent.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 MenuSelect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MenuSelect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MenuSelect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus\:events}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure MenuSelect (var theTask: eventRecord; theMenuBar: ctlRecHndl);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When you detect a mouse down event in the menu bar, you should call }{\f6\fs20 MenuSelect}{\f4  to handle the event.  (Mouse down events in the menu bar are generally detected by a call to }{\f6\fs20 FindWindow}{\f4 .)  }{\f6\fs20 MenuSelect}{\f4  tracks the mouse's movements, pulling down menus and highlighting menus and menu items as appropriate.  When the mouse is released, }{\f6\fs20 MenuSelect}{\f4  figures out if a menu command has been selected.  If so, the menu item number for the selected menu command is returned in the least significant word of the }{\f6\fs20 taskData}{\f4  field of }{\f6\fs20 theTask}{\f4 , and the menu number for the menu that contains the menu item is returned in the most significant word of the }{\f6\fs20 taskData}{\f4  field.  If no command was selected, the least significant word of the }{\f6\fs20 taskData}{\f4  field is set to zero.\par When you call }{\f6\fs20 MenuSelect}{\f4 , you pass an event record and a menu bar handle.  To track a mouse down in the system menu bar, pass nil for }{\f6\fs20 theMenuBar}{\f4 .  The event record you pass should generally be the same one returned by }{\f6\fs20 GetNextEvent}{\f4 .  }{\f6\fs20 MenuSelect}{\f4  uses some of the fields in the record as inputs, and returns information to you in the }{\f6\fs20 taskData}{\f4  field.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NewMenu}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NewMenu\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenu\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function NewMenu (newMenuString: textPtr): menuHandle;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 You pass a string defining a menu and the items in a menu, and }{\f6\fs20 NewMenu}{\f4  returns a handle to a menu that you can then use as an input to }{\f6\fs20 InsertMenu}{\f4 .\par The menu string consists of a series of lines, separated from one another by null characters (chr(0)) or return characters (chr(13)).  The first line defines the menu title.  This is followed by one or more lines defining menu items.  The last line is used solely to mark the end of the menu string.\par Each line starts with one or two control characters.  The initial menu line starts with two characters, generally }{\f6\fs20 '>>'}{\f4 .  While both of these characters must be the same, you can use any character you like.  Menu items also start with two characters, generally }{\f6\fs20 '--'}{\f4 .  Once again, you can pick any character you like, so long as you use the same two characters before each menu item.  The last line consists of a single character, generally }{\f6\fs20 '.'}{\f4 .  This character cannot be the same character used to start the menu title line or the menu item lines.  This single character is the only character on the last line of the menu string.\par For menu items and menus, the initial two characters are followed by the characters making up the title of the menu or menu item.  All characters up to the end of the line or the first }{\f6\fs20 '\\'}{\f4  character become a part of the menu title or item string.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 apple menu}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 A menu name of }{\f6\fs20 '@'}{\f4  has a special meaning.  When this character is the only character in a menu title, the Menu Manager draws a rainbow apple instead of printing the @ character.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items\:separators}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 A menu item with a title of }{\f6\fs20 '-'}{\f4  has special meaning.  Instead of writing the \endash  character as the name of the menu item, the Menu Manager draws a line across the entire menu.  Lines of this type are generally disabled, and are used as separators to visually divide the commands in a complex menu into logical groups.\par The menu title or menu item title can be followed by a backslash character (\\), which is followed by one or more control codes.  The allowed control codes are shown in Table A-3.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu string}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu control characters}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Menu string must remain in a fixed memory location, and must not be changed by the application after the call to }{\f6\fs20 NewMenu}{\f4 .\par \par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f4\ul Character}{\f4 \tab }{\f4\ul Description}{\f4 \par }\pard \qj\fi-1440\li2160\widctlpar\adjustright {\f4 *\tab The two characters that follow this one are used as keyboard equivalents.  The first of the characters is shown in the menu when you pull the menu down.  Most of the time, the first letter will be an uppercase letter or an unshifted keyboard key, while the second letter will be the lowercase equivalent of the uppercase letter or the shifted equivalent of the unshifted key.\par B\tab Use bold text for the menu item.\par C\tab Mark the menu item with the character that follows this one.  This is generally a check mark, which is chr(18).\par D\tab Dim (disable) the menu item.\par H\tab This character is used before a two-byte sequence which defines the menu number or menu item number.  From Pascal, it's generally best to use N, instead.\par I\tab Use italicized text for the menu item.\par N\tab This character is followed by one or more decimal digits.  The resulting number is used as the menu number or menu item number, depending on whether you are defining a menu or a menu item.\par U\tab Underline the text for the menu item.\par V\tab Place a dividing line under the item.\par }\pard \qj\fi-1440\li2160\keepn\widctlpar\adjustright {\f4 X\tab Use color replace mode to avoid green-apple menu sickness.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table A-3:  Menu String Control Characters\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NewMenuBar2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NewMenuBar2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewMenuBar2\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetMenuBar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSysBar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function NewMenuBar2 (refDescriptor: integer; menuBarTRef: longint;\par    theWindow: grafPortPtr): menuBarHandle;}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 NewMenuBar2}{\f4  creates a menu bar in a single step using a menu template.\par }{\f6\fs20 refDescriptor}{\f4  defines the type of parameter that will be used for }{\f6\fs20 menuBarTRef}{\f4 .  The possible values for }{\f6\fs20 refDescriptor}{\f4  are:\par \par }\pard \qj\fi-2880\li3240\keepn\widctlpar\tx1260\adjustright {\f4\ul value}{\f4 \tab }{\f4\ul name}{\f4 \tab }{\f4\ul meaning}{\f4 \par 0\tab }{\f6\fs20 refIsPointer}{\f4 \tab }{\f6\fs20 menuBarTRef}{\f4  is a pointer to a menu bar template.  In this course, we always create the menu bar template using resources, so the format for the template is not covered.  See }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4  for complete information about menu templates.\par 1\tab }{\f6\fs20 refIsHandle}{\f4 \tab }{\f6\fs20 menuBarTRef}{\f4  is a handle to a menu bar template.\par }\pard \qj\fi-2880\li3240\widctlpar\tx1260\adjustright {\f4 2\tab }{\f6\fs20 refIsResource}{\f4 \tab }{\f6\fs20 menuBarTRef}{\f4  is the resource ID for an }{\f6\fs20 rMenuBar}{\f4  resource.  See Appendix B for a description of the }{\f6\fs20 rMenuBar}{\f4  resource.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }{\f6\fs20 theWindow}{\f4  is a pointer to the window where the menu bar will appear.  The menu bar will be lined up with the top left corner of the window, and will be as wide as the screen.  Pass nil for this parameter if you a creating a system menu bar.\par While this call can create a new system menu bar, it doesn't make the menu bar the current system menu bar.  To create a new system menu bar, follow this call with calls to }{\f6\fs20 SetSysBar}{\f4  and }{\f6\fs20 SetMenuBar}{\f4 , like this:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20    menuBarHand := NewMenuBar2(refIsResource, menuID, nil);\par    SetSysBar(menuBarHand);\par }\pard \fi360\widctlpar\adjustright {\f6\fs20    SetMenuBar(nil);\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetMenuBar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetMenuBar\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetMenuBar\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }{\f6\fs20 procedure SetMenuBar (theBarHandle: ctlRecHndl);}{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetMenuBar}{\f4  makes the menu bar whose handle is }{\f6\fs20 theBarHandle}{\f4  the current menu bar.  If you want to make the system menu bar the current menu bar, pass nil.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetMenuFlag}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetMenuFlag\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetMenuFlag\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetMenuFlag (newValue, menuNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the flags that control the state of the menu title.  Call }{\f6\fs20 DrawMenuBar}{\f4  after this call to redraw the menu bar in the new state.\par Table A-4 shows the flags you can set with }{\f6\fs20 SetMenuFlag}{\f4 , along with the names reserved for the flags.  To change a flag, start by calling }{\f6\fs20 GetMenuFlag}{\f4  to get the current flags.  For values that start with a zero, you should or the value with the value returned by }{\f6\fs20 GetMenuFlag}{\f4  and pass the result as the }{\f6\fs20 newValue}{\f4  parameter.  This sets the flag in the flags word.  Values that start with an F are anded with the original value, turning the flag off.\par The }{\f6\fs20 menuNum}{\f4  parameter is the menu ID number of the menu you want to change.\par \par }\pard \qj\fi-2880\li3240\keepn\widctlpar\tx2160\tx3240\adjustright {\f4\ul Name}{\f4 \tab }{\f4\ul Value}{\f4 \tab }{\f4\ul Description}{\f4 \par }{\f6\fs20 enableMenu}{\f4 \tab }{\f6\fs20 $FF7F}{\f4 \tab The menu will be selectable, and will not be dimmed.\par }{\f6\fs20 disableMenu}{\f4 \tab }{\f6\fs20 $0080}{\f4 \tab The menu and all items in the menu will be dimmed and cannot be selected.\par }{\f6\fs20 colorReplace}{\f4 \tab }{\f6\fs20 $FFDF}{\f4 \tab Draw the title and background in the normal highlighted state.\par }{\f6\fs20 xorTitleHilite}{\f4 \tab }{\f6\fs20 $0020}{\f4 \tab Highlight the title and background using XOR color replace.\par }{\f6\fs20 standardMenu}{\f4 \tab }{\f6\fs20 $FFEF}{\f4 \tab The menu is a standard menu.\par }{\f6\fs20 customMenu}{\f4 \tab }{\f6\fs20 $0010}{\f4 \tab The menu is a custom menu.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table A-4: Menu Flags\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetMItem}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetMItem\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetMItem\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items\:changing text}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetMItem (newItem: cStringPtr; itemNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Change the title of menu item }{\f6\fs20 itemNum}{\f4  to the title string }{\f6\fs20 newItem}{\f4 .  The title string must remain in a fixed location in memory.  Like a menu item string as passed to }{\f6\fs20 NewMenu}{\f4 , this menu string must start with two characters that are not a part of the menu item title, and the string must end in either a null character (chr(0)) or a return character (chr(13)).  Unlike the menu item string passed to }{\f6\fs20 NewMenu}{\f4 , the new name of the menu item is not followed by control characters.  All of the information normally set by control characters is copied from the existing menu item.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetMItemStyle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetMItemStyle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetMItemStyle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetMItemStyle (textStyle, itemNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the text style for a menu item.  The }{\f6\fs20 textStyle}{\f4  parameter is a flags word with the font styles layed out as follows:\par \par }\pard \qj\li720\keepn\widctlpar\tx1800\adjustright {\f4 bits 15-5\tab Reserved; set to 0.\par bit 4\tab Set for shadowed text.\par bit 3\tab Set for outlined text.\par bit 2\tab Set for underlined text.\par bit 1\tab Set for italicized text.\par }\pard \qj\li720\widctlpar\tx1800\adjustright {\f4 bit 0\tab Set for bold text.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetSysBar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetSysBar\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSysBar\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }{\f6\fs20 procedure SetSysBar (theBarHandle: ctlRecHndl);}{\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SetSysBar}{\f4  makes the menu bar whose handle is }{\f6\fs20 theBarHandle}{\f4  the current, system menu bar.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Menu Manager Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Menu Manager Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \widctlpar\adjustright {\f6\fs20 const\par    \{Inputs to SetMenuFlag routine\}\par    customMenu      =   $0010;      \{menu is a custom menu\}\par    xorTitleHilite  =   $0020;      \{menu title will be XORed to highlighted\}\par                                    \{  state                                \}\par    disableMenu     =   $0080;      \{menu will be dimmed and not selectable\}\par    enableMenu      =   $FF7F;      \{menu will not be dimmed; is selectable\}\par    colorReplace    =   $FFDF;      \{menu title and background will be\}\par                                    \{  redrawn and highlighted        \}\par    standardMenu    =   $FFEF;      \{menu considered a standard menu\}\par \par type\par    \{Null-terminated string\}\par    cString = packed array [1..256] of char;\par    cStringPtr = ^cString;\par \par    \{Menu strings.  The size of the array can be changed for long menus.\}\par    textBlock = packed array [1..300] of char;\par    textPtr = ^textBlock;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Miscellaneous Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Miscellaneous Tool Set\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named MscToolSet.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ReadAsciiTime}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ReadAsciiTime\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReadAsciiTime\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ReadASCIITime (bufferAddress: ptr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The current time is returned in the buffer, which should be at least 20 characters long.  The time is returned as a series of 20 characters with the most significant bit set.  There is no length word or trailing null character.\par In most cases, you will have }{\f6\fs20 ReadASCIITime}{\f4  stuff the characters into a string, then set a length byte (for a p-string) or a trailing null character (for a C-string) manually.  Anding all 20 characters with $7F will clear the most significant bit.  These steps, combined, create a true ASCII string.\par There are several time formats available.  The various time formats are selected from the control panel, so they aren't under the control of this call.  For details, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 1}{\f4 , page 14-16.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SysBeep}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SysBeep\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SysBeep\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SysBeep;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Beeps the speaker.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SysFailMgr}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SysFailMgr\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SysFailMgr\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SysFailMgr (errorCode: integer; failString: univ pStringPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Stops the computer cold, forcing a reboot.  The screen switches to a text display with a sliding apple.  The first parameter is printed as a four digit hexadecimal value; this error number follows the error message.  The second parameter is either nil, which displays a default message ("FATAL SYSTEM ERROR") or a pointer to a p-string; this string is displayed on the screen.  Because of the way the parameter is defined in the ORCA/Pascal interfaces, you can pass a pointer to a string, the address of a string constant, the address of a string variable, or the name of a string variable.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Note Synthesizer}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Note Synthesizer\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Note Synthesizer}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named Synthesizer.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 AllNotesOff}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AllNotesOff\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AllNotesOff\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure AllNotesOff;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Turns off all notes started using the Note Synthesizer.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 AllocGen}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AllocGen\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AllocGen\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function AllocGen (requestPriority: integer): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1921\tab nsNotAvail}{\f4 \tab No generators are available\par \tab }{\f6\fs20 $1923\tab nsNotInit}{\f4 \tab The Note Synthesizer has not been started\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 AllocGen}{\f4  looks for an available sound generator, or, of all sound generators are in used, one with a lower priority than }{\f6\fs20 requestPriority}{\f4 .  If it finds a sound generator, it returns the generator number, which will be in the range 0 to 13.  If no generators are available, }{\f6\fs20 AllocGen}{\f4  returns an error.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NoteOff}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NoteOff\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NoteOff\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure NoteOff (genNum, semitone: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Switches a note started with }{\f6\fs20 NoteOn}{\f4  to it's release mode, where it will decay quickly to a zero volume.  At that point, the priority for the generator is set to zero so the generator can be reallocated by }{\f6\fs20 AllocGen}{\f4 .\par The }{\f6\fs20 genNum}{\f4  and }{\f6\fs20 semitone}{\f4  parameters should be the same ones passed earlier to }{\f6\fs20 NoteOn}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NoteOn}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NoteOn\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NoteOn\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure NoteOn (genNum, semitone, volume: integer;\par    var theInstrument: instrument);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1924\tab nsGenAlreadyOn}{\f4 \tab The specified note is already being played\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Starts playing a note.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 genNum}{\f4 \tab This is the sound generator number to use.  It should be allocated by a call to }{\f6\fs20 AllocGen}{\f4  before calling }{\f6\fs20 NoteOn}{\f4 .\par \par }{\f6\fs20 semitone}{\f4 \tab This is the note number, ranging from 0 to 127.  Middle C is 60.  Increasing or decreasing the note by 12 changes it by a full octave.  (Physically, that changes the frequency by a factor of two.)\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1800\li2160\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 volume}}}{\pard\plain \qj\fi-1800\li2160\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 decibels}}}{\v\f6\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 volume}{\f4 \tab The volume, which can range from 0 to 127.  Changing the volume by 16 is equivalent to a change in the sound level of 6 decibels.\par \par }{\f6\fs20 theInstrument}{\f4 \tab This is the instrument record.  See Lesson 16 for a complete description of this record and its use.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Note Synthesizer Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Note Synthesizer Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20  type\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 waveForm}}}{\v\f6\fs20 \par }{\f6\fs20    waveForm = record\par      topKey:      byte;\par      waveAddress: byte;\par      waveSize:    byte;\par      DOCMode:     byte;\par      relPitch:    integer;\par }\pard \widctlpar\adjustright {\f6\fs20      end;\par \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 instruments}}}{\v\f6\fs20 \par }{\f6\fs20    instrument = record\par      envelope:          array [1..24] of byte;\par      releaseSegment:    byte;\par      priorityIncrement: byte;\par      pitchBendRange:    byte;\par      vibratoDepth:      byte;\par      vibratoSpeed:      byte;\par      spare:             byte;\par      aWaveCount:        byte;\par      bWaveCount:        byte;\par      aWaveList:         array [1..1] of waveForm; (* aWaveCount * 6 bytes *)\par      bWaveList:         array [1..1] of waveForm; (* bWaveCount * 6 bytes *)\par }\pard \widctlpar\adjustright {\f6\fs20      end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Print Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Print Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Print Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named PrintMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrCloseDoc}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrCloseDoc\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrCloseDoc\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PrCloseDoc (printerPort: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1302\tab portNotOn}{\f4 \tab The specified port is not selected in the control panel\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Closes the printer's grafPort.  This call is normally used at the end of a print loop.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrClosePage}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrClosePage\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrClosePage\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PrClosePage (printerPort: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1302\tab portNotOn}{\f4 \tab The specified port is not selected in the control panel\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Closes the printing of the current page.  This call is normally used after every page is printed.  }{\f6\fs20 PrClosePage}{\f4  and }{\f6\fs20 PrOpenPage}{\f4  are used in pairs inside the print loop.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrDefault}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrDefault\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrDefault\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PrDefault (thePrintRecord: prHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1303\tab noPrintRecord}{\f4 \tab No print record was specified\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills in the print record with default information for the current printer.  The current printer is selected by the user using the printer chooser control panel device.  This call is normally used to fill in a new print record.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrError}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrError\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrError\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function PrError: integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Checks for errors flagged during the print loop.  This call is normally made right after a print loop, and just before spooled printing.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrJobDialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrJobDialog\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrJobDialog\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function PrJobDialog (thePrintRecord: prHandle): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Brings up a dialog that lets the user pick options related to a single printing of a document, like the number of copies to print and the print quality to use.  This call is normally made when the user selects the Print command, just before entering the print loop.\par The value returned will be 0 if the user canceled the print operation, and 1 if the user confirmed the print operation.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrOpenDoc}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrOpenDoc\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrOpenDoc\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function PrOpenDoc (thePrintRecord: prHandle; printerPort: grafPortPtr):\par    grafPortPtr;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1302\tab portNotOn}{\f4 \tab The specified port is not selected in the control panel\par \tab }{\f6\fs20 $1304\tab badLaserPrep}{\f4 \tab The version of LaserPrep in the drivers folder is not compatible with this version of the Print Manager\par \tab }{\f6\fs20 $1305\tab badLPFile}{\f4 \tab The version of LaserPrep in the drivers folder is not compatible with this version of the Print Manager\par \tab }{\f6\fs20 $1306\tab papConnNotOpen}{\f4 \tab Connection can't be established with the LaserWriter\par \tab }{\f6\fs20 $1307\tab papReadWriteErr}{\f4 \tab Read-write error on the LaserWriter\par \tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This call is used at the start of a print loop to allocate a }{\f6\fs20 grafPort}{\f4  for use by the Print Manager.  The first parameter is the print record, and the second is normally set to nil, telling the Print Manager to create a new grafPort.  For other possibilities, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 1}{\f4 , page 15-36.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrOpenPage}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrOpenPage\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrPicFile\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PrOpenPage (printerPort: grafPortPtr; pageFrame: rectPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1302\tab portNotOn}{\f4 \tab The specified port is not selected in the control panel\par \tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This call is used in the print loop to set up a new output page.  The first parameter is the }{\f6\fs20 grafPort}{\f4  set up by }{\f6\fs20 PrOpenDoc}{\f4 ; the second is normally nil, but can be used as a scaling rectangle.  For details on scaling rectangles, see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 1}{\f4 , page 15-38.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrPicFile}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrPicFile\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrPicFile\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PrPicFile (thePrintRecord: prHandle; printerPort: grafPortPtr;\par    statusRecPtr: PrStatusPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1302\tab portNotOn}{\f4 \tab The specified port is not selected in the control panel\par \tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Prints a spooled document.  This call is made after the print loop.  The call does not cause problems, even if the document is not spooled, so it is normally used routinely, without actually checking to see if the document is spooled.\par The first parameter is the print record used throughout the print loop.\par The second parameter is a }{\f6\fs20 grafPort}{\f4  to use while doing the spooled printing.  This is not the same grafPort that was allocated by }{\f6\fs20 PrOpenDoc}{\f4 ; that }{\f6\fs20 grafPort}{\f4  was disposed of when }{\f6\fs20 PrCloseDoc}{\f4  was called to finish the print loop.  Normally, you will pass nil, telling the Print Manager to allocate a }{\f6\fs20 grafPort}{\f4  specifically for this call.  For other possibilities, see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 1}{\f4 , page 15-40.\par The last parameter is a status record that is constantly updated to reflect the print loop status.  Other than creating a variable and passing it to }{\f6\fs20 PrPicFile}{\f4 , you can ignore this record.  For details on the format and use of the record, see see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 1}{\f4 , page 15-40.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrStlDialog}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrStlDialog\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrStlDialog\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function PrStlDialog (thePrintRecord: prHandle): boolean;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 PrStlDialog}{\f4  brings up a dialog that lets the user pick document-related printer options, like the page layout.  This call is normally made when the user picks the Page Setup command from the File menu.  You should pass a print record that has already been filled in by either }{\f6\fs20 PrDefault}{\f4  or }{\f6\fs20 PrValidate}{\f4 .  If possible, the print record should be saved with the document, and each document should have it's own private copy of the print record.\par If the user confirms the dialog, }{\f6\fs20 PrStlDialog}{\f4  returns true; if the user picks cancel, }{\f6\fs20 PrStlDialog}{\f4  returns false and does not modify the print record in any way.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PrValidate}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PrValidate\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PrValidate\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function PrValidate (thePrintRecord: prHandle): boolean;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 PrValidate}{\f4  checks an existing print record to make sure it is consistent with the current printer, making appropriate changes if not.  This call is normally used to validate a print record that is loaded with a document.  It returns true if changes were made to the print record, and false if no change was needed.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Print Manager Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Print Manager Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    (* Printer information subrecord *)\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 prInfoRec}}}{\v\f6\fs20 \par }{\f6\fs20    prInfoRec = record\par        iDev:  integer;\par        iVRes: integer;\par        iHRes: integer;\par        rPage: rect;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    (* Printer style subrecord *)\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 prStyleRec}}}{\v\f6\fs20 \par }{\f6\fs20    prStyleRec = record\par        wDev:      integer;\par        internA:   array [0..2] of integer;\par        feed:      integer;\par        paperType: integer;\par        case boolean of\par            true:  (crWidth:   integer;);\par            false: (vSizing:   integer;\par                   reduction: integer;\par                   internB:   integer;);\par }\pard \widctlpar\adjustright {\f6\fs20            end;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    (* Job information subrecord *)\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 prJobRec}}}{\v\f6\fs20 \par }{\f6\fs20    prJobRec = record\par        iFstPage:  integer;\par        iLstPage:  integer;\par        iCopies:   integer;\par        bJDocLoop: byte;\par        fFromUser: byte;\par        pIdleProc: procPtr;\par        pFileName: pathPtr;\par        iFileVol:  integer;\par        bFileVers: byte;\par        bJobX:     byte;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    (* Print record *)\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 prRec}}}{\v\f6\fs20 \par }{\f6\fs20    PrRec = record\par        prVersion: integer;\par        prInfo:    prInfoRec;\par        rPaper:    rect;\par        prStl:     prStyleRec;\par        prInfoPT:  array [0..13] of byte;\par        prXInfo:   array [0..23] of byte;\par        prJob:     PrJobRec;\par        printX:    array [0..37] of byte;\par        iReserved: integer;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par    PrRecPtr = ^PrRec;\par    PrHandle = ^PrRecPtr;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    (* Printer status subrecord *)\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 PrStatusRec}}}{\v\f6\fs20 \par }{\f6\fs20    PrStatusRec = record\par        iTotPages:  integer;\par        iCurPage:   integer;\par        iTotCopies: integer;\par        iCurCopy:   integer;\par        iTotBands:  integer;\par        iCurBand:   integer;\par        fPgDirty:   boolean;\par        fImaging:   integer;\par        hPrint:     prHandle;\par        pPrPort:    grafPortPtr;\par        hPic:       longint;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par    PrStatusPtr = ^PrStatusRec;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 QuickDraw II}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 QuickDraw II\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 QuickDraw II}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named QuickDrawII.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LocInfo Records}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LocInfo Records\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 locInfo}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 locInfoPtr}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    locInfo = record\par        portSCB:          integer;\par        ptrToPixelImage:  ptr;\par        width:            integer;\par        boundsRect:       rect;\par        end;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 locInfo}{\f4  record contains information about a bit mapped drawing area.  In this course, this record is used for drawing pictures with the }{\f6\fs20 PPToPort}{\f4  call, but the record is used widely in the toolbox and window manager for other purposes, too.\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f6\fs20 portSCB}{\f4 \tab The scan line control byte for the image.\par }{\f6\fs20 ptrToPixelImage}{\f4 \tab Points to the picture.  The picture is organized as a series of lines, each line being made up of 2 bit pixels or 4 bit pixels, depending on }{\f6\fs20 portSCB}{\f4 .\par }{\f6\fs20 width}{\f4 \tab Width in bytes of each line in the image.  The number of pixels in the image must be an even multiple of 8.\par }{\f6\fs20 boundsRect}{\f4 \tab A rectangle enclosing the entire image.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Scan Line Control Byte}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Scan Line Control Byte\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SCB}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scan line control byte}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The scan line control byte (SCB) defines the screen resolution for a scan line or pixel image.  Only one bit is used in this course.  If the most significant bit is set, the SCB refers to 640 mode graphics; if the bit is clear, the SCB refers to 320 mode graphics.  All other bits should be set to 0.\par For information about the other bits in the SCB, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 2}{\f4 , page 16-34.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CharBounds}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CharBounds\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CharBounds\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure CharBounds (theChar: char; var result: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 CharBounds}{\f4  sets the rectangle }{\f6\fs20 result}{\f4  to the character bounds rectangle for the character }{\f6\fs20 theChar}{\f4 .\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 bounds rectangle}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The character bounds rectangle is basically the rectangle that extends from the ascent to descent lines, and from the character origin on the left to the new character origin on the right.  If kerning is used, though, the pixels in the character could extend past the character origin on either the left or right, and in that case, the bounds rectangle is extended to include all of the pixels in the character.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CharWidth}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CharWidth\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CharWidth\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function CharWidth (theChar: char): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 CharWidth}{\f4  returns with width of the character in pixels.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ClipRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ClipRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ClipRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ClipRect (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the clip region for the current }{\f6\fs20 grafPort}{\f4  to the rectangle given.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ClosePoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ClosePoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ClosePoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ClosePoly;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0441\tab polyNotOpen}{\f4 \tab No polygon is open\par \tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Finishes the definition of the polygon started with }{\f6\fs20 OpenPoly}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CStringBounds}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CStringBounds\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CStringBounds\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure CStringBounds (theCString: univ CStringPtr; var result: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the bounds rectangle for the given string of characters.  See }{\f6\fs20 CharBounds}{\f4  for a definition of the bounds rectangle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CStringWidth}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CStringWidth\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CStringWidth\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function CStringWidth (theCString: univ CStringPtr): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the width of the string in pixels.  This is equivalent to the pen displacement if the string is drawn.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawChar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawChar\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawChar\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawChar (theChar: char);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Draws the character, using the current font, text mode, foreground color and background color.  The character is drawn to the current }{\f6\fs20 grafPort}{\f4  at the current pen location; the pen is then moved to the right by the width of the character.\par See }{\f6\fs20 CharWidth}{\f4  for one way to find the distance the pen will be advanced.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawCString}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawCString\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawCString\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawCString (theString: univ CStringPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Draws the string, using the current font, text mode, foreground color and background color.  The string is drawn to the current }{\f6\fs20 grafPort}{\f4  at the current pen location; the pen is then moved to the right by the width of the string.\par See }{\f6\fs20 CStringWidth}{\f4  for one way to find the distance the pen will be advanced.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawString}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawString\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawString\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawString (theString: univ pStringPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Draws the string, using the current font, text mode, foreground color and background color.  The string is drawn to the current }{\f6\fs20 grafPort}{\f4  at the current pen location; the pen is then moved to the right by the width of the string.\par See }{\f6\fs20 StringWidth}{\f4  for one way to find the distance the pen will be advanced.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawText}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawText\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawText\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawText (theText: univ textPtr; textLen: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Draws the block of text, using the current font, text mode, foreground color and background color.  The text is drawn to the current }{\f6\fs20 grafPort}{\f4  at the current pen location; the pen is then moved to the right by the width of the text.\par See }{\f6\fs20 TextWidth}{\f4  for one way to find the distance the pen will be advanced.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EraseArc}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EraseArc\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EraseArc\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 arcs}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure EraseArc (var theRect: rect; startAngle, arcAngle: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Erases the interior of the arc, painting the area with the background pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EraseOval}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EraseOval\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EraseOval\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ovals}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure EraseOval (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Erases the interior of the oval, painting the area with the background pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ErasePoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ErasePoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ErasePoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ErasePoly (thePolyHandle: polyHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Erases the interior of the polygon, painting the area with the background pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EraseRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EraseRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EraseRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure EraseRect (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Erases the interior of the rectangle, painting the area with the background pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EraseRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EraseRRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EraseRRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rounded rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure EraseRRect (var theRect: rect; ovalWidth, ovalHeight: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Erases the interior of the rounded rectangle, painting the area with the background pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FillArc}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FillArc\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FillArc\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 arcs}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FillArc (var theRect: rect; startAngle, arcAngle: integer;\par    var thePattern: pattern);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills the interior of the arc with the given pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FillOval}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FillOval\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FillOval\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ovals}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FillOval (var theRect: rectPtr; var thePattern: pattern);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills the interior of the oval with the given pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FillPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FillPoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FillPoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FillPoly (thePolyHandle: polyHandle; var thePattern: pattern);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills the interior of the polygon with the given pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FillRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FillRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FillRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FillRect (var theRect: rect; var thePattern: pattern);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills the interior of the rectangle with the given pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FillRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FillRRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FillRRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rounded rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FillRRect (var theRect: rect; ovalWidth, ovalHeight: integer;\par    var thePattern: pattern);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills the interior of the rounded rectangle with the given pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FrameArc}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FrameArc\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FrameArc\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 arcs}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FrameArc (var theRect: rect; startAngle, arcAngle: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Outlines the rounded portion of the given arc using the current pen mode, pattern and size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FrameOval}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FrameOval\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FrameOval\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ovals}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FrameOval (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Outlines the given oval using the current pen mode, pattern and size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FramePoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FramePoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FramePoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FramePoly (thePolyHandle: polyHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Outlines the given polygon using the current pen mode, pattern and size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FrameRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FrameRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FrameRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FrameRect (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Outlines the given rectangle using the current pen mode, pattern and size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FrameRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FrameRRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FrameRRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rounded rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FrameRRect (var theRect: rect; ovalWidth, ovalHeight: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Outlines the given rounded rectangle using the current pen mode, pattern and size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetColorEntry}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetColorEntry\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetColorEntry\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetColorEntry (tableNumber, entryNumber: integer): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0450\tab badTableNum}{\f4 \tab Invalid color table number\par \tab }{\f6\fs20 $0451\tab badColorNum}{\f4 \tab Invalid color number\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the color table entry for the specified color table number and color table entry number.  There are 16 color tables, numbered 0 to 15, and 16 color entries in each color table, also numbered 0 to 15.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetColorTable}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetColorTable\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetColorTable\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure GetColorTable (tableNumber: integer; var saveTable: colorTable);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0450\tab badTableNum}{\f4 \tab Invalid color table number\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills in the color table with the colors in one of the screen color tables.  There are 16 screen color tables, numbered 0 to 15.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetFontInfo}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetFontInfo\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetFontInfo\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure GetFontInfo (var theFIRec: fontInfoRecord);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns information about the current font in the given font information record.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetPort}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetPort\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetPort\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetPort: grafPortPtr;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns a pointer to the current }{\f6\fs20 grafPort}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetPortRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetPortRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetPortRect\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure GetPortRect (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the current }{\f6\fs20 grafPort}{\f4 's port rectangle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetVisHandle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetVisHandle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetVisHandle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetVisHandle: rgnHandle;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the handle for the visible region of the current }{\f6\fs20 grafPort}{\f4 .  The handle belongs to the system, and should not be modified in any way.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GlobalToLocal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GlobalToLocal\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GlobalToLocal\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure GlobalToLocal (var thePoint: point);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Converts the specified point from global coordinates to local coordinates.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InitCursor}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InitCursor\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InitCursor\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InitCursor;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the mouse cursor to an arrow and makes the cursor visible.  This call is used at the start of a program to make the mouse cursor visible, and to change back to the arrow cursor in a program after you have switched to some other cursor.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InvertArc}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InvertArc\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InvertArc\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 arcs}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InvertArc (var theRect: rect; startAngle, arcAngle: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Inverts the interior of the specified arc.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InvertOval}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InvertOval\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InvertOval\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ovals}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InvertOval (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Inverts the interior of the specified oval.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InvertPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InvertPoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InvertPoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InvertPoly (thePolyHandle: polyHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Inverts the interior of the specified polygon.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InvertRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InvertRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InvertRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InvertRect (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Inverts the interior of the specified rectangle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InvertRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InvertRRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InvertRRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rounded rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InvertRRect (var theRect: rect; ovalWidth, ovalHeight: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Inverts the interior of the specified rounded rectangle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 KillPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 KillPoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 KillPoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure KillPoly (thePolyHandle: polyHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Destroys the given polygon, disposing of all memory associated with the polygon.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LineTo}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LineTo\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LineTo\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LineTo (h, v: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Draws a line from the current pen location to the point passed as parameters to }{\f6\fs20 LineTo}{\f4 .  The line is drawn with the current pen pattern, mode and size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LocalToGlobal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LocalToGlobal\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LocalToGlobal\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LocalToGlobal (var thePoint: point);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Converts the specified point from local coordinates to global coordinates.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 MoveTo}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MoveTo\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MoveTo\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure MoveTo (h, v: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Moves the drawing pen to the specified point.  Nothing is drawn on the screen.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 OffsetPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 OffsetPoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OffsetPoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure OffsetPoly (thePolyHandle: polyHandle; dH, dV: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Offsets a polygon, effectively moving the entire shape.  }{\f6\fs20 dH}{\f4  is the distance to move in the horizontal direction, while }{\f6\fs20 dV}{\f4  is the distance to move in the vertical direction.  Positive values move the polygon down and to the right, while negative values shift the polygon up and to the left.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 OpenPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 OpenPoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenPoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LineTo}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ClosePoly}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 KillPoly}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function OpenPoly: polyHandle;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0440\tab polyAlreadyOpen}{\f4 \tab Polygon is already open\par \tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 OpenPoly}{\f4  starts the process of defining a polygon.  It returns the handle for a new polygon.  All subsequent calls to }{\f6\fs20 LineTo}{\f4  will add a line to the edge of the polygon, up until the matching }{\f6\fs20 ClosePoly}{\f4  call, which ends the definition of the polygon.\par If the last point in the polygon does not match the original starting point, an extra line is automatically added to close the shape.\par When you are finished with a polygon, call }{\f6\fs20 KillPoly}{\f4  to dispose of the memory associated with this structure.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PaintArc}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PaintArc\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PaintArc\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 arcs}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PaintArc (var theRect: rect; startAngle, arcAngle: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Paints all points inside the specified arc using the current pen pattern and pen mode.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PaintOval}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PaintOval\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PaintOval\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ovals}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PaintOval (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Paints all points inside the specified oval using the current pen pattern and pen mode.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PaintPoly}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PaintPoly\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PaintPoly\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 polygons}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PaintPoly (thePolyHandle: polyHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Paints all points inside the specified polygon using the current pen pattern and pen mode.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PaintRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PaintRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PaintRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PaintRect (var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Paints all points inside the specified rectangle using the current pen pattern and pen mode.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PaintRRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PaintRRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PaintRRect\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rounded rectangles}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PaintRRect (var theRect: rect; ovalWidth, ovalHeight: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Paints all points inside the specified rounded rectangle using the current pen pattern and pen mode.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PenNormal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PenNormal\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PenNormal\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PenNormal;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the current drawing pen do "normal" mode.  Specifically:\par \par 1.\tab The pen size is set to 1 pixel wide and 1 pixel high.\par 2.\tab The pen mode is set to }{\f6\fs20 modeCopy}{\f4 .\par 3.\tab The pen pattern is set to solid black.\par 4.\tab The pen mask is set to allow all bits to be drawn.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PPToPort}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PPToPort\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PPToPort\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PPToPort (srcLoc: locInfoPtr; var srcRect: rect;\par    destX, destY, transferMode: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0420\tab notEqualChunkiness}{\f4 \tab Chunkiness is not equal\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 PPToPort}{\f4  transfers a bit map to a port.\par \par }\pard \qj\fi-1620\li1980\widctlpar\adjustright {\f6\fs20 srcLoc}{\f4 \tab This is a pointer to a }{\f6\fs20 locInfo}{\f4  record that defines the image to draw.  See "}{\f6\fs20 LocInfo}{\f4  Records" at the start of this section for more information about the }{\f6\fs20 locInfo}{\f4  record.\par }{\f6\fs20 srcRect}{\f4 \tab This is the source rectangle.  Using this parameter, you can clip a specific part of the image from the source image.  The most common option, though, is to pass the rectangle that is imbedded in the }{\f6\fs20 locInfo}{\f4  record for the image.  Doing so paints the entire source image.\par }{\f6\fs20 destX}{\f4 \tab Horizontal location for the destination image.  The left edge of the rectangle will be aligned to this coordinate.\par }{\f6\fs20 destY}{\f4 \tab Vertical location for the destination image.  The top edge of the rectangle will be aligned to this coordinate.\par }{\f6\fs20 transferMode}{\f4 \tab This is the pen mode that will be used to draw the picture.  Any of the pen modes that are valid for }{\f6\fs20 SetPenMode}{\f4  can be used.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PtInRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PtInRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PtInRect\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function PtInRect (var thePoint: point; var theRect: rect): boolean;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This function tests to see if }{\f6\fs20 thePoint}{\f4  lies inside of }{\f6\fs20 theRect}{\f4 .  If so, the function returns true; otherwise, it returns false.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 RectInRgn}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 RectInRgn\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 RectInRgn\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function RectInRgn (var theRect: rect; theRgnHandle: rgnHandle): boolean;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 RectInRgn}{\f4  tests to see if any part of the given rectangle intersects the given region.  If so, }{\f6\fs20 RectInRgn}{\f4  returns true; if not, it returns false.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetAllSCBs}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetAllSCBs\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetAllSCBs\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetAllSCBs (newSCB: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets all scan line control bytes to the specified value.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetBackColor}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetBackColor\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetBackColor\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetBackColor (backColor: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the background color for the current port to }{\f6\fs20 backColor}{\f4 .  The background color should be in the range 0 to 3 if the 640 graphics mode is in use, and 0 to 15 if the 320 graphics mode is in use.  If the value is outside of the allowed range, the value is reduced to the correct range automatically.\par The background color is used when text is painted on the screen.  The region behind the text is filled in with the background color.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetColorEntry}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetColorEntry\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetColorEntry\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetColorEntry (tableNumber, entryNumber, newColor: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0450\tab badTableNum}{\f4 \tab Invalid color table number\par \tab }{\f6\fs20 $0451\tab badColorNum}{\f4 \tab Invalid color number\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the color table entry for the specified color table number and color table entry number to the given color value.  There are 16 color tables, numbered 0 to 15, and 16 color entries in each color table, also numbered 0 to 15.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetColorTable}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetColorTable\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetColorTable\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 color tables}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetColorTable (tableNumber: integer; var newTable: colorTable);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0450\tab badTableNum}{\f4 \tab Invalid color table number\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Fills in one of the active color tables with the colors from the given color table array.  There are 16 active color tables, numbered 0 to 15.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetForeColor}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetForeColor\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetForeColor\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetForeColor (foreColor: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the foreground color for the current port to }{\f6\fs20 foreColor}{\f4 .  The foreground color should be in the range 0 to 3 if the 640 graphics mode is in use, and 0 to 15 if the 320 graphics mode is in use.  If the value is outside of the allowed range, the value is reduced to the correct range automatically.\par When text is drawn to the screen, the foreground color is used to draw the text.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetPenMask}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetPenMask\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPenMask\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen masks}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetPenMask (var theMask: mask);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the pen mask for the current }{\f6\fs20 grafPort}{\f4  to the given mask.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetPenMode}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetPenMode\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPenMode\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen modes}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetPenMode (penMode: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the pen mode.  The pen mode controls how pixels are drawn on the screen.\par Table A-5 shows the various pen modes and what they do.  For the numeric equivalent of the constants, see the QuickDraw II definitions section.\par Most of the pen modes perform some binary logic operation between the source and destination pixels.  This is a bitwise operation.  For example, }{\f6\fs20 modeXOR}{\f4  is frequently used in rubber-banding routines to draw an image, then erase it by drawing the same image in the same spot.  When color 2 is drawn across a color 3 background in 640 mode, each pixel is drawn using an exclusive or operation.  The source pixel in binary is 10, while the destination pixel is 11.  The exclusive or operation results in a value of 01.  When the line is drawn a second time, the source is again 10, while the destination is 01, and the screen is set to 11.\par \par }\pard \qj\fi-1440\li1800\keep\keepn\widctlpar\adjustright {\f4\ul Mode}{\f4 \tab }{\f4\ul Description}{\f4 \par }{\f6\fs20 modeCopy}{\f4 \tab Copy each source pixel exactly.  For lines or pictures, the pen pattern is copied to the screen, while for text, each letter is painted using the foreground color, and the background is filled in using the background color.  This is the typical drawing mode for most operations.\par }{\f6\fs20 notCopy}{\f4 \tab Each source pixel is reversed in value, changing all 0 bits to 1 and all 1 bits to 0.  The resulting image is drawn to the screen.\par }{\f6\fs20 modeOR}{\f4 \tab The source bits are ored with the destination bits.\par }{\f6\fs20 notOR}{\f4 \tab The source bits are reversed, and the result is ored with the destination bits.\par }{\f6\fs20 modeXOR}{\f4 \tab The source bits are exclusive ored with the destination bits.  If the bit is on in both the source and destination, or if it is off in both the source and destination, the result will be a bit that is off.  If either the source or destination bit is on, but not both, the bit will be on in the final drawing.\par }{\f6\fs20 notXOR}{\f4 \tab This mode works like }{\f6\fs20 modeXOR}{\f4 , but the bits are reversed in the final drawing.\par }{\f6\fs20 modeBIC}{\f4 \tab Pixels in the source are reversed, then anded with the destination pixels.  This mode is generally used to turn off pixels in an area in preparation for drawing a new image in the same area.\par }{\f6\fs20 notBIC}{\f4 \tab The source bits are anded with the destination bits.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table A-5:  Pen Modes\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetPenPat}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetPenPat\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPenPat\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen patterns}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetPenPat (var thePattern: pattern);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the pen pattern for the current }{\f6\fs20 grafPort}{\f4  to the given pattern.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetPenSize}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetPenSize\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPenSize\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 pen size}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetPenSize (width, height: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the pen size for the current }{\f6\fs20 grafPort}{\f4  to the given size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetPort}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetPort\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPort\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetPort (thePort: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Makes the specified port the current }{\f6\fs20 grafPort}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetSCB}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetSCB\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSCB\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SCB}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scan lines}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetSCB (scanLine, newSCB: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0452\tab badScanLine}{\f4 \tab Invalid scan line number\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the scan line control byte for scan line }{\f6\fs20 scanLine}{\f4  to }{\f6\fs20 newSCB}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetSolidPenPat}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetSolidPenPat\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSolidPenPat\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetSolidPenPat (colorNum: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The current pen pattern is set to the solid color passed as a parameter.  In 320 mode, the pen color can be any number from 0 to 15, while in 640 mode, the pen color can be any color from 0 to 3.  If you pass a number outside of the allowed range, the value is reduced to the correct range using a mod operation.  In 640 mode, the operation is }{\f6\fs20 colorNum mod 4}{\f4 , while in 320 mode, the operation is }{\f6\fs20 colorNum mod 16}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetTextMode}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetTextMode\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetTextMode\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetTextMode (textMode: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 text mode}}}{\v\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the text mode to the specified value.  The text mode is equivalent to the pen mode (see }{\f6\fs20 SetPenMode}{\f4 ), but the text mode applies only to text, while the pen mode applied to all drawing except text.\par All of the pen modes that are valid for }{\f6\fs20 SetPenMode}{\f4  are also valid for }{\f6\fs20 SetTextMode}{\f4 , and all do exactly the same thing.\par In addition, there are eight new pen modes.  The reason for these modes is that a character normally prints as a full rectangle, with the part normally though of as the character drawn in the foreground color, and the rest of the rectangle filled in with the background color.  The additional eight pen modes match the normal eight pen modes, but they only draw the text itself.  The background of the rectangle is not filled in.\par Here are the eight foreground only modes, along with the standard modes they correspond to.\par \par }\pard \qj\li720\keepn\widctlpar\tx2520\adjustright {\f4 standard\tab foreground\par }{\f4\ul mode     }{\f4 \tab }{\f4\ul mode         }{\f4 \tab \par }{\f6\fs20 modeCopy\tab modeForeCopy\par notCopy\tab notForeCopy\par modeOR\tab modeForeOR\par notOR\tab notForeOR\par modeXOR\tab modeForeXOR\par notXOR\tab notForeXOR\par modeBIC\tab modeForeBIC\par }\pard \qj\li720\widctlpar\tx2520\adjustright {\f6\fs20 notBIC\tab notForeBIC\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 StringBounds}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 StringBounds\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StringBounds\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure StringBounds (theString: univ pStringPtr; var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the bounds rectangle for the given string of characters.  See }{\f6\fs20 CharBounds}{\f4  for a definition of the bounds rectangle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 StringWidth}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 StringWidth\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StringWidth\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function StringWidth (theString: univ pStringPtr): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the width of the string in pixels.  This is equivalent to the pen displacement if the string is drawn.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TextBounds}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TextBounds\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TextBounds\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure TextBounds (theText: univ textPtr; textLen: integer;\par    var theRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the bounds rectangle for the given block of characters.  See }{\f6\fs20 CharBounds}{\f4  for a definition of the bounds rectangle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TextWidth}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TextWidth\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TextWidth\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function TextWidth (theText: univ textPtr; textLen: integer): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the width of the block of text in pixels.  This is equivalent to the pen displacement if the text is drawn.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 QuickDraw II Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 QuickDraw II Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 point}}}{\v\f6\fs20 \par }{\f6\fs20    point = record\par       v: integer;\par       h: integer;\par }\pard \widctlpar\adjustright {\f6\fs20       end;\par \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 rect}}}{\v\f6\fs20 \par }{\f6\fs20    rect = record\par       case rectKinds of\par          normal:  (v1: integer;\par                    h1: integer;\par                    v2: integer;\par }\pard \widctlpar\adjustright {\f6\fs20                    h2: integer);\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20          mac:     (top:    integer;\par                    left:   integer;\par                    bottom: integer;\par }\pard \widctlpar\adjustright {\f6\fs20                    right:  integer);\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20          points:  (topLeft:  point;\par                    botRight: point);\par }\pard \widctlpar\adjustright {\f6\fs20          end;\par \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 locInfo}}}{\v\f6\fs20 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    locInfo = record\par        portSCB:          integer;\par        ptrToPixelImage:  ptr;\par        width:            integer;\par        boundsRect:       rect;\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 locInfoPtr}}}{\v\f6\fs20 \par }\pard \li180\widctlpar\adjustright {\f6\fs20    locInfoPtr = ^locInfo;\par \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 fontInfoRecord}}}{\v\f6\fs20 \par }{\f6\fs20    (* FontInfo record *)\par    fontInfoRecord = record\par        ascent:  integer;\par        descent: integer;\par        widMax:  integer;\par        leading: integer;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 QuickDraw II Auxiliary}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 QuickDraw II Auxiliary\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 QuickDraw II Auxiliary}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header information for this tool is combined with QuickDraw II.  If your program uses the tool calls listed in this section, you must include both QuickDrawII and Common in your }{\f6\fs20 uses}{\f4  statement.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DrawPicture}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DrawPicture\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DrawPicture\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure DrawPicture (picHandle: handle; var destRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 DrawPicture}{\f4  draws a picture.  }{\f6\fs20 picHandle}{\f4  is the handle of a picture created by QuickDraw II Auxiliary.  In this course, it comes into the program from a scrap.  }{\f6\fs20 destRect}{\f4  is the destination rectangle for the picture; the picture is expanded or shrunk to fit into the available space.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Resource Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Resource Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Resource Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named ResourceMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 AddResource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AddResource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AddResource\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure AddResource (resourceHandle: handle; resourceAttr: integer;\par    resourceType: integer; resourceID: longint);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1E03\tab resNoConverter}{\f4 \tab No converter routine for the resource type\par \tab }{\f6\fs20 $1E04\tab resNoCurFile}{\f4 \tab No current resource file\par \tab }{\f6\fs20 $1E05\tab resDupID}{\f4 \tab The specified resource ID is already in use\par \tab }{\f6\fs20 $1E06\tab resNotFound}{\f4 \tab The specified resource was not found\par \tab }{\f6\fs20 $1E0E\tab resDiskFull}{\f4 \tab Volume full\par \tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Adds a new resource to a resource fork.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 resourceHandle}{\f4 \tab This is the handle for the new resource.  Once you call }{\f6\fs20 AddResource}{\f4 , the handle belongs to the Resource Manager.\par \par }{\f6\fs20 resourceAttr}{\f4 \tab This is a resource attributes flag word.  In this course, this flags word should be set to $0300.  For a complete discussion of this parameter, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , page 45-35.\par \par }{\f6\fs20 resourceType}{\f4 \tab This is the resource type for the new resource.\par \par }{\f6\fs20 resourceID}{\f4 \tab This is the resource ID for the new resource.  The resource must not already exist.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CloseResourceFile}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CloseResourceFile\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseResourceFile\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure CloseResourceFile (fileID: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1E03\tab resNoConverter}{\f4 \tab No converter routine for the resource type\par \tab }{\f6\fs20 $1E06\tab resNotFound}{\f4 \tab The specified resource was not found\par \tab }{\f6\fs20 $1E0E\tab resDiskFull}{\f4 \tab Volume full\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Closes a resource fork previously opened by }{\f6\fs20 OpenResourceFile}{\f4 .  The }{\f6\fs20 fileID}{\f4  parameter should be the same one returned by }{\f6\fs20 OpenResourceFile}{\f4 .\par If the resource file being closed is the current resource file, the next most current resource file becomes the new current resource file.\par For further details about this call, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , page 45-37.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LoadResource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LoadResource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LoadResource\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReleaseResource}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function LoadResource (resourceType: resType; resourceID: resID): handle;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1E03\tab resNoConverter}{\f4 \tab No converter routine for the resource type\par \tab }{\f6\fs20 $1E06\tab resNotFound}{\f4 \tab The specified resource was not found\par \tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 LoadResource}{\f4  loads a resource based on a resource type and resource ID and returns a handle to the resource.\par }{\f6\fs20 LoadResource}{\f4  works with }{\f6\fs20 ReleaseResource}{\f4  to manage the memory used by the various resources.  In some cases, you may want to load a resource and keep it in memory from that time on, but in most cases, you will load a resource, use it for a while, then call }{\f6\fs20 ReleaseResource}{\f4  to release the resource.  If you need the resource again, you call }{\f6\fs20 LoadResource}{\f4  again.  In many cases, the resource is still in memory, since it is simply marked purgeable by }{\f6\fs20 ReleaseResource}{\f4 .  The effect is that }{\f6\fs20 LoadResource}{\f4  can grab the resource from memory without reading it in from disk again, so long as the memory wasn't needed for anything else between uses.\par You should never dispose of a handle returned by }{\f6\fs20 LoadResource}{\f4 .\par There are some capabilities of }{\f6\fs20 LoadResource}{\f4  that are not used in this course.  For a complete description, see page 45-56 of }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 OpenResourceFile}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 OpenResourceFile\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 OpenResourceFile\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function OpenResourceFile (openAccess: integer; mapAddress: resMapPtr;\par    var fileName: gsosInString): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1E06\tab resNotFound}{\f4 \tab The specified resource was not found\par \tab }{\f6\fs20 $1E09\tab resNoUniqueID}{\f4 \tab No more resource IDs are available\par \tab }{\f6\fs20 $1E0B\tab resSysIsOpen}{\f4 \tab The system resource file is already open\par \tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Opens a resource file, making it the current resource file.  }{\f6\fs20 OpenResourceFile}{\f4  returns a resource file ID; this should be passed to }{\f6\fs20 CloseResourceFile}{\f4  when it is time to close the resource fork.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 openAccess}{\f4 \tab This parameter tells }{\f6\fs20 OpenResourceFile}{\f4  whether you want read-only access (1), write-only access (2), or access to both read and write resources (3).\par \par }{\f6\fs20 mapAddress}{\f4 \tab This is a pointer to a resource map in memory, or nil to retrieve the resource map from disk.  In this course, the parameter should always be nil.  For other possibilities, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , page 45-61.\par \par }{\f6\fs20 fileName}{\f4 \tab This is the GS/OS path name for the file to open.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ReleaseResource}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ReleaseResource\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ReleaseResource\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LoadResource}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ReleaseResource (purgeLevel: integer; resourceType: resType;\par    resourceID: resID);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1E06\tab resNotFound}{\f4 \tab The specified resource was not found\par \tab }{\f6\fs20 $1E0C\tab resHasChanged}{\f4 \tab The resource has been changed and has not been updated\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ReleaseResource}{\f4  sets the purge level for the handle used by a resource.  You pass the purge level (0-3), the resource type, and the resource ID of a resource that has been loaded (usually by }{\f6\fs20 LoadResource}{\f4 ) and }{\f6\fs20 ReleaseResource}{\f4  sets the purge level to the value you specify.\par Purge levels range from 0-3, and exist for all handles.  A handle with a purge level of 1, 2 or 3 is purgeable.  When a program asks the Memory Manager for memory, the Memory Manager checks to see if enough memory is available.  If not, the Memory Manager will (among other things) dispose of enough purgeable memory to allocate the new memory block.  If the handle has not been purged before the contents are needed again, the purge level can be set back to 0 and the information in the handle will still be valid.\par If the Memory Manager needs to dispose of some purgeable handles, it will start with handles with a purge level of 3, then take handles with a purge level of 2, and finally take handles with a purge level of 1.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Scrap Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Scrap Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Scrap Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named ScrapMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetIndScrap}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetIndScrap\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetIndScrap\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure GetIndScrap (index: integer; buffer: scrapBuffer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1610\tab basCrapType}{\f4 \tab No scrap of this type\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Gets a scrap by scrap index.  This call is used to read the current scrap when you don't know the scrap type for the scrap, something that is generally only necessary in a scrapbook program.  The first call is made with }{\f6\fs20 index}{\f4  set to 1, and information about the first scrap is returned in }{\f6\fs20 buffer}{\f4 .  For each subsequent call, }{\f6\fs20 index}{\f4  is incremented by 1, until }{\f6\fs20 GetIndScrap}{\f4  returns with an error.\par The scrap buffer has this format:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    scrapBuffer = record\par       scrapType: integer;\par       scrapSize: longint;\par       scrapHandle: handle;\par }\pard \widctlpar\adjustright {\f6\fs20       end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The handle is a copy of the handle owned by the Scrap Manager.  Your program can copy the information, but should not delete the handle or change the contents of the handle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetScrapHandle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetScrapHandle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetScrapHandle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetScrapHandle (scrapType: integer): handle;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1610\tab basCrapType}{\f4 \tab No scrap of this type\par \tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the handle for the current scrap with the given scrap type.  The handle is a copy of the handle owned by the Scrap Manager.  Your program can copy the information, but should not delete the handle or change the contents of the handle.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetScrapSize}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetScrapSize\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetScrapSize\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetScrapSize (scrapType: integer): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1610\tab basCrapType}{\f4 \tab No scrap of this type\par \tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns the size of the scrap for the given scrap type.  The size is given in bytes.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 LoadScrap}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 LoadScrap\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 LoadScrap\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure LoadScrap;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This call should be made by any program that uses the Scrap Manager.  The call is made right after initializing the tools.  It tells the Scrap Manager to look for a scrap file, reading the scrap and making it the current scrap if a scrap file is found.  See also }{\f6\fs20 UnloadScrap}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 PutScrap}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 PutScrap\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 PutScrap\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure PutScrap (numBytes: longint; scrapType: integer; srcPtr: ptr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Adds }{\f6\fs20 numBytes}{\f4  of information to the current scrap with a scrap type of }{\f6\fs20 scrapType}{\f4 .  The bytes are copied from memory starting at }{\f6\fs20 srcPtr}{\f4 .\par This call will not effect the contents of scraps with a scrap type other than the one given.  If more that one call is made to }{\f6\fs20 PutScrap}{\f4  with the same scrap type, the new information is appended to the old information.\par See also }{\f6\fs20 ZeroScrap}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 UnloadScrap}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 UnloadScrap\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 UnloadScrap\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure UnloadScrap;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This call should be made by any program that supports the Scrap Manager.  The call should be made just before the program shuts down the tools.  It tells the Scrap Manager to write the current scrap to a private, system scrap file.  The scrap file is loaded with }{\f6\fs20 LoadScrap}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ZeroScrap}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ZeroScrap\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ZeroScrap\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ZeroScrap;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ZeroScrap}{\f4  deletes all of the information for all scrap types in the current scrap.  }{\f6\fs20 ZeroScrap}{\f4  is generally called just before creating a new scrap with calls to }{\f6\fs20 PutScrap}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Sound Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Sound Tool Set\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Sound Tool Set}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named SoundMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FFSoundDoneStatus}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FFSoundDoneStatus\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FFSoundDoneStatus\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FFSoundDoneStatus (genNumber: integer): boolean;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0813\tab invalGenNumErr}{\f4 \tab Invalid generator number\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns true if the specified generator is busy playing a sound, and false if it is free.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FFStartSound}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FFStartSound\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FFStartSound\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FFStartSound (genNumFFSynth: integer;\par    var PBlockPtr: soundParamBlock);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0812\tab noSAddrInitErr}{\f4 \tab The Sound Tool Set is not active\par \tab }{\f6\fs20 $0813\tab invalGenNumErr}{\f4 \tab Invalid generator number\par \tab }{\f6\fs20 $0814\tab synthModeErr}{\f4 \tab Synthesizer mode error\par \tab }{\f6\fs20 $0815\tab genBusyErr}{\f4 \tab The generator is already in use\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Starts playing a sound.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 genNumFFSynth}{\f4 \tab This value is broken down into several individual fields, as follows:\par \par }\pard \qj\fi-1080\li3600\widctlpar\adjustright {\f4 bits 15-12\tab DOC channel number, from 0 to 15.  This value is always zero in this course; for a complete description, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , page 47-13.\par \par bits 11-8\tab The sound generator to use, in the range 0 to 14.\par \par bits 7-4\tab Reserved; set to 0.\par \par bits 3-0\tab In this course, this call is used to play a digitized sound; for that use, these bits should be set to 0001.  For other uses, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 2}{\f4 , page 21-16.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }{\f6\fs20 PBlockPtr}{\f4 \tab Sound parameter block.  See Lesson 16 for a simple description of this record and its parameters, or }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , page 47-3 for a detailed description.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FFStopSound}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FFStopSound\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FFStopSound\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure FFStopSound (genMask: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Stops the sound in one or more of the sound generators.  Each bit corresponds to one of the 15 available sound generators, with the generator number matching the bit.  Setting a bit in }{\f6\fs20 genMask}{\f4  turns off the sound in the corresponding sound generator.\par For example, setting }{\f6\fs20 genMask}{\f4  to $7FFF turns off all of the user sound generators, while setting }{\f6\fs20 genMask}{\f4  to $0004 would turn off generator 2.\par Generator 15 should never be turned off.  It is used by the operating system as a timer; turning it off can cause all sorts of problems.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 WriteRamBlock}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 WriteRamBlock\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 WriteRamBlock\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure WriteRamBlock (srcPtr: ptr; DOCStart, byteCount: integer);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0810\tab noDOCFndErr}{\f4 \tab The DOC or RAM was not found\par \tab }{\f6\fs20 $0811\tab docAddrRngErr}{\f4 \tab DOC address range error\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 WriteRamBlock}{\f4  transfers a series of bytes from main memory to the sound memory.  (The 64K sound memory is called DOC RAM in the toolbox reference manuals.)\par The bytes to move must not lie in banks $00, $01, $E0 or $E1.  Interrupts must be disabled while the bytes are moved.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 srcPtr}{\f4 \tab Points to the first byte to transfer.\par \par }{\f6\fs20 DOCStart}{\f4 \tab Location in DOC RAM to place the bytes.\par \par }{\f6\fs20 byteCount}{\f4 \tab Number of bytes to transfer.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Sound Tool Set Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Sound Tool Set Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 type\par    soundPBPtr = ^soundParamBlock;\par }{\pard\plain \li180\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 soundParamBlock}}}{\v\f6\fs20 \par }{\f6\fs20    soundParamBlock = record\par        waveStart:     ptr;                 (* starting address of wave    *)\par        waveSize:      integer;             (* waveform size in pages      *)\par        freqOffset:    integer;             (* waveform playback frequency *)\par        DOCBuffer:     integer;             (* DOC buffer starting address *)\par        DOCBufferSize: integer;             (* DOC buffer size code        *)\par        nextWAddr:     soundPBPtr;          (* ptr to next waveform block  *)\par        volSetting:    integer;             (* DOC volume setting          *)\par }\pard \li180\widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Standard File Operations Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Standard File Operations Tool Set\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Standard File Operations Tool Set}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SFO}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named SFToolSet.  This header file makes use of the Common unit and the DialogMgr unit.  All three of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Reply Records}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Reply Records\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 reply record}}}{\v\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    replyRecord5_0 = record\par        good:         integer;\par        fileType:     integer;\par        auxFileType:  longint;\par        nameVerb:     integer;\par        nameRef:      longint;\par        pathVerb:     integer;\par        pathRef:      longint;\par        end;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Standard File Manager calls described here pass back a reply record to tell you what file the user picked.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 good}{\f4 \tab This value will be 0 if the user canceled the operation, and non-zero if the user picked a file.\par }{\f6\fs20 fileType}{\f4 \tab For }{\f6\fs20 SFGetFile2}{\f4 , this is the file type of the file the user picked.  This field is not used for }{\f6\fs20 SFPutFile2}{\f4 .\par }{\f6\fs20 auxFileType}{\f4 \tab For }{\f6\fs20 SFGetFile2}{\f4 , this is the auxiliary file type of the file the user picked.  This field is not used for }{\f6\fs20 SFPutFile2}{\f4 .\par }{\f6\fs20 nameVerb}{\f4 \tab You fill this parameter in before the call.  It tells SFO what format to use when it returns }{\f6\fs20 nameRef}{\f4 .  This parameter should almost always be 3, telling SFO to allocate an appropriate amount of memory and return a handle to the file name.  For other possibilities, see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 , page 48-7.\par }{\f6\fs20 nameRef}{\f4 \tab This is the name of the file selected by the user.  It is a GS/OS output string, type }{\f6\fs20 gsosOutString}{\f4 .\par }{\f6\fs20 pathVerb}{\f4 \tab You fill this parameter in before the call.  It tells SFO what format to use when it returns }{\f6\fs20 pathRef}{\f4 .  This parameter should almost always be 3, telling SFO to allocate an appropriate amount of memory and return a handle to the path name.  For other possibilities, see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 , page 48-7.\par }{\f6\fs20 pathRef}{\f4 \tab This is the full path name of the file selected by the user.  It is a GS/OS output string, type }{\f6\fs20 gsosOutString}{\f4 .\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SFGetFile2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SFGetFile2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SFGetFile2\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SFGetFile2 (whereX, whereY, promptVerb: integer;\par    promptRef: univ longint; filterProcPtr: procPtr;\par    var theTypeList: typeList5_0; var theReply: replyRecord5_0);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1701\tab badPromptDesc}{\f4 \tab Invalid }{\f6\fs20 promptRefDesc}{\f4  value\par \tab }{\f6\fs20 $1704\tab badReplyNameDesc}{\f4 \tab Invalid }{\f6\fs20 nameRefDesc}{\f4  value in the reply record\par \tab }{\f6\fs20 $1705\tab badReplyPathDesc}{\f4 \tab Invalid }{\f6\fs20 pathRefDesc}{\f4  value in the reply record\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SFGetFile2}{\f4  displays a standard dialog used to open files.  All interaction with the user is handled by }{\f6\fs20 SFGetFile2}{\f4 , which returns a reply record indicating what file, if any, the user selected.\par See "Reply Records" at the start of this section for details about the reply record.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 whereX}{\f4 \tab The horizontal position for the top left corner of the dialog.\par }{\f6\fs20 whereY}{\f4 \tab The vertical position for the top left corner of the dialog.\par }{\f6\fs20 promptVerb}{\f4 \tab This is the type of reference for }{\f6\fs20 promptRef}{\f4 .\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 0\tab }{\f6\fs20 promptRef}{\f4  is a pointer to a p-string.\par 1\tab }{\f6\fs20 promptRef}{\f4  is the handle of a p-string.\par 2\tab }{\f6\fs20 promptRef}{\f4  is the resource ID for an }{\f6\fs20 rPString}{\f4  resource.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 promptRef}{\f4 \tab This is a p-string used as a prompt at the top of the dialog.\par }{\f6\fs20 filterProcPtr}{\f4 \tab This is a pointer to a filter procedure.  In this course, this parameter is always nil, telling }{\f6\fs20 SFGetFile2}{\f4  to use the standard filter procedure.  For alternatives, see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 , page 48-4.\par }{\f6\fs20 theTypeList}{\f4 \tab This is a record containing the types of files to show in the file list.  This is described fully below.\par }{\f6\fs20 theReply}{\f4 \tab This is the reply record.  See "Reply Records" at the start of this section for details.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The dialog shows a list of the files a user can open.  This list always includes folders, allowing the user to navigate through the tree structured directories on a typical disk.  In general, your application will also want to display all of the files the program can open, but not any files that the user really can't select.  The }{\f6\fs20 theTypeList}{\f4  record is used to tell }{\f6\fs20 SFGetFile2}{\f4  which file types (other than directories) it should show the user.\par The record itself is a count followed by one or more file type entries:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    typeList5_0 = record\par        numEntries:       integer;\par        fileAndAuxTypes:  array [1..10] of typeRec;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par While the ORCA/Pascal interfaces put a limit of 10 on the number of array entries, this is simply an artificial limit imposed by the need to pick some value.  You can change this value if you need a longer type list.\par Each type list entry is a }{\f6\fs20 typeRec}{\f4 :\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    typeRec = record\par        flags:     integer;\par        fileType:  integer;\par        auxType:   longint;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The }{\f6\fs20 fileType}{\f4  and }{\f6\fs20 auxType}{\f4  entries specify one particular file type and auxiliary file type combination to allow.  If a file's file type and auxiliary file type match one of these entries it will show up in the list of files the user can select.  The }{\f6\fs20 flags}{\f4  word controls how the }{\f6\fs20 fileType}{\f4  and }{\f6\fs20 auxType}{\f4  entries are used.  The bit flags are:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 bit 15\tab If this bit is clear, a file must match the auxiliary file type exactly to show up in the list of files.  If this bit is set, the }{\f6\fs20 auxType}{\f4  field is ignored.\par bit 14\tab If this bit is clear, a file must match the file type exactly to show up in the list of files.  If this bit is set, the }{\f6\fs20 fileType}{\f4  field is ignored.\par bit 13\tab If this bit is set, matching files will be displayed in the file list, but they will be dimmed and unselectable.\par bits 12-0\tab Reserved; set to 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SFPutFile2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SFPutFile2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SFPutFile2\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SFPutFile2 (whereX, whereY, promptVerb: integer;\par    promptRef: univ longint; origNameVerb: integer;\par    origNameRef: univ longint; var theReply: replyRecord5_0);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $1701\tab badPromptDesc}{\f4 \tab Invalid }{\f6\fs20 promptRefDesc}{\f4  value\par \tab }{\f6\fs20 $1702\tab badOrigNameDesc}{\f4 \tab Invalid }{\f6\fs20 origNameRefDesc}{\f4  value\par \tab }{\f6\fs20 $1704\tab badReplyNameDesc}{\f4 \tab Invalid }{\f6\fs20 nameRefDesc}{\f4  value in the reply record\par \tab }{\f6\fs20 $1705\tab badReplyPathDesc}{\f4 \tab Invalid }{\f6\fs20 pathRefDesc}{\f4  value in the reply record\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 SFPutFile2}{\f4  displays a standard dialog used to pick a new file name.  This is generally used by a program's Save As command to select a new file name, or by the Save command for a file that has never been saved to disk.  All interaction with the user is handled by }{\f6\fs20 SFPutFile2}{\f4 , which returns a reply record indicating what file name, if any, the user selected.\par See "Reply Records" at the start of this section for details about the reply record.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 whereX}{\f4 \tab The horizontal position for the top left corner of the dialog.\par }{\f6\fs20 whereY}{\f4 \tab The vertical position for the top left corner of the dialog.\par }{\f6\fs20 promptVerb}{\f4 \tab This is the type of reference for }{\f6\fs20 promptRef}{\f4 .\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 0\tab }{\f6\fs20 promptRef}{\f4  is a pointer to a p-string.\par 1\tab }{\f6\fs20 promptRef}{\f4  is the handle of a p-string.\par 2\tab }{\f6\fs20 promptRef}{\f4  is the resource ID for an }{\f6\fs20 rPString}{\f4  resource.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 promptRef}{\f4 \tab This is a p-string used as a prompt above the file name entry box.\par }{\f6\fs20 origNameVerb}{\f4 \tab This is the type of reference for }{\f6\fs20 origNameRef}{\f4 .\par }\pard \qj\fi-360\li2880\widctlpar\adjustright {\f4 0\tab }{\f6\fs20 origNameRef}{\f4  is a pointer to a GS/OS input string.\par 1\tab }{\f6\fs20 origNameRef}{\f4  is the handle of a GS/OS input string.\par 2\tab }{\f6\fs20 origNameRef}{\f4  is the resource ID for an }{\f6\fs20 rC1InputString}{\f4  resource.  (This resource type is not used in this course.  See }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 , page E-4 for details.)\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 origNameRef}{\f4 \tab This is a GS/OS input string (type }{\f6\fs20 gsosInString}{\f4 ).  It is used as a default file name in the file name entry box.\par }{\f6\fs20 theReply}{\f4 \tab This is the reply record.  See "Reply Records" at the start of this section for details.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Standard File Operations Tool Set Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Standard File Operations Tool Set Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par    replyRecord5_0 = record\par        good:         integer;\par        fileType:     integer;\par        auxFileType:  longint;\par        nameVerb:     integer;\par        nameRef:      longint;\par        pathVerb:     integer;\par        pathRef:      longint;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    typeRec = record\par        flags:     integer;\par        fileType:  integer;\par        auxType:   longint;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    typeList5_0 = record\par        numEntries:       integer;\par        fileAndAuxTypes:  array [1..10] of typeRec;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 TextEdit Tool Set}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 TextEdit Tool Set\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TextEdit Tool Set}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named TextEdit.  This header file makes use of the Common unit and the ControlMgr unit.  All three of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TEGetRuler}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TEGetRuler\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEGetRuler\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure TEGetRuler (rulerDescriptor: integer; rulerRef: univ longint;\par    theTERecord: teHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par \tab }{\f4 Resource Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TEGetRuler}{\f4  returns the ruler for a TextEdit control.\par In this course, }{\f6\fs20 rulerDescriptor}{\f4  is always 3, which tells }{\f6\fs20 TEGetRuler}{\f4  to create a handle for the ruler and store the handle at the location passed as }{\f6\fs20 rulerRef}{\f4 .  See }{\i\f4 Apple IIGS Toolbox Programming: Volume 3}{\f4 , page 49-80 for other possibilities.\par }{\f6\fs20 theTERecord}{\f4  is the handle for the text edit control, or nil for the current control in the current window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TEGetSelection}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TEGetSelection\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEGetSelection\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure TEGetSelection (selectionStart, selectionEnd: univ ptr;\par    theTERecord: teHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TEGetSelection}{\f4  reads the location of the current selection point, returning it as a character displacement from the start of the text.  If no text is selected, both }{\f6\fs20 selectionStart}{\f4  and }{\f6\fs20 selectionEnd}{\f4  are set to the location of the insertion point.\par Pass nil for }{\f6\fs20 theTERecord}{\f4  to update the active TextEdit control.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TEGetSelectionStyle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TEGetSelectionStyle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEGetSelectionStyle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function TEGetSelectionStyle (var commonStyle: teStyle;\par    styleHandle: TEStyleGroupHndl; theTERecord: teHandle): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TEGetSelectionStyle}{\f4  returns information about the style of the currently selected text.  If no text is selected, the null style is returned; the null style is the style that will be applied to newly typed text.\par }{\f6\fs20 commonStyle}{\f4  is a style record; all of the style information that applies to all of the selected text will be placed in this style record.  The integer returned as the function result is a flags word that tells which of the style record entries are valid:\par \par bits 15-6\tab Reserved; these will be 0.\par bit 5\tab If this bit is set, the font family is valid.\par bit 4\tab If this bit is set, the font size is valid.\par bit 3\tab If this bit is set, the foreground color is valid.\par bit 2\tab If this bit is set, the background color is valid.\par bit 1\tab If this bit is set, the user data field is valid.\par bit 0\tab If this bit is set, the attributes valid.\par \par }{\f6\fs20 TEGetSelectionStyle}{\f4  places all of the style records that pertain to the selection in the handle passed as }{\f6\fs20 styleHandle}{\f4 , resizing the handle if necessary.  We did not use this ability in this course.  For more information on the style records returned, see }{\i\f4 Apple IIGS Toolbox Programming: Volume 3}{\f4 , page 49-84.\par }{\f6\fs20 theTERecord}{\f4  is the handle for the text edit control, or nil for the current control in the current window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TEGetText}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TEGetText\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEGetText\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function TEGetText (bufferDescriptor: integer; bufferRef: univ longint;\par    bufferLength: longint; styleDescriptor: integer; styleRef: univ longint;\par    theTERecord: teHandle): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par \tab $2204\tab teInvalidDescriptor}{\f4 \tab Invalid descriptor value specified\par \tab }{\f6\fs20 $2208\tab teBufferOverflow}{\f4 \tab The output buffer was too small to accept all data\par \tab Memory Manager errors returned unchanged\par }{\f6\fs20 \tab }{\f4 Resource Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TEGetText}{\f4  returns the text in a TextEdit control.\par }{\f6\fs20 bufferDescriptor}{\f4  tells what kind of parameter is passed for }{\f6\fs20 bufferRef}{\f4 ; in this course we use $0019, telling }{\f6\fs20 TEGetText}{\f4  to create a handle for the text, saving the handle at the location passed as the }{\f6\fs20 bufferRef}{\f4  parameter.  The function returns the length of the text in bytes as the function result.\par For the purposes of this course, }{\f6\fs20 bufferLength}{\f4  is always set to 0.\par }{\f6\fs20 styleDescriptor}{\f4  tells }{\f6\fs20 TEGetText}{\f4  what sort of parameter to expect in }{\f6\fs20 styleRef}{\f4 ; in this course, we used 3, telling }{\f6\fs20 TEGetText}{\f4  to return a handle.  }{\f6\fs20 styleRef}{\f4  is the address of the handle variable.  The information returned is a }{\f6\fs20 teFormat}{\f4  record; the length can be calculated by adding several values together from the record.  (This is described in Lesson 11.)\par }{\f6\fs20 theTERecord}{\f4  is the handle for the text edit control, or nil for the current control in the current window.\par For information about other options available with this call see }{\i\f4 Apple IIGS Toolbox Programming: Volume 3}{\f4 , page 49-86.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TEPaintText}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TEPaintText\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEPaintText\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function TEPaintText (thePort: grafPortPtr; startingLine: longint;\par    var destRect: rect; flags: integer; theTERecord: teHandle): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par \tab $2209\tab teInvalidLine}{\f4 \tab The starting line value is greater than the number of lines in the text (can be interpreted as an end of file indication in some cases)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TEPaintText}{\f4  draws text in a }{\f6\fs20 grafPort}{\f4 .  This is generally used to print text.\par }{\f6\fs20 thePort}{\f4  is the }{\f6\fs20 grafPort}{\f4  where the text will be drawn.  }{\f6\fs20 destRect}{\f4  is the size of one page in the }{\f6\fs20 grafPort}{\f4 .\par }{\f6\fs20 startingLine}{\f4  is the line number at which to start printing.  After filling one page, }{\f6\fs20 TEPaintText}{\f4  returns, returning the value to pass for }{\f6\fs20 startingLine}{\f4  on the next call.  If the entire document has been printed, }{\f6\fs20 TEPaintText}{\f4  returns -1.\par If }{\f6\fs20 flags}{\f4  is $4000, }{\f6\fs20 TEPaintText}{\f4  doesn't actually draw the text; instead, it calculates the correct line number for the next page and returns.  This capability can be used to rapidly skip pages.  Pass 0 for }{\f6\fs20 flags}{\f4  for normal printing.\par }{\f6\fs20 theTERecord}{\f4  is the handle for the text edit control, or nil for the current control in the current window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TESetRuler}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TESetRuler\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TESetRuler\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure TESetRuler (rulerDescriptor: integer; rulerRef: univ longint;\par    theTERecord: teHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TESetRuler}{\f4  changes the ruler information for a TextEdit control, then forces a screen update by calling }{\f6\fs20 InvalRect}{\f4 .\par }{\f6\fs20 rulerDescriptor}{\f4  tells }{\f6\fs20 TESetRuler}{\f4  what sort of parameter to expect for }{\f6\fs20 rulerRef}{\f4 ; in this course, we use 1 for }{\f6\fs20 rulerDescriptor}{\f4  and pass a ruler handle for }{\f6\fs20 rulerRef}{\f4 .  See }{\i\f4 Apple IIGS Toolbox Programming: Volume 3}{\f4 , page 49-115 for other possibilities.\par }{\f6\fs20 theTERecord}{\f4  is the handle for the text edit control, or nil for the current control in the current window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TESetSelection}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TESetSelection\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TESetSelection\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure TESetSelection (selectionStart, selectionEnd: longint;\par    theTERecord: teHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TESetSelection}{\f4  sets the selection point to the values given, updating the control as appropriate.  If }{\f6\fs20 selectionStart}{\f4  is the same as }{\f6\fs20 selectionEnd}{\f4 , the insertion point is placed }{\f6\fs20 selectionEnd}{\f4  characters into the document.  If }{\f6\fs20 selectionStart}{\f4  is greater than }{\f6\fs20 selectionEnd}{\f4 , the values are reversed.  If }{\f6\fs20 selectionEnd}{\f4  is past the end of the document, it is automatically reduced to a valid value.\par Pass nil for }{\f6\fs20 theTERecord}{\f4  to update the active TextEdit control.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TESetText}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TESetText\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TESetText\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure TESetText (textDescriptor: integer; textRef: teTextRef;\par    textLength: longint; styleDescriptor: integer; styleRef: teStyleRef;\par    theTERecord: teHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par \tab $2204\tab teInvalidDescriptor}{\f4 \tab Invalid descriptor value specified\par \tab Memory Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TESetText}{\f4  adds text and style information to a TextEdit control.\par }{\f6\fs20 textDescriptor}{\f4  tells }{\f6\fs20 TESetText}{\f4  what sort of parameter to expect for }{\f6\fs20 textRef}{\f4 .  In this course, we always pass 5 for }{\f6\fs20 textDescriptor}{\f4  and a pointer to a text buffer for }{\f6\fs20 textRef}{\f4 .  }{\f6\fs20 textLength}{\f4  is the number of characters in the text buffer.\par }{\f6\fs20 styleDescriptor}{\f4  tells }{\f6\fs20 TESetText}{\f4  what sort of parameter to expect for }{\f6\fs20 styleRef}{\f4 .  In this course, we always pass 0, indicating that }{\f6\fs20 styleRef}{\f4  is a pointer to a style record.\par }{\f6\fs20 theTERecord}{\f4  is the handle for the text edit control, or nil for the current control in the current window.\par For information about other options available with this call see }{\i\f4 Apple IIGS Toolbox Programming: Volume 3}{\f4 , page 49-117.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TEStyleChange}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TEStyleChange\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TEStyleChange\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure TEStyleChange (flags: integer; var newStyle: teStyle;\par    theTERecord: teHandle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par \tab }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord\par \tab $2205\tab teInvalidFlag}{\f4 \tab The specified flag word is invalid\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TEStyleChange}{\f4  changes the style information for the current text selection.  If there is no current selection, the style is applied to the null style record; the null style record is the style that will be used if new text is typed.\par }{\f6\fs20 flags}{\f4  is a set of bit flags indicating what style information should actually be changed.\par \par }\pard \qj\fi-1080\li1800\widctlpar\adjustright {\f4 bits 15-7\tab Reserved; set to 0.\par 6\tab If this bit is set, the font family will be changed.\par 5\tab If this bit is set, the font size will be changed.\par 4\tab If this bit is set, the foreground color will be changed.\par 3\tab If this bit is set, the background color will be changed.\par 2\tab If this bit is set, the user data field will be changed.\par 1\tab If this bit is set, the style attributes will be changed.  You should not set this bit and bit 0.\par 0\tab If this bit is set, the style attributes will be updated, but the style isn't just blindly applied.  Instead, TextEdit checks to see if the style is the current style for the entire selection.  If so, the style is turned off.  If not, the style is added to the style information already selected for the text.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }{\f6\fs20 newStyle}{\f4  is a style record containing the new style information.\par }{\f6\fs20 theTERecord}{\f4  is the handle for the text edit control, or nil for the current control in the current window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TextEdit Tool Set Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TextEdit Tool Set Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 type\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 teStyle}}}{\v\f6\fs20 \par }{\f6\fs20    teStyle = record\par        teFont:     fontID;\par        foreColor:  integer;\par        backColor:  integer;\par        userData:   longint;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 teRuler}}}{\v\f6\fs20 \par }{\f6\fs20    teRuler = record\par        leftMargin:     integer;\par        leftIndent:     integer;\par        rightMargin:    integer;\par        just:           integer;\par        extraLS:        integer;\par        flags:          integer;\par        userData:       longint;\par        tabType:        integer;\par    (* Change size of array for application. *)\par        tabs:           array [1..1] of teTabItem;\par        tabTerminator:  integer;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 teStyleGroup}}}{\v\f6\fs20 \par }{\f6\fs20    teStyleGroupHndl = ^teStyleGroupPtr;\par    teStyleGroupPtr  = ^teStyleGroup;\par    teStyleGroup = record\par        count:   integer;\par    (* Change array size for application. *)\par        styles:  array [1..1] of teStyle;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 teStyleItem}}}{\v\f6\fs20 \par }{\f6\fs20    teStyleItem = record\par        length:  longint;\par        offset:  longint;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    teFormatHndl = ^teFormatPtr;\par    teFormatPtr  = ^teFormat;\par }{\pard\plain \keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 teFormat}}}{\v\f6\fs20 \par }{\f6\fs20    teFormat = record\par        version:          integer;\par        rulerListLength:  longint;\par    (* Change array size for application. *)\par        theRulerList:     array [1..1] of teRuler;\par        styleListLength:  longint;\par    (* Change array size for application. *)\par        theStyleList:     array [1..1] of teStyle;\par        numberOfStyles:   longint;\par    (* Change array size for application. *)\par        theStyles:        array [1..1] of teStyleItem;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 ToolLocator}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 ToolLocator\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Tool Locator}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named ToolLocator.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 MessageCenter}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 MessageCenter\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MessageCenter\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure MessageCenter (action, msgID: integer; messageHandle: handle);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0111\tab messNotFoundErr}{\f4 \tab The specified message was not found\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 MessageCenter}{\f4  is used for communications between programs.\par The }{\f6\fs20 msgID}{\f4  parameter tells }{\f6\fs20 MessageCenter}{\f4  what kind of message you are interested in.  These message numbers are assigned by Apple Computer.  The only one used in this course is message 1, which is a message created by the Finder.  It contains lists of documents to open or print.  See Lesson 17 for details on the format and use of this message type.\par You can read, write or delete messages; the action parameter tells }{\f6\fs20 MessageCenter}{\f4  which you want to do.  The table below shows the actions as a named action (the names are in the interface file for the Tool Locator) and as numeric values, along with a description of the action.\par \par }\pard \qj\fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs20 addMessage}{\f4 \tab 1\tab Adds a new message.  Any old message with the same message ID is deleted.  }{\f6\fs20 MessageCenter}{\f4  makes a copy of the handle you pass.\par \par }{\f6\fs20 getMessage}{\f4 \tab 2\tab Reads a message.  You must create and pass a handle, which should be moveable.  }{\f6\fs20 MessageCenter}{\f4  will resize the handle and copy the message into the handle.  If there is no message with the given message ID }{\f6\fs20 MessageCenter}{\f4  returns an error and doesn't change the handle.\par \par }{\f6\fs20 deleteMessage}{\f4 \tab 3\tab Removes a message from the message center.  While you must pass a handle, it isn't used or modified in any way.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ShutDownTools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ShutDownTools\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ShutDownTools\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ShutDownTools (startStopVerb: integer;\par    startStopRecRef: univ longint);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Shuts down the tools started by }{\f6\fs20 StartUpTools}{\f4 .  The }{\f6\fs20 startStopRecRef}{\f4  is the value returned by }{\f6\fs20 StartUpTools}{\f4 ; }{\f6\fs20 startStopVerb}{\f4  should match the }{\f6\fs20 startStopVerb}{\f4  parameter used in the }{\f6\fs20 StartUpTools}{\f4  call.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 StartUpTools}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 StartUpTools\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function StartUpTools (myID, startStopVerb: integer;\par    startStopRecRef: univ longint): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0103\tab TLBadRecFlag}{\f4 \tab The StartStop record is invalid\par \tab }{\f6\fs20 $0104\tab TLCantLoad}{\f4 \tab A tool cannot be loaded\par \tab System Loader errors returned unchanged\par \tab Memory Manager errors returned unchanged\par \tab GS/OS errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Starts one or more tools, doing all of the appropriate things (like reserving memory) and starting the tools in the correct order.\par Some tools require other tools to work properly; it is up to you to make sure that all of the needed tools are actually started.\par }{\f6\fs20 StartUpTools}{\f4  returns a }{\f6\fs20 startStopRecRef}{\f4  value that must be saved and passed to }{\f6\fs20 ShutDownTools}{\f4  when the tools are shut down.\par See Table 7-1 for a list of the tools used in this course, along with their dependencies as of System Disk 6.0.\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f6\fs20 myID}{\f4 \tab The user ID to use for allocating memory.  This is normally the application's user ID, as returned by Pascal's }{\f6\fs20 UserID}{\f4  function.\par }{\f6\fs20 startStopVerb}{\f4 \tab This parameter tells }{\f6\fs20 StartUpTools}{\f4  what sort of value is being passed for }{\f6\fs20 startStopRecRef}{\f4 .  In this course, we always use a resource to list the tools to start, so this parameter is 2.  See }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4 , page 51-19 for other possibilities.\par }{\f6\fs20 startStopRecRef}{\f4 \tab This parameter is the resource ID for an }{\f6\fs20 rToolStartup}{\f4  resource.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TextEdit Tool Set Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TextEdit Tool Set Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 const\par    (* MessageCenter action codes *)\par    addMessage  =   1;          (* add message to msg center data *)\par    getMessage  =   2;          (* return message from msg center *)\par }\pard \widctlpar\adjustright {\f6\fs20    deleteMessage = 3;          (* delete message from msg center *)\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20    messageRecord = record\par        blockLength: integer;\par        IDstring:    pString;   (* may be a max of 64 chars long *)\par    (* Change length of array to suit application. *)\par        dataBlock:   packed array [1..1] of byte;\par }\pard \widctlpar\adjustright {\f6\fs20        end;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Window Manager}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Window Manager\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Window Manager}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In ORCA/Pascal the header file for this tool is named WindowMgr.  This header file makes use of the Common unit.  Both of these units must be listed in your }{\f6\fs20 uses}{\f4  statement to make calls listed in this section.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Window Parameters}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Window Parameters\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindParam1 resource}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 paramList record}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewWindow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewWindow2}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 When a window is defined, there are a number of parameters that are passed to the Window Manager to describe the type of the window.  In this course, the parameters are passed via an }{\f6\fs20 rWindParam1}{\f4  resource or via a }{\f6\fs20 paramList}{\f4  record.  The parameters described below apply to either, although some of the parameters are set to constants in an }{\f6\fs20 rWindParam1}{\f4  resource, and do not appear in the resource description file.\par See "Window Manager Definitions," later in this section, for the definition of a }{\f6\fs20 paramList}{\f4  record.  See Appendix B for a description of the }{\f6\fs20 rWindParam1}{\f4  resource.\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 paramLength}{\f4 \tab The length of a }{\f6\fs20 paramList}{\f4  record; 78.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wFrameBits}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wFrameBits}{\f4 \tab Flags word, defined as follows:\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 window\:title}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fTitle}{\f4 \tab 15\tab If this bit is set, the window will have a title bar.  If this bit is clear, the window will not have a title bar.\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 close box}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fClose}{\f4 \tab 14\tab If this bit is set, the window will have a close box at the left side of the title bar.  If this bit is clear, there will not be a close box.  You must clear this bit if the window does not have a title bar (i.e. if }{\f6\fs20 fTitle}{\f4  is 0).\par \par }{\f6\fs20 fAlert}{\f4 \tab 13\tab Set this bit to 1 for an alert-style window frame.  An alert style window has a double-lined frame around the content region.  Alert windows don't have much besides a window frame, so if you set this bit, you should clear }{\f6\fs20 fInfo}{\f4 , }{\f6\fs20 fZoom}{\f4 , }{\f6\fs20 fFlex}{\f4 , }{\f6\fs20 fGrow}{\f4 , }{\f6\fs20 fBScroll}{\f4 , }{\f6\fs20 fRScroll}{\f4 , }{\f6\fs20 fClose}{\f4  and }{\f6\fs20 fTitle}{\f4 .\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fRScroll}{\f4 \tab 12\tab If this bit is set, the Window Manager will create a scroll bar at the right side of the window to scroll up and down in the document.  This scroll bar must be handled by }{\f6\fs20 TaskMaster}{\f4 ; if you want to create your own scroll bar, leave this bit clear and use the Control Manager to create the scroll bar.\par \par \tab \tab If this bit is set, }{\f6\fs20 fBScroll}{\f4  and }{\f6\fs20 fGrow}{\f4  should also be set.\par \par }{\f6\fs20 fBScroll}{\f4 \tab 11\tab If this bit is set, there will be a bottom scroll bar.  As with }{\f6\fs20 fRScroll}{\f4 , you only use this bit if you want }{\f6\fs20 TaskMaster}{\f4  to handle scrolling for you.\par \par \tab \tab If this bit is set, }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fGrow}{\f4  should also be set.\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 grow box}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fGrow}{\f4 \tab 10\tab If this bit is set, there will be a grow box in the corner formed by the scroll bars at the lower right corner of the window.  If the bit is clear, there will not be a grow box.  As with the scroll bars, this grow box must be handled by }{\f6\fs20 TaskMaster}{\f4 ; to handle a grow box manually, you must create it yourself using the Control Manager.\par \par \tab \tab If this bit is set, }{\f6\fs20 fBScroll}{\f4  and }{\f6\fs20 fRScroll}{\f4  should also be set.\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GrowWindow}}}{\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ZoomWindow}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fFlex}{\f4 \tab 9\tab If this bit is set, the data height and width are flexible.  If the bit is clear, }{\f6\fs20 GrowWindow}{\f4  and }{\f6\fs20 ZoomWindow}{\f4  (called by }{\f6\fs20 TaskMaster}{\f4  to resize the window) will change the origin when the window size changes.\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 zoom box}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fZoom}{\f4 \tab 8\tab If this bit is set, there will be a zoom box at the right end of the title bar; if the bit is clear, there won't be a zoom box.  You must set }{\f6\fs20 fTitle}{\f4  to get a title bar if this bit is set.\par \par }{\f6\fs20 fMove}{\f4 \tab 7\tab In most cases, the title bar for the window is also its drag region.  In other words, you can move the window by dragging the title around.  If you set this bit, things behave as you would expect; if this bit is clear, you can still have a title bar, but the window can't be moved.\par \par }{\f6\fs20 fQContent}{\f4 \tab 6\tab Most of the time, when you click in the content region of a window, you expect the window to become the front window, but you don't expect anything else to happen.  If this bit is set, clicking in the content region of a window not only brings it to the front, but it also acts as if you actually clicked in the content region.  If this bit is clear, clicking in the content region of a window that isn't the front window just brings it to the front.\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ShowWindow}}}{\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HideWindow}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fVis}{\f4 \tab 5\tab If this bit is set, the window is visible; if it is clear, the window exists, but it is invisible.\par \par }\pard \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright {\pard\plain \qj\fi-1800\li4140\keepn\widctlpar\tx3780\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 info bar}}}{\v\f4 \par }\pard \qj\fi-1800\li4140\widctlpar\tx1700\tx3780\adjustright {\f6\fs20 fInfo}{\f4 \tab 4\tab If this bit is set, the window will have an info bar.\par \par \tab \tab If this bit is set, the }{\f6\fs20 wInfoHeight}{\f4  and }{\f6\fs20 wInfoDefProc}{\f4  fields must have values.\par \par }{\f6\fs20 fCtlTie}{\f4 \tab 3\tab In most programs, when a window is not the front window, the controls look different.  Scroll bars and grow boxes, for example, are hollow outlines.  If this bit is set, }{\f6\fs20 TaskMaster}{\f4  will redraw the controls in the proper state to match the window.  If the bit is clear, }{\f6\fs20 TaskMaster}{\f4  leaves the controls alone.\par \par }{\f6\fs20 fAllocated}{\f4 \tab 2\tab This flag is used internally by the Window Manager to determine if it allocated the memory for a window.  It always does for your windows, ignoring whatever value you code.\par \par }{\f6\fs20 fZoomed}{\f4 \tab 1\tab This flag is set if the window is currently in it's zoomed state, and clear if not.\par \par }{\f6\fs20 fHilited}{\f4 \tab 0\tab This flag is used internally by the Window Manager.  You can set or clear the bit; the Window Manager ignores what you code.\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wTitle}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 window\:title}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wTitle}{\f4 \tab This field is a pointer to the title of a window.  The title is a p-string, and must be in a fixed memory location.  If there is no title bar, this field can be set to nil.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wRefCon}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wRefCon}{\f4 \tab Reserved for use by the application.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wZoom}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wZoom}{\f4 \tab This field is a rectangle defining the size of the window when it is in its zoomed state.  You can set the coordinates in the rectangle to 0, in which case the Window Manager picks out default values to zoom to the entire visible screen.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wColor}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wColor}{\f4 \tab This is a reference to a color table.  It is a pointer in a }{\f6\fs20 paramList}{\f4  record, and can be a pointer, handle or resource ID in an }{\f6\fs20 rWindParam1}{\f4  resource.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wYOrigin}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wXOrigin}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20 wYOrigin}{\f4 ,\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wXOrigin}{\f4 \tab These two fields define the starting origin for the window.  Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wDataH}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wDataW}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20 wDataH}{\f4 ,\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wDataW}{\f4 \tab These values define the size of the entire document, in pixels.  Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wMaxH}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wMaxW}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20 wMaxH}{\f4 ,\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wMaxW}{\f4 \tab These values define the maximum size for the window.  If you code 0, the Window Manager will fill in values to let the window grow as big as the visible desktop.  Set these values to 0 if you are not setting the }{\f6\fs20 fGrow}{\f4  bit in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wScrollVer}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wScrollHor}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20 wScrollVer}{\f4 ,\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wScrollHor}{\f4 \tab These fields tell }{\f6\fs20 TaskMaster}{\f4  how many bits to scroll in each direction when the user clicks on a scroll bar arrow.  Because of the way dithered colors are created in 640 mode, you should set }{\f6\fs20 wScrollHor}{\f4  to some multiple of 8.  Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPageVer}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPageHor}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 scroll bar}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs20 wPageVer}{\f4 ,\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wPageHor}{\f4 \tab These fields tell }{\f6\fs20 TaskMaster}{\f4  how many bits to scroll in each direction when the user clicks in the page area of a scroll bar.  In most cases, you will set these values to 0; this tells the Window Manager to pick an appropriate value.  It will use a value 10 pixels smaller than the size of the window, so that paging will leave a little of the old page on the screen.  Set these values to 0 if you are not setting the }{\f6\fs20 fRScroll}{\f4  and }{\f6\fs20 fBScroll}{\f4  bits in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInfoRefCon}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 info bar}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wInfoRefCon}{\f4 \tab This value can be set to anything you like.  It's for your use when creating info bars.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInfoHeight}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 info bar}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wInfoHeight}{\f4 \tab This is the height of the info bar, in pixels.  The width of the info bar matches the width of the window itself, so there is no separate parameter for the width.  This value is only used if }{\f6\fs20 fInfo}{\f4  is set in the }{\f6\fs20 wFrameBits}{\f4  parameter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wFrameDefProc}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wFrameDefProc}{\f4 \tab This pointer points to a subroutine that will be called when the Window Manager needs to draw the window.  For details, see the }{\i\f4 Apple IIGS Toolbox Reference Manual}{\f4 .\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wInfoDefProc}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wInfoDefProc}{\f4 \tab This pointer points to the subroutine to call when the information bar needs to be drawn.  For details, see the }{\i\f4 Apple IIGS Toolbox Reference Manual}{\f4 .\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wContDefProc}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wContDefProc}{\f4 \tab This field points to your update procedure.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPosition}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wPosition}{\f4 \tab This is a rect record.  It determines where the window is and how big it is when the window is first created.  The rectangle, which you specify in global coordinates, defines the size of the content region of the window.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 wPlane}}}{\v\f4 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs20 wPlane}{\f4 \tab To make a new window the front most window, set this field to -1.  To create a window that is behind all of the existing ones, use 0.  You can also pass a specific }{\f6\fs20 grafPortPtr}{\f4  in this parameter, in which case the new window will be right behind the one whose }{\f6\fs20 grafPortPtr}{\f4  you pass.\par \par }{\f6\fs20 wStorage}{\f4 \tab Used to allocate storage for the window.  This parameter is generally set to nil, forcing the Window Manager to allocate the memory for the window record.  For details, see the }{\i\f4 Apple IIGS Toolbox Reference Manual}{\f4 .\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Window Color Tables}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Window Color Tables\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:colors\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindColor resource}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Window color tables are used to define the colors used to draw the various parts of the window, as well as the style for the title bar.  Window color tables can be created with either an }{\f6\fs20 rWindColor}{\f4  resource or a }{\f6\fs20 wColorTbl}{\f4  record.  In either case, the window colors consist of five flag words, as defined below.\par All of the color entries are displacements into the current color table.  Dithered colors are used in 640 mode, so all four color bits are used in both 320 mode and 640 mode.\par \par }\pard \qj\fi-2520\li2880\widctlpar\tx1800\adjustright {\f6\fs20 frameColor}{\f4 \tab bits 15-8\tab Reserved; set to 0.\par \tab bits 7-4\tab This is the outline color for the window frame.  It includes the lines around the edge of the window, the lines around the info bar, the lines outlining the close box and grow box, and the lines used to draw the small boxes inside the grow box.\par \tab bits 3-0\tab Reserved; set to 0.}{\f6\fs20 \par titleColor}{\f4 \tab bits 15-12\tab Reserved; set to 0.\par \tab bits 11-8\tab The background color of an inactive title bar.  This is the color behind both the text of the title, and the color used to fill the title bar itself.\par \tab bits 7-4\tab This is the foreground color of the text when the window is inactive.  This is usually the same as the foreground text color for an active window, but you could set this to a different color, say to get gray text when a window is inactive.\par \tab bits 3-0\tab This is the color of the text when the window is active.}{\f6\fs20 \par tBarColor}{\f4 \tab bits 15-8\tab These eight bits define the type of title bar.  There are three types of title bars:\par \par }\pard \qj\fi-540\li3780\widctlpar\adjustright {\f4 $00\tab Solid title bars are the normal kind, by default a boring black.  The color is actually set by bits 3-0 of this word.\par \par $01\tab Dithered title bars use a checkerboard pattern, alternating between the foreground and background colors set by bits 7-4 and 3-0, respectively.\par \par $02\tab Lines title bars are the sort you see most often, with lines running across the title bar.  Bits 7-4 and 3-0 define the two colors used.\par }\pard \qj\fi-2520\li2880\widctlpar\tx1800\adjustright {\f4 \par \tab bits 7-4\tab This is one of the colors for a dithered title bar, or the color of the lines on a lined title bar.\par \tab bits 3-0\tab This is the second color for a dithered title bar, the background color for a lined title bar, or the solid color used for a solid title bar.\par }{\f6\fs20 growColor}{\f4 \tab bits 15-12\tab These bits are only used on alert frames, where they define the color between the outside line around the window and the heavy line just inside the main outline.\par \tab bits 11-8\tab Reserved; set to 0.\par \tab bits 7-4\tab This is the interior color for the grow box when the window is not selected.\par \tab bits 3-0\tab This is the interior color for the grow box when the window is selected.}{\f6\fs20 \par infoColor}{\f4 \tab bits 15-12\tab These bits are only used on alert frames, where they define the color of the heavy box that runs inside of the main window outline.}{\f6\fs20 \par }{\f4 \tab bits 11-8\tab Reserved; set to 0.\par \tab bits 7-4\tab This is the interior color for an info bar.\par \tab bits 3-0\tab Reserved; set to 0.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 AlertWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 AlertWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AlertWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function AlertWindow (alertFlags: integer; subStrPtr, alertStrPtr: ptr):\par    integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 AlertWindow}{\f4  creates an alert window.  The alert window can display an alert icon, a text message, and one or more buttons; these are all controlled with an alert string.  }{\f6\fs20 AlertWindow}{\f4  maintains control until the user selects a button, then returns the button number.  See "Alert Strings," below, for details on defining the buttons.\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f6\fs20 alertFlags}{\f4 \tab Flags word.\par }\pard \qj\fi-1080\li3960\widctlpar\adjustright {\f4 bits 15-3\tab Reserved; set to 0.\par bits 2-1\tab Indicates the type of reference for the }{\f6\fs20 alertStrPtr}{\f4  parameter:\par }\pard \qj\fi-540\li4860\widctlpar\adjustright {\f4 00\tab }{\f6\fs20 alertStrPtr}{\f4  is a pointer to an alert string.\par 01\tab }{\f6\fs20 alertStrPtr}{\f4  is a handle to an alert string.\par }\pard \qj\fi-540\li4860\keepn\widctlpar\adjustright {\pard\plain \qj\fi-540\li4860\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rAlertString resource}}}{\v\f4 \par }\pard \qj\fi-540\li4860\widctlpar\adjustright {\f4 10\tab }{\f6\fs20 alertStrPtr}{\f4  is the resource ID of an }{\f6\fs20 rAlertString}{\f4  resource.\par }\pard \qj\fi-1080\li3960\widctlpar\adjustright {\f4 bit 0\tab If this bit is 0, the strings referred to by }{\f6\fs20 subStrPtr}{\f4  must be c-strings.  If this bit is 1, the strings should be p-strings.\par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f6\fs20 subStrPtr}{\f4 \tab This parameter is a pointer to an array of pointers, each of which points to a string.  The strings can be either c-strings or p-strings; this is determined by bit 0 of }{\f6\fs20 alertFlags}{\f4 .  For complete details, see "Substitution Strings," below.\par }{\f6\fs20 alertStrPtr}{\f4 \tab This parameter refers to the alert string used to create the alert window.  It can be a pointer, handle, or resource ID, as controlled by bits 2-1 of }{\f6\fs20 alertFlags}{\f4 .  For complete details, see "Alert Strings," below.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Alert Strings\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 alert strings\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 An alert string consists of a series of characters.  We'll break these characters down into named fields for convenience, but the actual alert string is still just a simple sequence of characters.\par The fields in the alert string are:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 size\tab A single character or sequence of characters defining the size of the alert.  The size is generally given by a single character from '1' to '9'.  }{\f6\fs20 AlertWindow}{\f4  creates a window large enough to hold a message with a certain number of characters, adjusting the size for 320 mode or 640 mode screens.\par \par }\pard \qj\li1800\keepn\widctlpar\tx2700\tx3780\tx5040\tx6300\tx7560\adjustright {\f4\ul size}{\f4 \tab }{\f4\ul characters}{\f4 \tab }{\f4\ul 320 height}{\f4 \tab }{\f4\ul 320 width}{\f4 \tab }{\f4\ul 640 height}{\f4 \tab }{\f4\ul 640 width}{\f4 \par '1'\tab 30\tab 46\tab 152\tab 46\tab 200\par '2'\tab 60\tab 62\tab 176\tab 54\tab 228\par '3'\tab 110\tab 62\tab 252\tab 62\tab 300\par '4'\tab 175\tab 90\tab 252\tab 72\tab 352\par '5'\tab 110\tab 54\tab 252\tab 46\tab 400\par '6'\tab 150\tab 62\tab 300\tab 54\tab 452\par '7'\tab 200\tab 80\tab 300\tab 62\tab 500\par '8'\tab 250\tab 108\tab 300\tab 72\tab 552\par }\pard \qj\li1800\widctlpar\tx2700\tx3780\tx5040\tx6300\tx7560\adjustright {\f4 '9'\tab 300\tab 134\tab 300\tab 80\tab 600\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 \par \tab A size of '0' has a special meaning.  In this case, the size character is followed by 8 other bytes, laid out in memory exactly as a }{\f6\fs20 rect}{\f4  record would appear in memory.  This rectangle record gives the exact size and location for the alert window.\par \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 alert icons}}}{\v\f4 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 icon\tab A single character or series of characters that specify what icon will appear at the top left corner of the alert.  The icon is generally given as one of the following single characters:\par \par }\pard \qj\li1800\widctlpar\adjustright {\f4\ul character}{\f4 \tab }{\f4\ul icon}{\f4 \par '0'\tab (no icon)\par '2'\tab stop\par '3'\tab note\par '4'\tab caution\par '5'\tab disk\par '6'\tab disk swap\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\f4 \par \tab An icon character of '1' has a special meaning.  In this case, the icon is followed in memory by a record consisting of a pointer to an icon image, an integer specifying the width of the icon in bytes, and an integer specifying the height of the icon in pixels.  This facility can be used to create custom icons for }{\f6\fs20 AlertWindow}{\f4 .\par \par separator\tab A separator character.  You can use any character you like for a separator, so long as you use the same character here and in the next separator field.  It is customary to use a / character for the separator character.\par \par message\tab This is the text that will be displayed in the alert.  The message cannot exceed 1000 characters.  If the message is too long to fit on one line in the window, the message will be automatically broken at a word boundary, and the remaining part of the message displayed on a new line.  You can also force a new line by imbedding the characters }{\f6\fs20 \\n}{\f4  in the text.\par \par separator\tab This separator character signals the end of the message and the start of the button definitions.  This character must match the character used for the first separator.\par \par buttons\tab This field contains the titles for up to three buttons.  If more than one button is used, separate the titles with additional separator characters.  The buttons will all be placed at the bottom of the window.  They will be centered, and all of the buttons will have the same width.  The width will be determined by the longest sequence of text in any of the button titles.  The total length of the button text must not exceed 80 characters.\par \par \tab One of the buttons may be preceded with a ^ character.  This character does not appear in the button text; instead, it signals that the button is the default button.  The default button will be bold, and will use the return key as a key equivalent.  Because of this special use, to use a ^ character as an actual character anywhere in the alert string, you must code two ^ characters.\par \par terminator\tab The end of the alert string is marked with a null character; you can code this character by placing \\$00 at the end of the string.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Substitution Strings\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 substitution strings\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Substitution strings let you specify where a string should appear in the alert string without actually coding the string itself as a fixed value.  Substitution strings come in two flavors.\par The first type of substitution string is a # character followed by a numeric character from '0' to '6'.  These two characters will be replaced by one of these standard strings:\par \par }\pard \qj\li720\widctlpar\adjustright {\f4 #0\tab OK\par #1\tab Cancel\par #2\tab Yes\par #3\tab No\par #4\tab Try again\par #5\tab Quit\par #6\tab Continue\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The other type of substitution string is an asterisk (*) followed by a numeric character from '0' to '9'.  In this case, the characters are still replaced by a string, but the string is set using a parameter to the }{\f6\fs20 AlertWindow}{\f4  call.  This lets you set up the strings at run time, rather than compile time.  The strings themselves are taken from the array of strings passed as the }{\f6\fs20 subStrPtr}{\f4  in the call to }{\f6\fs20 AlertWindow}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 BeginUpdate}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 BeginUpdate\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 BeginUpdate\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure BeginUpdate (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 BeginUpdate}{\f4  is used when you find an update event for a window.  At that point, you call }{\f6\fs20 BeginUpdate}{\f4 , which replaces the visible region for the window with the intersection of the visible region and update region \endash  in other words, all of the parts of the window that have to be redrawn.\par The next step is to call the procedure that draws the contents of the window.  During this update cycle, the origin must not be changed, and }{\f6\fs20 SetPort}{\f4  must not be called.\par Once the window's contents have been drawn, call }{\f6\fs20 EndUpdate}{\f4 .  Every call to }{\f6\fs20 BeginUpdate}{\f4  must be matched by exactly one call to }{\f6\fs20 EndUpdate}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 BringToFront}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 BringToFront\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 BringToFront\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure BringToFront (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Makes the specified window the front window, bringing it to the front of all other windows and posting appropriate update events to force the windows involved to be updated.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CloseWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 CloseWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 CloseWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure CloseWindow (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 CloseWindow}{\f4  gets rid of a window.  It disposes of all of the controls in the window, disposes of the memory used by the Window Manager for the window's window record, and erases the window on the desktop.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 DoModalWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 DoModalWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DoModalWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function DoModalWindow (event: eventRecord;\par    updateProc, eventHook, beepProc: procPtr; flags: integer): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 DoModalWindow}{\f4  handles interactions between the user and a modal dialog.  The window representing the modal dialog should be opened before this call.\par The value returns is the control ID for the control selected.\par Normally, you will open a dialog window, then drop into a loop that calls }{\f6\fs20 DoModalWindow}{\f4  repeatedly, stopping when the user selects some control that closes the dialog.  At that time, you would check the controls to see how they are set, taking whatever action is appropriate.  You can, of course, check the controls and take action in the loop that calls }{\f6\fs20 DoModalWindow}{\f4 .\par If the dialog has any controls that allow text to be edited, and if you have set the proper flags bit to allow an I beam cursor, }{\f6\fs20 DoModalWindow}{\f4  may exit with the cursor still set to an I beam.  For that reason, you should always call }{\f6\fs20 InitCursor}{\f4  after leaving the }{\f6\fs20 DoModalWindow}{\f4  loop.\par \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 event}{\f4 \tab An event record that will be used by }{\f6\fs20 DoModalWindow}{\f4  to call the Event Manager.\par }{\f6\fs20 updateProc}{\f4 \tab Address of a custom update procedure.  For the purposes of this course, you should pass nil.  For alternatives, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par }{\f6\fs20 eventHook}{\f4 \tab Address of a subroutine that will be called right after the Event Manager.  For the purposes of this course, you can pass nil.  For alternatives, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par }{\f6\fs20 beepProc}{\f4 \tab Address of a custom beep procedure, called when the user clicks outside of the dialog.  For the purposes of this course, you can pass nil.  For alternatives, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par }{\f6\fs20 flags}{\f4 \tab Flags word, controlling options for }{\f6\fs20 DoModalWindow}{\f4 :\par }\pard \qj\fi-1080\li3240\widctlpar\adjustright {\f4 bit 15\tab If this bit is set, the dialog can be moved.  If the bit is clear, the dialog can't be moved.\par \par \tab If you want a moveable dialog, you have to set this bit }{\i\f4 and}{\f4  make sure the dialog has a title bar.\par \par bit 14\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  will try to call the update procedure for any window that needs to be updated.  If this bit is not set, windows other than the dialog itself and desk accessory windows won't get updated unless you do it manually in the loop that calls }{\f6\fs20 DoModalWindow}{\f4 .\par \par bits 13-6\tab These bits are reserved, and must be set to 0.\par \par bit 5\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  returns any time it handles an activate event.  If this bit is clear, }{\f6\fs20 DoModalWindow}{\f4  doesn't return after an activate event; instead, it loops and checks for another event.\par \par bit 4\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  allows desk accessories to operate, and does everything appropriate to handle them.\par \par bit 3\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  will switch the cursor from the normal arrow to an I-beam cursor when the cursor is over an edit line or text edit control.\par \par bit 2\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  calls }{\f6\fs20 MenuKey}{\f4  to see if keys pressed while the open-apple key is pressed are menu command equivalents.  If this bit is clear, }{\f6\fs20 DoModalWindow}{\f4  returns all key events except the standard keyboard equivalents for cut (}{\outl\f4\fs20 \u-3\'f0}{\f4 X), copy (}{\outl\f4\fs20 \u-3\'f0}{\f4 C), paste (}{\outl\f4\fs20 \u-3\'f0}{\f4 V), and undo (}{\outl\f4\fs20 \u-3\'f0}{\f4 Z).  Those four key equivalents are always handled by }{\f6\fs20 DoModalWindow}{\f4 .\par \par bit 1\tab If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  will allow the user to pull down menus and use menu commands.  }{\f6\fs20 DoModalWindow}{\f4  will handle any of the standard editing commands, but your program will have to handle any other menu commands.\par \par bit 0\tab If this bit is clear, }{\f6\fs20 DoModalWindow}{\f4  uses the Scrap Manager for cut, copy and paste.  If this bit is set, }{\f6\fs20 DoModalWindow}{\f4  doesn't use the Scrap Manager.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 EndUpdate}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 EndUpdate\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 EndUpdate\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure EndUpdate (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 EndUpdate}{\f4  restores the visible region for a window.  Use }{\f6\fs20 EndUpdate}{\f4  to balance }{\f6\fs20 BeginUpdate}{\f4  calls.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FindWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FindWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FindWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FindWindow (var whichWindow: grafPortPtr; pointX, pointY: integer):\par    integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 FindWindow}{\f4  checks the location of the cursor and returns a value indicating where the cursor was located.  If the cursor was located in a window, }{\f6\fs20 whichWindow}{\f4  is set to the window pointer; otherwise, }{\f6\fs20 whichWindow}{\f4  is set to nil.\par The various values }{\f6\fs20 FindWindow}{\f4  can return, and what they mean, are shown in Table A-6.\par \par }\pard \qj\li360\keepn\widctlpar\tx1440\tx3240\adjustright {\f4\ul number}{\f4 \tab }{\f4\ul name}{\f4 \tab }{\f4\ul description}{\f4 \par 0\tab }{\f6\fs20 wNoHit}{\f4 \tab Not in anything.\par 16\tab }{\f6\fs20 wInDesk}{\f4 \tab Somewhere on the desktop.\par 17\tab }{\f6\fs20 wInMenuBar}{\f4 \tab In the system menu bar.\par 19\tab }{\f6\fs20 wInContent}{\f4 \tab In the content area of a window.\par 20\tab }{\f6\fs20 wInDrag}{\f4 \tab In the title bar of a window.\par 21\tab }{\f6\fs20 wInGrow}{\f4 \tab In the grow region of a window.\par 22\tab }{\f6\fs20 wInGoAway}{\f4 \tab In the close box of a window.\par 23\tab }{\f6\fs20 wInZoom}{\f4 \tab In the zoom box of a window.\par 24\tab }{\f6\fs20 wInInfo}{\f4 \tab In the information bar of a window.\par }\pard \qj\fi-2880\li3240\keepn\widctlpar\tx1440\tx3240\adjustright {\f4 25\tab }{\f6\fs20 wInSpecial}{\f4 \tab In a special menu item bar.  These are the menus with numbers from 250 to 255.\par }\pard \qj\li360\keepn\widctlpar\tx1440\tx3240\adjustright {\f4 26\tab }{\f6\fs20 wInDeskItem}{\f4 \tab In a desk accessory.\par 27\tab }{\f6\fs20 wInFrame}{\f4 \tab In the window, but not in any specific area defined in this table.\par 28\tab }{\f6\fs20 wInactMenu}{\f4 \tab In an inactive menu item.\par >32767\tab }{\f6\fs20 wInSysWindow}{\f4 \tab In a system window.\par \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table A-6:  }{\f6\fs20 FindWindow}{\f4  Return Codes\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 FrontWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 FrontWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 FrontWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function FrontWindow: grafPortPtr;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns a pointer to the first visible window in the window list.  If there are no visible windows, }{\f6\fs20 FrontWindow}{\f4  returns nil.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetContentOrigin}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetContentOrigin\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetContentOrigin\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetContentOrigin (theWindow: grafPortPtr): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 GetContentOrigin}{\f4  returns the origin for a window.  The origin is used by }{\f6\fs20 TaskMaster}{\f4  to handle scroll bars.\par The two integers in the origin are returned as a single long integer.  The vertical origin is returned in the least significant word, while the horizontal origin is returned in the most significant word.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GetNextWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 GetNextWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GetNextWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function GetNextWindow (theWindow: grafPortPtr): grafPortPtr;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Returns a pointer to the window that is just behind }{\f6\fs20 theWindow}{\f4 , or nil if }{\f6\fs20 theWindow}{\f4  is the rearmost window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HandleDiskInsert}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HandleDiskInsert\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HandleDiskInsert\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function HandleDiskInsert (flags, devNum: integer): longint;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab GS/OS errors are returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In this course, }{\f6\fs20 HandleDiskInsert}{\f4  is used to check the various disk drives for an unformatted disk.  If an unformatted disk is found, the user is presented with a series of dialogs that will result in either formatting the disk or ejecting the disk.  For this use, }{\f6\fs20 flags}{\f4  should be $C000, and }{\f6\fs20 devNum}{\f4  should be 0.  The value returned by }{\f6\fs20 HandleDiskInsert}{\f4  is not used, and should be discarded.\par For details about this call, as well as some other uses you can make of the call, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 HideWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 HideWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 HideWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure HideWindow (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 HideWindow}{\f4  makes a window invisible.  If the window is already invisible, }{\f6\fs20 HideWindow}{\f4  does nothing.  If the window is the front window, }{\f6\fs20 HideWindow}{\f4  brings the next visible window in the window list to front.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 InvalRect}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 InvalRect\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 InvalRect\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure InvalRect (var badRect: rect);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The specified rectangle is added to the update region.  This causes the area to be redrawn on the window's next update cycle.\par This call has one nasty side effect.  The values in the rectangle will be changed, so you should not use the values in the rectangle after calling }{\f6\fs20 InvalRect}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NewWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NewWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function NewWindow (paramListPtr: paramList): grafPortPtr;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0E01\tab paramLenErr}{\f4 \tab The first word of the parameter list is the wrong size\par \tab }{\f6\fs20 $0E02\tab allocateErr}{\f4 \tab Unable to allocate the window record\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Creates and draws a new window.  }{\f6\fs20 NewWindow}{\f4  returns nil if an error occurs.\par See "Window Manager Definitions," later in this appendix, for the definition of the parameter list record.  See "Window Parameters," earlier in this section, for a description of the various fields in the record.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 NewWindow2}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 NewWindow2\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NewWindow2\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function NewWindow2 (titlePtr: pStringPtr; refCon: univ longint;\par    contentDrawPtr, defProcPtr: procPtr; paramTableDescriptor: integer;\par    paramTableRef:  univ longint; resourceType: integer): grafPortPtr;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0E01\tab paramLenErr}{\f4 \tab The first word of the parameter list is the wrong size\par \tab }{\f6\fs20 $0E02\tab allocateErr}{\f4 \tab Unable to allocate the window record\par \tab Control Manager errors returned unchanged\par \tab Memory Manager errors returned unchanged\par \tab Resource Manager errors returned unchanged\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Creates and draws a new window.  }{\f6\fs20 NewWindow2}{\f4  returns nil if an error occurs.\par There are several aspects of }{\f6\fs20 NewWindow2}{\f4  that are not used in this course, and will not be discussed here.  See }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4  for a complete description of }{\f6\fs20 NewWindow2}{\f4 .\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs20 titlePtr}{\f4 \tab This is a pointer to the window title, given as a p-string.  The title must remain in a fixed location in memory.\par \par \tab If a lined or dithered window is used, the pattern runs right up to the edge of the window title.  For that reason, it is customary to pad the window title on the left and right with spaces.\par \par }{\f6\fs20 refCon}{\f4 \tab This value will be used in place of the }{\f6\fs20 wRefCon}{\f4  in the window definition.  The }{\f6\fs20 wRefCon}{\f4  value is for your application's use; the Window Manager does not use it for any reason.\par \par }{\f6\fs20 contentDrawPtr}{\f4 \tab This is a pointer to a subroutine that will draw the content region of the window.  This subroutine is called when the window needs to be updated.  }{\f6\fs20 BeginUpdate}{\f4  has already been called, and }{\f6\fs20 EndUpdate}{\f4  will be called after return.  Since this subroutine is called during an update, you must not change the origin or call }{\f6\fs20 SetPort}{\f4  in this subroutine.\par \par }\pard \qj\fi-2520\li2880\keepn\widctlpar\adjustright {\v\f4 \tab }{\pard\plain \qj\fi-2520\li2880\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 DataBank directive}}}{\v\f4 \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f4 \tab As with all subroutines called from the tools, the data bank register will not be valid.  Use the }{\f6\fs20 DataBank}{\f4  directive to correct the data bank register.\par \par }{\f6\fs20 defProcPtr}{\f4 \tab This parameter points to a window definition procedure.  This parameter is always set to nil in this course.  See the }{\i\f4 Apple IIGS Toolbox Reference Manual}{\f4  for details.\par \par }{\f6\fs20 paramTableDescriptor}{\f4 \tab This parameter tells }{\f6\fs20 NewWindow2}{\f4  what is being passed in }{\f6\fs20 paramTableRef}{\f4 .  The possibilities are:\par \par }\pard \qj\fi-540\li3780\widctlpar\adjustright {\f4 0\tab }{\f6\fs20 paramTableRef}{\f4  is a pointer to a window template.\par 1\tab }{\f6\fs20 paramTableRef}{\f4  is a handle to a window template.\par 2\tab }{\f6\fs20 paramTableRef}{\f4  is the resource ID of a window template.  (This is the only option used in this course.)\par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f4 \par }{\f6\fs20 paramTableRef}{\f4 \tab This is a pointer, handle, or resource ID for a window template.\par \par }{\f6\fs20 resourceType}{\f4 \tab This parameter is the resource type, used when }{\f6\fs20 paramTableRef}{\f4  is a resource ID.  The only resource type used in this course is $800E, }{\f6\fs20 rWindParam1}{\f4 .\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetContentOrigin}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetContentOrigin\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetContentOrigin\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetContentOrigin (xOrigin, yOrigin: integer;\par    theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sets the origin for the window and generates an update event.  If }{\f6\fs20 TaskMaster}{\f4  is handling scrolling in the window, this call has the effect of moving the document under program control.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetDataSize}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetDataSize\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetDataSize\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetDataSize (dataWidth, dataHeight: integer;\par    theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Changes the height and width of the data area (the size of the entire document).  You still need to change the scroll bars and redraw the window (or force an update with }{\f6\fs20 InvalRect}{\f4 ).\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetPage}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetPage\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetPage\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetPage (hPage, vPage: integer; theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Assuming }{\f6\fs20 TaskMaster}{\f4  is being used to manage scroll bars, }{\f6\fs20 SetPage}{\f4  sets the number of pixels the window will scroll when the user clicks in the page region of one of the scroll bars.  If this value is set to 0, }{\f6\fs20 TaskMaster}{\f4  will scroll ten pixels less than the size of the window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetScroll}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetScroll\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetScroll\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetScroll (hScroll, vScroll: integer; theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Assuming }{\f6\fs20 TaskMaster}{\f4  is being used to manage scroll bars, }{\f6\fs20 SetScroll}{\f4  sets the number of pixels the window will scroll when the user clicks on an arrow on one of the scroll bars.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetSysWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetSysWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetSysWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetSysWindow (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Makes the window a system window.  You should do this for any window opened by a desk accessory.  You would not normally make this call for an application window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 SetWTitle}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 SetWTitle\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 SetWTitle\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure SetWTitle (title: univ pStringPtr; theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 title}{\f4  should be a pointer to a p-string.  Because of the way the parameter is defined, you can pass an actual pointer, the address of a variable, the address of a string constant, or a variable of type }{\f6\fs20 pString}{\f4 .  The title for the window is changed to the one you pass, and the window is redrawn.\par The title string you pass must remain at a fixed location in memory, and must not be changed unless the change is followed by another call to }{\f6\fs20 SetWTitle}{\f4 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 ShowWindow}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 ShowWindow\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 ShowWindow\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 procedure ShowWindow (theWindow: grafPortPtr);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 ShowWindow}{\f4  makes an invisible window visible and draws the window.  If the window is already visible, }{\f6\fs20 ShowWindow}{\f4  does nothing.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TaskMaster}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TaskMaster\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMaster\bxe }}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function TaskMaster (taskMask: integer; var theTaskRec: eventRecord): integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab }{\f6\fs20 $0E03\tab taskMaskErr}{\f4 \tab Some reserved bits were not clear in the }{\f6\fs20 wmTaskMask}{\f4  field of the }{\f6\fs20 WmTaskRec}{\f4  record\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TaskMaster}{\f4  performs the normal housekeeping functions associated with an event loop.  It gets an event, does some standard processing on the event that must be done in virtually any desktop program, then returns information about the event in an expanded event record.\par The }{\f6\fs20 taskMask}{\f4  parameter is passed to }{\f6\fs20 GetNextEvent}{\f4  as the event mask.  The event record is also passed to }{\f6\fs20 GetNextEvent}{\f4 , but it can be modified by }{\f6\fs20 TaskMaster}{\f4  as }{\f6\fs20 TaskMaster}{\f4  performs the various housekeeping tasks.\par While }{\f6\fs20 TaskMaster}{\f4  can do a great deal, it is possible for the programmer to ask }{\f6\fs20 TaskMaster}{\f4  to do some things but not others.  The exact list of tasks performed by }{\f6\fs20 TaskMaster}{\f4  are controlled by the }{\f6\fs20 taskMask}{\f4  field in the event record, which should be set before }{\f6\fs20 TaskMaster}{\f4  is called.  The bit flags that control task selection are shown in Table A-7.\par \par }\pard \qj\fi-2700\li3060\widctlpar\tx2520\adjustright {\f6\fs20 tmMenuKey}{\f4 \tab 0\tab Call }{\f6\fs20 MenuKey}{\f4  to see if a keypress is a menu keyboard equivalent.\par }{\f6\fs20 tmUpdate}{\f4 \tab 1\tab For window update events, call the window's default draw routine.\par }{\f6\fs20 tmFindW}{\f4 \tab 2\tab Call }{\f6\fs20 FindWindow}{\f4  for mouse down events.\par }{\f6\fs20 tmMenuSel}{\f4 \tab 3\tab Call }{\f6\fs20 MenuSelect}{\f4  when }{\f6\fs20 FindWindow}{\f4  determines that a mouse down event occurred in a menu bar.\par }{\f6\fs20 tmOpenDA}{\f4 \tab 4\tab Open a desk accessory when }{\f6\fs20 MenuSelect}{\f4  determines that a menu event was a selection of an NDA.\par }{\f6\fs20 tmSysClick}{\f4 \tab 5\tab When }{\f6\fs20 FindWindow}{\f4  returns an event from a system window (an NDA window is a system window), call }{\f6\fs20 SystemClick}{\f4  to handle the event.\par }{\f6\fs20 tmDragW}{\f4 \tab 6\tab If }{\f6\fs20 FindWindow}{\f4  returns }{\f6\fs20 wInDrag}{\f4 , handle moving the window around on the screen.\par }{\f6\fs20 tmContent}{\f4 \tab 7\tab If }{\f6\fs20 FindWindow}{\f4  detects an event in a window's content region, and the window is not the active window, select the window.\par }{\f6\fs20 tmClose}{\f4 \tab 8\tab If }{\f6\fs20 FindWindow}{\f4  detects a mouse down in a close box, call }{\f6\fs20 TrackGoAway}{\f4 .  If }{\f6\fs20 TrackGoAway}{\f4  returns true, return }{\f6\fs20 wInGoAway}{\f4 ; otherwise, return }{\f6\fs20 nullEvt}{\f4 .\par }{\f6\fs20 tmZoom}{\f4 \tab 9\tab If }{\f6\fs20 FindWindow}{\f4  detects a mouse down in a zoom box, call }{\f6\fs20 TrackZoom}{\f4 .  If }{\f6\fs20 TrackZoom}{\f4  returns true, call }{\f6\fs20 ZoomWindow}{\f4  to change the window's size.\par }{\f6\fs20 tmGrow}{\f4 \tab 10\tab If }{\f6\fs20 FindWindow}{\f4  detects a mouse down in the grow box of a window, call }{\f6\fs20 GrowWindow}{\f4  to allow the window's size to be changed, then }{\f6\fs20 SizeWindow}{\f4  to actually update the window's size.\par }{\f6\fs20 tmScroll}{\f4 \tab 11\tab Handle scroll bars.\par }{\f6\fs20 tmSpecial}{\f4 \tab 12\tab Handle special menu items.\par }{\f6\fs20 tmCRedraw}{\f4 \tab 13\tab When a window is activated or deactivated, redraw the controls in the correct state.\par }{\f6\fs20 tmInactive}{\f4 \tab 14\tab If an inactive menu item is selected, return }{\f6\fs20 wInactMenu}{\f4 .  (This is generally used to put up a help dialog telling the user what the menu is for, or what has to happen before it is active.)\par }{\f6\fs20 tmInfo}{\f4 \tab 15\tab Don't activate inactive windows when a mouse down event occurs inside of the information bar of the window.\par }{\f6\fs20 tmContentControls}{\f4 \tab 16\tab If }{\f6\fs20 FindWindow}{\f4  returns }{\f6\fs20 wInContent}{\f4 , call }{\f6\fs20 FindControl}{\f4  and }{\f6\fs20 TrackControl}{\f4  to handle normal control actions.\par }{\f6\fs20 tmControlKey}{\f4 \tab 17\tab Pass key events to controls for control key equivalents.\par }{\f6\fs20 tmControlMenu}{\f4 \tab 18\tab Pass menu events to controls in the active window.\par }{\f6\fs20 tmMultiClick}{\f4 \tab 19\tab Check for multiple clicks and return information about them.\par }\pard \qj\fi-2700\li3060\keepn\widctlpar\tx2520\adjustright {\f6\fs20 tmIdleEvents}{\f4 \tab 20\tab Send idle events to the controls in the window.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table A-7:  }{\f6\fs20 TaskMaster}{\f4  }{\f6\fs20 taskMask}{\f4  Codes\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 TaskMasterDA}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 TaskMasterDA\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 TaskMasterDA\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 NDA}}}{\v\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 function TaskMasterDA (eventMask: integer; var taskRecPtr: eventRecord):\par     integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi-5220\li5220\keepn\widctlpar\tx1800\tx2700\tx5220\adjustright {\f4 Possible Errors:\tab None\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 TaskMasterDA}{\f4  is an alternate entry point for }{\f6\fs20 TaskMaster}{\f4 ; it is used in New Desk Accessories.\par eventMask is not used; it is included here to make }{\f6\fs20 TaskMasterDA}{\f4  calls look more like }{\f6\fs20 TaskMaster}{\f4  calls.\par }{\f6\fs20 taskRecPtr}{\f4  is a pointer to an event record.  This is both an input and an output.  The NDA should pass the task record that was passed to the NDA; }{\f6\fs20 TaskMasterDA}{\f4  will act on the event, modifying fields and returning an appropriate event code.  From there, the event is handled exactly as it would be handled in an application.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 Window Manager Definitions}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\cgrid {\tc {\b\v\f4 }{\b\v\f4 Window Manager Definitions\tcl3}}}{\b\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \widctlpar\adjustright {\f6\fs20 type\par    (* Document and alert window color table *)\par    wColorTbl = record\par       frameColor: integer;\par       titleColor: integer;\par       tBarColor:  integer;\par       growColor:  integer;\par       infoColor:  integer;\par       end;\par    wColorPtr = ^wColorTbl;\par \par    \{Window parameter list\}\par    paramList = record\par       paramLength:   integer;\par       wFrameBits:    integer;\par       wTitle:        pStringPtr;\par       wRefCon:       longint;\par       wZoom:         rect;\par       wColor:        wColorPtr;\par       wYOrigin:      integer;\par       wXOrigin:      integer;\par       wDataH:        integer;\par       wDataW:        integer;\par       wMaxH:         integer;\par       wMaxW:         integer;\par       wScrollVer:    integer;\par       wScrollHor:    integer;\par       wPageVer:      integer;\par       wPageHor:      integer;\par       wInfoRefCon:   longint;\par       wInfoHeight:   integer;\par       wFrameDefProc: procPtr;\par       wInfoDefProc:  procPtr;\par       wContDefProc:  procPtr;\par       wPosition:     rect;\par       wPlane:        grafPortPtr;\par       wStorage :     windRecPtr;\par       end;\par    paramListPtr = ^paramList;\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Tool and GS/OS Errors}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Tool and GS/OS Errors\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 errors}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 tool errors}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 GS/OS errors}}}{\v\f4 \par }{\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 System Failure Errors\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0001\tab pdosUnClmdIntErr}{\f4 \tab Unclaimed interrupt\par }{\f6\fs20 $0004\tab divByZeroErr}{\f4 \tab Division by zero\par }{\f6\fs20 $000A\tab pdosVCBErr}{\f4 \tab Volume control block is not useable\par }{\f6\fs20 $000B\tab pdosFCBErr}{\f4 \tab File control block is not useable\par }{\f6\fs20 $000C\tab pdosBlk0Err}{\f4 \tab Block zero allocated illegally\par }{\f6\fs20 $000D\tab pdosIntShdwErr}{\f4 \tab Interrupt with I/O shadowing off\par }{\f6\fs20 $0015\tab segLoader1Err}{\f4 \tab Segment loader error\par }{\f6\fs20 $0017\tab sPackage0Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0018\tab package1Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0019\tab package2Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $001A\tab package3Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $001B\tab package4Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $001C\tab package5Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $001D\tab package6Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $001E\tab package7Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0020\tab package8Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0021\tab package9Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0022\tab package10Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0023\tab package11Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0024\tab package12Err}{\f4 \tab Can't load a package\par }{\f6\fs20 $0025\tab putOfMemErr}{\f4 \tab Out of memory\par }{\f6\fs20 $0026\tab segLoader2Err}{\f4 \tab Segment loader error\par }{\f6\fs20 $0027\tab fMapTrshdErr}{\f4 \tab File map destroyed\par }{\f6\fs20 $0028\tab stkOvrFlwErr}{\f4 \tab Stack overflow\par }{\f6\fs20 $0030\tab psInstDiskErr}{\f4 \tab Insert disk alert\par }{\f6\fs20 $0032-$0053}{\f4 \tab Memory Manager errors\par }{\f6\fs20 $0100\tab stupVolMntErr}{\f4 \tab Can't mount system startup volume\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 GS/OS\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $01\tab badSystemCall}{\f4 \tab Bad GS/OS call number\par }{\f6\fs20 $04\tab invalidPcount}{\f4 \tab The parameter count is out of range\par }{\f6\fs20 $07\tab gsosActive}{\f4 \tab GS/OS is busy\par }{\f6\fs20 $10\tab devNotFound}{\f4 \tab Device not found\par }{\f6\fs20 $11\tab invalidDevNum}{\f4 \tab Invalid device number\par }{\f6\fs20 $20\tab drvrBadReq}{\f4 \tab Invalid request\par }{\f6\fs20 $21\tab drvrBadCode}{\f4 \tab Invalid control or status code\par }{\f6\fs20 $22\tab drvrBadParm}{\f4 \tab Bad call parameter\par }{\f6\fs20 $23\tab drvrNotOpen}{\f4 \tab Character device not open\par }{\f6\fs20 $24\tab drvrPriorOpen}{\f4 \tab Character device is already open\par }{\f6\fs20 $25\tab irqTableFull}{\f4 \tab Interrupt table full\par }{\f6\fs20 $26\tab drvrNoResrc}{\f4 \tab Resources are not available\par }{\f6\fs20 $27\tab drvrIOError}{\f4 \tab I/O error\par }{\f6\fs20 $28\tab drvrNoDevice}{\f4 \tab No device connected\par }{\f6\fs20 $29\tab drvrBusy}{\f4 \tab Driver is busy\par }{\f6\fs20 $2B\tab drvrWrtProt}{\f4 \tab Device is write protected\par }{\f6\fs20 $2C\tab drvrBadCount}{\f4 \tab Invalid byte count\par }{\f6\fs20 $2D\tab drvrBadBlock}{\f4 \tab Invalid block address\par }{\f6\fs20 $2E\tab drvrDiskSwitch}{\f4 \tab The disk has been switched\par }{\f6\fs20 $2F\tab drvrOffLine}{\f4 \tab Device offline or no media present\par }{\f6\fs20 $40\tab badPathSyntax}{\f4 \tab Invalid path name syntax\par }{\f6\fs20 $43\tab invalidRefNum}{\f4 \tab Invalid reference number\par }{\f6\fs20 $44\tab pathNotFound}{\f4 \tab Subdirectory does not exist\par }{\f6\fs20 $45\tab volNotFound}{\f4 \tab Volume not found\par }{\f6\fs20 $46\tab fileNotFound}{\f4 \tab File not found\par }{\f6\fs20 $47\tab dupPathname}{\f4 \tab Create or rename attempted with a name that already exists\par }{\f6\fs20 $48\tab volumeFull}{\f4 \tab The volume is full\par }{\f6\fs20 $49\tab volDirFull}{\f4 \tab The volume directory is full\par }{\f6\fs20 $4A\tab badFileFormat}{\f4 \tab Version error (incompatible file type)\par }{\f6\fs20 $4B\tab badStoreType}{\f4 \tab Unsupported or incorrect storage type\par }{\f6\fs20 $4C\tab eofEncountered}{\f4 \tab End of file encountered\par }{\f6\fs20 $4D\tab outOfRange}{\f4 \tab Position out of range\par }{\f6\fs20 $4E\tab invalidAccess}{\f4 \tab Access not allowed\par }{\f6\fs20 $4F\tab buffTooSmall}{\f4 \tab Buffer too small\par }{\f6\fs20 $50\tab fileBusy}{\f4 \tab File is already open\par }{\f6\fs20 $51\tab dirError}{\f4 \tab Directory error\par }{\f6\fs20 $52\tab unknownVol}{\f4 \tab Unknown volume type\par }{\f6\fs20 $53\tab paramRangeError}{\f4 \tab Parameter out of range\par }{\f6\fs20 $54\tab outOfMem}{\f4 \tab Out of memory\par }{\f6\fs20 $57\tab dupVolume}{\f4 \tab Duplicate volume name\par }{\f6\fs20 $58\tab notBlockDev}{\f4 \tab Not a block device\par }{\f6\fs20 $59\tab invalidLevel}{\f4 \tab Invalid file level\par }{\f6\fs20 $5A\tab damagedBitMap}{\f4 \tab Block number too large\par }{\f6\fs20 $5B\tab badPathNames}{\f4 \tab Invalid path names for }{\f6\fs20 ChangePath}{\f4 \par }{\f6\fs20 $5C\tab notSystemFile}{\f4 \tab Not an executable file\par }{\f6\fs20 $5D\tab osUnsupported}{\f4 \tab Operating system not supported\par }{\f6\fs20 $5F\tab stackOverflow}{\f4 \tab Too many applications on stack\par }{\f6\fs20 $60\tab dataUnavail}{\f4 \tab Data unavailable\par }{\f6\fs20 $61\tab endOfDir}{\f4 \tab End of directory has been reached\par }{\f6\fs20 $62\tab invalidClass\tab }{\f4 Invalid FST call class\par }{\f6\fs20 $63\tab resForkNotFound}{\f4 \tab The file does not contain a required resource\par }{\f6\fs20 $64\tab invalidFSTID}{\f4 \tab Invalid FST number\par }{\f6\fs20 $65\tab invalidFSTop}{\f4 \tab Invalid FST operation\par }{\f6\fs20 $67\tab devNameErr}{\f4 \tab A device exists with the same name as the replacement name\par }{\f6\fs20 $70\tab resExistsErr}{\f4 \tab Cannot expand file; resource already exists\par }{\f6\fs20 $71\tab resAddErr}{\f4 \tab Cannot add a resource fork to this kind of file\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Tool Locator\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0001\tab toolNotFoundErr}{\f4 \tab The tool was not found\par }{\f6\fs20 $0002\tab funcNotFoundErr}{\f4 \tab The tool function was not found\par }{\f6\fs20 $0103\tab TLBadRecFlag}{\f4 \tab The StartStop record is invalid\par }{\f6\fs20 $0104\tab TLCantLoad}{\f4 \tab A tool cannot be loaded\par }{\f6\fs20 $0110\tab toolVersionErr}{\f4 \tab The requested minimum tool version was not available\par }{\f6\fs20 $0111\tab messNotFoundErr}{\f4 \tab The specified message was not found\par }{\f6\fs20 $0112\tab messageOvfl}{\f4 \tab No message numbers are available\par }{\f6\fs20 $0113\tab nameTooLong}{\f4 \tab The message name is too long\par }{\f6\fs20 $0120\tab reqNotAccepted}{\f4 \tab Nobody accepted the request\par }{\f6\fs20 $0121\tab srqDuplicateName}{\f4 \tab Duplicate name\par }{\f6\fs20 $0122\tab invalidSendRequest}{\f4 \tab Bad combination of }{\f6\fs20 reqCode}{\f4  and }{\f6\fs20 target}{\f4 \par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Memory Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0201\tab memErr}{\f4 \tab Unable to allocate memory\par }{\f6\fs20 $0202\tab emptyErr}{\f4 \tab Illegal operation on an empty handle\par }{\f6\fs20 $0203\tab notEmptyErr}{\f4 \tab Illegal operation on a handle that is not empty\par }{\f6\fs20 $0204\tab lockErr}{\f4 \tab Illegal operation on a locked or immovable block\par }{\f6\fs20 $0205\tab purgeErr}{\f4 \tab Attempt to purge an unpurgeable block\par }{\f6\fs20 $0206\tab handleErr}{\f4 \tab Invalid handle\par }{\f6\fs20 $0207\tab idErr}{\f4 \tab Invalid user ID\par }{\f6\fs20 $0208\tab attrErr}{\f4 \tab Illegal operation for the specified attributes\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Miscellaneous Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0301\tab badInputErr}{\f4 \tab Bad input parameter\par }{\f6\fs20 $0302\tab noDevParamErr}{\f4 \tab No device for the input parameter\par }{\f6\fs20 $0303\tab taskInstlErr}{\f4 \tab Specified task is already in the heartbeat queue\par }{\f6\fs20 $0304\tab noSigTaskErr}{\f4 \tab No signature detected in the task header\par }{\f6\fs20 $0305\tab queueDmgdErr}{\f4 \tab Damaged heartbeat queue\par }{\f6\fs20 $0306\tab taskNtFdErr}{\f4 \tab Specified task is not in the queue\par }{\f6\fs20 $0307\tab firmTaskErr}{\f4 \tab Unsuccessful firmware task\par }{\f6\fs20 $0308\tab hbQueueBadErr}{\f4 \tab Damaged heartbeat queue\par }{\f6\fs20 $0309\tab unCnctDevErr}{\f4 \tab Dispatch attempted to an unconnected device\par }{\f6\fs20 $030B\tab idTagNtAvlErr}{\f4 \tab No ID tag is available\par }{\f6\fs20 $0380\tab notInList}{\f4 \tab The specified routine was not found in the queue\par }{\f6\fs20 $0381\tab invalidTag}{\f4 \tab The correct signature value was not found in the header\par }{\f6\fs20 $0382\tab alreadyInQueue}{\f4 \tab Specified element already in queue\par }{\f6\fs20 $0390\tab badTimeVerb}{\f4 \tab Invalid }{\f6\fs20 convVerb}{\f4  value\par }{\f6\fs20 $0391\tab badTimeData}{\f4 \tab Invalid date or time to be converted\par }{\f6\fs20 $034F\tab mtBufferTooSmall}{\f4 \tab The buffer is too small\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 QuickDraw II\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0401\tab alreadyInitiallized}{\f4 \tab QuickDraw II is already initialized\par }{\f6\fs20 $0402\tab cannotReset}{\f4 \tab Never used\par }{\f6\fs20 $0403\tab notInitialized}{\f4 \tab QuickDraw II is not initialized\par }{\f6\fs20 $0410\tab screenReserved}{\f4 \tab The screen memory is reserved\par }{\f6\fs20 $0411\tab badRect}{\f4 \tab Invalid rectangle\par }{\f6\fs20 $0420\tab notEqualChunkiness}{\f4 \tab Chunkiness is not equal\par }{\f6\fs20 $0430\tab rgnAlreadyOpen}{\f4 \tab Region is already open\par }{\f6\fs20 $0431\tab rgnNotOpen}{\f4 \tab No region is open\par }{\f6\fs20 $0432\tab rgnScanOverflow}{\f4 \tab Region scan overflow\par }{\f6\fs20 $0433\tab rgnFull}{\f4 \tab Region is full\par }{\f6\fs20 $0440\tab polyAlreadyOpen}{\f4 \tab Polygon is already open\par }{\f6\fs20 $0441\tab polyNotOpen}{\f4 \tab No polygon is open\par }{\f6\fs20 $0442\tab polyTooBig}{\f4 \tab The polygon is too big\par }{\f6\fs20 $0450\tab badTableNum}{\f4 \tab Invalid color table number\par }{\f6\fs20 $0451\tab badColorNum}{\f4 \tab Invalid color number\par }{\f6\fs20 $0452\tab badScanLine}{\f4 \tab Invalid scan line number\par }{\f6\fs20 $04FF\tab }{\f4 \tab Not implemented\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Desk Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0510\tab daNotFound}{\f4 \tab Specified desk accessory is not available\par }{\f6\fs20 $0511\tab notSysWindow}{\f4 \tab The window parameter is not a pointer to a system window owned by an NDA\par }{\f6\fs20 $0520\tab deskBadSelector}{\f4 \tab Selector out of range\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Event Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0601\tab emDupStrtUpErr}{\f4 \tab The Event Manager has already been started\par }{\f6\fs20 $0602\tab emResetErr}{\f4 \tab Can't reset the Event Manager\par }{\f6\fs20 $0603\tab emNotActErr}{\f4 \tab The Event Manager is not active\par }{\f6\fs20 $0604\tab emBadEvtCodeErr}{\f4 \tab The event code is greater than 15\par }{\f6\fs20 $0605\tab emBadBttnNoErr}{\f4 \tab The button number given was not 0 or 1\par }{\f6\fs20 $0606\tab emQSiz2LrgErr}{\f4 \tab The size of the event queue is larger than 3639\par }{\f6\fs20 $0607\tab emNoMemQueueErr}{\f4 \tab Insufficient memory for the event queue\par }{\f6\fs20 $0681\tab emBadEvtQErr}{\f4 \tab The event queue is damaged\par }{\f6\fs20 $0682\tab emBadQHndlErr}{\f4 \tab Queue handle damaged\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Sound Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0810\tab noDOCFndErr}{\f4 \tab The DOC or RAM was not found\par }{\f6\fs20 $0811\tab docAddrRngErr}{\f4 \tab DOC address range error\par }{\f6\fs20 $0812\tab noSAddrInitErr}{\f4 \tab The Sound Tool Set is not active\par }{\f6\fs20 $0813\tab invalGenNumErr}{\f4 \tab Invalid generator number\par }{\f6\fs20 $0814\tab synthModeErr}{\f4 \tab Synthesizer mode error\par }{\f6\fs20 $0815\tab genBusyErr}{\f4 \tab The generator is already in use\par }{\f6\fs20 $0817\tab mstrIRQNotAssgnErr}{\f4 \tab Master IRQ not assigned\par }{\f6\fs20 $0818\tab sndAlreadyStrtErr}{\f4 \tab The Sound Tool Set is already started\par }{\f6\fs20 $08FF\tab unclaimedSndIntErr}{\f4 \tab Unclaimed sound interrupt error\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Apple Desktop Bus Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0910\tab cmndIncomplete}{\f4 \tab Command not completed\par }{\f6\fs20 $0911\tab cantSync}{\f4 \tab Can't synchronize with the system\par }{\f6\fs20 $0982\tab adbBusy}{\f4 \tab ADB busy (command pending)\par }{\f6\fs20 $0983\tab devNotAtAddr}{\f4 \tab Device not at present address\par }{\f6\fs20 $0984\tab sqrListFull}{\f4 \tab SQR list is full\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Integer Math Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0B01\tab imBadInptParam}{\f4 \tab Bad input parameter\par }{\f6\fs20 $0B02\tab imIllegalChar}{\f4 \tab Illegal character in the string\par }{\f6\fs20 $0B03\tab imOverflow}{\f4 \tab Integer or longint overflow\par }{\f6\fs20 $0B04\tab imStrOverflow}{\f4 \tab String overflow\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Text Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0C01\tab badDevType}{\f4 \tab Illegal device type\par }{\f6\fs20 $0C02\tab badDevNum}{\f4 \tab Illegal device number\par }{\f6\fs20 $0C03\tab badMode}{\f4 \tab Illegal operation\par }{\f6\fs20 $0C04\tab unDefHW}{\f4 \tab Undefined hardware error\par }{\f6\fs20 $0C05\tab lostDev}{\f4 \tab Lost device; device is no longer online\par }{\f6\fs20 $0C06\tab lostFile}{\f4 \tab File is not longer available\par }{\f6\fs20 $0C07\tab badTitle}{\f4 \tab Illegal file name\par }{\f6\fs20 $0C08\tab noRoom}{\f4 \tab Insufficient space on the specified diskette\par }{\f6\fs20 $0C09\tab noDevice}{\f4 \tab Specified volume is not online\par }{\f6\fs20 $0C0A\tab noFile}{\f4 \tab Specified file is not in the directory given\par }{\f6\fs20 $0C0B\tab dupFile}{\f4 \tab Duplicate file\par }{\f6\fs20 $0C0C\tab notClosed}{\f4 \tab Attempt to open a file that is already open\par }{\f6\fs20 $0C0D\tab notOpen}{\f4 \tab Attempt to access a closed file\par }{\f6\fs20 $0C0E\tab badFormat}{\f4 \tab Error reading real or integer number\par }{\f6\fs20 $0C0F\tab ringBuffOFlo}{\f4 \tab Ring buffer overflow\par }{\f6\fs20 $0C10\tab writeProtected}{\f4 \tab The specified disk is write protected\par }{\f6\fs20 $0C40\tab devErr}{\f4 \tab The device did not complete a read or write\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Window Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0E01\tab paramLenErr}{\f4 \tab The first word of the parameter list is the wrong size\par }{\f6\fs20 $0E02\tab allocateErr}{\f4 \tab Unable to allocate the window record\par }{\f6\fs20 $0E03\tab taskMaskErr}{\f4 \tab Some reserved bits were not clear in the }{\f6\fs20 wmTaskMask}{\f4  field of the }{\f6\fs20 WmTaskRec}{\f4  record\par }{\f6\fs20 $0E04\tab compileTooLarge}{\f4 \tab Compiled text is larger than 64K\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Menu Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $0F03\tab menuNoStruct}{\f4 \tab Returned if bit 10 of }{\f6\fs20 itemFlag}{\f4  is not set\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Control Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1001\tab wmNotStartedUp}{\f4 \tab The Window Manager is not initialized\par }{\f6\fs20 $1002\tab cmNotInitialized}{\f4 \tab The Control Manager has not been started\par }{\f6\fs20 $1003\tab noCtlInList}{\f4 \tab The control is not in the window list\par }{\f6\fs20 $1004\tab noCtlError}{\f4 \tab No controls in the window\par }{\f6\fs20 $1005\tab noExtendedCtlError}{\f4 \tab No extended controls in the window\par }{\f6\fs20 $1006\tab noCtlTargetError}{\f4 \tab No extended control is currently the target control\par }{\f6\fs20 $1007\tab notExtendedCtlError}{\f4 \tab The action is valid only for extended controls\par }{\f6\fs20 $1008\tab canNotBeTargetError}{\f4 \tab The specified control cannot be made the target control\par }{\f6\fs20 $1009\tab noSuchIDError}{\f4 \tab The specified control ID cannot be found\par }{\f6\fs20 $100A\tab tooFewParmsError}{\f4 \tab Too few parameters were specified\par }{\f6\fs20 $100B\tab noCtlToBeTargetError}{\f4 \tab No control could be made the target control\par }{\f6\fs20 $100C\tab noFrontWindowError}{\f4 \tab There is no front window\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Loader\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1101\tab }{\f4 \tab Entry not found\par }{\f6\fs20 $1102\tab }{\f4 \tab OMF version error\par }{\f6\fs20 $1103\tab }{\f4 \tab Path name error\par }{\f6\fs20 $1104\tab }{\f4 \tab The file is not a load file\par }{\f6\fs20 $1107\tab }{\f4 \tab File version error\par }{\f6\fs20 $1108\tab }{\f4 \tab User ID error\par }{\f6\fs20 $1109\tab }{\f4 \tab Segment number out of sequence\par }{\f6\fs20 $110A\tab }{\f4 \tab Illegal load record found\par }{\f6\fs20 $110B\tab }{\f4 \tab Load segment is foreign\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 QuickDraw II Auxiliary\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1211\tab badRectSize}{\f4 \tab The height or width is negative, the destination rect is not the same size as the source rect, or the source or destination rect is not within its boundary\par }{\f6\fs20 $1212\tab destModeError}{\f4 \tab The }{\f6\fs20 destMode}{\f4  portion of }{\f6\fs20 resMode}{\f4  is invalid\par }{\f6\fs20 $1230\tab badGetSysIconInput}{\f4 \tab No icon is available for the given input\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Print Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1301\tab missingDriver}{\f4 \tab Specified driver is not in the drivers folder of the system folder\par }{\f6\fs20 $1302\tab portNotOn}{\f4 \tab The specified port is not selected in the control panel\par }{\f6\fs20 $1303\tab noPrintRecord}{\f4 \tab No print record was specified\par }{\f6\fs20 $1304\tab badLaserPrep}{\f4 \tab The version of LaserPrep in the drivers folder is not compatible with this version of the Print Manager\par }{\f6\fs20 $1305\tab badLPFile}{\f4 \tab The version of LaserPrep in the drivers folder is not compatible with this version of the Print Manager\par }{\f6\fs20 $1306\tab papConnNotOpen}{\f4 \tab Connection can't be established with the LaserWriter\par }{\f6\fs20 $1307\tab papReadWriteErr}{\f4 \tab Read-write error on the LaserWriter\par }{\f6\fs20 $1308\tab ptrConnFailed}{\f4 \tab Connection can't be established with the ImageWriter\par }{\f6\fs20 $1309\tab badLoadParam}{\f4 \tab The specified parameter is invalid\par }{\f6\fs20 $130A\tab callNotSupported}{\f4 \tab Tool call is not supported by the current version of the driver\par }{\f6\fs20 $1321\tab startUpAlreadyMode}{\f4 \tab LLDStartUp call already made\par }{\f6\fs20 $1322\tab invalidCtlVal}{\f4 \tab Invalid control value specified\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 LineEdit Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1401\tab leDupStrtUpErr}{\f4 \tab The LineEdit Tool Set has already been started\par }{\f6\fs20 $1402\tab leResetError}{\f4 \tab Can't reset LineEdit\par }{\f6\fs20 $1403\tab leNotActiveErr}{\f4 \tab The LineEdit Tool Set has not been started\par }{\f6\fs20 $1404\tab leScrapErr}{\f4 \tab The desk scrap is too big to copy\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Dialog Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $150A\tab badItemType}{\f4 \tab Inappropriate item type\par }{\f6\fs20 $150B\tab newItemFailed}{\f4 \tab Item creation failed\par }{\f6\fs20 $150C\tab itemNotFound}{\f4 \tab No such item\par }{\f6\fs20 $150D\tab notModalDialog}{\f4 \tab The front-most window is not a modal dialog\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Scrap Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1610\tab basCrapType}{\f4 \tab No scrap of this type\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Standard File\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1701\tab badPromptDesc}{\f4 \tab Invalid }{\f6\fs20 promptRefDesc}{\f4  value\par }{\f6\fs20 $1702\tab badOrigNameDesc}{\f4 \tab Invalid }{\f6\fs20 origNameRefDesc}{\f4  value\par }{\f6\fs20 $1704\tab badReplyNameDesc}{\f4 \tab Invalid }{\f6\fs20 nameRefDesc}{\f4  value in the reply record\par }{\f6\fs20 $1705\tab badReplyPathDesc}{\f4 \tab Invalid }{\f6\fs20 pathRefDesc}{\f4  value in the reply record\par }{\f6\fs20 $1706\tab badCall}{\f4 \tab }{\f6\fs20 SFPGetFile}{\f4 , }{\f6\fs20 SFPGetFile2}{\f4  and }{\f6\fs20 SFPMultiGet2}{\f4  are not active\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Note Synthesizer\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1901\tab nsAlreadyInit}{\f4 \tab The Note Synthesizer has already been started\par }{\f6\fs20 $1902\tab nsSndNotInit}{\f4 \tab The Sound Tool Set has not been started\par }{\f6\fs20 $1921\tab nsNotAvail}{\f4 \tab No generators are available\par }{\f6\fs20 $1922\tab nsBadGenNum}{\f4 \tab Invalid generator number\par }{\f6\fs20 $1923\tab nsNotInit}{\f4 \tab The Note Synthesizer has not been started\par }{\f6\fs20 $1924\tab nsGenAlreadyOn}{\f4 \tab The specified note is already being played\par }{\f6\fs20 $1925\tab soundWrongVer}{\f4 \tab The version of the Sound Tool Set is not compatible with this version of the Note Synthesizer\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Note Sequencer\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1A00\tab noRoomMidiErr}{\f4 \tab The Note Sequencer is already tracking 32 notes; there is no room for a MIDI }{\f6\fs20 NoteOn}{\f4 \par }{\f6\fs20 $1A01\tab noCommandErr}{\f4 \tab The current }{\f6\fs20 seqItem}{\f4  is not valid in this context\par }{\f6\fs20 $1A02\tab noRoomErr}{\f4 \tab The sequence is nested more than 12 levels deep\par }{\f6\fs20 $1A03\tab startedErr}{\f4 \tab The Note Sequencer is already started\par }{\f6\fs20 $1A04\tab noNoteErr}{\f4 \tab Can't find the note for a }{\f6\fs20 NoteOff}{\f4  command\par }{\f6\fs20 $1A05\tab noStartErr}{\f4 \tab The Note Sequencer was not started\par }{\f6\fs20 $1A06\tab instBndsErr}{\f4 \tab The specified instrument is outside of the bounds of the current instrument table\par }{\f6\fs20 $1A07\tab nsWrongVer}{\f4 \tab The version of the Note Synthesizer is incompatible with the Note Sequencer\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Font Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1B01\tab fmDupStartUpErr}{\f4 \tab The Font Manager has already been started\par }{\f6\fs20 $1B02\tab fmResetErr}{\f4 \tab Can't reset the Font Manager\par }{\f6\fs20 $1B03\tab fmNotActiveErr}{\f4 \tab The Font Manager has not been started\par }{\f6\fs20 $1B04\tab fmFamNotFndErr}{\f4 \tab Family not found\par }{\f6\fs20 $1B05\tab fmFontNtFndErr}{\f4 \tab Font not found\par }{\f6\fs20 $1B06\tab fmFontMemErr}{\f4 \tab Font not in memory\par }{\f6\fs20 $1B07\tab fmSysFontErr}{\f4 \tab System font cannot be purged\par }{\f6\fs20 $1B08\tab fmBadFamNumErr}{\f4 \tab Illegal family number\par }{\f6\fs20 $1B09\tab fmBadSizeErr}{\f4 \tab Illegal font size\par }{\f6\fs20 $1B0A\tab fmBadNameErr}{\f4 \tab Illegal name length\par }{\f6\fs20 $1B0B\tab fmMenuErr}{\f4 \tab FixFontMenu never called\par }{\f6\fs20 $1B0C\tab fmScaleSizeErr}{\f4 \tab Scaled size font exceeds limits\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 List Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1C02\tab listRejectEvent}{\f4 \tab The list control did not handle the event\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 ACE Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1D01\tab aceIsActive}{\f4 \tab The ACE Tool Set has already been started\par }{\f6\fs20 $1D02\tab aceBadDP}{\f4 \tab Requested direct page location is not valid\par }{\f6\fs20 $1D03\tab aceNotActive}{\f4 \tab The ACE Tool Set has not been started\par }{\f6\fs20 $1D04\tab aceNoSuchParam}{\f4 \tab Requested information type not supported\par }{\f6\fs20 $1D05\tab aceBadMethod}{\f4 \tab Specified compression method is not supported\par }{\f6\fs20 $1D06\tab aceBadSrc}{\f4 \tab Specified source is invalid\par }{\f6\fs20 $1D07\tab aceBadDest}{\f4 \tab Specified destination is invalid\par }{\f6\fs20 $1D08\tab aceDataOverlap}{\f4 \tab Specified source and destination areas overlap\par }{\f6\fs20 $1DFF\tab aceNotImplemented}{\f4 \tab The requested function has not been implemented\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Resource Manager\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $1E01\tab resForkUsed}{\f4 \tab The resource fork is not empty\par }{\f6\fs20 $1E02\tab resBadFormat}{\f4 \tab The resource fork is not correctly formatted\par }{\f6\fs20 $1E03\tab resNoConverter}{\f4 \tab No converter routine for the resource type\par }{\f6\fs20 $1E04\tab resNoCurFile}{\f4 \tab No current resource file\par }{\f6\fs20 $1E05\tab resDupID}{\f4 \tab The specified resource ID is already in use\par }{\f6\fs20 $1E06\tab resNotFound}{\f4 \tab The specified resource was not found\par }{\f6\fs20 $1E07\tab resFileNotFound}{\f4 \tab The specified ID does not match an open file\par }{\f6\fs20 $1E08\tab resBadAppID}{\f4 \tab The user ID was not found; the calling program has not issued a }{\f6\fs20 ResourceStartUp}{\f4  call\par }{\f6\fs20 $1E09\tab resNoUniqueID}{\f4 \tab No more resource IDs are available\par }{\f6\fs20 $1E0A\tab resIndexRange}{\f4 \tab Index is out of range; no resource was found\par }{\f6\fs20 $1E0B\tab resSysIsOpen}{\f4 \tab The system resource file is already open\par }{\f6\fs20 $1E0C\tab resHasChanged}{\f4 \tab The resource has been changed and has not been updated\par }{\f6\fs20 $1E0D\tab resDiffConverter}{\f4 \tab Another converter is already logged in for this resource type\par }{\f6\fs20 $1E0E\tab resDiskFull}{\f4 \tab Volume full\par }{\f6\fs20 $1E10\tab resNameNotFound}{\f4 \tab The named resource was not found\par }{\f6\fs20 $1E11\tab resBadNameVers}{\f4 \tab Bad resource name\par }{\f6\fs20 $1E13\tab resInvalidTypeOrID}{\f4 \tab The resource type or ID was not valid\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 MIDI Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $2000\tab miStartUpErr}{\f4 \tab The MIDI Tool Set has not been started\par }{\f6\fs20 $2001\tab miPacketErr}{\f4 \tab Incorrect packet length received\par }{\f6\fs20 $2002\tab miArrayErr}{\f4 \tab Array was an invalid size\par }{\f6\fs20 $2003\tab miFullBufErr}{\f4 \tab MIDI data discarded because of buffer overflow\par }{\f6\fs20 $2004\tab miToolsErr}{\f4 \tab Required tools inactive or incorrect version\par }{\f6\fs20 $2005\tab miOutOffErr}{\f4 \tab MIDI output disabled\par }{\f6\fs20 $2007\tab miNoBufErr}{\f4 \tab No buffer allocated\par }{\f6\fs20 $2008\tab miDriverErr}{\f4 \tab Specified device driver invalid\par }{\f6\fs20 $2009\tab miBadFreqErr}{\f4 \tab Unable to set MIDI clock to the specified frequency\par }{\f6\fs20 $200A\tab miClockErr}{\f4 \tab MIDI clock wrapped to zero\par }{\f6\fs20 $200B\tab miConflictErr}{\f4 \tab Two processes are competing for the MIDI interrupt\par }{\f6\fs20 $200C\tab miNoDevErr}{\f4 \tab No device driver loaded\par }{\f6\fs20 $2080\tab miDevNotAvail}{\f4 \tab MIDI interface not available\par }{\f6\fs20 $2081\tab miDevSlotBusy}{\f4 \tab Specified slot not available in Control Panel\par }{\f6\fs20 $2082\tab miDevBusy}{\f4 \tab MIDI interface already in use\par }{\f6\fs20 $2083\tab miDevOverrun}{\f4 \tab MIDI interface overrun by input data; the interface is not being served quickly enough\par }{\f6\fs20 $2084\tab miDevNoConnect}{\f4 \tab No connection to MIDI interface\par }{\f6\fs20 $2085\tab miDevReadErr}{\f4 \tab Error reading MIDI data\par }{\f6\fs20 $2086\tab miDevVersion}{\f4 \tab ROM version or machine type incompatible with device driver\par }{\f6\fs20 $2087\tab miDevIntHndlr}{\f4 \tab Conflicting interrupt handler installed\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 TextEdit Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $2201\tab teAlreadyStarted}{\f4 \tab The TextEdit Tool Set has already been started\par }{\f6\fs20 $2202\tab teNotStarted}{\f4 \tab The TextEdit Tool Set has not been started\par }{\f6\fs20 $2203\tab teInvalidHandle}{\f4 \tab The }{\f6\fs20 teH}{\f4  does not refer to a valid }{\f6\fs20 TERecord}{\f4 \par }{\f6\fs20 $2204\tab teInvalidDescriptor}{\f4 \tab Invalid descriptor value specified\par }{\f6\fs20 $2205\tab teInvalidFlag}{\f4 \tab The specified flag word is invalid\par }{\f6\fs20 $2206\tab teInvalidPCount}{\f4 \tab The specified parameter count is not valid\par }{\f6\fs20 $2208\tab teBufferOverflow}{\f4 \tab The output buffer was too small to accept all data\par }{\f6\fs20 $2209\tab teInvalidLine}{\f4 \tab The starting line value is greater than the number of lines in the text (can be interpreted as an end of file indication in some cases)\par }{\f6\fs20 $220B\tab teInvalidParameter}{\f4 \tab A passed parameter was not valid\par }{\f6\fs20 $220C\tab teInvalidTextBox2}{\f4 \tab The }{\f6\fs20 LETextBox2}{\f4  format codes were inconsistent\par }{\f6\fs20 $220D\tab teNeedsTools}{\f4 \tab The Font Manager was not started\par }\pard \widctlpar\adjustright {\f4 \par }\pard \keepn\widctlpar\adjustright {\b\f4 Media Control Tool Set\par }{\f4 \par }\pard \qj\fi-3420\li3420\widctlpar\tx900\tx3420\adjustright {\f6\fs20 $2601\tab UnImp}{\f4 \tab Unimplemented for this device\par }{\f6\fs20 $2602\tab BadSpeed}{\f4 \tab Invalid speed specified\par }{\f6\fs20 $2603\tab BadUnitType}{\f4 \tab Invalid unit type specified\par }{\f6\fs20 $2604\tab TimeOutErr}{\f4 \tab Timed out during device read\par }{\f6\fs20 $2605\tab notLoaded}{\f4 \tab No driver is currently loaded\par }{\f6\fs20 $2606\tab BadAudio}{\f4 \tab Invalid audio value\par }{\f6\fs20 $2607\tab devRtnError}{\f4 \tab Device returned error (cannot perform the command)\par }{\f6\fs20 $2608\tab unRecStatus}{\f4 \tab Unrecognized status from the device\par }{\f6\fs20 $2609\tab badSelector}{\f4 \tab Invalid selector value specified\par }{\f6\fs20 $260A\tab funnyData}{\f4 \tab Funny data received (try again)\par }{\f6\fs20 $260B\tab invalidPort}{\f4 \tab Invalid port specified\par }{\f6\fs20 $260C\tab OnlyOnce}{\f4 \tab Scans only once\par }{\f6\fs20 $260D\tab NoResMgr}{\f4 \tab Resource Manager not active (must be loaded and started)\par }{\f6\fs20 $260E\tab invalidPort}{\f4 \tab Invalid port specified\par }{\f6\fs20 $260F\tab wasShutDown}{\f4 \tab The tool set was already shut down\par }{\f6\fs20 $2610\tab wasStarted}{\f4 \tab The tool was already started\par }{\f6\fs20 $2611\tab badChannel}{\f4 \tab An invalid media channel was specified\par }{\f6\fs20 $2612\tab InvalidParam}{\f4 \tab An invalid parameter was specified\par }{\f6\fs20 $2613\tab CallNotSupported}{\f4  \tab An invalid media control tool call was attempted\par }\pard \widctlpar\adjustright {\f4 \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Appendix B \endash  Resources Used in This Course}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Appendix B \endash  Resources Used in This Course}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Appendix B \endash  Resources Used in This Course\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 Resource Attributes}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Resource Attributes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource attributes}}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 In the sections that follow this one, you will find model statements showing you how to create a resource in the resource description file that Rez compiles.  In all cases, the resource model starts with a line like this one:\par \par }\pard \li180\widctlpar\adjustright {\f6\fs20 resource rMenu (id) \{\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par You can also add one or more resource attributes right after the resource ID.  If there is more than one attribute, separate them with commas.\par Table B-1 shows the various attributes you can use, what the default is, and what the attribute will do for you.\par \par }\pard \fi-3780\li4140\keepn\widctlpar\tx2160\adjustright {\f4\ul Default}{\f4 \tab }{\f4\ul Alternative}{\f4 \tab }{\f4\ul Meaning}{\f4 \par }{\f6\fs20 unlocked}{\f4 \tab }{\f6\fs20 locked}{\f4 \tab Locked resources cannot be moved by the Memory Manager.\par }{\f6\fs20 moveable}{\f4 \tab }{\f6\fs20 fixed}{\f4 \tab Specifies whether the Memory Manager can move the block when it is unlocked.\par }{\f6\fs20 nonconvert}{\f4 \tab }{\f6\fs20 convert}{\f4 \tab Convert resources require a resource converter.\par }{\f6\fs20 handleload}{\f4 \tab }{\f6\fs20 absoluteload}{\f4 \tab Absolute forces the resource to be loaded at an absolute address.\par }{\f6\fs20 nonpurgeable}{\f4 \tab }{\f6\fs20 purgeable1}{\f4 \tab Purgeable resources can be automatically purged by \par \tab }{\f6\fs20 purgeable2}{\f4 \tab the Memory Manager.  Purgeable3 are purged\par \tab }{\f6\fs20 purgeable3}{\f4 \tab before purgeable2, which are purged before purgeable1.\par }{\f6\fs20 unprotected}{\f4 \tab }{\f6\fs20 protected}{\f4 \tab Protected resources cannot be modified by the Resource Manager.\par }{\f6\fs20 nonpreload}{\f4 \tab }{\f6\fs20 preload}{\f4 \tab Preloaded resources are placed in memory as soon as the Resource Manager opens the resource file.\par }{\pard\plain \fi-3780\li4140\keepn\widctlpar\tx2160\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 noCrossBank\bxe }}}{\v\f6\fs20 \par }{\f6\fs20 crossbank}{\f4 \tab }{\f6\fs20 nocrossbank}{\f4 \tab A crossbank resource can cross memory bank boundaries.\par }{\f6\fs20 specialmemory}{\f4 \tab }{\f6\fs20 nospecialmemory}{\f4 \tab A special memory resource can be loaded in banks $00, $01, $E0 and $E1.\par }{\f6\fs20 notpagealigned}{\f4 \tab }{\f6\fs20 pagealigned}{\f4 \tab A page-aligned resource must be loaded with a starting address that is an even multiple of 256.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qc\fi360\widctlpar\adjustright {\f4 Table B-1:  Resource Attribute Key Words\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rAlertString}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rAlertString\tcl2}}}{\b\f4\fs28 \tab $8015\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 AlertWindow}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rAlertString resource\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 alert strings}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 rAlertString}{\f4  resources are used to form alerts using }{\f6\fs20 AlertWindow}{\f4 .  See the description of }{\f6\fs20 AlertWindow}{\f4  for details about what can appear in the string itself.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rAlertString (id) \{\par    "string"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the alert string.\par \par }{\f6\fs20 string}{\f4 \tab This is the actual alert string.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rBundle}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rBundle\tcl2}}}{\b\f4\fs28 \tab $802B\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Finder}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rBundle resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 rBundle}{\f4  resources are used by the Finder.  You can define icons for the application and its data files, as well as tell the Finder what sort of data files your program can use.\par The }{\f6\fs20 rBundle}{\f4  resource is used in conjunction with the }{\f6\fs20 rVersion}{\f4  resource.  If your application has either one of these resources, it should have both.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rBundle (id, preload, nospecialmemory) \{\par    appIcon,\par    id,\par    oneDoc,\par    oneDoc\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the resource.  The Finder only looks for an }{\f6\fs20 rBundle}{\f4  resource with a resource ID of 1, so this field should always be 1.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 preload}{\f4 \tab You must always code the }{\f6\fs20 preload}{\f4  attribute for }{\f6\fs20 rBundle}{\f4  resources.  See "Resource Attributes" at the start of this appendix for a description of the various attributes.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\tx2340\adjustright {\f6\fs20 nospecialmemory}{\f4 \par \tab You must always code the }{\f6\fs20 nospecialmemory}{\f4  attribute for }{\f6\fs20 rBundle}{\f4  resources.  See "Resource Attributes" at the start of this appendix for a description of the various attributes.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 appIcon}{\f4 \tab This is the resource ID for an }{\f6\fs20 rIcon}{\f4  resource.  This icon will be used by the Finder when the application is displayed in a folder or on the desktop.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab The resource ID for the }{\f6\fs20 rBundle}{\f4  resource is repeated here.  The Finder makes use of this field when it builds the DeskTop file.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 oneDoc}{\f4 \tab The last entry is any number of }{\f6\fs20 oneDoc}{\f4  structures.  Each of these structures defines one kind of file the application can deal with in some way.  You can define icons or identify your application as a program that can use the data file.  You can also select the kind of file this structure applies to using some very specific methods \endash  it's possible to identify a single file if you are specific enough.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 Here's the layout for a }{\f6\fs20 oneDoc}{\f4  structure:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20    \{\par       \{\par          launch,\par          \{path\},\par          \{largeIcon\},\par          \{smallIcon\},\par          "fileDesc",\par          \},\par       match,\par       MatchFileType \{\{fileType\}\},\par       MatchAuxType \{\{auxMask,auxType\}\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\},\par       empty \{\}\par }\pard \li180\widctlpar\adjustright {\f6\fs20       \}\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 launch}{\f4 \tab This flags word tells the Finder if your application should be executed if the user double clicks on a file that matches all of the file qualifiers for this }{\f6\fs20 oneDoc}{\f4  structure.\par \par \tab Bit 0 is a boolean flag telling the Finder whether you should be launched at all.  Set this bit if your application should be launched, and clear it if the application should not be launched.\par \par \tab Assuming the application can be launched, bits 4 to 7 establish the application's "voting clout."  The Finder uses this information to pick the application that can best handle a particular file.  The Finder does this by picking the application that sets the highest voting clout bit.  Only one of these bits should be set.\par \par }\pard \qj\fi-720\li2880\widctlpar\adjustright {\f4 bit 7\tab This is the highest priority of all.  If you set bit 7, you are telling the Finder that you are the owner of the file type.  Normally you would only set this bit if you reserve a specific file type for the files for your program.\par bit 6\tab This bit says your program knows exactly what to do with the file, and can read and write the file.\par bit 5\tab This bit says you can read the file, and may be able to write it \endash  but not necessarily using the same format.\par bit 4\tab Setting this bit says you can read the file, but that's about it.\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par }{\f6\fs20 path}{\f4 \tab The path identifier.  This field is filled in by the Finder.  It should be set to 0 in your application.\par \par }{\f6\fs20 largeIcon}{\f4 \tab The Finder will use this icon when it displays a document matching this }{\f6\fs20 oneDoc}{\f4  record on the desktop, or in a window when large icons are used.\par \par }{\f6\fs20 smallIcon}{\f4 \tab The Finder will use this icon when it displays a document matching this }{\f6\fs20 oneDoc}{\f4  record in a window when either small icons or display by name is selected.\par \par }{\f6\fs20 fileDesc}{\f4 \tab The Finder displays a short text description of the file when the user asks for icon information.  If you can provide a better text description that the one the Finder normally uses, put that description here.  If not, use a null string or omit the field.\par \par }{\f6\fs20 match}{\f4 \tab This flags field tells the Finder which of the various file selectors are actually being used.  There is one bit per file selector; the bit is on if the file selector is in use, and 0 if it should be ignored.\par \par \tab In this course, we use bit 0 for selecting files by file type, and bit 1 for selecting files by auxiliary file type.  For a description of the other bits, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par \par }{\f6\fs20 fileType}{\f4 \tab This is the file type for the files to match.  If bit 0 of }{\f6\fs20 match}{\f4  is set, only files with this file type will match this }{\f6\fs20 oneDoc}{\f4  structure.\par \par \tab The }{\f6\fs20 MatchFileType}{\f4  that appears to the left of the file type is a Rez label; it should be typed exactly like you see it.\par \par }{\f6\fs20 auxMask, auxType\par }{\f4 \tab Assuming bit 1 of }{\f6\fs20 match}{\f4  is set, when the Finder is checking to see if a file matches this oneDoc structure, it ands the auxiliary file type for the file with }{\f6\fs20 auxMask}{\f4 , then compares the result to }{\f6\fs20 auxType}{\f4 .  If the values match, the file passes this test; if not, this }{\f6\fs20 oneDoc}{\f4  structure will not be applied to the file.\par \par \tab The }{\f6\fs20 MatchAuxType}{\f4  that appears to the left of the file type is a Rez label; it should be typed exactly like you see it.\par \par }{\f6\fs20 empty}{\f4 \tab There are ten other ways to check a file.  These other comparisons are not used in this course, and won't be covered here.  You can skip all of these tests by making sure bits 31 to 2 are 0 in match, and by coding the }{\f6\fs20 empty}{\f4  entry exactly as you see it in the model structure.  Like }{\f6\fs20 MatchFileType}{\f4  and }{\f6\fs20 MatchAuxType}{\f4 , }{\f6\fs20 empty}{\f4  is a Rez label, and must appear exactly as you see it.\par \par \tab For complete description of these fields, see }{\i\f4 Programmer's Reference for System 6.0}{\f4 .\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rComment}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rComment\tcl2}}}{\b\f4\fs28 \tab $802A\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Finder}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rComment resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 rComment}{\f4  resources are used to place comments in a resource file.  The data is a sequence of ASCII characters.  The Finder uses }{\f6\fs20 rComment(1)}{\f4  resources (i.e. }{\f6\fs20 rComment}{\f4  resources with a resource ID of 1) for user comments about a file, and }{\f6\fs20 rComment(2)}{\f4  resources for copyright information.  These comments are displayed when the user asks for information about the icon.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rComment (id) \{\par    "string"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the resource.\par \par }{\f6\fs20 string}{\f4 \tab The comment string.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rControlList}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rControlList\tcl2}}}{\b\f4\fs28 \tab $8003\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This resource is used to define a list of controls for an }{\f6\fs20 rWindParam1}{\f4  resource.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rControlList (id) \{\par    \{\par       id_1,\par       id_2,\par       id_3\par       \}\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the control list.\par \par }{\f6\fs20 id_1}{\f4 \tab This value, and the values that follow it, is a resource ID for an }{\f6\fs20 rControlTemplate}{\f4  resource.  The various controls are attached to the window that refers to this resource.  When the controls are drawn, they are drawn in reverse order of their appearance in this list.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rControlTemplate}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rControlTemplate\tcl2}}}{\b\f4\fs28 \tab $8004\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rControlTemplate resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This resource is used to create controls, generally for a window control list.  It is a complex resource with many options.  For a detailed, control by control explanation of how to use this resource, see lessons 11, 13 and 14.  For more information, see }{\i\f4 Apple IIGS Toolbox Reference Manual: Volume 3}{\f4 , page E-7.\par \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rIcon}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rIcon\tcl2}}}{\b\f4\fs28 \tab $8001\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 rIcon}{\f4  resource is used to define icons.  They are used for icon controls and Finder icons in this course, but have many other applications throughout desktop programs.\par For details on the declaration and use of icons, see the text of Lesson 14.  For more information, see }{\i\f4 Apple IIGS Toolbox Reference: Volume 2}{\f4 , page 17-3.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rIcon (id) \{\par    color,\par    height,\par    width,\par    image,\par    mask,\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the icon.\par \par }{\f6\fs20 color}{\f4 \tab Use $8000 for color icons, or $0000 for black and white icons.\par \par }{\f6\fs20 height}{\f4 \tab Height of the icon in pixels.\par \par }{\f6\fs20 width}{\f4 \tab Width of the icon in pixels.  This value must be a multiple of 8.\par \par }{\f6\fs20 image}{\f4 \tab This is the icon image, generally entered as hexadecimal data strings.\par \par }{\f6\fs20 mask}{\f4 \tab This is the icon mask, generally entered as hexadecimal data strings.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rMenu}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rMenu\tcl2}}}{\b\f4\fs28 \tab $8009\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menus}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenu resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 rMenu}{\f4  resource is used to define menus.  This resource is used in two ways in this course: to create menus for an }{\f6\fs20 rMenuBar}{\f4  resource, and to create pop-up menu controls.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenu (id) \{\par    menuID,\par    flags,\par    title,\par    \{\par       rMenuItem1,\par       rMenuItem2,\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the menu.\par \par }{\f6\fs20 menuID}{\f4 \tab This is the menu ID, used in various calls to the Menu Manager and returned by }{\f6\fs20 TaskMaster}{\f4  when a menu item from this menu is selected.\par \par }{\f6\fs20 flags}{\f4 \tab One word of flag bits, defined as follows:\par \par }\pard \qj\fi-1440\li3600\widctlpar\adjustright {\f4 bits 15-14\tab Defines the type of reference in }{\f6\fs20 title}{\f4 .  In this course, the menu title reference is always a resource ID, so these bits should always be set to 10.\par \par bits 13-12\tab Defines the type of reference for each of the entries in the menu item array.  In this course, the menu items are always given as an }{\f6\fs20 rMenuItem}{\f4  resource, so these bits are always set to 10.\par \par bits 11-9\tab Reserved; set to 0.\par \par bit 8\tab This bit is used to support tear-off menus.  The bit should be set to 0 for all programs in this course.\par \par bit 7\tab If this bit is clear, the menu will be enabled.  If this bit is set, the menu will be disabled.\par \par bit 6\tab Reserved; set to 0.\par \par }\pard \qj\fi-1440\li3600\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li3600\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 green apple bug}}}{\pard\plain \qj\fi-1440\li3600\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 XOR highlighting}}}{\pard\plain \qj\fi-1440\li3600\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Apple menu}}}{\v\f4 \par }\pard \qj\fi-1440\li3600\widctlpar\adjustright {\f4 bit 5\tab If this bit is set, XOR highlighting will be used.  If the bit is clear, color replace highlighting is used, eliminating green apple sickness.\par \par bit 4\tab This bit should be set for custom menus.  All of the menus in this course are standard menus, so the bit will always be clear.\par \par }\pard \qj\fi-1440\li3600\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li3600\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu caching}}}{\v\f4 \par }\pard \qj\fi-1440\li3600\widctlpar\adjustright {\f4 bit 3\tab If this bit is set, menu caching is used.  Menu caching is a technique that makes drawing the menu faster.  When the menu is pulled down, the Menu Manager saves a picture of the menu.  As long as no changes are made to the visual appearance of the menu, the Menu Manager will use the picture to redraw the menu in the future, which is faster than recreating the menu.\par \par bits 2-0\tab Reserved; set to 0.\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par }{\f6\fs20 title}{\f4 \tab This is the resource ID for an }{\f6\fs20 rPString}{\f4  resource containing the menu title.  The }{\f6\fs20 rPString}{\f4  resource must have an attribute of }{\f6\fs20 noCrossBank}{\f4 .\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 rMenuItem resource}}}{\v\f6\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 rMenuItem1}{\f4 \tab This is the first of the resource IDs for the }{\f6\fs20 rMenuItem}{\f4  resources that make up the menu.  The menu items specified by these resources are placed in the menu in the order listed in this array of resource IDs.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are several constants defined in the Types.rez file that can be used with this resource.  All of them are used to set the }{\f6\fs20 flags}{\f4  word.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /* --------------------------------------------------*/\par /* flag word for menu item\par /* --------------------------------------------------*/\par }\pard \li180\widctlpar\adjustright {\f6\fs20 #Define fXOR                $0020\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /* --------------------------------------------------*/\par /* flag word for Menu\par /* --------------------------------------------------*/\par #Define fAllowCache         $0008\par #Define fCustom             $0010\par #Define ItemRefShift        $1000\par }\pard \li180\widctlpar\adjustright {\f6\fs20 #Define MenuTitleRefShift   $4000\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The last two entries are used to form the position of two reference bits, and should be multiplied by one of these values:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 #Define RefIsPtr            $0000\par #Define RefIsHandle         $0001\par }\pard \li180\widctlpar\adjustright {\f6\fs20 #Define RefIsResource       $0002\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Using these constants, a typical }{\f6\fs20 flags}{\f4  entry is\par \par }{\f6\fs20 RefIsResource*ItemRefShift + RefIsResource*MenuTitleRefShift + fAllowCache\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 This sets the }{\f6\fs20 flags}{\f4  word to $5008.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rMenuBar}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rMenuBar\tcl2}}}{\b\f4\fs28 \tab $8008\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu bar}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenuBar resource\bxe }}}{\v\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 rMenuBar}{\f4  resource is generally used to set up a system menu bar by calling }{\f6\fs20 NewMenuBar2}{\f4 .\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuBar (id) \{\par    \{\par       rMenu1,\par       rMenu2,\par       \};\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the menu bar.  It is passed as a parameter to }{\f6\fs20 NewMenuBar2}{\f4 .\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 rMenu resource}}}{\v\f6\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 rMenu1}{\f4 , ...\tab These are resource IDs for }{\f6\fs20 rMenu}{\f4  resources that define the various menus that will appear in the menu bar.  The menus will be placed in the menu bar in the order listed, proceeding from left to right across the menu bar.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rMenuItem}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rMenuItem\tcl2}}}{\b\f4\fs28 \tab $800A\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 menu items}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rMenuItem resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 rMenuItem}{\f4  resource is used to define menu items.  In this course, this resource is always used to define menu items for }{\f6\fs20 rMenu}{\f4  resources.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rMenuItem (id) \{\par    itemID,\par    "keyEquiv","keyEquiv",\par    check,\par    flags,\par    title\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the menu item.\par \par }{\f6\fs20 itemID}{\f4 \tab This is the menu item ID, used in various calls to the Menu Manager and returned by }{\f6\fs20 TaskMaster}{\f4  when this menu item is selected.\par \par }\pard \qj\fi-1440\li1800\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1440\li1800\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v\f6\fs20 }{\v\f6\fs20 key equivalents}}}{\v\f6\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 keyEquiv}{\f4 \tab These two parameters are the key equivalents for the menu item.  The first is the key shown when the menu is pulled down.  If the menu item does not have key equivalents, omit the characters, coding }{\f6\fs20 ""}{\f4  for each.\par \par }{\f6\fs20 check}{\f4 \tab This is the character to use as a check mark to the left of the menu item.  Use 0 if there is no check mark, or 18 for a check mark.  It is also possible to use any other character, although 0 and 18 are the most common values.  The check character can be specified either as the ASCII character number or as a character constant, as in 'R'.\par \par }{\f6\fs20 flags}{\f4 \tab One word of flag bits, defined as follows:\par \par }\pard \qj\fi-1440\li3600\widctlpar\adjustright {\f4 bits 15-14\tab Defines the type of reference in }{\f6\fs20 title}{\f4 .  In this course, the menu item title reference is always a resource ID, so these bits should always be set to 10.\par \par bit 13\tab Reserved; set to 0.\par \par bit 12\tab If this bit is set, the characters in the title will be drawn with shadowing.\par \par bit 11\tab If this bit is set, the characters in the title will be drawn with outlining.\par \par bits 10-8\tab Reserved; set to 0.\par \par bit 7\tab If this bit is clear, the menu item will be enabled.  If this bit is set, the menu item will be disabled.\par \par bit 6\tab If this bit is set, there will be a divider bar under the menu item.\par \par bit 5\tab If this bit is set, XOR highlighting will be used.  If the bit is clear, color replace highlighting is used.\par \par bits 4-3\tab Reserved; set to 0.\par \par bit 2\tab If this bit is set, the characters in the title will be underlined.\par \par bit 1\tab If this bit is set, the characters in the title will be italicized.\par \par bit 0\tab If this bit is set, the characters in the title will be bolded.\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par }{\f6\fs20 title}{\f4 \tab This is the resource ID for an }{\f6\fs20 rPString}{\f4  resource containing the menu item title.  The }{\f6\fs20 rPString}{\f4  resource must have an attribute of }{\f6\fs20 noCrossBank}{\f4 .\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par There are several constants defined in the Types.rez file that can be used with this resource.  All of them are used to set the }{\f6\fs20 flags}{\f4  word.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 /* --------------------------------------------------*/\par /* flag word for menu item\par /* --------------------------------------------------*/\par #Define fBold               $0001\par #Define fItalic             $0002\par #Define fUnderline          $0004\par #Define fXOR                $0020\par #Define fDivider            $0040\par #Define fDisabled           $0080\par #Define fItemStruct         $0400\par #Define fOutline            $0800\par #Define fShadow             $1000\par }\pard \li180\widctlpar\adjustright {\f6\fs20 #Define ItemTitleRefShift   $4000\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }{\f6\fs20 ItemTitleRefShift}{\f4  is used to form the position for a reference, and should be multiplied by one of these values:\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 #Define RefIsPtr            $0000\par #Define RefIsHandle         $0001\par }\pard \li180\widctlpar\adjustright {\f6\fs20 #Define RefIsResource       $0002\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Using these constants, a typical }{\f6\fs20 flags}{\f4  entry is\par \par }{\f6\fs20 RefIsResource*ItemTitleRefShift + fDivider\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 This sets the }{\f6\fs20 flags}{\f4  word to $4040.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rPicture}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rPicture\tcl2}}}{\b\f4\fs28 \tab $8002\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 picture controls}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rPicture resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The }{\f6\fs20 rPicture}{\f4  resource is a recording of QuickDraw II drawing commands, generally used as pictures for picture controls.  There is no resource template for pictures in types.rez, so pictures are generally created with raw data statements.\par It is extremely difficult to create pictures by hand.  If you want to try, refer to }{\f4\ul Apple II Technical Notes #46: DrawPicture Data Format}{\f4 .\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 data rPicture (id) \{\par    $"data"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the picture.\par \par }{\f6\fs20 data}{\f4 \tab Hexadecimal data.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rPString}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rPString\tcl2}}}{\b\f4\fs28 \tab $8006\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 p-strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rPString resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Defines a p-string.  }{\f6\fs20 rPString}{\f4  resources are used for a variety of purposes in this course.  In most cases, these resources are referenced by other resources, as when they are used to define the names of menus.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rPString (id) \{\par    "string"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the string.\par \par }{\f6\fs20 string}{\f4 \tab The p-string.  The length of the string is calculated automatically by the Rez compiler.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par In many cases, this resource must be allocated with the attribute }{\f6\fs20 noCrossBank}{\f4  so the Resource Manager doesn't put the characters in two different banks in memory.  See "Resource Attributes" at the beginning of this appendix for details.\par \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rTextForLETextBox2}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rTextForLETextBox2\tcl2}}}{\b\f4\fs28 \tab $800B\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 string}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rTextForLETextBox2 resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Defines a string consisting of a simple sequence of ASCII characters.  Resource Manager calls can be used to compute the length of the string.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rTextForLETextBox2 (id) \{\par    "string"\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the string.\par \par }{\f6\fs20 string}{\f4 \tab The string.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par In many cases, this resource must be allocated with the attribute }{\f6\fs20 noCrossBank}{\f4  so the Resource Manager doesn't put the characters in two different banks in memory.  See "Resource Attributes" at the beginning of this appendix for details.\par \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rToolStartup}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rToolStartup\tcl2}}}{\b\f4\fs28 \tab $8013\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rToolStartup resource\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 StartUpTools}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This resource tells }{\f6\fs20 StartUpTools}{\f4  what tools to start and, to some extent, how to start them.\par See Table 7-1 for a list of the tools used in this course, along with their dependencies as of System Disk 6.0.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rToolStartup (id) \{\par    mode,\par    \{\par       tool, version,\par       tool, version\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the resource.\par \par }{\f6\fs20 mode}{\f4 \tab This parameter is the master SCB to pass to QuickDraw II.  Among other things, this value determines whether the tools will be started in 640 mode or 320 mode.  To start the tools in 640 mode, use }{\f6\fs20 mode320}{\f4 ; to start the tools in 640 mode, use }{\f6\fs20 mode640}{\f4 .  For other possibilities, see the }{\i\f4 Apple IIGS Toolbox Reference Manual}{\f4 .\par \par tool\tab This is the tool number for a tool to start.  You can specify as many tools as you like, but each must be followed by a tool version number entry.\par \par }{\f6\fs20 version}{\f4 \tab This is the minimum allowed tool version number for the tool.  Version numbers as of System 6.0 are listed in Table 7-1.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Here is a sample call that shows all of the tools that are normally started in any desktop application.  Other tools used in this course are commented out \endash  to start them, remove the }{\f6\fs20 /*}{\f4  to the left of the tool number.  You can also find this resource on the solution disk in most of the sample programs from Lesson 7 on.\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 resource rToolStartup(1) \{\par    mode640,\par    \{\par        3, $0302,                        /* Misc Tool */\par        4, $0307,                        /* QuickDraw II */\par        5, $0304,                        /* Desk Manager */\par        6, $0301,                        /* Event Manager */\par /*     8, $0303,                        /* Sound Tools */\par       11, $0300,                        /* Integer Math Tool Set */\par       14, $0303,                        /* Window Manager */\par       15, $0303,                        /* Menu Manager */\par       16, $0303,                        /* Control Manager */\par       18, $0304,                        /* QuickDraw II Auxiliary */\par /*    19, $0301,                        /* Print Manager */\par       20, $0303,                        /* LineEdit Tool Set */\par       21, $0304,                        /* Dialog Manager */\par       22, $0301,                        /* Scrap Manager */\par       23, $0303,                        /* SFO */\par /*    25, $0104,                        /* Note Synthesizer */\par       27, $0303,                        /* Font Manager */\par       28, $0303,                        /* List Manager */\par /*    34, $0103                         /* TextEdit Tool Set */\par       \}\par }\pard \widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rVersion}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rVersion\tcl2}}}{\b\f4\fs28 \tab $8029\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Finder}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rVersion resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The Finder uses an }{\f6\fs20 rVersion}{\f4  resource with a resource of 1 to establish version information for an application.  If the application has an }{\f6\fs20 rVersion}{\f4  resource, it should also have an }{\f6\fs20 rBundle}{\f4  resource.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rVersion (id) \{\par    \{\par       major,                                    /* Major revision */\par       minor,                                    /* Minor revision */\par       bug,                                      /* Bug version */\par       stage,                                    /* Release stage */\par       release,                                  /* Non-final release # */\par       \},\par    region,                                      /* Region code */\par    "string1",                                   /* Short version number */\par    "string2",                                   /* Long version number */\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the }{\f6\fs20 rVersion}{\f4  resource.\par \par }{\f6\fs20 major}{\f4 \tab Major revision level.\par \par }{\f6\fs20 minor}{\f4 \tab Minor revision level.\par \par }{\f6\fs20 bug}{\f4 \tab Bug fix level.\par \par }{\f6\fs20 stage}{\f4 \tab Release stage.  This can be any one of }{\f6\fs20 development}{\f4 , }{\f6\fs20 alpha}{\f4 , }{\f6\fs20 beta}{\f4 , }{\f6\fs20 final}{\f4  or }{\f6\fs20 release}{\f4 .\par \par }{\f6\fs20 release}{\f4 \tab This is the non-final release number, generally used during the testing cycle.\par \par }{\f6\fs20 region}{\f4 \tab This is the region code, indicating what country or population group the program is intended for.  The current regions are:\par \par }\pard \fi1440\li720\widctlpar\tx2160\tx4500\tx6840\adjustright {\f6\fs20 verUS\tab verFrance\tab verBritain\tab verGermany\tab verItaly\tab verNetherlands\tab verBelgiumLux\tab verFrBelgiumLux\tab verSweden\tab verSpain\tab verDenmark\tab verPortugal\tab verFrCanada\tab verNorway\tab verIsrael\tab verJapan\tab verAustralia\tab verArabia\tab verArabic\tab verFinland\tab verFrSwiss\tab verGrSwiss\tab verGreece\tab verIceland\tab verMalta\tab verCyprus\tab verTurkey\tab verYugoslavia\tab verYugoCroatian\tab verIndia\tab verIndiaHindi\tab verPakistan\tab verLithuania\tab verPoland\tab verHungary\tab verEstonia\tab verLatvia\tab verLapland\tab verFaeroeIsl\tab verIran\tab verRussia\tab verIreland\tab verKorea\tab verChina\tab verTaiwan\tab verThailand\par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f4 \par }{\f6\fs20 string1}{\f4 \tab Name of the product.  This string may be empty.  It is displayed by the Finder when the user asks for information about the icon.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 string2}{\f4 \tab Additional information about the product, generally copyright information.  This string may be empty.  It is displayed by the Finder when the user asks for information about the icon.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rWindColor}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rWindColor\tcl2}}}{\b\f4\fs28 \tab $8010\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 windows\:color}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindColor resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This resource defines a color table for a window.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rWindColor (id) \{\par    frameColor,\par    titleColor,\par    tBarColor,\par    growColor,\par    infoColor,\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the color table.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par See "Window Color Tables" in Appendix A for details about the color table entries.\par \par }\pard \qj\keepn\widctlpar\tqr\tx9360\adjustright {\b\f4\fs28 rWindParam1}{\pard\plain \qj\keepn\widctlpar\tqr\tx9360\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 rWindParam1\tcl2}}}{\b\f4\fs28 \tab $800E\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 rWindParam1 resource\bxe }}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 This resource is used to create a window.\par \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs20 resource rWindParam1 (id) \{\par    wFrameBits,\par    wTitle,\par    wRefCon,\par    wZoom,\par    wColor,\par    \{wXOrigin,wYOrigin\},\par    \{wDataH,wDataW\},\par    \{wMaxH,wMaxW\},\par    \{wScrollHor,wScrollVer\},\par    \{wPageHor,wPageVer\},\par    wInfoRefCon,\par    wInfoHeight,\par    wPosition,\par    wPlane,\par    wControlList,\par    wInDesc\par }\pard \li180\widctlpar\adjustright {\f6\fs20    \};\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-1620\li1980\widctlpar\adjustright {\f6\fs20 id}{\f4 \tab This is the resource ID for the resource.\par \par }{\f6\fs20 wControlList}{\f4 \tab This is a reference to the control or list of controls defined for this window, as determined by bits 7-0 of }{\f6\fs20 wInDesc}{\f4 .\par \par }{\f6\fs20 wInDesc}{\f4 \tab This is a flags word, defined as follows:\par \par }\pard \qj\fi-1080\li3420\widctlpar\adjustright {\f4 bits 15-12\tab Reserved; set to 0.\par bits 11-10\tab Defines the kind of reference in the }{\f6\fs20 wColor}{\f4  field:\par }\pard \qj\fi-360\li4140\widctlpar\adjustright {\f4 00\tab The reference is a pointer.\par 01\tab The reference is a handle.\par 10\tab The reference is a resource ID for an }{\f6\fs20 rWindColor}{\f4  resource.\par }\pard \qj\fi-1080\li3420\widctlpar\adjustright {\f4 bits 9-8\tab Defines the kind of reference in the }{\f6\fs20 wTitle}{\f4  field:\par }\pard \qj\fi-360\li4140\widctlpar\adjustright {\f4 00\tab The reference is a pointer.\par 01\tab The reference is a handle.\par 10\tab The reference is a resource ID for an }{\f6\fs20 rPString}{\f4  resource.\par }\pard \qj\fi-1080\li3420\widctlpar\adjustright {\f4 bits 7-0\tab Defines the kind of reference in the }{\f6\fs20 wControlList}{\f4  field.  There are several possibilities; the ones that are used most commonly, and that apply to this course, are:\par }\pard \qj\fi-360\li4140\widctlpar\adjustright {\f4 0\tab The reference is a pointer to a single control template.  (This is set to nil in a resource, indicating that there are no controls in the window.)\par 2\tab The reference is a resource ID for an }{\f6\fs20 rControlTemplate}{\f4  resource.\par 9\tab The reference is a resource ID for an }{\f6\fs20 rControlList}{\f4  resource.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par See "Window Parameters" in Appendix A for details about the remaining fields in this resource.\par \par }\pard \qj\widctlpar\adjustright {\b\f4\fs36 \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Appendix C \endash  Where to Go for More Information}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Appendix C \endash  Where to Go for More Information}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Appendix C \endash  Where to Go for More Information\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you think anyone sits down with a book or two and learns all there is to know about programming, or that experienced programmers never get stuck, think again.  You never learn it all.  You never get to the point where you can write anything without talking to someone else.\par This appendix gives you a few idea about where to get more information and where to go to find kindred spirits to talk about programming or get help with tough programming problems.\par All of this information is subject to change.  If I'd written this appendix a year ago, a lot of the information you see here would be incorrect by now.  If you are reading this appendix a year after I write it, some of the information will no doubt have changed, especially things like where to get technical notes and what online services are good.  Use this appendix as a starting place and an idea center, not as the final word on where to go for information.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Apple IIGS Toolbox Reference Manuals}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Apple IIGS Toolbox Reference Manuals\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Apple IIGS Toolbox Reference: Volume 1\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1988, $26.95\par }\pard \qj\widctlpar\adjustright {\f4 741 pages, table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Apple IIGS Toolbox Reference: Volume 2\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1988, $26.95\par }\pard \qj\widctlpar\adjustright {\f4 686 pages, index (includes Volume 1), table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Apple IIGS Toolbox Reference: Volume 3\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1990, $39.95\par }\pard \qj\widctlpar\adjustright {\f4 1032 pages, index, table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Volumes 1 and 2 of the toolbox reference manuals are the original, official technical description of the Apple IIGS toolbox for programmers.  Volume 3 is an update to the first two volumes, adding information about new tools, new tool calls in old tools, and clarifying and correcting the first two volumes.\par These books were written by Apple's staff, drawing on technical notes written by the programmers who designed and implemented the toolbox.  These books contain a tool by tool, call by call breakdown of the toolbox, along with supplementary information that gives you overviews, background, and programming tips for the toolbox.  These three volumes are three of the five books you absolutely must buy if you intend to go beyond this course.\par A lot of folks have complained bitterly about the toolbox reference manuals because they don't teach you to use the toolbox.  Their criticism is correct, but beside the point.  Complaining because these books don't teach you to write toolbox programs is like a prospective novelist complaining because the Oxford English Dictionary doesn't teach you to write good prose.  So?  The Oxford English Dictionary is a reference for the words in the English language, not a how-to book about writing.  The Apple IIGS toolbox reference manuals are a complete reference to the toolbox.  Just as a writer needs a dictionary, a toolbox programmer needs these three books.  They don't teach you how to write toolbox programs (hopefully this book did!), but they are an essential reference for anyone trying to write their own toolbox programs.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Programmer's Reference for System 6.0}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Programmer's Reference for System 6.0\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Programmer's Reference for System 6.0\par }{\f4 Byte Works, Inc.\par 1992; $45.00 (notebook) or $35.00 (bound)\par }\pard \qj\widctlpar\adjustright {\f4 about 350 pages, index, table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The 3 volumes of the Apple IIGS toolbox reference manual suite covers the Apple IIGS operating system as of System Disk 5.0.  }{\i\f4 Programmer's Reference for System 6.0}{\f4 , due out about a month after this course and in final review by Apple as I write this appendix, picks up where }{\i\f4 Apple IIGS Toolbox Reference: Volume 3}{\f4  and }{\i\f4 Apple IIGS GS/OS Reference}{\f4  leave off.  (The fact that the book isn't final yet explains the approximate page count.)  It documents the new tools and new tool calls added to the toolbox between the release of System Disk 5.0 and System Disk 6.0, as well as the changes to GS/OS.  You can also find details about Finder 6.0, especially how you write applications that work smoothly with the Finder.\par Like the toolbox reference manuals, this book was developed from the technical documentation written by Apple's programmers.  It was also reviewed by Apple's programming and technical support staff.\par This is the fourth of the five essential books for anyone writing desktop programs for the Apple IIGS.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 GS/OS Technical Reference Manual}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 GS/OS Technical Reference Manual\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Apple IIGS Toolbox Reference\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1990; $28.95\par }\pard \qj\widctlpar\adjustright {\f4 487 pages, index, table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This book is the technical description of the Apple IIGS disk operating system.  It includes all of the GS/OS calls that let you manipulate disk files, as well as information about the System Loader and several major drivers and FSTs.\par This is the fifth of the five essential books for Apple IIGS desktop programming.\par There is a second volume to this book.  The second volume was never released in a bound form, since it is intended for a very small set of programmers who want to add new drivers to the GS/OS operating system.  Volume 2 is available through Resource Central. Resource Central and their relationship to the Apple II Programming Community is discussed a little later in this appendix.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Programmer's Introduction to the Apple IIGS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Programmer's Introduction to the Apple IIGS\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Programmer's Introduction to the Apple IIGS\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1988; $32.95\par }\pard \qj\widctlpar\adjustright {\f4 477 pages, index, table of contents, disk\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This book is a little dated, but still has some good information.  It's an introduction to toolbox programming written by Apple's engineers very shortly after the Apple IIGS was released.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Firmware Reference Manual}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Firmware Reference Manual\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Apple IIGS Firmware Reference\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1987; $24.95\par }\pard \qj\widctlpar\adjustright {\f4 320 pages, index, table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This is the technical reference for the low-level software and soft switches.  It includes information about the monitor firmware, video firmware, serial port firmware, smartport firmware, interrupt handling, the keyboard microcontroller, the mouse, firmware entry points, a memory map, and softswitch locations.\par You may never need this book.  It's intended for people who are writing very low-level software or those creating new hardware for the Apple IIGS.  You also need assembly language to make effective use of most of the information you'll find in this book.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Hardware Reference Manual}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Hardware Reference Manual\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Apple IIGS Hardware Reference, Second Edition\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1989; $26.95\par }\pard \qj\widctlpar\adjustright {\f4 296 pages, index, table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par This is the hardware reference for the Apple IIGS computer.  The main audience is folks who are making cards for the computer, although there is some information about the hardware that is useful for some kinds of low-level assembly language programming.  You'll find detailed information about the video displays, memory, the Ensoniq sound chip and supporting firmware, and the various input and output mechanisms.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Apple Human Interface Guidelines}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Apple Human Interface Guidelines\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4 Human Interface Guidelines: The Apple Desktop Interface\par }{\f4 Addison-Wesley Publishing Company, Inc.\par 1987; $14.95\par }\pard \qj\widctlpar\adjustright {\f4 136 pages, index, table of contents\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par I almost put this book on the list of books you absolutely must have to write desktop programs, but technically you don't have to have it.  Still, I highly, highly recommend it.\par Knowing how to write a desktop program is a little like knowing how to use a hammer and saw \endash  useful, but far from adequate.  Besides knowing how to write desktop programs, you should also know how people use them.  This book deals with that sort of issue.  It talks about things like where to put buttons in dialogs, what should appear in a file menu, how to use color effectively to add to a program rather than distract the user, and so forth.  You'll learn a lot about the computer, not just as a programmer, but also as a user and designer.\par I recommend that you read this book cover to cover at least twice: once before you start to design your first desktop program, and once more about a year later.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Technical Notes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Technical Notes\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Apple publishes a group of information under the combined title of technical notes.  Technical notes contain a lot of stuff; here's a sampling of the major kinds of information you'll find:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \bullet \tab Detailed information about tricky software and hardware issues, telling you how to get things done when it isn't obvious.\par \par \bullet \tab Lists of the various things Apple keeps track of and assigns, like message center numbers, file types, and language numbers.\par \par \bullet \tab Corrections to the Apple books listed in this appendix.\par \par \bullet \tab Information about known bugs and changes in the operating system.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par The technical notes are available in two forms, and are updated as needed \endash  sometimes after just a few months.  You can get the updates on disk, in either ASCII files for the Apple IIGS or as formatted files (generally using some Macintosh word processor).  You can find the disks on major online services, in most user group libraries, or on Apple's developer CD ROM disks.  Printed versions are also available.  As I write this, you order printed versions from APDA, but be sure you say "Printed Apple II Technical Notes" at least three times, or you will end up with something for the Macintosh, or get sent somewhere else.  It seems likely that the printed technical notes will be available from Resource Central in the very near future.\par If you are programming professionally, or you consider yourself an advanced programmer, you should get the full set of technical notes and keep them up to date.  Since the technical notes are readily available on disk, I'd suggest that everyone should pick up at least the disk based version.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Resource Central}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Resource Central\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 Resource Central\par P.O. Box 11250\par Overland Park, KS  66207\par Phone:  (913) 469-6502\par Fax:  (913) 469-6507\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 The only way I can think of to describe Resource Central in a nutshell is as a worldwide Apple II advocate.  Resource Central is certainly a business, but they're more than that, too.  Resource Central publishes a number of newsletters concerning the Apple II, some on paper and some on disk.  They manage at least one of the Apple II areas for an online service (GEnie).  They have taken over as the sole source for a great deal of the technical information Apple creates for programmers and hardware engineers for the Apple II \endash  information that isn't needed by enough people to go into a commercial book, like the toolbox reference manuals, but is still needed by some.  Resource Central also holds the biggest and best conference for Apple II programmers.  It's held in Kansas in July, but hey, it's held.  Finally, they are an active and reputable discount mail-order distributor with the largest selection of products for the programmer I know of.  (They don't limit themselves to programming products, but that's what we're discussing here.)  If you're serious about the Apple II, I'd highly recommend investing in a phone call to get their latest list of products and services.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Apple Sponsored Developer Programs and Licensing}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Apple Sponsored Developer Programs and Licensing\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\f4 Apple Computer, Inc.\par Apple Developer Programs\par 20525 Marriani Ave., M/S 75-2C\par Cupertino, CA  95014-9968\par Phone:  (408) 996-1010\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Apple has several programs for people who develop for Apple computers.  Currently there are two categories, known as the Associates Program and the Partners Program.  The Associates program is open to just about anyone, and costs $350 per year for the Macintosh and $150 for the Apple II.  The Partners Program is open by application only, and you get to pay more if you're accepted.  The difference is that you get a direct line to Apple's technical support staff via AppleLink, where you can ask all sorts of questions and get real responses from someone who knows what they are talking about.\par You can also license a lot of software from Apple \endash  anything from the System Disk, so people can boot your program; through the Rez compiler, which we licensed for this course.\par If you are developing commercial software for the Apple II, get in touch with Apple for the latest information about their developer programs and licensing.  Maybe it's something you need, and maybe not, but it's worth getting the details.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Online Services}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Online Services\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Sometimes you just need to talk to another programmer, either to get help or just to chat with a person who shares your interest.  You may also want to swap programs, source code, rumors, or wild stories about midnight entomology.  On the other hand, there aren't likely to be too many Apple IIGS toolbox programmers living next door.  That's where the online services come in.  You can join chat sessions with other programmers, post source code for someone to help with a bug, ask questions, or search online libraries for sample code and utilities.  Frankly, I think access to at least one major online service is essential for any programmer.\par You will need a modem to get on any of these services, but that's about it.  AppleLink and America Online will even send you the software you need, although AppleLink only runs on a Macintosh.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 AppleLink}{\f4 \par \par Apple Computer, Inc.\par AppleLink MS 41-H\par 20300 Stevens Creek Blvd. Ste 245\par Cupertino, CA  95014\par \par }\pard \qj\widctlpar\adjustright {\f4 $7 start up fee.  $12 per month minimum charge.  AppleLink charges by the amount of information you transfer, not by the time you spend online.  The charge is $0.055 per kilo-character during prime time (6AM to 6PM Pacific Standard Time) and $0.045 per kilo-character during non-prime time.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 America Online}{\f4 \par \par America Online\par 8619 Westwood Center Dr.\par Vienna, VA  22182\par (703) 448-8700\par \par }\pard \qj\widctlpar\adjustright {\f4 $5.95 month minimum charge, which can be applied toward 1 free non-prime time hour.  $10 per hour prime time (6AM to 6PM, Monday to Friday), $5 per hour during non-prime time.  Call for a free startup kit, which includes all the software you need.  You can contact the Byte Works on America Online by using keyword ByteWorks, or use keyword ADV to get to the Apple Developer group, which is an active group of Apple II programmers.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 CompuServe}{\f4 \par \par CompuServe\par 5000 Arlington Center Blvd.\par Columbus, OH  43220\par \par }\pard \qj\widctlpar\adjustright {\f4 $7.95 month minimum charge, which gives unlimited access to a selection of services.  For the paid areas, the charge is $6.30 at 300 baud, and $12.84 at 1200 baud or 2400 baud.  Faster connections are available; call for prices.  CompuServe has an active Apple II area.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4 GEnie}{\f4 \par \par GTE Information Services\par 401 N. Washington Street\par Rockville, MD  20850\par (800) 638-9636\par \par }\pard \qj\widctlpar\adjustright {\f4 $4.95 month minimum charge, which gives unlimited access to a selection of services.  The Apple II programming area is not in the free area.  For the paid areas, the charge is $18 per hour prime time (8AM to 6PM, your local time, Monday to Friday), $6 per hour during non-prime time.  The Byte Works monitors the A2Pro area, where you will find an active group of Apple II programmers.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 User's Groups}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 User's Groups\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you live in a city large enough to have a stoplight, you probably live close to a user's group of some sort.  If your city is large enough, you may even meet some other Apple IIGS toolbox programmers.\par User's groups are a great place to meet other programmers.  Many also have software libraries which include source code, Apple's system software, and the disk form of the technical notes.\par Apple Computer keeps a list of all of the Apple user's groups.  Call (800) 538-9696, extension 500 for information about your closest Apple user's group.  Call (408) 996-1010 (Apple's main number) and ask for "Apple User's Group Connection Hotline" for more detailed information about user's groups.  You might also check with local computer stores or universities for non-Apple groups of programmers.\par \sect }\sectd \sbkodd\linex0\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Appendix D \endash  Tips for ORCA/Pascal}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs36 \par \par \par }\pard \qc\keepn\widctlpar\adjustright {\b\f4\fs36 Appendix D \endash  Tips for ORCA/Pascal}{\pard\plain \qc\keepn\widctlpar\adjustright \b\v\f4\fs36\cgrid {\tc {\b\v\f4\fs36 }{\b\v\f4\fs36 Appendix D \endash  Tips for ORCA/Pascal\tcl1}}}{\b\f4\fs36 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 MoreRecent}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 MoreRecent\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 MoreRecent utility}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once you start using resources, your programs will consist of at least two source files: the Pascal program and the resource description file.  The easiest way to deal with programs that use more than one separately compiled file is to create a script.  The course discuses this at the proper time, showing you how to write a simple script that will compile only those parts of your program that need to be compiled.  To do that with shells prior to the 2.0 version of the ORCA shell, you need the }{\f6\fs20 MoreRecent}{\f4  utility.\par }{\f6\fs20 MoreRecent}{\f4  is on the solution disk, stuffed inside the folder for lesson 3.  To install }{\f6\fs20 MoreRecent}{\f4 , copy the files from the utilities folder in the Lesson.3 folder into the utilities folder for your ORCA/Pascal system.  If you aren't sure where the ORCA/Pascal utilities folder is, use the }{\f6\fs20 SHOW PREFIX}{\f4  command from the shell or shell window \endash  prefix 6 is the utility prefix.  Next, edit your SYSCMND file, which you will find in your ORCA/Pascal system folder (that's prefix 2), and add the line\par \par }{\f6\fs20 MORERECENT    U\par }{\f4 \par }\pard \qj\widctlpar\adjustright {\f4 You can actually find this line in a file in the System folder in the Lesson.3 folder.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 Once you save the modified SYSCMND file, reboot.  If you've done everything correctly, when you type }{\f6\fs20 HELP}{\f4  from the shell or shell window, }{\f6\fs20 MORERECENT}{\f4  will be listed as a command.  Typing }{\f6\fs20 HELP MORERECENT}{\f4  will print a help file showing how the command is used.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Installing Rez}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Installing Rez\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 Rez}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v\f4 }{\v\f4 resource compiler}}}{\v\f4 \par }{\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 If you don't already have Rez installed in your ORCA/Pascal system, you will need to install it from the solution disks before you can work most of the problems in this course.  If you are using floppy disks, be sure and read the next section before you try this installation.\par The resource compiler is located on your solution disks in a folder called Rez.  In that folder, you'll find the following files:\par \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4 Languages/Rez\tab This is the resource compiler itself.  It should be copied to your ORCA/Pascal languages folder.  That's the folder where the Pascal compiler is located.  Unless you've changed the name, the languages folder is called LANGUAGES.\par \par Libraries/RInclude\tab This is a folder containing interface files for the resource compiler.  Copy the folder and all of the files inside of the folder into the ORCA/Pascal libraries folder.  That's the same folder that has the PASLIB and SYSLIB libraries, as well as the ORCAPascalDefs folder.  Unless you've changed the name, the libraries folder is called LIBRARIES.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-2160\li2520\widctlpar\adjustright {\f4 SysCMND\tab This is a text file containing a line that needs to be copied into the SYSCMND file in your ORCA/Pascal system folder.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par Once you copy all of these files into the proper spot and reboot, you should see REZ listed as a language when you use the }{\f6\fs20 SHOW LANGUAGES}{\f4  command from either the shell or PRIZM's shell window.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f4\fs28 Using Small Systems}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\f4\fs28 }{\b\v\f4\fs28 Using Small Systems\tcl2}}}{\b\f4\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f4 \par }\pard \qj\fi360\widctlpar\adjustright {\f4 Back when we released our first development system for the Apple IIGS, you had to have at least 512K.  It didn't even take a 3.5" floppy, since we made the system available on 5.25" disks.  Somehow this seem sort of quaint, now.  Using the latest version of Apple's system disk, you have to have 1.25M just to run the Finder.\par The smallest possible system you can use to work through this course is a 1.25M Apple IIGS (1.125M for ROM 03) with one 3.5" disk drive and one other disk drive.  Frankly, you're going to have a lot of trouble if you don't have at least 1.75M of memory and a hard disk.  And, unless you have both 1.75M of memory and a hard disk, you must stick with the text-based development environment \endash  the PRIZM desktop development system can't be used with Pascal and Rez on a smaller system.\par If you have a hard disk, your only real concern is how much memory you have available.  With 1.25M, you can't use Rez, Pascal and PRIZM together, so you need to set up a text system.  If you aren't sure how to do that, the ORCA/Pascal disks come with an installer script that will set up a text system for you.\par If you are working from an 800K 3.5" floppy disk drive, you can't use PRIZM, Pascal and Rez together, no matter how much memory you have, because they won't all fit on a single floppy disk.  (Technically, you can do it if you have a second 3.5" drive; see your reference manual for details.)  In that case, I'd suggest setting up a minimum system.  To do that, follow these steps:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 1.\tab Make a copy of your ORCA/Pascal 1.4 program disk.  (If you are working with a later version of ORCA/Pascal, these steps will work, but some of the files may already be in a different place.)    The rest of the steps should be made with the copy, not the original.\par \par 2.\tab Delete these files:\par \par }\pard \qj\li1080\widctlpar\adjustright {\f4 ORCA.PASCAL/SYSTEM/LOGIN\par }\pard \qj\li1080\widctlpar\tqr\tx9360\adjustright {\f4 ORCA.PASCAL/UTILITIES/HELP/=\tab (delete all of the files in this folder)\par }\pard \qj\li1080\widctlpar\adjustright {\f4 ORCA.PASCAL/UTILITIES/PRIZM\par ORCA.PASCAL/UTILITIES/CRUNCH\par ORCA.PASCAL/UTILITIES/MAKELIB\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/ACE.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/DESKTOPBUS.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/FINDER.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/INTEGERMATH.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/MIDI.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/MULTIMEDIA.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/ORCASHELL.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/PRODOS.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/SCHEDULER.INT\par ORCA.PASCAL/LIBRARIES/ORCAPASCALDEFS/SEQUENCER.INT\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 \tab This gives you enough room to install the resource compiler (see the previous section), plus a little work space.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\f4 3.\tab Install Rez and, if you need it, }{\f6\fs20 MoreRecent}{\f4 , as described in the first two sections of this appendix.\par }\pard \qj\fi360\widctlpar\adjustright {\f4 \par \sect }\sectd \sbkodd\linex0\cols2\colsx360\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s21\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Programming the Toolbox in Pascal\par }}{\headerr \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Index}{\par }}{\footerl \pard\plain \s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}{\headerf \pard\plain \s21\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 Index}{\par }}{\footerf \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid {\f5 \chpgn \par }}\pard\plain \qj\widctlpar\tx1080\adjustright \f12\cgrid {\pard\plain \qj\widctlpar\tx1080\adjustright \v\f4\cgrid {\tc {\v\f4 }{\v\f4 Index\tcl1}}}{\v\f4 \par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f4  INDEX  }}{\fldrslt {\f4 320 mode 159, 160, 162\par 320 mode colors 161\par 640 mode 159, 162, 163, 165\par \par }{\b\f4 A\par }{\f4 \par about box 70\par About command 70\par ACE Tool Set 295\par }{\f6\fs20 AddResource}{\f4  300, }{\b\f4 375}{\f4 \par alert frame 102\par alert icons 396\par alert strings 71, 77-83, }{\b\f4 396}{\f4 , 417\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 buttons 80\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 alerts 69-83\par }{\f6\fs20 AlertWindow}{\f4  70, }{\b\f4 395}{\f4 , 417\par }{\f6\fs20 AllNotesOff}{\f4  294, }{\b\f4 354}{\f4 \par }{\f6\fs20 AllocGen}{\f4  294, }{\b\f4 354}{\f4 \par apple key 9\par apple menu }{\b\f4 35}{\f4 , 326, 350, 422\par arcs 171, 362, 363, 364, 366, 368\par ascent line 182, 183\par ASIF files 287\par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f4 auxiliary file type 116, 117-118, 131, 332, 335, 338\par }\pard \s19\widctlpar\adjustright {\f4 \par }{\b\f4 B\par }{\f4 \par backup copies 2\par bad blocks 2\par base fonts 191\par base line 182, 183\par }{\f6\fs20 BeginUpdate}{\f4  95, }{\b\f4 398}{\f4 \par bit 149\par bold 38, 190\par bounds rectangle 360\par }{\f6\fs20 BringToFront}{\f4  274, }{\b\f4 398}{\f4 \par button 328\par button control 223-226\par byte 149\par \par }{\b\f4 C\par }{\f4 \par c-strings 22\par cache 339\par CAD 3\par caution alert 78\par character origin 182\par character width 183\par }{\f6\fs20 CharBounds}{\f4  187, }{\b\f4 360}{\f4 \par }{\f6\fs20 CharWidth}{\f4  187, }{\b\f4 360}{\f4 \par check box control 232-234, 324, 325\par }\pard\plain \s18\widctlpar\adjustright \f12\cgrid {\f4 check mark: see menus\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 CheckMenu}{\f4  205\par }{\f6\fs20 CheckMItem}{\f4  41, }{\b\f4 347}{\f4 \par }{\f6\fs20 ChooseFont}{\f4  191, }{\b\f4 330}{\f4 \par choosing fonts 191\par Clear command 254\par clip region 177\par }{\f6\fs20 ClipRect}{\f4  178, }{\b\f4 361}{\f4 \par clock 320\par close box 85, 102, 391\par Close command 88\par }{\f6\fs20 CloseGS}{\f4  125, 128, 130, }{\b\f4 333}{\f4 \par }{\f6\fs20 ClosePoly}{\f4  173, }{\b\f4 361}{\f4 , 368\par }{\f6\fs20 CloseResourceFile}{\f4  300, }{\b\f4 376}{\f4 \par }{\f6\fs20 CloseResourceFork}{\f4  316\par }{\f6\fs20 CloseWindow}{\f4  88, }{\b\f4 398}{\f4 \par color replace highlighting 35\par color tables 160, 162, 163, 365, 370\par colored controls 226\par colors 160, 161\par Common 17\par content region 86\par control ID 224\par control key 9\par Control Manager 323\par controls 195, 219-268\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 colors 226\par default 224\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 coordinates 96-98\par Copy command 254\par copyright 70\par }{\f6\fs20 CountFonts}{\f4  192, }{\b\f4 330}{\f4 \par }{\f6\fs20 CreateGS}{\f4  130, 131, }{\b\f4 334}{\f4 \par creation time 338\par }{\f6\fs20 CStringBounds}{\f4  187, }{\b\f4 361}{\f4 \par }{\f6\fs20 CStringWidth}{\f4  187, }{\b\f4 361}{\f4 \par cursor 14\par Cut command 254\par \par }{\b\f4 D\par }{\f4 \par data fork 131, 335, 338\par }{\f6\fs20 DataBank}{\f4  directive 96, 403\par debugger 10, 27\par decibels 292, 355\par default control 224\par DeRez 65\par descent line 182, 183\par Design Master 3, 66\par desk accessories 313-321\par Desk Manager 20, 325\par }{\f6\fs20 DeskShutDown}{\f4  314\par }{\f6\fs20 DeskStartup}{\f4  314\par desktop file 307\par }{\f6\fs20 DestroyGS}{\f4  129, 130, }{\b\f4 336}{\f4 \par dialogs 69, 269-275\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 modal 269, 270, 273\par modeless 269, 270, 274-275\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 digitized sound 280-286\par dimmed menus 142\par directories 131\par }{\f6\fs20 DisableMItem}{\f4  40, }{\b\f4 347}{\f4 \par disk space 338\par }{\f6\fs20 DisposeHandle}{\f4  118, }{\b\f4 344}{\f4 \par dithering 163-165\par documents 89\par }{\f6\fs20 DoModalWindow}{\f4  271-273, }{\b\f4 398}{\f4 \par }{\f6\fs20 DrawChar}{\f4  184, }{\b\f4 361}{\f4 \par }{\f6\fs20 DrawControls}{\f4  100, 202, }{\b\f4 323}{\f4 \par }{\f6\fs20 DrawCString}{\f4  184, }{\b\f4 362}{\f4 \par }{\f6\fs20 DrawMember2}{\f4  }{\b\f4 342}{\f4 \par }{\f6\fs20 DrawMenuBar}{\f4  23, }{\b\f4 347}{\f4 \par }{\f6\fs20 DrawPicture}{\f4  217, }{\b\f4 375}{\f4 \par }{\f6\fs20 DrawString}{\f4  184, }{\b\f4 362}{\f4 \par }{\f6\fs20 DrawText}{\f4  184, }{\b\f4 362}{\f4 \par dynamic memory 20\par \par }{\b\f4 E\par }{\f4 \par ellipsis 124\par }{\f6\fs20 EnableMItem}{\f4  40, }{\b\f4 347}{\f4 \par }{\f6\fs20 EndDesk}{\f4  6, 7\par }{\f6\fs20 EndUpdate}{\f4  95, }{\b\f4 400}{\f4 \par Ensoniq chip 280\par EOF 338\par }{\f6\fs20 EraseArc}{\f4  171, }{\b\f4 362}{\f4 \par }{\f6\fs20 EraseOval}{\f4  171, }{\b\f4 362}{\f4 \par }{\f6\fs20 ErasePoly}{\f4  173, }{\b\f4 363}{\f4 \par }{\f6\fs20 EraseRect}{\f4  170, }{\b\f4 363}{\f4 \par }{\f6\fs20 EraseRRect}{\f4  172, }{\b\f4 363}{\f4 \par errors 407\par event loop 5, 6-7, 32-35\par Event Manager 7, 326\par event record 7, 24, 32, 326, 329\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f6\fs20 eventMessage}{\f4  8, 11\par }{\f6\fs20 eventModifiers}{\f4  9, 12\par }{\f6\fs20 eventWhat}{\f4  8\par }{\f6\fs20 eventWhen}{\f4  8\par }{\f6\fs20 eventWhere}{\f4  9\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 eventMessage}{\f4  28\par }{\f6\fs20 eventModifiers}{\f4  28\par events\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 activate 8\par application 8\par desk accessory 8\par keyboard 5, 8, 10, 11-13, 27\par mouse 5, 8, 14-15\par null 8\par switch 8\par update 8\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 eventWhere}{\f4  98\par }{\f6\fs20 everyEvent}{\f4  9\par extended file 335\par \par }{\b\f4 F\par }{\f4 \par }{\f6\fs20 FamNum2ItemID}{\f4  193, }{\b\f4 330}{\f4 \par }{\f6\fs20 FFSoundDoneStatus}{\f4  283, }{\b\f4 379}{\f4 \par }{\f6\fs20 FFStartSound}{\f4  280, }{\b\f4 380}{\f4 \par }{\f6\fs20 FFStopSound}{\f4  283, }{\b\f4 380}{\f4 \par file type 116, 117-118, 131, 332, 335, 338\par file type lists 117-118\par File Type Notes 332\par files 2, 208\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 locked 131\par reading 125-129\par writing 129-133\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 FillArc}{\f4  171, }{\b\f4 363}{\f4 \par }{\f6\fs20 FillOval}{\f4  171, }{\b\f4 363}{\f4 \par }{\f6\fs20 FillPoly}{\f4  173, }{\b\f4 363}{\f4 \par }{\f6\fs20 FillRect}{\f4  170, }{\b\f4 364}{\f4 \par }{\f6\fs20 FillRRect}{\f4  172, }{\b\f4 364}{\f4 \par Finder 299-312, 418, 420, 427\par Finder icons 303\par }{\f6\fs20 FindHandle}{\f4  317, }{\b\f4 344}{\f4 \par }{\f6\fs20 FindTargetCtl}{\f4  254, }{\b\f4 323}{\f4 \par }{\f6\fs20 FindWindow}{\f4  23, }{\b\f4 400}{\f4 \par }{\f6\fs20 FixAppleMenu}{\f4  36, }{\b\f4 326}{\f4 \par }{\f6\fs20 FixFontMenu}{\f4  193, 330, }{\b\f4 331}{\f4 \par }{\f6\fs20 FixMenuBar}{\f4  23, 331, }{\b\f4 348}{\f4 \par }{\f6\fs20 FMGetCurFID}{\f4  191, }{\b\f4 331}{\f4 \par }\pard\plain \s18\widctlpar\adjustright \f12\cgrid {\f4 font: standard 188\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 font families 188-189\par Font Manager 330\par font menus 192-193\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 family 193\par size 192-193\par style 192\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 font rectangle 183\par font sizes 189\par font styles 189-190\par }{\f6\fs20 fontInfoRecord}{\f4  183, 375\par fonts 181-194, 205\par formatting disks 310\par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f4 Frame 57, 69, 70, }{\b\f4 71}{\f4 , 111, 121, 124, 138, 140\par }\pard \s19\widctlpar\adjustright {\f6\fs20 FrameArc}{\f4  171, }{\b\f4 364}{\f4 \par }{\f6\fs20 FrameOval}{\f4  171, }{\b\f4 364}{\f4 \par }{\f6\fs20 FramePoly}{\f4  173, }{\b\f4 364}{\f4 \par }{\f6\fs20 FrameRect}{\f4  170, }{\b\f4 364}{\f4 \par }{\f6\fs20 FrameRRect}{\f4  172, }{\b\f4 365}{\f4 \par }{\f6\fs20 FreeMem}{\f4  157, }{\b\f4 344}{\f4 \par }{\f6\fs20 FrontWindow}{\f4  88, }{\b\f4 400}{\f4 \par FST 334, 338\par \par }{\b\f4 G\par }{\f4 \par }{\f6\fs20 GetColorEntry}{\f4  }{\b\f4 365}{\f4 \par }{\f6\fs20 GetColorTable}{\f4  161, }{\b\f4 365}{\f4 \par }{\f6\fs20 GetContentOrigin}{\f4  101, }{\b\f4 401}{\f4 \par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f6\fs20 GetCtlHandleFromID}{\f4  210, 236, 244, 261, }{\b\f4 323}{\f4 \par }\pard \s19\widctlpar\adjustright {\f6\fs20 GetCtlID}{\f4  237, }{\b\f4 324}{\f4 \par }{\f6\fs20 GetCtlParams}{\f4  237, 255, }{\b\f4 324}{\f4 \par }{\f6\fs20 GetCtlValue}{\f4  267, }{\b\f4 324}{\f4 \par }{\f6\fs20 GetFontInfo}{\f4  183, }{\b\f4 365}{\f4 \par }{\f6\fs20 GetIndScrap}{\f4  216, 217, }{\b\f4 378}{\f4 \par }{\f6\fs20 GetLETextByID}{\f4  253, }{\b\f4 324}{\f4 \par }{\f6\fs20 GetMenuFlag}{\f4  }{\b\f4 348}{\f4 \par }{\f6\fs20 GetMouse}{\f4  167, }{\b\f4 326}{\f4 \par }{\f6\fs20 GetNextEvent}{\f4  7, 9, 13, 14, 16, 17, 32, }{\b\f4 326}{\f4 \par }{\f6\fs20 GetNextWindow}{\f4  275, }{\b\f4 401}{\f4 \par }{\f6\fs20 GetPort}{\f4  94, }{\b\f4 365}{\f4 \par }{\f6\fs20 GetPortRect}{\f4  94, }{\b\f4 365}{\f4 \par }{\f6\fs20 GetScrapHandle}{\f4  214, }{\b\f4 378}{\f4 \par }{\f6\fs20 GetScrapSize}{\f4  213, 215, }{\b\f4 378}{\f4 \par }{\f6\fs20 GetVisHandle}{\f4  176, }{\b\f4 366}{\f4 \par global coordinates 96-98\par }{\f6\fs20 GlobalToLocal}{\f4  98, 101, }{\b\f4 366}{\f4 \par }{\f6\fs20 grafPort}{\f4  143\par grafPorts 178-179\par graphics 133\par green apple bug 35, 422\par grow box 102, 392\par grow box control 239-240\par }{\f6\fs20 GrowWindow}{\f4  102, 392\par GS/OS 125-135, 332\par GS/OS aware bits 310\par GS/OS errors 126, 407\par \par }{\b\f4 H\par }{\f4 \par }{\f6\fs20 handle}{\f4  347\par }{\f6\fs20 HandleDiskInsert}{\f4  310, }{\b\f4 401}{\f4 \par handles 150-154\par hard disk 3\par hardware requirements 2\par header files 17\par }\pard\plain \s18\widctlpar\adjustright \f12\cgrid {\f4 heartbeat: see tick count\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 HideWindow}{\f4  103, 392, }{\b\f4 401}{\f4 \par highlighting menus 25\par }{\f6\fs20 HiliteMenu}{\f4  25, }{\b\f4 348}{\f4 \par }{\f6\fs20 HLock}{\f4  118, 155, }{\b\f4 344}{\f4 \par human interface 142\par }{\f6\fs20 HUnlock}{\f4  118, }{\b\f4 344}{\f4 \par \par }\pard \s19\keepn\widctlpar\adjustright {\b\f4 I\par }{\f4 \par }\pard \s19\widctlpar\adjustright {\f4 icon button control 244-250\par icon mask 247\par icons 77, 303, 307\par info bar 86, 103, 105, 392, 394\par }{\f6\fs20 InitCursor}{\f4  14, }{\b\f4 366}{\f4 \par initializing disks 310\par }{\f6\fs20 InsertMenu}{\f4  20, 23, }{\b\f4 348}{\f4 \par }{\f6\fs20 InstallFont}{\f4  190\par installing fonts 190\par instruments 286-291, 355\par interface files 17\par interrupts 290\par }{\f6\fs20 InvalRect}{\f4  99, }{\b\f4 401}{\f4 \par }{\f6\fs20 InvertArc}{\f4  171, }{\b\f4 366}{\f4 \par }{\f6\fs20 InvertOval}{\f4  171, }{\b\f4 366}{\f4 \par }{\f6\fs20 InvertPoly}{\f4  173, }{\b\f4 366}{\f4 \par }{\f6\fs20 InvertRect}{\f4  170, }{\b\f4 367}{\f4 \par }{\f6\fs20 InvertRRect}{\f4  172, }{\b\f4 367}{\f4 \par italics 38, 190\par }{\f6\fs20 ItemID2FamNum}{\f4  193, }{\b\f4 331}{\f4 \par \par }{\b\f4 K\par }{\f4 \par kerning 182\par key equivalents 53, 225, 424\par keyboard 9\par keyboard equivalent }{\b\f4 27}{\f4 -}{\b\f4 32}{\f4 , 349\par }{\f6\fs20 KillPoly}{\f4  174, }{\b\f4 367}{\f4 , 368\par \par }{\b\f4 L\par }{\f4 \par leading 183\par }{\f6\fs20 LECopy}{\f4  254, }{\b\f4 341}{\f4 \par }{\f6\fs20 LECut}{\f4  254, }{\b\f4 341}{\f4 \par }{\f6\fs20 LEDelete}{\f4  254, }{\b\f4 341}{\f4 \par }{\f6\fs20 LEFromScrap}{\f4  254, }{\b\f4 341}{\f4 \par }{\f6\fs20 LEPaste}{\f4  254, }{\b\f4 341}{\f4 \par }{\f6\fs20 LEToScrap}{\f4  254, }{\b\f4 342}{\f4 \par }{\f6\fs20 LGetPathname2}{\f4  316, 317, }{\b\f4 343}{\f4 \par line edit control 252-256, 324, 325, 341, 342\par LineEdit Tool Set 254, 340\par }{\f6\fs20 LineTo}{\f4  14, }{\b\f4 367}{\f4 , 368\par list controls 257-263, 342-343\par List Manager 342\par Loader 343\par loading fonts 190\par }{\f6\fs20 LoadResource}{\f4  82, }{\b\f4 376}{\f4 , 377\par }{\f6\fs20 LoadScrap}{\f4  215, }{\b\f4 378}{\f4 \par local coordinates 96-98\par }{\f6\fs20 LocalToGlobal}{\f4  98, 101, }{\b\f4 367}{\f4 \par }{\f6\fs20 locInfo}{\f4  133, 360, 375\par }{\f6\fs20 locInfoPtr}{\f4  360, 375\par locked files 131\par \par }{\b\f4 M\par }{\f4 \par make 61\par master color value 160\par }{\f6\fs20 MaxBlock}{\f4  157, }{\b\f4 345}{\f4 \par memory 149\par Memory Manager 149-157, 344\par memory requirements 2\par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f4 menu bar 2, 19, 23, 48, 49, 57, 350, 351, 352, 423\par }\pard \s19\widctlpar\adjustright {\f4 menu caching 422\par menu control characters 21, 38, 350\par menu events 23-25\par menu ID 53\par menu item ID 53\par menu items 19, 21, 424\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 changing text 42, 352\par order 21\par separators 39, 350\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 Menu Manager }{\b\f4 19}{\f4 -}{\b\f4 45}{\f4 , 347\par menu options 38\par menu string 20, 21, 28, 38, 349, 350\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 length 22\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 menu title 21\par }{\f6\fs20 MenuKey}{\f4  29, }{\b\f4 349}{\f4 \par menus 19, 422\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 check mark 39\par checked 41, 347\par checking 54\par dimmed 40\par disabled 39, 40, 347\par events 349\par highlighting 25\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 MenuSelect}{\f4  24, }{\b\f4 349}{\f4 \par message center 310, 312\par }{\f6\fs20 MessageCenter}{\f4  }{\b\f4 389}{\f4 \par MIDI 296\par modal dialogs 269, 270, 273\par modeless dialogs 269, 270, 274-275\par }{\f6\fs20 modeXOR}{\f4  167\par modification time 338\par MoreRecent utility 437\par mouse 326, 328\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 button 9\par position 9\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 mouse down event 23\par }{\f6\fs20 MoveTo}{\f4  13, }{\b\f4 367}{\f4 \par multi-media 296\par \par }{\b\f4 N\par }{\f4 \par NDA 20, 32, 35, 36, 313-321, 326, 406\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 supporting 36-38\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 networks 126\par New Desk Accessories 313-321\par }{\f6\fs20 NewDeskAcc}{\f4  directive 313\par }{\f6\fs20 NewHandle}{\f4  125, 154, }{\b\f4 345}{\f4 \par }{\f6\fs20 NewList2}{\f4  260, }{\b\f4 342}{\f4 \par }{\f6\fs20 NewMenu}{\f4  20, 21, 22, 23, }{\b\f4 349}{\f4 \par }{\f6\fs20 NewMenuBar2}{\f4  58, }{\b\f4 350}{\f4 \par }{\f6\fs20 NewWindow}{\f4  110, 391, }{\b\f4 402}{\f4 \par }{\f6\fs20 NewWindow2}{\f4  95, 391, }{\b\f4 402}{\f4 \par }{\f6\fs20 noCrossBank}{\f4  51, 54, }{\b\f4 417}{\f4 \par note alert 69, 78\par Note Sequencer 296\par Note Synthesizer 286-295, 354\par }{\f6\fs20 NoteOff}{\f4  }{\b\f4 354}{\f4 \par }{\f6\fs20 NoteOn}{\f4  294, }{\b\f4 354}{\f4 \par }\pard\plain \s18\widctlpar\adjustright \f12\cgrid {\f4 numbers: drawing 186\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 \par }{\b\f4 O\par }{\f4 \par }{\f6\fs20 OffsetPoly}{\f4  174, }{\b\f4 368}{\f4 \par Open command 115-121\par open dialog 115-121\par }{\f6\fs20 OpenGS}{\f4  125, 126, 130, 131, }{\b\f4 337}{\f4 \par }{\f6\fs20 OpenPoly}{\f4  173, }{\b\f4 368}{\f4 \par }{\f6\fs20 OpenResourceFile}{\f4  300, }{\b\f4 377}{\f4 \par }{\f6\fs20 OpenResourceFork}{\f4  316\par origin 101, 182\par outline 189\par ovals 171, 362, 363, 364, 366, 368\par \par }{\b\f4 P\par }{\f4 \par p-strings 22, 426\par page gaps 147\par page setup 141\par page setup dialog 137\par }{\f6\fs20 PaintArc}{\f4  171, }{\b\f4 368}{\f4 \par }{\f6\fs20 PaintOval}{\f4  171, }{\b\f4 368}{\f4 \par }{\f6\fs20 PaintPoly}{\f4  173, }{\b\f4 368}{\f4 \par }{\f6\fs20 PaintRect}{\f4  13, 170, }{\b\f4 368}{\f4 \par }{\f6\fs20 PaintRRect}{\f4  172, }{\b\f4 369}{\f4 \par }{\f6\fs20 paramList}{\f4  record 391\par Pascal 2\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 compiler 3\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 passwords 256\par Paste command 254\par path names 116, 118-121, 332\par pen color 13\par pen masks 168, 371\par pen modes 166, 371\par pen patterns 166, 372\par pen size 165, 372\par }{\f6\fs20 PenNormal}{\f4  13, 94, }{\b\f4 369}{\f4 \par picture controls 250-252, 425\par picture scraps 214\par pictures 133\par point 13, 374\par points 189\par polygons 173, 361, 363, 364, 366, 367, 368\par pop-up menu control 263-267\par }{\f6\fs20 PPToPort}{\f4  133, }{\b\f4 369}{\f4 \par }{\f6\fs20 PrCloseDoc}{\f4  143, 146, }{\b\f4 355}{\f4 \par }{\f6\fs20 PrClosePage}{\f4  143, 145, 146, }{\b\f4 356}{\f4 \par }{\f6\fs20 PrDefault}{\f4  140, }{\b\f4 356}{\f4 \par }{\f6\fs20 PrError}{\f4  143, }{\b\f4 356}{\f4 \par primary colors 160\par }{\f6\fs20 prInfoRec}{\f4  358\par print dialog 141\par print job dialog 137\par print loop 142-147\par Print Manager 355\par print record 138, 140\par }\pard\plain \s18\widctlpar\adjustright \f12\cgrid {\f4 printer: choosing 137\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 printer page size 144\par printing 2, 137-148, 210, 310-312\par private scraps 214\par }{\f6\fs20 PrJobDialog}{\f4  141, }{\b\f4 356}{\f4 \par }{\f6\fs20 prJobRec}{\f4  359\par ProDOS 334\par }{\f6\fs20 PrOpenDoc}{\f4  143, }{\b\f4 357}{\f4 \par }{\f6\fs20 PrOpenPage}{\f4  143, 145\par }{\f6\fs20 PrPicFile}{\f4  143, }{\b\f4 357}{\f4 \par }{\f6\fs20 prRec}{\f4  359\par }{\f6\fs20 PrStatusRec}{\f4  359\par }{\f6\fs20 PrStlDialog}{\f4  141, }{\b\f4 358}{\f4 \par }{\f6\fs20 prStyleRec}{\f4  358\par }{\f6\fs20 PrValidate}{\f4  140, }{\b\f4 358}{\f4 \par }{\f6\fs20 PtInRect}{\f4  18, }{\b\f4 369}{\f4 \par }{\f6\fs20 ptr}{\f4  347\par public scraps 214\par purgeable memory 156\par }{\f6\fs20 PutScrap}{\f4  213, 215, }{\b\f4 379}{\f4 \par \par }{\b\f4 Q\par }{\f4 \par QuickDraw II 13, 359\par QuickDraw II Auxiliary 375\par \par }{\b\f4 R\par }{\f4 \par radio button control 230-232, 324, 325\par }{\f6\fs20 rAlertString}{\f4  resource 71, 396, }{\b\f4 417}{\f4 \par }{\f6\fs20 rBundle}{\f4  resource 303-307, }{\b\f4 418}{\f4 \par }{\f6\fs20 rComment}{\f4  resource 299-300, }{\b\f4 420}{\f4 \par }{\f6\fs20 rControlList}{\f4  resource 223\par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f6\fs20 rControlTemplate}{\f4  resource 197-202, 219-268, }{\b\f4 421}{\f4 \par }\pard \s19\widctlpar\adjustright {\f6\fs20 ReadAsciiTime}{\f4  320, }{\b\f4 353}{\f4 \par }{\f6\fs20 ReadGS}{\f4  125, 127, }{\b\f4 339}{\f4 \par }{\f6\fs20 RealFreeMem}{\f4  157, }{\b\f4 346}{\f4 \par }{\f6\fs20 rect}{\f4  374\par rectangle control 241-242\par rectangles 13, 170, 361, 363, 364, 367, 368\par }{\f6\fs20 RectInRgn}{\f4  }{\b\f4 370}{\f4 \par }{\f6\fs20 refNum}{\f4  126\par regions 175-178\par }{\f6\fs20 ReleaseResource}{\f4  82, 376, }{\b\f4 377}{\f4 \par reply record 116, 118-121, 381\par requirements\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 disk drives 3\par hardware 2\par memory 2\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 resource attributes 417\par resource compiler 437\par resource description files 51, 63-65\par resource editors 66\par resource fork 131, 335, 338\par resource ID 52, 53\par Resource Manager 375\par resources 47-68, 138\par Rez 437\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 comments 52\par compiler 51\par constants 54\par strings 79\par using 57, 60, 61, 63\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 rIcon}{\f4  resource 245, 247, 249\par }{\f6\fs20 rMenu}{\f4  resource 49, 52, }{\b\f4 422}{\f4 , 424\par }{\f6\fs20 rMenuBar}{\f4  resource 49, 53, }{\b\f4 423}{\f4 \par }{\f6\fs20 rMenuItem}{\f4  resource 50, 53, 423, }{\b\f4 424}{\f4 \par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f4 rounded rectangles 172, 363, 364, 365, 367, 369\par }\pard \s19\widctlpar\adjustright {\f6\fs20 rPicture}{\f4  resource }{\b\f4 425}{\f4 \par }{\f6\fs20 rPString}{\f4  resource 51, 54, }{\b\f4 426}{\f4 \par }{\f6\fs20 rTextForLETextBox2}{\f4  resource 228, 229, }{\b\f4 426}{\f4 \par }{\f6\fs20 rToolStartup}{\f4  resource 139, }{\b\f4 426}{\f4 \par rubber-banding 167\par ruler 204\par }{\f6\fs20 rVersion}{\f4  resource 301-303, }{\b\f4 427}{\f4 \par }{\f6\fs20 rWindColor}{\f4  resource 109, 394, }{\b\f4 429}{\f4 \par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f6\fs20 rWindParam1}{\f4  resource 87, 108, 109, 391, }{\b\f4 429}{\f4 \par }\pard \s19\widctlpar\adjustright {\f4 \par }{\b\f4 S\par }{\f4 \par Save As command 121, 122-125\par Save command 121\par saving files 121-125\par scan line control byte 161, 360\par scan lines 159, 372\par SCB 160, 161-162, 360, 372\par scrap file 215\par Scrap Manager 254, 377\par scrap types 214-215\par scrapbook 215\par scraps 213-218, 254\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 picture 214\par private 214\par public 214\par text 214\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 screen dumps 133, 165\par scripts 61\par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f4 scroll bar 86, 87, 102, 104, 105, 391, 393, 394\par }\pard \s19\widctlpar\adjustright {\f4 scroll bar control 234-239, 324, 325\par scrolling 87\par }{\f6\fs20 SetAllSCBs}{\f4  }{\b\f4 370}{\f4 \par }{\f6\fs20 SetBackColor}{\f4  13, 185, }{\b\f4 370}{\f4 \par }{\f6\fs20 SetColorEntry}{\f4  }{\b\f4 370}{\f4 \par }{\f6\fs20 SetColorTable}{\f4  161, }{\b\f4 370}{\f4 \par }{\f6\fs20 SetContentOrigin}{\f4  101, }{\b\f4 403}{\f4 \par }{\f6\fs20 SetCtlAction}{\f4  236, }{\b\f4 325}{\f4 \par }{\f6\fs20 SetCtlParams}{\f4  237, }{\b\f4 325}{\f4 \par }{\f6\fs20 SetCtlValue}{\f4  237, 238, 243, }{\b\f4 325}{\f4 \par }{\f6\fs20 SetDataSize}{\f4  100, }{\b\f4 403}{\f4 \par }{\f6\fs20 SetForeColor}{\f4  13, 185, }{\b\f4 371}{\f4 \par }{\f6\fs20 SetHandleID}{\f4  317, }{\b\f4 346}{\f4 \par }{\f6\fs20 SetLETextByID}{\f4  253, }{\b\f4 325}{\f4 \par }{\f6\fs20 SetMenuBar}{\f4  58, 350, }{\b\f4 351}{\f4 \par }{\f6\fs20 SetMenuFlag}{\f4  41, }{\b\f4 351}{\f4 \par }{\f6\fs20 SetMItem}{\f4  42, }{\b\f4 352}{\f4 \par }{\f6\fs20 SetMItemStyle}{\f4  }{\b\f4 352}{\f4 \par }{\f6\fs20 SetPage}{\f4  100, }{\b\f4 403}{\f4 \par }{\f6\fs20 SetPenMask}{\f4  169, }{\b\f4 371}{\f4 \par }{\f6\fs20 SetPenMode}{\f4  166, }{\b\f4 371}{\f4 \par }{\f6\fs20 SetPenPat}{\f4  }{\b\f4 372}{\f4 \par }{\f6\fs20 SetPenSize}{\f4  166, }{\b\f4 372}{\f4 \par }{\f6\fs20 SetPort}{\f4  94, 95, }{\b\f4 372}{\f4 \par }{\f6\fs20 SetPurge}{\f4  }{\b\f4 346}{\f4 \par }{\f6\fs20 SetSCB}{\f4  }{\b\f4 372}{\f4 \par }{\f6\fs20 SetScroll}{\f4  100, }{\b\f4 404}{\f4 \par }{\f6\fs20 SetSolidPenPat}{\f4  13, 166, }{\b\f4 373}{\f4 \par }{\f6\fs20 SetSysBar}{\f4  58, 350, }{\b\f4 352}{\f4 \par }{\f6\fs20 SetSysWindow}{\f4  }{\b\f4 404}{\f4 \par }{\f6\fs20 SetTextMode}{\f4  185, }{\b\f4 373}{\f4 \par }{\f6\fs20 SetWTitle}{\f4  123, }{\b\f4 404}{\f4 \par }{\f6\fs20 SFGetFile2}{\f4  115-121, }{\b\f4 382}{\f4 \par SFO 115, 125, 381\par }{\f6\fs20 SFPutFile2}{\f4  121, 122-125, }{\b\f4 383}{\f4 \par shadow 190\par shift key 9\par }{\f6\fs20 ShowWindow}{\f4  103, 392, }{\b\f4 404}{\f4 \par SHR screen 159\par }{\f6\fs20 ShutDownTools}{\f4  138, 139, }{\b\f4 390}{\f4 \par simple button control 223-226\par size box 86\par }{\f6\fs20 SortList2}{\f4  }{\b\f4 343}{\f4 \par sound 277-297\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 compression 295\par digitized 280-286\par synthesized 296\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 sound input 297\par Sound Tool Set 379\par soundParamBlock 381\par speaker 279\par speech 297\par spooling 143\par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f4 Standard File Operations Tool Set 115, 125, 381\par }\pard \s19\widctlpar\adjustright {\f6\fs20 StartDesk}{\f4  5-6, 7, 138, 314\par starting tools 138\par }{\f6\fs20 StartUpTools}{\f4  138, 139, 195, 314, }{\b\f4 390}{\f4 , 426\par static text control 228-230\par }{\f6\fs20 StillDown}{\f4  167, }{\b\f4 328}{\f4 \par stop alert 78\par string 426\par }{\f6\fs20 StringBounds}{\f4  187, }{\b\f4 373}{\f4 \par }{\f6\fs20 StringWidth}{\f4  187, }{\b\f4 374}{\f4 \par substitution strings 80-83, }{\b\f4 397}{\f4 \par super high resolution graphics 159\par synthesized sound 296\par }{\f6\fs20 SysBeep}{\f4  18, }{\b\f4 353}{\f4 \par }{\f6\fs20 SysFailMgr}{\f4  139, }{\b\f4 353}{\f4 \par system font 39, 188, 189\par system menu bar 20, 24\par system window 32\par \par }{\b\f4 T\par }{\f4 \par tabs 186, 203\par talking head 69\par target control 254, 257, 323\par }{\f6\fs20 taskData}{\f4  24, 88\par }{\f6\fs20 taskMask}{\f4  33, 34-35\par }\pard \s19\fi-180\li180\widctlpar\adjustright {\f6\fs20 TaskMaster}{\f4  }{\b\f4 32}{\f4 -}{\b\f4 35}{\f4 , 87, 88, 95, 100, 225, }{\b\f4 404}{\f4 \par }\pard \s19\widctlpar\adjustright {\f6\fs20 TaskMasterDA}{\f4  319, }{\b\f4 406}{\f4 \par }{\f6\fs20 teFormat}{\f4  389\par }{\f6\fs20 TEGetRuler}{\f4  204, }{\b\f4 384}{\f4 \par }{\f6\fs20 TEGetSelection}{\f4  275, }{\b\f4 385}{\f4 \par }{\f6\fs20 TEGetSelectionStyle}{\f4  207, }{\b\f4 385}{\f4 \par }{\f6\fs20 TEGetText}{\f4  208, }{\b\f4 386}{\f4 \par }{\f6\fs20 TEPaintText}{\f4  210, }{\b\f4 386}{\f4 \par }{\f6\fs20 teRuler}{\f4  388\par }{\f6\fs20 TESetRuler}{\f4  205, }{\b\f4 387}{\f4 \par }{\f6\fs20 TESetSelection}{\f4  275, }{\b\f4 387}{\f4 \par }{\f6\fs20 TESetText}{\f4  208, 209, }{\b\f4 387}{\f4 \par }{\f6\fs20 teStyle}{\f4  388\par }{\f6\fs20 TEStyleChange}{\f4  206, }{\b\f4 388}{\f4 \par }{\f6\fs20 teStyleGroup}{\f4  389\par }{\f6\fs20 teStyleItem}{\f4  389\par text 12\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 bold 190\par colored 185\par italic 190\par outlined 189\par shadowed 190\par underline 190\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 text colors 205\par text edit 195-211\par text justification 204-205\par text mode 373\par text scraps 214\par text styles 205\par }{\f6\fs20 textBlock}{\f4  22\par }{\f6\fs20 TextBounds}{\f4  187, }{\b\f4 374}{\f4 \par TextEdit Tool Set 384\par }{\f6\fs20 TextWidth}{\f4  187, }{\b\f4 374}{\f4 \par thermometer control 242-244\par thumb 100\par tick count 8\par time 320\par title bar 85\par tool errors 407\par Tool Locator 389\par tool numbers 140\par tool versions 140\par toolbox 3, 5\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 interface files 17\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 toolbox reference manuals 3, 5, 15, 16\par ToolError 126\par tools\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 see also individual tool names 7\par shutting down 5, 6\par starting 5, 6, 138\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 types.rez 52\par \par }{\b\f4 U\par }{\f4 \par underline 38, 39, 190\par units 17\par }{\f6\fs20 UnloadScrap}{\f4  215, }{\b\f4 379}{\f4 \par update events 95\par update procedure 323\par update region 176\par \par }{\b\f4 V\par }{\f4 \par vibrato 293\par volume 292, 355\par \par }\pard \s19\keepn\widctlpar\adjustright {\b\f4 W\par }{\f4 \par }\pard \s19\widctlpar\adjustright {\f6\fs20 waveForm}{\f4  355\par }{\f6\fs20 wColor}{\f4  104, 393\par }{\f6\fs20 wContDefProc}{\f4  105, 394\par }{\f6\fs20 wDataH}{\f4  104, 393\par }{\f6\fs20 wDataW}{\f4  104, 393\par }{\f6\fs20 wFrameBits}{\f4  102, 391\par }{\f6\fs20 wFrameDefProc}{\f4  105, 394\par window frame 86\par Window Manager 391\par windows 85-113\par }\pard\plain \s18\li360\widctlpar\adjustright \f12\cgrid {\f4 closing 88\par color 429\par colors 106, }{\b\f4 394}{\f4 \par customizing 101-112\par documents 89\par drawing in 93-95\par lined 106\par multiple 89-92\par name 92-93\par opening 86-88\par scrolling 99-101\par title 102, 104, 391, 393\par title bar 106\par updating 95-96, 99\par }\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f6\fs20 wInfoDefProc}{\f4  105, 394\par }{\f6\fs20 wInfoHeight}{\f4  105, 394\par }{\f6\fs20 wInfoRefCon}{\f4  105, 394\par }{\f6\fs20 wInGoAway}{\f4  88\par }{\f6\fs20 wInMenuBar}{\f4  24\par }{\f6\fs20 wInSpecial}{\f4  24\par }{\f6\fs20 wMaxH}{\f4  104, 393\par }{\f6\fs20 wMaxW}{\f4  104, 393\par }{\f6\fs20 wPageHor}{\f4  105, 394\par }{\f6\fs20 wPageVer}{\f4  105, 394\par }{\f6\fs20 wPlane}{\f4  106, 394\par }{\f6\fs20 wPosition}{\f4  106, 394\par }{\f6\fs20 wRefCon}{\f4  104, 393\par }{\f6\fs20 WriteGS}{\f4  130, 131, }{\b\f4 340}{\f4 \par writeln 12, 186\par }{\f6\fs20 WriteRamBlock}{\f4  290, }{\b\f4 380}{\f4 \par }{\f6\fs20 wScrollHor}{\f4  104, 393\par }{\f6\fs20 wScrollVer}{\f4  104, 393\par }{\f6\fs20 wStorage}{\f4  106\par }{\f6\fs20 wTitle}{\f4  104, 393\par }{\f6\fs20 wXOrigin}{\f4  104, 393\par }{\f6\fs20 wYOrigin}{\f4  104, 393\par }{\f6\fs20 wZoom}{\f4  104, 393\par \par }{\b\f4 X\par }{\f4 \par XOR highlighting 422\par \par }{\b\f4 Z\par }{\f4 \par }{\f6\fs20 ZeroScrap}{\f4  215, }{\b\f4 379}{\f4 \par zoom box 85, 102, 392\par }{\f6\fs20 ZoomWindow}{\f4  102, 392}}}\pard\plain \s19\widctlpar\adjustright \f12\cgrid {\f4 \par }}