{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset77\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 000000000000001d74c0}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 0000464f4e44464f4e44}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 000000000000001d74c0}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset2\fprq2{\*\panose 24fa03bfcd90001d8010}Zapf Dingbats;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fmodern\fcharset77\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 000000000000001d74c0}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 0000464f4e44464f4e44}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 000000000000001d74c0}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset2\fprq2{\*\panose 24fa03bfcd90001d8010}Zapf Dingbats;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\adjustright \f4\cgrid \snext0 Normal;}{\s1\qc\sa240\keepn\widctlpar\adjustright \b\f4\fs48\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \adjustright \b\f4\fs36\cgrid \sbasedon0 \snext0 heading 2;}{\s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \adjustright \b\f5\fs28\cgrid \sbasedon0 \snext0 heading 3;}{\s4\qc\keepn\nowidctlpar\adjustright \b\f4\fs44\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}{\*\cs15 \additive \sbasedon10 page number;}{\s16\nowidctlpar\tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext16 footer;}{\s17\sb160\keepn\nowidctlpar\adjustright \b\f4\lang1024\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{\s18\qj\fi360\sb60\widctlpar\adjustright \f4\cgrid \sbasedon19 \snext18 Style1;}{\s19\fi360\sb60\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext19 Body Text;}{\s20\li240\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{\s21\li480\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s22\li720\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{\s23\li960\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s24\li1200\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s25\li1440\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{\s26\li1680\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s27\li1920\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\s28\fi360\sb40\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext28 text;}{\s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid \sbasedon0 \snext29 Code;}{\s30\widctlpar\adjustright \fs20\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon0 \snext30 Plain Text;}{\s31\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext31 Problem;}{\s32\nowidctlpar\tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext32 header;}{\s33\nowidctlpar\adjustright \cbpat9 \f7\cgrid \sbasedon0 \snext33 Document Map;}{\s34\qc\widctlpar\outlinelevel0\adjustright \b\f4\fs72\cgrid \sbasedon0 \snext34 Title;}{\s35\fi-240\li240\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 1;}{\s36\fi-1080\li1800\ri720\sb40\widctlpar\adjustright \f4\cgrid \sbasedon28 \snext36 Note;}{\s37\fi-240\li480\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 2;}{\s38\fi-240\li720\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 3;}{\s39\fi-240\li960\nowidctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 \sautoupd index 4;}{\s40\fi-240\li1200\nowidctlpar\adjustright \f4\fs18\cgrid \sbasedon0 \snext0 \sautoupd index 5;}{\s41\fi-240\li1440\nowidctlpar\adjustright \f4\fs18\cgrid \sbasedon0 \snext0 \sautoupd index 6;}{\s42\fi-240\li1680\nowidctlpar\adjustright \f4\fs18\cgrid \sbasedon0 \snext0 \sautoupd index 7;}{\s43\fi-240\li1920\nowidctlpar\adjustright \f4\fs18\cgrid \sbasedon0 \snext0 \sautoupd index 8;}{\s44\fi-240\li2160\nowidctlpar\adjustright \f4\fs18\cgrid \sbasedon0 \snext0 \sautoupd index 9;}{\s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid \sbasedon0 \snext35 index heading;}}{\*\listtable{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid1}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid2}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li720\jclisttab\tx720 }{\listname ;}\listid3}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li720\jclisttab\tx720 }{\listname ;}\listid4}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li720\jclisttab\tx720 }{\listname ;}\listid5}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat3\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fbias0 \fi-360\li720\jclisttab\tx720 }{\listname ;}\listid6}{\list\listtemplateid0\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid7}}{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid1\listoverridecount0\ls2}{\listoverride\listid1\listoverridecount0\ls3}{\listoverride\listid2\listoverridecount0\ls4}{\listoverride\listid3\listoverridecount0\ls5}{\listoverride\listid1\listoverridecount0\ls6}{\listoverride\listid2\listoverridecount0\ls7}{\listoverride\listid1\listoverridecount0\ls8}{\listoverride\listid2\listoverridecount0\ls9}{\listoverride\listid3\listoverridecount0\ls10}{\listoverride\listid4\listoverridecount0\ls11}{\listoverride\listid1\listoverridecount0\ls12}{\listoverride\listid2\listoverridecount0\ls13}{\listoverride\listid3\listoverridecount0\ls14}{\listoverride\listid4\listoverridecount0\ls15}{\listoverride\listid5\listoverridecount0\ls16}{\listoverride\listid6\listoverridecount0\ls17}{\listoverride\listid7\listoverridecount0\ls18}{\listoverride\listid1\listoverridecount0\ls19}{\listoverride\listid1\listoverridecount0\ls20}{\listoverride\listid2\listoverridecount0\ls21}}{\*\revtbl {Unknown;}}{\info{\title Learn to Program}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy10\hr15\min26}{\revtim\yr2000\mo10\dy10\hr15\min26}{\printim\yr2000\mo10\dy10\hr15\min24}{\version2}{\edmins0}{\nofpages262}{\nofwords66026}{\nofchars376352}{\*\company Byte Works, Inc.}{\nofcharsws462186}{\vern99}}\margt2160\margb2160 \facingp\widowctrl\ftnbj\aenddoc\ftnrestart\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbkodd\pgnrestart\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \s32\nowidctlpar\brdrb\brdrs\brdrw10 \tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid {\f5\fs20 Learn to Program in GSoft BASIC\par }}{\headerr \pard\plain \s32\qr\nowidctlpar\brdrb\brdrs\brdrw10\brsp20 \tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid {\f5\fs20 Learn to Program in GSoft BASIC\par }}{\footerl \pard\plain \s16\nowidctlpar\tqc\tx4320\tqr\tx8640\pvpara\phmrg\posxo\posy0\adjustright \f4\cgrid {\cs15 \par }\pard \s16\widctlpar\brdrt\brdrs\brdrw10\brsp20 \tqr\tx9360\adjustright {\field{\*\fldinst {\cs15\f5\fs20  PAGE }}{\fldrslt {\cs15\f5\fs20\lang1024 256}}}{\f5\fs20 \par }}{\footerr \pard\plain \s16\qr\fi360\widctlpar\brdrt\brdrs\brdrw10\brsp20 \tqr\tx9360\adjustright \f4\cgrid {\field{\*\fldinst {\cs15\f5\fs20  PAGE }}{\fldrslt {\cs15\f5\fs20\lang1024 255}}}{\f5\fs20 \par }}{\footerf \pard\plain \s16\qr\fi360\widctlpar\tqr\tx9360\adjustright \f4\cgrid {\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\nowidctlpar\adjustright \f4\cgrid {\b\fs72 Learn to Program\par }\pard \qc\widctlpar\outlinelevel0\adjustright {\b\fs72 In\par GSoft BASIC\par }\pard \qc\widctlpar\adjustright {\b\fs36 \par \par \par \par \par \par \par }\pard \qc\nowidctlpar\adjustright {\b\fs48 By Mike Westerfield\par }\pard \qc\widctlpar\adjustright {\b\fs36 \par \par }\pard \widctlpar\adjustright {\b\fs36 \par }\pard \qc\widctlpar\adjustright {\b\fs36 \par \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\b\fs28 Copyright 1999\par }\pard \qc\widctlpar\adjustright {\b\fs28 \par }\pard \qc\widctlpar\outlinelevel0\adjustright {\b\fs28 Byte Works}{\b\fs28\super \u174\'a8}{\b\fs28 , Inc.\par }\pard \qc\widctlpar\adjustright {8000 Wagon Mound Dr. NW\par Albuquerque, NM 87120-2845\par \par }\pard \qc\sb40\widctlpar\adjustright {Voice (505) 898-8183\par FAX (505) 898-4092\par E-Mail MikeW50@AOL.COM\par Web http://www.hypermall.com/byteworks\par }\pard \qc\widctlpar\adjustright {\b\fs36 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl {\footerf \pard\plain \s16\qr\fi360\widctlpar\brdrt\brdrs\brdrw10\brsp20 \tqr\tx9360\adjustright \f4\cgrid {\field{\*\fldinst {\cs15\f5\fs20  PAGE }}{\fldrslt {\cs15\f5\fs20\lang1024 253}}}{\par }}\pard\plain \qc\widctlpar\outlinelevel0\adjustright \f4\cgrid {\b\fs36 Table of Contents\par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {\field\fldedit{\*\fldinst {\fs36\lang1033  TOC \\o "1-3" }}{\fldrslt {Lesson One \emdash  Getting Started\tab }{\field{\*\fldinst { PAGEREF _Toc444244505 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500300035000000}}}{\fldrslt {1}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Before We Get Started...\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244506 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500300036000000}}}{\fldrslt {\lang1024 1}}}{\lang1024 \par How to Learn to Program\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244507 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500300037000000}}}{\fldrslt {\lang1024 3}}}{\lang1024 \par What You Need\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244508 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500300038000000}}}{\fldrslt {\lang1024 3}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 What You Should Already Know\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244509 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500300039000000}}}{\fldrslt {\lang1024 4}}}{\lang1024 \par GSoft BASIC, The FREE Version!\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244510 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310030000000}}}{\fldrslt {\lang1024 5}}}{\lang1024 \par Getting Everything Ready\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244511 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310031000000}}}{\fldrslt {\lang1024 5}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The Three Faces of GSoft\~BASIC\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244512 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310032000000}}}{\fldrslt {\lang1024 5}}}{\lang1024 \par Your First Flight... er, Program\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244513 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310033000000}}}{\fldrslt {\lang1024 6}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Dealing with Errors\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244514 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310034000000}}}{\fldrslt {\lang1024 9}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 A Close Look at Hello World\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244515 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310035000000}}}{\fldrslt {\lang1024 10}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 More About Reserved Words\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244516 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310036000000}}}{\fldrslt {\lang1024 10}}}{\lang1024 \par Case Sensitivity\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244517 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310037000000}}}{\fldrslt {\lang1024 11}}}{\lang1024 \par Where Are The Line Numbers?\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244518 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310038000000}}}{\fldrslt {\lang1024 12}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 How Programs Execute\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244519 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500310039000000}}}{\fldrslt {\lang1024 12}}}{\lang1024 \par Graphics Programs\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244520 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320030000000}}}{\fldrslt {\lang1024 13}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Two \emdash  Variables and Loops\tab }{\field{\*\fldinst { PAGEREF _Toc444244521 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320031000000}}}{\fldrslt {17}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Integer Variables\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244522 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320032000000}}}{\fldrslt {\lang1024 17}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 More About Variable Names\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244523 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320033000000}}}{\fldrslt {\lang1024 19}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Using DIM To Declare a Variable Type\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244524 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320034000000}}}{\fldrslt {\lang1024 20}}}{\lang1024 \par The FOR Loop\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244525 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320035000000}}}{\fldrslt {\lang1024 22}}}{\lang1024 \par Some Thoughts on Comments\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244526 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320036000000}}}{\fldrslt {\lang1024 23}}}{\lang1024 \par Operator Precedence\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244527 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320037000000}}}{\fldrslt {\lang1024 24}}}{\lang1024 \par The Maximum Integer\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244528 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320038000000}}}{\fldrslt {\lang1024 26}}}{\lang1024 \par Real Numbers\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244529 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500320039000000}}}{\fldrslt {\lang1024 27}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 PRINT USING for Dollar Amounts\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244530 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330030000000}}}{\fldrslt {\lang1024 29}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Exponents\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244531 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330031000000}}}{\fldrslt {\lang1024 31}}}{\lang1024 \par Why So Many Kinds of Numbers?\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244532 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330032000000}}}{\fldrslt {\lang1024 33}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Three \endash  Input, Loops and Conditions\tab }{\field{\*\fldinst { PAGEREF _Toc444244533 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330033000000}}}{\fldrslt {35}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Input\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244534 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330034000000}}}{\fldrslt {\lang1024 35}}}{\lang1024 \par Our First Game... er, Computer Aided Simulation\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244535 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330035000000}}}{\fldrslt {\lang1024 37}}}{\lang1024 \par The DO-LOOP\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244536 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330036000000}}}{\fldrslt {\lang1024 38}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The Flexible DO-LOOP Statement\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244537 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330037000000}}}{\fldrslt {\lang1024 41}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Random Numbers\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244538 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330038000000}}}{\fldrslt {\lang1024 42}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Why Random Numbers Are Important\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244539 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500330039000000}}}{\fldrslt {\lang1024 44}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The IF Statement\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244540 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340030000000}}}{\fldrslt {\lang1024 46}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The ELSE Clause\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244541 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340031000000}}}{\fldrslt {\lang1024 48}}}{\lang1024 \par The World\rquote s Shortest Animation Course\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244542 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340032000000}}}{\fldrslt {\lang1024 49}}}{\lang1024 \par Nesting If Statements\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244543 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340033000000}}}{\fldrslt {\lang1024 51}}}{\lang1024 \par A Bit of Iffy History\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244544 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340034000000}}}{\fldrslt {\lang1024 53}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Boolean Logic\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244545 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340035000000}}}{\fldrslt {\lang1024 55}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Four \endash  Subroutines\tab }{\field{\*\fldinst { PAGEREF _Toc444244546 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340036000000}}}{\fldrslt {57}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Subroutines Avoid Repetition\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244547 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340037000000}}}{\fldrslt {\lang1024 57}}}{\lang1024 \par The Structure of a Subroutine\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244548 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340038000000}}}{\fldrslt {\lang1024 60}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Where to Put Subroutines\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244549 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500340039000000}}}{\fldrslt {\lang1024 61}}}{\lang1024 \par The END Statement\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244550 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350030000000}}}{\fldrslt {\lang1024 62}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Commenting Subroutines\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244551 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350031000000}}}{\fldrslt {\lang1024 62}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Procedure Description\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244552 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350032000000}}}{\fldrslt {\lang1024 62}}}{\lang1024 \par Parameters\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244553 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350033000000}}}{\fldrslt {\lang1024 63}}}{\lang1024 \par Shared Variables\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244554 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350034000000}}}{\fldrslt {\lang1024 63}}}{\lang1024 \par Return Values\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244555 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350035000000}}}{\fldrslt {\lang1024 63}}}{\lang1024 \par Notes\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244556 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350036000000}}}{\fldrslt {\lang1024 63}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Subroutines Let You Create New Commands\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244557 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350037000000}}}{\fldrslt {\lang1024 64}}}{\lang1024 \par Functions are Subroutines that Return a Value\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244558 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350038000000}}}{\fldrslt {\lang1024 66}}}{\lang1024 \par Value and Variable Parameters\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244559 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500350039000000}}}{\fldrslt {\lang1024 69}}}{\lang1024 \par Shared Variables\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244560 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360030000000}}}{\fldrslt {\lang1024 74}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Five \endash Strings\tab }{\field{\*\fldinst { PAGEREF _Toc444244561 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360031000000}}}{\fldrslt {77}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 What Are Strings?\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244562 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360032000000}}}{\fldrslt {\lang1024 77}}}{\lang1024 \par The Two Ways To Read a String\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244563 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360033000000}}}{\fldrslt {\lang1024 77}}}{\lang1024 \par Manipulating Strings\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244564 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360034000000}}}{\fldrslt {\lang1024 79}}}{\lang1024 \par Characters\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244565 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360035000000}}}{\fldrslt {\lang1024 84}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The ASCII Character Set\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244566 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360036000000}}}{\fldrslt {\lang1024 84}}}{\lang1024 \par The Extended Character Set\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244567 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360037000000}}}{\fldrslt {\lang1024 86}}}{\lang1024 \par P-Strings, C-Strings, and Other Confusions\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244568 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360038000000}}}{\fldrslt {\lang1024 87}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Comparing Strings\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244569 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500360039000000}}}{\fldrslt {\lang1024 88}}}{\lang1024 \par Numbers and Strings\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244570 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370030000000}}}{\fldrslt {\lang1024 89}}}{\lang1024 \par Garbage Collection\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244571 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370031000000}}}{\fldrslt {\lang1024 89}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Six \endash Arrays\tab }{\field{\*\fldinst { PAGEREF _Toc444244572 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370032000000}}}{\fldrslt {93}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Groups of Numbers as Arrays\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244573 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370033000000}}}{\fldrslt {\lang1024 93}}}{\lang1024 \par The Shell Sort\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244574 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370034000000}}}{\fldrslt {\lang1024 97}}}{\lang1024 \par Multidimensional Arrays\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244575 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370035000000}}}{\fldrslt {\lang1024 103}}}{\lang1024 \par Passing Arrays to a Subroutine\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244576 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370036000000}}}{\fldrslt {\lang1024 110}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Seven \endash  Types and Constants\tab }{\field{\*\fldinst { PAGEREF _Toc444244577 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370037000000}}}{\fldrslt {115}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Simple Types and Named Types\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244578 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370038000000}}}{\fldrslt {\lang1024 115}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The Six Built-in Types\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244579 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500370039000000}}}{\fldrslt {\lang1024 115}}}{\lang1024 \par The TYPE Statement\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244580 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380030000000}}}{\fldrslt {\lang1024 117}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 CONST\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244581 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380031000000}}}{\fldrslt {\lang1024 117}}}{\lang1024 \par Records Store More than One Type\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244582 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380032000000}}}{\fldrslt {\lang1024 118}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Eight \endash  Files\tab }{\field{\*\fldinst { PAGEREF _Toc444244583 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380033000000}}}{\fldrslt {121}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 An Overview of the Process\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244584 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380034000000}}}{\fldrslt {\lang1024 121}}}{\lang1024 \par Opening a File for Output\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244585 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380035000000}}}{\fldrslt {\lang1024 122}}}{\lang1024 \par Writing to a File\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244586 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380036000000}}}{\fldrslt {\lang1024 123}}}{\lang1024 \par Closing a File\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244587 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380037000000}}}{\fldrslt {\lang1024 123}}}{\lang1024 \par Writing Our First File\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244588 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380038000000}}}{\fldrslt {\lang1024 124}}}{\lang1024 \par Reading from a File\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244589 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500380039000000}}}{\fldrslt {\lang1024 124}}}{\lang1024 \par File Names, Directories, Path Names and Folders\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244590 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390030000000}}}{\fldrslt {\lang1024 126}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 File Names, GS/OS and ProDOS\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244591 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390031000000}}}{\fldrslt {\lang1024 126}}}{\lang1024 \par Path Names\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244592 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390032000000}}}{\fldrslt {\lang1024 127}}}{\lang1024 \par Partial Path Names and the Default Prefix\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244593 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390033000000}}}{\fldrslt {\lang1024 128}}}{\lang1024 \par Names in Programs\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244594 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390034000000}}}{\fldrslt {\lang1024 128}}}{\lang1024 \par Colons and Slashes\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244595 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390035000000}}}{\fldrslt {\lang1024 128}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Finding the End of a File\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244596 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390036000000}}}{\fldrslt {\lang1024 129}}}{\lang1024 \par Printing with Files\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244597 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390037000000}}}{\fldrslt {\lang1024 132}}}{\lang1024 \par Binary Files\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244598 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390038000000}}}{\fldrslt {\lang1024 133}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Opening and Closing Binary Files\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244599 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003500390039000000}}}{\fldrslt {\lang1024 133}}}{\lang1024 \par Writing Binary Files\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244600 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300030000000}}}{\fldrslt {\lang1024 134}}}{\lang1024 \par Reading Binary Files\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244601 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300031000000}}}{\fldrslt {\lang1024 135}}}{\lang1024 \par Reading and Writing Practically Any File\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244602 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300032000000}}}{\fldrslt {\lang1024 135}}}{\lang1024 \par More About File Types and File Formats\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244603 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300033000000}}}{\fldrslt {\lang1024 136}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Random Access\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244604 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300034000000}}}{\fldrslt {\lang1024 137}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Nine \endash  Pointers and Lists\tab }{\field{\*\fldinst { PAGEREF _Toc444244605 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300035000000}}}{\fldrslt {143}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 What is a Pointer?\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244606 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300036000000}}}{\fldrslt {\lang1024 143}}}{\lang1024 \par Pointers are Variables, Too!\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244607 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300037000000}}}{\fldrslt {\lang1024 144}}}{\lang1024 \par Allocating and Deallocating Memory\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244608 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300038000000}}}{\fldrslt {\lang1024 146}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 How New and Dispose Work\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244609 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600300039000000}}}{\fldrslt {\lang1024 147}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Linked Lists\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244610 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310030000000}}}{\fldrslt {\lang1024 148}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Stacks\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244611 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310031000000}}}{\fldrslt {\lang1024 150}}}{\lang1024 \par Queues\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244612 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310032000000}}}{\fldrslt {\lang1024 155}}}{\lang1024 \par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Running Out Of Memory\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244613 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310033000000}}}{\fldrslt {\lang1024 156}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Ten \endash \~Miscellaneous Useful Stuff\tab }{\field{\*\fldinst { PAGEREF _Toc444244614 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310034000000}}}{\fldrslt {157}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The SELECT CASE Statement\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244615 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310035000000}}}{\fldrslt {\lang1024 157}}}{\lang1024 \par Revisiting the FOR Loop\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244616 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310036000000}}}{\fldrslt {\lang1024 161}}}{\lang1024 \par The GOTO Statement\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244617 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310037000000}}}{\fldrslt {\lang1024 165}}}{\lang1024 \par The ONERR GOTO Statement\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244618 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310038000000}}}{\fldrslt {\lang1024 166}}}{\lang1024 \par Variant Records\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244619 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600310039000000}}}{\fldrslt {\lang1024 168}}}{\lang1024 \par A Quick Tour of Some Advanced GSoft BASIC Features\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244620 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320030000000}}}{\fldrslt {\lang1024 178}}}{\lang1024 \par }\pard\plain \s21\li480\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Changing the Size of Memory\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244621 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320031000000}}}{\fldrslt {\lang1024 178}}}{\lang1024 \par Libraries\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244622 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320032000000}}}{\fldrslt {\lang1024 178}}}{\lang1024 \par The MakeRuntime Utility\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244623 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320033000000}}}{\fldrslt {\lang1024 179}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Eleven \endash  Scanning Text\tab }{\field{\*\fldinst { PAGEREF _Toc444244624 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320034000000}}}{\fldrslt {181}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 The Course of the Course\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244625 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320035000000}}}{\fldrslt {\lang1024 181}}}{\lang1024 \par Manipulating Text\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244626 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320036000000}}}{\fldrslt {\lang1024 182}}}{\lang1024 \par Building a Simple Scanner\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244627 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320037000000}}}{\fldrslt {\lang1024 183}}}{\lang1024 \par Symbol Tables\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244628 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320038000000}}}{\fldrslt {\lang1024 186}}}{\lang1024 \par Parsing\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244629 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600320039000000}}}{\fldrslt {\lang1024 189}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Twelve \endash \~Recursion\tab }{\field{\*\fldinst { PAGEREF _Toc444244630 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330030000000}}}{\fldrslt {195}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 A Quick Look at Recursion\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244631 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330031000000}}}{\fldrslt {\lang1024 195}}}{\lang1024 \par How Procedures Call Themselves\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244632 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330032000000}}}{\fldrslt {\lang1024 195}}}{\lang1024 \par Recursion is a Way of Thinking\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244633 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330033000000}}}{\fldrslt {\lang1024 197}}}{\lang1024 \par A Practical Application of Recursion\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244634 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330034000000}}}{\fldrslt {\lang1024 200}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Thirteen \endash  Sorts\tab }{\field{\*\fldinst { PAGEREF _Toc444244635 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330035000000}}}{\fldrslt {207}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Sorting\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244636 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330036000000}}}{\fldrslt {\lang1024 207}}}{\lang1024 \par The Shell Sort\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244637 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330037000000}}}{\fldrslt {\lang1024 207}}}{\lang1024 \par Quick Sort\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244638 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330038000000}}}{\fldrslt {\lang1024 210}}}{\lang1024 \par How Fast Are They?\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244639 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600330039000000}}}{\fldrslt {\lang1024 216}}}{\lang1024 \par Quick Sort Can Fail!\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244640 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340030000000}}}{\fldrslt {\lang1024 216}}}{\lang1024 \par Sorting Summary\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244641 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340031000000}}}{\fldrslt {\lang1024 218}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Lesson Fourteen \endash  Searches and Trees\tab }{\field{\*\fldinst { PAGEREF _Toc444244642 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340032000000}}}{\fldrslt {219}}}{\par }\pard\plain \s20\li240\nowidctlpar\tqr\tldot\tx8630\adjustright \f4\cgrid {\lang1024 Storing and Accessing Information\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244643 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340033000000}}}{\fldrslt {\lang1024 219}}}{\lang1024 \par Sequential Searches\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244644 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340034000000}}}{\fldrslt {\lang1024 219}}}{\lang1024 \par The Binary Search\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244645 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340035000000}}}{\fldrslt {\lang1024 220}}}{\lang1024 \par A Cross Reference Program for BASIC\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244646 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340036000000}}}{\fldrslt {\lang1024 221}}}{\lang1024 \par The Binary Tree\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244647 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340037000000}}}{\fldrslt {\lang1024 229}}}{\lang1024 \par Ruffles and Flourishes\tab }{\field{\*\fldinst {\lang1024  PAGEREF _Toc444244648 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340038000000}}}{\fldrslt {\lang1024 236}}}{\lang1024 \par }\pard\plain \s17\sb160\keepn\nowidctlpar\tqr\tldot\tx8630\adjustright \b\f4\lang1024\cgrid {Index\tab }{\field{\*\fldinst { PAGEREF _Toc444244649 \\h }{{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400340034003200340034003600340039000000}}}{\fldrslt {239}}}{\par }\pard \s17\sb160\keepn\nowidctlpar\adjustright }}\pard\plain \s17\sb160\keepn\nowidctlpar\adjustright \b\f4\lang1024\cgrid {\par }\pard\plain \qc\widctlpar\adjustright \f4\cgrid {\b\fs36 \sect }\sectd \sbkodd\pgnrestart\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244505}Lesson One \emdash  Getting Started{\*\bkmkend _Toc444244505}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244506}Before We Get Started...{\*\bkmkend _Toc444244506}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {When I went to grade school, my teachers tried to beat some basic skills into my thick head. Back then, the basic skills included reading, writing, and arithmetic. When it came to spelling, my mind was already warped, because my teachers had also explained that these were the three R\rquote s.\par Lately, in our rapidly changing world, we have added a new basic skill. It just isn\rquote t good enough to be able to read and write, plus do some math. In 1965, it wasn\rquote t easy to get from New York to Chicago without reading signs, writing instructions, counting some change and reading a clock. Today, you will use a computer to make the same trip. The travel agent will log your reservations in a computer. You may get spending money from a computer-based automatic teller. A digital watch counts bits to tell you what time it is. Computers control the flow of trains and the displays used by air traffic controllers. Your check book may even have a calculator. It\rquote s become a computerized world, and people who can\rquote t or won\rquote t deal with computers are rapidly being left as far behind as an illiterate person in the sixties.\par Of course, you know all of that. That\rquote s why you have decided to learn to program. By the end of the course, you will know one of today\rquote s most popular and widely available programming languages, BASIC. You will know it well enough to write programs of your own. Whether you want to plot an engineering equation, create a custom cooking program to adjust ingredients for any number of people, or write a computer game, this course will get you ready.\par If you have been around computers for a long time, you may know that there are many languages you can use to write programs for your computer. It\rquote s fair to ask why you should learn BASIC.\par One of the things you must look for in a computer language is that it must be fairly common. If a language is common, that tells you two important things: A lot of people think the language is a good one, and no matter what computer you decide to write a program for, you are likely to find the language you know. Today, there are five languages that fulfill this first requirement. They are C, Pascal, assembly language and BASIC.\par If you decide to make your living programming a computer, you will eventually learn most of these languages, and probably a few more. If you are learning to program, though, you have to pick just one of them to learn first. We can immediately rule out assembly language. In assembly language, you have to deal with the machine\rquote s internal structure. It takes many individual instructions to do the simplest thing. You will spend more time dealing with bits and bytes than learning how to write a well-organized program\par C and Pascal are both good choices. Compared to BASIC, most people find C rather obtuse. The reason has to do with the type of programming each language was created for. One of the design goals of the BASIC language was to create a simple language for scientists and engineers. BASIC has grown beyond this initial audience, but it is still one of the simplest of the popular computer languages to learn and read. It has all of the facilities needed to implement modern programs. C was designed for professional programmers who implement programs that might need to do some very tricky things. Because of its built-in safety checks, the BASIC language often hinders their efforts. C, on the other hand, does not have these checks. That\rquote s good for the careful professional programmer, but bad for a beginner, who really needs those checks\par Pascal is a great first language, just like BASIC. Pascal tends to be more verbose, but that\rquote s not necessarily a bad thing, because Pascal programs tend to be laid out better as a result. We\rquote ll learn some techniques for laying out BASIC programs to get around this minor disadvantage.\par BASIC has an advantage over both C and Pascal, though. There are two common ways to create computer languages. One method is called compiling, and the other is called interpreting. At this point, it\rquote s not important to understand the technical difference between the two, just to realize there are two methods, each with its own advantages and disadvantages.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v compiler}}}{\par Most implementations of BASIC, including GSoft BASIC, are interpreters}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v interpreter}}}{. That\rquote s good and bad. Interpreted programs run slower than compiled programs, although that\rquote s not an important consideration for any of the programs in this course, or for many other programs. But interpreted programming languages are easier to use. Your program doesn\rquote t have to be compiled, so it is ready to run right away. There are also fewer steps in creating a program, which makes your job of learning to use the language a lot easier.\par I\rquote d like to make one point clear, though. BASIC is not inherently slower than Pascal or C. A BASIC compiler will create programs that run at about the same speed as compiled Pascal or C programs. For that matter, you could create an interpreter for Pascal or C, and in fact, that has been done. Any language can be implemented either way, but BASIC is generally implemented as an interpreter, and Pascal and C are generally implemented as compilers.\par Before getting too much further, I also want to point out what this course is not. This is not a course about writing Apple II}{\fs18 GS}{ desktop programs. I don\rquote t want to discourage you from writing desktop programs; quite the contrary. On the other hand, as you will find out, there is a lot to learn about programming before you are really ready to tackle something like a desktop program. By the time you finish this course, you will be ready to start to learn about desktop programming. If you tried to learn desktop programming right away, though, you would probably fail. There\rquote s just too much to learn to try and do it all at once.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244507}How to Learn to Program{\*\bkmkend _Toc444244507}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Learning to program has a lot in common with learning to fly an airplane. When you learn to fly, most people start with an introductory flight with an instructor. Those that don\rquote t often make a bad first landing, and never get a second chance. (An old adage around flight schools is that any landing you walk away from was a good landing.)  Before, during and after the flight, the instructor will tell you about some of the basics of flight: How the control surfaces work, what the controls do, and so forth. There will be a lot you don\rquote t know, and a lot of things you are told may not make sense right away. As you progress, you will spend time reading books and sitting in lectures, but you will also spend a lot of time actually flying the airplane. You wouldn\rquote t expect to spend all of your time reading books and sitting in lectures, then walk out to the plane and go off for a cross-country flight with no instructor; you gradually work up to that point. Eventually, though, you solo. You start to fly long distances, first with an instructor and then alone. Finally the day comes when you get your license.\par It\rquote s the same way with programming. In a moment, we\rquote ll get started. We\rquote ll start off with a few simple programs. It is absolutely essential that you type them in and run them. There will be many problems that you can work on your own. The more problems you work, the better programmer you will become. Sure, we will spend some time talking about the ideas behind programming, and there will be some problems that you need to work through with a pencil and paper. For the most part, though, you will be programming; either typing in and analyzing programs with the help of this material, or writing and running your own programs. Gradually, the programs will get longer, and before long you will be able to write your own programs.\par Just in case you missed the point, let me spell it out in very simple terms. If you read this material, but don\rquote t type in the sample programs or work the problems, you will know as much about programming as you would know about flying from reading a book. In short, very little. Programming is a skill. If you don\rquote t practice the skill, you will never learn it.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244508}What You Need{\*\bkmkend _Toc444244508}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Now is the time to sit down in front of your computer. Before starting, let\rquote s make sure you have everything you will need. First, you need an Apple\~II}{\fs18 GS}{ computer. (An emulator is fine, as long as it emulates and Apple\~II}{\fs18 GS}{.) It must have a monitor. It\rquote s nice if the monitor is color, and you\rquote ll use color in some graphics programs, but you can make do with a black and white monitor. The computer must have at least 1.125M of memory. For the older Apple\~II}{\fs18 GS}{ that came with 256K on the mother board, this means that the memory card in the special memory slot must be populated with 1M of memory. In the most common case of an Apple memory card, this means that there should be a memory chip in each socket on the card. You can check this by taking the top off of your computer and looking. With the newer Apple\~II}{\fs18 GS}{, which comes with 1.125M of memory on the mother board, you don\rquote t need a memory card at all.\par You must have at least one 3.5\rdblquote  disk drive, plus another 3.5\rdblquote  disk drive or a hard drive. It is possible to use GSoft\~BASIC with a single 3.5\rdblquote  disk drive, but it\rquote s tough. We won\rquote t go over the details of using a single drive here. If you don\rquote t have a second drive, contact Byte Works technical support and discuss your options.\par You will need a copy of GSoft\~BASIC. If you decide to use a different BASIC, there will be some things in this book that will not work. You would have to figure out why and make appropriate adjustments. By the time you finish this course, you will know enough to do that. At first, though, you may not. For that reason, I would suggest that you stick with GSoft\~BASIC.\par There are some other things that would be nice, but not essential. Most people like to print their programs and look at the paper copy. I highly recommend a printer if you intend to try this. A hard disk is also very nice. Hard disks can hold much more than a floppy disk, so you will not have to switch disks as often. Hard disks are also faster than floppy disks, which again speeds up the programming process. Finally, an accelerator card will roughly double the speed of your computer. As I said, all of these are nice. If you end up spending a lot of time programming, I would encourage developing a close relationship with St. Nicholas in an attempt to collect these items. You can, however, do everything in this course without them.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244509}What You Should Already Know{\*\bkmkend _Toc444244509}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v prerequisits}}}{Any book about computers has to make some assumptions about what you already know. Let\rquote s briefly discuss the assumptions I\rquote m making so you\rquote re not surprised about things I leave out.\par I assume you\rquote re a reasonably intelligent person who is already familiar with using computers. I won\rquote t be telling you how to insert floppy disks, how to use an editor to type programs, or how to copy files. For the most part, you should already know how to do those things. Using the text editor is the one area where you may need a little more help than usual, simply because the editor we\rquote ll use to write programs is a little different than editors used to write books and letters. The similarities are more frequent than the differences, though, and a little time with the GSoft\~BASIC reference manual should be enough for anyone who already knows how to use a word processor.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244510}GSoft BASIC, The FREE Version!{\*\bkmkend _Toc444244510}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GSoft BASIC, The FREE Version!}}}{There are two versions of GSoft\~BASIC. This book assumes you are using the commercial version, but almost everything in this book will actually work on the smaller, free version. You can download a copy of the free version from http://www.hypermall.com/byteworks. You can also get a copy on a floppy disk from the publisher of this book for a small fee.\par If you\rquote re not sure which version is for you, start with the free one. When you get to the point I this course where it deals with libraries and creating programs that run from the Finder, which are the two things the commercial version adds that we use in this course, you can switch to the commercial version of GSoft\~BASIC or just skip those sections.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244511}Getting Everything Ready{\*\bkmkend _Toc444244511}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {When I bought my first FORTRAN compiler for the Apple II, I had a frightening experience. I wrote a program that crashed the compiler. The program actually erased some of the information on the compiler disk, so I could not use that disk anymore. In those days, many vendors still took the absurd position that computer languages had to be copy protected. My local dealer either could not or would not help me restore the disk. I had one other copy (the program came with two copies), but I was afraid to use it.\par Fortunately, times have changed. Computer languages are no longer copy protected. The very first thing you should do when you open your copy of GSoft\~BASIC is to make copies of both of the floppy disks that come with the package. You can use the Finder to do this. If you know how to use some other copy program, and you like it better, go ahead and use it. Any copy program will work. Label each of the disks you have copied, and put the originals in a safe place.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v backups}}}{If you are using two 3.5\rdblquote  floppy disk drives, you will use a copy of the first disk in the second floppy disk drive and your normal boot disk in the first drive. You might want to make an extra copy of the first GSoft\~BASIC disk; you\rquote ll use that one both to run GSoft\~BASIC and to save your programs.\par If you are using a hard drive, you will need to install GSoft\~BASIC on the hard drive. You can find instructions in the reference manual that comes with GSoft\~BASIC.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244512}The Three Faces of GSoft\~BASIC{\*\bkmkend _Toc444244512}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {It\rquote s worth mentioning that there are three ways to create and run a GSoft\~BASIC program. This course assumes you are using the simplest, the GSoft\~BASIC shell. (A shell is the name for the program that looks at things you type, like CATALOG or EDIT, and carries out your instructions.)\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ORCA shell}}}{There is another version that runs from the ORCA shell. All of the programs you see here will work fine from that version. If you\rquote re already familiar with the ORCA shell, you have the commercial version of GSoft BASIC, and you prefer the ORCA shell to the smaller, simpler one built into GSoft\~BASIC, feel free to use it. If you have any trouble getting started with the ORCA shell version, refer to the reference manual.\par The last version of GSoft\~BASIC works in conjunction with either of the first two. Whether you are using the GSoft\~BASIC shell or the ORCA shell, the programs you create only run from that environment. Of course, you will eventually create a program you want to give to other people, and they may not have GSoft\~BASIC. Even if they do, they will want to run the program like any other program, from Apple\rquote s Finder or some other program launcher. The third version of GSoft\~BASIC is a special one that lets you create programs that will run from the Finder. We\rquote ll cover how to create these programs, and discuss the advantages and disadvantages, later in this course.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244513}Your First Flight... er, Program{\*\bkmkend _Toc444244513}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {It\rquote s time to take that first test flight. Strap yourself in. After all, as you have no doubt heard, computers can crash, so always wear your seat belt. Fortunately, though, a computer crash caused by programs you write in this course won\rquote t hurt anything.\par {\shp{\*\shpinst\shpleft3528\shptop2624\shpright8654\shpbottom5835\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz1\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex40\picscaley40\piccropl0\piccropr0\piccropt0\piccropb0\picw642\pich402\picwgoal12840\pichgoal8040\macpict\bliptag-926620377\blipupi72{\*\blipuid c8c4e5277bbbd58eac615c66a6fa8045}6518001b001a01ad029c001102ff0c00ffffffff001a0000001b0000029c000001ad00000000000000a0008200a0303900a0008e001e0001000a00000000025202e70098828a001b001a005a02a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000001b001a005a029c001b001a005a029c0000000f81fb81fb81fb81fb81fb01fbfbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff004100fb81ff81fffefffd00fefffe00f5ff010000fdff0000f5fffd00fcff0000fcfffe00fdfffe00fdfffe00f5ff0000f5fffe00f6fffe0081ff81fff7ff00fbf9ff004100fb81ff81fffefffd00fefffe00f5ff010000fdff0000f5fffd00fcff0000fcfffe00fdfffe00fdfffe00f5ff0000f5fffe00f6fffe0081ff81fff7ff00fbf9ff005e00fb81ff81ff02ffff00fbff0000feff0000f7ff0300ffff00feff0000f5ff0000feff0000feff0200ff00feff0000feff0000fdff0000fdff0000feff0000f7ff010000f6ff0000feff0000f8ff0000feff000081ff81fff8ff00fbf9ff006000fb81ff81ff02ffff00fbff0000feff0000f7ff0300ffff00feff0000f5ff0000feff0000feff0200ff00feff0000feff0000fdff0000fdff0000feff0000f7ff010000f6ff0000feff0000f8ff0000feff000081ff81fff8ff00fbfd00fdff005100fb81ff81ff02ffff00fbff0000fafffe00fdff0000fcfffd00f7ff0000feff0300ffff00feff0300ffff00f9ff0000fdff0000f2ff0000f2ff0000f8ff0400ffff000081ff81fff8ff00fbfbff01fc00004e00fb81ff81ff02ffff00fbff0000fafffe00fdff0000fcfffd00f7ff0000feff0300ffff00feff0300ffff00f9ff0000fdff0000f2ff0000f2ff0000f8ff0400ffff000081ff81fff8ff00fbf9ff005100fb81ff81ff02ffff00fafffe00feff0000feff0200fffffd00fdff0000f5fffd00feff0000feff0000fefffe00fcff0000fdff0000f2ff0000f4ff010000f7ff0400ff00ff0081ff81fff8ff00fbf9ff005100fb81ff81ff02ffff00fafffe00feff0000feff0200fffffd00fdff0000f5fffd00feff0000feff0000fefffe00fcff0000fdff0000f2ff0000f4ff010000f7ff0400ff00ff0081ff81fff8ff00fbf9ff005300fb81ff81ff06ffff00ffff0000fbff0300ffff00feff0000feff0000fbff0000f5ff0000feff0200fffffc00fbff0000fdff0000fdff0000f2ff0000f5ff0000f5ff040000ffff0081ff81fff8ff00fbf9ff005300fb81ff81ff06ffff00ffff0000fbff0300ffff00feff0000feff0000fbff0000f5ff0000feff0200fffffc00fbff0000fdff0000fdff0000f2ff0000f5ff0000f5ff040000ffff0081ff81fff8ff00fbf9ff006300fb81ff81ff02ffff00feff0300ffff00feff0300ffff00feff0000feff0000fbff0300ffff00f8ff0000feff0300ffff00feff0300ffff00feff0000fdff0000fdff0000feff0000f6ff0000f6ff0000f4ff0000feff000081ff81fff8ff00fbf9ff006300fb81ff81ff02ffff00feff0300ffff00feff0300ffff00feff0000feff0000fbff0300ffff00f8ff0000feff0300ffff00feff0300ffff00feff0000fdff0000fdff0000feff0000f6ff0000f6ff0000f4ff0000feff000081ff81fff8ff00fbf9ff005100fb81ff81fffefffd00fefffe00fdfffe00fdff0000faff010000f7fffd00feff0000feff0000fefffe00fdfffe00fdfffe00f6fffe00fcff0000fdfffc00fdff0000fcfffe0081ff81fff7ff00fbf9ff005100fb81ff81fffefffd00fefffe00fdfffe00fdff0000faff010000f7fffd00feff0000feff0000fefffe00fdfffe00fdfffe00f6fffe00fcff0000fdfffc00fdff0000fcfffe0081ff81fff7ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001500fb81ff81ff81ff81ff81ff02fbfffcfd0001ffff004400fb81ffaffffe00e0ff0000f6ff0000faff0000f3ff0000fcfffe00fdfffe00fdfffe00f0fffd00f6ff0000eeff0000feff0000f1ff0000e5fffe0081ff9aff00fbf9ff004400fb81ffaffffe00e0ff0000f6ff0000faff0000f3ff0000fcfffe00fdfffe00fdfffe00f0fffd00f6ff0000eeff0000feff0000f1ff0000e5fffe0081ff9aff00fbf9ff005300fb81ffb0ff0000feff0000d5ff0000faff0000f4ff010000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0000f7ff0000eeff0000feff0000f1ff0000e4ff000081ff99ff00fbf9ff005300fb81ffb0ff0000feff0000d5ff0000faff0000f4ff010000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0000f7ff0000eeff0000feff0000f1ff0000e4ff000081ff99ff00fbf9ff009300fb81ffb0ff0000fafffe00fefffd00feff0000feff0400ffff00fffe00feff010000fcfffe00fefffd00fefffd00f5ff0000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0300ffff00feff0200fffffd00fdfffe00f7ff0000feff0000fefffe00feff0100fffe0002ffff00feff0000fefffd00efff0000fdfffd00fdfffd0081ffa9ff00fbf9ff009300fb81ffb0ff0000fafffe00fefffd00feff0000feff0400ffff00fffe00feff010000fcfffe00fefffd00fefffd00f5ff0000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0300ffff00feff0200fffffd00fdfffe00f7ff0000feff0000fefffe00feff0100fffe0002ffff00feff0000fefffd00efff0000fdfffd00fdfffd0081ffa9ff00fbf9ff009600fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0400ffff0000faff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000fcfffd00fefffd00fefffe00f0fffd00feff0000feff0000feff0000fcff0000feff0000f8ff0700ff00ff00ffff00feff0400ffff0000fcff0300ffff00feff0000ebff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff009600fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0400ffff0000faff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000fcfffd00fefffd00fefffe00f0fffd00feff0000feff0000feff0000fcff0000feff0000f8ff0700ff00ff00ffff00feff0400ffff0000fcff0300ffff00feff0000ebff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff009b00fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0300ffff00f9ff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000f9ff0000fbff0300ffff00feff0000fdff0000f6ff0000feff0300ffff00feff0000feff0000fcfffc00f8ff0700ff00ff00ffff00feff0300ffff00fbfffe00fcfffe00fcff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff009b00fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0300ffff00f9ff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000f9ff0000fbff0300ffff00feff0000fdff0000f6ff0000feff0300ffff00feff0000feff0000fcfffc00f8ff0700ff00ff00ffff00feff0300ffff00fbfffe00fcfffe00fcff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff00a000fb81ffb0ff0000feff0300ffff00feff0200fffffd00fdfffd0002ffff00f9ff0000fcfffd0002ffff00feff0000feff0300ffff00f6ff0000faff0000fbff0000feff0000feff0000fdff0000f6ff0000feff0000fefffd00feff0600ffff00ffff00f4ff070000ff0000ffff00feff0300ffff00fbff0300ffff00faff0000fdff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbfd000007feff009c00fb81ffb0ff0000feff0300ffff00feff0200fffffd00fdfffd0002ffff00f9ff0000fcfffd0002ffff00feff0000feff0300ffff00f6ff0000faff0000fbff0000feff0000feff0000fdff0000f6ff0000feff0000fefffd00feff0600ffff00ffff00f4ff070000ff0000ffff00feff0300ffff00fbff0300ffff00faff0000fdff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbf900008c00fb81ffaffffe00fdfffe00feff0000f7ff0300ffff00fafffe00faff0300ffff00feff0000fdff010000f6fffe00fefffe00fdfffe00fcfffe00fdff0000f5fffd00faff0000fdff010000fdfffd00f8ff0000feff0000fefffe00feff0000fbff0000feff0200fffffd00fdff0000f4fffe00feff0000feff0000fefffd00fdff000081ffaeff00fbf900008c00fb81ffaffffe00fdfffe00feff0000f7ff0300ffff00fafffe00faff0300ffff00feff0000fdff010000f6fffe00fefffe00fdfffe00fcfffe00fdff0000f5fffd00faff0000fdff010000fdfffd00f8ff0000feff0000fefffe00feff0000fbff0000feff0200fffffd00fdff0000f4fffe00feff0000feff0000fefffd00fdff000081ffaeff00fbf900001e00fb81ffa2ff0000fafffe00effffe00b7fffe0081ff81ffcdff00fbf900001e00fb81ffa2ff0000fafffe00effffe00b7fffe0081ff81ffcdff00fbf900003400fb81ff84ff0000fcff010000fcff010000f6fffd00fcff0000f6ff0000faff0000eefffd00d0ff000081ff81ff02fffffbf900003400fb81ff84ff0000fcff010000fcff010000f6fffd00fcff0000f6ff0000faff0000eefffd00d0ff000081ff81ff02fffffbf900003800fb81ff85ff0200ff00fcff0000fbff0000f6ff0000feff0000f1ff0000faff0000eeff0000feff0000d1ff000081ff81ff02fffffbf900003800fb81ff85ff0200ff00fcff0000fbff0000f6ff0000feff0000f1ff0000faff0000eeff0000feff0000d1ff000081ff81ff02fffffbf900006600fb81ff86ff0000feff0000fdff0000fbff0000f6ff0000feff0000feff010000fcfffe00fefffd00fefffd00fdfffd00f8ff0000feff0000fefffe00fdfffd00fefffe00feff0100fffe0002ffff00feff0000fefffe00fdfffd0081ff81ff02fffffbf900006600fb81ff86ff0000feff0000fdff0000fbff0000f6ff0000feff0000feff010000fcfffe00fefffd00fefffd00fdfffd00f8ff0000feff0000fefffe00fdfffd00fefffe00feff0100fffe0002ffff00feff0000fefffe00fdfffd0081ff81ff02fffffbf900006e00fb81ff86ff0000feff0000fdff0000fbff0000f6fffd00fcff0000fdff0000feff0300ffff00feff0000feff0000fcff0000f4fffd00feff0000feff0300ffff00fbff0000feff0400ffff0000fcff0000feff0300ffff00feff0300ffff00feff000081ff81ff02fffffbf900006e00fb81ff86ff0000feff0000fdff0000fbff0000f6fffd00fcff0000fdff0000feff0300ffff00feff0000feff0000fcff0000f4fffd00feff0000feff0300ffff00fbff0000feff0400ffff0000fcff0000feff0300ffff00feff0300ffff00feff000081ff81ff02fffffbf900006500fb81ff86fffc00fdff0000fbff0000f6ff0200ff00fbff0000fdff0000feff0300ffff00feff0000feff0000fbfffe00f7ff0200ff00fdfffc00fefffe00fefffc0002ffff00fbff0000feff0200fffffc0002ffff00feff000081ff81ff02fffffbf900006500fb81ff86fffc00fdff0000fbff0000f6ff0200ff00fbff0000fdff0000feff0300ffff00feff0000feff0000fbfffe00f7ff0200ff00fdfffc00fefffe00fefffc0002ffff00fbff0000feff0200fffffc0002ffff00feff000081ff81ff02fffffbf900006800fb81ff86ff0000feff0000fdff0000fbff0000f6ff0300ffff00fcff0000fcfffd0002ffff00feff0000feff0300ffff00fbff0000f8ff0300ffff00feff0000f7ff0300ffff00fbff0000faff0200ff00feff0000fbff0000feff000081ff81ff02fffffbf900006800fb81ff86ff0000feff0000fdff0000fbff0000f6ff0300ffff00fcff0000fcfffd0002ffff00feff0000feff0300ffff00fbff0000f8ff0300ffff00feff0000f7ff0300ffff00fbff0000faff0200ff00feff0000fbff0000feff000081ff81ff02fffffbf900006300fb81ff86ff0000feff0000fefffe00fdfffe00f7ff0000feff0000fefffe00faff0300ffff00feff0000fdff010000fefffd00f7ff0000feff0000fefffd0001fffffd00fdfffd0002ffff00f9ff0000fcfffd00fefffd0081ff81ff02fffffbf900006300fb81ff86ff0000feff0000fefffe00fdfffe00f7ff0000feff0000fefffe00faff0300ffff00feff0000fdff010000fefffd00f7ff0000feff0000fefffd0001fffffd00fdfffd0002ffff00f9ff0000fcfffd00fefffd0081ff81ff02fffffbf900001400fb81ff81ffdbfffe0081ff81ffaaff00fbf900001400fb81ff81ffdbfffe0081ff81ffaaff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900000098828a005a001a009902a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000005a001a0099029c005a001a0099029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001800fbd5ff020000fffa0081ff81ff81ff81ffb7ff00fbf900001800fbd5ff020000fffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001400fbd2fffa0081ff81ff81ff81ffb7ff00fbf900001400fbd2fffa0081ff81ff81ff81ffb7ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0099001a00d802a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000099001a00d8029c0099001a00d8029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a00d8001a011702a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000000d8001a0117029c00d8001a0117029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0117001a015602a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000117001a0156029c0117001a0156029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0156001a019502a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000156001a0195029c0156001a0195029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0195001a01ad02a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000195001a01ad029c0195001a01ad029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900000f81fb81fb81fb81fb81fb01fbfbf9000000a0008f00a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx3527\posy2623\absh3211\absw5126\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex40\picscaley40\piccropl0\piccropr0\piccropt0\piccropb0\picw642\pich402\picwgoal12840\pichgoal8040\macpict\bliptag-926620377\blipupi72{\*\blipuid c8c4e5277bbbd58eac615c66a6fa8045}6518001b001a01ad029c001102ff0c00ffffffff001a0000001b0000029c000001ad00000000000000a0008200a0303900a0008e001e0001000a00000000025202e70098828a001b001a005a02a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000001b001a005a029c001b001a005a029c0000000f81fb81fb81fb81fb81fb01fbfbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff004100fb81ff81fffefffd00fefffe00f5ff010000fdff0000f5fffd00fcff0000fcfffe00fdfffe00fdfffe00f5ff0000f5fffe00f6fffe0081ff81fff7ff00fbf9ff004100fb81ff81fffefffd00fefffe00f5ff010000fdff0000f5fffd00fcff0000fcfffe00fdfffe00fdfffe00f5ff0000f5fffe00f6fffe0081ff81fff7ff00fbf9ff005e00fb81ff81ff02ffff00fbff0000feff0000f7ff0300ffff00feff0000f5ff0000feff0000feff0200ff00feff0000feff0000fdff0000fdff0000feff0000f7ff010000f6ff0000feff0000f8ff0000feff000081ff81fff8ff00fbf9ff006000fb81ff81ff02ffff00fbff0000feff0000f7ff0300ffff00feff0000f5ff0000feff0000feff0200ff00feff0000feff0000fdff0000fdff0000feff0000f7ff010000f6ff0000feff0000f8ff0000feff000081ff81fff8ff00fbfd00fdff005100fb81ff81ff02ffff00fbff0000fafffe00fdff0000fcfffd00f7ff0000feff0300ffff00feff0300ffff00f9ff0000fdff0000f2ff0000f2ff0000f8ff0400ffff000081ff81fff8ff00fbfbff01fc00004e00fb81ff81ff02ffff00fbff0000fafffe00fdff0000fcfffd00f7ff0000feff0300ffff00feff0300ffff00f9ff0000fdff0000f2ff0000f2ff0000f8ff0400ffff000081ff81fff8ff00fbf9ff005100fb81ff81ff02ffff00fafffe00feff0000feff0200fffffd00fdff0000f5fffd00feff0000feff0000fefffe00fcff0000fdff0000f2ff0000f4ff010000f7ff0400ff00ff0081ff81fff8ff00fbf9ff005100fb81ff81ff02ffff00fafffe00feff0000feff0200fffffd00fdff0000f5fffd00feff0000feff0000fefffe00fcff0000fdff0000f2ff0000f4ff010000f7ff0400ff00ff0081ff81fff8ff00fbf9ff005300fb81ff81ff06ffff00ffff0000fbff0300ffff00feff0000feff0000fbff0000f5ff0000feff0200fffffc00fbff0000fdff0000fdff0000f2ff0000f5ff0000f5ff040000ffff0081ff81fff8ff00fbf9ff005300fb81ff81ff06ffff00ffff0000fbff0300ffff00feff0000feff0000fbff0000f5ff0000feff0200fffffc00fbff0000fdff0000fdff0000f2ff0000f5ff0000f5ff040000ffff0081ff81fff8ff00fbf9ff006300fb81ff81ff02ffff00feff0300ffff00feff0300ffff00feff0000feff0000fbff0300ffff00f8ff0000feff0300ffff00feff0300ffff00feff0000fdff0000fdff0000feff0000f6ff0000f6ff0000f4ff0000feff000081ff81fff8ff00fbf9ff006300fb81ff81ff02ffff00feff0300ffff00feff0300ffff00feff0000feff0000fbff0300ffff00f8ff0000feff0300ffff00feff0300ffff00feff0000fdff0000fdff0000feff0000f6ff0000f6ff0000f4ff0000feff000081ff81fff8ff00fbf9ff005100fb81ff81fffefffd00fefffe00fdfffe00fdff0000faff010000f7fffd00feff0000feff0000fefffe00fdfffe00fdfffe00f6fffe00fcff0000fdfffc00fdff0000fcfffe0081ff81fff7ff00fbf9ff005100fb81ff81fffefffd00fefffe00fdfffe00fdff0000faff010000f7fffd00feff0000feff0000fefffe00fdfffe00fdfffe00f6fffe00fcff0000fdfffc00fdff0000fcfffe0081ff81fff7ff00fbf9ff001000fb81ff81ff81ff81ff81ff00fbf9ff001500fb81ff81ff81ff81ff81ff02fbfffcfd0001ffff004400fb81ffaffffe00e0ff0000f6ff0000faff0000f3ff0000fcfffe00fdfffe00fdfffe00f0fffd00f6ff0000eeff0000feff0000f1ff0000e5fffe0081ff9aff00fbf9ff004400fb81ffaffffe00e0ff0000f6ff0000faff0000f3ff0000fcfffe00fdfffe00fdfffe00f0fffd00f6ff0000eeff0000feff0000f1ff0000e5fffe0081ff9aff00fbf9ff005300fb81ffb0ff0000feff0000d5ff0000faff0000f4ff010000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0000f7ff0000eeff0000feff0000f1ff0000e4ff000081ff99ff00fbf9ff005300fb81ffb0ff0000feff0000d5ff0000faff0000f4ff010000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0000f7ff0000eeff0000feff0000f1ff0000e4ff000081ff99ff00fbf9ff009300fb81ffb0ff0000fafffe00fefffd00feff0000feff0400ffff00fffe00feff010000fcfffe00fefffd00fefffd00f5ff0000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0300ffff00feff0200fffffd00fdfffe00f7ff0000feff0000fefffe00feff0100fffe0002ffff00feff0000fefffd00efff0000fdfffd00fdfffd0081ffa9ff00fbf9ff009300fb81ffb0ff0000fafffe00fefffd00feff0000feff0400ffff00fffe00feff010000fcfffe00fefffd00fefffd00f5ff0000fdff0000feff0300ffff00feff0300ffff00feff0000f1ff0000feff0300ffff00feff0200fffffd00fdfffe00f7ff0000feff0000fefffe00feff0100fffe0002ffff00feff0000fefffd00efff0000fdfffd00fdfffd0081ffa9ff00fbf9ff009600fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0400ffff0000faff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000fcfffd00fefffd00fefffe00f0fffd00feff0000feff0000feff0000fcff0000feff0000f8ff0700ff00ff00ffff00feff0400ffff0000fcff0300ffff00feff0000ebff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff009600fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0400ffff0000faff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000fcfffd00fefffd00fefffe00f0fffd00feff0000feff0000feff0000fcff0000feff0000f8ff0700ff00ff00ffff00feff0400ffff0000fcff0300ffff00feff0000ebff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff009b00fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0300ffff00f9ff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000f9ff0000fbff0300ffff00feff0000fdff0000f6ff0000feff0300ffff00feff0000feff0000fcfffc00f8ff0700ff00ff00ffff00feff0300ffff00fbfffe00fcfffe00fcff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff009b00fb81ffb0ff0000fbff0000feff0300ffff00feff0300ffff00feff0300ffff00f9ff0000fdff0000feff0300ffff00feff0000feff0000f3ff0000f9ff0000fbff0300ffff00feff0000fdff0000f6ff0000feff0300ffff00feff0000feff0000fcfffc00f8ff0700ff00ff00ffff00feff0300ffff00fbfffe00fcfffe00fcff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbf9ff00a000fb81ffb0ff0000feff0300ffff00feff0200fffffd00fdfffd0002ffff00f9ff0000fcfffd0002ffff00feff0000feff0300ffff00f6ff0000faff0000fbff0000feff0000feff0000fdff0000f6ff0000feff0000fefffd00feff0600ffff00ffff00f4ff070000ff0000ffff00feff0300ffff00fbff0300ffff00faff0000fdff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbfd000007feff009c00fb81ffb0ff0000feff0300ffff00feff0200fffffd00fdfffd0002ffff00f9ff0000fcfffd0002ffff00feff0000feff0300ffff00f6ff0000faff0000fbff0000feff0000feff0000fdff0000f6ff0000feff0000fefffd00feff0600ffff00ffff00f4ff070000ff0000ffff00feff0300ffff00fbff0300ffff00faff0000fdff0000f4ff0000fdff0000feff0300ffff0081ffa5ff00fbf900008c00fb81ffaffffe00fdfffe00feff0000f7ff0300ffff00fafffe00faff0300ffff00feff0000fdff010000f6fffe00fefffe00fdfffe00fcfffe00fdff0000f5fffd00faff0000fdff010000fdfffd00f8ff0000feff0000fefffe00feff0000fbff0000feff0200fffffd00fdff0000f4fffe00feff0000feff0000fefffd00fdff000081ffaeff00fbf900008c00fb81ffaffffe00fdfffe00feff0000f7ff0300ffff00fafffe00faff0300ffff00feff0000fdff010000f6fffe00fefffe00fdfffe00fcfffe00fdff0000f5fffd00faff0000fdff010000fdfffd00f8ff0000feff0000fefffe00feff0000fbff0000feff0200fffffd00fdff0000f4fffe00feff0000feff0000fefffd00fdff000081ffaeff00fbf900001e00fb81ffa2ff0000fafffe00effffe00b7fffe0081ff81ffcdff00fbf900001e00fb81ffa2ff0000fafffe00effffe00b7fffe0081ff81ffcdff00fbf900003400fb81ff84ff0000fcff010000fcff010000f6fffd00fcff0000f6ff0000faff0000eefffd00d0ff000081ff81ff02fffffbf900003400fb81ff84ff0000fcff010000fcff010000f6fffd00fcff0000f6ff0000faff0000eefffd00d0ff000081ff81ff02fffffbf900003800fb81ff85ff0200ff00fcff0000fbff0000f6ff0000feff0000f1ff0000faff0000eeff0000feff0000d1ff000081ff81ff02fffffbf900003800fb81ff85ff0200ff00fcff0000fbff0000f6ff0000feff0000f1ff0000faff0000eeff0000feff0000d1ff000081ff81ff02fffffbf900006600fb81ff86ff0000feff0000fdff0000fbff0000f6ff0000feff0000feff010000fcfffe00fefffd00fefffd00fdfffd00f8ff0000feff0000fefffe00fdfffd00fefffe00feff0100fffe0002ffff00feff0000fefffe00fdfffd0081ff81ff02fffffbf900006600fb81ff86ff0000feff0000fdff0000fbff0000f6ff0000feff0000feff010000fcfffe00fefffd00fefffd00fdfffd00f8ff0000feff0000fefffe00fdfffd00fefffe00feff0100fffe0002ffff00feff0000fefffe00fdfffd0081ff81ff02fffffbf900006e00fb81ff86ff0000feff0000fdff0000fbff0000f6fffd00fcff0000fdff0000feff0300ffff00feff0000feff0000fcff0000f4fffd00feff0000feff0300ffff00fbff0000feff0400ffff0000fcff0000feff0300ffff00feff0300ffff00feff000081ff81ff02fffffbf900006e00fb81ff86ff0000feff0000fdff0000fbff0000f6fffd00fcff0000fdff0000feff0300ffff00feff0000feff0000fcff0000f4fffd00feff0000feff0300ffff00fbff0000feff0400ffff0000fcff0000feff0300ffff00feff0300ffff00feff000081ff81ff02fffffbf900006500fb81ff86fffc00fdff0000fbff0000f6ff0200ff00fbff0000fdff0000feff0300ffff00feff0000feff0000fbfffe00f7ff0200ff00fdfffc00fefffe00fefffc0002ffff00fbff0000feff0200fffffc0002ffff00feff000081ff81ff02fffffbf900006500fb81ff86fffc00fdff0000fbff0000f6ff0200ff00fbff0000fdff0000feff0300ffff00feff0000feff0000fbfffe00f7ff0200ff00fdfffc00fefffe00fefffc0002ffff00fbff0000feff0200fffffc0002ffff00feff000081ff81ff02fffffbf900006800fb81ff86ff0000feff0000fdff0000fbff0000f6ff0300ffff00fcff0000fcfffd0002ffff00feff0000feff0300ffff00fbff0000f8ff0300ffff00feff0000f7ff0300ffff00fbff0000faff0200ff00feff0000fbff0000feff000081ff81ff02fffffbf900006800fb81ff86ff0000feff0000fdff0000fbff0000f6ff0300ffff00fcff0000fcfffd0002ffff00feff0000feff0300ffff00fbff0000f8ff0300ffff00feff0000f7ff0300ffff00fbff0000faff0200ff00feff0000fbff0000feff000081ff81ff02fffffbf900006300fb81ff86ff0000feff0000fefffe00fdfffe00f7ff0000feff0000fefffe00faff0300ffff00feff0000fdff010000fefffd00f7ff0000feff0000fefffd0001fffffd00fdfffd0002ffff00f9ff0000fcfffd00fefffd0081ff81ff02fffffbf900006300fb81ff86ff0000feff0000fefffe00fdfffe00f7ff0000feff0000fefffe00faff0300ffff00feff0000fdff010000fefffd00f7ff0000feff0000fefffd0001fffffd00fdfffd0002ffff00f9ff0000fcfffd00fefffd0081ff81ff02fffffbf900001400fb81ff81ffdbfffe0081ff81ffaaff00fbf900001400fb81ff81ffdbfffe0081ff81ffaaff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900000098828a005a001a009902a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000005a001a0099029c005a001a0099029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001800fbd5ff020000fffa0081ff81ff81ff81ffb7ff00fbf900001800fbd5ff020000fffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001900fbd6ff030000fffffa0081ff81ff81ff81ffb7ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001800fbd8fffe00fefffa0081ff81ff81ff81ffb7ff00fbf900001400fbd2fffa0081ff81ff81ff81ffb7ff00fbf900001400fbd2fffa0081ff81ff81ff81ffb7ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0099001a00d802a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000099001a00d8029c0099001a00d8029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a00d8001a011702a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000000d8001a0117029c00d8001a0117029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0117001a015602a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000117001a0156029c0117001a0156029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0156001a019502a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000156001a0195029c0156001a0195029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf9000098828a0195001a01ad02a3000000000000000000480000004800000000000800010008000000000349f46c0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000195001a01ad029c0195001a01ad029c0000001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900001000fb81ff81ff81ff81ff81ff00fbf900000f81fb81fb81fb81fb81fb01fbfbf9000000a0008f00a0008300ff}\par}}As we go through this program, there will be a lot you don\rquote t understand. Be patient; in time, you will. The one thing you should keep in mind, though, is that you can\rquote t write a program that will damage the computer. Even if you do something wrong, the absolute worst thing that will happen is you will erase a disk\emdash and even that is so unlikely that it isn\rquote t worth worrying about very much. It is, however, worth worrying about enough to make a copy of the GSoft\~BASIC disks, which is why you should never run from the original disks. You should also keep backups of your hard drives. Frankly, it\rquote s more likely that you will loose information on your hard drive from the hard drive wearing out than from the programs in this course, but it\rquote s always best to keep good backups, just in case.\par From Apple\rquote s Finder, locate the file GSoft.Sys16, either on your hard disk or on the second 3.5\rdblquote  floppy disk. Double-click on GSoft.Sys16 to start the program. You\rquote ll see a banner across the top of the screen with the program\rquote s version number, a blank line, and a \} character followed by a cursor. From here, you can type any of the commands you find in Chapter\~5 of the GSoft\~BASIC reference manual. We won\rquote t use many of the commands in this course, but we will cover each of them we use in detail. Some of the commands we don\rquote t cover may come in handy, though, so plan to flip through Chapter\~5 of the GSoft\~BASIC reference manual at some point, just to see what\rquote s there.\par When you write a program, you type the program pretty much the same way you would type a letter in a word processor. Our first step, then, is to enter the editor so we can type a program. From the GSoft\~BASIC shell, type the line\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \v\f6\fs20\cgrid {\xe {\v EDIT command}}}{EDIT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {and press the return key. It doesn\rquote t really matter whether you use uppercase or lowercase letters.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {{\shp{\*\shpinst\shpleft2952\shptop1583\shpright8626\shpbottom5503\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz2\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw566\pich391\picwgoal11320\pichgoal7820\macpict\bliptag-1866810749\blipupi72{\*\blipuid 90baba830fda26fcc1fadcd546087687}5c4c003d004801c4027e001102ff0c00ffffffff00480000003d0000027e000001c400000000000000a0008200a0303900a0008e001e0001000a00000000025202e70098823e003d00480085028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000003d00480085027e003d00480085027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff004bfdfffd00fefffd00fdfffe00feff0000feff0200fffffc00f7ff0200ff00feff0000feff0000f7ff010000fcff010000d2ff010000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe0ff004bfdfffd00fefffd00fdfffe00feff0000feff0200fffffc00f7ff0200ff00feff0000feff0000f7ff010000fcff010000d2ff010000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe0ff0051fdff0000feff0300ffff00feff0000fdff0000fdff0000feff0000fdff0000f5ff0200ff00feff0000feff0000f6ff0000fbff0000d1ff0000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe8fff9000051fdff0000feff0300ffff00feff0000fdff0000fdff0000feff0000fdff0000f5ff0200ff00feff0000feff0000f6ff0000fbff0000d1ff0000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe8fff900006cfdff0000feff0300ffff00feff0000fdff0000fdff040000ffff00fdff0000f5ff0200ff00feff0000feff0000fefffe00fcff0000fbff0000fcfffe00f0ff0000feff0000fefffe00feff0100fffe00fdff0000fcfffd00f7ff0400ff00fffffa0081ff81ff81ffe8fff900006cfdff0000feff0300ffff00feff0000fdff0000fdff040000ffff00fdff0000f5ff0200ff00feff0000feff0000fefffe00fcff0000fbff0000fcfffe00f0ff0000feff0000fefffe00feff0100fffe00fdff0000fcfffd00f7ff0400ff00fffffa0081ff81ff81ffe8fff9000061fdfffd00fefffd00fcff0000fdff0400ff00ff00fdff0000effffc0002ffff00feff0000fdff0000fbff0000fdff0000feff0000f1ff0000feff0300ffff00feff0400ffff0000faff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000061fdfffd00fefffd00fcff0000fdff0400ff00ff00fdff0000effffc0002ffff00feff0000fdff0000fbff0000fdff0000feff0000f1ff0000feff0300ffff00feff0400ffff0000faff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0200ff00fbff0000fdff0400ffff0000fdff0000efff0000feff0200fffffc00fdff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0200ff00fbff0000fdff0400ffff0000fdff0000efff0000feff0200fffffc00fdff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0300ffff00fcff0000fdff0000feff0000fdff0000efff0000feff0300ffff00f9ff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0300ffff00fcff0000fdff0000feff0000fdff0000efff0000feff0300ffff00f9ff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000062fdff0000fbff0000feff0000fefffe00feff0000feff0000fdff0000efff0000feff0000fefffd00fefffe00fdfffe00fdfffe00fdff0000f5ff040000ff0000fefffe00feff0000fafffe00fdfffd00fdff0000f7fffa0081ff81ff81ffe8fff9000062fdff0000fbff0000feff0000fefffe00feff0000feff0000fdff0000efff0000feff0000fefffd00fefffe00fdfffe00fdfffe00fdff0000f5ff040000ff0000fefffe00feff0000fafffe00fdfffd00fdff0000f7fffa0081ff81ff81ffe8fff900001081ffebfffa0081ff81ff81ffe8fff900001081ffebfffa0081ff81ff81ffe8fff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e0085004800cd028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000085004800cd027e0085004800cd027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e00cd00480115028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000000cd00480115027e00cd00480115027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e01150048015d028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000001150048015d027e01150048015d027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e015d004801a5028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000015d004801a5027e015d004801a5027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff003ffeffe20000ffdf0000ffdf0000ffe000feffbf00fcffe10000ffde0000ffe00000ffe100fcffe10000ffdf00feffc000fcffe10000ffe000feff010000f6ff003ffeffe20000ffdf0000ffdf0000ffe000feffbf00fcffe10000ffde0000ffe00000ffe100fcffe10000ffdf00feffc000fcffe10000ffe000feff010000f6ff0047feffe20000ffe00001ffffdf0000ffe10000fffe0000ffbc0000ffe10000ffdf0001ffffe00000ffe10000ffdd0000ffe00000ffb90000ffe10000ffe10000fffe0001ff00f6ff0047feffe20000ffe00001ffffdf0000ffe10000fffe0000ffbc0000ffe10000ffdf0001ffffe00000ffe10000ffdd0000ffe00000ffb90000ffe10000ffe10000fffe0001ff00f6ff0098823e01a5004801c4028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000001a5004801c4027e01a5004801c4027e00000067feffe20000ffe60000fffb0000ffdf0000fff40000ffeb0000ffe10000ffde0000ffee0000fff40000ffe00002ff00fffc0000ffe60000ffe60000fffd00fdffe00000fff40000ffef0000ffdd0000ffde0000ffee0000fff40000ffe10000fffe0001ff00f6ff0067feffe20000ffe60000fffb0000ffdf0000fff40000ffeb0000ffe10000ffde0000ffee0000fff40000ffe00002ff00fffc0000ffe60000ffe60000fffd00fdffe00000fff40000ffef0000ffdd0000ffde0000ffee0000fff40000ffe10000fffe0001ff00f6ff007afeffe20000ffe70002ff00fffc0000ffdf0000fff50002ff00ffee0001ffffe10002ff00ffe00001ffffef0002ff00fff50000ffe10003ff0000fffd0002ff00ffe70000ffe70002ff00fffa0000ffe10000fff50002ff00fff000fdffe10002ff00ffe00000ffee0002ff00fff50000ffe000feff010000f6ff007afeffe20000ffe70002ff00fffc0000ffdf0000fff50002ff00ffee0001ffffe10002ff00ffe00001ffffef0002ff00fff50000ffe10003ff0000fffd0002ff00ffe70000ffe70002ff00fffa0000ffe10000fff50002ff00fff000fdffe10002ff00ffe00000ffee0002ff00fff50000ffe000feff010000f6ff008dfeffe20000ffe80000fffe0000fffd0000ffdf0000fff60000fffe0000fff00000ffe00000fffe0000ffdf0000fff10000fffe0000fff60000ffe100fcff020000fffe0000ffe80000ffe80000fffe0000fffb0000ffe10000fff60000fffe0000fff10000fffe0000ffe30000fffe0000ffe20000ffee0000fffe0000fff60000ffe10000fffe0001ff00f6ff008dfeffe20000ffe80000fffe0000fffd0000ffdf0000fff60000fffe0000fff00000ffe00000fffe0000ffdf0000fff10000fffe0000fff60000ffe100fcff020000fffe0000ffe80000ffe80000fffe0000fffb0000ffe10000fff60000fffe0000fff10000fffe0000ffe30000fffe0000ffe20000ffee0000fffe0000fff60000ffe10000fffe0001ff00f6ff004dfeffe20000ffdf0000ffdf0000ffe10000ffbc0000fffe0000ffe10000ffde0000ffe00000ffe10000fffe0000ffe10000ffe10000fffe0000ffbf0000ffde0000ffe10000fffe0001ff00f6ff004dfeffe20000ffdf0000ffdf0000ffe10000ffbc0000fffe0000ffe10000ffde0000ffe00000ffe10000fffe0000ffe10000ffe10000fffe0000ffbf0000ffde0000ffe10000fffe0001ff00f6ff0123fefffe0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffd00fcfffd0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc00fefffc0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffa0000fff50000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffc00fefffc0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc0000fffa0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffc00feff010000f6ff0123fefffe0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffd00fcfffd0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc00fefffc0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffa0000fff50000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffc00fefffc0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc0000fffa0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffc00feff010000f6ff0022feffe20000ffbc0000ff8100f60000ffbc0000ffbc0000ff8100f60000ffdb00f6ff0022feffe20000ffbc0000ff8100f60000ffbc0000ffbc0000ff8100f60000ffdb00f6ff0098feff0100fff90000ffca0000fff500fefff60001ffffee00fefffd00fefff70000fffe0000ffed0000ffe200fefffe0000fffe0000fff80000fffe0000fff40000ffea00fcff010000fdfffd00fefffe00fcfff80000ffd800fdfffc0000fffc00fefffd00fefffd00feffd400fcfffd0000fffc0001ffffe700fefff000fdfffc0000fffc00fefffd00fefffd00fefffe00fcffcf00f6ff0098feff0100fff90000ffca0000fff500fefff60001ffffee00fefffd00fefff70000fffe0000ffed0000ffe200fefffe0000fffe0000fff80000fffe0000fff40000ffea00fcff010000fdfffd00fefffe00fcfff80000ffd800fdfffc0000fffc00fefffd00fefffd00feffd400fcfffd0000fffc0001ffffe700fefff000fdfffc0000fffc00fefffd00fefffd00fefffe00fcffcf00f6ff00bffeff0100ffc20001fffff60000fffe0000fff60000ffef0000fffe0003ff0000fffe0000fff80000fffe0000ffed0000ffe30000fffe0006ff0000ff0000fff70004ffff00fffff40000ffea0000fffb0000fffe0000fffd0000fffb0000fff60000ffd80000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000ffd50000fff20000ffe80000fffe0000fff10000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000fffd0000ffcd00f6ff00bffeff0100ffc20001fffff60000fffe0000fff60000ffef0000fffe0003ff0000fffe0000fff80000fffe0000ffed0000ffe30000fffe0006ff0000ff0000fff70004ffff00fffff40000ffea0000fffb0000fffe0000fffd0000fffb0000fff60000ffd80000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000ffd50000fff20000ffe80000fffe0000fff10000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000fffd0000ffcd00f6ff0108feff0100fffa0001fffffd00fdfffd00fefffc0000ffdf0000fff60000fffa00fefffc0000fffb0000fff20000fffb0000fff80000fffe0000fffe00fdfffe00fefffd00fdfffd0000ffe80009ff0000ffff0000ff00fff60004ff00ff00fffe00fefffd00fdfffe00fefffc0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fefffe00fdfffd00fefffc0000fff60000fffe0003ff0000fffe0003ff0000fff90000fffd0000ffd10000fffa0001fffffb0000fffc00fefffc0000fff60000fffb0000fffe0000fffe00fdff020000fffe0003ff0000fffe0003ff0000fff90000fffd0000fff90000fffc00fefffe0006ffff00ffff0000fdffe300f6ff0108feff0100fffa0001fffffd00fdfffd00fefffc0000ffdf0000fff60000fffa00fefffc0000fffb0000fff20000fffb0000fff80000fffe0000fffe00fdfffe00fefffd00fdfffd0000ffe80009ff0000ffff0000ff00fff60004ff00ff00fffe00fefffd00fdfffe00fefffc0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fefffe00fdfffd00fefffc0000fff60000fffe0003ff0000fffe0003ff0000fff90000fffd0000ffd10000fffa0001fffffb0000fffc00fefffc0000fff60000fffb0000fffe0000fffe00fdff020000fffe0003ff0000fffe0003ff0000fff90000fffd0000fff90000fffc00fefffe0006ffff00ffff0000fdffe300f6ff0114feff0100fff90000fffd0000fffe0003ff0000fffe0000ffda0000fff60000fffb0000fffe0000fffd0000ffed0001fffffc0001fffff70000fffe0003ff0000fffb0000fffe0003ff0000fffe0000ffe30008ff00ff00ff0000fffff50007ff00ff00ff0000fffe0003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffd0000fffb0000fff60000fff70003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffe00fefffc0000fffd0000ffd100fdfffc0000fffb0000fffd0000fffe0000fff000fefffe0000fffe0003ff0000fffb00fdfffe0000fffe0000fffe00fefffc0000fffd0000fff90000fffd0000fffe000aff0000ff00ff00ff0000fffe0000ffe400f6ff0114feff0100fff90000fffd0000fffe0003ff0000fffe0000ffda0000fff60000fffb0000fffe0000fffd0000ffed0001fffffc0001fffff70000fffe0003ff0000fffb0000fffe0003ff0000fffe0000ffe30008ff00ff00ff0000fffff50007ff00ff00ff0000fffe0003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffd0000fffb0000fff60000fff70003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffe00fefffc0000fffd0000ffd100fdfffc0000fffb0000fffd0000fffe0000fff000fefffe0000fffe0003ff0000fffb00fdfffe0000fffe0000fffe00fefffc0000fffd0000fff90000fffd0000fffe000aff0000ff00ff00ff0000fffe0000ffe400f6ff011dfeff0100fff90000fffd0000fffe0002ff0000fcfffd0000ffdf0000fff60000fffb0000fffe0000fffd0000fffb0000fff50000fffb0000fff50000fffe0000fffe00fefffe00fcff020000fffe0000fffd0000ffe80009ffff0000ff0000ff00fff60000fffe0003ff0000fffe0003ff0000fffe0002ff0000fcfffd0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fdff020000fffe0003ff0000fffe0000fffd0000fff60000fffe0002ff0000fcfffb0000fffd0000fffd0000ffd10000fff90000fffb0000fffd00fcfffd0000fff20003ff0000fffe0000fffe00fefffe0000fffe0002ff0000fcfffb0000fffd0000fffd0000fff90000fffd00fcff090000ff00ff00ff0000fffe0000ffe400f6ff011dfeff0100fff90000fffd0000fffe0002ff0000fcfffd0000ffdf0000fff60000fffb0000fffe0000fffd0000fffb0000fff50000fffb0000fff50000fffe0000fffe00fefffe00fcff020000fffe0000fffd0000ffe80009ffff0000ff0000ff00fff60000fffe0003ff0000fffe0003ff0000fffe0002ff0000fcfffd0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fdff020000fffe0003ff0000fffe0000fffd0000fff60000fffe0002ff0000fcfffb0000fffd0000fffd0000ffd10000fff90000fffb0000fffd00fcfffd0000fff20003ff0000fffe0000fffe00fefffe0000fffe0002ff0000fcfffb0000fffd0000fffd0000fff90000fffd00fcff090000ff00ff00ff0000fffe0000ffe400f6ff0117feff0100fff90000fffd0000fffe0003ff0000ffd60000fff60000fffe0003ff0000fffe0000fffd0000ffef0000fffb0000fff40000fffe0000fffb0003ff0000fffb0000fffe0000ffe30000fffe0006ff0000ff0000fff70000fffe0003ff0000fffe0003ff0000fffe0003ff0000ffed0000fffb0000fffe0000fffd0000fffb0000fff60000fffb0000fffe0003ff0000fffe0000fffe00fdfff10000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000ffd50000fff90000fffb0000fffd0000ffed0000fffe0000fffe00fdfffb0003ff0000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000fffd0000fffd0000fffb0006ff00ff00ff0000fdffe300f6ff0117feff0100fff90000fffd0000fffe0003ff0000ffd60000fff60000fffe0003ff0000fffe0000fffd0000ffef0000fffb0000fff40000fffe0000fffb0003ff0000fffb0000fffe0000ffe30000fffe0006ff0000ff0000fff70000fffe0003ff0000fffe0003ff0000fffe0003ff0000ffed0000fffb0000fffe0000fffd0000fffb0000fff60000fffb0000fffe0003ff0000fffe0000fffe00fdfff10000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000ffd50000fff90000fffb0000fffd0000ffed0000fffe0000fffe00fdfffb0003ff0000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000fffd0000fffd0000fffb0006ff00ff00ff0000fdffe300f6ff00e7feff0000fcfffe00fefffe0000fffe0000fffe00fdffdb00fefff600fefffd00fefffd00fefff000fcff010000fcfff700fefffe00fdfffd00fdfffe00fdffe200fefffe0000fffe0000fff80000fffe0000fffe00fefffd00fdfffe00fdfff100fcff010000fdfffd00fefffc0000fff600fcfffe00fdff020000fffe0000fffb0000fff100fdfffe0000fffe0000fffe00fefffd00fefffd00feffd40000fffa00fefffd00fefffd00fdfff000fefffa0002ff0000fdfffe00fdfffe0000fffe0000fffe00fefffd00fefffd00fefffc0000fffc00fdff020000fffe0003ff0000ffe000f6ff00e7feff0000fcfffe00fefffe0000fffe0000fffe00fdffdb00fefff600fefffd00fefffd00fefff000fcff010000fcfff700fefffe00fdfffd00fdfffe00fdffe200fefffe0000fffe0000fff80000fffe0000fffe00fefffd00fdfffe00fdfff100fcff010000fdfffd00fefffc0000fff600fcfffe00fdff020000fffe0000fffb0000fff100fdfffe0000fffe0000fffe00fefffd00fefffd00feffd40000fffa00fefffd00fefffd00fdfff000fefffa0002ff0000fdfffe00fdfffe0000fffe0000fffe00fefffd00fefffd00fefffc0000fffc00fdff020000fffe0003ff0000ffe000f6ff0018feff81008100cb00feff8100f100feffbf0000ffe000f6ff0018feff81008100cb00feff8100f100feffbf0000ffe000f6ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff00a0008f00a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx2951\posy1582\absh3920\absw5674\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw566\pich391\picwgoal11320\pichgoal7820\macpict\bliptag-1866810749\blipupi72{\*\blipuid 90baba830fda26fcc1fadcd546087687}5c4c003d004801c4027e001102ff0c00ffffffff00480000003d0000027e000001c400000000000000a0008200a0303900a0008e001e0001000a00000000025202e70098823e003d00480085028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000003d00480085027e003d00480085027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff004bfdfffd00fefffd00fdfffe00feff0000feff0200fffffc00f7ff0200ff00feff0000feff0000f7ff010000fcff010000d2ff010000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe0ff004bfdfffd00fefffd00fdfffe00feff0000feff0200fffffc00f7ff0200ff00feff0000feff0000f7ff010000fcff010000d2ff010000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe0ff0051fdff0000feff0300ffff00feff0000fdff0000fdff0000feff0000fdff0000f5ff0200ff00feff0000feff0000f6ff0000fbff0000d1ff0000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe8fff9000051fdff0000feff0300ffff00feff0000fdff0000fdff0000feff0000fdff0000f5ff0200ff00feff0000feff0000f6ff0000fbff0000d1ff0000f9ff0000f7ff0400ff00fffffa0081ff81ff81ffe8fff900006cfdff0000feff0300ffff00feff0000fdff0000fdff040000ffff00fdff0000f5ff0200ff00feff0000feff0000fefffe00fcff0000fbff0000fcfffe00f0ff0000feff0000fefffe00feff0100fffe00fdff0000fcfffd00f7ff0400ff00fffffa0081ff81ff81ffe8fff900006cfdff0000feff0300ffff00feff0000fdff0000fdff040000ffff00fdff0000f5ff0200ff00feff0000feff0000fefffe00fcff0000fbff0000fcfffe00f0ff0000feff0000fefffe00feff0100fffe00fdff0000fcfffd00f7ff0400ff00fffffa0081ff81ff81ffe8fff9000061fdfffd00fefffd00fcff0000fdff0400ff00ff00fdff0000effffc0002ffff00feff0000fdff0000fbff0000fdff0000feff0000f1ff0000feff0300ffff00feff0400ffff0000faff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000061fdfffd00fefffd00fcff0000fdff0400ff00ff00fdff0000effffc0002ffff00feff0000fdff0000fbff0000fdff0000feff0000f1ff0000feff0300ffff00feff0400ffff0000faff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0200ff00fbff0000fdff0400ffff0000fdff0000efff0000feff0200fffffc00fdff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0200ff00fbff0000fdff0400ffff0000fdff0000efff0000feff0200fffffc00fdff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0300ffff00fcff0000fdff0000feff0000fdff0000efff0000feff0300ffff00f9ff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000066fdff0000fbff0300ffff00fcff0000fdff0000feff0000fdff0000efff0000feff0300ffff00f9ff0000fbff0000fdff0000feff0000fdff0000f6ff0700ff00ff00ffff00feff0300ffff00f9ff0000fdff0000feff0000f2fffa0081ff81ff81ffe8fff9000062fdff0000fbff0000feff0000fefffe00feff0000feff0000fdff0000efff0000feff0000fefffd00fefffe00fdfffe00fdfffe00fdff0000f5ff040000ff0000fefffe00feff0000fafffe00fdfffd00fdff0000f7fffa0081ff81ff81ffe8fff9000062fdff0000fbff0000feff0000fefffe00feff0000feff0000fdff0000efff0000feff0000fefffd00fefffe00fdfffe00fdfffe00fdff0000f5ff040000ff0000fefffe00feff0000fafffe00fdfffd00fdff0000f7fffa0081ff81ff81ffe8fff900001081ffebfffa0081ff81ff81ffe8fff900001081ffebfffa0081ff81ff81ffe8fff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000c81ff81ff81ff81ffcbfff900000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e0085004800cd028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa00008888888888880000777777777777000055555555555500004444444444440000222222222222000011111111111100000000000000000085004800cd027e0085004800cd027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e00cd00480115028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000000cd00480115027e00cd00480115027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e01150048015d028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000001150048015d027e01150048015d027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff0098823e015d004801a5028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa0000888888888888000077777777777700005555555555550000444444444444000022222222222200001111111111110000000000000000015d004801a5027e015d004801a5027e0000000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff003ffeffe20000ffdf0000ffdf0000ffe000feffbf00fcffe10000ffde0000ffe00000ffe100fcffe10000ffdf00feffc000fcffe10000ffe000feff010000f6ff003ffeffe20000ffdf0000ffdf0000ffe000feffbf00fcffe10000ffde0000ffe00000ffe100fcffe10000ffdf00feffc000fcffe10000ffe000feff010000f6ff0047feffe20000ffe00001ffffdf0000ffe10000fffe0000ffbc0000ffe10000ffdf0001ffffe00000ffe10000ffdd0000ffe00000ffb90000ffe10000ffe10000fffe0001ff00f6ff0047feffe20000ffe00001ffffdf0000ffe10000fffe0000ffbc0000ffe10000ffdf0001ffffe00000ffe10000ffdd0000ffe00000ffb90000ffe10000ffe10000fffe0001ff00f6ff0098823e01a5004801c4028500000000000000000048000000480000000000080001000800000000033c06ec0000000000000008800000ff0000ffffffffffff0000ffffffffcccc0000ffffffff99990000ffffffff66660000ffffffff33330000ffffffff00000000ffffccccffff0000ffffcccccccc0000ffffcccc99990000ffffcccc66660000ffffcccc33330000ffffcccc00000000ffff9999ffff0000ffff9999cccc0000ffff999999990000ffff999966660000ffff999933330000ffff999900000000ffff6666ffff0000ffff6666cccc0000ffff666699990000ffff666666660000ffff666633330000ffff666600000000ffff3333ffff0000ffff3333cccc0000ffff333399990000ffff333366660000ffff333333330000ffff333300000000ffff0000ffff0000ffff0000cccc0000ffff000099990000ffff000066660000ffff000033330000ffff000000000000ccccffffffff0000ccccffffcccc0000ccccffff99990000ccccffff66660000ccccffff33330000ccccffff00000000ccccccccffff0000cccccccccccc0000cccccccc99990000cccccccc66660000cccccccc33330000cccccccc00000000cccc9999ffff0000cccc9999cccc0000cccc999999990000cccc999966660000cccc999933330000cccc999900000000cccc6666ffff0000cccc6666cccc0000cccc666699990000cccc666666660000cccc666633330000cccc666600000000cccc3333ffff0000cccc3333cccc0000cccc333399990000cccc333366660000cccc333333330000cccc333300000000cccc0000ffff0000cccc0000cccc0000cccc000099990000cccc000066660000cccc000033330000cccc0000000000009999ffffffff00009999ffffcccc00009999ffff999900009999ffff666600009999ffff333300009999ffff000000009999ccccffff00009999cccccccc00009999cccc999900009999cccc666600009999cccc333300009999cccc0000000099999999ffff000099999999cccc0000999999999999000099999999666600009999999933330000999999990000000099996666ffff000099996666cccc0000999966669999000099996666666600009999666633330000999966660000000099993333ffff000099993333cccc0000999933339999000099993333666600009999333333330000999933330000000099990000ffff000099990000cccc000099990000999900009999000066660000999900003333000099990000000000006666ffffffff00006666ffffcccc00006666ffff999900006666ffff666600006666ffff333300006666ffff000000006666ccccffff00006666cccccccc00006666cccc999900006666cccc666600006666cccc333300006666cccc0000000066669999ffff000066669999cccc0000666699999999000066669999666600006666999933330000666699990000000066666666ffff000066666666cccc0000666666669999000066666666666600006666666633330000666666660000000066663333ffff000066663333cccc0000666633339999000066663333666600006666333333330000666633330000000066660000ffff000066660000cccc000066660000999900006666000066660000666600003333000066660000000000003333ffffffff00003333ffffcccc00003333ffff999900003333ffff666600003333ffff333300003333ffff000000003333ccccffff00003333cccccccc00003333cccc999900003333cccc666600003333cccc333300003333cccc0000000033339999ffff000033339999cccc0000333399999999000033339999666600003333999933330000333399990000000033336666ffff000033336666cccc0000333366669999000033336666666600003333666633330000333366660000000033333333ffff000033333333cccc0000333333339999000033333333666600003333333333330000333333330000000033330000ffff000033330000cccc000033330000999900003333000066660000333300003333000033330000000000000000ffffffff00000000ffffcccc00000000ffff999900000000ffff666600000000ffff333300000000ffff000000000000ccccffff00000000cccccccc00000000cccc999900000000cccc666600000000cccc333300000000cccc0000000000009999ffff000000009999cccc0000000099999999000000009999666600000000999933330000000099990000000000006666ffff000000006666cccc0000000066669999000000006666666600000000666633330000000066660000000000003333ffff000000003333cccc0000000033339999000000003333666600000000333333330000000033330000000000000000ffff000000000000cccc0000000000009999000000000000666600000000000033330000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000000000000000eeee000000000000dddd000000000000bbbb000000000000aaaa0000000000008888000000000000777700000000000055550000000000004444000000000000222200000000000011110000eeeeeeeeeeee0000dddddddddddd0000bbbbbbbbbbbb0000aaaaaaaaaaaa000088888888888800007777777777770000555555555555000044444444444400002222222222220000111111111111000000000000000001a5004801c4027e01a5004801c4027e00000067feffe20000ffe60000fffb0000ffdf0000fff40000ffeb0000ffe10000ffde0000ffee0000fff40000ffe00002ff00fffc0000ffe60000ffe60000fffd00fdffe00000fff40000ffef0000ffdd0000ffde0000ffee0000fff40000ffe10000fffe0001ff00f6ff0067feffe20000ffe60000fffb0000ffdf0000fff40000ffeb0000ffe10000ffde0000ffee0000fff40000ffe00002ff00fffc0000ffe60000ffe60000fffd00fdffe00000fff40000ffef0000ffdd0000ffde0000ffee0000fff40000ffe10000fffe0001ff00f6ff007afeffe20000ffe70002ff00fffc0000ffdf0000fff50002ff00ffee0001ffffe10002ff00ffe00001ffffef0002ff00fff50000ffe10003ff0000fffd0002ff00ffe70000ffe70002ff00fffa0000ffe10000fff50002ff00fff000fdffe10002ff00ffe00000ffee0002ff00fff50000ffe000feff010000f6ff007afeffe20000ffe70002ff00fffc0000ffdf0000fff50002ff00ffee0001ffffe10002ff00ffe00001ffffef0002ff00fff50000ffe10003ff0000fffd0002ff00ffe70000ffe70002ff00fffa0000ffe10000fff50002ff00fff000fdffe10002ff00ffe00000ffee0002ff00fff50000ffe000feff010000f6ff008dfeffe20000ffe80000fffe0000fffd0000ffdf0000fff60000fffe0000fff00000ffe00000fffe0000ffdf0000fff10000fffe0000fff60000ffe100fcff020000fffe0000ffe80000ffe80000fffe0000fffb0000ffe10000fff60000fffe0000fff10000fffe0000ffe30000fffe0000ffe20000ffee0000fffe0000fff60000ffe10000fffe0001ff00f6ff008dfeffe20000ffe80000fffe0000fffd0000ffdf0000fff60000fffe0000fff00000ffe00000fffe0000ffdf0000fff10000fffe0000fff60000ffe100fcff020000fffe0000ffe80000ffe80000fffe0000fffb0000ffe10000fff60000fffe0000fff10000fffe0000ffe30000fffe0000ffe20000ffee0000fffe0000fff60000ffe10000fffe0001ff00f6ff004dfeffe20000ffdf0000ffdf0000ffe10000ffbc0000fffe0000ffe10000ffde0000ffe00000ffe10000fffe0000ffe10000ffe10000fffe0000ffbf0000ffde0000ffe10000fffe0001ff00f6ff004dfeffe20000ffdf0000ffdf0000ffe10000ffbc0000fffe0000ffe10000ffde0000ffe00000ffe10000fffe0000ffe10000ffe10000fffe0000ffbf0000ffde0000ffe10000fffe0001ff00f6ff0123fefffe0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffd00fcfffd0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc00fefffc0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffa0000fff50000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffc00fefffc0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc0000fffa0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffc00feff010000f6ff0123fefffe0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffd00fcfffd0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc00fefffc0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffa0000fff50000fffb0000fffb0000fffb0000fffb0000fffb0000fffb0000fff500fefffc0000fffb0000fffb0000fffb0000fffb0000fffb0000fff40000fffb0000fffc00fefffc0000fffb0000fffb0000fffb0000fff40000fffb0000fffb0000fffb0000fffc0000fffa0000fffb0000fff40000fffb0000fffb0000fffb0000fffb0000fffb0000fffc00feff010000f6ff0022feffe20000ffbc0000ff8100f60000ffbc0000ffbc0000ff8100f60000ffdb00f6ff0022feffe20000ffbc0000ff8100f60000ffbc0000ffbc0000ff8100f60000ffdb00f6ff0098feff0100fff90000ffca0000fff500fefff60001ffffee00fefffd00fefff70000fffe0000ffed0000ffe200fefffe0000fffe0000fff80000fffe0000fff40000ffea00fcff010000fdfffd00fefffe00fcfff80000ffd800fdfffc0000fffc00fefffd00fefffd00feffd400fcfffd0000fffc0001ffffe700fefff000fdfffc0000fffc00fefffd00fefffd00fefffe00fcffcf00f6ff0098feff0100fff90000ffca0000fff500fefff60001ffffee00fefffd00fefff70000fffe0000ffed0000ffe200fefffe0000fffe0000fff80000fffe0000fff40000ffea00fcff010000fdfffd00fefffe00fcfff80000ffd800fdfffc0000fffc00fefffd00fefffd00feffd400fcfffd0000fffc0001ffffe700fefff000fdfffc0000fffc00fefffd00fefffd00fefffe00fcffcf00f6ff00bffeff0100ffc20001fffff60000fffe0000fff60000ffef0000fffe0003ff0000fffe0000fff80000fffe0000ffed0000ffe30000fffe0006ff0000ff0000fff70004ffff00fffff40000ffea0000fffb0000fffe0000fffd0000fffb0000fff60000ffd80000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000ffd50000fff20000ffe80000fffe0000fff10000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000fffd0000ffcd00f6ff00bffeff0100ffc20001fffff60000fffe0000fff60000ffef0000fffe0003ff0000fffe0000fff80000fffe0000ffed0000ffe30000fffe0006ff0000ff0000fff70004ffff00fffff40000ffea0000fffb0000fffe0000fffd0000fffb0000fff60000ffd80000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000ffd50000fff20000ffe80000fffe0000fff10000fffe0000fffe0002ff00fffe0000fffe0000fffd0000fffd0000fffe0000fffd0000ffcd00f6ff0108feff0100fffa0001fffffd00fdfffd00fefffc0000ffdf0000fff60000fffa00fefffc0000fffb0000fff20000fffb0000fff80000fffe0000fffe00fdfffe00fefffd00fdfffd0000ffe80009ff0000ffff0000ff00fff60004ff00ff00fffe00fefffd00fdfffe00fefffc0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fefffe00fdfffd00fefffc0000fff60000fffe0003ff0000fffe0003ff0000fff90000fffd0000ffd10000fffa0001fffffb0000fffc00fefffc0000fff60000fffb0000fffe0000fffe00fdff020000fffe0003ff0000fffe0003ff0000fff90000fffd0000fff90000fffc00fefffe0006ffff00ffff0000fdffe300f6ff0108feff0100fffa0001fffffd00fdfffd00fefffc0000ffdf0000fff60000fffa00fefffc0000fffb0000fff20000fffb0000fff80000fffe0000fffe00fdfffe00fefffd00fdfffd0000ffe80009ff0000ffff0000ff00fff60004ff00ff00fffe00fefffd00fdfffe00fefffc0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fefffe00fdfffd00fefffc0000fff60000fffe0003ff0000fffe0003ff0000fff90000fffd0000ffd10000fffa0001fffffb0000fffc00fefffc0000fff60000fffb0000fffe0000fffe00fdff020000fffe0003ff0000fffe0003ff0000fff90000fffd0000fff90000fffc00fefffe0006ffff00ffff0000fdffe300f6ff0114feff0100fff90000fffd0000fffe0003ff0000fffe0000ffda0000fff60000fffb0000fffe0000fffd0000ffed0001fffffc0001fffff70000fffe0003ff0000fffb0000fffe0003ff0000fffe0000ffe30008ff00ff00ff0000fffff50007ff00ff00ff0000fffe0003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffd0000fffb0000fff60000fff70003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffe00fefffc0000fffd0000ffd100fdfffc0000fffb0000fffd0000fffe0000fff000fefffe0000fffe0003ff0000fffb00fdfffe0000fffe0000fffe00fefffc0000fffd0000fff90000fffd0000fffe000aff0000ff00ff00ff0000fffe0000ffe400f6ff0114feff0100fff90000fffd0000fffe0003ff0000fffe0000ffda0000fff60000fffb0000fffe0000fffd0000ffed0001fffffc0001fffff70000fffe0003ff0000fffb0000fffe0003ff0000fffe0000ffe30008ff00ff00ff0000fffff50007ff00ff00ff0000fffe0003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffd0000fffb0000fff60000fff70003ff0000fffe0003ff0000fffe0000fff100fdfffe0000fffe0000fffe00fefffc0000fffd0000ffd100fdfffc0000fffb0000fffd0000fffe0000fff000fefffe0000fffe0003ff0000fffb00fdfffe0000fffe0000fffe00fefffc0000fffd0000fff90000fffd0000fffe000aff0000ff00ff00ff0000fffe0000ffe400f6ff011dfeff0100fff90000fffd0000fffe0002ff0000fcfffd0000ffdf0000fff60000fffb0000fffe0000fffd0000fffb0000fff50000fffb0000fff50000fffe0000fffe00fefffe00fcff020000fffe0000fffd0000ffe80009ffff0000ff0000ff00fff60000fffe0003ff0000fffe0003ff0000fffe0002ff0000fcfffd0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fdff020000fffe0003ff0000fffe0000fffd0000fff60000fffe0002ff0000fcfffb0000fffd0000fffd0000ffd10000fff90000fffb0000fffd00fcfffd0000fff20003ff0000fffe0000fffe00fefffe0000fffe0002ff0000fcfffb0000fffd0000fffd0000fff90000fffd00fcff090000ff00ff00ff0000fffe0000ffe400f6ff011dfeff0100fff90000fffd0000fffe0002ff0000fcfffd0000ffdf0000fff60000fffb0000fffe0000fffd0000fffb0000fff50000fffb0000fff50000fffe0000fffe00fefffe00fcff020000fffe0000fffd0000ffe80009ffff0000ff0000ff00fff60000fffe0003ff0000fffe0003ff0000fffe0002ff0000fcfffd0000fff60000fffb0000fffe0000fffd0000fffb0000fff60000fffa00fdff020000fffe0003ff0000fffe0000fffd0000fff60000fffe0002ff0000fcfffb0000fffd0000fffd0000ffd10000fff90000fffb0000fffd00fcfffd0000fff20003ff0000fffe0000fffe00fefffe0000fffe0002ff0000fcfffb0000fffd0000fffd0000fff90000fffd00fcff090000ff00ff00ff0000fffe0000ffe400f6ff0117feff0100fff90000fffd0000fffe0003ff0000ffd60000fff60000fffe0003ff0000fffe0000fffd0000ffef0000fffb0000fff40000fffe0000fffb0003ff0000fffb0000fffe0000ffe30000fffe0006ff0000ff0000fff70000fffe0003ff0000fffe0003ff0000fffe0003ff0000ffed0000fffb0000fffe0000fffd0000fffb0000fff60000fffb0000fffe0003ff0000fffe0000fffe00fdfff10000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000ffd50000fff90000fffb0000fffd0000ffed0000fffe0000fffe00fdfffb0003ff0000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000fffd0000fffd0000fffb0006ff00ff00ff0000fdffe300f6ff0117feff0100fff90000fffd0000fffe0003ff0000ffd60000fff60000fffe0003ff0000fffe0000fffd0000ffef0000fffb0000fff40000fffe0000fffb0003ff0000fffb0000fffe0000ffe30000fffe0006ff0000ff0000fff70000fffe0003ff0000fffe0003ff0000fffe0003ff0000ffed0000fffb0000fffe0000fffd0000fffb0000fff60000fffb0000fffe0003ff0000fffe0000fffe00fdfff10000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000ffd50000fff90000fffb0000fffd0000ffed0000fffe0000fffe00fdfffb0003ff0000fffe0003ff0000fffe0003ff0000fffe0000fffd0000fffd0000fffe0000fffd0000fffd0000fffb0006ff00ff00ff0000fdffe300f6ff00e7feff0000fcfffe00fefffe0000fffe0000fffe00fdffdb00fefff600fefffd00fefffd00fefff000fcff010000fcfff700fefffe00fdfffd00fdfffe00fdffe200fefffe0000fffe0000fff80000fffe0000fffe00fefffd00fdfffe00fdfff100fcff010000fdfffd00fefffc0000fff600fcfffe00fdff020000fffe0000fffb0000fff100fdfffe0000fffe0000fffe00fefffd00fefffd00feffd40000fffa00fefffd00fefffd00fdfff000fefffa0002ff0000fdfffe00fdfffe0000fffe0000fffe00fefffd00fefffd00fefffc0000fffc00fdff020000fffe0003ff0000ffe000f6ff00e7feff0000fcfffe00fefffe0000fffe0000fffe00fdffdb00fefff600fefffd00fefffd00fefff000fcff010000fcfff700fefffe00fdfffd00fdfffe00fdffe200fefffe0000fffe0000fff80000fffe0000fffe00fefffd00fdfffe00fdfff100fcff010000fdfffd00fefffc0000fff600fcfffe00fdff020000fffe0000fffb0000fff100fdfffe0000fffe0000fffe00fefffd00fefffd00feffd40000fffa00fefffd00fefffd00fdfff000fefffa0002ff0000fdfffe00fdfffe0000fffe0000fffe00fefffd00fefffd00fefffc0000fffc00fdff020000fffe0003ff0000ffe000f6ff0018feff81008100cb00feff8100f100feffbf0000ffe000f6ff0018feff81008100cb00feff8100f100feffbf0000ffe000f6ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff000a81ff81ff81ff81ffc3ff00a0008f00a0008300ff}\par}}The edit command shifts you from the shell to the full screen editor. The editor that comes with GSoft\~BASIC is optimized for writing programs, so it\rquote s a little different from editors like AppleWorks that are intended for writing letters, but there are also many similarities. We\rquote ll assume that you have used enough editors that you can type the program and use cursor keys and the return key to move around the screen. If you need help, try Command-?, which brings up the editor\rquote s help screen, or refer to Chapter\~6 of the GSoft\~BASIC reference manual.\par Type in the following program. The format isn\rquote t terribly critical, but since you don\rquote t know what is and what is not important yet, it is best to type it exactly as shown. This program writes the characters "Hello, world." to the screen. It\rquote s a simple program, but we must start somewhere.\par }{\fs28 \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \v\f6\fs20\cgrid {\xe {\v PRINT statement}}}{\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \v\f6\fs20\cgrid {\xe {\v strings\:constant}}}{PRINT "Hello, world."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The next step is to exit the editor. To be honest, this is a little peculiar. We\rquote ll discuss the reasons in a minute. To exit the editor, type Command-Q. The editor will ask you if you want to save the program. Select yes, and you\rquote re dropped back into the GSoft\~BASIC shell.\par At this point, you have created a BASIC program that is stored in the memory of your computer. GSoft\~BASIC calls this the program buffer, or sometimes the workspace. If you type\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {LIST}{\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \v\f6\fs20\cgrid {\xe {\v LIST command}}}{\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {You\rquote ll see the program itself. You can also look at or change the program using the editor, typing\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {EDIT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {again. In fact, technically there is a program in the program buffer as soon as you start GSoft\~BASIC\emdash it just doesn\rquote t have any lines. It\rquote s legal to run a completely empty program, it just doesn\rquote t do anything.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {It\rquote s a good idea to get in the habit of saving your program to disk occasionally. Right now, if you leave GSoft\~BASIC, you\rquote re program vanishes. That may not be a big deal for a one-line program, but you\rquote ll want to save your longer ones.\par To save the program to disk, type SAVE followed by the name you want to use for the program. Save this program as Hello, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {SAVE Hello}{\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \v\f6\fs20\cgrid {\xe {\v SAVE command}}}{\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This command saves your program to the same folder where GSoft.Sys16 is located. There is nothing to stop you from putting the programs somewhere else, but your life will be a little easier if you just leave the programs in the same folder as GSoft.Sys16. Occasionally, you will want to copy the programs to a separate archive disk and delete them from your working folder, especially if you are using floppy disks. You can actually do this from GSoft\~BASIC\rquote s shell, but this is one area where the Finder\rquote s desktop interface works better. Personally, I use GSoft\~BASIC\rquote s file manipulation commands if I need to copy or move one or two files, but for large numbers of files, I leave GSoft\~BASIC and use the Finder.\par With the program safely saved to disk, just in case a catastrophe happens, it\rquote s time to spin the prop and see if it flies. Type\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {RUN}{\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \v\f6\fs20\cgrid {\xe {\v RUN command}}}{\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This command executes the program in the program buffer. It\rquote s the GSoft\~BASIC equivalent of double-clicking on a program from the Finder. This program consists of a simple PRINT statement that writes the text between the quote marks to the screen, so you\rquote ll see\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {Hello, world.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {on your display. Congratulations, you\rquote ve just written and executed a computer program!\par }\pard \s28\fi360\sb40\widctlpar\adjustright {I mentioned earlier that the way the editor worked was a little peculiar. After all, the editor saved the program as you left the editor to go back to the GSoft\~BASIC shell, right? Well, sort of. Without getting too deep into technical explanations, the editor ended up saving the program in the workspace, not on the disk. Maybe you heard the disk being accessed. The editor and GSoft\~BASIC are actually separate programs. They use the disk to pass the program back and forth, but the temporary file they use for communication is erased automatically.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244514}Dealing with Errors{\*\bkmkend _Toc444244514}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v errors}}}{If you\rquote re program didn\rquote t quite work, check each step to see what you did wrong. One of the most common programmer mistakes is to assume that any mistake is the computer\rquote s fault. Sorry, it just ain\rquote t so. If things didn\rquote t work it\rquote s because, in order of likelihood:\par \par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 1.\tab}}\pard \s28\fi-360\li1080\sb40\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls19\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls19\adjustright {You didn\rquote t do exactly what you were told.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 2.\tab}}\pard \s28\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {You don\rquote t have the correct hardware.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 3.\tab}}\pard \s28\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {You have a bad disk.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 4.\tab}}\pard \s28\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls2\adjustright {You have bad hardware.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Just for the record, you should know that absolutely every program we will show you in this course has been mechanically moved from the word processor to GSoft\~BASIC (or vice versa) and executed. They have also been typed in and executed by one or more guinea pigs we call beta testers, who we use to find errors before the errors can confuse you. In other words, every single program has been tested at least twice. If you encounter a problem, the chances are very, very small that the problem is in the program in the course material or in GSoft\~BASIC.\par Now, that\rquote s not to say GSoft\~BASIC is perfect. You may encounter a bug someday. Still, the overwhelming number of programmers, especially beginning programmers, who blame a problem on the machine or the programming language have made two mistakes: One in the program itself, and the other in assigning the blame to the wrong source! The fact is, programming can be very humbling, because the mistakes are almost always your own.\par To correct a problem, go back over each step in the text. If there is an error message, examine it closely to see what it tells you. The GSoft\~BASIC reference manual has an appendix that lists all of the errors and some common causes. Check your typing in the area very carefully; a typing error is the most common cause of errors at this stage.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244515}A Close Look at Hello World{\*\bkmkend _Toc444244515}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Now that you have actually run a program, let\rquote s stop and spend some time talking about what happened. We\rquote ll start by examining the program in detail. The first step is to take a look at the words that make up the program\par Like sentences in a book, programs are made up of a series of words and punctuation marks. Some of the words have special meaning, while some are words we pick to name parts of the program.\par We\rquote ll dissect our first program to look at some of these rules. This program consists of a single line. All BASIC programs are organized as zero or more lines. Most of the time, each line contains a separate, distinct command for the computer to carry out. The entire collection of lines is called the program.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {PRINT "Hello, world."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v PRINT statement}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v reserved words}}}{The word PRINT is called a reserved word. This just means that you can only use the word PRINT in special ways in a BASIC program. It is also a statement in BASIC; it\rquote s one of the commands the language understands. The characters that we want the program to write are placed after the word PRINT. BASIC uses the quote character to mark the start and end of a string constant. This lets you write things like parenthesis, reserved words, and so forth, without confusing BASIC. As long as you keep the string on one line, you can put absolutely any characters you want in the string, except for the quote mark itself. You can still write a quote mark, but it takes a little more work. We\rquote ll look at how it\rquote s done in Lesson 5.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244516}More About Reserved Words{\*\bkmkend _Toc444244516}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {In the last section I pointed out that our first program had something called a reserved word, and that reserved words can only be used in special ways. PRINT is one of the reserved words in GSoft\~BASIC. Here\rquote s a complete list of the reserved words:\par \par }\pard \s28\sb40\keep\widctlpar\tx540\tx2160\tx3780\tx5400\tx7020\tx8550\adjustright {\f6\fs20 \tab }{\pard\plain \s28\sb40\keep\widctlpar\tx540\tx2160\tx3780\tx5400\tx7020\tx8550\adjustright \v\f4\cgrid {\xe {\v reserved words}}}{\f6\fs20 ABS\tab ALLOCATE\tab ALLOCATEPROC\tab AND\tab APPEND\tab AS\tab ASC\tab AT\tab ATN\tab BINARY\tab BREAK\tab BYTE\tab CALL\tab CASE\tab CDBL\tab CHDIR\tab CHR$\tab CINT\tab CLEAR\tab CLNG\tab CLOSE\tab CONST\tab CONT\tab COS\tab CSRLIN\tab CSNG\tab CURDIR$\tab DATA\tab DEF\tab DIM\tab DIR$\tab DISPOSE\tab DISPOSEPROC\tab DO\tab DOUBLE\tab ELSE\tab END\tab EOF\tab ERL\tab ERR\tab ERROR\tab EXP\tab FN\tab FOR\tab FRE\tab FUNCTION\tab GET\tab GOSUB\tab GOTO\tab GSOS\tab HCOLOR=\tab HEX$\tab HGR\tab HOME\tab HPLOT\tab HTAB\tab IF\tab INPUT\tab INT\tab INTEGER\tab INVERSE\tab KILL\tab LEFT$\tab LEN\tab LET\tab LIBRARY\tab LINE\tab LOADLIBRARY\tab LOC\tab LOF\tab LOG\tab LONG\tab LOOP\tab MID$\tab MKDIR\tab MOUSETEXT\tab NAME\tab NEXT\tab NIL\tab NORMAL\tab NOT\tab ON\tab ONERR\tab OPEN\tab OR\tab OUTPUT\tab PEEK\tab POINTER\tab POKE\tab POP\tab POS\tab PRAGMA\tab PRINT\tab PUT\tab RANDOM\tab READ\tab REM\tab RESTORE\tab RESUME\tab RETURN\tab RIGHT$\tab RMDIR\tab RND\tab SEEK\tab SELECT\tab SETMEM\tab SGN\tab SHARED\tab SIN\tab SINGLE\tab SIZEOF\tab SPC\tab SPEED=\tab SQR\tab STEP\tab STOP\tab STR$\tab STRING\tab SUB\tab TAB\tab TAN\tab TCP \tab TEXT\tab THEN\tab TO\tab TOOL\tab TOOLERROR\tab TYPE\tab UNLOADLIBRARY\tab UNTIL\tab USING\tab VAL\tab VERSION\tab VTAB\tab WAIT\tab WEND\tab WHILE\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Don\rquote t worry; you don\rquote t need to memorize the list. The important thing to remember is that there are some words you can only use in specific ways. If you get strange errors from GSoft\~BASIC, you can refer back to this table to see if the reason is misusing a reserved word.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244517}Case Sensitivity{\*\bkmkend _Toc444244517}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v case sensitivity}}}{BASIC is case insensitive. That means that you can type the reserved words using lowercase characters, uppercase letters, or any mix of case you prefer. For added speed, though, GSoft\~BASIC always converts everything to uppercase letters. The program is actually converted from the text you type to a shorter internal format called tokens. When you list or edit a program, GSoft\~BASIC converts these tokens back to text. In the process, it prints everything using uppercase letters and indents to program automatically to indicate the program\rquote s structure. Spaces that are not part of a string, like the space in \ldblquote Hello, world.\rdblquote , are removed. As the program is converted from tokens to text, new spaces are inserted between most program symbols.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244518}Where Are The Line Numbers?{\*\bkmkend _Toc444244518}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v line numbers}}}{In many versions of BASIC, each line must start with a number. Obviously that\rquote s not true in GSoft\~BASIC, since we didn\rquote t use one, but why the difference?\par To understand where the line numbers went you have to understand why they were ever used in the first place. In very old implementations of BASIC there are actually two reasons for using line numbers.\par The first use of line numbers has more to do with typing the program than running it. Early versions of BASIC were written for computers that didn\rquote t have much memory. To save space\emdash and programming time!\emdash these implementations of BASIC used simple editors that entered or changed one line at a time, rather than editors like the one in GSoft\~BASIC that work more or less like a text editor. The old kind of editor is called a line editor. In a line editor you need some way to tell the editor which line you are going to change. Older implementations of BASIC use a number at the start of each line to identify the line. The lines are sorted in numerical order.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GOTO statement}}}{The second use of line numbers is to label the line for a statement that jumps to that line, often a GOTO statement. You won\rquote t see statements like GOTO much in this course, so we don\rquote t generally need line numbers for this purpose, either.\par Like most modern implementations of BASIC, GSoft\~BASIC just doesn\rquote t need line numbers on each line, and rarely needs them at all. Since they aren\rquote t needed, you aren\rquote t required to type them. You can still use line numbers, and in fact GSoft\~BASIC actually has a built-in line editor that works a lot like the old Applesoft BASIC line editor. In this course, though, we\rquote ll assume you\rquote re using the modern full screen editor. We won\rquote t use line numbers unless the program itself needs them.\par \par }\pard\plain \qj\widctlpar\adjustright \f4\cgrid {Problem 1.1. Rewrite the hello world program so it says hello to you. For example, my name is Mike, so I rewrote the program to say "Hello, Mike." Save this program as NAME.\par }\pard\plain \s36\fi-1080\li1800\ri720\sb40\widctlpar\adjustright \f4\cgrid {\f20 \u-3979\'75}{ Note\tab The disk that comes with this course has all of the programs you see in the text and solutions to all of the problems. Programming is a skill, so you should type the sample programs yourself and try to solve the problems yourself, but if you get stuck, check the solutions disk.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244519}How Programs Execute{\*\bkmkend _Toc444244519}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {With what we know now, we can start to write larger programs. Our first step will be to modify the hello world program to write five lines instead of one. We\rquote ll create a program that writes a limerick to the screen.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {PRINT "There was a young man from Lenore"\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT "Whose mouth was as wide as a door."\par PRINT "   While trying to grin,"\par PRINT "   He slipped and fell in,"\par PRINT "And laid inside out on the floor."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Type in the program and save it on your program disk as Limerick. Use the RUN command to run the program.\par Did the program do what you expected? It does bring up an obvious point. Like sentences in a book, BASIC reads and processes your program in the order it is written. The first line is executed first, the second is executed second, and so on.\par Later you\rquote ll learn several statements that modify the way a program executes, executing one line or a group of lines several times, for example, but the essential point of this exercise is still critical. Whatever a program is running, statements are executed in a specific, logical order that can be predicted ahead of time. \par \par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {Problem 1.2. Write a program that prints your name and address. Print the address on separate lines, just as you would on an envelope.\par \par Problem 1.3. With a little work, you can create a readable letter by coloring in squares on a sheet of graph paper. The smallest number of squares that works well for uppercase only letters is seven high by five wide. This is the idea used to form characters on the computer screen from the small dots called pixels.\par }\pard \s31\fi360\widctlpar\adjustright {Write a program to write your first name to the screen in this form. Use the * character to fill in the squares. For example, I would ask the computer to write this to the screen:\par }\pard \s31\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {*   *  ***  *   * *****\par ** **   *   *  *  *\par * * *   *   * *   *\par *   *   *   **    ***\par *   *   *   * *   *\par *   *   *   *  *  *\par *   *  ***  *   * *****\par }\pard\plain \s19\fi360\sb60\nowidctlpar\adjustright \f4\cgrid {\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart graphcis}{\*\bkmkstart _Toc444244520}Graphics Programs{\*\bkmkend _Toc444244520}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {There\rquote s a lot you can do with text, but the Apple\~II}{\fs18 GS}{ has some stunning graphics, too. It\rquote s time to start using some of that power. One word of caution, though: The graphics that are built right into the BASIC language itself are rather limited. While some implementations of BASIC have extensive graphics commands, there is no widely accepted standard set of graphics commands. For the most part, our examples will use the powerful graphics commands of QuickDraw\~II}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v QuickDraw\~II}}}{, the graphics package built into the Apple\~II}{\fs18 GS}{ itself. As a result, the information in this section that deals with graphics is particular to the Apple\~II}{\fs18 GS}{. Other computers may do things a bit differently.\par The Apple\~II}{\fs18 GS}{ has a large number of built-in subroutines to do complicated tasks for you. These subroutines are called tools. They are grouped by function into groups called tool sets. The entire collection is what people refer to as the toolbox. The toolbox is a large and wonderful collection which we won\rquote t have time to explore fully, but we will use some of the tools to do some work for us from time to time. Graphics is one of those times. QuickDraw\~II is one of the tools in the Apple\~II}{\fs18 GS}{ toolbox.\par The following program is our first venture into graphics.\par \par }\pard\plain \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright \f4\cgrid {\f6\fs20 HGR\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 SETPENMODE (0)\par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 SETSOLIDPENPAT (15)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\fi360\keepn\widctlpar\outlinelevel0\adjustright {\f6\fs20 MOVETO (10, 10)\par LINETO (45, 10)\par LINETO (45, 40)\par LINETO (10, 40)\par LINETO (10, 10)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\fi360\widctlpar\outlinelevel0\adjustright {\f6\fs20 INPUT "";A$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Type in this program and save it as Square, then run the program. You will see a square, about one inch high and once inch wide, on your screen. (Depending on the monitor you are using and how it is adjusted, the size of the square may vary a bit.)\par One of the things you\rquote ll notice right away is that the text you normally see on your screen has vanished. While there are some ways to display both text and graphics at the same time, for the most part you get one or the other. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v HGR statement}}}{The first line of the program, HGR, switches from the text display to a graphics display which can show 320 colored dots called pixels on each row.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v pixel}}}{ There are 200 rows of pixels on the entire screen. Each of the pixels can be one of 16 distinct colors.\par As soon as the program finishes the display switches back to the text screen. The reason you\rquote re still looking at the graphics screen is that the program is still running! The last line of the program waits for you to type a string and press return. As soon as you press the return key, the program will finish and the display will switch back to the text display. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v INPUT statement}}}{We\rquote ll look at the INPUT statement in more detail later in the course; for now, just use this command whenever you want the program to pause.\par All of the remaining lines in the program are actually calls to QuickDraw\~II, not commands that are a part of BASIC. In each case, the line is the name of one of the commands built into QuickDraw\~II. This is followed by one or two numbers enclosed in parenthesis. If there are two numbers, these numbers are separated by a comma. This basic format is something you\rquote ll see over and over as we explore the Apple\~II}{\fs18 GS}{ toolbox, GSoft BASIC, and later, program pieces called subroutines that you will write yourself.\par The first two drawing commands tell QuickDraw II how you want to draw lines. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SETPENMODE tool call}}}{SETPENMODE (0) tells QuickDraw\~II to replace any existing dots with new dots. That makes sense, so you might wonder why you need to bother. QuickDraw\~II can do other things when it draws, so we need to start by telling it to do the simplest of the alternatives. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SETSOLIDPENPAT tool call}}}{SETSOLIDPENPAT\~(15) tells QuickDraw II to draw white lines.\par The next five lines draw a square in the graphics window. To understand how they work, we need to start by examining the coordinate system used by QuickDraw\~II. To QuickDraw, the top left dot on the screen is at 0, 0. As you move to the right, the first number increases. In other words, 90, 0 is 90 dots to the right of 0, 0, but on the same line. As you move down, the second number increases. The point 0, 40 is 40 dots below 0, 0. You can use numbers so large they go off of the screen to the bottom or right, or even negative numbers that would theoretically show up above or to the left of the screen. In that case, you can\rquote t see the lines, but QuickDraw\~II will still draw all of the line that is in the window.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v MOVETO tool call}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LINETO tool call}}}{The first command to draw the square is MOVETO. It doesn\rquote t actually draw anything at all. MOVETO positions the graphics pen over a particular pixel on the screen. The next line, LINETO, draws a line by coloring all of the pixels from 10, 10 to 45, 10. The remaining LINETO commands draw the remaining three sides of the square, coming back around to the original point of 10, 10.\par Throughout this section, I\rquote ve talked about drawing a square, but this program is drawing a shape that is 35 pixels wide and 30 pixels high. Obviously, something strange is happening. The reason for the discrepancy is that pixels on the Apple\~II}{\fs18 GS}{ graphics screen are slightly taller than they are wide. The exact amount varies a bit, but on my screen, these coordinates produce a square.\par There\rquote s one other new feature in this program. The program itself carries out three distinct steps: First, it gets ready to draw. Next it draws a square. Finally, it waits for you to press the return key before stopping. It\rquote s easy to see these three steps in the program because of the strategic placement of two blank lines to divide the commands into three groups. The blank lines actually take up a small amount of space in the finished program, but the space used it pretty negligible. The extra clarity is well worth the cost of a few bytes of memory.\par \par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {\page }{\lang1024 {\shp{\*\shpinst\shpleft4680\shptop144\shpright8712\shpbottom5432\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk0\shpfblwtxt0\shpz0\shplid1034{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn lTxid}{\sv 65536}}{\sp{\sn hspNext}{\sv 1034}}{\shptxt \pard\plain \s18\qj\widctlpar\tx1800\adjustright \f4\cgrid {\b Apple\~II}{\b\fs18 GS}{\b  Default Graphics Colors\par }\pard \s18\qj\sb80\widctlpar\tx1800\adjustright {\ul Color Number\tab Color\tab \tab \par }\pard \s18\qj\widctlpar\tx1800\adjustright {0\tab black\par 1\tab dark gray\par 2\tab brown\par 3\tab purple\par 4\tab blue\par 5\tab dark green\par 6\tab orange\par 7\tab red\par 8\tab beige\par 9\tab yellow\par 10\tab green\par 11\tab light blue\par 12\tab lilac\par 13\tab periwinkle blue\par 14\tab light gray\par 15\tab white\par }\pard\plain \nowidctlpar\adjustright \f4\cgrid {\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8192\dptxbx\dptxlrtb{\dptxbxtext\pard\plain \s18\qj\widctlpar\tx1800\adjustright \f4\cgrid {\b Apple\~II}{\b\fs18 GS}{\b  Default Graphics Colors\par }\pard \s18\qj\sb80\widctlpar\tx1800\adjustright {\ul Color Number\tab Color\tab \tab \par }\pard \s18\qj\widctlpar\tx1800\adjustright {0\tab black\par 1\tab dark gray\par 2\tab brown\par 3\tab purple\par 4\tab blue\par 5\tab dark green\par 6\tab orange\par 7\tab red\par 8\tab beige\par 9\tab yellow\par 10\tab green\par 11\tab light blue\par 12\tab lilac\par 13\tab periwinkle blue\par 14\tab light gray\par 15\tab white\par }\pard\plain \nowidctlpar\adjustright \f4\cgrid {\par }}\dpx4680\dpy144\dpxsize4032\dpysize5288\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0}}}}{Problem 1.4. There are a total of sixteen colors that you can use. The }{\pard\plain \s31\widctlpar\adjustright \v\f4\cgrid {\xe {\v SETSOLIDPENPAT tool call}}}{\pard\plain \s31\widctlpar\adjustright \v\f4\cgrid {\xe {\v graphics\:colors}}}{SETSOLIDPENPAT\~ call is used to choose from these colors. In our example, we used color 15 to draw the square in white. You can use any number from 0 to 15. In fact, you can actually use larger numbers, but that doesn\rquote t give you more colors\emdash the same 16 colors are repeated over and over.\par }\pard \s31\fi360\widctlpar\adjustright {Try some of the other colors. Be sure and try color 0. What happens?\par }\pard \s31\widctlpar\adjustright {\par Problem 1.5. An equilateral triangle is a triangle where each of the three sides are the same length. Write a new program to draw an equilateral triangle with 1 inch sides. Make the bottom flat, with one point on the top.\par \par Problem 1.6. Modify the program in problem 1.5 to draw a six sided star by drawing two equilateral triangles, one pointed up and one pointed down, and overlapping the triangles. Make the star green.\par \par Problem 1.7. Write your name in the graphics window by drawing lines. If your name has letters with curves, use a few short lines to approximate the shape of the letter.{\*\bkmkend graphcis}}{\pard\plain \s31\widctlpar\adjustright \v\f4\cgrid {\xe {\v graphics}{\rxe graphcis}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \s32\qr\nowidctlpar\brdrb\brdrs\brdrw10\brsp20 \tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid {\f5\fs20 Learn to Program in GSoft BASIC\par }}\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244521}Lesson Two \emdash  Variables and Loops{\*\bkmkend _Toc444244521}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244522}Integer Variables{\*\bkmkend _Toc444244522}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {You have probably heard that computers are very good at dealing with numbers. This is quite true. In this lesson, we will start to use numbers and variables in our programs. If you aren\rquote t a math whiz, though, don\rquote t panic. We won\rquote t be dealing with anything more complicated than simple arithmetic in this chapter.\par Let\rquote s start by typing in this program.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM This program prints a table of numbers and squares of the numbers\par \par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {I% = 1\par S% = I% * I%\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT I%, S%\par I% = I% + 1\par S% = I% * I%\par PRINT I%, S%\par I% = I% + 1\par S% = I% * I%\par PRINT I%, S%\par I% = I% + 1\par S% = I% * I%\par PRINT I%, S%\par I% = I% + 1\par S% = I% * I%\par PRINT I%, S%\par }\pard\plain \s28\fi-1080\li1800\ri720\sb40\widctlpar\adjustright \f4\cgrid {\f20 \par }\pard\plain \s36\fi-1080\li1800\ri720\sb40\widctlpar\adjustright \f4\cgrid {\f20 \u-3979\'75}{ Note\tab Sometimes a line in a BASIC program is too long to fit on one line in this book. When that happens, the second and subsequent lines are further to the left than the rest of the program. When you type the program, put everything on one line in the editor. In this sample, the line \ldblquote numbers\rdblquote  is actually a continuation of the first line; \ldblquote numbers\rdblquote  should appear at the end of that line.\par \par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v comments}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v REM statement}}}{One of the first things you will see in our program is a comment. Comments are a special kind of command that doesn\rquote t do anything. The comment starts with the command name, REM. Everything after this command name, all the way to the end of the line, is ignored. You can always leave a comment out entirely, and the program will do exactly the same thing as it did when the comment was there. Why, then, do we bother?\par If your memory was as good as the computer\rquote s, and if no one else ever read your programs, you wouldn\rquote t need comments. Comments are for your benefit, as well as the benefit of all those poor lost souls who will have to figure out what you did later. One good place to put a comment is at the beginning of the program, identifying quickly what the program is for. It\rquote s not a bad idea to put your name and the date the program was written there, too. As you get used to seeing comments in the examples, you\rquote ll find that comments also help at the start of each logical section of the program\emdash each section of lines that do one conceptual thing.\par There are actually two comment commands in GSoft\~BASIC. The REM command you saw in the example program is pretty much universal in BASIC, but it takes three characters, and some people think it looks a bit ugly. GSoft\~BASIC lets you use an exclamation point instead of the characters REM. While using an exclamation point to start a comment is hardly universal in BASIC, it\rquote s not uncommon in other implementations, either.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ! statement}}}{Using an exclamation point, the comment looks like this:\par \par }{\f6\fs20 ! This program prints a table of numbers and squares of the numbers.\par }{\par }\pard \s28\sb40\widctlpar\adjustright {It works exactly the same way as the first example.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Computers can work with a vast array of number formats, each of which has a special purpose. The two most common number formats are integers and reals. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v integers}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v real numbers}}}{Integers are whole numbers, like 4, -100, or 1998. Real numbers include the numbers between the whole numbers, like 1.25 or 3.14159.\par The memory of a computer is made up of a vast series of numbers, but in a language like BASIC, we don\rquote t have to deal with them the same primitive way the computer does. Instead, we can define variables. A variable is just a place where you can put a value. We use two variables in our program; they are called I% and S%. Within certain limits we can put any number we like in these variables. It\rquote s exactly like putting two names for numbers on a sheet of paper and continuously erasing the number to replace it with a new one.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LET statement}{\txe {\i\v See}{\v   assignment statement}}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v assignment statement}}}{The first thing we need to do is learn to put a number in a variable. We do this with something called an assignment statement, which is sometimes called a let statement. The line\par \par }\pard \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright {\f6\fs20 I% = 1\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\sb40\widctlpar\adjustright {tells the computer to place the number 1 in the variable I%. The = character is called the assignment operator. The very next line puts this value to use.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright {\f6\fs20 S% = I% * I%}{\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Here, we multiply I% by itself and put the result in the second variable, S%. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v multiplication}}}{The * character is used in computer languages for multiplication because a computer would confuse x in "I% x I%" with a variable named X. The result is saved in the location named S%. Finally, we write the values.\par \par }\pard \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright {\f6\fs20 PRINT I%, S%\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v PRINT statement}}}{The PRINT statement deserves a little more attention, since there are several new concepts here. We have already used the PRINT statement to write characters to the screen. In this case, though, we are writing two numbers. Any time we use the PRINT statement to write two things, the two things are separated by a comma or a semicolon. If you separate the values with comma characters, BASIC separates the values into neat, tabbed columns. Semicolons are used when you don\rquote t want extra spaces or columns, as in\par \par }\pard \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright {\f6\fs20 PRINT "That will cost $"; MONEY\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\sb40\widctlpar\adjustright {As you can see, we can also mix strings and numbers in the same PRINT statement.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {The rest of the program should make sense at this point. BASIC reads the program one line at a time, in the same order you do, and does what the line tells it to do right after the line is read. It does this until it reaches the end of the program, then stops.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244523}More About Variable Names{\*\bkmkend _Toc444244523}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v type characters}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v variable names}}}{If you recall, I said BASIC could use several kinds of numbers, like integers and real numbers. So which are these? Both I% and S% are integers, so they are limited to whole numbers. There are two ways to tell BASIC what kind of number to use. The first is to follow the name of the variable with a special character. For integer values, that character is %, so I% is an integer variable. For real variables, you can use a ! character, but BASIC also creates a real variable if you don\rquote t use any character at all at the end of the variable name.\par Interestingly enough, that last character counts. It\rquote s perfectly legal to have variables named I%, I and I! In the same program, and each of these holds a distinct value. The first variable is an integer, while the last two are real numbers. On the other hand, not everything that is possible is a good idea. In most cases it\rquote s best to use distinct names. It makes the program easier to understand, and as your programs get longer, that will become very important.\par As for the names of the variables themselves, they pretty much follow the same rules you would use for writing words, so long as you don\rquote t pick one of the reserved words listed in Lesson\~1. Each variable name start with an alphabetic character or the underscore character, _. The rest of the name can be any number of alphabetic characters, underscore characters and digits, while the last character can also be one of the type characters, like % for integers. The case of the characters does not matter\emdash you can use the name S in one place, and s in another, for example. BASIC treats the names as the same variable, and in fact, it will change all of the lowercase letters to uppercase before printing them.\par What all of those technical rules really amount to is that you can use anything that looks like a word as the name of a variable. You can also use numbers as long as a digit isn\rquote t the first character, perhaps naming a series of related variables COST1, COST2, and so forth. The underscore character is usually used when you want to stuff two English words together to form a variable name. You can\rquote t use a space character, so you use the underscore instead, as in CURRENT_INTEREST_RATE.\par \par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {Problem 2.1: The Fibonacci series is a sequence of numbers obtained by adding the two previous numbers in the series. The series starts with 0 and 1. Write a program with three variables named LAST%, CURRENT%, and FIB%. Set LAST% to 0 and CURRENT% to 1.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Now do the following steps five times:\par \par 1. Compute FIB% by adding CURRENT% to LAST% and saving the result in FIB%.\par 2. Print FIB%.\par 3. Assign CURRENT% to LAST%.\par 4. Assign FIB% to CURRENT%.\par \par The result should be the numbers 1, 2, 3, 5 and 8, all on a different line.\par Fibonacci numbers seem to occur frequently in nature; no one is quite sure why. The number of petals in a flower and the number or leaflets on a compound leaf are often Fibonacci numbers.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244524}Using DIM To Declare a Variable Type{\*\bkmkend _Toc444244524}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v DIM statement}}}{If you remember, I said there were two ways to tell BASIC what type of number you want to store in a variable. The first is to follow the variable name with a special character, like % for integer values. The second way is to use a DIM statement. The DIM statement is generally used to create arrays in BASIC, and we\rquote ll use it for that later in the course. For now, though, we\rquote ll put it to the more mundane use of making a variable hold the kind of number we want without the need for special characters.\par Here\rquote s how we can create a variable named I, but make it an integer variable instead of a single-precision floating-point variable, like it would be if we did not use the DIM statement.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {DIM I AS INTEGER\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v real numbers}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v integers}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v INTEGER type}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v REAL type}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v STRING type}}}{You can also use SINGLE instead of INTEGER to declare a single-precision real variable, or STRING for a variable that holds a string of characters. Later on we\rquote ll start using other kinds of numbers. All have a named type that you can use in the DIM statement to create variables.\par There are two schools of thought on whether to use the special characters or DIM statements to declare variables. The special characters make it pretty obvious what kind of value goes in the variable, and it also lets you start using variables without the hassle of creating a DIM statement to declare the variable first. That\rquote s one of the many things that makes it easier to write a short program in BASIC than in, say, C or Pascal. On the other hand, declaring all of the variables at the top of the program is a nice way to start a large program or subroutine. It gives you a chance to document what the variable is for with a comment, like this one:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {DIM S AS INTEGER :! Square of the number\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par So which is better? Well, it depends. Personally, I use type characters for short programs and for programs that I write once to do a specialized task, then throw away. I use DIM statements and careful comments on longer programs. I\rquote d suggest trying both methods to see which you like. You\rquote ll see both in this course.\par If you look closely, I slipped in one other new idea in this example. The : character is used to put two statements on the same line. We need it here because the DIM statement and the comment statement can\rquote t fit on the same line without it. You can actually use the : character to separate almost any two BASIC statements, but in most cases that makes the program harder to read. This is about the only situation where you\rquote ll see the : statement separator}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v statement separator}}}{ used in this course.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart for_loop2}{\*\bkmkstart _Toc444244525}The FOR Loop{\*\bkmkend _Toc444244525}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {So far all of our programs have executed one statement at a time, starting with the first and proceeding to the last. In our last sample and problem this started to get a little tedious, as we repeated the same thing over and over, incrementing a number by one each time. Computers are real good at doing tedious things, but most people are not. The FOR loop is the first in a series of statements we will look at that help remove some of the tediousness of writing a program.\par Type in the sample program below and run it. Take a crack at figuring out what it is doing on your own before you read further.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {REM Draw a fan shape in the graphics window \par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {DIM I AS INTEGER :! loop/index variable\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par ! Set up the graphics screen\par HGR\par SETPENMODE (0)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {SETSOLIDPENPAT (2)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par ! Draw the fan\par FOR I = 1 TO 25\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {  MOVETO (160, 70)\par   LINETO (I * 12 - 10, 10)\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par ! Wait for a return\par INPUT "";A$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Most of the things in this program should be familiar by now, although some of them are being used in new ways. The only thing that is really new is the FOR statement itself. In BASIC, we use a FOR loop whenever we need to do something a specific number of times. This could be calculating ten values, or drawing twenty-five vanes of a fan, as our program does.\par The FOR loop starts with the reserved word }{\f6\fs20 FOR}{, followed by an assignment. In our case, we are starting our FOR loop with I set to 1. The two statements right after the FOR loop get executed once with I set to 1. What happens is exactly the same as if we substitute 1 for I in the statements, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {  MOVETO (160, 70)\par   LINETO (1 * 12 - 10, 10)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FOR statement\:NEXT}}}{It doesn\rquote t stop there, though. When NEXT is executed, the loop starts over with the next value. I is set to two, and the statements are executed again. This continues until I is twenty-five. After executing the statements one last time with I set to twenty-five, the program moves on to the line after the FOR loop.\par \par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {Problem 2.2: Our first sample in this chapter created a table of numbers and squares. It did this in a fairly clumsy way, by using separate statements to step from 1 to 5. Rewrite this sample using a FOR loop.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {Problem 2.3: In the last chapter, we drew a square by drawing its sides with constant integers. We could also draw a rectangle using variables, like this:\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {TOP = 10\par BOTTOM = 70\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LEFT = 10\par RIGHT = 100\par MOVETO (LEFT, TOP)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {LINETO (RIGHT, TOP)\par LINETO (RIGHT, BOTTOM)\par LINETO (LEFT, BOTTOM)\par LINETO (LEFT, TOP)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Use a FOR loop to draw five rectangles, one inside the other. Set TOP, BOTTOM, LEFT and RIGHT before the FOR loop starts. Inside the FOR loop, draw the rectangle, then add six to top and left, and subtract six from bottom and right.\par Use DIM statements with appropriate comments to declare TOP, BOTTOM, LEFT and RIGHT as integers.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FOR statement}{\rxe for_loop2}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244526}{\*\bkmkend for_loop2}Some Thoughts on Comments{\*\bkmkend _Toc444244526}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v comments}}}{You may notice more and more comments slipping into our programs. As the programs get longer and more complicated, you will see the trend continue.\par The primary use of comments is to describe in plain English what the program is doing. Looking back at the Fan program, the FOR loop is labeled with a comment that says the loop draws the fan. These are a great help. You can read the statements by now, and you know what each one does. No one has to tell you what MOVETO(50, 70) does, for example. On the other hand, it is certainly not obvious to me that these lines of code draw a fan shape. The comment tells me that, and suddenly the purpose behind the statements is clear. You\rquote ve also started to see comments used to describe how a variable is used in a program.\par The way you comment differs from one language to the next. In assembly language and some high-level languages I like to put comments like these at the right side of the page, lined up in a column. This lets me read the comments quickly, without reading the program. This doesn\rquote t generally work well in BASIC because the language reformats your programs for you, taking out extra spaces you insert and putting in spaces where it wants them. This messes up comments that are formatted in columns to the right of the code. In BASIC and some other high-level languages, I prefer putting comments on a separate line just above the code the comment describes. The extra blank line adds a little emphasis, breaking the program up into logical chunks, more or less like paragraphs are used to break sentences into logical chunks in prose.\par There is one tremendous pitfall in commenting, though, and that\rquote s when the comments don\rquote t match the program. Let\rquote s assume that the comments in a program describe something that should work, but the program itself doesn\rquote t do exactly what the program describes\emdash perhaps the comment says the code draws a fan, when in reality it draws an array of parallel lines. When you go to debug the program, the natural tendency is to read the comments, not the code. This tendency is so strong that it generally takes less time to debug a program with no comments at all than it does to debug a program with incorrect comments! This is a surprising result, but it\rquote s backed up by research.\par There are two points to keep in mind as you think about this paradox of commenting. The first is that the comments are a memory jog, and not always an accurate portrayal of what the program does. As Ronald Reagan might have put it if he had been a programmer instead of an actor, \ldblquote Trust, but verify.\rdblquote \par The second important point is that when you change the code, you need to change the comments, too. That seems so painfully obvious that you probably don\rquote t think it\rquote s a real problem. Trust me, it is, especially when you are rapidly changing a program to fix bugs or make adjustments to improve speed, or to change the way the program looks on the computer screen. Don\rquote t get lazy and put off changing the comments until you finish debugging the code\emdash always change the comments as an integral part of changing the program itself.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244527}Operator Precedence{\*\bkmkend _Toc444244527}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v operator precidence}}}{By now you are getting used to the idea that computers step through a program in a fairly orderly way. Statements are executed top to bottom, left to right, the same way you read. Try the following program, but see if you can figure out what will be printed before you run the program.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {REM A look at operator precedence\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {PRINT 1 + 2 * 3\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright {\pard\plain \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright \v\f4\cgrid {\xe {\v multiplication}}}{\pard\plain \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright \v\f4\cgrid {\xe {\v addition}}}{There are two perfectly reasonable ways to compute a value from the expression\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {1 + 2 * 3\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The first is to work left-to-right:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {1 + 2 * 3\par 3 * 3\par 9\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The second is to follow the rules you may remember from algebra class, and do the multiply first.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {1 + 2 * 3\par 1 + 6\par 7\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par As you can see from running the program, BASIC uses the same rules as algebra teachers. BASIC was, after all, originally designed by and for physicists, who tend to take a lot of math courses. Not all languages follow these rules; APL, for example, does work left to right. The way a language determines what order to do operations in is called operator precedence. We might as well call it the operator pecking order; it means the same thing. Computer types like to sound official, though, so we better stick to precedence.\par The table below shows all of the operators in BASIC. All of the operators on the same line have the same precedence. The ones at the top are done first. If two operators with the same precedence appear together, they are evaluated left-to-right.\par You will learn to use most of these operators as the course continues. For now, the important thing is to remember that this table exists. You will need to refer back to it many times.\par \par }\pard \s28\li720\ri4320\sb40\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \outlinelevel0\adjustright {Operator Precedence in BASIC\par }\pard \s28\li720\ri4320\sb40\keepn\widctlpar\adjustright {\f6\fs20 @\par +\tab -\tab NOT\par ^\par *\tab /\par +\tab -\par =\tab <\tab >\tab <=\tab >=}{\pard\plain \s28\li720\ri4320\sb40\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v comparisons}}}{\f6\fs20 \tab <>\par AND\par }\pard \s28\li720\ri4320\sb40\widctlpar\adjustright {\f6\fs20 OR\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\fs20 \par }{If you look closely at the table, you\rquote ll see one peculiarity. The + and - operators appear twice. That\rquote s because there are technically two different operations they can be used for. The - operator in a statement like\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {X = -X\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {is called a unary operator because it operates on one thing. }{\pard\plain \s28\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v unary operations}}}{\pard\plain \s28\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v negative numbers}}}{This is the top - operation. There is also a unary + operation, although it doesn\rquote t really do anything. }{\pard\plain \s28\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v addition}}}{\pard\plain \s28\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subtraction}}}{The second form of + and - is the kind you normally think of for addition and subtraction. It\rquote s the operation you are using in statements like\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {X = X + 1\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par This version of the operation is called a binary operator.}{\pard\plain \s28\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v binary operator}}}{\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v parenthesis}}}{In our original expression, if you really wanted to compute the value 9, you could have used parentheses. BASIC does all operations inside of parentheses as a group, and uses the result in the rest of the expression.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {(1 + 2) * 3\par 3 * 3\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {9\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244528}The Maximum Integer{\*\bkmkend _Toc444244528}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v integers}}}{Growing up with a last name like Westerfield, I quickly learned that computers have limits. It seemed like all of the people who programmed had names like Wirth, or Ritchie, or Steele. All of those silly forms that asked me to put each letter into a separate block had ten blocks. It upset me: my name isn\rquote t Westerfiel, it was Westerfield. The protests of a seven year old are seldom heeded, though.\par Computers have become a lot more friendly since then, perhaps in part due to the fellow protests of people like Joe Jabinoslowski. But they still have fixed limits on just about everything. The limit may be very large, but it is there. Integers are no exception. Every implementation of BASIC imposes some upper limit on integers\emdash some largest number that can be stored in an integer variable. On most microcomputer implementation of BASIC, this value is 32767. As with the upper limit, there is a lower limit, too. The lower limit is usually -32768.\par These two numbers probably seem like rather odd choices for the upper and lower limit for integer values, but there is a good reason for why these are the limits. It has to do with the way numbers are stored in a computer. We really don\rquote t need to delve into that at the moment, though. The important thing is that you know that there is a maximum and minimum.\par If you try to stuff a number bigger than 32767 or smaller than -32768 into an integer, different implementations of BASIC handle the problem in different ways. Most, like GSoft\~BASIC, stop the program with some sort of error message.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v integers\:long}{\txe {\i\v See}{\v  long integers}}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v long integers}}}{While integers that range from -32768 to 32767 are big enough for most uses, there are cases when you need a larger value. Many implementations of BASIC have a special kind of integer that can hold large and smaller numbers. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LONG type}}}{These longer integers are called long integers. You can create a long integer by appending & to the name of the variable, or by declaring the variable as a LONG in a DIM statement.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {REM Try out a long integer\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {DIM I AS LONG\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {I = 500\par I = I * I\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT I\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Long integers can hold numbers as small as -2147483648 and as large as 2147483647.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244529}Real Numbers{\*\bkmkend _Toc444244529}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v real numbers}}}{As everyone knows, programmers drive Porches. At least, many of the folks I meet seem to have that impression. I have never met a programmer that drove a Porche myself. Still, you may be aspiring to high goals, so let\rquote s see how long you will be paying off your dream car. We will assume that you want a new car, but not necessarily a fancy one. We\rquote ll spend $40,000 on our car. We\rquote ll assume that you know a banker real well, and can get your car loan at 7% APR, which works out to a monthly interest rate of about 0.58%. That would make the initial interest payment for the first month\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {40000 * 0.0058\par $232.00\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Let\rquote s assume you are generous and want to pay $500 a month. The program below finds out how many months you will be paying.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {REM Why I don't own a Porche\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {COST = 40000.0:! initial cost of car\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {APR = 7.0:! annual percentage rate\par PAYMENT = 500.0:! monthly payment\par \par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {DIM MONTH AS INTEGER :! number of months that have gone by\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM PRINCIPAL AS SINGLE :! amount left to pay\par \par ! no payments made, yet\par MONTH = 0\par \par ! we start owing this much\par PRINCIPAL = COST\par \par ! keep going until we're out of debt\par WHILE PRINCIPAL > 0.0\par \par   ! count the months as they go by\par   MONTH = MONTH + 1\par \par   ! add interest to what we owe\par   PRINCIPAL = PRINCIPAL + PRINCIPAL * APR / 100.0 / 12.0\par \par   ! make the payment\par   PRINCIPAL = PRINCIPAL - PAYMENT\par \par   ! print how we're doing\par   PRINT MONTH, PRINCIPAL\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {WEND\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The negative number after the last payment shows that you didn\rquote t quite have to pay $500.00 the last month to pay off the loan. The number of months this takes shows why I own a Toyota. An old one.\par This program builds on your previous knowledge, but it also introduces a wealth of new ideas. \par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v WHILE statement}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v WEND statement}}}{The first is a completely new way to loop over a group of statements. The WHILE loop executes all of the statements between the WHILE and the WEND that ends the loop for as long as some condition is true. In our while loop,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {WHILE PRINCIPAL > 0.0\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {the condition is that PRINCIPAL must be greater than zero. }{\pard\plain \s28\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v comparisons}}}{The > character is a comparison operator. It compares the number to the left of the operator to the number to the right of the operator. If the left-hand number is bigger than the right-hand number, the result is true. If the left-hand number is smaller than or equal to the right-hand number, the result is false. The loop continues to execute the statements as long as the condition is true. In our program, the program continues until the car is paid off, at which time the principal is less than zero or equal to zero.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {There are a total of six comparison operators. The table below lists the operators and what they test for.\par \par }\pard \s28\li720\ri3600\sb40\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2160\adjustright {operator\tab test for...}{\pard\plain \s28\li720\ri3600\sb40\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2160\adjustright \v\f4\cgrid {\xe {\v comparisons}}}{\par }\pard \s28\li720\ri3600\sb40\widctlpar\tx2160\adjustright {A < B\tab A less than B\par A > B\tab A greater than B\par A <= B\tab A less than or equal to B\par A >= B\tab A greater than or equal to B\par A = B\tab A equal to B\par A <> B\tab A not equal to B\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par FOR loops and while loops have much in common. Both are used to execute a group of statements more than one time. In the case of the FOR loop, though, we must know how many times the loop will be executed before we start. In the case of the while loop, we can loop until some condition is satisfied, without knowing in advance how many times through the loop it will take to satisfy the condition.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244530}PRINT USING for Dollar Amounts{\*\bkmkend _Toc444244530}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v PRINT USING statement}}}{One of the problems with real numbers is that they may be a little more exact than we want. In the Porche example, some of the dollar amounts show fractions of cents. What we\rquote d really like to see in most situations is the amount rounded to the nearest cent.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v format string}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v format model}}}{BASIC uses a variation on the PRINT statement to handle situations where we want more control over the way numbers are printed. It\rquote s called the PRINT USING statement because you print the amounts using a format string. The PRINT USING statement prints the format string, but as it does, it looks for special sequences of characters called format models. A format model tells BASIC how to print a value. A value that comes after the format string is printed for each format model.\par In our case, we might want to print something like\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {After 100 months, the amount owed is $3933.06.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright {You accomplish this with the statement\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT USING "After # months, the amount owed is $$###.##."; MONTH, PRINCIPAL\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are an enormous number of ways to create format models, but all of the format models used for numbers are based on a series of # characters. Each # character reserves one character in the final output for the number. A decimal point appearing in the format specifier shows how to handle fractional digits. In our example, the two # characters appearing to the right of the decimal place tell BASIC to print exactly two digits to the right of the decimal point. The value is rounded to two digits if there are more than two digits available.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v integers}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v real numbers}}}{Integers and real numbers behave a little differently if there isn\rquote t enough room to print the entire value. Our program shows how integer values work quite well. We only left one space for the number of months elapsed. When the value hits 10, and later 100, the program prints the entire value anyway.\par Real numbers are handled a bit differently. Instead of adding characters to handle a larger number, the # characters themselves are printed. This seems mighty strange. Why not just expand the number of characters for real numbers, too? Actually, the reason has to do with the possible size for real numbers as compared to integer numbers. Even a long integer is, at most, 10 characters, so printing the entire number doesn\rquote t cause any real problems. Real numbers can be considerably bigger, though. One kind of real number that you\rquote ll get acquainted with later could use over 300 characters to print a number! Expanding a field automatically to handle 300 characters when you expected just a few can be very annoying.\par If you allow more room than is needed the extra space is still used. Blank characters are inserted to fill in the space. You can see how this works if you change the Porche sample to use this new PRINT USING statement. If you don\rquote t want to type the entire program, run Porche2 from the samples disk.\par There are several special characters you can use in a format model, and our example makes use of one of them. BASIC programs need to print dollar amounts on a regular basis, so the $ character gets special handling. When you replace the first two # characters with $ characters the PRINT USING statement prints the $ character immediately to the left of the first number. Any extra spaces needed to fill out the format model appear to the left of the $ character.\par Like I said, there are an enormous number of variations on format models. We\rquote ll cover a few more as they come up in this course. For a complete run-down, see the reference manual that comes with GSoft\~BASIC.\par \par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {Problem 2.4: Modify the sample program to find out how big the payments need to be to pay off the car in four years.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Hint: Start with a payment of $900, then increase or decrease the payment to get to a solution. You are playing a guess-the-payment game. If you pay off the loan in less than 48 months, or if you need to pay a lot less than the payment on the 48th month, you need to decrease the payment size. If it takes longer than 48 months, make the payment larger. You should only go to the nearest cent. The amount will not work out exactly.\par \par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {Problem 2.5: Let\rquote s assume that you are working with the planning board of the local city government. You live in a pleasant city, but due to the local geography, the city can\rquote t expand indefinitely. You don\rquote t want the city to become too crowded, either. The current population size is 30,000 people. Everyone seems to agree that if the city gets any bigger than 50,000 people, it will be overcrowded.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {One councilman has proposed new legislation to prevent the city from growing at more than 10% per year. At this rate, how long will it be before the city hits the limit of 50,000 people? Use a program very much like the sample program, but with a growing population instead of a shrinking principal to find out. Do you feel this is acceptable?\par This is not an idle problem. While the numbers were different, this is exactly the situation faced several years ago by the city of Boulder, Colorado. The answer they found caused some changes in the thinking of the city planners, and affected the outcome of some zoning legislation.\par \par }\pard\plain \s31\widctlpar\adjustright \f4\cgrid {Problem 2.6: Inflation has been running at about 4% for the past few years. On average, then, something that costs $1.00 at the beginning of the year will cost $1.04 by the end of the year. Assuming a gallon of gas costs $1.00 today, what will it cost in ten years if inflation continues at 4%?\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {A few years ago inflation was running at about 12%. Try this inflation figure. Is this rate a problem?\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244531}Exponents{\*\bkmkend _Toc444244531}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v real numbers\:exponents}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v exponents}{\txe {\i\v See}{\v  real numbers}}}}{Integers were limited to a specific size. Real numbers have limits, too, but the limits are of a slightly different nature. This is because real numbers use exponents to represent very large and very small numbers.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v scientific notation}{\txe {\i\v See}{\v  real numbers}}}}{Exponents are the computers way of dealing with something called scientific notation. An exponent is a power of ten that follows the real number. For example,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {2.5E2\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {means 2.5 times 10 raised to the power of 2. You can also think of the power as the number of zeros to add to the 1. Ten to the power two is 100, for example. One-hundred times 2.5 is 250, so 2.5E2 is 250.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Exponents can also be zero. An exponent of zero means a 1 with no zeros, or just 1. Multiplying by one gives the original number, so 2.5E0 is just 2.5.\par Finally, exponents can be negative. A negative exponent means to divide by ten to the indicated power, so 2.5E-3 means to divide 2.5 by 1000, giving 0.0025.\par A quick way to work with exponents is to move the decimal point to the right for positive exponents, or to the left for negative exponents.\par Real numbers can get quite large and quite small, but there is a limit to the size. In GSoft\~BASIC real numbers can have exponents in the range 1E-38 to 1E38. There is also a limit to the number of digits that can be handled. It\rquote s a lot like a calculator with a ten-digit display. If you need numbers with more than ten digits of accuracy, you have to get a different calculator. GSoft\~BASIC real numbers have seven digits of accuracy.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v double-precision real numbers}}}{Like many implementations of BASIC, GSoft\~BASIC also supports another type called DOUBLE.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v DOUBLE type}}}{ Double values are handled just like real values, but they can have bigger exponents and are more accurate. In GSoft\~BASIC double values can have exponents that range from 1E-308 to 1E308, and can display seventeen digits accurately.\par The following example shows how to use real numbers to represent very large numbers.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {REM There are about 6 billion people in the world. Assuming\par REM a growth rate of 1.8% per year, how many people will there\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM be in 100 years?\par \par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {DIM PEOPLE AS SINGLE :! number of people\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM YEAR AS INTEGER :! current year\par \par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {PEOPLE = 6E9\par FOR YEAR = 1 TO 10\par   PEOPLE = PEOPLE * 1.018\par NEXT\par PRINT "At 1.8% growth, there will be ";PEOPLE;" people in 10 years."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\fi360\sb40\widctlpar\outlinelevel0\adjustright {These numbers are about right for 1998. Pretty scary, isn\rquote t it?\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Problem 2.7: Some germs can reproduce every twenty minutes. They reproduce by fission, where one germ splits in half to make two new germs. Assuming nothing stopped their growth, how many germs would there be after one day, starting with a single germ?\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244532}Why So Many Kinds of Numbers?{\*\bkmkend _Toc444244532}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v integers}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v real numbers}}}{So far you\rquote ve seen three kinds of numbers, and double-precision floating-point numbers have been mentioned but not used. There\rquote s even a fifth kind, called a byte.\par It\rquote s fair to ask why there are so many kinds, and, more important, when each kind should be used.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v long integers}}}{There are three competing issues that force us to use so many kinds of numbers. The first is space. An integer uses two bytes of storage; a long integer and single-precision floating-point number both use four bytes of storage, and a double-precision floating-point number use eight bytes of storage. A byte is a unit of storage that, on most computers, is made up of eight on or off switches whose values are represented by a 0 or 1; each of these is called a bit. The important point for us BASIC programmers, though, is that we can store two integers in the same space it takes to store one long integer or single-precision floating-point value, and of course a double-precision floating-point value takes up four times the space of one integer. Size becomes important when your programs use large databases that are made up of thousands or millions of numbers. Size is also important when you\rquote re waiting for a program to scan large disk files, or when you\rquote re trying to cram a large file onto a disk or send it over a network.\par The second issue is speed. Multiplying two long integer values generally takes about four times as long as multiplying two integer values; the same is true when you compare double-precision values to single-precision values. And a math operation on single-precision floating-point values takes longer than the same operation on long integers, even though they are the same size. In many programs, speed isn\rquote t that big of an issue\emdash but in some it is, and when speed is important, it\rquote s important to use the fastest operations available. Like size, speed concerns dictate that we use integers where possible, selecting long integers next. From a size standpoint, long integers and single-precision floating-point values come up as a draw, but from a speed standpoint we choose long integers. And of course, double-precision floating-point values are the slowest and take the most room, so we want to avoid them whenever possible.\par But it isn\rquote t always practical to use integers. After all, when you\rquote re calculating population growth, car payments, or the area of a circle, you need to use values that might not be an integer. Many scientific and statistical calculations simply need more precision\emdash or a greater range of exponent\emdash than single-precision floating-point values can deliver. There are even a few odd-ball algorithms in the field of numerical analysis that work best when you use two different sizes of floating-point numbers at various points in the calculations.\par So, in a nutshell, the reason there are so many kinds of numbers is that you, as the programmer, are balancing contradictory goals. You need to write programs that are fast and use as little space as possible, but you also need to use numbers that give you an accuracy and range of values that will handle the situation.\par To sum up the rules, pick numbers this way:\par \par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 1.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls21\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls21\adjustright {If you can, use integer variables. They are the smallest, and calculations with integer values are always the fastest.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 2.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls21\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls21\adjustright {If you will be dealing with values that are too large or to small for an integer variable, switch to long integers.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 3.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls21\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls21\adjustright {If you need values that are not whole numbers, or if the values are too large or to small for a long integer, use single-precision floating-point numbers.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 4.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls21\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls21\adjustright {If you need more digits of precision or a larger range of exponents than single-precision floating-point can deliver, switch to double-precision floating-point.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par There are specialized tools for dealing with situations where even double-precision floating-point numbers can\rquote t cut it. We won\rquote t deal with them in this course, but if you want to branch out, look for articles dealing with so-called infinite precision math packages.\par \sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244533}Lesson Three \endash  Input, Loops and Conditions{\*\bkmkend _Toc444244533}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244534}Input{\*\bkmkend _Toc444244534}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {So far, all of your programs have only done one thing. No matter how many times you ran the program, unless you changed the program itself, it always did the same thing. The reason, of course, is that the programs could never ask you for any information. It\rquote s time to start controlling our programs a bit more through the use of input.\par Your first program was a pretty simple one; it used the PRINT statement to write a string to the screen. You have already learned to write integers and real numbers using PRINT. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v INPUT statement}}}{BASIC uses the INPUT statement in much the same way to read numbers and strings.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v graphics}}}{Actually, you\rquote ve already used the INPUT statement in a limited way. When a graphics program finishes, the display switches back to the text screen, which doesn\rquote t give you a chance to look at the completed drawing. We\rquote ve been using the statement\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {INPUT ""; A$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {to force the program to wait for you to press the return key, giving you a chance to examine the graphics screen before the program finishes.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {You can experiment with the INPUT statement to quickly get an idea how it works. From the GSoft BASIC command line, type\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {INPUT A\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {and press the return key. A question mark shows up on the screen, telling you that BASIC is waiting for some kind of input. Type a number and press return, then try the command\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {PRINT A\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {As you can see, the number you typed is entered into the program.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {For a short, quick program, this is perfect. Here\rquote s a simple command that places a prompt on the screen so you know it\rquote s ready for you to type, lets you enter a number, and stores the result in a variable. It works with integers, long integers, and both single-precision and double-precision floating-point numbers. It even works with strings, something you probably guessed from the INPUT statement we used to pause at the end of graphics programs.\par There are a lot of situations where this simple approach is appropriate, but as your programs get longer, this simplicity doesn\rquote t always work. The first situation that pops up is using something other than a question mark as a prompt. If you wrote the program, will use it a few times, and throw it away, the question mark is fine, but if other people will use your program or if you\rquote ll use it later, it\rquote s a good idea to enter something more informative. INPUT allows you to change the prompt by following the command name with a string and a semicolon. The string is used as the prompt. If you use an empty string, like we did in the graphics programs, no prompt is printed at all.\par Try this program to see how prompts work.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {INPUT "Please type your name: "; NAME$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT "Hello, "; NAME$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There is one last feature of the INPUT statement that is pretty handy for short programs, but tends to get in the way in longer ones. You can read several values with a single INPUT statement, and the person using the program can reply with more than one value on the same line. In each case, the variables or values are separated by commas.\par Here\rquote s a program that reads two pairs of numbers, draws a line between the points, and waits for a final press of the return key before quitting. It puts all of these ideas to use.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {INPUT "First coordinate (enter x, y): ";X1, Y1\par INPUT "Second coordinate (enter x, y): ";X2, Y2\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {HGR\par MOVETO (X1, Y1)\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\outlinelevel0\adjustright {LINETO (X2, Y2)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {INPUT "";A$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par One of the peculiar things about the INPUT statement is that you don\rquote t have to enter the values exactly when the program expects them. Normally, you\rquote d expect to see something like this as you type your responses:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {First coordinate (enter x, y): 1,1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {Second coordinate (enter x, y): 100,100\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {That certainly works. But now try entering all of the numbers on the same line, like this:\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {First coordinate (enter x, y): 1,1, 100,100\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {Second coordinate (enter x, y): \par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {Strangely enough, that works, too. If you add a fifth value, the last INPUT statement picks it up, so your program doesn\rquote t pause at all!\par }\pard \s28\fi360\sb40\widctlpar\adjustright {You can also do just the opposite. If you enter a number, then press the return key, the program accepts the first value, then waits for another\emdash but without showing a prompt.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244535}Our First Game... er, Computer Aided Simulation{\*\bkmkend _Toc444244535}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Well, let\rquote s have some fun. Now that we can hold a simple conversation with the computer we can write our first simple computer game.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Guess a number\par REM\par REM This game randomly selects a number from 1 to 100, then\par REM lets a player guess the number.\par \par DIM VALUE AS INTEGER :! The value the player will guess.\par DIM I AS INTEGER :! The player's guess.\par \par ! Introduce the game\par PRINT "In this game, you will try to guess a number from 1"\par PRINT "to 100.  I will tell you if your guess is too high"\par PRINT "or too low."\par PRINT\par \par ! Pick a number from 1 to 100.\par VALUE = 1 + RND (1) * 100\par \par ! Guard against overflows to 101.\par IF VALUE = 101 THEN\par   VALUE = 100\par END IF\par \par ! Let the player guess the number.\par DO\par \par   ! Get the player's guess.\par   INPUT "Your guess: ";I\par \par   ! If the number is too high, say so.\par   IF I > VALUE THEN\par     PRINT I;" is to high."\par   END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! If the number is too low, say so.\par   IF I < VALUE THEN\par     PRINT I;" is to low."\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LOOP WHILE I <> VALUE\par \par ! If we get here, the number was correct.\par PRINT I;" is correct!"\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are a lot of new concepts in this program, and we will spend a lot of time examining it in detail, but first type it in and run it.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart do_loop}{\*\bkmkstart _Toc444244536}The DO-LOOP{\*\bkmkend _Toc444244536}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {One of the new things in our program is a pair of new statements called the DO-LOOP statements. This is the third looping statement you have learned in BASIC. The first two, of course, are the FOR loop and the WHILE loop. The DO-LOOP statements are also the last looping statement in BASIC! You\rquote re getting there...\par Like the WHILE loop, the DO-LOOP statements loop until some condition is satisfied. Unlike the WHILE loop, the condition appears at the end of the loop. (There are some exceptions; we\rquote ll discuss those a bit later.) This means that the statements in the DO-LOOP statements are always executed at least one time, while the statements in the WHILE loop can be skipped altogether. This is an important difference, and the key to why there are two loops instead of just one. To understand this difference, let\rquote s look at WHILE loops and DO-LOOP statements from some of our programs and compare the two.\par In the last lesson, we wrote a program that showed how many payments were needed to buy a car. It contains this loop:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! keep going until we're out of debt\par WHILE PRINCIPAL > 0.0\par \par   ! count the months as they go by\par   MONTH = MONTH + 1\par \par   ! add interest to what we owe\par   PRINCIPAL = PRINCIPAL + PRINCIPAL * APR / 100.0 / 12.0\par \par   ! make the payment\par   PRINCIPAL = PRINCIPAL - PAYMENT\par \par   ! print how we're doing\par   PRINT MONTH, PRINCIPAL\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {WEND\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par In this case, we needed to loop until the amount we needed to pay off was zero. It would be possible, although in this case not very likely, for the principal to be zero before the loop was ever executed. This is the key test for a WHILE loop: you must ask yourself if it is possible for the condition that stops the loop to be true before you start. In other words, you want to know if it is possible that you may not want to execute the statements in the loop at all. If that is the case, a WHILE loop should be used.\par The DO-LOOP statements look very similar. The only real difference is that the condition is evaluated at the end of the loop, not the beginning.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! Let the player guess the number.\par DO\par \par   ! Get the player's guess.\par   INPUT "Your guess: ";I\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! If the number is too high, say so.\par   IF I > VALUE THEN\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    PRINT I;" is to high."\par   END IF\par \par   ! If the number is too low, say so.\par   IF I < VALUE THEN\par     PRINT I;" is to low."\par   END IF\par LOOP WHILE I <> VALUE\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The DO-LOOP statements are generally used in cases where the condition doesn\rquote t make sense until after the statements in the body of the loop have been executed at least one time. For example, it would seem to make sense to use a WHILE loop that looks like this to do the same job:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! Let the player guess the number.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {WHILE I <> VALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par   ! Get the player's guess.\par   INPUT "Your guess: ";I\par \par   ! If the number is too high, say so.\par   IF I > VALUE THEN\par     PRINT I;" is to high."\par   END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! If the number is too low, say so.\par   IF I < VALUE THEN\par     PRINT I;" is to low."\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {WEND \par \par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {There is a flaw in this code, though. The value of I has not been set when the condition is tested the first time. In this particular case, you might feel safe. After all, you might know that the value of a BASIC variable is always initialized to zero, and zero isn\rquote t one of the possible values for VALUE. Depending on this sort of information is a really bad idea, though. First, you may end up moving this program to another implementation of BASIC someday, and that implementation may not initialize values to zero. Most versions of BASIC follow this rule, but there is no BASIC standard that forces everyone to initialize the value of variables. More important, you may pluck this loop out of the original program and insert it into a new one, or add new features to the existing program so that I does have a value other than zero when the loop starts. This sort of change happens more often that you\rquote d think. And when it does, you\rquote re left scratching your head, wondering why a part of the program that used to work suddenly starts to fail.\par  There is a way to rescue the WHILE loop, though. You can start off by initializing I to a number different from value, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! Let the player guess the number.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {I = VALUE - 1\par WHILE I <> VALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par   ! Get the player's guess.\par   INPUT "Your guess: ";I\par \par   ! If the number is too high, say so.\par   IF I > VALUE THEN\par     PRINT I;" is to high."\par   END IF\par \par   ! If the number is too low, say so.\par   IF I < VALUE THEN\par     PRINT I;" is to low."\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {WEND \par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This will work; the test will always fail the first time, so the person guessing the number always gets at least one chance to guess the number. It\rquote s perfectly safe, too: It won\rquote t fail if you change the program later and set I to some value, or if you run the program on a version of BASIC that doesn\rquote t initialize variables to 0. On the other hand, the DO-LOOP statements work, to, but they don\rquote t require that you set the initial value before you start into the loop.\par The acid test for when to use the DO-LOOP statements, then, is whether or not the test that ends the loop makes sense before the statements in the loop have been executed one time. In our example program, the test uses the value of I, which is read in inside the loop. The test doesn\rquote t make sense until the number has been read at least one time, so we use the DO-LOOP statements.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244537}The Flexible DO-LOOP Statement{\*\bkmkend _Toc444244537}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The DO-LOOP statements are actually more flexible than I\rquote ve let on. You can actually put the condition at the top or bottom of the loop. As an example, here\rquote s our WHILE loop that calculated car payments, reworked to use DO-LOOP statements.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! keep going until we're out of debt\par DO WHILE PRINCIPAL > 0.0\par \par   ! count the months as they go by\par   MONTH = MONTH + 1\par \par   ! add interest to what we owe\par   PRINCIPAL = PRINCIPAL + PRINCIPAL * APR / 100.0 / 12.0\par \par   ! make the payment\par   PRINCIPAL = PRINCIPAL - PAYMENT\par \par   ! print how we're doing\par   PRINT MONTH, PRINCIPAL\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright {LOOP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You can also put a condition at both the top and bottom of the loop, or, for that matter, not use any condition at all. If there is no condition at all the loop continues until something else forces the program to stop.\par If the condition appears at the top of the loop the DO-LOOP statement doesn\rquote t really offer anything that the WHILE loop can\rquote t handle, so we won\rquote t use it that way. Situations where it makes sense to use a condition at both the top and bottom of the loop, or no condition at all, just don\rquote t come up that often. In this course, we\rquote ll only use the DO-LOOP statements with a test at the end of the loop.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v WHILE statement}}}{Of course, it\rquote s fair to ask the opposite question. If the DO-LOOP statements can do everything the WHILE-WEND statements can do, why use WHILE-WEND? For that matter, why is it even in BASIC?\par I\rquote ll speculate a bit here. Neither DO-LOOP statements nor WHILE loops were in the original version of BASIC. They weren\rquote t common in BASIC until the structured programming craze hit in the mid 1980\rquote s. While I don\rquote t know this for a fact, it appears to me that WHILE-WEND loops were introduced by one set of people, and the DO-LOOP statements by another. Eventually, both statements started appearing in BASIC so all of the old programs would run.\par The truth is that you don\rquote t need WHILE-WEND loops. I think it makes the program easier to follow if you always use WHILE loops when the condition is tested at the top, and always use DO-LOOP statements when the condition is tested at the bottom, so that\rquote s what you\rquote ll see me doing in the example programs. That doesn\rquote t mean you have to do the same thing. Both ways work; just pick one and stick with it.{\*\bkmkend do_loop}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v DO-LOOP statement}{\rxe do_loop}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe LOOP statement{\txe {\i\v See}{\v  DO-LOOP statement}}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart random}{\*\bkmkstart _Toc444244538}Random Numbers{\*\bkmkend _Toc444244538}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {One of the new concepts used in our sample program is the random number. You have probably heard that computers are very precise, and that is certainly true. In our number guessing game, though, the last thing we want is for the computer to be precise. This game just won\rquote t be much fun if we know beforehand what number the computer will pick. The program uses something called a random number generator to get around this problem.\par A random number generator is basically a way for the computer to generate a number, or series of numbers, that seem to be random. Since the computer can only do very specific things, the numbers aren\rquote t really random, but they are very hard to predict, and that is good enough for a lot of programs. Since the numbers really aren\rquote t random, they are technically called pseudo-random numbers. That\rquote s a real mouthful, though, so we will continue to call them random numbers.\par We\rquote ll write a simpler program to learn more about random numbers.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM A closer look at pseudo-random numbers \par \par FOR I = 1 TO 10\par   PRINT RND (1)\par NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {Type this program in and run it. It will print ten pseudo-random numbers. Run it several times, and you\rquote ll notice that the numbers are different each time.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {One thing that stands out is that all of the numbers are between 0 and 1. Technically, it\rquote s possible for the random number generator to return 0, too, but it\rquote s very unlikely. It\rquote s not possible for RND to return the value 1. That explains why our program can use the lines\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {! Pick a number from 1 to 100.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {VALUE = 1 + RND (1) * 100\par \par ! Guard against overflows to 101.\par IF VALUE = 101 THEN\par   VALUE = 100\par END IF\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par to pick a value from 1 to 100. If RND returns zero, adding 1 gives a value of 1. If it returns 0.9999999, multiplying by 100 and adding 1 gives 100.99999. Unfortunately, this can cause a number overflow\emdash the number can\rquote t be stored exactly, so the computer rounds up, giving a value of 101. That\rquote s why the IF statement is used to check for the overflow situation, pushing the value back to 100 if the overflow occurs.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Now make a slight change to the program by adding a new line just before the FOR loop, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM A closer look at pseudo-random numbers \par \par I = RND ( - 1)\par FOR I = 1 TO 10\par   PRINT RND (1)\par NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {When you run this program, you still get a sequence of ten random numbers. Now run the program a second time and compare the numbers. As you can see, they are the same.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {This gives you a solid clue about how random numbers are generated. The fact that you get the same numbers each time you run this program shows that the numbers aren\rquote t really random at all. In fact, each random number is generated by starting with the last number. A complex series of mathematical operations is performed to generate a new number that has no readily apparent relation to the previous number.\par In our modified program the first call to RND used a parameter of -1, which told RND to start a new sequence of random numbers using -1 as the starting value. This is called seeding the random number generator; the number is called the seed. All of the random numbers grow from this seed. If you use -2 for this first call you still get a series of random numbers, and they are still the same every time the program runs, but the numbers will be different than the numbers you got using -1 as a seed. In fact, every negative number will perform this same way, generating a consistent series of random numbers, but each negative number generates a series that is different from every other negative number.\par We used 1 for the argument to the RND function in the main loop of the program. All positive numbers perform in exactly the same way. They tell RND to generate a random number. It doesn\rquote t matter which positive number you use; the mere fact that it is greater than zero tells RND that you want a random number.\par There is one last parameter you can use for RND. In a few odd situations, you may want to use the same random number twice. You could do this by saving the random number in a variable and using the value from the variable, but you can accomplish the same thing using 0 for the parameter to RND. When the parameter is 0, RND returns the same value it returned the last time it was called.\par It might seem strange to create a predictable series of numbers, but this is very handy when you are testing a program. You can remove the line that seeds the random number generator once the program is finished.\par By now, you may realize that the random number generator needs some sort of seed to get the random number sequence started. So how does the first program create a unique series of numbers each time it runs? In GSoft BASIC, if you call RND with a positive argument the first time it is called in a program, the random number generator is automatically seeded from the computer\rquote s clock. This frees you from the hassle of finding that first random number to start the sequence. Keep in mind that this service isn\rquote t universal in BASIC. You may have to come up with a seed some other way if you use another version of BASIC.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244539}Why Random Numbers Are Important{\*\bkmkend _Toc444244539}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {We will use random numbers in many of our example programs. Random numbers help us to write programs that don\rquote t do exactly the same thing each time we use them; that\rquote s something we will need over and over again. Here are some places where random numbers are commonly used:\par \par }\pard \s28\fi-360\li720\sb40\widctlpar\adjustright {1.\tab Random numbers are used in games like Chess. Games work by scoring moves; the move with the best score is the one the computer makes. If two moves have the same score, random numbers can be used to choose between them so the computer doesn\rquote t play exactly the same way each time. In a game like chess or checkers, there are also many good ways to make the first few moves; these are called opening books. Random number generators are used to pick an opening from the opening book.\par \par 2.\tab Many dungeon and dragon style computer games work based on probabilities. For example, a character with a particular set of characteristics might have a probability of 0.4 of killing a giant ant with a broadsword. The ant, conversely, might have a 0.2 chance of damaging the player. A random number generator can be used to generate a number between 1 and 100, as our number-guessing game did. The player kills the ant if the number is less than 40. Next, another number is chosen, and the ant hurts the player if the number is less than 21.\par \par 3.\tab Computers are often used to do serious simulations. Computer simulations are used to study traffic patterns, wars, and the spread of diseases. As an example, let\rquote s assume that you are trying to protect Yellow Stone National Park from forest fires. You could choose to \ldblquote let it burn,\rdblquote  letting nature take its course. You could choose to fight all fires aggressively, but that would lead to a gradual build-up of weeds and wood to burn. You might choose to cut fire lanes through the forest. All of these possibilities can be examined using computer simulations.\par \par 4.\tab Random number generators are used in card games to shuffle cards. The random number generator is used to pick which card will be taken from the deck next, taking one card from the remaining cards that have not been dealt.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Problem 3.1. Write a program to throw two six-sided dice twenty times. Use the same ideas used in the number-guessing game. Write the number of spots showing on each of the dice to the screen. Each line should show the value for both dice, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {1\tab 4\par 5\tab 2\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {5\tab 6\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Write your program so the number of dice and the number of sides are stored in variables, and used throughout the program. This makes the program easy to modify if, for example, you need to roll one 20 sided die instead of two 6 sided dice.\par This makes the PRINT statements a little tricky. You can use a print statement like\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT X, ;\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {to print a value, skip to the next column, and }{\i not}{ print a carriage return at the end of the line. This allows you to print two numbers on the same line at different places in the program.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v graphics\:drawing a dot}}}{Problem 3.2. You can draw a dot in the graphics window by doing first a MOVETO, then a LINETO the same spot. For example,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {MOVETO (10, 10)\par LINETO (10, 10)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {draws a dot a 10,10.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Write a program that gradually blackens the rectangle with a left edge of 10, a top of 10, a right edge of 100, and a bottom of 70. Do this using a FOR loop that loops from 1 to MAX, where MAX is set at the top of your program to a value of 5551.\par Pick two random numbers inside the FOR loop. The first should be in the range 10 to 100; assign this value to an integer variable called x. The second should be in the range 10 to 70; assign this one to the variable y. Draw a dot at this point using a MOVETO-LINETO sequence.\par The result is a program that gradually fills the area with white snow.\par There are 5551 dots in the area you are filling, but when the program finishes, not all dots are white. Why?\par \par Problem 3.3. Change the program from problem 3.2 to create multicolored snow by picking the color of the dot randomly. The color should be in the range 0 to 15.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v random numbers}{\rxe random}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart if}{\*\bkmkstart _Toc444244540}{\*\bkmkend random}The IF Statement{\*\bkmkend _Toc444244540}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ELSE statement}{\txe {\i\v See}{\v  IF statement}}}}{Computer programs can make decisions. You have already written some programs that use this capability in the form of loops that keep going until some condition is satisfied. In some cases, though, we may only need to do something once, or we may not need to do it at all. That\rquote s where the IF statement comes in.\par The IF statement evaluates the same kind of condition that you have already used in the WHILE loop and DO-LOOP statements. The condition is followed by the reserved word THEN; this just tells BASIC that you are finished with the condition. Absolutely nothing, even a comment, can appear after the THEN. The IF statement starts a block of statements, just like WHILE-WEND and DO-LOOP. In the case of the IF statement, the block ends with END IF.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v END IF statement}{\txe {\i\v See}{\v  }{\v IF statement}{\v }}}}{If the condition in the IF statement is true, the block of statements between the IF and END-IF statements are executed. If not, the statements are skipped. In a way, the IF statement is like a DO-LOOP statement that doesn\rquote t loop.\par Let\rquote s try a simple example to see how all of this works. In this example, we will use the IF statement to write a program that can count change.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Count change.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par DIM CHANGE AS INTEGER :! The number of cents to count.\par DIM AMOUNT AS INTEGER :! The number of a particular coin.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Get the number of cents to count.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {INPUT "How many cents in the change? ";CHANGE\par \par ! Write a header.\par PRINT "Your change consists of:"\par \par ! Count out the dollars.\par IF CHANGE >= 100 THEN\par   AMOUNT = CHANGE / 100\par   PRINT AMOUNT;" dollars"\par   CHANGE = CHANGE - AMOUNT * 100\par END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Count out the quarters.\par IF CHANGE >= 25 THEN\par   AMOUNT = CHANGE / 25\par   PRINT AMOUNT;" quarters"\par   CHANGE = CHANGE - AMOUNT * 25\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par \par ! Count out the dimes.\par IF CHANGE >= 10 THEN\par   AMOUNT = CHANGE / 10\par   PRINT AMOUNT;" dimes"\par   CHANGE = CHANGE - AMOUNT * 10\par END IF\par \par ! Count out the nickels.\par IF CHANGE >= 5 THEN\par   AMOUNT = CHANGE / 5\par   PRINT AMOUNT;" nickels"\par   CHANGE = CHANGE - AMOUNT * 5\par END IF\par \par ! Count out the cents.\par IF CHANGE <> 0 THEN\par   PRINT CHANGE;" cents"\par END IF\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par In this program, each IF statement is used to see if the number of cents left is large enough to give the customer at least one coin of a given size. For example, the first IF statement checks to see how many dollars are in the change. In each block we need to do two things, count the number of coins to give in change and adjust the amount left to give.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v division}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v truncation}}}{The exact order of the calculations is actually quite important. The divide operation returns a single-precision floating-point value. For example, if CHANGE is 70 when the number of quarters is calculated, CHANGE / 25 is 2.8. When this value is stored in AMOUNT, which is an INTEGER, the digits to the right of the decimal point are dropped. It\rquote s important to realize that the number is not rounded to 3, which is the integer closest to 2.8, but truncated to 2. Storing the single-precision floating-point value in the INTEGER variable AMOUNT has done exactly what we wanted, converting the number to the whole number of coins.\par Once we know the number of coins, we can subtract the number of cents we\rquote ve just counted out by multiplying this whole number of coins by the number of cents in the coin. Following along with the same numbers, the line\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {CHANGE = CHANGE - AMOUNT * 25\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par multiplies the number of quarters, 2 in this case, by 25 to calculate the total amount we just counted out in quarters. This amount is subtracted from CHANGE to give the amount left to count, which is 20 cents.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244541}The ELSE Clause{\*\bkmkend _Toc444244541}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v IF statement\:ELSE clause}}}{There are many times when you need to do one thing or another, depending on some condition. In that case, you could use two different IF statements, one after the other, but you can also use an ELSE statement. As a simple example, let\rquote s say you are printing the number of tries it took to guess the number in our number guessing game. It\rquote s sort of tacky to print out "1 tries," or worse still, "2 try."  With an IF-THEN-ELSE statement, you can print something a bit prettier:\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\f6\fs20 IF TRIES = 1 THEN\par   PRINT "You guessed the number in 1 try!"\par ELSE\par    PRINT "It took ";TRIES;" tries to guess the number."\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\f6\fs20 END IF\par }{\par }\pard \s28\sb40\widctlpar\adjustright {If the condition evaluated by the IF statement is true, the lines between it and the ELSE statement are executed and the lines between the ELSE statement and END IF statement are skipped. If the condition is false, the lines between the IF statement and the ELSE statement are skipped, and the lines between the ELSE statement and END IF statement are executed. This is the model for any either-or kind of situation, where you want to do one thing or another, but not both.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Problem 3.4. Modify the program from Lesson 2 that showed payments for purchasing a car. Allow the user of the program to enter the cost of the car, the interest rate and the number of payments as real numbers. Use an IF statement to see if the payment is larger than the amount of interest that will accumulate in one month. If not, print an appropriate error message. If the payment is large enough, execute the program as it worked before.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v IF statement}{\rxe if}}}{\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart animation}{\*\bkmkstart _Toc444244542}{\*\bkmkend if}The World\rquote s Shortest Animation Course{\*\bkmkend _Toc444244542}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v graphics}{\txe {\i\v See also}{\v  animation}}}}{There\rquote s one last topic to deal with before we leave the IF statement. We\rquote re going to have some fun with it, though, by introducing the topic of computer animation. This section will give you the short version of a course in computer animation. Surprisingly, it covers all of the essential points. Everything beyond what you see in this section is art and technology, not concepts. Admittedly, there\rquote s a lot of art and technology out there concerning computer animation, but in the end all of the techniques end up using the same basic principles of moving objects on the screen.\par You\rquote re almost certainly familiar with the fact that movies, television, and computer animation all work by drawing a series of still pictures at a rapid rate. If the rate is fast enough, your brain interprets the series of still frames as motion. The rate that\rquote s used in movies is 24 frames per second; for television and most computer screens it\rquote s 30 frames a second.\par You can create a very simple animation by simply drawing and erasing a shape in successive positions as it moves across the screen. Here\rquote s a sample that moves a square across the graphics screen. It uses a new command, SETPENSIZE, to change the size of the dot from the 1 pixel by 1 pixel size you\rquote ve seen in all of your graphics programs so far to a larger 4 pixel square box.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Draw a ball sliding across the screen from 0, 0 to 180, 180\par \par DIM X AS INTEGER , Y AS INTEGER :! Coordinates for the ball\par DIM I AS INTEGER :! loop counter\par \par ! Set up for graphics\par HGR\par SETPENMODE (0)\par SETPENSIZE (4, 4)\par \par ! Initialize the ball position.\par X = 0\par Y = 0\par \par ! Animate the ball.\par FOR I = 1 TO 180\par \par   ! Erase the old ball.\par   SETSOLIDPENPAT (0)\par   MOVETO (X, Y)\par   LINETO (X, Y)\par \par   ! Compute the new ball position.\par   X = X + 1\par   Y = Y + 1\par \par   ! Draw the ball at the new position.\par   SETSOLIDPENPAT (15)\par   MOVETO (X, Y)\par   LINETO (X, Y)\par NEXT\par INPUT "";A$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par When you try this program you\rquote ll see a lot of problems. The box it erased about as often as it\rquote s drawn, which gives a lot of flicker. The box might even seem to vanish for a moment if the timing is just right on your computer. That\rquote s because you have two conflicting actions taking place. At any given time, the video circuitry in your computer is busy drawing some portion of the screen. At the same time your program is busy drawing and erasing the image. If those two activities aren\rquote t timed perfectly you can end up erasing the image just before the video circuitry draws that part of the screen, then redrawing it just after it finishes.\par There is a simple trick that minimized this problem and, at the same time, lets you draw complex images on a background. It uses a new drawing mode called exclusive OR. Instead of painting a pixel of a particular color on the screen like all of our other programs, this mode actually reverses the color of the pixel. If you are drawing a white square on a black background the effect is identical to what you\rquote ve already done, but the cool part shows up when you draw the same shape in the same place. Since it\rquote s reversing the pixels, not painting them, reversing them a second time erases the object! That, combined with a simple trick of drawing the shape in the new position before erasing it in the old position, improves the image dramatically.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v drawing\:exclusive OR mode}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v exclusive OR drawing mode}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v drawing\:COPY mode}}}{The SETPENMODE command with a parameter of 2 lets you draw in exclusive OR mode; the value of 0 that we\rquote ve used in all of our programs so far is called copy. Here\rquote s a variation on our animation program that puts these ideas to work.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Draw a ball sliding across the screen from 0, 0 to 180, 180\par \par DIM X AS INTEGER , Y AS INTEGER :! Coordinates for the ball\par DIM I AS INTEGER :! loop counters\par \par ! Set up for graphics\par HGR\par SETPENMODE (2)\par SETPENSIZE (4, 4)\par SETSOLIDPENPAT (15)\par \par ! Initialize the ball position.\par X = 0\par Y = 0\par \par ! Draw the ball in the starting position.\par MOVETO (X, Y)\par LINETO (X, Y)\par \par ! Animate the ball.\par FOR I = 1 TO 180\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! Draw the ball at the new position.\par   MOVETO (X + 1, Y + 1)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  LINETO (X + 1, Y + 1)\par \par   ! Erase the old ball.\par   MOVETO (X, Y)\par   LINETO (X, Y)\par \par   ! Update the ball position.\par   X = X + 1\par   Y = Y + 1\par NEXT\par INPUT "";A$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There\rquote s still a little flicker. Two things will reduce it further.\par First, as your program gets larger and more complicated, it will spend more time calculating various things like relative positions of objects and whether an object has hit another. As long as you do all of this calculation while the object is visible, you increase the chance that the object will be visible when the video hardware draws the portion of the screen it is on.\par This still leaves a little flicker, but for many applications it is good enough. The last finesse is more complicated. The very best animation on the Apple\~II}{\fs20 GS}{ takes the vertical blanking signal into account. This is a notice from the computer that the screen is about to be drawn. As the video hardware draws the screen, the animation software follows along behind, drawing objects in an area where the video hardware isn\rquote t busy drawing the screen. While the idea is simple, implementing it is extremely complicated. It is almost always done in very carefully written assembly language programs.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v animation}{\rxe animation}}}{\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244543}{\*\bkmkend animation}Nesting If Statements{\*\bkmkend _Toc444244543}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v IF statement\:ELSE IF clause}}}{There are some situations where it makes sense to check for more than just one possibility. For example, let\rquote s assume that you want to print out a message like \ldblquote that was your 3rd try.\rdblquote   You can print the number of tries, followed by \ldblquote rd,\rdblquote  but that only works for some numbers. You would want to print\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {1st\par 2nd\par 3rd\par 4th\par 5th\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {and so on. One way to go about it is to print \ldblquote that was your,\rdblquote  followed by a series of IF statements, followed by printing \ldblquote try.\rdblquote   The IF statements can be used to decide the suffix for the number of tries. Rather than using a series of separate IF statements, though, you can actually attach another condition right after an ELSE and keep going, as this example shows.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {PRINT "That was your ";\par IF TRY = 1 THEN\par   PRINT "1st";\par ELSE IF TRY = 2 THEN\par   PRINT "2nd";\par ELSE IF TRY = 3 THEN\par   PRINT "3rd";\par ELSE\par   PRINT TRY;"th";\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT " try!"\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The first part works just like all of the other IF statements you\rquote ve seen. If TRY is 1, the condition on the IF statement is true. In that case, the program prints \ldblquote 1st\rdblquote  and skips all of the other possibilities. If TRY is not 1, the next condition is checked. This process continues, checking one condition after another, until one of the ELSE IF conditions is true. As soon as a matching condition is found, the program executes the statement right after that ELSE IF clause and skips the remaining code. If none of the conditions are true, the program executes the lines between the ELSE and END IF statements.\par The ELSE clause is optional. If you leave it out, and none of the conditions in the IF or any of the ELSE IF statements are true, all of the other statements are skipped. The ELSE statement should come at the end of the sequence, though, so all of the ELSE IF tests are evaluated.\par \par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v animation}}}{Problem 3.5. In this problem, you will write a bouncing ball program. You will move a small spot across the graphics screen. When the spot gets to the edge of the screen, it will bounce off.\par Start with the animation program from the last section. Before the animation starts, ask the user for a starting x, a staring y, the number of iterations (put this in a variable called ITER), and an x speed and y speed (put these in XSPEED and YSPEED). Check to see if the x and y values are in the graphics window using IF statements. If not, adjust them to be in the window. (The graphics window runs from 0 to 319 horizontally, and 0 to 199 vertically.)  Loop over your code to move the ball ITER times.\par On each loop, you will need to do the following:\par \par }\pard \s28\fi-360\li720\sb40\widctlpar\adjustright {1. Add the XSPEED to X. This moves the ball over.\par 2. If X is off the screen to the left (less that zero), set it to zero and set XSPEED to -XSPEED.\par 3. If X is off the screen to the right (greater that 319), set it to 319 and set XSPEED to -XSPEED.\par 4. Add the YSPEED to Y. This moves the ball up or down.\par 5. If Y is off the screen to the top (less that zero), set it to zero and set YSPEED to -YSPEED.\par 6. If Y is off the screen to the bottom (greater that 199), set it to 199 and set YSPEED to -YSPEED.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Be sure to do as much of the calculation as possible while the ball is visible, then quickly draw the ball in the new position and erase the old one.\par The practice of writing our the steps for a program in a kind of semi-English form is very useful for designing programs. The roughed-out version of the code is called pseudo-code. It won\rquote t run on any computer (at least, none that are available today!), but it helps when you are working on the logic of a program.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244544}A Bit of Iffy History{\*\bkmkend _Toc444244544}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v IF statement\:old forms}}}{Like the DO-LOOP statement and the WHILE loop, the sort of IF statement you\rquote ve learned in this lesson is new to BASIC. It\rquote s called a block structured IF statement, and was added to the language at about the same time as the structured loop statements.\par While we won\rquote t use it in this course, the older form of the IF statement is still a part of BASIC and you\rquote ll see it in a lot of books that contain BASIC programs, especially older books. Since you\rquote re sure to run across it, we\rquote ll take a look at the older form in this section.\par The original IF statement was designed as a conditional jump. At that time, every line of a BASIC program had to start with a line number. The line number had to be unique, and the lines were arranged in order by the line numbers. The main way to jump from one place to another was not through the use of structured statements like the loops you\rquote ve learned, but by using the GOTO statement. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GOTO statement}}}{The GOTO statement is followed by a line number; control jumps immediately to the specified line. For example, the program\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {10 I = 1\par 20 GOTO 40\par 30 I = I + 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {40 PRINT I\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {prints the value 1, not 2, because the GOTO statement jumps past line 30.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {The old form of the IF statement works pretty much the same way. You can put a line number right after THEN, and the program will jump to the specified line if the condition is true, skipping to the next line if the condition is false. There is no END IF with this form of the IF statement. Here\rquote s a very simple example.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {10 REM Print all Fibonacci numbers less than 20.\par 20 I = 0\par 30 J = 1\par 40 K = I + J\par 50 PRINT K\par 60 I = J\par 70 J = K\par 80 IF I + J < 20 THEN 40\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are several variations on this theme. Instead of just THEN, you can use THEN GOTO. You can also replace THEN with GOTO. Regardless of the variation you pick, the statement does the same thing.\par The old form of the IF statement is not limited to jumping, though. You can put any statement you like after THEN, and you can even put more than one statement, separated by colons. If the condition is true, all of these statements are executed. If the condition is not true, they are all skipped, and execution picks up with the line right after the IF statement.\par Modern implementations of BASIC need to be able to handle both the older forms of the IF statement and the modern block structured form we use in this course. That means they need a way to tell the old form, which is contained on a single line, from the new form, which spans multiple lines. The key is whether anything appears after THEN. If anything at all appears after THEN, GSoft\~BASIC assumes you are using the old form of the IF statement. If there is nothing at all after THEN, GSoft\~BASIC assumes the IF statement is the first line of a modern block structured statement. With that in mind, you can see why, earlier in the lesson, there was a warning not to put anything at all after THEN.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart boolean}{\*\bkmkstart _Toc444244545}Boolean Logic{\*\bkmkend _Toc444244545}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Most of the IF statements you\rquote re likely to use will have a fairly simple condition, like\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {IF TRY = 1 THEN\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {or\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {IF ANGLE < 2 * PI THEN\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v comparisons}}}{Eventually, though, you\rquote ll want to make more complicated comparisons. To do that you\rquote ll need three new operations designed for conditional tests and a good understanding of how BASIC actually deals with conditions. These operations are called Boolean operators.\par Let\rquote s start with a look at how BASIC actually handles conditions. Most of the time you don\rquote t really need to know this information, but it is critical if you print a Boolean condition to see whether it is TRUE or FALSE, and it\rquote s also occasionally useful for a programming trick.\par When you do a comparison like TRY = 2, BASIC actually returns a number. If TRY actually is 2, BASIC returns the value 1; if TRY is anything else, BASIC returns 0. The IF statement actually takes a number for the condition. If the number is 0, the IF statement acts as if the condition were FALSE. If the number is anything except 0, the IF statement acts as if the condition is TRUE.\par There\rquote s nothing magic about a comparison. Since BASIC handles comparisons and other Boolean operations using numbers, you can use a comparison anywhere you would use any other mathematical expression. The distinction is entirely in the way we think about Boolean operations, not anything internal to BASIC. Putting this to work, we can look at a Boolean value by printing it, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT 4 < 3\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v true}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v false}}}{It\rquote s also possible to store Boolean values in a numeric variable. In fact, the tool interfaces GSoft\~BASIC loads automatically include a type called BOOLEAN and two constants, TRUE and FALSE. You can use these constants and the BOOLEAN type in all of your GSoft\~BASIC programs.\par While comparisons are the most common Boolean operation, you\rquote ll encounter more complex expressions later in the course. The first of the Boolean operations is AND, which tests to see if two conditions are met instead of one. Here\rquote s an example that prints the values within a specific range.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 1 TO 10\par   IF (I > 3) AND (I < 8) THEN\par     PRINT I\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The AND operation is true if both of the conditions to either side are true, and false if either one of the conditions is false. In other words, it means the same thing in BASIC that it does in English when you use it as a condition. If you\rquote re not sure how AND works, type in this short program and watch it in action.\par The second operation is OR. Like AND, it means the same thing in BASIC as it does in an English statement about conditions. If either condition is true, OR returns true; if both conditions are false, OR returns false. Here\rquote s a sample you can use to explore how this works.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 1 TO 10\par   IF (I < 3) OR (I > 8) THEN\par     PRINT I\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The last Boolean operation is NOT. Just as you\rquote d expect, it reverses the meaning of a Boolean value. Here\rquote s a simple example you might use in the main part of a program that waits for the user to do something, then acts on whatever the user did. This is the way most desktop programs are organized, although you can organize any program that waits for user events this way.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {DONE = FALSE\par WHILE NOT DONE\par   CALL DOEVENT\par   CALL IDLEPROCESS\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND}{\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v Boolean logic}{\rxe boolean}}}{\par }\pard\plain \s1\qc\sa240\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkend boolean}\par }\pard\plain \nowidctlpar\adjustright \f4\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart subroutines}{\*\bkmkstart _Toc444244546}Lesson Four \endash  Subroutines{\*\bkmkend _Toc444244546}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244547}Subroutines Avoid Repetition{\*\bkmkend _Toc444244547}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {In the first few lessons of this course all of the programs we are writing are fairly short. Many useful programs are short, but as you start to make your programs more sophisticated, the programs will get longer and longer. A simple game on the Apple\~II}{\fs20 GS}{, for example, is generally 1,000 to 3,000 lines long; most of the programs we have written so far are 20 to 60 lines long. As the size of your programs increase you will need some new concepts and tools to write the programs. One of the most important of these is the subroutine.\par For our first look at subroutines, we will start with a program that draws three rectangles on the graphics screen, filling each with a different color.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Draw three colored rectangles with white outlines.\par \par DIM I AS INTEGER :! Loop variable\par \par ! Set up for graphics.\par HGR\par SETPENMODE (0)\par \par ! Draw a white rectangle.\par SETSOLIDPENPAT (15)\par FOR I = 10 TO 120\par   MOVETO (10, I)\par   LINETO (250, I)\par NEXT\par \par ! Draw a red rectangle.\par SETSOLIDPENPAT (7)\par FOR I = 61 TO 99\par   MOVETO (220, I)\par   LINETO (270, I)\par NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Outline the red rectangle in white.\par SETSOLIDPENPAT (15)\par MOVETO (220, 60)\par LINETO (220, 100)\par LINETO (270, 100)\par LINETO (270, 60)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LINETO (220, 60)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Draw a blue rectangle.\par SETSOLIDPENPAT (4)\par FOR I = 81 TO 159\par   MOVETO (50, I)\par   LINETO (300, I)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par ! Outline the blue rectangle in white.\par SETSOLIDPENPAT (15)\par MOVETO (50, 80)\par LINETO (50, 160)\par LINETO (300, 160)\par LINETO (300, 80)\par LINETO (50, 80)\par \par ! Wait for the user to press return.\par INPUT "";A$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par If you look at this program closely you will see that there is very little difference between the parts that draw the red and blue rectangles. In fact, if we put the coordinates of the rectangles in variables called LEFT, RIGHT, TOP and BOTTOM, and put the color in a variable called COLOR, we could use exactly the same lines of code to draw the red and blue rectangles. The code would look like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {! Draw a rectangle.\par SETSOLIDPENPAT (COLOR)\par FOR I = TOP + 1 TO BOTTOM - 1\par   MOVETO (LEFT, I)\par   LINETO (RIGHT, I)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Outline the rectangle in white.\par SETSOLIDPENPAT (15)\par MOVETO (LEFT, TOP)\par LINETO (LEFT, BOTTOM)\par LINETO (RIGHT, BOTTOM)\par LINETO (RIGHT, TOP)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LINETO (LEFT, TOP)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par While we don\rquote t really need to redraw the outline of the square for the white square, the same code could even be used to draw the white square. A few extra lines get executed when the outline is drawn (the outline is white, and so is the color that is filled in), but the same code could be used. One of the most common uses for a subroutine is just this situation. When your program needs to do essentially the same thing in several different places, you can write a subroutine to do the thing, and call it from more than one place. Let\rquote s try this in a program and then look at what is happening in detail.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Draw three colored rectangles with white outlines.\par \par ! Set up for graphics.\par HGR\par SETPENMODE (0)\par \par ! Draw white, red and blue rectangles.\par CALL RECTANGLE(10, 250, 10, 120, 15)\par CALL RECTANGLE(220, 270, 60, 100, 7)\par CALL RECTANGLE(50, 300, 80, 160, 4)\par \par ! Wait for the user to press return.\par INPUT "";A$\par END\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Rectangle - Draw a rectangle and outline it in white.\par !\par ! Parameters:\par !    left, right, top, bottom - edges of the rectangle\par !    color - color of the inside of the rectangle\par !\par !----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SUB RECTANGLE(LEFT AS INTEGER , RIGHT AS INTEGER , TOP AS INTEGER , BOTTOM AS INTEGER , COLOR AS INTEGER )\par \par DIM I AS INTEGER :! Loop variable\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Draw the rectangle.\par SETSOLIDPENPAT (COLOR)\par FOR I = TOP + 1 TO BOTTOM - 1\par   MOVETO (LEFT, I)\par   LINETO (RIGHT, I)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Outline the rectangle in white.\par SETSOLIDPENPAT (15)\par MOVETO (LEFT, TOP)\par LINETO (LEFT, BOTTOM)\par LINETO (RIGHT, BOTTOM)\par LINETO (RIGHT, TOP)\par LINETO (LEFT, TOP)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244548}The Structure of a Subroutine{\*\bkmkend _Toc444244548}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SUB statement}{\txe {\i\v See}{\v  subroutines}}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:}{\v SUB statement}{\v }}}{The subroutine itself starts with the reserved word SUB. Right after the reserved word SUB is the name of the subroutine; ours is called RECTANGLE. You use this name in the rest of your program whenever you want to call the subroutine. \ldblquote Calling\rdblquote  a subroutine is what programmers say when they mean that you want to execute the statements in the subroutine.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:parameter list}}}{The stuff in parenthesis right after the subroutine name is the parameter list. In our subroutine the parameter list looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {(LEFT AS INTEGER , RIGHT AS INTEGER , TOP AS INTEGER , BOTTOM AS INTEGER , COLOR AS INTEGER )\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par It is no accident that this looks suspiciously like a DIM statement. In fact, of you remove the parenthesis and put DIM before the list you would have a perfectly legal DIM statement. What the parameter list actually does is define these variables within the subroutine. Any statement within the subroutine can use these variables. You can change them using an assignment statement, or use them in an expression, as we do in our program. A very important point to keep in mind, though, is that the variables actually go away after you leave the subroutine.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v CALL statement}{\txe {\i\v See}{\v  subroutines}}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:}{\v CALL statement}{\v }}}{The SUB statement forms a sort of model that tells us how to call the subroutine, as you can see by comparing the SUB statement with a CALL statement from our sample program.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {SUB RECTANGLE(LEFT AS INTEGER , RIGHT AS INTEGER , TOP AS INTEGER , BOTTOM AS INTEGER , COLOR AS INTEGER )\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\f6\fs20 \par }\pard\plain \s29\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {CALL RECTANGLE(10,                 250,                 10,                \par        120,                15)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You see the SUB statement on the top line. The line is long enough that it\rquote s split across two lines in this book, but if you look at the program, you can see that it really is just one long line. The second line shows a call to the subroutine with spaces inserted to line up the matching fields. When a BASIC program starts to execute it is quickly scanned for SUB and FUNCTION statements, so when the CALL statement is executed, GSoft\~BASIC already knows that a subroutine named RECTANGLE is defined in the program, and that it expects 5 integer parameters. It expects them to appear after the procedure name, enclosed in parenthesis, and separated by commas. If you forget one of these parameters, put in too many, or use a parameter that can\rquote t be converted to an integer, the program will stop with an error.\par When the subroutine is called BASIC starts by assigning the values you put in the parameter list of the CALL statement to the variables you defined in the parameter list of the SUB statement. In effect, for the call we are using as an example, BASIC does the following five assignments before the first statement of the subroutine is executed:\par \par }{\f6\fs20 ! In effect, this is what BASIC does.}{\par }{\f6\fs20 LEFT = 10\par RIGHT = 250\par TOP = 10\par BOTTOM = 60\par COLOR = 0\par }{\par When the subroutine starts, then, the variables from the parameter list already have an initial value.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v END SUB statement}{\txe {\i\v See}{\v  subroutines}}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:}{\v END SUB statement}{\v }}}{After the parameters are set up the statements in the subroutine, like the statements in the program itself, are executed one after the other. This process continues until the END SUB statement is reached. At that point, control returns to the place where the CALL statement was issued, and execution picks up with the line right after the CALL statement.\par In the RECTANGLE procedure you will find the variable I defined for use in a FOR loop. Like the parameters, the variables defined within the subroutine vanish after the subroutine finishes executing. The only thing you can access from the program is the subroutine itself\emdash the variables and parameters don\rquote t even exist until after the CALL statement starts, and vanish before control returns to the CALL statement.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244549}Where to Put Subroutines{\*\bkmkend _Toc444244549}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {When you run a program, GSoft\~BASIC starts by quickly scanning the program to locate all of the subroutines, then begins execution with the first line in the program. Since execution starts at the first line of the program, subroutines always appear at the end, after all of the lines in the program itself.\par The order in which the subroutines appear doesn\rquote t really matter. I personally place them in alphabetical order to make it easier to find a particular subroutine, but that\rquote s just a habit I\rquote ve formed over the years. About the only meaningful restriction is that each subroutine must be separate from all of the others\emdash one subroutine\rquote s END SUB statement must appear before the SUB statement for the next one. The only lines that should appear between subroutines are comments or blank lines. And, of course, each subroutine\rquote s name must be different from the name of any other subroutine in your program. \par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244550}The END Statement{\*\bkmkend _Toc444244550}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v END statement}}}{As you know by now, right after the last line of a BASIC program executes the program stops. Now that your are using subroutines, though, you need to end the program a different way. The reason for this is that the SUB statement can be called, but not executed\emdash so you need to force the program to stop before it starts executing the subroutines at the end of the program.\par The END statement stops the program. You can use it anywhere, but you should always put an END statement right before the first subroutine.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244551}Commenting Subroutines{\*\bkmkend _Toc444244551}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v comments}}}{A program with one subroutine isn\rquote t likely to be too confusing, but as our programs use more and more subroutines, there are some commenting conventions that will help make the programs easier to read.\par In every programming language I use I always put a block of comments at the start of every subroutine. The exact format may vary from language to language to take advantage of specific features in the language, but there is no variation in the basic content. In each new computer language I learn, I quickly come up with a style that works for that language and stick with it for all of my programs, making it much easier to move a subroutine from one program to a new program.\par I use a very rigid format with up to five sections to comment a subroutine. If there is nothing to put in a section it\rquote s simply left out, which is why you only saw two sections in the RECTANGLE subroutine. Actually, two of the five sections deal with features you haven\rquote t seen yet. We\rquote ll get to them later in this lesson, but you\rquote re about to start writing subroutines of your own. Commenting your subroutines properly is an important habit to develop. It will save your hours and hours as your programs get longer. Because commenting is so important, we\rquote re going to look at the issues now so you can think about commenting from the very first subroutine you write.\par Before looking at the sections in the block of comments, though, take a look at how the entire block of comments is set aside with a line of dashes. This gives an unmistakable visual cue, making it very easy to spot a block of comments as you scan the text in a program. The subroutine itself follows right after the block of comments. Once you\rquote ve created your first subroutine, a quick copy and paste sets up these lines for all of the other subroutines you ever write\emdash and I promise the effort will be worth it as your programs creep from dozens of lines to thousands.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244552}Procedure Description{\*\bkmkend _Toc444244552}\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! Rectangle - Draw a rectangle and outline it in white.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The first thing in the block of comments tells what the procedure does. I generally try to keep this down to a single line, and never more than two lines. I put the name of the subroutine first, even though it appears right after the block of comments, because it\rquote s easier to find the comments when you\rquote re scanning text in the editor than it is to find the SUB statement, and with the name right at the top of the block of comments, I don\rquote t have to scan down the screen to find the subroutine name. It\rquote s a little thing, but it saves a lot of time.\par There are a few cases where a single line doesn\rquote t adequately describe what a subroutine does. This doesn\rquote t happen as often as you might think, but it does happen. When a situation like this pops up, I still put a one line description next to the subroutine name, then I skip a line and give a detailed description. In effect, the first line is a title line, and the next lines expand on the title.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244553}Parameters{\*\bkmkend _Toc444244553}\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! Parameters:\par !    left, right, top, bottom - edges of the rectangle\par !    color - color of the inside of the rectangle\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Next is a parameter declaration section that describes the meaning of each parameter that appears in the SUB statement. Again, there is usually no need for more than a line, or perhaps two.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244554}Shared Variables{\*\bkmkend _Toc444244554}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Shared variables are variables from the main program that are used inside a subroutine. The section looks like the list of parameters, but it\rquote s labeled Shared variables rather than Parameters. You\rquote ll see this kind of comment later, when we start discussing shared variables in detail.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244555}Return Values{\*\bkmkend _Toc444244555}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {There is a kind of subroutine called a function that returns a value. We\rquote ll see those later in this lesson. It\rquote s important to describe exactly what the function returns.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244556}Notes{\*\bkmkend _Toc444244556}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {If the subroutine is based on some outside reference material, does something unexpected, or if there is anything I\rquote d like to remind myself of if I ever need to come back and change the subroutine or move it to another program, I put the information in a notes section. The notes section looks something like this:\par  \par }{\f6\fs20    ! Notes:\par    !    1. For a description of the insertion sort, see\par    !       "Algorithms + Data Structures = Programs," p. 85.\par }{\par As with the other formatting and commenting conventions mentioned in this course, there are many correct ways to comment and format a subroutine that are different from the one I have shown you. The important point isn\rquote t which one you use; the important point is to find one you like that supplies the same information and use it consistently.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244557}Subroutines Let You Create New Commands{\*\bkmkend _Toc444244557}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {We have seen that a subroutine can be used to take a series of similar, repetitious commands and place them in a single subroutine, making our program shorter and easier to understand. Subroutines can also be used to create new commands, which helps organize the program, making it easier to read. The RECTANGLE subroutine we have already created is one example. Once you know what the RECTANGLE subroutine does, it is a lot easier to read the lines\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! Draw white, red and blue rectangles.\par CALL RECTANGLE(10, 250, 10, 120, 15)\par CALL RECTANGLE(220, 270, 60, 100, 7)\par CALL RECTANGLE(50, 300, 80, 160, 4)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {than it was to read the original program. The idea of using subroutines to neatly package our program is a very powerful one. It takes some getting used to, but once mastered, the technique will help you write programs faster and find errors in programs easier.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {There is another advantage, too. Most people tend to write a few general types of programs. For example, an engineer might write several programs to deal with complicated matrix manipulation, but never deal with graphics to any great degree. Another person might use his computer to write adventure games. Any time you start writing programs that fall into broad groups like this, you will find that there are sections of your program that get repeated over and over again. By packaging these ideas into subroutines, you can quickly move the proper sections of code from one program to another.\par As an example, let\rquote s look at a small section of code that seems to appear at the beginning of nearly all of our graphics programs.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {! Set up for graphics.\par HGR\par SETPENMODE (0)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SETSOLIDPENPAT (15)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par We can package these three lines into a subroutine called INITGRAPHICS like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! InitGraphics - Set up for graphics\par !\par !----------------------------------------------------------\par \par SUB INITGRAPHICS\par HGR\par SETPENMODE (0)\par SETSOLIDPENPAT (15)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\fi360\sb40\widctlpar\adjustright {With this new procedure, our program becomes even easier to read:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {! Set up for graphics.\par CALL INITGRAPHICS\par \par ! Draw white, red and blue rectangles.\par CALL RECTANGLE(10, 250, 10, 120, 15)\par CALL RECTANGLE(220, 270, 60, 100, 7)\par CALL RECTANGLE(50, 300, 80, 160, 4)\par \par ! Wait for the user to press return.\par INPUT "";A$\par END\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par It may not be obvious yet, but there is still one more advantage to packaging even these three simple commands into a subroutine. At some point, you may decide that you want to set up the graphics screen a bit differently. For example, you may want to paint the entire screen white so the drawings appear on a white background rather than a black one. With the graphics initialization in a neat little package, it will be easy to redo the package and quickly update all of your programs. You will also learn faster ways to color in a rectangle. If all of your programs use the RECTANGLE subroutine, you can easily update the subroutine, quickly bringing all of your programs up to date. If the code to draw rectangles is scattered throughout your programs, though, it would be a daunting task to change them all, simply because it would be hard to find all of the places that need to be changed.\par \par Problem 4.1. One use of the RECTANGLE procedure is to draw game boards. For example, a board for a Reversi game would consist of eight rows and eight columns of green squares with white outlines. A chess or checker board can be drawn as eight rows and eight columns of alternating black and white squares.\par Use the Rectangle procedure to draw a checker board in the graphics window. Make each square 20 pixels wide and 20 pixels high, with the top left square at 5,5. Use colors of 5 and 12, which gives a gray and green board instead of the boring traditional black and white board.\par Hint: Use one FOR loop nested within another to loop over the rows and columns, like this:\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\f6\fs20 FOR ROW = 1 TO 8\par   FOR COLUMN = 1 TO 8\par     <draw a square>\par   NEXT\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\f6\fs20 NEXT\par }{\par This way, you can locate the top of each square as (ROW - 1) * 20 + 5. The bottom of each square will be at ROW * 20 + 35. The same idea can be used to find the left and right edge of each square.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244558}Functions are Subroutines that Return a Value{\*\bkmkend _Toc444244558}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:FUNCTION statement}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v FUNCTION statement}{\v }{\txe {\i\v See}{\v  }{\v subroutines}{\v }}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v END FUNCTION statement}{\txe {\i\v See}{\v  subroutines}}}}{In the last lesson we used a pseudo-random number generator in several programs to create simulations. One common theme in these simulations was to restrict the range of the random number and force the single-precision result returned by the RND function into an INTEGER value. For example, in our number guessing game, we selected numbers from 1 to 100. To roll dice, on the other hand, we used the same idea to select a random number from 1 to 6. With what we have learned about subroutines it would seem that this would be an ideal candidate for packaging. There is a problem, though. The whole point of the random number code is to produce a number. We need a way to get a value back from the subroutine. When we need a value back, BASIC gives us a new flavor of the subroutine called a function. A function is just a subroutine that can return a single value.\par Here\rquote s a program that demonstrates this idea by packaging our random number generator.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM This program rolls two dice 20 times.\par \par DIM SIDES AS INTEGER :! # of sides on the dice\par DIM NUMDICE AS INTEGER :! # of dice to throw\par DIM I AS INTEGER , J AS INTEGER :! loop/index variables\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM VALUE AS INTEGER :! value rolled on a die\par \par ! Set up the number of dice and number of sides.\par SIDES = 6\par NUMDICE = 2\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FOR I = 1 TO 20\par   FOR J = 1 TO NUMDICE\par     PRINT RANDOMVALUE(SIDES), ;\par   NEXT\par   PRINT\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par !----------------------------------------------------------\par !\par ! RandomValue - Return a random number in the range 1 to max\par !\par ! Parameters:\par !    max - maximum allowed value for the random number\par !\par ! Returns: Random number in the range 1..max\par !\par !----------------------------------------------------------\par \par FUNCTION RANDOMVALUE(MAX AS INTEGER ) AS INTEGER\par DIM VALUE AS INTEGER :! Random value to return\par \par VALUE = 1 + RND (1) * MAX\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF VALUE = MAX + 1 THEN\par   VALUE = MAX\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par RANDOMVALUE = VALUE\par END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are really only two differences in the way you write a subroutine and function. The first shows up in the function header, which starts with the reserved word FUNCTION, rather than the reserved word SUB. The function returns a value. It is possible for this value to be an integer, a real number, or any other type we\rquote ve covered so far in this course. Functions cannot return arrays or records, two types we\rquote ll cover later, but there are easy ways around that issue.\par Naturally, you have to tell the compiler what type of value the function returns. You do this just like you would for a variable, by following the name of the function (and the parameter list, if there is one) with AS and the type. In the case of our RANDOMVALUE function, the type is INTEGER.\par At some point you need to specify what value the function should return. This is the second difference between a function and a subroutine. Somewhere in the function, you need to assign a value to the name of the function itself. You can do this in more than one place, if you like, using IF statements to determine which assignment decides the value of the function. You can also assign a value to the function more than once, perhaps starting it off with an initial value that may or may not get changed later. You must assign a value to the function at least one time, however. If you don\rquote t, the value returned by the function is zero or an empty string, but you really shouldn\rquote t count on this fact.\par You can use a function anywhere you could use a value within the BASIC language. In our program, we use the function in the statement\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT RANDOMVALUE(SIDES), ;\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par When the program gets to this statement it calls the function. The function calculates a value and returns it. The value is printed, just as the number 4 would be in the statement\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT 4, ;\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Problem 4.2. You can use a function anywhere you can use a value in BASIC. In particular, you can use the RANDOMVALUE function to decide how many times to loop through a FOR loop, like this:\par \par }{\f6\fs20 FOR I = 1 TO RANDOMVALUE(20)\par    ...\par }{\par You can also use a function to set the value of a parameter for another subroutine or function call.\par Use these ideas to create a program that will draw a random number of rectangles, not to exceed 30, in the graphics window. The rectangles should have a left and right value between 1 and 319, and a top and bottom value between 1 and 199. Use an IF statement and a temporary variable to make sure the left side is less than or equal to the right side, and that the top is less than or equal to the bottom, like this:\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\f6\fs20 IF LEFT > RIGHT THEN\par   TEMP = LEFT\par   LEFT = RIGHT\par   RIGHT = TEMP\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\f6\fs20 END IF\par }{\par Finally, the color of the rectangle should be chosen at random, and should be in the range 0 to 15. You can get a value from 0 to 3 from the RANDOMVALUE function like this:\par \par }{\f6\fs20 RANDOMVALUE(16) - 1\par }{\par The call to RANDOMVALUE to get the color of the rectangle should appear in the parameter list of the call to Rectangle.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart parameters}{\*\bkmkstart _Toc444244559}Value and Variable Parameters{\*\bkmkend _Toc444244559}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {There are some places where we want to package some code that changes more than one value. A good example of this is the ball bouncing program from the last problem in Lesson 3. It would be nice to package the code that updates the position of the ball into a function and return the new position of the ball. There is a problem, though. A function can only return one value, but we need to update both an X and Y coordinate.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:variable parameters}}}{It turns out that there are two ways to pass a parameter in BASIC. If you pass a variable as the parameter, and not an expression, and if the variable is the same type as the subroutine is expecting for a parameter, any changes made in the subroutine are also made in the main program. Parameters passed this way are called variable parameters. If the parameter you pass is an expression of any kind at all, even something as simple as converting an INTEGER to a SINGLE, any changes made in the subroutine have no effect at all on the variable in the main program.\par Let\rquote s look at some examples to see how this works. The first example passes a variable parameter.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {DIM I AS INTEGER\par \par I = 1\par CALL TEST(I)\par PRINT I\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par SUB TEST (J AS INTEGER)\par J = J + 1\par END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {Since the passed parameter I is the same type as the parameter variable J, and since there is no expression involved, I is passed as a variable parameter. This means that changing J in the subroutine changes the value in the main program, too, so the program prints 2.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:value parameters}}}{With a very simple change, we turn the parameter into a value parameter.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {I = 1\par CALL TEST(I)\par PRINT I\par END\par \par SUB TEST (J AS INTEGER)\par J = J + 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {The only change was to drop the DIM statement that declared I as an INTEGER. As a result, I is defined with the default type of SINGLE, the type for a single-precision floating-point variable. This program prints 1, because the change to J in the subroutine does not change the value of I in the main program.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {This brings up a dirty little problem in the BASIC programming language. Every language has features that sometimes cause problems; this is one of them for BASIC. The problem is that it\rquote s easy to change a parameter inside a subroutine, then have the subroutine change the value of a variable in the main program by accident. This isn\rquote t an obvious bug. You may end up scratching your head for quite a while before you finally discover the problem. There is one defensive programming technique I would recommend in all BASIC subroutines that are not supposed to change the value of a parameter, and that is to use a separate variable internally if you need to change a parameter value. In our simplistic example, the change would look like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM I AS INTEGER\par \par I = 1\par CALL TEST(I)\par PRINT I\par END\par \par SUB TEST (J AS INTEGER)\par DIM K AS INTEGER\par \par K = J\par K = K + 1\par END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {In this example, I is not changed in the main program, even though it is passed as a variable parameter. Another way to protect a value from the part of the program making the call is to turn the parameter into an expression. The traditional way to do this in BASIC is to put parenthesis around the parameter, like this:\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM I AS INTEGER\par \par I = 1\par CALL TEST((I))\par PRINT I\par END\par \par SUB TEST (J AS INTEGER)\par J = J + 1\par END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {Once again, this simple change is enough to change the parameter from a variable parameter into a value parameter, and the program prints 1. In general, though, the extra typing is a bit of a pain, and you\rquote ll quickly stop using the parenthesis unless you know they are needed. That\rquote s why I prefer writing the subroutine so it won\rquote t change the value of a parameter unless that\rquote s the point of the subroutine.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {And finally, here\rquote s just such an example. This is my solution to Problem 3.4 rewritten using subroutines.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Draw a ball bouncing across the screen.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM X AS INTEGER , Y AS INTEGER :! Coordinates for the ball\par DIM XSPEED AS INTEGER , YSPEED AS INTEGER :! Speed of the ball\par DIM ITER AS INTEGER :! Number of iterations\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM I AS INTEGER :! loop counter\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Get the ball's initial position, speed, and the number\par ! of animated frames.\par INPUT "Starting X position: ";X\par INPUT "Starting Y position: ";Y\par INPUT "X Speed            : ";XSPEED\par INPUT "Y Speed            : ";YSPEED\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {INPUT "Number of steps    : ";ITER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Set up the graphics window.\par CALL INITGRAPHICS\par SETPENMODE (2)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SETPENSIZE (4, 4)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Make sure the starting position is on the screen.\par CALL RESTRICT(X, 0, 319)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL RESTRICT(Y, 0, 199)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Animate the ball.\par MOVETO (X, Y)\par LINETO (X, Y)\par FOR I = 1 TO ITER\par   CALL MOVEBALL(X, Y, XSPEED, YSPEED)\par NEXT\par INPUT "";A$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! InitGraphics - Set up for graphics\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SUB INITGRAPHICS\par HGR\par SETPENMODE (0)\par SETSOLIDPENPAT (15)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! MoveBall - move the ball\par !\par ! Move a ball in the graphics window.  If the ball hits one\par ! of the sides, the direction of the ball is changed.\par !\par ! Parameters:\par !    X, Y - position of the ball\par !    VX, VY - velocity of the ball\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB MOVEBALL(X AS INTEGER , Y AS INTEGER , VX AS INTEGER , VY AS INTEGER )\par \par DIM X2 AS INTEGER , Y2 AS INTEGER :! New position for the ball\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Find the new X position for the ball\par X2 = X + VX\par IF X2 < 0 THEN\par   X2 = 0\par   VX = - VX\par ELSE IF X2 > 319 THEN\par   X2 = 319\par   VX = - VX\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Find the new Y position for the ball\par Y2 = Y + VY\par IF Y2 < 0 THEN\par   Y2 = 0\par   VY = - VY\par ELSE IF Y2 > 199 THEN\par   Y2 = 199\par   VY = - VY\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Draw the ball at the new position.\par MOVETO (X2, Y2)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LINETO (X2, Y2)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Erase the old ball.\par MOVETO (X, Y)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LINETO (X, Y)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Update the ball position.\par X = X2\par Y = Y2\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Restrict - make sure a value is inside a given range\par !\par ! Parameters:\par !    X - value to restrict to a range\par !    LOW, HIGH - allowed range of values\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SUB RESTRICT(X AS INTEGER , LOW AS INTEGER , HIGH AS INTEGER )\par IF X < LOW THEN\par   X = LOW\par ELSE IF X > HIGH THEN\par   X = HIGH\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par In this program the MOVEBALL subroutine is used to update the position of the ball on the screen. We pass four values to the MOVEBALL subroutine; the current x and y position of the ball and the current velocity of the ball. Each of these four variables can be changed by the subroutine.\par \par Problem 4.3. By using our neatly packaged subroutine you can quickly write a program to bounce more than one ball around on the screen. Modify the sample program to bounce 10 balls simultaneously.\par Use the RANDOMVALUE function to choose the initial positions and speeds of the balls. Move the balls 100 times.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:parameters}{\rxe parameters}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244560}{\*\bkmkend parameters}Shared Variables{\*\bkmkend _Toc444244560}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SHARED command}{\txe {\i\v See}{\v  subroutines}}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v subroutines\:SHARED command}{\v }}}{With the exception of parameters, any variable declared in the program can\rquote t be used from inside a subroutine or function, and any variable declared inside a subroutine or function can\rquote t be used from the main program. Fortunately, there is a way to change all that so variables other than parameters can be shared among the various parts of the program. Cleverly enough, it\rquote s done with the SHARED command.\par The SHARED command is used inside a subroutine when it needs to use a variable declared in the program. The command is pretty simple; you just put the name of the variable right after the word SHARED. If you want to share several variables with a single SHARED command, list all of the variables separated by commas.\par One good way to use SHARED variables is to set up values used throughout a program. For example, our graphics programs frequently use the number of pixels on the screen as a boundary, making sure balls bounce off the edge and so forth. This boundary value can change. If you move on to toolbox programming you\rquote ll discover that there is another way to draw on the Apple IIGS that uses 640 horizontal pixels rather than 320. You\rquote ll also learn to create windows, and these windows are generally smaller than the physical screen. By placing the screen size in shared variables you can use a single value throughout the program, making it easy to change the screen size if you use the same subroutine in a later program.\par Here\rquote s a short example that shows how to use shared variables. As our programs get longer and more complicated, we\rquote ll find many uses for them that aren\rquote t so simple!\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Draw a big X across the graphics screen.\par \par DIM MAXX AS INTEGER , MAXY AS INTEGER :! Size of the graphics screen\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Initialize the size of the graphics screen.\par MAXX = 320\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {MAXY = 200\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Initialize the graphics screen.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL INITGRAPHICS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Draw a big x across the screen.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL X\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Wait for the user to press return.\par INPUT "";A$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! InitGraphics - Set up for graphics\par !\par !----------------------------------------------------------\par \par SUB INITGRAPHICS\par HGR\par SETPENMODE (0)\par SETSOLIDPENPAT (15)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! X - Draw a big X across the screen\par !\par ! Shared variables:\par !    maxx, maxy - size of the screen\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SUB X\par SHARED MAXX, MAXY\par \par MOVETO (0, 0)\par LINETO (MAXX, MAXY)\par MOVETO (0, MAXY)\par LINETO (MAXX, 0)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB}{\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v subroutines}{\rxe subroutines}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart strings}{\*\bkmkstart _Toc444244561}{\*\bkmkend subroutines}Lesson Five \endash Strings{\*\bkmkend _Toc444244561}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244562}What Are Strings?{\*\bkmkend _Toc444244562}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {You may have noticed that a string was the first data type we ever dealt with, but you haven\rquote t seen much of them. Back in Lesson 1 our very first program wrote a string constant to the screen. Since then we have made extensive use of integers and real numbers, but the only string variables we\rquote ve used were on INPUT statements, and with the exception of a very brief aside, that was really just a way to wait for the user to press return before ending a program. In this lesson we\rquote ll delve deeper into the mysteries of strings, learning how to declare them and how to manipulate strings in our programs.\par In BASIC a string is a simple variable, just like in integer or a real number. Unlike a number, though, a string does not have a fixed length. It can vary from no characters at all to a whopper of a string with 32767 characters. It\rquote s important to keep in mind that the upper limit on the length of a string varies from one implementation of BASIC to another. In most implementations the upper limit is 255 characters, and frankly, that\rquote s enough for most situations.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v character set}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v character set}{\v }}}{The characters in a string are any of the ASCII characters. The ASCII characters are the 95 printing characters you see on your keyboard and 33 special purpose characters, some of which, like the return key, are also on your keyboard. There\rquote s a chart of them a little later in the lesson, in the section where we discuss character values in detail. GSoft\~BASIC also allows the extended ASCII characters supported by Apple on the Apple\~II}{\fs20 GS}{ and Macintosh lines of computers.\par Since strings can vary in length, they aren\rquote t stored the same way as numbers. A string variable actually contains information about the location of the characters. The characters in the string are stored in a separate area of memory in your computer. This puts some limitations on what we can do with string values. We\rquote ll talk about them in more detail as various topics come up in the course, but in a nutshell, you can\rquote t fake the creation of a string or change the length of an existing string behind BASIC\rquote s back\emdash you must allow BASIC to create, change, and delete strings.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444055188}{\*\bkmkstart _Toc444244563}The Two Ways To Read a String{\*\bkmkend _Toc444055188}{\*\bkmkend _Toc444244563}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v INPUT statement}}}{You got a brief look at reading strings from the keyboard in Lesson\~3, when we used this short program to show that the INPUT statement could read strings, too, and not just numbers.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {INPUT "Please type your name: "; NAME$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT "Hello, "; NAME$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par We didn\rquote t delve deeper at that time, but now it\rquote s time to look at a major weakness in the INPUT statement for reading strings. It\rquote s obvious when you make a slight change in the program, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {INPUT "Please type your city, state and zip code: "; ADDRESS2$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT ADDRESS2$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {The natural thing to type (in the United States, anyway) is something like this:\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {Albuquerque, New Mexico 87120\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Try it. Everything after the comma is lost. The fact is, the INPUT statement just doesn\rquote t handle commas well when reading strings. Just as with a number, the comma signals the end of the string.\par That\rquote s not always bad. In fact, in this particular case, it can be very useful. Let\rquote s try the program again:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM CITY AS STRING , STATE AS STRING , ZIP AS LONG\par \par INPUT "Please type your city, state and zip code: ";CITY, STATE, ZIP\par PRINT CITY, STATE, ZIP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {If you remember to put a comma after the state, like this:\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {Albuquerque, New Mexico, 87120\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {BASIC divides the typed text neatly into two strings and a number, storing the results in appropriate variables.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LINE INPUT statement}}}{But more often than not, experienced BASIC programmers find that the way INPUT handles commas is more of a hindrance than a help. That\rquote s why there is another form of the INPUT statement in BASIC called LINE INPUT. The LINE INPUT statement looks just like the INPUT statement. In fact, there is really only one difference: Instead of separating the various values you type with commas, you must put them on a separate line. In most cases you\rquote ll end up using one LINE INPUT statement for each line.\par Here\rquote s the last version of our program for reading the city, state and zip code. This one reads the entire line, commas and all, into a string variable.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\outlinelevel0\adjustright \f6\fs20\cgrid {LINE INPUT "Please type your city, state and zip code: "; ADDRESS2$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT ADDRESS2$\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444055189}{\*\bkmkstart _Toc444244564}Manipulating Strings{\*\bkmkend _Toc444055189}{\*\bkmkend _Toc444244564}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:concatenation}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:adding}}}{BASIC only has five operations for manipulating strings, but surprisingly, they are enough for any task you\rquote d like to perform. You can easily create more specialized operations based on the ones BASIC already has.\par The simplest of all of the operations is technically known as string concatenation. That\rquote s just a fancy term for attaching one string to the end of another. BASIC uses the + operation to concatenate strings, which sort of makes sense, because you\rquote re adding one string to the end of another. For example,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {A$ = "test"\par B$ = "ing"\par PRINT A$ + B$\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {prints\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {testing\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LEFT$ function}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v RIGHT$ function}}}{String concatenation gives you an easy way to combine strings to form a bigger one; the next three functions give you a way to extract a piece of a long string. LEFT$ and RIGHT$ pull characters from the left or right end of a string. Each of these functions takes two parameters, a string and the number of characters you want. It is legal to ask for more characters than are actually in the string; if you do that, you will get the entire string back. You can see how this works by running this short program, which peels characters off of the left edge of a test string.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {A$ = "testing"\par FOR I% = 0 TO 8\par   PRINT I%, LEFT$ (A$, I%)\par NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LEN function}}}{The last of the most fundamental string operations is LEN, which figures out how many characters are in a string. LEN takes a single parameter, a string, and returns the number of characters in that string.\par Let\rquote s put these statements to work in a real program. This particular program takes a string and reverses the order of the characters. It\rquote s a cute gag program, but it also shows clearly how LEFT$, RIGHT$ and concatenation can be used to tear apart a string and put it back together in a wholly different way. Just as important, it shows how to package this operation as a BASIC FUNCTION, in effect creating a new string manipulation command that you can copy from one program and paste into others that need to do the same operation.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Reverse\par REM\par REM This program reads in a string, reverses the order of the\par REM characters, and writes the string back to the text screen.\par REM It continues doing this until a string of length zero is\par REM entered.  To get a string of length zero, press the RETURN\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM key without typing any other character.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM INSTRING AS STRING :! input string\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM OUTSTRING AS STRING :! output string\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Loop until there is no input string.\par DO\par   ! Get a string.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  LINE INPUT "String to reverse: ";INSTRING\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! Reverse the characters in the string.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  OUTSTRING = REVERSE$(INSTRING)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  PRINT "Reversed string  : ";OUTSTRING\par   PRINT\par LOOP WHILE LEN (INSTRING) <> 0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Reverse$ - Reverse the characters in a string\par !\par ! Parameters:\par !    s - string to reverse\par !\par ! Returns: String with the characters reversed\par !\par !----------------------------------------------------------\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FUNCTION REVERSE$(S AS STRING ) AS STRING\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM I AS INTEGER :! loop variable\par DIM S1 AS STRING :! remaining characters in the input string\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM S2 AS STRING :! string with characters reversed\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {S1 = S\par S2 = ""\par FOR I = 1 TO LEN (S1)\par   S2 = S2 + RIGHT$ (S1, 1)\par   S1 = LEFT$ (S1, LEN (S1) - 1)\par NEXT\par REVERSE$ = S2\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par It may seem strange to create a completely new string variable, S1, to hold the same string that was passed as a parameter. If you think so, try taking it out and renaming the parameter S1. What happens to the program?\par I did warn you about this sort of thing. In the last lesson, I suggested that you always copy a parameter into a local variable if you would be changing the value of the variable in the subroutine, since it was possible you would change the variable in the original program, with unwanted results. That\rquote s just what happens in this case if you don\rquote t make a copy of the original parameter. The REVERSE$ function gradually removes characters from one string while building a second. When in finishes, the original string has been reduced to an empty string, which is another name for a string that doesn\rquote t have any characters. Back in the main program the DO loop ends unexpectedly because INSTRING got changed to the empty string, too.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v MID$ function}}}{The last of the five string manipulation functions is MID$. This function takes characters from the middle of the string rather than the right or left side. MID$ uses three parameters rather than two. The first is still the string to work on. Next comes the index of the first character you want MID$ to return, counting from 1. The last parameter is the number of characters you want back. For example,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT MID$("This is a test.", 6, 2)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {prints the second word, \ldblquote is\rdblquote . Remember, spaces are characters, too, so the space between \ldblquote This\rdblquote  and \ldblquote is\rdblquote  counts as a character.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Like LEFT$ and RIGHT$, MID$ does sensible things if you ask for characters that are not there. If you start in the middle of the string and ask for more characters than there are left in the string, MID$ returns the ones that are there. For example,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT MID$("This is a test.", 11, 50)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {returns the string \ldblquote test.\rdblquote  If the index is larger than the number of characters in the string, MID$ returns an empty string.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Here\rquote s the string reversing program, rewritten to use MID$ and a backwards-stepping FOR loop to reverse the characters in the input string.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Reverse\par REM\par REM This program reads in a string, reverses the order of the\par REM characters, and writes the string back to the text screen.\par REM It continues doing this until a string of length zero is\par REM entered.  To get a string of length zero, press the RETURN\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM key without typing any other character.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM INSTRING AS STRING :! input string\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM OUTSTRING AS STRING :! output string\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Loop until there is no input string.\par DO\par   ! Get a string.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  LINE INPUT "String to reverse: ";INSTRING\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! Reverse the characters in the string.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  OUTSTRING = REVERSE$(INSTRING)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  PRINT "Reversed string  : ";OUTSTRING\par   PRINT\par LOOP WHILE LEN (INSTRING) <> 0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Reverse$ - Reverse the characters in a string\par !\par ! Parameters:\par !    s1 - string to reverse\par !\par ! Returns: String with the characters reversed\par !\par !----------------------------------------------------------\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FUNCTION REVERSE$(S1 AS STRING ) AS STRING\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM I AS INTEGER :! loop variable\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM S2 AS STRING :! string with characters reversed\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {S2 = ""\par IF LEN (S1) > 0 THEN\par   FOR I = LEN (S1) TO 1 STEP - 1\par     S2 = S2 + MID$ (S1, I, 1)\par   NEXT\par END IF\par REVERSE$ = S2\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FOR statement\:STEP size}}}{If you looked closely at this example, you may have noticed a feature of the FOR loop we\rquote ve never covered before. The STEP size of -1 is used to tell the FOR loop to loop from a large number down to a small one. For example,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 10 TO 1 STEP -1\par   PRINT I\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {does a countdown from 10 to 1. Other than counting down instead of up, this loop works just like all of the other FOR loops you\rquote ve used.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {In some ways this version is simpler than the one that uses LEFT$ and RIGHT$, and in some ways it is more complex. This version doesn\rquote t need to make a copy of the input parameter, since it isn\rquote t changed, and it uses one fewer statements inside the FOR loop to manipulate the strings, since it doesn\rquote t have to remove a character from the input string. On the other hand, it needs an extra IF statement to make sure there are characters in the string before the FOR loop starts.\par As a general rule, this version is better than the first. They are both about the same size and complexity, but the version based on MID$ has one fewer statement in the FOR loop. While there are certainly exceptions, programs are generally faster when you reduce the number of statements inside a loop. That\rquote s because statements in a loop are almost always executed more times than statements that are outside of the loop, sometimes thousands of times more often, so moving things out of the loop tends to make the program faster. In many programs, the difference is minimal or unimportant, but in others the difference is dramatic. In fact, reducing the number of operations in a loop is one of the most effective ways to make a slow program run faster.\par \par Problem 5.1. If you do a lot of string manipulations, you\rquote ll start to build up a library of more powerful commands. One that you might add is INSERT$, which inserts a string in the middle of an existing string.\par Write a function that takes two strings and a position as input. Your function should insert the second string parameter into the first at the position given by the third, numeric parameter. Be sure your subroutine handles any argument reasonably. If the position is less than 1, the second string should appear at the beginning of the first string. If the position is greater than the length of the first string, the second string should appear at the end of the first string.\par Write a program that tests this function. It should use a sequence of input statements to read test strings and a position, then print the result returned by the function. The program should stop if you press return immediately for both input strings, but not until it calls INSERT$ with this odd case!\par Test your program with every combination of add data you can think of. Do your best to trick your subroutine, trying to make it fail. If it\rquote s going to fail, it\rquote s best if it fails while }{\i you}{ are testing it, rather than later, when someone is using your program!\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart characters}{\*\bkmkstart _Toc444055190}{\*\bkmkstart _Toc444244565}Characters{\*\bkmkend _Toc444055190}{\*\bkmkend _Toc444244565}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Way back in Lesson 1, you learned that\par \par "Hello, world."\par \par }\pard \s28\sb40\widctlpar\adjustright {is a string constant. A string constant consists of any number characters enclosed in quote marks. That \ldblquote any number\rdblquote  is quite literal\emdash two quote marks in a row form a legal string constant for a string with no characters. In various books you\rquote ll see this called the empty string or the null string. Any character you can type can appear in a string constant except for the double quote mark itself. Later in the lesson we\rquote ll find a way to force the quote mark into a string.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444055191}{\*\bkmkstart _Toc444244566}The ASCII Character Set{\*\bkmkend _Toc444055191}{\*\bkmkend _Toc444244566}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ASCII character set}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v ASCII character set}{\v }}}{Characters and integers enjoy a special relationship with each other. To decide what it means to compare two strings, for example, we need to decide if one character is less than another. While you can get pretty good agreement from most people whether the character \lquote a\rquote  is less than the character \lquote b\rquote , things get a little less definite when you ask if the character \lquote ^\rquote  is less than the character \lquote *\rquote . For this reason, as well as other reasons we\rquote ll explore, we often convert characters to integers and integers to characters.\par There are two functions in BASIC that are used to convert characters to numbers and numbers to characters. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v CHR$ function}}}{The CHR$ function takes a number as a parameter and returns a string with a single character. The number should be in the range 0 to 255; if it is not, CHR$ adds or subtracts 256 from the value you give until the number is in this range.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ASC function}}}{The ASC function does just the opposite. It takes a string and returns the numeric value associated with the first character in the string. If the string has no characters, ASC returns the value 0.\par The ASCII character set defines the relationship between the characters and their numeric equivalents. It also lists all of the characters you can use. It has one character for each of the values from 0 to 127. Some of these values are known as printing characters. For example, the numeric value 65 is used to represent an uppercase \lquote A\rquote . The lowercase letter \lquote a\rquote  is represented by 97. Some of the values in the ASCII character set are non-printing characters. These are used for special purposes. The character whose value is 13, for example, is used to separate lines in files of characters and to move to a new line on the text screen.\par The table below shows the complete ASCII character set in tabular form. Non-printing characters are shown as the name of the value. To obtain the integer value used to represent one of the characters, add the number at the top of the column to the number at the start of the row. Try that for \lquote A\rquote  and \lquote a\rquote , which have values of 65 and 97, to make sure you understand how this works.\par \par }\trowd \trqc\trgaph108\trleft-108 \clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx528\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx1271\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx2014\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx2650\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx3286\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx3922\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx4558\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx5194\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx5950\pard \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\b\fs20 \cell 0\cell 16\cell 32\cell 48\cell 64\cell 80\cell 96\cell 112\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 \row }\trowd \trqc\trgaph108\trleft-108 \clvertalt\clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx528\clvertalt\cltxlrtb \cellx1271\clvertalt\cltxlrtb \cellx2014\clvertalt\cltxlrtb \cellx2650\clvertalt\cltxlrtb \cellx3286\clvertalt\cltxlrtb \cellx3922\clvertalt\cltxlrtb \cellx4558\clvertalt\cltxlrtb \cellx5194\clvertalt\cltxlrtb \cellx5950\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 0\cell }{\fs20 nul\cell dle\cell \cell 0\cell @\cell P\cell `\cell p\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 1\cell }{\fs20 soh\cell dc1\cell !\cell 1\cell A\cell Q\cell a\cell q\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 2\cell }{\fs20 stx\cell dc2\cell "\cell 2\cell B\cell R\cell b\cell r\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 3\cell }{\fs20 etx\cell dc3\cell #\cell 3\cell C\cell S\cell c\cell s\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 4\cell }{\fs20 eot\cell dc4\cell $\cell 4\cell D\cell T\cell d\cell t\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 5\cell }{\fs20 enq\cell nak\cell %\cell 5\cell E\cell U\cell e\cell u\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 6\cell }{\fs20 ack\cell syn\cell &\cell 6\cell F\cell V\cell f\cell v\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 7\cell }{\fs20 bel\cell etb\cell \lquote \cell 7\cell G\cell W\cell g\cell w\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 8\cell }{\fs20 bs\cell can\cell (\cell 8\cell H\cell X\cell h\cell x\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 9\cell }{\fs20 ht\cell em\cell )\cell 9\cell I\cell Y\cell i\cell y\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 10\cell }{\fs20 lf\cell sub\cell *\cell :\cell J\cell Z\cell j\cell z\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 11\cell }{\fs20 vt\cell esc\cell +\cell ;\cell K\cell [\cell k\cell \{\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 12\cell }{\fs20 ff\cell fs\cell ,\cell <\cell L\cell \\\cell l\cell |\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 13\cell }{\fs20 cr\cell gs\cell -\cell =\cell M\cell ]\cell m\cell \}\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 14\cell }{\fs20 co\cell rs\cell .\cell >\cell N\cell ^\cell n\cell ~\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\trowd \trqc\trgaph108\trleft-108 \clvertalt\clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx528\clvertalt\cltxlrtb \cellx1271\clvertalt\cltxlrtb \cellx2014\clvertalt\cltxlrtb \cellx2650\clvertalt\cltxlrtb \cellx3286\clvertalt\cltxlrtb \cellx3922\clvertalt\cltxlrtb \cellx4558\clvertalt\cltxlrtb \cellx5194\clvertalt\cltxlrtb \cellx5950\pard\plain \s28\sl0\slmult0\widctlpar\intbl\adjustright \f4\cgrid {\b\fs20 15\cell }{\fs20 si\cell us\cell /\cell ?\cell O\cell _\cell o\cell rub\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The ASCII character set is the dominant character set on microcomputers, but it is not universal. On the Apple II}{\fs20 GS}{, and on most microcomputers, you can write your programs specifically for the ASCII character set. If you will be writing programs that must run on a variety of computers, though, you should be aware that the numeric equivalents of characters may vary. If possible, find out what character set is used on the various machines before you start to write your program, and make sure it will work with all of the character sets.\par \par Problem 5.2. Write a program that loops over the numbers from 32 to 126, converts these numbers to strings using the CHR$ function, and prints the characters to the screen. Skip to a new line after every 16 characters.\par Modify this program to switch to the graphics screen. Use the MOVETO command to move to 15, 15 before you start to print the characters. As you can see, you have a simple but effective way to put text on the graphics screen.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc440158812}{\*\bkmkstart _Toc444055192}{\*\bkmkstart _Toc444244567}The Extended Character Set{\*\bkmkend _Toc440158812}{\*\bkmkend _Toc444055192}{\*\bkmkend _Toc444244567}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v extended character set}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v extended character set}{\v }}}{Apple defined extensions to the ASCII character set to allow Macintosh and Apple\~II}{\fs20 GS}{ computers to display special characters used in non-English speaking countries that still use more or less the same alphabet as English speaking countries. This extended character set is not implemented for the text screen that most of our programs use, but it is available on the graphics screen. The characters in the Apple extended character set are shown in this table.\par \par }\trowd \trqc\trrh20 \clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx490\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx980\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx1470\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx1960\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx2450\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx2940\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx3430\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx3920\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx4410\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx4900\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx5390\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx5880\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx6370\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx6860\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx7350\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx7840\clvertalt\clbrdrb\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx8330\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\b\f7\fs20 \cell 00\cell 10\cell 20\cell 30\cell 40\cell 50\cell 60\cell 70\cell 80\cell 90\cell A0\cell B0\cell C0\cell D0\cell E0\cell F0\cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 \row }\trowd \trqc\trrh20 \clvertalt\clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx490\clvertalt\cltxlrtb \cellx980\clvertalt\cltxlrtb \cellx1470\clvertalt\cltxlrtb \cellx1960\clvertalt\cltxlrtb \cellx2450\clvertalt\cltxlrtb \cellx2940\clvertalt\cltxlrtb \cellx3430\clvertalt\cltxlrtb \cellx3920\clvertalt\cltxlrtb \cellx4410\clvertalt\cltxlrtb \cellx4900\clvertalt\cltxlrtb \cellx5390\clvertalt\cltxlrtb \cellx5880\clvertalt\cltxlrtb \cellx6370\clvertalt\cltxlrtb \cellx6860\clvertalt\cltxlrtb \cellx7350\clvertalt\cltxlrtb \cellx7840\clvertalt\cltxlrtb \cellx8330\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 0\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell \cell 0\cell @\cell P\cell `\cell p\cell \u196\'80\cell \u234\'90\cell \u8224\'a0\cell \u8734\'b0\cell \u191\'c0\cell \endash \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 1\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \u17\'11\cell !\cell 1\cell A\cell Q\cell a\cell q\cell \u197\'81\cell \u235\'91\cell \u730\'fb\cell \u177\'b1\cell \u161\'c1\cell \emdash \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 2\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \u18\'12\cell "\cell 2\cell B\cell R\cell b\cell r\cell \u199\'82\cell \u237\'92\cell \u162\'a2\cell \u8804\'b2\cell \u172\'c2\cell \ldblquote \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 3\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell #\cell 3\cell C\cell S\cell c\cell s\cell \u201\'83\cell \u236\'93\cell \u163\'a3\cell \u8805\'b3\cell \u8730\'c3\cell \rdblquote \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 4\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell $\cell 4\cell D\cell T\cell d\cell t\cell \u209\'84\cell \u238\'94\cell \u167\'a4\cell \u165\'b4\cell \u402\'c4\cell \lquote \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 5\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell %\cell 5\cell E\cell U\cell e\cell u\cell \u214\'85\cell \u239\'95\cell \bullet \cell \u181\'b5\cell \u8776\'c5\cell \rquote \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 6\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell &\cell 6\cell F\cell V\cell f\cell v\cell \u220\'86\cell \u241\'96\cell \u182\'a6\cell \u8706\'b6\cell \u8710\'c6\cell \u247\'d6\cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 7\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell \lquote \cell 7\cell G\cell W\cell g\cell w\cell \u225\'87\cell \u243\'97\cell \u223\'a7\cell \u8721\'b7\cell \u171\'c7\cell \u9674\'d7\cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 8\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell (\cell 8\cell H\cell X\cell h\cell x\cell \u224\'88\cell \u242\'98\cell \u174\'a8\cell \u8719\'b8\cell \u187\'c8\cell \u255\'d8\cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 9\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell )\cell 9\cell I\cell Y\cell i\cell y\cell \u226\'89\cell \u244\'99\cell \u169\'a9\cell \u960\'b9\cell \u8230\'c9\cell \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 A\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell *\cell :\cell J\cell Z\cell j\cell z\cell \u228\'8a\cell \u246\'9a\cell \u8482\'aa\cell \u8747\'ba\cell }{\f7\fs20 spc\cell }{\f21\fs20 \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 B\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell +\cell ;\cell K\cell [\cell k\cell \{\cell \u227\'8b\cell \u245\'9b\cell \u180\'ab\cell \u170\'bb\cell \u192\'cb\cell \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 C\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell ,\cell <\cell L\cell \\\cell l\cell |\cell \u229\'8c\cell \u250\'9c\cell \u168\'ac\cell \u186\'bc\cell \u195\'cc\cell \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 D\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell -\cell =\cell M\cell ]\cell m\cell \}\cell \u231\'8d\cell \u249\'9d\cell \u8800\'ad\cell \u8486\'bd\cell \u213\'cd\cell \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard\plain \s28\sl0\slmult0\keepn\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 E\cell }\pard \s28\qc\sl0\slmult0\keepn\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell .\cell >\cell N\cell ^\cell n\cell ~\cell \u233\'8e\cell \u251\'9e\cell \u198\'ae\cell \u230\'be\cell \u338\'ce\cell \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\trowd \trqc\trrh20 \clvertalt\clbrdrr\brdrs\brdrw30\brdrcf1 \cltxlrtb \cellx490\clvertalt\cltxlrtb \cellx980\clvertalt\cltxlrtb \cellx1470\clvertalt\cltxlrtb \cellx1960\clvertalt\cltxlrtb \cellx2450\clvertalt\cltxlrtb \cellx2940\clvertalt\cltxlrtb \cellx3430\clvertalt\cltxlrtb \cellx3920\clvertalt\cltxlrtb \cellx4410\clvertalt\cltxlrtb \cellx4900\clvertalt\cltxlrtb \cellx5390\clvertalt\cltxlrtb \cellx5880\clvertalt\cltxlrtb \cellx6370\clvertalt\cltxlrtb \cellx6860\clvertalt\cltxlrtb \cellx7350\clvertalt\cltxlrtb \cellx7840\clvertalt\cltxlrtb \cellx8330\pard\plain \s28\sl0\slmult0\widctlpar\intbl\adjustright \f4\cgrid {\b\f7\fs20 F\cell }\pard \s28\qc\sl0\slmult0\widctlpar\intbl\adjustright {\f21\fs20 \cell \cell /\cell ?\cell O\cell _\cell o\cell \cell \u232\'8f\cell \u252\'9f\cell \u216\'af\cell \u248\'bf\cell \u339\'cf\cell \cell \cell \cell }\pard\plain \widctlpar\intbl\adjustright \f4\cgrid {\fs20 \row }\pard \fi-360\li1440\ri720\nowidctlpar\adjustright {\fs20 \par \bullet \tab The characters from the space ($20) to the tilde ($7E) are all standard printing ASCII characters.\par \bullet \tab While they have standard definitions, the characters $11..$14, $AD, $B0..$B3, $B5..$BA, $BD, $C2..$C6 and $D6 tend to be rare in most fonts.\par \bullet \tab Character $CA is the non-breaking space.\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par One thing worth pointing out is that you can change the font used to draw characters when you are using the graphics screen. The reason this is important is that not all fonts implement all of the special characters you see in the table. If one of the characters shown exists in the font, it will almost always use the character code shown, but there aren\rquote t many fonts that implement all of these characters. In fact, many specialized fonts don\rquote t implement any of the characters you see in the table, even the standard ASCII characters. For example, there are Hebrew, Greek, and hieroglyphic fonts, not to mention symbol fonts that implement all sorts of pictures as font characters. You generally have to try the fonts to see what they actually do.\par \par Problem 5.3. Write a program that displays all 256 possible characters on the graphics screen. Some characters won\rquote t exist. To account for this fact, try drawing each character at a screen coordinate that matches the position of the character with a position in the table of fonts.\par You can do this by using a MOVETO command right before you draw each character. One odd fact you must take into account is that the position you move to specifies the base line for the character. This is the bottom left position for a character like M that lies entirely above the baseline. For a character like y, this position is still at the left edge of the character, but it is part way up, roughly where the tail starts to dip below the rest of the character. You will need to experiment a bit to find the proper number of pixels to leave between each character.\par While the program will work either way, you will be able to see the characters easier if you paint the screen white with a series of MOVETO and LINETO commands before drawing the characters themselves.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v character set}{\rxe characters}}}{\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444055193}{\*\bkmkstart _Toc444244568}{\*\bkmkend characters}P-Strings, C-Strings, and Other Confusions{\*\bkmkend _Toc444055193}{\*\bkmkend _Toc444244568}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {If you have read much about programming or browsed through Apple\rquote s toolbox reference manuals, you know that there are several kinds of strings in the various computer languages. The two most popular are generally called p-strings and c-strings. The toolbox manuals also refer to text blocks, and the Apple\~II}{\fs20 GS}{ disk operating system makes use of still another format for encoding file names.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v p-string}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:p-string}}}{P-strings get their name from the Pascal programming language because microcomputer implementations of Pascal like UCSD Pascal popularized the format. Ironically, they have little to do with the official definition of Pascal, but that\rquote s another story! The first character position in a p-string is actually occupied by a number, not a character. This number is the number of characters that follow. On almost all computers, and certainly on all of the computers where I\rquote ve seen p-strings used, each character uses one byte of storage. While we won\rquote t go into the details of representing numbers using bits and bytes, take my word for it that this means the number of characters in a p-string is limited to the range 0 to 255 on practically any computer. The characters in the string itself follow right after the length byte.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v c-string}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v c-string}{\v }}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v null terminated string}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v null terminated string}{\v }}}{C-strings are named after the C programming language, which is the most famous language that uses them. C strings are a sequence of characters followed by a null terminator, which is a character whose numeric value is zero. This gives another common name for this kind of string, the null terminated string.\par As you can see, one advantage of c-strings over p-strings is that there is no fixed limit to the number of characters in a single string. A minor disadvantage is that you have to scan the entire sequence of characters looking for the null terminator to find the length of a string, which is a very common operation when you are doing string operations.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v text blocks}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v text blocks}{\v }}}{Text blocks are just sequences of characters. You can\rquote t tell from looking at the string itself how many characters it has; the length is kept in a separate variable.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GS/OS strings}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v GS/OS strings}{\v }}}{GS/OS, the Apple\~II}{\fs20 GS}{ disk operating system, uses something a lot like a p-string, but instead of using a single byte to represent the length of the string GS/OS uses two bytes. This gives a theoretical upper limit of 65535 characters in a string. GS/OS itself limits the size of a path name to 8192 characters, but there is nothing to prevent a future version from implementing a larger limit. GS/OS also uses a variation on this format that has two lengths rather than one. The first value is the amount of memory available for the string, while the second is the current length.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v c-string}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:}{\v c-string}{\v }}}{With all of these formats available, it\rquote s fair to ask what GSoft BASIC uses. Essentially, GSoft BASIC uses c-strings. The format consists of a sequence of characters followed by a null terminator. There are some internal limits in the microprocessor used in the Apple\~II}{\fs20 GS}{ that make it easier to deal with strings that are no longer that 32767 characters, though, so GSoft BASIC imposes an upper limit of 32767 characters on each individual string. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:size limit}}}{If you try to create a string longer than 32767 characters, it is truncated. The final string is made up of the first 32767 characters of the string you would expect if there was no upper limit.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444055194}{\*\bkmkstart _Toc444244569}Comparing Strings{\*\bkmkend _Toc444055194}{\*\bkmkend _Toc444244569}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:comparing}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v comparing}{\v  strings}}}{The same comparison operations used with numbers can also be used with strings. Two strings are compared by comparing the characters in the string, one after the other, until the characters don\rquote t match. One string is \ldblquote less than\rdblquote  another of the numeric value of the first nonmatching character is less than the numeric value of the character at the same position in the second string.\par For example, \ldblquote A\rdblquote  is less than \ldblquote B\rdblquote , since the numeric value of the character \ldblquote A\rdblquote  is 65, while the numeric value of the characters \ldblquote B\rdblquote  is 66. Following the rules, \ldblquote that\rdblquote  is less than \ldblquote this\rdblquote , since the numeric value of the first nonmatching character, the \ldblquote a\rdblquote  in \ldblquote that\rdblquote , is 97, while the numeric value of the \ldblquote i\rdblquote  from \ldblquote this\rdblquote  is 105.\par If two strings are not equal in length, but all of the characters up to the end of the shorter string match, then the shorter string is less than the longer one. And, of course, if the strings are the same, they are equal.\par Looking at the ASCII character chart and thinking about these rules, they seem to make a lot of sense. Words compare pretty much the way we would expect from looking in, say, a dictionary. If a word is alphabetically before another, BASIC will say the first word in alphabetical order is less than the second. There is one major exception, though. Comparing strings fails to match our preconceptions miserably if one of the strings uses uppercase letters but the other does not. In the ASCII character chart, uppercase letters always come before lowercase letters, so the string \ldblquote Washington\rdblquote  is less than the string \ldblquote president\rdblquote . You can take care of this problem by converting both strings to all uppercase letters or all lowercase letters before comparing them, though.\par \par Problem 5.4. Write a function and a program to test it that converts any string to all uppercase characters. Make sure the function does not change characters that are not lowercase alphabetic characters.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444055195}{\*\bkmkstart _Toc444244570}Numbers and Strings{\*\bkmkend _Toc444055195}{\*\bkmkend _Toc444244570}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The two remaining string functions take care of a chore that is pretty tough to do by writing your own subroutines: Converting strings to numbers and numbers to strings.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v STR$ function}}}{The STR$ function takes any number and converts it to a string that has the same characters you would see if you used the PRINT statement to print the same number. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v VAL function}}}{It\rquote s cousin, the VAL function, takes a string and converts it to a numeric value. VAL always returns a double-precision floating-point number; STR$ can take any number format, and formats each according to the rules used for that type of number by PRINT.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v INPUT statement}}}{One use for these functions is in programs that need foolproof input of numbers. As you know by now, an INPUT statement that expects a number will ask for one if the user of the program enters something the program can\rquote t handle, but the way it handles the error may not be exactly what you\rquote re after. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LINE INPUT statement}}}{You can use the LINE INPUT statement, though, and read the input as a string. It\rquote s not all that tough to write a subroutine that will check to see if the text is a valid floating-point number, and it\rquote s pretty easy to check to see if the text is an integer. If your subroutine reports that the text is a number, you can convert the value easily with VAL. If the text the user typed is not a number, you can handle the error in a way that is more appropriate in your program than the severe method BASIC uses by default.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244571}Garbage Collection{\*\bkmkend _Toc444244571}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings\:garbage collection}}}{As your programs get longer, and especially if they use lots of strings, you may occasionally notice a slight pause. This is probably garbage collection. We\rquote ll explore what garbage collection really is and how you can manage it in this section.\par Each time you create a string in BASIC it is stored in an area of memory that BASIC sets aside for variables. You can visualize the process as writing the string on a line of notebook paper. When the next string is formed, it is written on the next line. This process continues until memory fills up completely.\par To see how this works, let\rquote s follow a very simple program,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {A$ = "Test 1"\par B$ = "Test 2"\par A$ = "Test 3"\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {Following along on paper, the lines on the notebook paper version of memory look like this:\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {Test 1\par Test 2\par Test 3\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {You might object that A$ contains the string \ldblquote Test 3\rdblquote  when the program finishes, so the string \ldblquote Test 1\rdblquote  is no longer needed. You\rquote re right, but it\rquote s still in memory. It\rquote s garbage, and the process of garbage collection is nothing less and nothing more than checking all of the variables in the program to see which ones are string variables, and of those, which strings they are actually using, then deleting the strings that are no longer needed. When garbage collection finishes, the strings in memory would be\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {Test 2\par Test 3\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The problem is that checking all of the variables in your program and compressing the memory can take a noticeable amount of time. Most of the time it\rquote s not noticeable, and even when it is it\rquote s not worth worrying about, but every once in a while you will write a program that is just plain annoying to use if garbage collection happens at a particular point while the program runs. Maybe that\rquote s right in the middle of an animation, or during a time-critical part of a communications program. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FRE function}}}{Whatever the reason, you can force BASIC to do garbage collection using the FRE function. This forces BASIC to do garbage collection, which makes is far less likely that garbage collection will happen in the next few lines of code.\par The FRE function takes a parameter. For garbage collection, it should be 0. It also returns a value. The value returned is the number of free bytes that are left in the variables area. That\rquote s a good way to see if you\rquote re running out of memory, which could cause garbage collection to occur way too often, slowing the program down a lot. If you have less than 10000 bytes of free space, I\rquote d suggest you should increase the amount of memory. We won\rquote t cover how that\rquote s done in this course, but you can find the appropriate commands in the GSoft\~BASIC reference manual.\par Don\rquote t overuse the FRE function! Even if there is little or no garbage collection to do, the FRE command can take a fair amount of time. If you use it too often the entire program can slow noticeably. In fact, you should not use the FRE command at all unless you are trying to control when the garbage collection is done. BASIC will do garbage collection automatically whenever it is needed, and your program will run fastest if you let BASIC choose when to do garbage collection. The only advantage to FRE is that you can force the garbage collection to occur before a time-critical section of the program starts to execute.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v strings}{\rxe strings}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart arrays}{\*\bkmkstart _Toc444244572}{\*\bkmkend strings}Lesson Six \endash Arrays{\*\bkmkend _Toc444244572}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244573}Groups of Numbers as Arrays{\*\bkmkend _Toc444244573}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Computers can deal with very large amounts of data. On the Apple II}{\fs20 GS}{, you can easily write programs that will deal with thousands of numbers, names, zip codes, or whatever. So far, though, the methods we have for dealing with these values are fairly limited. A database of a hundred friends, each of whom has a name, street address, a city, a state, and a zip code would be a daunting task if each value had to be placed in a separate variable.\par One way we have to deal with large amounts of data is called an array. An array is a group of values, each of which is the same type. We use an index to determine which of the values we want to access at a given time.\par For our first look at an array, let\rquote s do a simulation of rolling dice. We\rquote ve done this several times before, on a small scale, but this time we\rquote re going to roll the dice 10000 times and keep track of how many times we get a 2, how many times we get a 3, and so forth. We could, of course, use a separate variable for each of the totals, but that would get to be a bit tedious. Instead, we will use an array.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v DIM statement}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v arrays\:declaring}}}{To define an array, you need to specify how many things you want in the array and what kind they are. In our case, we are adding up the number of times a particular value shows up on a pair of dice. We can get any value from 2 to 12 from a pair of dice, so the easy way to create the array is to use the numbers 2 to 12 as indexes. We\rquote ll define the array this way:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM TOTALS(12) AS INTEGER :! number of spots showing\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par With the array defined this way, we can put a number into the array or take one out by giving the name of the array followed by the index in parenthesis. For example, if the variable DICE contains the number of spots we rolled, the expression\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {TOTALS(DICE) = TOTALS(DICE) + 1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {will take the current value from the array, add one, and store the changed value back into the array.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v arrays\:range of indecies}}}{There is one  subtle point here. The 12 as the index for the array says the last value in the array is indexed with 12, as in\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT TOTALS(12)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {But what is the first value? Actually, for every array in BASIC, the index of the first value is 0. In our dice rolling program we will never use TOTALS(0) or TOTALS(1). In some programs wasting two integer numbers is a big deal. The space is important. In other programs, wasting a few bytes is not nearly as important as writing a program that is easy to understand. In this program we\rquote ll sacrifice the extra four bytes of space for clarity\rquote s sake.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {As with regular variables you can specify what kind of value the array holds using the special type characters, so\par \par DIM TOTALS%(12)\par \par }\pard \s28\sb40\widctlpar\adjustright {defines an array that works just as well in our program. As with our other programs, though, we\rquote ll usually dispense with the extra character by defining arrays with a named type in the DIM statement. One way isn\rquote t necessarily any better than the other. I generally use characters when I\rquote m writing short programs, and use named types for longer ones.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {One other interesting feature about BASIC is that you can have an array and a variable with the same name. This is usually something you find out when you make a mistake and start trying to find out why a program doesn\rquote t work! I wouldn\rquote t recommend using the same name for a variable and an array because it\rquote s easy to get the two confused.\par You can use an element of the TOTALS array anywhere that you could use an integer variable. You can, for example, print an element of an array, use it in an expression, or pass it as a parameter to a subroutine. There are very few cases, though, where you can use the entire array. You can\rquote t write an array using PRINT, for example. We will explore when and how you can use an entire array as we get to know arrays better.\par Now, finally, it\rquote s time to look at a real program that uses arrays.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM This program simulates rolling dice.  It counts the number\par REM of times each value appears, printing a summary after the\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM run is complete.\par \par DIM TOTALS(12) AS INTEGER :! number of spots showing\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Do the dice simulation.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL SIMULATION(10000)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Write the dice array.\par CALL WRITEARRAY\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! RandomValue - Return a random number in the range 1 to max\par !\par ! Parameters:\par !    max - maximum allowed value for the random number\par !\par ! Returns: Random number in the range 1..max\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FUNCTION RANDOMVALUE(MAX AS INTEGER ) AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM VALUE AS INTEGER :! Random value to return\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {VALUE = 1 + RND (1) * MAX\par IF VALUE = MAX + 1 THEN\par   VALUE = MAX\par END IF\par RANDOMVALUE = VALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Simulation - roll the dice, saving the results in totals\par !\par ! Parameters:\par !    rolls - number of times to roll the dice\par !\par ! Shared Variables:\par !    totals - array holding the total number of rolls\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB SIMULATION(ROLLS AS INTEGER )\par \par SHARED TOTALS()\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM I AS INTEGER :! loop variable\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM SUM AS INTEGER :! # of spots for this roll\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Set the totals to zero.\par FOR I = 2 TO 12\par   TOTALS(I) = 0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Do the simulation.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FOR I = 1 TO ROLLS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! Roll the dice.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  SUM = RANDOMVALUE(6) + RANDOMVALUE(6)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! Increment the correct total.\par   TOTALS(SUM) = TOTALS(SUM) + 1\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! WriteArray - Write the results.\par !\par ! Shared Variables:\par !    totals - array holding the total number of rolls\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB WRITEARRAY\par \par SHARED TOTALS()\par \par DIM I AS INTEGER :! loop variable\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {PRINT "spots", "times"\par FOR I = 2 TO 12\par   PRINT I, TOTALS(I)\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Before you run this program, I want to let you know that it will take a long time. In fact, this program will run for over eight minutes on an accelerated Apple\~II}{\fs20 GS}{! This is the first computationally intense program you have seen in this course. If you like, you can try various tactics to speed up the program. You can also use this program too see how big an impact sloppy coding might have. One easy example of this is using single-precision floating-point values instead of integer variables. If you switch all of the variables to real numbers the program actually takes over eleven minutes.\par There is one other thing to notice about this sample program. In the last lesson you learned how to create shared variables so a value could be used in the main program and in a subroutine. This program shows how to use shared variables with an array. For the most part, sharing an array is done the same way as sharing a variable. If you remember, though, I said you could have an array and a variable with the same name, so you need some way to tell a variable from an array. You tell BASIC you want to share an array by placing the parenthesis after the array name. You don\rquote t put in the type or size of the array, though. Those values are adapted from the size and type declared in the main program.\par \par Problem 6.1. There is often a trade-off between a program that is fast and a program that is easy to understand. Which factor is the most important is one that the programmer has to make as the program is written. The answer is really an engineering choice, and not something you can predict in advance.\par The dice rolling program calls RANDOMINTEGER 20,000 times. That\rquote s really what takes most of the time. Change the program so it doesn\rquote t call a function by including the code from the RANDOMVALUE function inside of the FOR loop.\par How much faster is the program?\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244574}The Shell Sort{\*\bkmkend _Toc444244574}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v sorting\:shell sort}}}{There are a few basic tasks that show up over and over when you are writing real programs. One of these is sorting. If you use a program to keep track of your Christmas list, for example, you might want to sort the list by zip code so the Post office will let you send the Christmas cards out by bulk mail. If you want to check your Christmas list to see who\rquote s been naughty and nice, though, and are trying to find E. Scrooge, you may want the same list sorted alphabetically by name.\par There are many ways to sort an array; each has its advantages and disadvantages. You will learn about other ways to sort an array later in the course, but we will start out now with one of the classic sorting methods. While there are faster ways to sort large arrays, the shell sort is very easy to understand, very easy to implement, and actually works better on short arrays than the more complicated sorts you will learn later.\par The idea behind the shell sort is very simple. You start by scanning the array from front to back. At each step, you look to see if the value that comes after the current one in the array is smaller than the current array element. If it is, you change them and continue scanning. As an example, we will sort the following array by hand.\par \par }\pard \s28\li720\sb40\keepn\widctlpar\adjustright {\tab }{\ul index}{\tab }{\ul value}{\par }{\f6\fs20 \tab 1\tab 6\par \tab 2\tab 43\par \tab 3\tab 1\par }\pard \s28\li720\sb40\widctlpar\adjustright {\f6\fs20 \tab 4\tab 6\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par We start off with the first array element and check to see if the value is smaller than the value in the second element of the array. (The arrow shows which element of the array we are working on.)\par \par }\pard \s28\li720\sb40\keepn\widctlpar\adjustright {\tab }{\ul index}{\tab }{\ul value}{\par }{\f6\fs20 {\field{\*\fldinst SYMBOL 224 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{\f6\fs20 \tab 1\tab 6\par \tab 2\tab 43\par \tab 3\tab 1\par }\pard \s28\li720\sb40\widctlpar\adjustright {\f6\fs20 \tab 4\tab 6\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\sb40\widctlpar\adjustright {In this case, 6 is smaller than 43, so we do nothing. Moving on, we check the next element.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\li720\sb40\keepn\widctlpar\adjustright {\tab }{\ul index}{\tab }{\ul value}{\par }{\f6\fs20 \tab 1\tab 6\par }{\f6\fs20 {\field{\*\fldinst SYMBOL 224 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{\f6\fs20 \tab 2\tab 43\par \tab 3\tab 1\par }\pard \s28\li720\sb40\widctlpar\adjustright {\f6\fs20 \tab 4\tab 6\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par \par }\pard \s28\sb40\widctlpar\adjustright {This time, 1 is smaller than 43, so we exchange the values in the second and third spots, ending up with this array:\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\li720\sb40\keepn\widctlpar\adjustright {\tab }{\ul index}{\tab }{\ul value}{\par }{\f6\fs20 \tab 1\tab 6\par }{\f6\fs20 {\field{\*\fldinst SYMBOL 224 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{\f6\fs20 \tab 2\tab 1\par \tab 3\tab 43\par }\pard \s28\li720\sb40\widctlpar\adjustright {\f6\fs20 \tab 4\tab 6\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\sb40\widctlpar\adjustright {Checking the third element, we find that 6 is also smaller than 43, so we again make a swap.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\li720\sb40\keepn\widctlpar\adjustright {\tab }{\ul index}{\tab }{\ul value}{\par }{\f6\fs20 \tab 1\tab 6\par \tab 2\tab 1\par }{\f6\fs20 {\field{\*\fldinst SYMBOL 224 \\f "Wingdings" \\s 10}{\fldrslt\f14\fs20}}}{\f6\fs20 \tab 3\tab 6\par }\pard \s28\li720\sb40\widctlpar\adjustright {\f6\fs20 \tab 4\tab 43\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\sb40\widctlpar\adjustright {We don\rquote t check the last element of the array, since there is nothing that follows it.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {At this point, we have successfully moved 43 to the last spot in the array, where it belongs, but the array is still not completely sorted. To sort the array completely, we need to keep track of whether or not we swapped any array entries. If we didn\rquote t need to swap any entries then the array is sorted. If we did swap two of the array elements, though, we need to make another pass over the array. Our second pass makes one swap, moving 1 to the first array element.\par \par }\pard \s28\li720\sb40\keepn\widctlpar\adjustright {\tab }{\ul index}{\tab }{\ul value}{\par }{\f6\fs20 \tab 1\tab 1\par \tab 2\tab 6\par \tab 3\tab 6\par }\pard \s28\li720\sb40\widctlpar\adjustright {\f6\fs20 \tab 4\tab 43\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Notice that we only want to swap elements of the array if the next element is actually less than the one we are inspecting. If we swap elements when the values are equal, we would loop over our sample array over and over, swapping 6 with itself on each pass.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v Boolean values}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v true}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v false}}}{Before diving into an example program that shows an actual sort, let\rquote s take a moment to examine concept that we will use that has nothing to do with arrays. It\rquote s something you saw briefly back in Lesson\~3, but this is the first time it has appeared in a real program. While we are sorting the array, one of the things we need to keep track of is whether or not we have swapped any entries in the array. If we have, we need to make another pass through the array; if we have not swapped any entries, the sort is complete, and we can stop. One way to keep track of whether any swaps have been made would be to keep track of the number of swaps, and check to see if the number is zero. We could be a little more efficient, and set a number to zero, then set it to one if any swaps were made. It turns out this works very well in BASIC. The reason is the way BASIC handles true and false situations.\par So far, every place where you\rquote ve used a true or false condition has been on an IF statement or a loop of some kind, and the true or false condition occurred because you compared two values. BASIC actually returns a number for a test like this, though. Try\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT 2 < 1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {and you\rquote ll see that the program prints 1. If you try\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT 2 > 1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {the program will print 0. Following this idea, if you try\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {IF 0 THEN\par   PRINT "testing\u8230\'c9"\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {you will see that nothing is printed, while\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {IF 1 THEN\par   PRINT "testing\u8230\'c9"\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {does print the string.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {In fact, BASIC actually accepts a number anytime a condition is expected. If the number is zero the condition is false, while any other value is treated as true. This lets us keep track of true and false values with a normal numeric variable, generally an integer. You can see this idea used in the sample program to keep track of whether or not we have swapped a value; the sample program does this with the variable NOSWAP.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM This program reads in an array of up to 100 real numbers.\par REM It then sorts the array, and prints the numbers in order.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM Numbers are read until a zero is found.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM NUMBERS(99) AS SINGLE :! array to sort\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM NUM AS INTEGER :! # of numbers actually read\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! read the list of numbers\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL READEM\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! sort the numbers\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL SORT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! write the list of numbers\par CALL WRITEEM\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! ReadEm - Read the list of numbers\par !\par ! Shared Variables:\par !    numbers - array of numbers read\par !    num - number of numbers read\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB READEM\par \par SHARED NUMBERS(), NUM\par \par DIM RVAL AS SINGLE :! number read from the keyboard\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {NUM = 0\par DO\par   INPUT RVAL\par   IF RVAL <> 0.0 THEN\par     NUMBERS(NUM) = RVAL\par     NUM = NUM + 1\par   END IF\par LOOP UNTIL RVAL = 0.0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Sort - Sort the list of numbers\par !\par ! Shared Variables:\par !    numbers - array of numbers read\par !    num - number of numbers read\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB SORT\par \par SHARED NUMBERS(), NUM\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM TEMP AS SINGLE :! temp variable; used for swapping\par DIM DIDSWAP AS INTEGER :! has a swap occurred?\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM I AS INTEGER :! loop variable\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! loop until the array is sorted\par IF NUM > 1 THEN\par   DO\par     ! no swaps, yet\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    DIDSWAP = 0\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! check each element but the last\par     FOR I = 0 TO NUM - 2\par       ! if a swap is needed then...\par       IF NUMBERS(I + 1) < NUMBERS(I) THEN\par         ! note that there was a swap\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {        DIDSWAP = 1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {        ! swap the entries\par         TEMP = NUMBERS(I)\par         NUMBERS(I) = NUMBERS(I + 1)\par         NUMBERS(I + 1) = TEMP\par       END IF\par     NEXT\par   LOOP WHILE DIDSWAP\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! WriteEm - Write the list of numbers\par !\par ! Shared Variables:\par !    numbers - array of numbers read\par !    num - number of numbers read\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB WRITEEM\par \par SHARED NUMBERS(), NUM\par \par DIM I AS INTEGER :! loop variable\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FOR I = 0 TO NUM - 1\par   PRINT NUMBERS(I)\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Try the program a few times to see if you can make it fail. Start with a list of five numbers that are the same. Try a list of five numbers that are already sorted. You might also try the values from the sorting example we worked at the start of this section; the values will be handled internally as real numbers, but INPUT can read an integer and convert it to a real number.\par \par Problem 6.2. The sample program from this section sorts an array so that the smallest number comes first. Sometimes we want the largest number first. Change the sample to it sorts the values with the largest first, proceeding to the smallest.\par \par Problem 6.3. Modify the sample program from the last chapter that reversed the order of characters in a word. This time, sort the characters.\par Sort the characters by breaking the string up into individual characters which are stored in an array of strings. Sort the array of strings just like the numbers were sorted, then combine the characters to form the final result string.\par You will need to set an upper limit on the size of the string you can sort. Use 255 characters, which also happens to be the largest number of characters the LINE INPUT statement can read from a single line typed from the keyboard.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244575}Multidimensional Arrays{\*\bkmkend _Toc444244575}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v arrays\:miltidimensional}}}{The arrays we\rquote ve dealt with so far are a series of similar values. It\rquote s possible to use more than one subscript, though, forming blocks of numbers. There are all sorts of examples of multidimensional arrays from mathematics, especially linear algebra, and from engineering. There\rquote s a great example that doesn\rquote t use any math at all, though: Conway\rquote s game of Life. We\rquote ll use that game as a way to introduce multidimensional arrays.\par Life is really more of a simulation than a game. It starts with a world consisting of a two dimensional grid with cells, like a sheet of graph paper. Looking at a small chunk of a sheet of graph paper you can see that each cell has eight neighboring cells.\par {\shp{\*\shpinst\shpleft6408\shptop137\shpright8328\shpbottom2057\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz3\shplid1045{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich96\picwgoal1920\pichgoal1920\macpict\bliptag-389428587\blipupi72{\*\blipuid e8c9ca950f1b8914d203d320ceb2e7a4}048000390085009900e5001102ff0c00ffffffff008500000039000000e50000009900000000000000a0008200a10064000a53504e5403e80001000000a10064000e53504e540cd000390085009900e500a10064000a53504e540bb8000b000000a0008c00a10064000a53504e540bb800020002001e0001000a00390085009900e5002200390098005f00a10064000a53504e540bb8000200020022003900ab005f00a10064000a53504e540bb8000200020022003900be005f00a10064000a53504e540bb8000200020022003900d1005f00a10064000a53504e540bb8000200020022004c00855f0000a10064000a53504e540bb8000200020022005f00855f0000a10064000a53504e540bb8000200020022007200855f0000a10064000a53504e540bb8000200020022008500855f0000a10064000a53504e540bb8000400030031005f00ab007200be003800a10064000a53504e540bb80001000000a10064001a53504e540c26004c0098006100ad00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c060000000200000000000000002c000900030647656e6576610000030003000d000a002e00040000000000100060006000600060002b9f5a013100a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26004c00ab006100c000040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26004c00be006100d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26005f0098007400ad00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0600000002000000000000000028006d009f013400a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26005f00be007400d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000292601350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600720098008700ad00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000280080009f013600a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26007200ab008700c000040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26007200be008700d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301380000a0009700a10064000a53504e540bb8000c000000a0008d00a10064000653504e5403e900a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx6407\posy136\absh1920\absw1920\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich96\picwgoal1920\pichgoal1920\macpict\bliptag-389428587\blipupi72{\*\blipuid e8c9ca950f1b8914d203d320ceb2e7a4}048000390085009900e5001102ff0c00ffffffff008500000039000000e50000009900000000000000a0008200a10064000a53504e5403e80001000000a10064000e53504e540cd000390085009900e500a10064000a53504e540bb8000b000000a0008c00a10064000a53504e540bb800020002001e0001000a00390085009900e5002200390098005f00a10064000a53504e540bb8000200020022003900ab005f00a10064000a53504e540bb8000200020022003900be005f00a10064000a53504e540bb8000200020022003900d1005f00a10064000a53504e540bb8000200020022004c00855f0000a10064000a53504e540bb8000200020022005f00855f0000a10064000a53504e540bb8000200020022007200855f0000a10064000a53504e540bb8000200020022008500855f0000a10064000a53504e540bb8000400030031005f00ab007200be003800a10064000a53504e540bb80001000000a10064001a53504e540c26004c0098006100ad00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c060000000200000000000000002c000900030647656e6576610000030003000d000a002e00040000000000100060006000600060002b9f5a013100a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26004c00ab006100c000040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26004c00be006100d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26005f0098007400ad00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0600000002000000000000000028006d009f013400a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26005f00be007400d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000292601350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600720098008700ad00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000280080009f013600a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26007200ab008700c000040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26007200be008700d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c06000000020000000000000000291301380000a0009700a10064000a53504e540bb8000c000000a0008d00a10064000653504e5403e900a0008300ff}\par}}In theory, the number of cells is infinite, extending off in all four directions forever. Life proceeds in generations, filling or emptying each cell based on a simple set of rules.\par \par }\pard \s28\fi-360\li720\sb40\widctlpar\adjustright {1.\tab If a cell is filled and has two or three neighbors that are also filled, it stays filled on the next generation.\par 2.\tab If a cell is empty and has exactly three filled neighbors, it is filled on the next generation.\par 3.\tab Any other cell will be empty on the next generation.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par It sounds simple, doesn\rquote t it? That\rquote s the point. Life was invented to explore how complex systems could become when they are based on a very small number of very simple rules. The results of exploring these simple rules literally fill volumes of information!\par Let\rquote s try a seemingly simple example, the r-pentominoe. It\rquote s a fancy name for this shape:\par \par }\pard \s28\li720\sb40\keepn\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \bullet \tab \bullet \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Here\rquote s the figure as we\rquote re getting ready for the second generation. All of the cells that started empty and become filled are marked with an asterisk. All cells that start filled and become empty are shown with a dash. All of the cells that start filled and stay that way are shown with a dot, and of course, all of the cells that start empty and stay that way have no symbol.\par \par }\pard \s28\li720\sb40\keepn\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab -\tab \bullet \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab *\tab \bullet \tab *\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Getting rid of the special characters, the second generation looks like this:\par \par }\pard \s28\li720\sb40\keepn\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \tab \bullet \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \bullet \tab \bullet \par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Here\rquote s the next few generations. Follow along with the rules to make sure you understand how they are applied.\par \par }\pard \s28\fi2880\sb40\widctlpar\adjustright {\ul Generation 3\par }\pard \s28\li720\sb40\keepn\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab  \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \bullet \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \tab \bullet \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\fi2880\sb40\widctlpar\adjustright {\ul Generation 4\par }\pard \s28\li720\sb40\keepn\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab  \tab \bullet \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet  \tab \bullet  \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \bullet \tab \tab \bullet \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard \s28\fi2880\sb40\widctlpar\adjustright {\ul Generation 5\par }\pard \s28\li720\sb40\keepn\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \bullet \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab  \tab  \tab  \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab  \tab \tab \bullet \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \bullet \par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par We\rquote ll use a multiply dimensioned array of integers to represent the grid in the computer. In fact, we\rquote ll use two grids: One for the current generation, and one for the one we\rquote re working on. We\rquote ll keep the array fairly small for now, restricting it to 20 cells by 20 cells. The array declaration looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM GRID(19, 19) AS INTEGER\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par {\shp{\*\shpinst\shpleft3960\shptop11\shpright8467\shpbottom4558\shpfhdr0\shpbxcolumn\shpbypara\shpwr2\shpwrk1\shpfblwtxt0\shpz4\shplid1046{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex67\picscaley67\piccropl0\piccropr0\piccropt0\piccropb0\picw337\pich340\picwgoal6740\pichgoal6800\macpict\bliptag-741009734\blipupi72{\*\blipuid d3d516ba693250c81897ff7c80e1fbd7}140400290081017d01d2001102ff0c00ffffffff008100000029000001d20000017d00000000000000a0008200a10064000a53504e5403e80001000000a10064000e53504e540cd000290081017d01d200a10064000a53504e540bb8000b000000a0008c00a10064000a53504e540bb8000b000000a0008c00a10064000a53504e540bb800020002001e0001000a00290081017d01d20020004b00a5017700a500a10064000a53504e540bb8000200020020004b00b4017700b400a10064000a53504e540bb8000200020020004b00c3017700c300a10064000a53504e540bb8000200020020004b00d2017700d200a10064000a53504e540bb8000200020020004b00e1017700e100a10064000a53504e540bb8000200020020004b00f0017700f000a10064000a53504e540bb8000200020020004b00ff017700ff00a10064000a53504e540bb8000200020020004b010e0177010e00a10064000a53504e540bb8000200020020004b011d0177011d00a10064000a53504e540bb8000200020020004b012c0177012c00a10064000a53504e540bb8000200020020004b013b0177013b00a10064000a53504e540bb8000200020020004b014a0177014a00a10064000a53504e540bb8000200020020004b01590177015900a10064000a53504e540bb8000200020020004b01680177016800a10064000a53504e540bb8000200020020004b01770177017700a10064000a53504e540bb8000200020020004b01860177018600a10064000a53504e540bb8000200020020004b01950177019500a10064000a53504e540bb8000200020020004b01a4017701a400a10064000a53504e540bb8000200020020004b01b3017701b300a10064000a53504e540bb8000200020020004b01c2017701c200a10064000a53504e540bb8000200020020004b01d1017701d100a10064000a53504e540bb8000200020020004b00a5004b01d100a10064000a53504e540bb8000200020020005a00a5005a01d100a10064000a53504e540bb8000200020020006900a5006901d100a10064000a53504e540bb8000200020020007800a5007801d100a10064000a53504e540bb8000200020020008700a5008701d100a10064000a53504e540bb8000200020020009600a5009601d100a10064000a53504e540bb800020002002000a500a500a501d100a10064000a53504e540bb800020002002000b400a500b401d100a10064000a53504e540bb800020002002000c300a500c301d100a10064000a53504e540bb800020002002000d200a500d201d100a10064000a53504e540bb800020002002000e100a500e101d100a10064000a53504e540bb800020002002000f000a500f001d100a10064000a53504e540bb800020002002000ff00a500ff01d100a10064000a53504e540bb8000200020020010e00a5010e01d100a10064000a53504e540bb8000200020020011d00a5011d01d100a10064000a53504e540bb8000200020020012c00a5012c01d100a10064000a53504e540bb8000200020020013b00a5013b01d100a10064000a53504e540bb8000200020020014a00a5014a01d100a10064000a53504e540bb8000200020020015900a5015901d100a10064000a53504e540bb8000200020020016800a5016801d100a10064000a53504e540bb8000200020020017700a5017701d100a10064000a53504e540bb80001000000a10064001a53504e540c2600550090006a00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002c000900030647656e6576610000030003000d000a002e00040000000000100154015101540151002b9a63013100a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600660090007b00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1101320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600780090008d00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1201330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600860090009b00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0e01340000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c260096009000ab00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1001350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600a5009000ba00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600b4009000c900a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600c3009000d800a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01380000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600d2009000e700a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01390000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600e1008100f600a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002800ef00930231300000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600f00081010500a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313100a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600ff0081011400a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313200a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26010e0081012300a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313300a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26011b0081013000a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0d02313400a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26012c0081014100a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1102313500a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600470090005c00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280055009a013000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26013b0081015000a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028014900930231360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26014a0081015f00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313700a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2601590081016e00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313800a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2601680081017d00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313900a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600a0004b00b500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028004400aa013000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600af004b00c400040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01310000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600be004b00d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600cd004b00e200040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600dc004b00f100040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01340000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600eb004b010000040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600fa004b010f00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600360109004b011e00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600360118004b012d00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01380000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600360127004b013c00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01390000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290136004b014b00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701400131002a0d01300000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290145004b015a00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037014f0131002a0d01310000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290154004b016900040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037015e0131002a0d01320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290163004b017800040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037016d0131002a0d01330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290172004b018700040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037017c0131002a0d01340000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290181004b019600040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037018b0131002a0d01350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290190004b01a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037019a0131002a0d01360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c260029019f004b01b400040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701a90131002a0d01370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26002901ae004b01c300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701b80131002a0d01380000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26002901bd004b01d200040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701c70131002a0d01390000a0009700a10064000a53504e540bb8000c000000a0008d00a10064000a53504e540bb800060003005100b400d200c300e1005800a10064000a53504e540bb8000c000000a0008d00a10064000653504e5403e900a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\posx3959\posy10\absh4547\absw4507\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex67\picscaley67\piccropl0\piccropr0\piccropt0\piccropb0\picw337\pich340\picwgoal6740\pichgoal6800\macpict\bliptag-741009734\blipupi72{\*\blipuid d3d516ba693250c81897ff7c80e1fbd7}140400290081017d01d2001102ff0c00ffffffff008100000029000001d20000017d00000000000000a0008200a10064000a53504e5403e80001000000a10064000e53504e540cd000290081017d01d200a10064000a53504e540bb8000b000000a0008c00a10064000a53504e540bb8000b000000a0008c00a10064000a53504e540bb800020002001e0001000a00290081017d01d20020004b00a5017700a500a10064000a53504e540bb8000200020020004b00b4017700b400a10064000a53504e540bb8000200020020004b00c3017700c300a10064000a53504e540bb8000200020020004b00d2017700d200a10064000a53504e540bb8000200020020004b00e1017700e100a10064000a53504e540bb8000200020020004b00f0017700f000a10064000a53504e540bb8000200020020004b00ff017700ff00a10064000a53504e540bb8000200020020004b010e0177010e00a10064000a53504e540bb8000200020020004b011d0177011d00a10064000a53504e540bb8000200020020004b012c0177012c00a10064000a53504e540bb8000200020020004b013b0177013b00a10064000a53504e540bb8000200020020004b014a0177014a00a10064000a53504e540bb8000200020020004b01590177015900a10064000a53504e540bb8000200020020004b01680177016800a10064000a53504e540bb8000200020020004b01770177017700a10064000a53504e540bb8000200020020004b01860177018600a10064000a53504e540bb8000200020020004b01950177019500a10064000a53504e540bb8000200020020004b01a4017701a400a10064000a53504e540bb8000200020020004b01b3017701b300a10064000a53504e540bb8000200020020004b01c2017701c200a10064000a53504e540bb8000200020020004b01d1017701d100a10064000a53504e540bb8000200020020004b00a5004b01d100a10064000a53504e540bb8000200020020005a00a5005a01d100a10064000a53504e540bb8000200020020006900a5006901d100a10064000a53504e540bb8000200020020007800a5007801d100a10064000a53504e540bb8000200020020008700a5008701d100a10064000a53504e540bb8000200020020009600a5009601d100a10064000a53504e540bb800020002002000a500a500a501d100a10064000a53504e540bb800020002002000b400a500b401d100a10064000a53504e540bb800020002002000c300a500c301d100a10064000a53504e540bb800020002002000d200a500d201d100a10064000a53504e540bb800020002002000e100a500e101d100a10064000a53504e540bb800020002002000f000a500f001d100a10064000a53504e540bb800020002002000ff00a500ff01d100a10064000a53504e540bb8000200020020010e00a5010e01d100a10064000a53504e540bb8000200020020011d00a5011d01d100a10064000a53504e540bb8000200020020012c00a5012c01d100a10064000a53504e540bb8000200020020013b00a5013b01d100a10064000a53504e540bb8000200020020014a00a5014a01d100a10064000a53504e540bb8000200020020015900a5015901d100a10064000a53504e540bb8000200020020016800a5016801d100a10064000a53504e540bb8000200020020017700a5017701d100a10064000a53504e540bb80001000000a10064001a53504e540c2600550090006a00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002c000900030647656e6576610000030003000d000a002e00040000000000100154015101540151002b9a63013100a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600660090007b00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1101320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600780090008d00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1201330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600860090009b00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0e01340000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c260096009000ab00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1001350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600a5009000ba00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600b4009000c900a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600c3009000d800a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01380000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600d2009000e700a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f01390000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600e1008100f600a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002800ef00930231300000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600f00081010500a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313100a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600ff0081011400a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313200a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26010e0081012300a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313300a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26011b0081013000a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0d02313400a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26012c0081014100a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a1102313500a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600470090005c00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280055009a013000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26013b0081015000a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028014900930231360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26014a0081015f00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313700a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2601590081016e00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313800a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2601680081017d00a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c070000000200000000000000002a0f02313900a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600a0004b00b500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028004400aa013000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600af004b00c400040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01310000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600be004b00d300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600cd004b00e200040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600dc004b00f100040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01340000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600eb004b010000040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26003600fa004b010f00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600360109004b011e00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600360118004b012d00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01380000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600360127004b013c00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000290f01390000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290136004b014b00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701400131002a0d01300000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290145004b015a00040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037014f0131002a0d01310000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290154004b016900040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037015e0131002a0d01320000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290163004b017800040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037016d0131002a0d01330000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290172004b018700040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037017c0131002a0d01340000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290181004b019600040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037018b0131002a0d01350000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c2600290190004b01a500040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c07000000020000000000000000280037019a0131002a0d01360000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c260029019f004b01b400040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701a90131002a0d01370000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26002901ae004b01c300040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701b80131002a0d01380000a0009700a10064000a53504e540bb80001000000a10064001a53504e540c26002901bd004b01d200040002ffffffffffffffff00a10064000a53504e540c940000000000a10096000c0700000002000000000000000028003701c70131002a0d01390000a0009700a10064000a53504e540bb8000c000000a0008d00a10064000a53504e540bb800060003005100b400d200c300e1005800a10064000a53504e540bb8000c000000a0008d00a10064000653504e5403e900a0008300ff}\par}}This looks fairly similar to the array declarations we\rquote ve used so far. The only difference is the addition of a comma and a second array subscript. This forms a grid of 400 numbers, each specified by a unique combination of index values. For example, GRID(3, 7) is a different value than GRID(7, 3)\emdash each uses the same two index numbers, but the order is very important! For our purposes, we can think of the numbers as row and column numbers, with the first index as a column number and the second as a row number. Thinking of the array that way, we could draw it on a piece of paper like you see here.\par Each of the squares can be filled in with a distinct value. We refer to a particular value by reading its column number from above the value and its row number to the left of the value. The location for GRID(7, 3) is marked with a spot.\par For our Life simulation, though, we\rquote ll let each cell represent a distinct cell on the grid. A value of 1 represents a filled cell, while zero represents an empty cell. Here\rquote s a program that displays the first fifty generations of the r-pentominoe.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Conway's game of Life.\par REM\par REM This version is played on a small, 20 by 20 grid mapped as\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM spots on the Apple IIGS graphics screen.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM GRID(21, 21) AS INTEGER :! The current state of the world.\par DIM R AS INTEGER , C AS INTEGER :! Row and column number.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM G AS INTEGER :! Generation number.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Set up the world.\par FOR R = 0 TO 21\par   FOR C = 0 TO 21\par     GRID(C, R) = 0\par   NEXT\par NEXT\par GRID(10, 10) = 1\par GRID(10, 11) = 1\par GRID(11, 11) = 1\par GRID(12, 11) = 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {GRID(11, 12) = 1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Set up the graphics screen.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL INITGRAPHICS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Draw the screen.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL DRAWSCREEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Create and move through the generations.\par FOR G = 1 TO 50\par   CALL NEXTGENERATION\par   CALL DRAWSCREEN\par NEXT\par INPUT "";A$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! DrawScreen - Draw the cells on the graphics screen\par !\par ! Shared variables:\par !    Grid - array containing the state of the spots\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB DRAWSCREEN\par \par SHARED GRID()\par \par DIM R AS INTEGER , C AS INTEGER :! Row and column number.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SETPENSIZE (3, 3)\par FOR R = 1 TO 20\par   FOR C = 1 TO 20\par     IF GRID(C, R) = 0 THEN\par       SETSOLIDPENPAT (0)\par     ELSE\par       SETSOLIDPENPAT (15)\par     END IF\par     MOVETO (C * 4, R * 4)\par     LINETO (C * 4, R * 4)\par   NEXT\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! InitGraphics - Set up for graphics\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SUB INITGRAPHICS\par HGR\par SETPENMODE (0)\par SETSOLIDPENPAT (15)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! NextGeneration - Calculate the next generation\par !\par ! Shared variables:\par !    Grid - array containing the current state of the\par !       spots; this is updated.\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB NEXTGENERATION\par \par SHARED GRID()\par \par DIM WORK(20, 20) AS INTEGER :! Used to generate the next state of the world.\par DIM R AS INTEGER , C AS INTEGER :! Row and column number.\par DIM N AS INTEGER :! Number of occupied surrounding cells.\par \par FOR R = 1 TO 20\par   FOR C = 1 TO 20\par     N = GRID(C - 1, R - 1) + GRID(C, R - 1) + GRID(C + 1, R - 1) + GRID(C - 1, R) + GRID(C + 1, R) + GRID(C - 1, R + 1) + GRID(C, R + 1) + GRID(C + 1, R + 1)\par     IF N = 3 THEN\par       WORK(C, R) = 1\par     ELSE IF N = 2 THEN\par       WORK(C, R) = GRID(C, R)\par     ELSE\par       WORK(C, R) = 0\par     END IF\par   NEXT\par NEXT\par FOR R = 1 TO 20\par   FOR C = 1 TO 20\par     GRID(C, R) = WORK(C, R)\par   NEXT\par NEXT\par END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are a couple of interesting points about the way the program is written. First, notice that we used a 22 by 22 grid, not a 20 by 20 grid. By adding an extra row of cells around the entire grid we were able to simplify the entire program enormously. A single loop handles all of the calculations, even for the corners and edges. Without that extra row we would need an extra chunk of program to deal with the top row, another to deal with the bottom row, a third to deal with the left edge, and a fourth for the right edge. Not only that, but we would need extra code for each of the four corners! That would be nine chunks of code to do the calculations instead of one, making the program longer, harder to write, harder to read, and increasing the chance of making a mistake. One extra row around the outside of the grid is well worth the extra space!\par Another point is the way the rules are applied. They aren\rquote t quite the same rules we listed earlier in this section. The rules coded in the program do the same thing as the ones listed earlier, but they have been reorganized to fit the way programs are written, not the way people think. That\rquote s another trick that often makes a program smaller and easier to write.\par When you run the program you\rquote ll notice that it\rquote s pretty slow. There are many reasons for this. The bottom line, of course, is that the program is doing a lot of work to loop over 400 cells, examining as many as 3600 cells in the process. Still, it seems slow, even allowing for all that work. Part of the reason is that the program itself can be written to run faster using lots of programming tricks. Those tricks apply strictly to this case, though, and not to a broad class of programs you are likely to write, so we won\rquote t spend time going over them. Another reason the program is slow is that GSoft\~BASIC is an interpreter. Interpreters are not as fast as compilers, which in turn are not as fast as hand-coded assembly language. This particular program is a prime candidate for an assembly language subroutine implemented as a user tool. Even versions written with compilers like C and Pascal are slow on a stock Apple\~II}{\fs20 GS}{!\par Every programmer eventually declares an array that is way too big for the available memory. This sort of problem sneaks up on you, because the numbers involved can look very manageable. For example, you might be tempted to try a three dimensional version of Life, setting up a moderate size grid for experimenting like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM GRID(100, 100, 100) AS INTEGER\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par While this declaration looks innocent, though, it eats memory at a ferocious rate. There are 100*100*100 numbers, for a total of 1,000,000 values. Integers are one of the smallest number formats you can use, but each does use two bytes of memory. The entire array would take almost two megabytes. (A megabyte is 1024*1024 bytes, or 1,048,576 bytes.) Two copies of the array would use all of the available memory on a fairly well-equipped Apple\~II}{\fs20 GS}{ computer, and four copies would burn up all of the memory you can put on the best equipped Apple\~II}{\fs20 GS}{!\par There is another problem, too. While GSoft\~BASIC lets you use all of available memory, there is a limit on the size of each individual array. No single array can use more than 32767 bytes of memory. Even if you use several smaller arrays, you can\rquote t use more than 65536 bytes of memory for all of your variables unless you use the SETMEM command to expand the available memory.\par We won\rquote t deal with such large chunks of memory in this course. If you would like more information about how memory is used and how to use the SETMEM command to extend the amount of memory available to GSoft\~BASIC, see the GSoft\~BASIC reference manual.\par \par Problem 6.4. Another interesting shape for Life is called a glider. It\rquote s shown below. Change the Life program so it follows a glider for ten generations instead of the r-pentominoe for fifty generations.\par \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \par \tab \tab \tab \tab \tab \tab \tab \tab \tab \tab \bullet \tab \bullet \tab \bullet \par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par This is one of the key discoveries in the game of life. A glider moves from one place to another, so it cam be used to carry information. After all, what\rquote s really the difference in principal between an electron flowing through a wire to carry a bit in a computer chip and a glider moving along a grid? As it turns out, not as much as you might think. Building on ideas like this, researchers have demonstrated that the rules for the game of life are rich enough to construct the same logic circuits that are used in modern digital computers!\par \par Problem 6.5. A matrix is an array of numbers, frequently two dimensional. Linear Algebra defines operations on matrices, just like every day arithmetic defines operations on numbers. One simple matrix operation is matrix addition, where the corresponding cells in two arrays are added to create a third array. For example, adding these two arrays\par \par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\tab \tab \tab \tab \tab 1\tab 2\tab 3\tab \tab \tab \tab 1\tab 1\tab 1\par \tab \tab \tab \tab \tab 4\tab 5\tab 6\tab \tab \tab \tab 1\tab 1\tab 1\par \tab \tab \tab \tab \tab 7\tab 8\tab 9\tab \tab \tab \tab 1\tab 1\tab 1\par \par }\pard \s28\li180\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {gives this matrix\par }\pard \s28\li720\sb40\widctlpar\tx1080\tx1440\tx1800\tx2160\tx2520\tx2880\tx3240\tx3600\tx3960\tx4320\tx4680\tx5040\tx5400\tx5760\tx6120\tx6480\tx6840\tx7200\tx7560\tx7920\tx8280\tx8640\tx9000\adjustright {\par \tab \tab \tab \tab \tab 2\tab 3\tab 4\par \tab \tab \tab \tab \tab 5\tab 6\tab 7\par \tab \tab \tab \tab \tab 8\tab 9\tab 10\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par Write a program with three arrays, A, B and C. Each array should hold nine SINGLE values, with two subscripts in each array than range from 0 to 2. Fill in the arrays A and B with the values shown above, then add the two matrices. Print the result and make sure it matches the result you see above.\par Hint: Don\rquote t try to package the matrix addition as a subroutine. There are some subtle features of BASIC involved that we haven\rquote t covered yet.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244576}Passing Arrays to a Subroutine{\*\bkmkend _Toc444244576}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v subroutines\:passing arrays}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v arrays\:passing to subroutines}}}{So far we\rquote ve used shared variables to use arrays from within subroutines. You can also pass arrays as parameters, and in fact doing so will speed up our program a bit. We\rquote ll look at why in a moment.\par First, though, let\rquote s look at the mechanics of passing an array. If you recall, an array and a variable can share the same name. That forced us to use parenthesis after the name of an array in the SHARED statement, and it forces us to do exactly the same thing for a passed parameter. When you pass an array to a subroutine, place parenthesis after the name of the array in both the subroutine or function call and the parameter list on the SUB or FUNCTION statement. Here\rquote s the Life program rewritten to use arrays passed as parameters rather than shared variables.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Conway's game of Life.\par REM\par REM This version is played on a small, 20 by 20 grid mapped as\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM spots on the Apple IIGS graphics screen.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! GRID1 and GRID2 hold the state of the world on alternate generations.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM GRID1(21, 21) AS INTEGER , GRID2(21, 21) AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM R AS INTEGER , C AS INTEGER :! Row and column number.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM G AS INTEGER :! Generation number.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Set up the world.\par FOR R = 0 TO 21\par   FOR C = 0 TO 21\par     GRID1(C, R) = 0\par     GRID2(C, R) = 0\par   NEXT\par NEXT\par GRID1(10, 10) = 1\par GRID1(10, 11) = 1\par GRID1(11, 11) = 1\par GRID1(12, 11) = 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {GRID1(11, 12) = 1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Set up the graphics screen.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL INITGRAPHICS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Draw the screen.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CALL DRAWSCREEN(GRID1())\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Create and move through the generations.\par FOR G = 1 TO 25\par   CALL NEXTGENERATION(GRID1(), GRID2())\par   CALL DRAWSCREEN(GRID2())\par   CALL NEXTGENERATION(GRID2(), GRID1())\par   CALL DRAWSCREEN(GRID1())\par NEXT\par INPUT "";A$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! DrawScreen - Draw the cells on the graphics screen\par !\par ! Parameters:\par !    Grid - array containing the state of the spots\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB DRAWSCREEN(GRID() AS INTEGER )\par \par DIM R AS INTEGER , C AS INTEGER :! Row and column number.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SETPENSIZE (3, 3)\par FOR R = 1 TO 20\par   FOR C = 1 TO 20\par     IF GRID(C, R) = 0 THEN\par       SETSOLIDPENPAT (0)\par     ELSE\par       SETSOLIDPENPAT (15)\par     END IF\par     MOVETO (C * 4, R * 4)\par     LINETO (C * 4, R * 4)\par   NEXT\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! InitGraphics - Set up for graphics\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SUB INITGRAPHICS\par HGR\par SETPENMODE (0)\par SETSOLIDPENPAT (15)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! NextGeneration - Calculate the next generation\par !\par ! Parameters:\par !    Grid1 - array containing the current state of the spots\par !    Grid2 - array containing the new state of the spots\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB NEXTGENERATION(GRID1() AS INTEGER , GRID2() AS INTEGER )\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM R AS INTEGER , C AS INTEGER :! Row and column number.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM N AS INTEGER :! Number of occupied surrounding cells.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FOR R = 1 TO 20\par   FOR C = 1 TO 20\par     N = GRID1(C - 1, R - 1) + GRID1(C, R - 1) + GRID1(C + 1, R - 1) + GRID1(C - 1, R) + GRID1(C + 1, R) + GRID1(C - 1, R + 1) + GRID1(C, R + 1) + GRID1(C + 1, R + 1)\par     IF N = 3 THEN\par       GRID2(C, R) = 1\par     ELSE IF N = 2 THEN\par       GRID2(C, R) = GRID1(C, R)\par     ELSE\par       GRID2(C, R) = 0\par     END IF\par   NEXT\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par As you can see, the only difference between sharing an array and passing it as a parameter is that you need to include the type of the array when you declare the parameter.\par Parameters can be passed by value or by reference, as you learned in the last lesson. Arrays are always passed by reference, since you can\rquote t use the array in an expression. You can use an element of an array, of course, and we\rquote ve done that in many of our programs, but you can\rquote t add 1 to an array as a whole entity, nor can you do any other operation on an entire array. This is a very important point. It means that every array in BASIC can be changed by any subroutine you pass the array to\emdash a fact we use in the Life program, since the NEXTGENERATION subroutine fills in the GRID2 parameter with the appropriate values for the next generation in the game.\par You might be tempted to make copies of array parameters in subroutines and functions, and there are certainly situations where that makes sense. Unlike the case with variables, though, making a copy of an array has a serious downside. When you make a copy of a variable in a subroutine the copy doesn\rquote t use much memory. The exact amount depends on the kind of variable and the name, but it\rquote s generally about a dozen bytes. If you make a copy of the GRID1 array, though, the values in the array use 22x22x2 bytes of memory, or 968 bytes total. It takes time to set up that array, and the array itself eats up a significant chunk of memory. Copying the array from the one passed as a parameter to the local variable also takes time. It\rquote s not something to do lightly!\par You might think the impact of copying an array would not be a big deal. You\rquote d be wrong. Take a close look at this new version of Life. In the original version of the program NEXTGENERATION calculates the new grid values, then copies them back into the original grid. In this version NEXTGENERATION doesn\rquote t copy the values from GRID2 to GRID1; instead, the main program draws the values directly from GRID2, then calls NEXTGENERATION again, this time passing GRID2 as the current generation. NEXTGENERATION creates the new grid in GRID1, which the main program draws, completing a two-generation cycle. That\rquote s why the main loop goes from 1 to 25 rather than 1 to 50, but still draws the same number of generations.\par That simple change speeds the program up by about 12%. That may not seem like much, but over the space of an hour you would save seven minutes\emdash and seven minutes is a long time to wait!\par \par Problem 6.6. Redo problem 6.5, this time using a subroutine named ADD to add two matrices.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v arrays}{\rxe arrays}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244577}{\*\bkmkend arrays}Lesson Seven \endash  Types and Constants{\*\bkmkend _Toc444244577}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {So far we\rquote ve concentrated on the mechanics of BASIC programs. We\rquote ve learned how programs execute and how to use loops and subroutine calls to change the normal flow of a program. Along the way you\rquote ve become used to three kinds of variables, INTEGER, SINGLE and STRING. In this lesson we\rquote ll discuss the other built in types in more detail, learn how to declare types of our own, and learn about a powerful new kind of variable, the record. We\rquote ll also learn about constants, which offer a shortcut for an idea we\rquote ve already used occasionally in the course.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244578}Simple Types and Named Types{\*\bkmkend _Toc444244578}\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244579}The Six Built-in Types{\*\bkmkend _Toc444244579}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Back in Lesson 2 you got a very brief introduction to the built-in types in BASIC when you learned that you could use the DIM statement to create integer variables using the type INTEGER, single-precision floating point values using SINGLE, and strings using STRING. There are three other predefined types in GSoft\~BASIC. All six types are shown in the table.\par \par }\pard \s28\li720\ri720\sb40\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx2160\tx3600\tx5040\tx6480\adjustright {name\tab character\tab size\tab minimum\tab maximum\par }\pard \s28\li720\ri720\sb40\widctlpar\tx2160\tx3600\tx5040\tx6480\adjustright {BYTE\tab ~\tab 1\tab 0\tab 255\par INTEGER\tab %\tab 2\tab -32768\tab 32767\par LONG\tab &\tab 4\tab -2147483648\tab 2147483647\par SINGLE\tab !\tab 4\tab 1.2E-38\tab 3.4E38\par DOUBLE\tab #\tab 8\tab 2.3E-308\tab 1.7E308\par STRING\tab $\tab 1 to 32768\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v UNIV type}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v types\:UNIV}}}{There is also a strange seventh type called UNIV. It is only used as the type of a parameter for some Apple\~II}{\fs20 GS}{ tools. Unlike the other variable types, you can pass any four-byte value at all as a value to a UNIV tool parameter.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v INTEGER type}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LONG type}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v BYTE type}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v types\:INTEGER}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v types\:LONG}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v types\:BYTE}}}{The first three types are all different kinds of integer values. As you know by now, this means the value can be a whole number, like 43 or -2, but not a value that lies between whole numbers, like 3.14159 or 2.56. Of the three, INTEGER appears in virtually every implementation of BASIC ever written, LONG appears in most implementations of BASIC that are not restricted in size because they are on a small machine, and BYTE is rather rare. It appears in GSoft\~BASIC to support certain values used by the Apple\~II}{\fs20 GS}{ toolbox.\par {\*\bkmkstart reals}SINGLE and DOUBLE are the types for floating-point numbers. SINGLE is almost always implemented in BASIC, although the exact range of values varies. Applesoft BASIC, for example, uses 5 bytes for each SINGLE value. Most implementations of BASIC that are not implemented on small computers with limited memory also support DOUBLE, which works just like SINGLE but gives a larger range for exponents and more digits of precision. In GSoft\~BASIC, SINGLE numbers offer seven digits of precision, while DOUBLE numbers offer fifteen digits.\par The whole concept of precision may seem a little strange at first. To get an idea what it means think about paying for something with money. The smallest denomination of money used in the United States is a cent, which is 0.01 dollars. We can\rquote t express money with more precision than this using actual currency, so values involving a portion of a cent are rounded or truncated. For example, one third of a dollar would be 33 cents, even though we know there is another one third of a cent not accounted for. Floating-point numbers have the same sore of problem, but the precision is limited to a specific number of digits, not a specific value like 0.01. With the seven digits of precision offered by SINGLE numbers you can represent dollar and cent amounts up to $99,999.99, for example; or you can represent the mathematical value \u960\'b9 to six decimals, 3.141593.\par Floating-point numbers also loose overall accuracy as calculations pile on top of each other. Going back to the one-third of a dollar example, if you pay one-third of a dollar three times, you would expect to pay a total of 100 cents. If you actually spend one-third of a dollar three times, though, you will have one cent left. Exactly the same kind of error can pile up as you do calculation after calculation using SINGLE or DOUBLE numbers. Eventually, you may literally see values like 0.9999999 when you know that in theory the value should be 1. There is an entire field of study called numerical analysis that deals with this sort of issue and others related to calculating values on digital computers. We won\rquote t go into this field any further, but if the sort of programs you write need accurate calculations with floating-point numbers you can certainly find a lot of reading material!\par Finally, if you look closely at the table, you\rquote ll notice that the smallest number you can represent with a SINGLE or DOUBLE number is listed as a very small positive number. You can have negative SINGLE and DOUBLE values, of course. The table is showing you how close to zero the number can get. Numbers between the value shown and zero are truncated to zero. The reason this happens is rather complicated; it has to do with the way the numbers are actually stored internally. In a few kinds of programs, though, it\rquote s important to know that a number will drop to zero if it gets too small, so you need to know this can happen as you plan your programs.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SINGLE type}{\rxe reals}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe DOUBLE type{\rxe reals}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe types\:SINGLE{\rxe reals}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe types\:DOUBLE{\rxe reals}}}{\par {\*\bkmkend reals}The last built-in type is the STRING, which you\rquote ve already learned about.\par \par Problem 7.1. Double-precision floating-point numbers require twice the memory of single-precision floating-point numbers, but there is another difference that is sometimes just as important: Calculations with double-precision numbers take more time.\par Write a program that stores 1.2 into one floating-point number and 2.3 into another. Loop over a line that multiplies these and saves the result in a third variable. Use a FOR loop with a LONG control variable so you can loop 100,000 times, which gives a result long enough to time with a watch that displays seconds. Run the program two times, once using SINGLE variables and once using DOUBLE variables, comparing the times.\par Some of the programs in this course may seem rather slow, and you might be tempted to think that compilers are the only way to get adequate speed. For some kinds of programs that\rquote s true, although many programs run fast enough with an interpreted language. An interesting point, though, is that some programs actually run faster using GSoft\~BASIC than they do in ORCA/C or ORCA/Pascal! That\rquote s because most languages on the Apple\~II}{\fs20 GS}{ use Apple\rquote s floating-point package, SANE, to do calculations. SANE does all calculations using 92 bit numbers, even if you only need the precision of SINGLE calculations. GSoft\~BASIC has it\rquote s own floating-point routines which run much faster than SANE because they only do calculations to the required accuracy.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244580}The TYPE Statement{\*\bkmkend _Toc444244580}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v TYPE statement}}}{You can also define your own named types. We\rquote ll find many uses for this as the course goes on, but we already have one good one. We\rquote ve been using true and false values throughout the course in IF statements and loops, and in one case we needed to store a true or false value in a variable. Rather than continuing to piggyback on the INTEGER type we can declare an entirely new one called BOOLEAN, which is the name used for this type of value in many languages, including Pascal. The declaration looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {TYPE BOOLEAN AS INTEGER\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par After this statement there is a new type with the name of BOOLEAN that can be used in DIM statements, parameters and function return values, just like we normally use the six predefined types. In this case we\rquote ve really just defined a new name for INTEGER; any BOOLEAN variable works just like any INTEGER variable. The new name works like a comment, though, reminding us what values we expect to store in the variable.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244581}CONST{\*\bkmkend _Toc444244581}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v CONST statement}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v constants}}}{In a few of our programs we\rquote ve used specific values that we might want to adjust at some later date. A good example is the Life program in the last lesson, where we used 20 for the size of the grid and 50 for the number of generations. It would be reasonable to put these values at the top of the program where we could change them quickly. We could do that easily like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM SIZE AS INTEGER\par SIZE = 20\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There\rquote s another way to do it that combines these two statements into a single line.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {CONST SIZE = 20\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par A CONST statement has another advantage over a variable besides just saving a line, though. You can\rquote t accidentally change the value of a CONST variable anyplace in the program.\par The added organization this offers isn\rquote t very important in a 50 or even a 500 line program, but many programs are thousands of lines long, and in programs that large, any trick to make the program more organized is worth the effort. We\rquote ll start to use CONST values in many of our programs for the remainder of the course.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v true}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v false}}}{One of them will be for BOOLEAN values. Here\rquote s two CONST statements that fit and in glove with the BOOLEAN type from the previous section.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {CONST TRUE = 1\par CONST FALSE = 0\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par If you try these you\rquote ll be in for a surprise, though: You\rquote ll get an error message saying you misused a constant. That\rquote s because these constants are actually already declared! GSoft\~BASIC loads the declarations for the Apple\~II}{\fs20 GS}{ toolbox automatically, and these two constants are declared in the toolbox header file. You can find a list of all of the constants, types and subroutines in the tool interface file by editing the tool interface file itself, which is named GSoftTools.int.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart records}{\*\bkmkstart _Toc444244582}Records Store More than One Type{\*\bkmkend _Toc444244582}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Programs are written to manipulate information of one sort or another. So far I\rquote ve deliberately kept the kind of information we were using simple, using just a few numbers or a few strings. In many real programs, though, you will mix several kinds of values together to represent a single entity, or it will make more sense to use names rather than array indices to combine values.\par Let\rquote s look at a classic example, a mailing list. Each entry in a mailing list contains a name, address, city, state and zip code. You might break it down into first name and last name or add more information, but for our example this is enough! If you create a program to handle up to 100 addresses, you would end up with declarations like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {CONST SIZE = 99\par \par DIM NAME(SIZE) AS STRING\par DIM STREET(SIZE) AS STRING\par DIM CITY(SIZE) AS STRING\par DIM STATE(SIZE) AS STRING\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM ZIP(SIZE) AS LONG\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Well, this works, but it\rquote s cumbersome. Fortunately there is a better way. We can create a new type using a record that contains each of the various pieces of information in a named field, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {TYPE ADDRESS\par   NAMEFIELD AS STRING\par   STREET AS STRING\par   CITY AS STRING\par   STATE AS STRING\par   ZIP AS LONG\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END TYPE\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par ADDRESS is now a type, just like INTEGER. The various values within the ADDRESS type are called fields; they can be any type at all, including other records. You can use the new ADDRESS type to declare variables or parameters. There is one restriction, though: You cannot return a record from a function. Later we\rquote ll learn an easy way around this restriction using pointers.\par The name of the first field may seem a little odd. Why not just call it NAME? Looking way back to Lesson 1 you can find the answer: NAME is a reserved word, so we can\rquote t use it for a field name, just as we can\rquote t use it for a variable or subroutine name.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v arrays\:of records}}}{Returning to the address book, we can declare an array of addresses like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM ADDRESSES(SIZE) AS ADDRESS\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are two names involved for each value, the name of the variable and the name of the field within the record. You need to use both names separated by a period. Here\rquote s a short section of code that sets up one entry in the ADDRESSES array.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {ADDRESSES(I).NAMEFIELD = "Byte Works, Inc."\par ADDRESSES(I).STREET = "8000 Wagon Mound Dr. NW"\par ADDRESSES(I).CITY = "Albuquerque"\par ADDRESSES(I).STATE = "New Mexico"\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {ADDRESSES(I).ZIP = 87120\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You can use fields from the record in expressions just like variables. For example, you can print a field like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT ADDRESSES(43).CITY\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You can assign one record to another without stepping through each field, as in this set of assignments that might be used in a bubble sort to sort records by zip code.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {IF ADDRESSES(I).ZIP > ADDRESSES(I + 1).ZIP THEN\par   DIDSWAP = TRUE\par   TEMP = ADDRESSES(I)\par   ADDRESSES(I) = ADDRESSES(I + 1)\par   ADDRESSES(I + 1) = TEMP\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par That\rquote s the only operation you can perform on an entire record, though. You can\rquote t add, subtract, or even compare records; for those kinds of operations you need to work with a specific field. For example, the IF statement shows a comparison of the zip code fields in our address record.\par \par Problem 7.2. Write a program that declares a two variables of type ADDRESS, as shown above. Fill one in with your name and address. After filling it in, copy this record to the second record variable, then print the values from that record.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v TYPE statement\:records}{\rxe records}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v records}{\v }{\rxe records}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe END TYPE statement{\txe {\i\v See}{\v  TYPE statement}}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart files}{\*\bkmkstart _Toc444244583}{\*\bkmkend records}Lesson Eight \endash  Files{\*\bkmkend _Toc444244583}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {A lot of fun and useful programs never save a file to disk or read from a disk file. Arcade games, some adventure games, many scientific and engineering calculations, and all of the programs you have written so far in this course all read data from the keyboard or do calculations based on internal values. On the other hand, the vast majority of programs do read and write disk files. Spread sheets, word processors, data base programs, many games, GSoft\~BASIC itself\emdash all of these programs read and write files. This lesson introduces files as used in GSoft\~BASIC.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244584}An Overview of the Process{\*\bkmkend _Toc444244584}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Any program that makes use of a file has to go through three distinct steps. They are similar to the steps you go through when you use a program like a word processor, so we\rquote ll compare the steps to using a word processor, but don\rquote t get too carried away with the analogy\emdash as the text will point out, there are significant differences as well as similarities.\par The first step in using a word processor is to either create a new document or open an existing document. That\rquote s also the first step in using a file from GSoft\~BASIC. Whether the file already exists or is a completely new file, though, we always call the process opening a file. You must always open a file before doing anything else to the file.\par Once a word processing file is open and before you close the file, you generally edit the file. There are exceptions, of course. Sometimes you open a word processor file to read the file or print the file, and don\rquote t make any changes at all. The same is true when you are programming. Once the file is open you either read from the file or write to the file.\par The third and final step is to close the file. When you are using a word processor, you close the window that displays the file. Closing the window doesn\rquote t mean you exit the word processor, it simply means you are through with the particular document you have closed. There may be other documents open, or you might open another document after closing the first one. Again, files in GSoft\~BASIC work the same way. The only real difference is how a document is saved. With the word processor, changes are not saved to disk until you issue a save command. In BASIC, information you write to a file is saved as soon as you issue the command that writes that piece of information.\par One big difference between a word processor and GSoft\~BASIC is that GSoft\~BASIC files are opened for reading or writing, but generally not both. Let\rquote s look at how this would work if we were writing a word processor.\par When the user opens a document in the word processor, the program would open the document on disk, read the entire document into memory, and close the disk file. From that point on it\rquote s the copy in memory the user sees, prints, and changes. Nothing is happening to the disk file at all, and in fact, most word processors will let you eject the disk while the file is open. The disk file isn\rquote t needed again until the file is saved, and even then the file might be saved to a new file in a new location. If that happens the original disk file isn\rquote t needed again at all.\par When the word processor document is saved, the program opens the file. If the updated document is replacing the original copy on disk the next step is a little scary: Everything in the original file is actually deleted! At this point the file the program is about to write to is empty, whether it is a new file in a new location or whether the program is replacing an old file. The word processor writes the entire contents of the file, then closes the file.\par Thinking about this process, the word processor actually went through the process of using the file twice. The first time the process was open\emdash read\emdash close, and the second time it was open\emdash write\emdash close. That\rquote s typical, although as we will see in this lesson it isn\rquote t universal. As it turns out, the way the file is opened is actually quite important. You always open a file for input, output, or both, and its generally easier to write the program, and the program runs faster, if you don\rquote t open the file for both input and output at the same time.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244585}Opening a File for Output{\*\bkmkend _Toc444244585}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:opening}}}{In theory files can be of any length. Basically, that means that there is no fixed limit to the number of things you can put in a file. Of course, there\rquote s no free lunch. The information you stuff into a file has to be saved somewhere. In the case of the Apple\~II}{\fs20 GS}{ it is saved on one of the devices GS/OS handles. This is usually a floppy disk or hard disk, but it can also be a network, a tape drive, a printer, or anything else that GS/OS recognizes.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v OPEN statement}}}{To write a value to a file you need to open the file for output. You open a file with the OPEN statement, which has this general format:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {OPEN "myfile" FOR OUTPUT AS #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:file names}}}{The file name is a string. In the samples in this course you\rquote ll end up using a string constant, like \ldblquote myfile\rdblquote  in the example, but you can use a string variable as well.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:file number}}}{The number at the end is called the file number. You can use any integer value from 1 to 32767 as a file number, and just as with the file name, you can also use a variable. It\rquote s this number that identifies the file you have opened; you will use this number in every command that refers to this file from the time you open it until the time you are finished with the file and close it.\par You can open more than one file at a time, so long as the file number you use for each file is unique. Other than the obvious limit of 32767 files imposed by the number of available file numbers, BSAIC doesn\rquote t limit the number of files you can have open at one time. Memory and the limits of the GS/OS disk operating system used by the Apple\~II}{\fs20 GS}{ will have a bigger impact than the number of available file numbers.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244586}Writing to a File{\*\bkmkend _Toc444244586}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:writing with PRINT}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v PRINT statement\:in files}}}{There are several ways to write to a file, and we\rquote ll cover the most important ways as we go along. The simplest way to write to a file, though, is to use PRINT or PRINT USING, writing more or less the same way you would write to the computer screen. The only difference is the addition of the file number, which tells the program both that you are writing to a file instead of to the screen, and which file you are writing to. For example, the command\par \par PRINT #1, "Hello, world."\par \par }\pard \s28\sb40\widctlpar\adjustright {writes the string to file number 1.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {All of the formatting you are used to works with files just as well as it works on the computer screen.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244587}Closing a File{\*\bkmkend _Toc444244587}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:closing}}}{Once you finish writing the file you need to close it. This is an important step. In many cases a computer language buffers the output, saving the information you think is being written to disk in memory until a significant amount of information builds up, then writing it all at once. The GS/OS disk operating system does the same thing. This makes file output enormously faster than it would be without the buffering, but it also means that some of the information that you think has been written to the disk file may still be in memory when the program finishes. Among other things, closing the file flushes the buffer, writing any buffered information to the disk file.\par GSoft\~BASIC does use file buffering, although you won\rquote t find that fact spelled out in so many words in the documentation. Like many aspects of programming, the reference manual doesn\rquote t explicitly state facts about internal details that don\rquote t matter when you are writing programs. You are supposed to close the file, and if you don\rquote t it\rquote s a bug in your program\emdash and, in the eyes of people who write operating systems and computer languages, it\rquote s your problem if you break the rules, not theirs! This may seem like a heartless attitude, but there is a reason: details like whether files are cached in a buffer and how big the buffer actually is change from one version of a program to another to take into account problems encountered in programs, changes in operating systems, and even changes in how people use computer languages. By not documenting details like these, or clearly stating that these details can change, the people who write languages are giving themselves some freedom to maneuver when they need to make changes.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v CLOSE statement}}}{Closing a file is pretty simple. You use the CLOSE command with the file number for the file you want to close.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {CLOSE #1\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244588}Writing Our First File{\*\bkmkend _Toc444244588}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Let\rquote s put all of this together to create a program that writes ten numbers to a file.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Write the numbers 1 to 10 to a file on ten separate lines.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Open the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {OPEN "temp" FOR OUTPUT AS #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Write the numbers.\par FOR I% = 1 TO 10\par   PRINT #1, I%\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Close the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CLOSE #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This program creates a new file named temp on your disk drive and writes ten lines to the file. Each line has a number. The file itself is a text file. You can open the file using any program that can read text files, including the editor you use with GSoft\~BASIC.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244589}Reading from a File{\*\bkmkend _Toc444244589}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:opening for input}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v OPEN statement}}}{Reading a file is just as easy. To read from a file, you first have to open it for input. The OPEN statement is almost identical to the one you used to write a file, but instead of opening the file for OUTPUT, you open it for INPUT.\par Here\rquote s a program that opens a text file named temp, reads the first ten lines, and prints them to the screen. The file named temp must exist; if it doesn\rquote t, you\rquote ll get an error when you run the program.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Read ten lines from the file TEMP and print the lines.\par \par ! Open the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {OPEN "temp" FOR INPUT AS #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Write ten lines from the file.\par FOR I% = 1 TO 10\par   LINE INPUT #1, LINE$\par   PRINT LINE$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Close the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CLOSE #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You can open a file for input or output, do some operation on the file, close it, and then reopen it to do some other operation, as this program shows. It opens the file temp and adds a new number to the file before rewriting the file. The only restriction is that the file can\rquote t be opened twice unless you close it first. You can open several files at the same time, but they must all be distinct files.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Read ten lines from the file TEMP, add an eleventh line,\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM and write the results back to the file.\par \par DIM NUMBERS(9) AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Open the file for input.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {OPEN "temp" FOR INPUT AS #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Read the lines from the file.\par FOR I% = 1 TO 10\par   LINE INPUT #1, NUMBERS(I% - 1)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Close the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CLOSE #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Open the file for output.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {OPEN "temp" FOR OUTPUT AS #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Write the old lines to the file.\par FOR I% = 1 TO 10\par   PRINT #1, NUMBERS(I% - 1)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Write a new line to the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT #1, 11\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Close the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CLOSE #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Problem 8.1. We used numbers in the example, but the file contains ASCII characters. You can see this for yourself by writing a program that writes strings to the file instead of numbers. Writing the names of the months in the year to a file named temp. Next, open the file for input, read the strings from the file, and print them.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart filenames}{\*\bkmkstart _Toc444244590}File Names, Directories, Path Names and Folders{\*\bkmkend _Toc444244590}\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244591}File Names, GS/OS and ProDOS{\*\bkmkend _Toc444244591}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {So far we\rquote ve used the less than descriptive name temp for all of our files. As you start writing larger programs you\rquote ll want to use more descriptive names, so it helps to know what the rules are.\par GSoft\~BASIC runs under the GS/OS disk operating system, and supports all file names that the disk operating system itself supports. As far as GSoft\~BASIC is concerned, a file name is just a string it sends to the operating system. If GS/OS likes the name, GSoft\~BASIC is happy, too.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ProDOS disks}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ProDOS}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GS/OS}}}{GS/OS is actually rather flexible about its rules for file names. It grew out of an older disk operating system called ProDOS, and still supports ProDOS format disks. ProDOS can still read and write GS/OS disks, too, although ProDOS can\rquote t properly handle files with a resource fork. Because of this heritage, GS/OS still uses the file name rules for the ProDOS operating system whenever it reads from or writes to ProDOS disks. The rules for ProDOS file names are:\par \par }\pard \s28\fi-360\li720\sb40\widctlpar\adjustright {1.\tab A file name starts with an alphabetic character.\par 2.\tab The remainder of the file name is made up of alphabetic characters, numeric digits, and periods.\par 3.\tab A file name must have at least one character, and no more than 15 characters.\par 4.\tab GS/OS does not distinguish between uppercase characters and lowercase characters. In other words, the file names MYFILE, MyFile and myfile all refer to the same file on disk.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v HFS disks}}}{GS/OS supports other disk formats, too, like the HFS format disks that are used by the Macintosh operating system. If you are reading or writing files on a disk that is not formatted for ProDOS you can use the file name rules that apply for that kind of disk. For HFS, for example, the rules are rather broad: a file name consists of 1 to 31 characters, and you can\rquote t use a colon. We\rquote ll stick to ProDOS format names in this course, both because it\rquote s the dominant file system on the Apple\~II}{\fs20 GS}{ computer and because all ProDOS names are also valid on HFS disks, and ProDOS and HFS are the only two file systems that are widely used on the Apple\~II}{\fs20 GS}{.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart pathname}{\*\bkmkstart _Toc444244592}Path Names{\*\bkmkend _Toc444244592}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The remainder of this section deals with how folders are named and how path names are used to specify particular files on the computer. If you\rquote re used to the name directory instead of folder, just keep in mind that they are just two different named for the same thing.\par I will assume that you are already familiar enough with your computer to move around using a desktop program like the Finder. In the Finder, the first thing you see on the desktop is a list of the disks, lined up along the right-hand side of the screen. Below each disk is a name. To give the name of a disk in a BASIC program you use exactly the same name, but you start it off with a colon character. For example, the disk where the GSoft\~BASIC program is located is called GSoft. In a file name, you would type\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {:GSoft\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Double-click on the disk icon and the Finder will open a window showing the various files and folders. For example, one of the folders is called Samples. If you want to look at a file in the samples folder, you add the name of the folder to the disk name, separating the two with another colon, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {:GSoft:Samples\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par If the folder contains other folders, you can repeat this process, adding the new folder name to the name you have already accumulated.\par Eventually, you will get to the right folder, and you will see the file you want to read. Let\rquote s assume that you want to read the file Float from the Benchmarks folder, which is itself in the Samples folder. Once again, you tack the file name onto the names you already have, using a colon to separate the file name from the name of the disk and folder.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {:GSoft:Samples:Benchmarks:Float\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {The result is called a full path name. It specifies exactly what file you want to read or write.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244593}Partial Path Names and the Default Prefix{\*\bkmkend _Toc444244593}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {So far our programs just gave a file name. Of course, the computer still writes to a specific place on the disk. When you leave off the name of the disk and any folders, the file name is added to a default directory called prefix 8. Prefix 8 is also called the default prefix. In a desktop program you set the default prefix by using one of the file related commands, like open. When you click on the disk button, it changes the default prefix to the name of a new disk. Opening a folder on the disk adds the name of the folder to the default prefix. Closing a folder, of course, removes the name of the folder from the default prefix. The computer remembers this location, and uses it for all files that only have a file name.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:path names}{\rxe pathname}}}{\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244594}{\*\bkmkend pathname}Names in Programs{\*\bkmkend _Toc444244594}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The process of forming names for the OPEN statement, then, is fairly simple. To get at a file in the default prefix, just use the file name. If the file is in a folder in the default prefix, give the name of the folder, followed by the file name, using a colon to separate the two. If you need to give the name of the disk, too, start off with a colon and the name of the disk, then add the folders and file names, again separated by colons.\par If this is new to you, the best thing to do is to practice. The easiest way to practice is with the CAT, EDIT and PREFIX commands, which you can use from the shell. The PREFIX command sets the default prefix. To set the default prefix to :GSoft, for example, you would use\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {prefix :gsoft\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The CAT command catalogs the current prefix, showing you what files and folders are there. Folders are marked with a file type of DIR in the second column.\par You\rquote ve used the EDIT command all through this course to edit programs, but so far you\rquote ve used it with file names or to edit the program that is already in memory. The command\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {edit :gsoft:samples:benchmarks:float\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {will load and edit a file using a full path name.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244595}Colons and Slashes{\*\bkmkend _Toc444244595}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {ProDOS uses a slash where GS/OS uses a colon to start path names and separate the names of files, folders and disks. The only difference between the slash and colon is the character used; they do exactly the same thing. One of the design goals of GS/OS was to allow Macintosh format HFS disks to be used directly from an Apple\~II}{\fs20 GS}{ computer, though, and HFS uses colon for a separator. Worse, HFS allows you to use a slash as part of a file name. Obviously something had to give.\par The GS/OS design team decided to switch from the slash character to the colon character, but they actually added the colon without getting rid of the slash. You can still use the slash character as long as you are using ProDOS format disks. Frankly, I use it instead of the colon when I am using an Apple\~II}{\fs20 GS}{. I think it is easier to read a path name with slashes, which are easier to pick out of text than colons, and the slash is easier to type because it doesn\rquote t involve using the shift key.\par But that leaves a lingering problem. If both slashes and colons are allowed, how does GS/OS deal with names on HFS disks that contain slashes? The answer is pretty pragmatic. As GS/OS scans a file name, it looks for the first character that is either a slash or a colon. Once one of these characters is found, that character is used for the separator for the entire path name.\par \par Problem 8.2. Insert your GSoft\~BASIC disk and use the PREFIX command to set the current prefix to :GSoft:Samples:Benchmarks. Verify that you did it right by using this command to open the Float program:\par \par }{\f6\fs20 edit float}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:file names}{\rxe filenames}}}{\f6\fs20 \par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244596}{\*\bkmkend filenames}Finding the End of a File{\*\bkmkend _Toc444244596}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:end of file}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v EOF function}}}{In real programs it\rquote s rare to actually know how many values are in a file before you open the file and look. When a program reads a file it uses a function called EOF to find the end of a file. The EOF function takes a file number as a parameter, and returns a Boolean value. The value returned is true if the program has reached the end of the file and there is nothing left to read, and false if there is still information in the file.\par You can\rquote t open and file for input if the file does not exist. If you try, the program will stop with a run-time error. On the other hand, it is perfectly legal for a file to exist, but not have anything in it. You can create a file with no values by opening it for output but never writing any values to the file. In the case of an empty file, EOF is true right after you open it.\par Putting all of these rules together, we will change our sample program from a few sections back to read the temporary file of numbers without knowing in advance how many numbers are in the file. That\rquote s a good thing, since there could be ten or eleven, depending on which of the sample programs you ran most recently!\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Read any number of lines from the file TEMP and print the\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM lines.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Open the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {OPEN "temp" FOR INPUT AS #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Read the lines until we hit the end of file mark.\par WHILE NOT EOF (1)\par   LINE INPUT #1, LINE$\par   PRINT LINE$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Close the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CLOSE #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Problem 8.3. At this point, you have the tools to merge two files. The basic method is simple: you open one file for input and another for output. You read values from one file, writing them to the other, until you get to the end of the first file. Once the first file is copied you can close it. Next you use OPEN to open the second file, then repeat the process of reading and writing values. The only difference is that you don\rquote t open the output file a second time. Once the second file is copied, you close both files.\par Write a program that writes the integers 1 to 10 to a file called FILE1.\par Write a second program to create a second file, called FILE2, that contains the integers 11 to 20.\par Write a third program to read FILE1, writing it to a file called FILE3. It should then read FILE2, adding the contents of FILE2 to FILE3. The program should not depend on knowing the length of either file.\par Check your work with yet another program that reads the values in FILE3 and writes them to the text screen.\par \par Problem 8.4. Some folks like uppercase, and some like lowercase. Let\rquote s assume that, for some reason, you want to convert the source code for one of your programs to lowercase characters. Change the sample program so it reads a line, converts all of the characters to lowercase, and then writes the line to a new file. Since the new file is a text file, you can open it with a text editor to see if the program worked. Don\rquote t try to check the file from GSoft\~BASIC using the EDIT command, though, since GSoft\~BASIC will convert most of the program back to uppercase characters in the process of reading the program!\par Keep in mind that you can save a program several ways using GSoft\~BASIC. This program will not work on a program saved with the SAVE command; you must save the program using SSAVE or TSAVE. All of the sample files on the solutions disk are saved with SSAVE, so you can use any of those files as input to your program.\par \par Problem 8.5. One way publishers measure the size of an article or book is by counting the number of words. Of course, they count them by hand, right? Well, you can do it better.\par Write a program that asks for the name of a text file. Scan the file, counting the words. For our purposes, a word is defined as any sequence of characters that starts with an uppercase or lowercase character. It includes all of the characters up to the next character that is not an uppercase or lowercase character or a digit. For example, all of the following are words:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {word\tab stuff\tab V1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par On the other hand, a number, like 9.6, is not a word.\par As an added bonus, keep track of the lengths of the words. Use an array to track how many words of each length appear in the file. Lump any words longer than 30 characters together into a single element in the array, counting them as if the word was actually 30 characters long. That\rquote s long enough to handle any word in the English language.\par After scanning the file, print the number of words, the number of characters, the average length of a word, and a table showing how many times a word of each length appeared in the file. \par Be sure to use long integers for your character counters. After all, an integer can only hold values up to 32767. Each of these lessons has 30,000 to 40,000 characters, not counting the solutions to the problems.\par Note: Be careful! You can\rquote t divide the character count by the number of words to get the average word length, because the character count includes spaces, commas, periods, and so forth! You must either compute the average from the word length array or keep a separate character counter for characters that appeared in a word.\par Test your program by typing the following text into a file and saving it to disk. If you\rquote re feeling lazy, this file is on the solutions disk; it\rquote s called WordTest.\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\f6\fs20 How, now, brown cow.\par single\par i c a b\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\f6\fs20 thisisaverylongwordtotesttoseeiflongwordsarecaught\par }{\par Leaving out the histogram entries where there were no entries, the results should be:\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\f6\fs20 83 characters.\par 10 words.\par 4 lines.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\f6\fs20 The average word length is 5.4.\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\f6\fs20   length     number\par   ------     ------\par   1          4\par   3          3\par   5          1\par   6          1\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\f6\fs20   30         1\par }{\par One final note of caution about this problem. In terms of the complexity of the logic involved, this is the hardest problem so far in this course. It\rquote s worth spending some time on it to test and develop your skills. If you get tangled up, though, don\rquote t hesitate to scrap your program and try another approach. There are relatively easy ways to make this program work, and very hard ways. Don\rquote t get stuck struggling with a hard way.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244597}Printing with Files{\*\bkmkend _Toc444244597}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v printing}}}{It is possible to write a driver for almost any input or output device that you can use with GS/OS. One of the most useful examples is one that comes with GSoft\~BASIC called .PRINTER. As the name implies, this driver is used to send information to printers.\par If you have a printer, you have probably used it with two kinds of programs. Desktop programs use a Print\u8230\'c9 command from the File menu which brings up a dialog filled with printer options. This method of printing is great as far as it goes, but it has severe drawbacks for simple text based programs. AppleWorks classic and Applesoft\~BASIC are examples of the other way to use a printer. These programs only send text to the printer, and they generally don\rquote t support fonts. The .PRINTER driver works the same way.\par You need to install the .PRINTER driver before you can use it. You\rquote ll find instructions in the GSoft\~BASIC reference manual. Once it is installed, using it is a snap. You simply open a file named .PRINTER for output and print. The only real trick is ejecting pages, which you can do by sending the character CHR$(10) to the printer. Here\rquote s an example.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {OPEN ".PRINTER" FOR OUTPUT AS #1\par PRINT #1, "Hello, printer."\par PRINT #1, CHR$(10);\par CLOSE #1\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244598}Binary Files{\*\bkmkend _Toc444244598}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:binary files}}}{So far all of the files we have written and read have contained text. While text files are common and useful, most of the files you deal with aren\rquote t really plain ASCII text files like the ones we\rquote ve dealt with. In fact, even word processor files put other kinds of information into the file. For example, fonts, sizes, underscores, index entries, tab stops and formatting information are all imbedded in a typical word processor file.\par There are several ways to handle all of this information, but the most common is for the programmer to design a way to place the information in the file using bytes, integers or long integers. Since these files contain information that is not simple ASCII text you need some way to distinguish them from text, and some way other than INPUT and PRINT to read and write the files. All of these files are collectively referred to as binary files. There is a binary file type on the Apple\~IIGS, just like there is a text file type. You\rquote ll also find a wide variety of other file types on the Apple\~IIGS; most of these are binary files, although a few, like the source files used by GSoft\~BASIC are actually special purpose ASCII text files.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244599}Opening and Closing Binary Files{\*\bkmkend _Toc444244599}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v OPEN statement}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:opening}}}{You open a binary file for BINARY input and output, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {OPEN "temp" FOR BINARY AS #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Unlike text files opened for INPUT or OUTPUT, binary files are always open for both input and output. If the file already exists, reading will start with the first value in the file, and writing will begin by overwriting the first value in the file. Just as with opening a text file for OUTPUT, opening a binary file that doesn\rquote t exist creates a new, empty file.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v CLOSE statement}}}{The CLOSE command closes a binary file the same way it closes text files.\par If you recall, I said opening a file for both input and output was generally harder to deal with and less efficient than opening a file for one or the other. You\rquote ll learn some of the intricacies of dealing with reading and writing to the same file as you go through this lesson. The one big efficiency tip for dealing with binary files is to clump read and write operations so that you\rquote re not constantly switching between one and the other. The reason has to do with the way files are buffered. When you write a value to the file, it isn\rquote t really written right away; instead, the value is stored in an internal buffer. When the buffer is full the entire buffer is written in one chunk. This seems minor, but it can make disk output faster by a factor of 10 to 20! The same thing happens when you read a value. Actually, and entire buffer full of information is read into memory. On your next read, the value is already in memory, so it takes less time to read. If you constantly switch between reads and writes these buffers have to be flushed, either writing a small amount of information to disk or dumping all of the information in the read buffer. That causes the program to slow down considerably.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244600}Writing Binary Files{\*\bkmkend _Toc444244600}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The first example of file output in this lesson was writing the numbers 1 to 10. Let\rquote s return to that example to see how it would work with a binary file.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Write the numbers 1 to 10 to a binary file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Open the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {OPEN "temp" FOR BINARY AS #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Write the numbers.\par FOR I% = 1 TO 10\par   PUT #1, , I%\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Close the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CLOSE #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v PUT statement}}}{As you can see, the PUT statement looks a lot like a PRINT statement. There are some differences, though.\par First, there are two commas. The missing piece of information between the commas is there so you can say where you would like the value to be written in the file. We\rquote ll return to that field when we look at random access files later in this lesson; it works the same way for both binary and random access files. If you leave the value out, as we\rquote ve done, the PUT statement writes the information to the next available spot in the file. If you\rquote re writing a new file, as we are here, the information is appended to the end of all of the information already in the file. That\rquote s exactly what happened with the text files from the earlier examples.\par The other difference is that PUT will only write one value at a time, and that value must be a variable. The technical term is l-value, which stands for the left-hand value in an assignment statement. You can use anything that you could assign a value too, but you are not allowed to use anything that must be calculated or any constants. Because of this rule these two statements are illegal.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PUT #1, , 4 :! illegal\par PUT #1, , I% + 1 :! illegal\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The value that is actually written to disk is written in the same format it is stored in memory. That has two advantages over the text file we wrote earlier. First, a lot of time is saved because the number doesn\rquote t have to be converted from its internal binary format to a series of characters and back again. Second, the values are usually smaller, so binary files take less space. A binary representation of an integer value requires the equivalent of two characters worth of space. \ldblquote Aha,\rdblquote  you think. \ldblquote The character version only took one character of space!\rdblquote  Well, yes and no. First, the text version of our program also had to use at least one more character to separate the numbers. In our example it was an end of line mark. That ties the two methods for the values 0 to 9. Even our simple example had a value of 10, though, so with the end of line mark the text version of the file was one byte longer than the binary version. And you have to admit that only ten values even tie binary files, and in most applications you will use lots of values that need more than one character to represent the value.\par There\rquote s a third advantage of binary files over text files when floating-point numbers are involved. Unlike integer values, it\rquote s very difficult to precisely convert floating point values from their internal binary representation to a text representation and back again and end up with exactly the same value you started with. At the very least it takes a lot of text digits. Binary files don\rquote t have that problem. When you write a value to a binary file and read it back into a variable, you\rquote re guaranteed to get the same value you originally wrote.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244601}Reading Binary Files{\*\bkmkend _Toc444244601}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GET statement}}}{Reading values from a binary file is the mirror image of writing them. You use GET instead of PUT, but other than that everything is the same. Here\rquote s an example that reads the file of integers created by the last sample.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM Read numbers from a binary file and print them.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Open the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {OPEN "temp" FOR BINARY AS #1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Read and print the numbers.\par WHILE NOT EOF (1)\par   GET #1, , I%\par   PRINT I%\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! Close the file.\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CLOSE #1\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244602}Reading and Writing Practically Any File{\*\bkmkend _Toc444244602}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Every file on every modern desktop computer, and almost any other computer, is ultimately made up of a series of eight-bit bytes. In practical terms this means GSoft\~BASIC can open, read, and write any file you\rquote ll find on an Apple\~II}{\fs20 GS}{ disk. By reading the file as a series of BYTE values, rather than the INTEGER values we used in the examples, you can see the contents of absolutely any file.\par \par Problem 8.6. Write a program that asks for the name of a file, reads the file, and writes it\rquote s contents to the screen as a series of BYTE numbers.\par Try your program on a text file. How are the ends of lines marked?\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244603}More About File Types and File Formats{\*\bkmkend _Toc444244603}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:file types}}}{As you look around at the various files in your computer it\rquote s fair to ask what\rquote s in them and how you can read and write the files from your programs. Unfortunately, the answer in many cases is that you can\rquote t. It\rquote s not a limitation in BASIC itself that keeps you from dealing with the files, but rather a lack of information. To read files you have to have a pretty good idea what the format is, and to write them you have to have a very good idea or very good backups! What\rquote s the exact format for a WordPerfect word processing file? I have no idea.\par There are some places you can go to find information about file types. The single most complete source is }{\i File Type Notes}{, a collection of detailed information about the internal contents of dozens of popular file formats, like AppleWorks classic files and several kinds of graphics files. This document was originally created by Apple Computer, and is still available from the Byte Works, Inc. Sometimes you\rquote ll find file formats in the documentation that comes with a program, although that\rquote s rare. You can find the formats for public formats like TIFF or JPEG graphics files in various books, from various standards organizations, or by searching the Internet. There really isn\rquote t a single repository for all file formats, and there isn\rquote t even a guarantee that the file format has ever been documented. Many programmers rely on internal comments within program source code for documentation of file formats.\par So why are companies so stingy with information about their files? The reasons vary. In some cases they don\rquote t want competitors to be able to read and write their files. You can argue with their logic, but it is a common reason. I think the main reason, though, is simply that it takes a long time to document a file format in a way that someone who is not familiar with the source code for the program can understand, and once the documentation is available, the companies don\rquote t really want to have to deal with the inevitable questions from people trying to use the format. Worse still, myriads of programs floating around creating almost correct files, or files that work with one version of the program but end up failing with a later version, could cause the company a lot of grief in terms of customer support.\par In any case, there are some kinds of files that you simply won\rquote t be able to read or write without spending an enormous amount of time essentially decoding how the file is constructed.\par A second issue is the file type itself. Our programs create either text (TXT) or binary (BIN) files. How do you change the file type, or for that matter, how do you tell what type a file is from inside a program? It turns out that detecting and changing file types is so closely tied to the underlying operating system that most languages don\rquote t have a way to do it. You have to make calls directly to the operating system, in this case using the GS/OS operating systems GetFileInfo and SetFileInfo calls, to detect or set the file type. That\rquote s not something we\rquote ll cover in this course, but you\rquote ll know enough to strike out on your own after the next lesson. The GS/OS operating system is documented in }{\i Apple IIGS GS/OS Reference}{. It was written by Apple Computer and originally published by Addison-Wesley. Reprints are available from the Byte Works, Inc. The whole subject of dealing with GS/OS is also discussed in Toolbox Programming in GSoft\~BASIC. As of this writing it hasn\rquote t been published, but is expected out in 1999, again from the Byte Works, Inc.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart randomaccess}{\*\bkmkstart _Toc444244604}Random Access{\*\bkmkend _Toc444244604}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Let\rquote s say you have a file with five numbers, 1, 2, 3, 3, and 5. Of course, we want a file with a 4 in the fourth spot. On a short file like this one, we could just read the entire file into an array or linked list, make any changes we want, and write the modified file. If you know you have enough memory to work on the file that way, it\rquote s a good choice in any language.\par Of course, in real life, we may not have enough memory to handle a file. It isn\rquote t uncommon to work with a mailing list with several thousand entries, for example. A reasonable sized record for handling the entries would be about 200 bytes long. A 10,000 person mailing list, then, would take 2,000,000 bytes, which is more free memory than you are likely to find on most Apple\~II}{\fs20 GS}{ computers.\par Let\rquote s face it, if you are using a database, you might be willing to wait when you open a file, and wait again when you save the changed file. Asking you to wait while the file is read and written for each change is a bit much, though.\par The obvious solution is to open the file for input and output at the same time. You then scan through the file until you find the value than has to be changed, or, if you already know where the value is, jump right to it. You then read the old value, change it, and write the modified value back to the file.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v OPEN statement}}}{In GSoft\~BASIC you open a file for random access input and output by opening the file for RANDOM. You still give OPEN a file name and a file number. Unlike opening the file for OUTPUT, though, the old contents of the file are not destroyed if it already exists. There is also one new piece of information. Random access files let you jump right to a specific record within the file, and the only way the file system can do this is if it knows in advance how long each record is. The last piece of information is the length of each record.\par Thinking this through, what we\rquote re really doing is turning a file into a kind of array. Each entry in the file is called a record, and each of the records is the same size as every other record in the file. If you know the size of each record, you can jump right to a specific record.\par While random access file records aren\rquote t the same thing as the records you learned to create in the last lesson, in practice it usually makes sense to read and write BASIC record variables from and to the file. After all, if you\rquote re writing individual numbers, there really isn\rquote t much difference between a random access file and a binary file.\par Let\rquote s use the mailing list from the last lesson to see how this works. The record we set up looked like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {TYPE ADDRESS\par   NAMEFIELD AS STRING\par   STREET AS STRING\par   CITY AS STRING\par   STATE AS STRING\par   ZIP AS LONG\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END TYPE\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Opening the file is really the only change between using random access files and binary files, so let\rquote s look at what an OPEN statement would look like for a file made up of this kind of record.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v OPEN statement}}}{OPEN "temp" FOR RANDOM AS #1 LEN SIZE\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are many ways to choose the value for SIZE. In general you want the smallest value that will hold all of the information you are stuffing into each database record. In virtually all cases, random access files are made up of a series of record variables or numbers that all hold the same kind of information, like a file of ADDRESS records. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SIZEOF function}}}{In that kind of situation, the SIZEOF function is a huge help. SIZEOF takes a single parameter, which can be the name of a type, like ADDRESS, or the name of a variable. Either way, SIZEOF returns the number of bytes used by the variable. Putting it to use in our OPEN statement turns the OPEN statement into this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {OPEN "temp" FOR RANDOM AS #1 LEN SIZEOF (ADDRESS)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Unfortunately, it isn\rquote t quite that simple. The problem is that string values don\rquote t occupy a specific amount of space. That\rquote s good and bad. We\rquote ll see the good points in a moment, but first let\rquote s deal with the bad: You can\rquote t tell how large the file records need to be without knowing how long the string values will be.\par To understand what this means, let\rquote s look at exactly how records are stored in a random access file. As long as the record does not contain strings it is simply copied into the file, just like numbers are copied into BINARY files. Strings are actually stored as the location in memory where the string value can be found. When you write a record containing a string to a disk file, this value is converted into an offset past the start of the disk record. If you skip that number of bytes past the start of the record you will find the first character in the string. The string continues until all of the characters have been placed in the file, then a zero byte marks the end of the string. If there is more than one string in the record, the next string starts right after the first, and so on.\par This dump of an actual file shows an ADDRESS record. The address shown is\par \par }\pard \s28\li1440\sb40\keepn\widctlpar\adjustright {Byte Works, Inc.\par }\pard \s28\li1440\keepn\widctlpar\adjustright {8000 Wagon Mound Dr. NW\par }\pard \s28\li1440\widctlpar\adjustright {Albuquerque, NM  87120\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\li360\keepn\widctlpar\adjustright \f6\fs20\cgrid {$000000   14000000 25000000 3D000000 49000000   '    %   =   I   '\par $000010   50540100 42797465 20576F72 6B732C20   'PT  Byte Works, '\par $000020   496E632E 00383030 30205761 676F6E20   'Inc. 8000 Wagon '\par $000030   4D6F756E 64204472 2E204E57 00416C62   'Mound Dr. NW Alb'\par $000040   75717565 72717565 004E4D00 00000000   'uquerque NM     '\par $000050   00000000 00000000 00000000 00000000   '                '\par $000060   00000000 00000000 00000000 00000000   '                '\par $000070   00000000 00000000 00000000 00000000   '                '\par $000080   00000000 00000000 00000000 00000000   '                '\par $000090   00000000 00000000 00000000 00000000   '                '\par $0000A0   00000000 00000000 00000000 00000000   '                '\par $0000B0   00000000 00000000 00000000 00000000   '                '\par }\pard \s29\qj\li360\widctlpar\adjustright {$0000C0   00000000 00000000                     '        '\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The file dump uses hexadecimal values to show the values of the bytes. Hexadecimal numbers use the characters A to F to represent the values 10 to 15; two hexadecimal digits can represent all of the 256 possible values for a byte. The actual values aren\rquote t that important, since you can see a text version of the file dump to the right of the hexadecimal values. In the text version it is easy to see how the four string values come after the record itself, which uses the first twenty bytes. Each of the strings shows up in the record as a four-byte hexadecimal offset. The first value is hexadecimal 14, which is the equivalent of the decimal value 20, telling us that the string starts 20 bytes after the start of the record.\par If you\rquote re head is spinning by now, take heart: The details aren\rquote t that important. The important thing you have to remember is that any record that contains strings needs more space in the file than SIZEOF returns as the size of the record. How much more space? You need to add the length of all of the strings as returned by the LEN function, plus one extra byte for each string to store the zero that marks the end of the string.\par One way to allow for the extra space is to add the lengths of the longest string that appears in each field. Assuming you\rquote ve found the length of the largest string for each field and stored the sum in a variable called STRINGLENGTHS, your OPEN statement would look like this:\par \par }\pard\plain \s29\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {OPEN "temp" FOR RANDOM AS #1 LEN SIZEOF (ADDRESS) + STRINGLENGTHS + 4\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You might want to add more entries to your database later, though, and some of those entries may be longer than the ones already in the database. It\rquote s a good idea to add some extra bytes to allow for longer fields in the future. Here\rquote s the good news about how records are stored: If a record has one exceptionally long string, say a street name, but the other strings are below average length, the strings will still fit in the file records if the }{\i total}{ length is small enough. By using the size of the longest string occupying each field for the size of our records we are building in some extra space, since it is unlikely that any one record will contain the longest string in every one of it\rquote s fields.\par So what happens if the strings are too long? Basically, they are chopped off. Any characters that won\rquote t fit in the file record are dropped, and will be missing when you read the record from the file.\par Reading and writing random access files works just like it does for binary files. The big difference is that you\rquote re more likely to want to read a specific value from the file, so you\rquote re more likely to want to use that second parameter for the GET and PUT statement. Here\rquote s a GET statement that reads the third record from a random access file, placing the value in a record variable named ADDR.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {GET #1, 3, ADDR\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There\rquote s a file on the solutions disk called MailingList. We\rquote ll use this file for all of the problems that deal with random access files. Here\rquote s a program that prints the contents of the mailing list file. It does double duty by showing you how to put all these ideas together into a working program as well as giving you a program that will check your answers for some of the problems. The program itself is also in the solutions disk; it\rquote s called PrintList. Both the program and the data file are in a folder called Lesson.8.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {      REM Write the contents of the file MailingList.\par \par       TYPE ADDRESS\par         NAMEFIELD AS STRING\par         STREET AS STRING\par         CITY AS STRING\par         STATE AS STRING\par         ZIP AS LONG\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {      END TYPE\par \par       CONST SIZE = 200:! Number of bytes in one file record\par \par       DIM ADDR AS ADDRESS:! Address read from the file\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {      ! Write all entries in the file.\par       OPEN "MailingList" FOR RANDOM AS #1 LEN SIZE\par       WHILE NOT EOF (1)\par         GET #1, , ADDR\par         PRINT ADDR.NAMEFIELD\par         PRINT ADDR.STREET\par         PRINT ADDR.CITY;", ";ADDR.STATE;"  ";ADDR.ZIP\par         PRINT\par       WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {      CLOSE #1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Problem 8.7. Write a program that opens the MailingList file and prints the 3rd record from the file.\par Problem 8.8. Write a program that let\rquote s you type new values from the keyboard, then stores those values in a record, writing the record at the end of the current MailingList file. (Be sure to make a copy of the file first!)\par Problem 8.9. The folks in the marketing department keep running across names that are so long that the current record size is causing problems. Write a program that reads the MailingList file and writes it to a new file whose records are ten bytes longer. Check your work with a modified form of the PrintList program that appears in this section as a sample program}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files\:random access}{\rxe randomaccess}}}{.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v files}{\rxe files}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart pointer}{\*\bkmkstart _Toc444244605}{\*\bkmkend files}{\*\bkmkend randomaccess}Lesson Nine \endash  Pointers and Lists{\*\bkmkend _Toc444244605}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244606}What is a Pointer?{\*\bkmkend _Toc444244606}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {By now, you have used two very powerful techniques to organize information in BASIC. Arrays are use to handle a large amount of information when all of the pieces are the same type. Records are used to collect different kinds of information into a single variable.\par While these types are very powerful, there is one situation they do not handle well. In many programs you don\rquote t know in advance how many pieces of information you need to deal with. For example, a program to manage a mailing list may have a few hundred entries when one person uses it, but several thousand for another person. One solution is to allocate an array that will be big enough to hold some maximum number and leave it at that. Of course, that presents a problem, too. If one person has a computer with 1.25M of memory, they may be able to handle a mailing list with 7000 or 8000 entries. Unfortunately, the program would be too large to run on a computer with 768K, and would not make effective use of all of the memory in a 2M machine.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v arrays\:problems with}}}{Of course, you may not ever intend to write a commercial application. On your own machine, you know how much memory you have, right? Well, that could be true, but fixed size arrays present other problems. Many programs have to handle more than one kind of data at the same time. For example, an adventure game might need one array for handling the rooms in a castle, and another array for keeping track of the various inhabitants. You can try to make effective use of memory by guessing in advance how big each array needs to be, but if you guess wrong, you could overflow one array while there is still plenty of room in the other.\par And, of course, all of this ignores the fact that the current implementation of GSoft\~BASIC on the Apple\~II}{\fs20 GS}{ limits the maximum size of a single array to 32K.\par In all of these situations, the problem is that you know there is a lot of memory out there, but you don\rquote t always know, in advance, how much memory is available or exactly what you will need to use it for when the program runs. The amount of memory used by an array or record is determined when the program is written. You can\rquote t change it without changing the program itself. What we need is a way to ask for a chunk of memory while the program is running. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v dynamic memory}}}{Programmers call this }{\i dynamically allocated memory}{. Since GSoft\~BASIC doesn\rquote t know where the memory will be when you compile the program, or even how much will be allocated, you need some way of keeping track of the memory. That, in a nutshell, is what pointers are for. A pointer }{\i points to}{ a memory location. In terms of the BASIC program, a pointer points to a variable. The variable can be a simple variable, like an integer or a real number; a record; an array; or even another pointer. In short, a pointer can point to a variable of absolutely any type except an array\emdash and it can point to an element of an array, or a record containing an array.\par I don\rquote t want to scare you off, but pointers tend to give beginners a lot of trouble. I would like to talk for a moment about what kind of trouble people have so you can watch out for these issues as you read through the lesson. We will try to deal with each of the issues.\par Part of the reason people have trouble with pointers is that the idea of dynamically allocated memory is foreign to those of you who cut your teeth on traditional implementations of BASIC, which don\rquote t support pointers. If pointers are a new concept for you, you should expect it to take some time before you become comfortable with them. Another factor is that pointers have their own operator that you must learn to use. A lot of people get confused by this operator, which controls when you are dealing with a pointer, and when you are dealing with the thing it is pointing to. Finally, there is a bit of magic about pointers in a high-level language. The other data types we have dealt with were definite, fixed structures. You could get a handle on what they do, and how they work. From a language like BASIC, there are some mysteries to how pointers work, since the language takes care of a lot of details. It is only from assembly language that you really see how pointers work\emdash and, if you ever learn enough assembly language to learn how pointers work, you will probably follow in the footsteps of the vast majority of programmers, and return to a language like BASIC that handles all of those mucky details for you!\par A realistic example of how pointers are used in a real program is well beyond what you are likely to understand at this point, so some of the first few examples will seem very simplistic and contrived. You will look at them and wonder why we are using pointers at all, when you can easily see better ways to write the program without a pointer. Well, you are right, but we will use some simple programs to get used to the mechanics of pointers. By the end of the lesson, though, you will be dealing with data structures that you could not handle with arrays. In the next few lessons, we will start doing things with pointers that are very difficult to do with arrays. In some cases, in BASIC at least, some of the things we will do can\rquote t be done any other way than by the use of pointers. That\rquote s especially true if you continue on to toolbox programming after this course. The Apple\~II}{\fs20 GS}{ toolbox it littered with various kinds of pointers.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244607}Pointers are Variables, Too!{\*\bkmkend _Toc444244607}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v DIM statement\:pointers}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v pointers\:declaring}}}{The first thing we need to explore is how to define a pointer. Like an array, which must be an array of something, a pointer must point to something specific. You can\rquote t define what a pointer points to using a type character on the variable name as we have done with simple variables. You always use a TYPE statement to declare a pointer type and a DIM statement to create a pointer variable.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM IP AS POINTER TO INTEGER\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\b \par }{The variable IP is a variable, just like any other. It just has an odd type. The type of IP is POINTER TO INTEGER. There are only two things that you normally do with this variable in BASIC: assign it to another pointer variable or compare it for equality or inequality with another pointer value. Of course, for either operation, the pointers must point to the same kind of value. For example, the following program is legal in BASIC:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {DIM IP AS POINTER TO INTEGER\par DIM JP AS POINTER TO INTEGER\par \par IP = JP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The pointer is virtually worthless without the ^ operator. The ^ operator, appearing right after the pointer variable, gives us the value the pointer points to rather than the pointer itself. For example, the assignments shown in the following program are legal, although the program itself has some problems. }{\b Do not run this program!}{\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {DIM IP AS POINTER TO INTEGER\par DIM I AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM J AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {J = 4\par IP^ = J\par I = IP^\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT I\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Let\rquote s step through the program, looking at what it is doing. First, we assign the value 4 to J. Nothing is new there; you\rquote ve done that sort of thing dozens of times. The next line, though, assigns the integer J to the value pointed to by IP. Keep in mind that we are not assigning a value to the variable IP, we are assigning a value to the variable }{\i pointed at}{ by the variable IP. That\rquote s what the ^ operator does for us; it tells BASIC that we want the value pointed at, not the pointer.\par If that\rquote s confusing, think about how records work for a moment. If A and B are the same kind of record, then the assignment\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {A = B\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {copies the contents of the record B into the record A. This is very, very different from the assignment\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {A.LEFT = 4\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {which copies the value 4 into one field of the record. The .LEFT tells the program to use a specific field from the record, not the record itself. The ^ operator is doing something similar for a pointer variable. It tells the program to copy the value into the variable pointed to by IP, not into the pointer IP itself.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {The next line,\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {IP^ = J\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {uses the same idea to assign the value pointed to by IP to the variable I. Finally, the value of I is printed. The value should be 4.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Unfortunately, this program has a very, very serious flaw. In is a very common error in programs that use pointers. In fact, it is one of the most common causes of crashes on the Apple\~II}{\fs20 GS}{, in any kind of program, in any language. Did you catch the flaw? If you\rquote ve never seen pointers before, probably not.\par }{\i What does IP point to?}{\par What if IP points to the location in memory that turns on your floppy disk drive? The disk drive would start to spin.\par What if IP happens to point to memory allocated by the GS/OS operating system that holds a block of a data file? When you save the file, it will have some garbage information in it.\par What if IP points into the middle of your program? Your program may crash.\par Worst of all, what if IP points to some memory that isn\rquote t being used for anything? You might think the program works, and pass it around to friends. It could then do all of these nasty things to }{\i their}{ computer. This, of course, is not a good way to keep friends.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244608}Allocating and Deallocating Memory{\*\bkmkend _Toc444244608}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {In short, pointers are no good without a way to get some memory for them to point to. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ALLOCATE statement}}}{BASIC gives us a statement called ALLOCATE to get some new memory. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v DISPOSE statement}}}{When you are finished with the memory, the DISPOSE statement can be used to get rid of the memory. Both statements need the name of the pointer for which you want to allocate or deallocate memory. We can change our program from the last section into a safe one using these procedures. This program is one you can run!\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {DIM IP AS POINTER TO INTEGER\par DIM I AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM J AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {ALLOCATE (IP)\par J = 4\par IP^ = J\par I = IP^\par PRINT I\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DISPOSE (IP)\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par When this program runs, it starts by making a call to ALLOCATE. This statement performs some advanced magic. The result is that, after the call, two bytes of memory have been obtained. The exact process involved in getting this memory is a bit involved, and not particularly important to you, the BASIC programmer. The process is covered below, just in case you\rquote re curious. In any case, this memory is safe. It belongs to your program, and no other correctly written program will disturb it.\par Just before the program ends you see the DISPOSE statement. This statement goes through a complicated mechanism that gets rid of the two bytes of memory. After calling DISPOSE, the memory does not belong to your program anymore. It could be reused within 1/60th of a second by an interrupt routine, which is a small program that does things like tracking the mouse or reading the keyboard in the background while your program runs. Even if it isn\rquote t reused, because of the process used to allocate and deallocate memory, the location IP points to doesn\rquote t contain 4 anymore. In short, once you call DISPOSE, the memory isn\rquote t yours anymore, and you should not access or change the value pointed at by IP.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244609}How New and Dispose Work{\*\bkmkend _Toc444244609}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The process used to allocate and deallocate dynamic memory is a bit involved, and has nothing in particular to do with the way you write your BASIC program, but it is interesting. If it\rquote s not interesting to you, though, you can safely skip this entire description.\par One of the basic parts of the Apple\~II}{\fs20 GS}{ operating system is the Memory Manager. The Memory Manager is responsible for finding free memory and giving it to the various programs in the computer. Even if your program is the only one you think is running, it turns out that many other programs are calling the Memory Manager to get memory, too. The GS/OS disk operating system calls the Memory Manager, as do many of the Apple\~II}{\fs20 GS}{ tools. GSoft\~BASIC is calling the Memory Manager to get space for your program. Many desk accessories call the Memory Manager. Some of them may even install interrupt handlers, which can be running while your program is doing something else.\par When you call ALLOCATE for the first time, GSoft\~BASIC makes a call to the Memory Manager to get a 4K block of memory. This memory is then subdivided into smaller and smaller pieces, dividing the block in half each time, until the program gets a chunk of memory of about the right size. In our program you need two bytes to hold the integer, and the library subroutine allocating the memory needs four bytes to keep track of all of the small pointers, so a total of eight bytes is actually taken from the 4K chunk of memory. (Remember, the number of bytes will be a power of two.) This method tends to waste a few bytes of memory now and then, but it turns out that it is very fast. It has some other technical advantages, too, that we won\rquote t go into here.\par When you call DISPOSE at the end of the program the small block of memory is deallocated. Since it was the only piece of memory being used in the 4K block, the 4K block is also returned to the Memory Manager, where it can be reused by other programs. If you had allocated other pieces of memory in addition to the one IP points to, and those were still in use, the block would not be deallocated and returned to the Memory Manager until all of the individual pieces were disposed of.\par An interesting point about this memory is where it comes from. Unlike variables, arrays, and even strings, memory allocated by calling ALLOCATE doesn\rquote t come from the fixed size variable space your program allocates when it starts. ALLOCATE gets memory directly from the Memory Manager. It will continue to allocate memory until all of the available memory in the Apple\~II}{\fs20 GS}{ is used.\par \par Problem 9.1. A pointer can point to any variable type. Use that fact to change the program shown in this section to allocate a pointer to a real number. Assign the value 1.2 to the location pointed to by the pointer, and print the result. Do all of this without an intermediate real variable; in other words, assign the value directly to the value pointed at by the pointer, and use the pointer with the ^ operator in the PRINT statement.\par \par Problem 9.2. You can, of course, use IP^ anywhere that you could use an integer variable. Making use of that fact, write a program to add two numbers and print the result. The only variables you should define are three pointers, IP, JP, and KP. Be sure and allocate memory for all of them using ALLOCATE, then assign 4 to the first, and 6 to the second. Add the two values together and save them at KP^, then print the result. Be sure and follow your mother\rquote s advice, and clean up after yourself by calling DISPOSE to deallocate the memory areas reserved by the calls to ALLOCATE.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart linkedlist}{\*\bkmkstart _Toc444244610}Linked Lists{\*\bkmkend _Toc444244610}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {So far all of our programs have used a pointer to a single variable. That\rquote s about as useful as your mother on a hot date. A single variable is easier to use, takes less space, produces a smaller program, the resulting program runs faster, and there is no chance of stepping on someone else\rquote s memory because you forgot to use ALLOCATE to allocate the memory. We used arrays to organize a fixed number of values into a data structure that was easier to use. The equivalent for a pointer is one of the many forms of a linked list.\par Basically, a linked list is a series of connected records. Each of the records in the linked list contains, among other things, a pointer. The pointer points to another record in the list. A single pointer variable in the program points to the first record in the linked list.\par For our first look at a linked list, we will create a list of integers. The record, then, must have a pointer to the next record, and an integer. It looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {TYPE LISTRECORD\par   NEXTP AS POINTER TO LISTRECORD\par   I AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END TYPE\par \par TYPE LISTPOINTER AS POINTER TO LIST\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM FIRST AS LISTPOINTER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM TEMP AS LISTPOINTER\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par With these definitions we can start to create a linked list. For each element in the list we will need to call ALLOCATE to get space for a new record, and then place a value into the integer, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {ALLOACTE (TEMP)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TEMP^.I = 4\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Look carefully at the assignment that places a 4 in the record. The characters ^. may seem confusing at first, but they are the same simple ideas you are used to, combined to do something a bit more complicated. TEMP, of course, is a pointer, so to put a value into TEMP we need to use the ^ operator. TEMP^ points to a record. To place a value into the field I within a record we add .I. The whole expression, TEMP^.I, then, refers to the integer variable I, located inside a record that is pointed to by the pointer TEMP. That\rquote s a complicated concept, but it is simple when you break it down into parts, reading the expression one symbol at a time from left to right, the way BASIC itself does.\par At this point we have a dynamically allocated record with an integer value in it. The pointer in the record still does not point to anything. The next step is to add this record to the list of records that the variable list points to.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {TEMP^.NEXTP = FIRST\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FIRST = TEMP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par On the first line we are assigning a value to the pointer in our new record. The value we are assigning is FIRST; FIRST points to the first element currently in the list. We really don\rquote t know how many things are in the list at this point. There may not be any, or there may be several thousand. The beauty of the linked list, though, is that we don\rquote t have to know! It doesn\rquote t matter at all how many things are already in the linked list.\par The second line assigns TEMP to FIRST. The first thing in the list, at this point, is our new record. Our record contains an integer variable with a value of 4, and a pointer to the rest of the list.\par The next thing we need to learn is how to take something off of the list. Let\rquote s say that we want to remove the first item. Basically, then, we reverse the process of putting a record into the list, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {TEMP = FIRST\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FIRST = TEMP^.NEXTP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v NIL constant}}}{There is one more detail that we need to deal with before we can use these ideas to write a program. So far we have ignored the issue of the end of the list. How do we know when we get to the end of the list? We could keep a counter, but actually there is a better way. It involves the use of a predefined pointer constant called NIL. NIL is type compatible with any pointer type. You can set a pointer to NIL or compare a pointer to NIL. By convention, NIL is used to mean that the pointer doesn\rquote t point to anything, and that it how we mark the end of our list. By initializing list to NIL at the start of the program and checking to see if list is NIL before removing an item from the list, we can tell when there is nothing in the list.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart stacks}{\*\bkmkstart _Toc444244611}Stacks{\*\bkmkend _Toc444244611}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Using what we now know about linked lists, we can create our first program.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM This program reads in a first of integers, and then prints\par REM them in reverse order.  The program stops when a zero\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM value is read.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {TYPE LISTRECORD\par   NEXTP AS POINTER TO LISTRECORD\par   I AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END TYPE\par \par TYPE LISTPOINTER AS POINTER TO LISTRECORD\par \par DIM FIRST AS LISTPOINTER:! points to the top item in the first\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {CALL GETLIST(FIRST):! read a list\par CALL PRINTLIST(FIRST):! print a list\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! GetList - Read a list from the keyboard\par !\par ! Parameters:\par !    first - pointer to the head of the list\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB GETLIST(FIRST AS LISTPOINTER)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM I AS INTEGER :! value read from the keyboard\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM TEMP AS LISTPOINTER:! work pointer\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! initialize the list pointer\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FIRST = NIL\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DO\par   ! read a value\par   INPUT "Enter a number: ";I\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  IF I <> 0 THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! allocate a record\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    ALLOCATE (TEMP)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! place i in the record\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    TEMP^.I = I\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! put the record in the list\par     TEMP^.NEXTP = FIRST\par     FIRST = TEMP\par   END IF\par LOOP UNTIL I = 0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! PrintList - Print a list\par !\par ! Parameters:\par !    first - pointer to the head of the list\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTLIST(FIRST AS LISTPOINTER)\par \par DIM TEMP AS LISTPOINTER:! work pointer\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {WHILE FIRST <> NIL\par   ! remove an item from the list\par   TEMP = FIRST\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  FIRST = TEMP^.NEXTP\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! print the value\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  PRINT TEMP^.I\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! free the memory\par   DISPOSE (TEMP)\par WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par We have already talked about all of the ideas in this program, this is just the first time you have seen them all in one place. Looking through the program, the first step is to get a list of numbers. GetList does this, reading numbers using familiar methods until you enter 0. For each number, GetList allocates a new record, saves the number in the record, and puts the record in the list.\par PrintList loops for as long as there are entries left in the list. Each time through the loop the top record in the list is removed from the list, the value is printed, and the memory used by the record is dumped.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v memory leak}}}{Notice how the PrintList procedure cleans up after itself. The memory used by every record is carefully disposed of after we are finished with the record. This is an important step in a program that uses dynamic memory. If you forget to dispose of some of the memory in a few places, the memory areas will eventually fill up, and there won\rquote t be any free memory for new calls to ALLOCATE. This is known as a memory leak.\par It is very important to understand exactly how this program works, since the ideas used in this program form the basis for many of the fundamental techniques in modern programming practice. Stop now, and type in the program. Run the program with the following input:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {1\par 2\par 3\par 4\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {0\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The program responds with this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {4\par 3\par 2\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {1\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This may not have been exactly what you expected. What happened is this: When the program creates the list, each new element is added on top of the old list. As the program retrieves records from the list, the last one added is removed first. This mechanism is called a stack. The common analogy is to think of it like a stack of plates. You pile the list elements up on top of one another. To get one back, you pull the top record off of the stack.\par Just as a footnote, I should warn you about terminology buffs. Many high school teachers, a few college professors, and even an occasional book author figure that the way to become a good programmer is to learn a bunch of arcane words. It is true that you need some new words, like dynamically allocated memory, to describe new concepts, but these terminology buffs want you to know that a stack is called a LIFO data structure, for Last In, First Out. Let\rquote s face it, they write the tests, so you better know the term if you want to get a good grade in a class. Be warned, though: if you walk up to a group of programmers at a conference and start babbling about LIFO data structures, you will find a wide gap forming around you. A few people will glance at your shirt pocket, looking for the pencil holder, or examine the thickness of your glasses. In real life, these things are called stacks.\par Stacks are a very flexible data structure. They are used in a wide variety of applications. A stack is appropriate any time you need to collect a large amount of information, especially if you don\rquote t particularly care in what order you use the information, or for the occasional case when you want to handle the most recent piece of information first. Stacks are also frequently used as a part of a more complicated data structure, like a hash table. We\rquote ll look at complex data structures like this later in the course. Stacks are used in such diverse applications as burglar alarms, data bases, mailing lists, operating systems, and arcade games.\par There are many variations on the basic ideas covered in this section. Some of these are explored in the problems. I highly recommend that you work both of these problems.\par \par Problem 9.3. Many applications require you to process the information in a list from back to front. In some cases, you know this in advance, and a slightly different form of a list is used, called a queue. That situation is covered in the next section. In other cases, though, you may not know that the list needs to be reversed in advance, or you may need to process the list in both orders in different parts of the program. In a case like that, you need to be able to reverse the list.\par Reversing a list is really quite easy. To do it, you use two lists. The new list starts out empty. You then loop through the old list, just like we do in the PrintList procedure, but instead of printing the value and disposing of the record, you add the record to the new list.\par Write a procedure to reverse the order of a list. Use this procedure in the sample program so it prints the numbers in the same order they are read.\par \par Problem 9.4. In some applications we read in a list, then scan the list repeatedly, looking for records with certain characteristics. For example, in a burglar alarm, we might use one subroutine to add new alarms to a list. Another might repeatedly scan the list, looking for fires. If no fires were found, the list could be rechecked for broken windows, and so on.\par Implement this idea in our sample program by counting the number of times a particular number appears in the list. Use a FOR loop to loop from 1 to 5. For each value, scan the list, incrementing a counter if the number is found. Print a table of the results.\par Try this program at least two times. The first time, enter zero immediately. The second time, use this data:\par \par }{\f6\fs20 1\par 2\par 3\par 4\par 5\par 2\par 3\par 4\par 5\par 3\par 4\par 5\par 4\par 5\par 5\par }{\par The results should be one one, two twos, and so forth.\par Hint: To scan a list, set a pointer to the head of the list. Use a WHILE loop to loop until this pointer is NIL. At the end of the WHILE loop set the pointer to the next record, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {TEMP = TEMP^.NEXTP}{\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v stacks}{\rxe stacks}}}{\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart queue}{\*\bkmkstart _Toc444244612}{\*\bkmkend stacks}Queues{\*\bkmkend _Toc444244612}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Another commonly used form of a list is the queue. A queue looks just like a stack, but it is formed differently. A queue is used when you want to process information in the same order it is read, so instead of adding new records to the beginning of the list, you want to add them to the end of the list. In a sense, the records are lined up and processed on a first-come, first served basis. The terminology freaks call a queue a FIFO list, for First In, First Out, but again, don\rquote t embarrass yourself in a crowd by talking about stuff like that.\par There are three basic ways to form a queue. If all of the information is read in first, then processed, you could just use the simple stack to read the data, then reverse the order of the list, like we did in problem 9.3. In many programming situations, though, you read some data, process a little bit, read some more, and so forth. In those cases, you need to build the list in the proper order.\par One way to build a queue is to keep a second pointer, which we will call LAST. This pointer starts at NIL, like the pointer that points to the first member of the list. When we add the first element to the list the pointer LAST is set to the value of the new pointer. The next pointer in the new record is always set to NIL. From then on, we add a new record by setting the next pointer in the record pointed to by LAST to point to the new record, and then set LAST to point to the new record.\par In BASIC code, then, we set the list up like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FIRST = NIL\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LAST = NIL\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par To add a record to the end of the list, we check to see if the record is the first one in the list. If so, we set both LAST and FIRST to point to the new record. If not, we chain the record to the end of the list.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {IF LIST = NIL THEN\par   FIRST = TEMP\par   LAST = TEMP\par ELSE\par   LAST^.NEXTP = TEMP\par   LAST = TEMP\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Of course, since both branches of the IF statement assign TEMP to LAST, we can make the program shorter and still do the same thing by pulling the assignment outside of the IF statement, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {IF LIST = NIL THEN\par   FIRST = TEMP\par ELSE\par   LAST^.NEXTP = TEMP\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LAST = TEMP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par We also don\rquote t actually make use of LAST before it is assigned a value for the first time, so setting it to NIL when we initialize the list is also unnecessary.\par \par Problem 9.5. You probably saw this one coming. Change the GetList procedure from the sample in the last section so it forms a queue instead of a stack. Use the mechanism described in this section to do it.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v queues}{\rxe queue}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe linked lists{\rxe linkedlist}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244613}{\*\bkmkend linkedlist}{\*\bkmkend queue}Running Out Of Memory{\*\bkmkend _Toc444244613}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {What happens if you ask for more memory, but none is available? If this happens, ALLOCATE sets the pointer to NIL rather than to a valid memory location. Just for fun, the following program does this on purpose.\par After running this program, quit GSoft\~BASIC and reenter the program. That cleans up the memory the program allocated and never disposed of. Also, be aware that this program could run for a very long time, especially if you have a lot of memory.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {DIM P AS POINTER TO INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM COUNT AS LONG\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {COUNT = 0\par DO\par   ALLOCATE (P)\par   COUNT = COUNT + 1\par LOOP UNTIL P = NIL\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT COUNT;" integers were allocated."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The practical ramifications of this program are very important. In real programs you need to make sure a call to ALLOCATE really worked. That means you need to check after each and every call to see if ALLOCATE returned NIL. If it did, your program has to do something to handle the situation. That might mean reporting an error and quitting, disposing of some buffers you no longer need, or informing the user that an operation can\rquote t be carried out. The one thing you can\rquote t do is ignore the problem!}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v pointers}{\rxe pointer}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244614}{\*\bkmkend pointer}Lesson Ten \endash \~Miscellaneous Useful Stuff{\*\bkmkend _Toc444244614}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The first nine lessons of this course have taken you on a tour of the BASIC language. By this time you have learned most of the mechanics of the language itself. Because the lessons have been developed using specific examples, though, a few topics have slipped through the cracks. This chapter covers those topics.\par I don\rquote t want you to get the impression that these topics are unimportant. Quite the contrary: a great deal of the power of the BASIC language is tied up in the topics we will look at in this lesson. In our tour of the BASIC language, though, we have concentrated on the mechanics of writing short, simple programs. As we learn more about writing larger programs, programming efficiently, and organizing programs, the new techniques covered in this lesson will be put to use over and over.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart select_case}{\*\bkmkstart _Toc444244615}The SELECT CASE Statement{\*\bkmkend _Toc444244615}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {You\rquote ve learned to use IF and ELSE IF to select from a series of possible conditions. Here\rquote s an example that accepts a number from 1 to 13, representing the value from a deck of cards, and prints the name of the card.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! PrintCard - Print the name of a card\par !\par ! Parameters:\par !    V - point value of the card\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTCARD (V AS INTEGER)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF V = 1 THEN\par   PRINT "Ace";\par ELSE IF V = 2 THEN\par   Print "Two";\par ELSE IF V = 3 THEN\par   Print "Three";\par ELSE IF V = 4 THEN\par   Print "Four";\par ELSE IF V = 5 THEN\par   Print "Five";\par ELSE IF V = 6 THEN\par   Print "Six";\par ELSE IF V = 7 THEN\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  Print "Seven";\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {ELSE IF V = 8 THEN\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  Print "Eight";\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {ELSE IF V = 9 THEN\par   Print "Nine";\par ELSE IF V = 10 THEN\par   Print "Ten";\par ELSE IF V = 11 THEN\par   Print "Jack";\par ELSE IF V = 12 THEN\par   Print "Queen";\par ELSE IF V = 13 THEN\par   Print "King";\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par BASIC has a special statement called the SELECT CASE statement that is used in situations like this. The SELECT CASE statement is like a multiple branch. It works the same as the series of IF and ELSE IF checks, but there is a little less typing and the program runs a little faster. Using a SELECT CASE statement the PrintCard subroutine becomes\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! PrintCard - Print the name of a card\par !\par ! Parameters:\par !    V - point value of the card\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTCARD(V AS INTEGER )\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SELECT CASE V\par   CASE 1\par     PRINT "Ace";\par   CASE 2\par     PRINT "Two";\par   CASE 3\par     PRINT "Three";\par   CASE 4\par     PRINT "Four";\par   CASE 5\par     PRINT "Five";\par   CASE 6\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    PRINT "Six";\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE 7\par     PRINT "Seven";\par   CASE 8\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    PRINT "Eight";\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE 9\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    PRINT "Nine";\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE 10\par     PRINT "Ten";\par   CASE 11\par     PRINT "Jack";\par   CASE 12\par     PRINT "Queen";\par   CASE 13\par     PRINT "King";\par END SELECT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par When the SELECT CASE statement executes, it starts by evaluating the expression that comes after CASE. In our example, the expression is a simple one, consisting of a single variable. The next statement executed is the one right after the value that corresponds to the value of the expression. You can put more than one statement there, of course, even though we only used one statement after each CASE label in this example. As soon as the next CASE label is encountered the program skips to the statement after the END SELECT statement. In other words, the SELECT CASE statement works exactly like a series of IF ELSE clauses. The SELECT CASE statement is just a bit easier to read, and gives you another way to organize your program.\par The PrintCard subroutine shows the classic way to organize a SELECT CASE statement, but in situations like this one where there is a single value to check and a single thing to do for each specific value, I like to use the : statement separator to combine the CASE statement with the statement that handles the condition, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! PrintCard - Print the name of a card\par !\par ! Parameters:\par !    V - point value of the card\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTCARD(V AS INTEGER )\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SELECT CASE V\par   CASE 1: PRINT "Ace";\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CASE 2: PRINT "Two";\par   CASE 3: PRINT "Three";\par   CASE 4: PRINT "Four";\par   CASE 5: PRINT "Five";\par   CASE 6: PRINT "Six";\par   CASE 7: PRINT "Seven";\par   CASE 8: PRINT "Eight";\par   CASE 9: PRINT "Nine";\par   CASE 10: PRINT "Ten";\par   CASE 11: PRINT "Jack";\par   CASE 12: PRINT "Queen";\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE 13: PRINT "King";\par END SELECT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {Personally, I think this makes the program a lot easier to understand.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {There are many situations where you will want to use several different case labels for the same statement. To do this, separate the case labels with a comma, as the following example shows.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 1 TO 10\par   SELECT CASE I\par     CASE 1, 2, 3, 5, 7\par       PRINT I; " is prime"\par     CASE 4, 6, 8, 10\par       PRINT I; " is even"\par     CASE 9\par       PRINT I; " is odd"\par   END SELECT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par While listing specific values is appropriate for the majority of SELECT CASE statements you\rquote re likely to write, there are two ways to handle ranges of values. The first is to give start and end values for a range of values, separated by the word TO. The second is useful for collecting all of the remaining values that have not been picked off by a specific CASE statement. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v CASE ELSE statement}}}{The CASE ELSE statement should be the last CASE statement before END SELECT. It works just like an ELSE in a series of ELSE IF statements.\par Here\rquote s an example that might appear in a program that reads text, like a compiler or an adventure game.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {SELECT CASE MID$(LINE$, I, 1)\par   CASE "A" TO "Z", "a" TO "z"\par     CALL DOWORD(LINE$, I)\par   CASE "0" TO "9", "."\par     CALL DONUMBER(LINE$, I)\par   CASE ELSE\par     CALL DOPUNCTUATION(LINE$, I)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SELECT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Finally, if there is no matching CASE statement for a value at all, the program skips to the statement right after END SELECT.\par \par Problem 10.1. Write a program that generates a deck of cards using an array of 52 integers. Initialize the unshuffled deck by placing the numbers 1 to 52 in the array.\par Use a subroutine called SHUFFLE to shuffle the deck. This should loop one time through the deck swapping each array element with another chosen at random.\par Print the first five cards in the shuffled deck using the PRINTCARD subroutine from this section and a similar subroutine you design to handle printing the suit of the cards.\par Just in case your card skills are a little rusty, the names of the suits are Spades, Hearts, Clubs and Diamonds. There are 13 cards in each suit. Card 1 would be the Ace of Spaces; card 14 the Ace of Hearts, and so on. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SELECT CASE statement}{\rxe select_case}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart for_loop}{\*\bkmkstart _Toc444244616}{\*\bkmkend select_case}Revisiting the FOR Loop{\*\bkmkend _Toc444244616}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Once upon a time, in a lesson long, long ago, you learned about the FOR loop. When FOR loops were first introduced, though, you didn\rquote t know enough about BASIC to understand some of the features that apply to FOR loops. In this section we will take a more detailed look at FOR loops to fill in some minor gaps in your knowledge.\par The first point about FOR loops is one you have seen by example, but it is a good idea to spell it out. You can use any valid BASIC expression to decide what the start and stop value for the loop should be. For example, you can loop a random number of times using the results of the random number function we have used in so many simulations:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 1 TO RANDOMVALUE (20)\par   <<<do something here>>>\par NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You might be justifiably concerned about what would happen if RANDOMVALUE were called every time the condition was tested. The answer, of course, is that the stop value would change each time through the loop! BASIC evaluates the stop condition one time, though, and saves the value. Even if the stop condition doesn\rquote t change, you might be worried about the efficiency of your program. The fact that BASIC computes the stop value before the loop starts, and saves the value, means that even a very complex expression for the stop value won\rquote t slow down the loop itself.\par There is another interesting point about using an expression for the start or stop value. What happens if the stop value is less that the start value when the loop starts? For example, what does this program do?\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {I = 1\par J = -2\par FOR K = I TO J\par   PRINT K\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par The FOR loop can handle this situation. If the stop value is smaller than the start value, the body of the loop is executed one time with the initial value for the loop variable. As soon as the NEXT statement is encountered the loop will stop. This particular program prints the value 1 the first time through the loop, then stops.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FOR statement\:STEP size}}}{So far, all of our FOR loops have started with a small value and looped up towards a larger one. That isn\rquote t the only way to loop. You can start with a large value, and loop down to a smaller one. The difference is that you use STEP to set a step size of -1, telling the loop to go down by one each time through the loop rather than up. The program\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 10 TO 1 STEP -1\par   PRINT I\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {prints a countdown from 10 to 1.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {The step size also shows one of the most powerful features of the FOR loop. It isn't limited to INTEGER or even LONG values like the FOR loops in some languages. You can use floating-point loop variables and step by values that are not whole numbers. Here's a short example that uses this fact to step from 0.0 to 2\u960\'b9 in increments of \u960\'b9/50.0. Even if the math is a little beyond what you're used to, you can still see how the FOR loop can be used to loop over non-integer increments.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Draw 50 random circles on the screen the "hard" way.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM I AS INTEGER :! loop variable\par DIM R AS INTEGER :! radius of the circle\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM X, Y AS INTEGER :! position of the center of the circle\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {CALL INITGRAPHICS\par FOR I = 1 TO 50\par   R = 10 + RANDOMVALUE(40)\par   X = 50 + RANDOMVALUE(220)\par   Y = 50 + RANDOMVALUE(100)\par   SETSOLIDPENPAT (RANDOMVALUE(15))\par   CALL DRAWCIRCLE(X, Y, R)\par NEXT\par INPUT "";A$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! DrawCircle - Draw a circle using trigonometry\par !\par ! Parameters:\par !    cx, cy - position of the center\par !    r - radius\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB DRAWCIRCLE(CX AS SINGLE , CY AS SINGLE , R AS SINGLE )\par \par CONST PI = 3.1415926535\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM A AS SINGLE :! for loop angle\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM X AS SINGLE , Y AS SINGLE :! position on the edge of the circle\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {MOVETO (CX + R, CY)\par FOR A = 0.0 TO 2 * PI STEP PI / 50.0\par   X = CX + R * COS (A)\par   Y = CY + R * SIN (A)\par   LINETO (X, Y)\par NEXT\par LINETO (CX + R, CY)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! InitGraphics - Set up for graphics\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SUB INITGRAPHICS\par HGR\par SETPENMODE (0)\par SETSOLIDPENPAT (15)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! RandomValue - Return a random number in the range 1 to max\par !\par ! Parameters:\par !    max - maximum allowed value for the random number\par !\par ! Returns: Random number in the range 1..max\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FUNCTION RANDOMVALUE(MAX AS INTEGER ) AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM VALUE AS INTEGER :! Random value to return\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {VALUE = 1 + RND (1) * MAX\par IF VALUE = MAX + 1 THEN\par   VALUE = MAX\par END IF\par RANDOMVALUE = VALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FOR statement\:NEXT}}}{There is one other feature of the FOR loop that you won't see in this course, but you might run across in books that show BASIC programs. You can list the loop variable on the NEXT statement, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 1 TO 10\par   PRINT I\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT I\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are two reasons you might want to do this. The first is to give yourself both a comment about which FOR loop the NEXT statement belongs to, and to ask BASIC to check up on you. If you give the wrong FOR loop variable the program will stop with an error.\par The other reason to give the name of the FOR loop variable is to tell BASIC to finish two loops with a single NEXT statement. Here's an example that initializes a 10 by 10 matrix with zeros.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 1 TO 10\par   FOR J = 1 TO 10\par     A(I, J) = 0.0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT J, I\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par While this does save one line, I personally think it makes the program harder to read, so I use two separate NEXT statements in situations like this one. It\rquote s really a matter of taste, though.\par \par Problem 10.2. One way to reverse a sequence of characters is to loop backwards, starting at the last character in the string, and looping towards the first. Write a program that uses this idea to reverse the characters in a string.\par Your program should prompt for a string. Next, print the string in reverse order, using STEP -1 and looping from the length of the string down to 1.\par Continue processing strings until the user enters a null string (one with a length of 0).}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FOR statement}{\rxe for_loop}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart goto}{\*\bkmkstart _Toc444244617}{\*\bkmkend for_loop}The GOTO Statement{\*\bkmkend _Toc444244617}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {BASIC became popular on microcomputers before structured programming took hold. Most of the early versions of BASIC did not have modern loop and logic statements like the DO loop, REPEAT loop, or the IF-THEN ELSE statement. Before these statements were available, programmers relied on GOTO statements almost exclusively to control how their programs executed.\par The GOTO statement is a jump. The program moves to the destination of the GOTO and starts executing with that statement. The following program gives a very simple example of this idea.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {  GOTO 3\par   PRINT "This gets skipped."\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {3 PRINT "This gets printed."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par As you can see, there isn\rquote t much to a GOTO statement. In fact, it\rquote s just the reserved word GOTO followed by a number called a label. The number tells the compiler where to go to; a corresponding number must appear somewhere in the program at the beginning of a line.\par Modern implementations of BASIC like GSoft\~BASIC also let you use a name for the label. To use a named label, follow the label name with a colon, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {GOTO THERE\par PRINT "This gets skipped."\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {THERE: PRINT "This gets printed."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The GOTO statement has an interesting history. In a sense, it is a good example of how an idea can be misapplied, abused, and eventually twisted into something the person who came up with the idea did not intend. What I am referring to, of course, is the idea that GOTO statements are bad. In fact, many people group structured programming and so-called "GOTO-less programming" together, treating them as synonymous. In many computer classes students are still taught that the GOTO statement is always bad. Nothing could be farther from the truth.\par In a sense, ignoring the GOTO statement while you learn BASIC is a good idea, up to a point. This is especially true if you learned to program in BASIC or FORTRAN using an older implementation that did not have structured statements like WHILE loops, DO loops and IF-THEN-ELSE statements. Before these statements were available, BASIC programmers had to use IF statements and GOTO statements to do the same thing. That\rquote s not altogether a bad thing, but the programs that were written this way tended to jump around seemingly at random, leading to a coding style derisively referred to as spaghetti code. Experience has shown that most programs written using modern statements instead of GOTO statements are easier to read, more efficient, and have fewer bugs than programs written with GOTO statements. So, while you learn the structured statements, and how to use them to organize programs logically, it is a good idea to forget that the GOTO statement exists.\par The reason we haven\rquote t used the GOTO statement isn\rquote t because it is bad, or has no use. The reason we haven\rquote t used the GOTO statement is because it isn\rquote t needed as much in GSoft\~BASIC as it is in older versions of BASIC. There are two places, though, where the GOTO statement is very useful, easy to understand, and will make your program much more efficient. These two places are an error exit and an early exit from a loop.\par A good example of an early exit from a loop is when you are searching a linked list for a particular item. As a simple example, let\rquote s assume that you want to scan a list of names to see if a particular name exists. This problem is a very common one in programming: The list could be a list of names in a customer database, a list of commands that an adventure game recognizes, a dictionary in a spelling checker, or a list of variables in a BASIC program. If the name is in the list, you want to print true. If the name is not in the list, you want to print false.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GOTO statement}{\rxe goto}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart onerr}{\*\bkmkstart _Toc444244618}{\*\bkmkend goto}The ONERR GOTO Statement{\*\bkmkend _Toc444244618}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Even more important is ONERR GOTO, a variant of the GOTO statement that allows you to intercept errors the BASIC language detects and deal with them on your own terms. ONERR GOTO doesn\rquote t actually do anything right away. The line number after the statement is remembered by BASIC, though, and if any error occurs that would normally cause BASIC to stop the program, it jumps to the statement identified in the ONERR GOTO statement instead. You can handle the error there, cleaning up before you exit the program or even handling the error and continuing on.\par Here\rquote s a short example that shows a complete ONERR GOTO handler. The error itself is something that shouldn\rquote t happen in a properly written program\emdash there are better ways to make sure an array subscript isn\rquote t out of range than using an ONERR GOTO statement\emdash but this example has the merit of being short.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {      ONERR GOTO 99\par \par       DIM A(5) AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {      FOR I = 0 TO 5\par         A(5) = 5\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {      NEXT\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {      I = 7\par       B = A(I)\par       PRINT "A(";I;") = ";B\par       END\par \par    99 IF ERR <> 11 THEN\par         ONERR GOTO 0\par         ERROR ERR\par       END IF\par       IF I > 5 THEN\par         I = 5\par       ELSE IF I < 0 THEN\par         I = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {      RESUME\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Following along as the program executes shows how ONERR GOTO does it\rquote s job, and also introduces a few commands that you will often use with ONERR GOTO to create an effective error handler.\par The ONERR GOTO statement itself doesn\rquote t do anything except tell BASIC where to go if an error occurs. If no error is found the program will work exactly the same way with or without the ONERR GOTO statement.\par A few lines later the program tries to extract a value from the array A using an index of 7, but the maximum index that is valid for the array is 5. This causes a run-time error, which triggers the error handler. Control jumps immediately to line 99.\par The error handler itself shows the three components of a properly written error handler. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ERR function}}}{First the error handler checks to see if the error is something it can handle by checking the value returned by the ERR function. This error handler will only handle error number 11. You can find a list of the errors and error numbers in the GSoft\~BASIC reference manual. If the error is not something the error handler can deal with, it uses the statement\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {ONERR GOTO 0\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {to turn off ONERR GOTO handling. }{\pard\plain \s28\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ERROR statement}}}{Next the error handler }{\i causes}{ an error using the ERROR statement, which tells BASIC to behave as if a real error was detected. In effect, the error handler has refused to handle any error but error 11, telling BASIC to handle it the way it normally would. Of course, if the program had not turned ONERR GOTO error handling off before doing this, the program would have jumped right back to line 99 to start handling the error again!\par }\pard \s28\fi360\sb40\widctlpar\adjustright {The error occurred because the index I was out of range, so the next thing the error handler does is fix the index. }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v RESUME statement}}}{Finally, it uses the RESUME statement. This causes the program to go back to the statement that caused the error in the first place and try executing the statement again. If the error occurred inside of a subroutine or function the RESUME statement jumps back to the line in the main program that made the subroutine or function call, not to the line in the subroutine or function that actually generated the error.\par You don\rquote t have to use the RESUME statement at the end of the error handler. You can use END instead, just like you do at the end of a BASIC program. This lets you stop the program after doing whatever you need to do to handle the error gracefully.\par This example is short, but it isn\rquote t something that would happen in a real program\emdash or at least not in a well written program. A much better example of a real error you might want to trap is error number 56, a file I/O error. If your program has just modified a critical database or spent hours calculating values for a file, you don\rquote t want to loose the information because a disk was full or has a bad block! A properly written error handler can detect this sort of error, giving you a chance to put in a new disk.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v ONERR GOTO statement}{\rxe onerr}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe error handling{\rxe onerr}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe handling run-time errors{\rxe onerr}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart variant_records}{\*\bkmkstart _Toc444244619}{\*\bkmkend onerr}Variant Records{\*\bkmkend _Toc444244619}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {We have already seen how records can be used to organize information in our program, grouping any type of variable together into a record about a particular thing. For example, we could use a record to record a person\rquote s name, address, and state (all strings), zip code and phone number (possibly integers), and sex. All of these facts about a person can be collected into a single variable, so they can be kept together.\par What if we need to keep different information about different groups of people, though? For example, a pet store might want to list whether a fish is a salt-water fish or fresh-water fish, but they certainly wouldn\rquote t need to waste space on the same information about a dog. For the dog, they might want to list if it has been spayed or neutered, but the same information hardly applies to the fish. Rather than waste space by including all of this information when it isn\rquote t needed, a variant record can be used.\par In a variant record you use a tag variable to keep track of what the record is for. For the pet store, for example, the variant record might look like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {CONST BIRD = 0\par CONST FISH = 1\par CONST DOG = 2\par \par TYPE ANIMALRECORD\par   NEXTP AS POINTER TO ANIMALRECORD\par   INSTOCK AS INTEGER\par   KIND AS INTEGER\par   CASE BIRD\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE FISH\par     FSEX AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    FRESHWATER AS INTEGER\par   CASE DOG\par     DSEX AS INTEGER\par     SPAYED AS INTEGER\par END TYPE\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There is a wealth of information in this record, so we will take a few moments to study it in detail. The first three variables in the record are NEXTP, INSTOCK and KIND. Up to this point the record looks exactly like any other record, and it is. These three variables are needed no matter what kind of animal we are dealing with, and they will appear in every record of type ANIMALRECORD.\par The CASE statement is what makes this record a variant record. The CASE statement looks vaguely like a CASE label in a program, but there are differences. In the variant record, the CASE condition is really just a placeholder. In GSoft\~BASIC the variable isn\rquote t used for anything, although this may change in future versions. It\rquote s a good idea to create some constants to record the kind of the record, though, and use the same constants as CASE labels. That\rquote s what KIND is for; it will be filled in with BIRD, FISH or DOG to indicate what kind of animal the record refers to.\par In this record we decided to record the sex of a FISH or a DOG. Fields in the record must have unique names, even if they appear in different parts of a variant record, so we can\rquote t use SEX as the name of both variables. To avoid a conflict, we append a unique letter to the start of the variable names, creating FSEX for the sex of a fish, and DSEX for the sex of a dog. There are other ways to handle the problem of duplicate names, but appending a unique prefix to the field name is a common solution.\par Let\rquote s take a look at how the same information would be stored in a standard record, and compare the standard record to the variant record. The standard record would look like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {TYPE ANIMALRECORD\par   NEXTP AS POINTER TO ANIMALRECORD\par   INSTOCK AS INTEGER\par   KIND AS INTEGER\par   SEX AS INTEGER\par   FRESHWATER AS INTEGER\par   SPAYED AS INTEGER\par END TYPE\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This record requires 14 bytes of memory: 4 bytes for the pointer (NEXTP), and two bytes for each of the other fields. It also has a FRESHWATER field for birds and dogs, which is not the sort of thing that promotes clarity. The variant record, on the other hand, has a variable size, depending on what kind of animal we are dealing with. In all cases, the size is less than 14 bytes. In the case of a bird, the record has three variables, NEXTP, INSTOCK and KIND. These variables use 8 bytes of memory.\par The following example shows one use of variant records. In this example, we create and then animate 10 shapes. The shapes can be squares, triangles, or stars. Each of the shapes does a random walk across the screen, moving one pixel in a random direction on each cycle through the program.\par To animate the shapes, we need to keep track of what kind of a shape it is and the coordinates for the shape. Since each shape has a different number of points, we use a variant record. All of the shapes have a color, so that is stored in a non-variant part of the record.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Do a random walk with 10 random shapes\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {CONST NUMSHAPES = 10:! # of shapes to animate\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CONST WALKLENGTH = 100:! # of "steps" in the walk\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {CONST TRIANGLE = 0:! shapes\par CONST SQUARE = 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CONST STAR = 2\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! information about one shape\par TYPE SHAPERECORD\par   COLOR AS INTEGER\par   KIND AS INTEGER\par   CASE TRIANGLE\par     TX1 AS INTEGER\par     TX2 AS INTEGER\par     TX3 AS INTEGER\par     TY1 AS INTEGER\par     TY2 AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    TY3 AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE SQUARE\par     SX1 AS INTEGER\par     SX2 AS INTEGER\par     SX3 AS INTEGER\par     SX4 AS INTEGER\par     SY1 AS INTEGER\par     SY2 AS INTEGER\par     SY3 AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    SY4 AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE STAR\par     PX1 AS INTEGER\par     PX2 AS INTEGER\par     PX3 AS INTEGER\par     PX4 AS INTEGER\par     PX5 AS INTEGER\par     PY1 AS INTEGER\par     PY2 AS INTEGER\par     PY3 AS INTEGER\par     PY4 AS INTEGER\par     PY5 AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END TYPE\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM I AS INTEGER , J AS INTEGER :! loop variables\par DIM SHAPES(NUMSHAPES) AS SHAPERECORD:! current array of shapes\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM OLDSHAPES(NUMSHAPES) AS SHAPERECORD:! shapes in last position\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! set up the graphics window\par CALL INITGRAPHICS\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SETPENMODE (2)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! set up and draw the initial shapes\par FOR I = 1 TO NUMSHAPES\par   CALL CREATESHAPE(SHAPES(I))\par   CALL DRAWSHAPE(SHAPES(I))\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! do the random walk\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FOR I = 1 TO WALKLENGTH\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! move the shapes\par   FOR J = 1 TO NUMSHAPES\par     OLDSHAPES(J) = SHAPES(J)\par     CALL UPDATESHAPE(SHAPES(J))\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  NEXT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! redraw the shapes\par   FOR J = 1 TO NUMSHAPES\par     CALL DRAWSHAPE(SHAPES(J))\par     CALL DRAWSHAPE(OLDSHAPES(J))\par   NEXT\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! CreateShape - creates a shape\par !\par ! The type, color and initial position are chosen randomly.\par ! The size of the shape is based on precomputed values.\par !\par ! Shared Variables:\par !    triangle, square, star - possible shapes\par !\par ! Parameters:\par !    s - shape to create\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB CREATESHAPE(S AS SHAPERECORD)\par \par SHARED TRIANGLE, SQUARE, STAR\par \par DIM CX AS INTEGER , CY AS INTEGER :! center point for the shape\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! get a color\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {S.COLOR = RANDOMVALUE(15)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! get the center position, picking the point so the shape is\par ! on the graphics screen.\par CX = RANDOMVALUE(300) + 10\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {CY = RANDOMVALUE(184) + 8\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! set the initial position\par SELECT CASE RANDOMVALUE(3)\par   CASE 1\par     S.KIND = TRIANGLE\par     S.TX1 = CX - 9\par     S.TY1 = CY + 4\par     S.TX2 = CX\par     S.TY2 = CY - 8\par     S.TX3 = CX + 9\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    S.TY3 = CY + 4\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE 2\par     S.KIND = SQUARE\par     S.SX1 = CX - 7\par     S.SY1 = CY - 6\par     S.SX2 = CX + 7\par     S.SY2 = CY - 6\par     S.SX3 = CX - 7\par     S.SY3 = CY + 6\par     S.SX4 = CX + 7\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    S.SY4 = CY + 6\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE 3\par     S.KIND = STAR\par     S.PX1 = CX - 6\par     S.PY1 = CY + 7\par     S.PX2 = CX\par     S.PY2 = CY - 8\par     S.PX3 = CX + 6\par     S.PY3 = CY + 7\par     S.PX4 = CX - 10\par     S.PY4 = CY - 3\par     S.PX5 = CX + 10\par     S.PY5 = CY - 3\par END SELECT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! DrawShape - draw a shape\par !\par ! Shared Variables:\par !    triangle, square, star - possible shapes\par !\par ! Parameters:\par !    s - shape to draw\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB DRAWSHAPE(S AS SHAPERECORD)\par \par SHARED TRIANGLE, SQUARE, STAR\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! set the pen color for the shape\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SETSOLIDPENPAT (S.COLOR)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! draw the shape\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SELECT CASE S.KIND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE TRIANGLE\par     MOVETO (S.TX1, S.TY1)\par     LINETO (S.TX2, S.TY2)\par     LINETO (S.TX3, S.TY3)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    LINETO (S.TX1, S.TY1)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE SQUARE\par     MOVETO (S.SX1, S.SY1)\par     LINETO (S.SX2, S.SY2)\par     LINETO (S.SX4, S.SY4)\par     LINETO (S.SX3, S.SY3)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    LINETO (S.SX1, S.SY1)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE STAR\par     MOVETO (S.PX1, S.PY1)\par     LINETO (S.PX2, S.PY2)\par     LINETO (S.PX3, S.PY3)\par     LINETO (S.PX4, S.PY4)\par     LINETO (S.PX5, S.PY5)\par     LINETO (S.PX1, S.PY1)\par END SELECT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! InitGraphics - Set up for graphics\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SUB INITGRAPHICS\par HGR\par SETPENMODE (0)\par SETSOLIDPENPAT (15)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! RandomValue - Return a random number in the range 1 to max\par !\par ! Parameters:\par !    max - maximum allowed value for the random number\par !\par ! Returns: Random number in the range 1..max\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FUNCTION RANDOMVALUE(MAX AS INTEGER ) AS INTEGER\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM VALUE AS INTEGER :! Random value to return\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {VALUE = 1 + RND (1) * MAX\par IF VALUE = MAX + 1 THEN\par   VALUE = MAX\par END IF\par RANDOMVALUE = VALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! UpdateShape - move the shape across the screen randomly\par !\par ! Shared Variables:\par !    triangle, square, star - possible shapes\par !\par ! Parameters:\par !    s - shape to update\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB UPDATESHAPE(S AS SHAPERECORD)\par \par SHARED TRIANGLE, SQUARE, STAR\par \par DIM DX AS INTEGER , DY AS INTEGER :! movement direction\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! get the walk direction\par DX = RANDOMVALUE(3) - 2\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DY = RANDOMVALUE(3) - 2\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! make sure we don't walk off of the screen, then update\par ! the position\par SELECT CASE S.KIND\par   CASE TRIANGLE\par     IF DX = - 1 THEN\par       IF S.TX1 < 1 THEN\par         DX = 0\par       END IF\par     END IF\par     IF DX = 1 THEN\par       IF S.TX3 >= 319 THEN\par         DX = 0\par       END IF\par     END IF\par     IF DY = - 1 THEN\par       IF S.TY2 < 1 THEN\par         DY = 0\par       END IF\par     END IF\par     IF DY = 1 THEN\par       IF S.TY3 >= 199 THEN\par         DY = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    S.TX1 = S.TX1 + DX\par     S.TY1 = S.TY1 + DY\par     S.TX2 = S.TX2 + DX\par     S.TY2 = S.TY2 + DY\par     S.TX3 = S.TX3 + DX\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    S.TY3 = S.TY3 + DY\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE SQUARE\par     IF DX = - 1 THEN\par       IF S.SX1 < 1 THEN\par         DX = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    IF DX = 1 THEN\par       IF S.SX2 >= 319 THEN\par         DX = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    IF DY = - 1 THEN\par       IF S.SY1 < 1 THEN\par         DY = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    IF DY = 1 THEN\par       IF S.SY3 >= 199 THEN\par         DY = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    S.SX1 = S.SX1 + DX\par     S.SY1 = S.SY1 + DY\par     S.SX2 = S.SX2 + DX\par     S.SY2 = S.SY2 + DY\par     S.SX3 = S.SX3 + DX\par     S.SY3 = S.SY3 + DY\par     S.SX4 = S.SX4 + DX\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    S.SY4 = S.SY4 + DY\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  CASE STAR\par     IF DX = - 1 THEN\par       IF S.PX4 < 1 THEN\par         DX = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    IF DX = 1 THEN\par       IF S.PX5 >= 319 THEN\par         DX = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    IF DY = - 1 THEN\par       IF S.PY2 < 1 THEN\par         DY = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    IF DY = 1 THEN\par       IF S.PY1 >= 199 THEN\par         DY = 0\par       END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    S.PX1 = S.PX1 + DX\par     S.PY1 = S.PY1 + DY\par     S.PX2 = S.PX2 + DX\par     S.PY2 = S.PY2 + DY\par     S.PX3 = S.PX3 + DX\par     S.PY3 = S.PY3 + DY\par     S.PX4 = S.PX4 + DX\par     S.PY4 = S.PY4 + DY\par     S.PX5 = S.PX5 + DX\par     S.PY5 = S.PY5 + DY\par END SELECT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Problem 10.3. One common use of variant records takes advantage of the fact that the variables in the variant part overlap. This fact can be used to examine the values of a complicated variable type.\par One thing that happens over and over in toolbox programming is to extract the least significant 16 bits from a long, or the most significant 16 bits. You can do this with math operations if you are very careful, but it is much easier and faster to do it with a variant record.\par Define a variant record with two variant parts. In one part, define a long integer. In the other part, define two integers, LSW and MSW, in that order. This record puts the two integers in the same memory as the long integer, so that you can save a long value and then extract the integer parts.\par Write a program that reads long integers from the keyboard, looping until a 0 is entered. Save this value in the record, then write the two integers.\par Experiment with this program a bit. What you should find is that for values up to 32767 the program prints the same value you entered for the least significant integer (the first one), then a zero for the most significant integer (the second one). As the numbers get larger, you start to fill in the sign bit, so the first integer is written as a negative number. Finally, when the numbers exceed 65535, values start to show up in the second integer.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v records\:variant}{\rxe variant_records}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v variant}{\v  records}{\rxe variant_records}}}{\par }\pard\plain \s2\sb240\sa120\keep\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244620}{\*\bkmkend variant_records}A Quick Tour of Some Advanced GSoft BASIC Features{\*\bkmkend _Toc444244620}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The next three topics cover some features in GSoft\~BASIC that are either missing in other implementations of BASIC or are not always implemented the same way. The also are not needed in this course. As you start to write your own programs outside of this course, though, they are all features you may want to use. The purpose of this section is to make you aware the features exist and show you basically what they are capable of.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244621}Changing the Size of Memory{\*\bkmkend _Toc444244621}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v SETMEM statement}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v memory\:changing size}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GSoft BASIC, The FREE Version!}}}{\i GSoft\~BASIC, The FREE Version}{ is limited to 16K of program space and 16K or variable space. The commercial version defaults to 64K for each area. That\rquote s more than enough for the programs in this course, and for most other programs, too, but you may eventually write a program that runs out of memory. The SETMEM statement lets you change the amount of memory available in either of these two buffers. See the GSoft\~BASIC reference manual for details.\par Of course, }{\i GSoft\~BASIC, The FREE Version}{ doesn\rquote t support these commands.\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244622}Libraries{\*\bkmkend _Toc444244622}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v User Tools}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v libraries}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v assembly language}}}{There are times in any high-level language where you need to drop into assembly language, either because of speed, space, or very peculiar location requirements for a particular subroutine. GSoft\~BASIC handles this using libraries, which are also the same as Apple\~II}{\fs20 GS}{ User Tools.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v GSoft BASIC, The FREE Version!}}}{The commercial version of GSoft\~BASIC comes with two libraries. We\rquote ll use one of those to see how you can use one from your programs. }{\i GSoft\~BASIC, The FREE Version}{ doesn\rquote t come with any libraries, but it does support them.\par The first step in using a library is to make sure it is installed in GSoft\~BASIC. The two that come with GSoft\~BASIC are installed when you install GSoft\~BASIC itself. If you\rquote re installing a library yourself, there are two files you need to copy.\par First, there will be a file named UserToolxxx, where xxx is a three-digit number from 001 to 255. This file must be copied to the Tools folder in your System folder. The System folder is on the disk you boot from. This disk must also be in the computer when your program runs.\par The other file generally has a name like Userxxx.gst, but it can actually have any name at all. The important point is that this file must have a file type of DVU ($5E) and an auxiliary file type of $8007. You can put this file several places, including the folder where GSoftBASIC.Sys16 is located or the folder where your program is located.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v LOADLIBRARY statement}}}{With the files in place, there are three steps to using a library. First you must load the library with the LOADLIBRARY statement. This actually reads the library from disk and places it in RAM. This is the step where the system folder must be online so the UserToolxxx file can be read from disk. The LOADLIBRARY statement is followed by the number of the library to load; this number is the same as the number that makes up the name of the UserToolxxx file.\par The second step is to make calls to the library.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v UNLOADLIBRARY statement}}}{Finally, just before your program exits, it should use the UNLOADLIBRARY statement to remove the library from memory. Like the LOADLIBRARY statement, UNLOADLIBRARY is followed by the number of the library.\par Here\rquote s a short program that uses the GSoft\~BASIC time library to read the current date and time.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {LOADLIBRARY 2\par PRINT DATESTRING ;" "; TIMESTRING\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {UNLOADLIBRARY 2\par }\pard\plain \s3\sb240\sa60\keepn\nowidctlpar\brdrt\brdrs\brdrw20\brsp20 \outlinelevel2\adjustright \b\f5\fs28\cgrid {{\*\bkmkstart _Toc444244623}The MakeRuntime Utility{\*\bkmkend _Toc444244623}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v MakeRuntime utility}}}{All of the programs you\rquote ve written so far run from GSoft\~BASIC itself. That\rquote s fine for a program only you use, or while you\rquote re developing the program, but once your creation is complete you may want to share it with others that don\rquote t have GSoft\~BASIC. That\rquote s where the MakeRuntime utility comes in.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v Finder}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v stand-alone programs}}}{This utility reads the program you create from within GSoft\~BASIC and creates a program that can run directly from the Finder, even if GSoft\~BASIC is not installed on the computer. It includes all tool interfaces, your program, the interfaces for any libraries, and enough of GSoft\~BASIC itself to run your program, cramming all of this into a single file the Finder can execute. The only thing you have to pass on to the person using the program is any libraries you have used. For example, if you wanted to give someone the program from the previous section that prints the date and time, you would also have to give them the file UserTool002 and tell them to copy it to their tools folder.\par I won\rquote t duplicate the documentation in the reference manual that tells you how to use this utility. The important point is that you know it exists so you can find it when you write a program you want to share.\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244624}Lesson Eleven \endash  Scanning Text{\*\bkmkend _Toc444244624}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244625}The Course of the Course{\*\bkmkend _Toc444244625}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {This lesson, and the three that follow, mark a changing point in the Learn to Program course. Instead of springing it on you with no warning, I thought it would be best to stop and look at what we have done so far and what is left.\par The first ten lessons were concerned primarily with teaching you the mechanics of programming. In those lessons you learned most of the features of GSoft\~BASIC. While we used a number of real programs to illustrate the features of the BASIC language, and frequently discussed principals of good programming practice, programming techniques were not the primary topic.\par It turns out that a few tasks turn up repeatedly in many different kinds of programs. The next four lessons deal with some of these basic techniques. In the process, you will get a chance to hone your programming skills.\par Because the nature of the material is changing, we will also change our approach a bit. In the first part of the course the text was laced with complete programs to illustrate the basic ideas. As the topics have changed, we have gradually moved away from that technique. Starting with this lesson, we will abandon it almost completely. Instead, we will talk about the concepts behind a particular algorithm. Complete subroutines will be shown in many cases. The problems, for the most part, will involve using these ideas to create complete programs. As always, the solutions are on the disk that comes with the course, so if you get stuck you can always refer to the complete solution.\par There are a number of reasons for changing to this approach. One is that you know how to create a program, now, but you still need lots of practice to get really good at it. Another is that we will be able to cover a lot more material this way. Finally, when the course is over, I want you to know how to read intermediate computer science books\emdash the kind of books that teach you about data structures, compiler theory, animation, and so on. Most of these books also give algorithms. If you are used to learning about programming methods by studying algorithms when you see these books for the first time, you will get a lot more out of them. I think it is better to learn to read an algorithm in a setting like this course, when complete programs are at least provided as part of the solution to a problem. In the algorithm books, you won\rquote t generally find any complete programs at all.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244626}Manipulating Text{\*\bkmkend _Toc444244626}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {In today\rquote s world of graphically based computers, it might seem that manipulating text just isn\rquote t important anymore. As it turns out, though, that simply isn\rquote t true. Stop and think about it for a moment. The editor you use to type in programs manipulates text. The dialogs you use to enter search strings handle text. The BASIC interpreter that creates programs starts with a text file. From word processors to spread sheets to adventure games, text is still a common way to store information in a computer, so programs still have to manipulate text. That means that, as a programmer, you should know some of the basic techniques used to deal with text.\par Programs that deal with text generally divide the task up into well-defined subtasks. These are called scanning, parsing, and semantics. An interpreter is a classic example of a program that manipulates text, so we will start by looking at each of these tasks from the standpoint of a BASIC interpreter. Later, we will see how many other programs use these same ideas.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v scanning text}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v lexical analysis}}}{Scanning, also called lexical analysis, is the process of collecting characters from the text and forming the characters into words. It\rquote s not that hard to do, but the idea is a very powerful one. As a quick example, let\rquote s look at a simple BASIC program and see how a scanner would break it up into words.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {PRINT "Hello, world."\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v tokens}}}{It is tempting to look at this program as a collection of characters, but if you stop and think about it for a minute, that isn't the way you read it. Instead of individual letters, you group the program into words. BASIC does the same thing. The scanner is responsible for reading the characters and forming words from the characters. These words are called tokens. The main driver for the interpreter never even looks at the characters. Instead, it calls a subroutine, which we will call NextToken, that reads characters until a complete word is formed, then returns a single value that indicates what the word is. The scanner would break our short sample program down into reserved words and reserved symbols, like PRINT; constants, like the string written by PRINT; and identifiers, like the names of any variables. In the case of the identifiers, the scanner also returns a string variable with the name of the identifier. For constants, it returns the value of the constant.\par Scanner\rquote s aren\rquote t limited to interpreters. Virtually any program that deals with words uses a scanner of some sort. Spelling checkers, text adventure games, and even some advanced database programs that accept English-like questions are just a few of the programs that use a scanner.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v parsers}}}{The next step in the process is called parsing. The parser looks at a sequence of tokens to see if they fit certain preconceived patters. For example, the BASIC interpreter knows that every line must start with a line number or a command, and if it starts with a line number, the line number must be followed by a command. It has a list of all of the possible commands, and checks this list as it starts to execute a line from the program. Compilers, interpreters, grammar checkers and adventure games are all examples of programs that use parsers.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v semantic analysis}}}{The last step is called semantic analysis. That\rquote s a fancy way of saying that the program figures out what the words mean. In the case of an interpreter, semantic analysis is when the program decides what to do and carries out the task. In an adventure game, semantic analysis is when the game decides that "I want to go north" means that the character should be moved from his current location to another location.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart scanners}{\*\bkmkstart _Toc444244627}Building a Simple Scanner{\*\bkmkend _Toc444244627}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v tokens}}}{The first step in writing a scanner is to decide, in very precise terms, what we mean by a token. In the case of a spelling checker we could define a token as any stream of characters that starts with a letter and contains only letters. Any other characters, such as punctuation marks or numbers, can be ignored, since you can\rquote t misspell a number or a comma. You can misuse them, of course, but not misspell them. A BASIC interpreter can\rquote t afford to skip commas or numbers, but it can skip comments, spaces, and end of line marks. In other words, one of the jobs of the scanner is to skip characters that are not relevant to the main program.\par Let\rquote s start with a scanner for a spelling checker. We will skip characters until we get to an alphabetic character, then collect the characters into a string until we get to a non-alphabetic character. We'll break this task down into two parts, reading characters from the file and forming tokens from the characters.\par There\rquote s more to reading characters from a file than you might think! There are three significant issues to deal with.\par First you have to decide how to report the fact that there are no more characters in the file. We\rquote ll use a simple but effective way. If there are no more characters in the file, we\rquote ll report an empty string for the next character.\par The second issue is reporting the end of a line. In programs like a spelling checker we really don\rquote t care about the end of the line per se. We do have to do something, though, to handle the situation when one word appears right at the end of a line, and the first character of the following line starts a new word. For our scanner, we\rquote ll report the end of the line with a space character.\par Finally, we need to read the file efficiently. It may surprise you, but one of the most serious time bottlenecks in every compiler I have ever written is the routine that gets the next character from a file. It\rquote s important to make this subroutine work quickly. One of the easiest things we can do in a BASIC program to speed up this process is to read the file in chunks rather than one character at a time. A convenient chunk in BASIC is a line, so we\rquote ll read the file one line at a time. That increases the bookkeeping a bit, but it makes the program a lot faster.\par Here\rquote s one way to implement the NextCh subroutine, as we\rquote ll call it. We\rquote ll pick it apart below.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! NextCh - get the next character from the file\par !\par ! Shared Variables:\par !    ch - next character from the file\par !    f - file number\par !    line$ - current line from the file\par !    lineindex - index of the character ch in line$\par !\par ! Notes: The end of a line is reported as a space\par !    character.\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB NEXTCH\par \par SHARED CH, F, LINE$, LINEINDEX\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! if we need one, get a new line\par IF LINEINDEX > LEN (LINE$) THEN\par   IF EOF (F) THEN\par     CH = ""\par   ELSE\par     LINE INPUT #F, LINE$\par     LINEINDEX = 0\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! check for an end of file\par IF LEN (CH) <> 0 THEN\par   LINEINDEX = LINEINDEX + 1\par   IF LINEINDEX > LEN (LINE$) THEN\par     ! handle an end of line\par     CH = " "\par   ELSE\par     ! report the next character\par     CH = MID$ (LINE$, LINEINDEX, 1)\par   END IF\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The key to understanding how this subroutine works is understanding the variables. As the subroutine runs, it picks characters out of a line read from the input file. The line that we\rquote re currently processing is LINE$. LINEINDEX is the index of the last character we plucked from the line; it will be 0 if we just read a new line. In the normal course of events, the subroutine increments LINEINDEX and returns the character at that location in the line.\par The first situation that comes up is reaching the end of a line. That\rquote s detected right at the start of the subroutine. This section of code also has to handle another exception to the normal flow of events, though, which is reaching the end of the file. If we have reached the end of the file, we set CH to an empty string. If we\rquote re not there yet the subroutine reads the next line and sets LINEINDEX to 0.\par The last half of the subroutine reports a character. It starts off with a check to see if we\rquote ve reached the end of the file, in which case it doesn\rquote t need to do anything else. It also checks to see if we\rquote ve just reached the end of the current line, in which case the subroutine sets CH to a space. If we make it past that check, we\rquote ve handled all possible exceptions to the normal flow of events, so we can return the next character in the current line.\par We need to initialize the variables used by NextCh before calling in the first time. Here\rquote s one way to set them up:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {CH = " "\par LINE$ = ""\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LINEINDEX = 0\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par What we\rquote ve done with these lines is lie to the subroutine, telling it one line has already been read from the file. We\rquote ve also set CH to a space so the end of file check in the second half of the subroutine can\rquote t be triggered. The first call to NextCh will report a space as the end of this fake line, so part of the initialization is to call NextCh one time to dump that initial character.\par The subroutine NextToken, shown below, breaks the file up into words. While the compares on the IF statements are rather involved, the subroutine itself is actually quite simple. It skips characters, calling NextCh until it finds an alphabetic character or the end of the file. Next it reads characters, appending them to the string TOKEN until a non-alphabetic character or the end of the file is found.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \v\f6\fs20\cgrid {\xe {\v tokens}}}{!----------------------------------------------------------\par !\par ! NextToken - read a word from the file\par !\par ! Shared Variables:\par !    ch - next character from the file\par !    token - string in which to return the token\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB NEXTTOKEN\par \par SHARED CH, TOKEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! initialize the token\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TOKEN = ""\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! skip to the first character\par WHILE ( ASC (CH) <> 0) AND (CH < "A" OR (CH > "Z" AND CH < "a") OR CH > "z")\par   CALL NEXTCH\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! read the word\par WHILE ( ASC (CH) <> 0) AND ((CH >= "A" AND CH <= "Z") OR (CH >= "a" AND CH <= "z"))\par   TOKEN = TOKEN + CH\par   CALL NEXTCH\par WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Problem 11.1. Write a program based on NextCh and NextToken that will scan a text file and write a list of the words in the file, one word per line. As a test, try the program on the source code for the program itself. Be sure you save the program as a source or text file, though, not a tokenized file. In other words, use the SSAVE or TSAVE command, not the SAVE command, to save the file.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v scanning text}{\rxe scanners}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart symbol_table}{\*\bkmkstart _Toc444244628}{\*\bkmkend scanners}Symbol Tables{\*\bkmkend _Toc444244628}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {One way to write a spelling checker is to collect each word and search for it in a dictionary. Depending on how the spelling checker works, if you find a word that is not in the dictionary, you could print it, display it and let the user correct or accept it, or save it and print a list of words later. This approach works pretty well for interactive spelling checkers. Not so long ago, though, spelling checkers were generally not built right into word processors. Instead, they were separate programs. In this kind of spelling checker, instead of looking up a word as soon as it is found, the words are saved in a linked list. In this kind of spelling checker, only one copy of each word is saved. After the entire document has been scanned, each word is looked up in the dictionary. This drastically cuts the number of times the program needs to look up a word. As a result, the spelling checker is a lot faster than one that looks up each word when it is read from the source file.\par This list of words has a name: It is called a symbol table. Finding words in a symbol table is such a common task that an enormous amount of effort has gone into finding very fast ways to look up a word. We\rquote ll look at some of these later. For now, though, we will use a simple linked list.\par To keep things simple, we generally don\rquote t put a word in a symbol table in the NextToken subroutine. Instead, the main program repeatedly calls NextToken, then another subroutine which we will call Insert. Insert creates the symbol table.\par In most real programs we put more than just the symbol itself in the symbol table. In our program we will also keep track of how many times the word appeared in the file. The Insert procedure shows how this is done. It uses a record called SYMBOLRECORD, which defines a single entry in the symbol table. This record is defined globally so we can also use a global variable to point to the first element of the linked list. The record looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {TYPE SYMBOLRECORD\par   NEXTP AS POINTER TO SYMBOLRECORD\par   COUNT AS INTEGER\par   SYMBOL AS STRING\par END TYPE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TYPE SYMBOLPTR AS POINTER TO SYMBOLRECORD\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You know enough to write Insert on your own. It\rquote s job is to scan the symbols already in the symbol table, incrementing the count on the existing symbol if a new word is already in the table. If the word isn\rquote t in the table, Insert should create a new entry in the symbol table for the token and initialize the count to 1. My version is shown in the text.\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Insert - insert a word in the symbol table\par !\par ! Shared Variables:\par !    token - symbol to insert\par !    table - symbol table\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB INSERT\par \par SHARED TOKEN, TABLE\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM SYM AS SYMBOLPTR:! the symbol we found\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM SPTR AS SYMBOLPTR:! work pointer\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! try to find the symbol in the current symbol table\par SYM = NIL\par SPTR = TABLE\par WHILE SPTR <> NIL AND SYM = NIL\par   IF SPTR^.SYMBOL = TOKEN THEN\par     ! yes -> mark the symbol\par     SYM = SPTR\par   END IF\par   SPTR = SPTR^.NEXTP\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! if we didn't find the symbol, create a new one\par IF SYM = NIL THEN\par   ALLOCATE (SYM)\par   IF SYM <> NIL THEN\par     SYM^.NEXTP = TABLE\par     TABLE = SYM\par     SYM^.SYMBOL = TOKEN\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! update the symbol count\par IF SYM <> NIL THEN\par   SYM^.COUNT = SYM^.COUNT + 1\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There is one thing about this subroutine that is worth pointing out. What happens if ALLOCATE can\rquote t get more memory for a new entry in the symbol table? That\rquote s actually very, very unlikely, but assuming \ldblquote unlikely\rdblquote  is the same thing as \ldblquote impossible\rdblquote  is one of the easiest ways to create an unreliable program. Sometimes even assuming \ldblquote impossible\rdblquote  is really impossible can lead to disaster. A classic example is the crash of the first French Arian\u0\'00 \u0\'00 rocket. Many of the systems in this rocket were from the older version\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00\u0\'00. In that version, a programmer used an integer value for a speed component, knowing the rocket could not go fast enough to overflow the number. You guessed it. The Arian\u0\'00 \u0\'00 rocket flew fast enough to overflow the buffer, causing it to veer off course, forcing its destruction!\par \par Problem 13.2. Using NextCh, NextToken and Insert, create a program that will count the number of words in a file, and print the number of times each word appears in the file.\par Using the techniques covered so far, this program will be very, very slow. Be patient, though. We\rquote ll deal with the speed issue later.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v symbol tables}{\rxe variant_records}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart parser}{\*\bkmkstart _Toc444244629}{\*\bkmkend symbol_table}Parsing{\*\bkmkend _Toc444244629}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {At one time or another you have probably played one of the adventure games that lets you type text commands. Did you ever wonder how they worked? Some of them can recognize all of these sentences, and in each case they will move the character to the north:\par \par }{\f6\fs20 Go north.\par Run to the north.\par I want to move north, now.\par North is the direction that I would like to go.\par }{\par Many of these programs are pretty small, so they can\rquote t be doing anything particularly difficult. How do they work?\par There is one surprisingly simple way to create a program that can recognize and act on all of these commands. It involves building a verb and subject table. Look carefully at the sentences. In each of our examples, there is a verb that indicates you want to move, like go or run. There is also a direction, north. The simple parsers used in the adventure games scan a sentence looking for a verb and subject the program recognizes. All of the other words are simply discarded. The parser returns the verb and subject, and the program takes some action.\par Games aren\rquote t the only place this method is used. The same basic idea is used in a program called Eliza, the first computer psychologist. This simple demonstration program is surprisingly effective at giving almost human-like responses, yet it is only a few dozen lines long. An even more direct application of this technology is found in some database query programs written for people who don\rquote t normally use computers. For example, you might type\par \par }{\f6\fs20 Where can I find information\par about Kansas and wheat crops?\par }{\par The database program scans the line, finding just a few relevant words. The verb is find. There are two subjects, Kansas and wheat, separated by a Boolean operator, and. The database program scans its list of articles and books, looking for all of the ones that have both Kansas and wheat in the list of key words.\par Let\rquote s put these ideas to work in a simple parser to move a spot around on the screen. We are creating a simple robotic control language to move an object around. It would be natural for a person to use a variety of words to describe a direction, and a variety of words to describe movement. For movement, our parser will recognize go and move. For directions, it will recognize left, right, up, down, north, south, east and west. It is the parser\rquote s job to make things easy for the main program, so it will report only one value for each direction. We also need a way to quit, so we will add the verb quit to the parser. Quit does not have a subject; it simply means that we are finished. Stop will also be recognized as another form of quit. Our parser assumes that the scanner is converting all characters to uppercase, and that the scanner reads and processes one line at a time, rather than an entire file. In the GetAction subroutine that does the parsing, pay special attention to how NONE is used to indicate that nothing has been found yet. This \ldblquote empty\rdblquote  value simplifies the program quite a bit.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! GetAction - find out what the player wants to do\par !\par ! Shared Variables:\par !    ch - next character from the file\par !    line$ - line containing the characters\par !    lineindex - index of the character ch in line$\par !    verb - action to take\par !    subject - what we do the action to or with\par !    none, go, quit - verbs\par !    up, down, left, right - subjects\par !    token - string in which to return the token\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB GETACTION\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SHARED CH, LINE$, LINEINDEX, TOKEN\par SHARED SUBJECT, VERB\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SHARED NONE, UP, DOWN, LEFT, RIGHT, GO, QUIT\par \par DIM PROMPT AS STRING :! Prompt for the line input\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! start with no subject or verb\par VERB = NONE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SUBJECT = NONE\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! set up a default prompt\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PROMPT = "Your command, Sir: "\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {WHILE VERB = NONE\par   ! get a command line\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  LINE$ = GETLINE(PROMPT)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! set up the scanner\par   CH = " "\par   LINEINDEX = 0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL NEXTCH\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! handle the command\par   DO\par     ! get the next token\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    CALL NEXTTOKEN\par \par     SELECT CASE TOKEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {        ! handle a subject\par       CASE "NORTH", "UP":SUBJECT = UP\par       CASE "SOUTH", "DOWN":SUBJECT = DOWN\par       CASE "EAST", "RIGHT":SUBJECT = RIGHT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {      CASE "WEST", "LEFT":SUBJECT = LEFT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {        ! handle a verb\par       CASE "QUIT", "STOP":VERB = QUIT\par       CASE "GO", "MOVE":VERB = GO\par     END SELECT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  LOOP UNTIL LEN (TOKEN) = 0\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! make sure the input is complete and consistent\par   SELECT CASE VERB\par     CASE NONE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {      PROMPT = "Please tell me what to do (go or stop)."\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    CASE GO\par       IF SUBJECT = NONE THEN\par         PROMPT = "Please tell me which way to go."\par         VERB = NONE\par       END IF\par   END SELECT\par WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\f6\fs20 \par }{The various values for subjects and verbs, like NONE, DOWN and GO, are declared as constants in the main program.\par This is a simple example of a parser. As the number of subjects and verbs increases, the number of rules that are used to combine them also goes up. Some subjects will apply only to certain verbs. In our program, we have an example of a verb, QUIT, that doesn\rquote t even have a subject. Some programs also allow subjects with no verb. For example, the adventure game Zork lets you type north, with no verb, to move north. As the possibilities grow, programmers start to use other techniques besides writing SELECT CASE statements for each possibility. Arrays can be used for moderate numbers of subjects and verbs. You index into the array by the subject and verb to find out which subroutine to call. For even more complex programs, techniques for writing rule-based programs can be used. In short, this subroutine gives you some basic ideas you can use to write a program that reads text. If you will be writing large programs using these ideas, though, you should spend some time looking at the more advanced techniques before starting your program.\par There is one interesting problem you will have to deal with to build a program that exercises this parser. It would be natural to draw the robot on the graphics screen, but that leaves us with no way to ask for text input. Mixing text and graphics is pretty tough to do without using the Apple\~II}{\fs20 GS}{ toolbox, which is beyond the scope of this course. One way to handle this is to draw the robot on the text screen instead of the graphics screen. Creating the robot is easy enough: we can print an asterisk on the screen, erasing it with a space. The problem is positioning the robot on the screen.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v HTAB command}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v VTAB command}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v cursor position}}}{There are two statements that make positioning text on the screen fairly easy. HTAB sets the horizontal position where the next character will be printed, and VTAB sets the vertical position. The top left corner on the text screen is 1, 1, with the values incrementing as you move right or down.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v HOME statement}}}{Another statement you might find handy in this program is HOME. HOME clears the entire screen and sets the position to 1, 1.\par Here\rquote s a short subroutine that shows you how you can use these statements to print a character at a specific location on the text screen.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! DrawRobot - draw the robot\par !\par ! Shared Variables:\par !    x,y - position of the robot\par !    ch - character to draw\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB DRAWROBOT(X AS INTEGER , Y AS INTEGER , CH AS STRING )\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {HTAB X\par VTAB Y\par PRINT CH;\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Problem 11.3. Write a program to move a spot in the graphics window. The program should use a modified form of the NextToken parser that reads characters from a line instead of a file. NextToken should return tokens with all of the characters converted to uppercase letters.\par With these changes in mind, the business end of the main program should include a main loop that looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {DO\par   ! find out what we are supposed to do\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL GETACTION\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! if it is a movement then move\par   IF VERB = GO THEN\par     ! erase the old robot\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    CALL DRAWROBOT(X, Y, " ")\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! move the robot\par     SELECT CASE SUBJECT\par       CASE UP:Y = Y - 1\par       CASE DOWN:Y = Y + 1\par       CASE LEFT:X = X - 1\par       CASE RIGHT:X = X + 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END SELECT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! draw the robot in the new spot\par     CALL DRAWROBOT(X, Y, "*")\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LOOP UNTIL VERB = QUIT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Be sure you remember to initialize X and Y, and draw the starting position of the robot, before the program starts.\par GetAction will need to read a line from the user. Read that line from the top of the screen, erasing any old typed input first by writing enough spaces to the screen to clear out the old line.\par This problem leaves more of the design of the program to you than any previous problem in the course. If you get stuck, keep in mind that there is a solution on the solutions disk. There are lots of correct ways to write this program. Once you finish, check out the solution to see another way to write the program, and to see where your program seems better organized and what tricks you can pick up from the solution.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v parsers}{\rxe parser}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244630}{\*\bkmkend parser}Lesson Twelve \endash \~Recursion{\*\bkmkend _Toc444244630}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart recursion}{\*\bkmkstart _Toc444244631}A Quick Look at Recursion{\*\bkmkend _Toc444244631}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {By now you are well acquainted with defining and calling subroutines. An interesting point about subroutines that we haven\rquote t talked about, and that you may not have noticed, is that a subroutine can call itself. The ability of a subroutine to call itself opens up a whole new concept in programming called recursion.\par We will start our look at recursion using a simple example. The purpose of this first section is to tell you about the mechanics of recursion. With the mechanics out of the way, we will look at recursion as a problem solving technique, solving the classic problem of the Towers of Hanoi. We will then combine recursion with a simple scanner, like the ones you wrote in the last lesson, to create a recursive descent expression evaluator.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244632}How Procedures Call Themselves{\*\bkmkend _Toc444244632}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Let\rquote s start by looking at a short program. This program multiplies two positive integers.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {PRINT MULT(4, 5)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FUNCTION MULT(X AS INTEGER , Y AS INTEGER ) AS INTEGER\par IF Y = 0 THEN\par   MULT = 0\par ELSE\par   MULT = MULT(X, Y - 1) + X\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Let\rquote s face it, that\rquote s a pretty weird looking program. We will start by tracing through the program to see how it works.\par Stepping through the program, the first thing that happens is MULT gets called with X = 4 and Y = 5. After testing to see if Y is zero, the subroutine executes this statement:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {MULT = MULT(X, Y - 1) + X\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This statement is fairly strange all by itself. Here we have a function call, MULT(X, Y - 1), and an assignment to the function. You have seen both of these things by themselves, but never together on the same statement. What does this mean? Well, the statement calls MULT again, this time with X = 4, and Y = 4. Assuming for the moment that this subroutine really will do a multiply properly, the function must return 16. We then add X, which is 4, getting an answer of 20. This value is assigned to MULT, so it is the value the subroutine will return. Of course, 4*5 is, in fact, 20, so if the call to MULT with X = 4 and Y = 4 works, the function will actually return the correct answer.\par It is fair to ask how the BASIC knows the difference between calling a function and assigning a value for the function to return. After all, the name of the identifier is the same in both cases, and as we have just seen, a function call and an assignment to set the value returned by the function can occur in the same function. The answer lies in which side of the assignment operator the function name is used. If the function name occurs on the left side of the assignment operator, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {MULT = <some expression>\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {BASIC evaluates the expression on the right side and assigns the value to the function. The function then returns this value to whoever called the function. If the function name is used as part of an expression, like this:\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {<someplace to put the value> = MULT(X, Y - 1) + X\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par }\pard \s28\sb40\widctlpar\adjustright {BASIC calls the function and uses the value it returns.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Going back to our example, we said that the function would return the correct value if MULT(4, 4) returned 16. Convince yourself that it does by tracing thorough the program. As you go through, assume that MULT will return the correct value for MULT(4, 3). You can continue this process right down to the point where a call is made with Y = 0.\par \par Problem 12.1. The example showed you how to do a multiplication using recursion. Basically, the program made use of the fact that, when N is any number greater than 0, M * N gives the same result as M * (N - 1) + M. You can find the exponent of a number the same way. For example, 2^3 (2 raised to the power 3) is 8, or 2*2*2. This is the same as (2^2)*2. Change the program so it calculates an exponent, given two integers as input. Use it to verify that 5^4 is 625. As with the addition example, be sure and step through the program.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244633}Recursion is a Way of Thinking{\*\bkmkend _Toc444244633}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {After trying to keep track of all of the values as you traced through a simple recursive program, I don\rquote t think it will be hard to convince you that you can\rquote t think about recursion the same way you think about IF statements, WHILE loops, and so forth. You will get so tangled up in the details of keeping track of all of the values and how many times the function has been called that you will forget what you are trying to accomplish. You may start to think that anyone that understands recursion must have a mind that would have made Einstein envious. I\rquote ve watched a number of beginning programmers who would agree as they struggled with recursion, trying to analyze all of those values and calls. It reminds me of the time I opened the course outline for Classical Mechanics in college and saw, on the front page of the outline, in the middle of the page, boldfaced, the following quote:\par \par }\pard \s28\qc\fi360\ri360\sb40\widctlpar\adjustright {\b Any problem, no matter how difficult, can be made still more difficult if looked at it in the right way.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par No kidding.\par Once you understand that a function can call itself, and that it can have multiple copies of local variables and still keep track of everything, you should never trace through a recursive subroutine, trying to follow the values, again. If you do, you are simply thinking about the problem the wrong way.\par Instead, think about a piece of the problem, not the whole thing. Instead of thinking about the multiply as a series of function calls, look at what happens on any particular call. For the multiply function, there are two possibilities: either Y is zero, or it is not. As you know, zero multiplied by any other number is still zero, so we know it is correct for the function to return zero if Y is zero. If Y is not zero, we apply a simple rule: X * Y is the same as X * (Y - 1) + X. So, what is X * (Y - 1)? We don\rquote t know. More important, we don\rquote t care. The rule works all of the time, so we truly don\rquote t have to worry about what X * (Y - 1) is; a call to a correct multiply routine gives us that answer. With the answer to X * (Y - 1) in hand, we add X and return the correct answer for X * Y. The crucial point to remember is that we don\rquote t try to trace through the morass of function calls to see what X * (Y - 1) will give us: We recognize that if the function returns the correct value for one terminal case, in our example when Y = 0, and that if it returns the correct answer for X and Y, assuming that X*(Y-1) is done correctly, that it must return the correct answer all of the time. Mathematicians call this a proof by induction.\par A good way to keep this in mind is to remember that any recursive function must satisfy two conditions to work. First, it has to have a way to stop. In the case of the multiply subroutine, we stopped when Y reached zero. Second, each call must move you closer to the stopping place than you were when the subroutine was called. In our multiply subroutine, any call that was made with Y greater than 0 reduced Y.\par Let\rquote s put these ideas to work to solve a classic puzzle, the Towers of Hanoi. This is a puzzle that quickly befuddles anyone who tries to solve it iteratively, the way you have been writing programs up until this lesson. The puzzle starts with six disks, all of a different size, sitting on one of three pegs, like this:\par \par }{\f12\fs20 {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw312\pich69\picwgoal6240\pichgoal1380\macpict\bliptag2114089239\blipupi72{\*\blipuid 7e027117cdc0046b0a10753b80d7c720}007d00070007004c013f1101a0008201000a00070007004c013f0700040004220008003e003f22000800bc003f220008013a003f0a000000000000000034003e0008004b00783834003500110042006f3834002c001a003900663834002300230030005d3834001a002c00270054383400110035001e004b38a00083ff00}}{\par \par The object is to move all of the disks from the left-hand peg to the right-hand peg. On each turn you can move only one disk. The only other restriction is that you can never cover one disk with a larger disk. Stop and try this before going on. You can cut the six disks from pieces of paper, and stack them on your desk instead of using pegs. You can also do a short version of the puzzle with a penny, nickel, dime and quarter.\par So, did you solve the puzzle iteratively? Even if you didn\rquote t make any mistakes, it takes 63 different moves to solve the puzzle. Can you keep that many moves straight in your head? If so, you have a better mind than mine.\par The way to solve the puzzle is to turn it around. Instead of trying to move the top disk, you have to realize that the real problem is to move the bottom disk! The goal is to move the top five disks from the first peg to the second, like this:\par \par }{\f12\fs20 {\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw312\pich69\picwgoal6240\pichgoal1380\macpict\bliptag-830821160\blipupi72{\*\blipuid ce7aacd8d8c3c032818bbf6e4280be23}007d00070007004c013f1101a0008201000a00070007004c013f0700040004220008003e003f22000800bc003f220008013a003f0a000000000000000034003e0008004b00783834003e008f004b00ed383400350098004200e43834002c00a1003900db3834002300aa003000d23834001a00b3002700c938a00083ff00}}{\par \par The next step is to move the bottom disk to the third peg.\par \par }{\f12\fs20                 }{\f12\fs20 {\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw312\pich69\picwgoal6240\pichgoal1380\macpict\bliptag-2044240256\blipupi72{\*\blipuid 86275e80e3a92d4e34baf6fb1458c52d}007d00070007004c013f1101a0008201000a00070007004c013f07000400042200080008003f2200080086003f2200080104003f0a000000000000000034003e0059004b00b7383400350062004200ae3834002c006b003900a53834002300740030009c3834001a007d002700933834003e00ce004b013e38a00083ff00}}{\par \par The last step is to move the pile of five disks from the second peg to the third.\par \par }{\f12\fs20                 }{\f12\fs20 {\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw312\pich69\picwgoal6240\pichgoal1380\macpict\bliptag-1128558918\blipupi72{\*\blipuid bcbb8ebaa0b82c374b6cd7d188e3ccbb}007d00070007004c013f1101a0008201000a00070007004c013f07000400042200080008003f2200080086003f2200080104003f0a000000000000000034003e00ce004b013e3834003500d7004201353834002c00e00039012c3834002300e9003001233834001a00f20027011a3834001100fb001e011138a00083ff00}}{\par \par Expressing this as a BASIC procedure, we get something like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {SUB MOVEDISKS(COUNT AS INTEGER , SRC AS INTEGER , DEST AS INTEGER , SPARE AS INTEGER )\par \par IF COUNT <> 0 THEN\par   CALL MOVEDISKS(COUNT - 1, SRC, SPARE, DEST)\par   CALL MOVEONEDISK(SRC, DEST)\par   CALL MOVEDISKS(COUNT - 1, SPARE, DEST, SRC)\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par MOVEONEDISK, of course, is a subroutine that takes the top disk from one peg and places it on another. We could represent the different pegs as three arrays, one for each peg, with six spots in each array. Each spot could be empty, or it might have one of the disks. In practice it\rquote s generally easier to have one extra space on each peg that is always empty; this just simplifies the checks that need to be made as you look for the top disk on a peg.\par The important thing to recognize is that we haven\rquote t worried about how to move five disks from the first peg to the second. We know that if we can move six disks by first moving the top five, then moving the bottom disk, and finally moving the top five disks again, that we can use exactly the same idea to move the five disks. After all, to move five disks, we start by moving four of them to the spare peg, then we move the bottom disk, and finally we move the four disks to the correct peg. To move four disks... well, you get the idea. Eventually, we end up with the trivial problem of moving one disk.\par \par Problem 12.2. Write a program that solves the Towers of Hanoi problem. Draw the disks in the graphics window as they are moved around by the call to MOVEONEDISK.\par \par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v linked lists}}}{Problem 12.3. Recursion can be used to process a linked list in reverse order. To see this idea in action, write a program that builds a linked list, stuffing the numbers 1 to 10 in the records, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {FOR I = 1 TO 10\par   ALLOCATE (P)\par   IF P <> NIL THEN\par     P^.NEXTP = FIRST\par     P^.VALUE = I\par     FIRST = P\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {NEXT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Next, write a recursive procedure that prints the values in the list. On each call, the recursive procedure should return if the pointer that is passed to it is NIL. If the pointer is not NIL, the procedure should call itself, then print the current value, like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {CALL PRINTLIST(P^.NEXTP)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {PRINT P^.VALUE\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par After you write the program, reverse the last two statements, and run it again. This time, the program prints the numbers in reverse order. Make sure you understand why, tracing a few iterations with pencil and paper if you really must.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart parsers2}{\*\bkmkstart _Toc444244634}A Practical Application of Recursion{\*\bkmkend _Toc444244634}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v evaluating expressions}}}{In the last lesson we looked briefly at scanners and parsers. One of the easiest kind of parser to implement is called a recursive descent parser. To see how recursion can be used in a parser, we will solve a problem that had computer scientists stumped for a long time back in the early days of computing, when they were trying to write the first compilers. The problem is to solve a mathematically expressed equation.\par For example, you know that\par \par }{\f6\fs20 (4 + 5) * (1 + 2)\par }{\par }\pard \s28\sb40\widctlpar\adjustright {is evaluated by adding the terms in parenthesis first, then doing the multiply. How can we write a program that can do this? It\rquote s not an idle problem: Over the years I have been asked to write a number of programs that had to solve an equation like this one. The problem doesn\rquote t just crop up in computer languages, either. You need to solve equations in math programs that graph functions, in spread sheets, and even in some databases.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {To see how to solve this problem we will write a simple expression evaluator that can add, subtract, multiply and divide. It will accept integer numbers and parenthesis. Just as in algebra and BASIC, add and subtract will have the same precedence, and multiply and divide will have the same precedence, but multiply and divide have a higher precedence than add or subtract.\par To get a grasp on how the expression evaluator will work, let\rquote s look at this expression:\par \par }{\f6\fs20 4 * 5 + 9 / 2 - 6\par }{\par To solve this expression by hand we would first scan through, doing all of the multiply and divide operations, leaving only numbers and the add and subtract operations.\par \par }{\f6\fs20 20 + 4 - 6\par }{\par This equation can be solved by working from left to right, adding and subtracting each new value to the old value. Thinking recursively, we can solve this equation by calling a function to do all of the stuff besides addition and subtraction, then checking to see if there is an add or subtract operation, and finally looping. In true recursive style, not to mention structured programming style, we won\rquote t worry about how the subroutine that does the multiplies and divides works. Instead, we solve the smaller problem. Here is our solution, a function that calls another function, FACTOR, to read numbers, do multiplication, and handle parenthesis, does the adds and subtracts that are left over, and returns the result. Our function assumes that the main program calls NEXTTOKEN one time to collect the first token from the input line before expression is called; this is a very common technique in recursive descent parsers.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! Expression - evaluate an expression\par !\par ! Shared Variables:\par !    token - last token read\par !    tokenValue - value of last integer token\par !    t_add, t_subtract, t_integer - names of the tokens\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par FUNCTION EXPRESSION AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SHARED TOKEN, TOKENVALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SHARED T_ADD, T_SUBTRACT, T_INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM FIRSTVALUE AS INTEGER , SECONDVALUE AS INTEGER :! values from FACTOR\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM OPERATION AS INTEGER :! type of the operation\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! get the first value\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FIRSTVALUE = FACTOR\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! handle any operations\par WHILE TOKEN = T_ADD OR TOKEN = T_SUBTRACT\par   ! skip the operation\par   OPERATION = TOKEN\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL NEXTTOKEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! get the second value\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  SECONDVALUE = FACTOR\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! do the operation\par   IF OPERATION = T_ADD THEN\par     FIRSTVALUE = FIRSTVALUE + SECONDVALUE\par   ELSE\par     FIRSTVALUE = FIRSTVALUE - SECONDVALUE\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! return the result\par EXPRESSION = FIRSTVALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Let\rquote s trace through this function with our sample expression,\par \par }{\f6\fs20 20 + 4 - 6\par }{\par }\pard \s28\sb40\widctlpar\adjustright {to see how it works. When the function is called, the main program has already called NEXTTOKEN, so the global variable TOKEN already has a value. It is holding an integer whose value is 20. So far, the function FACTOR doesn\rquote t have to do much. It just checks to be sure that token is an integer value, returns the value, and reads in the next token. When we get to the start of the while loop, then, value is 20. The + character has been read, and TOKEN has been set to ADD.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {At the start of the while loop we save the operation in a variable called, surprisingly enough, OPERATION and read the next number. If there is an operation, there must be a number after it. We\rquote ll trust FACTOR to flag an error if the number is missing. We then call FACTOR to get the next number, skipping the number token in the process, and do the operation. At the end of the while loop, value is 24, and TOKEN is SUBTRACT. One more pass through the while loop finishes off the expression, and we return a final value of 30.\par The next step is to handle multiplication and division. That\rquote s no trick, really. They work the same way addition and subtraction do! In this case, we will call a function called TERM to handle numbers and parenthesis. Everything else is an echo of the function that handles addition and subtraction.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! Factor - do multiplies and divides\par !\par ! Shared Variables:\par !    token - last token read\par !    tokenValue - value of last integer token\par !    t_multiply, t_divide, t_integer - names of the tokens\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par FUNCTION FACTOR AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SHARED TOKEN, TOKENVALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SHARED T_MULTIPLY, T_DIVIDE, T_INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM FIRSTVALUE AS INTEGER , SECONDVALUE AS INTEGER :! values from TERM\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM OPERATION AS INTEGER :! type of the operation\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! get the first value\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {FIRSTVALUE = TERM\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! handle any operations\par WHILE TOKEN = T_MULTIPLY OR TOKEN = T_DIVIDE\par   ! skip the operation\par   OPERATION = TOKEN\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL NEXTTOKEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! get the second value\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  SECONDVALUE = TERM\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! do the operation\par   IF OPERATION = T_MULTIPLY THEN\par     FIRSTVALUE = FIRSTVALUE * SECONDVALUE\par   ELSE\par     FIRSTVALUE = FIRSTVALUE / SECONDVALUE\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! return the result\par FACTOR = FIRSTVALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Trace through our sample equation\par \par }{\f6\fs20 4 * 5 + 9 / 2 - 6\par }{\par }\pard \s28\sb40\widctlpar\adjustright {to see how FACTOR works, and how FACTOR and EXPRESSION work together to make sure the operations are done in the correct order. For this short example keeping track of the global variables TERM and TOKEN on a piece of paper should work out well.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {The last step is to write the subroutine that handles numbers. There is one other thing that can appear at this point, though, and that is a parenthesis. TERM handles that particular problem by calling EXPRESSION to evaluate whatever appears between the parenthesis! EXPRESSION can then call FACTOR, which will call TERM, and so forth. This recursive call is what allows our expression handler to handle very complex equations.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! Term - Handle a number or parenthesis\par !\par ! Shared Variables:\par !    token - last token read\par !    tokenValue - value of last integer token\par !    t_integer, t_lparen, t_rparen - names of the tokens\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par FUNCTION TERM AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SHARED TOKEN, TOKENVALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SHARED T_INTEGER, T_LPAREN, T_RPAREN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF TOKEN = T_INTEGER THEN\par \par   ! handle an integer\par   TERM = TOKENVALUE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL NEXTTOKEN\par ELSE IF TOKEN = T_LPAREN THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! skip the (\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL NEXTTOKEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! evaluate the expression\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  TERM = EXPRESSION\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! skip the )\par   IF TOKEN = T_RPAREN THEN\par     CALL NEXTTOKEN\par   ELSE\par     PRINT "Syntax Error"\par   END IF\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Take a close look at the error message that is printed if TERM finds an opening parenthesis but no closing parenthesis. Does it look familiar? If not, you might glance through the list of error messages at the end of the GSoft\~BASIC manual. Now you know where those error messages come from!\par \par Problem 12.4. Write a program to evaluate an expression and write the value. Your program should handle addition, subtraction, multiplication, division, and parenthesis. All operations should be on integers.\par Your program should start by prompting the user for an expression. It should then call NEXTTOKEN to fetch the first token from the line, followed by a call to EXPRESSION to evaluate the expression. The program should loop repeatedly, reading new expressions, until the line typed by the user is a null string.\par While the text did not cover writing the NEXTTOKEN subroutine, all of the concepts were covered in the last lesson. Try to write NEXTTOKEN on your own; if you get stuck, refer to the solution.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v recursion}{\rxe recursion}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe parsers{\rxe parsers2}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart sorts}{\*\bkmkstart _Toc444244635}{\*\bkmkend recursion}{\*\bkmkend parsers2}Lesson Thirteen \endash  Sorts{\*\bkmkend _Toc444244635}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244636}Sorting{\*\bkmkend _Toc444244636}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Way back in Lesson 5 you got your first look at a sort. Sorting is a pretty common topic in programming courses for a number of reasons. First, there are many places in real programs where you need to sort some information. In some cases, it is pretty obvious that a sort is needed. For example, you may have sorted a database to put a list of people in alphabetical order. You may have sorted the same database to put the list in zip code order to get ready for a mass mailing. In other cases, the fact that something is being sorted is not so obvious, but sorts are none-the-less used. For example, a card playing game may sort a hand of cards.\par Another reason sorts are a popular topic is because sorting is a topic that people have spent enough time on to understand fairly well. Computer scientists who deal with the efficiency of algorithms have studied sorts for a long time. In the process, they have compiled a rather impressive list of different ways to sort information.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart shell_sort}{\*\bkmkstart _Toc444244637}The Shell Sort{\*\bkmkend _Toc444244637}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The shell sort is one of several basic sorting methods that are easy to implement, easy to understand, and reasonably efficient for small amounts of information. In the shell sort you loop over the information to be sorted, swapping entries if they are out of order. If you make a swap, you also set a flag to remind you that you found entries that were out of order. In that case, you will need to make another pass over the data to make sure it is in the right order. You keep doing this until you make a pass over the data without finding anything that is out of order. If you are a little fuzzy about the details, refer back to Lesson 5, where this sort was first performed.\par Here\rquote s a simple version of the sort that sorts an array of SIZE numbers, where SIZE is a constant or variable telling how many entries are in the array.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {DO\par   SWAP = FALSE\par   FOR I = 1 TO SIZE - 1\par     IF NUMS[I] > NUMS[I + 1] THEN\par       TEMP = NUMS[I]\par       NUMS[I] = NUMS[I + 1]\par       NUMS[I + 1] = NUMS[I]\par       SWAP = TRUE\par     END IF\par   NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LOOP WHILE SWAP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par When we start to worry about how efficient a sort is, we usually look at how many times we have to compare the numbers, since that is the operation we do most often. Let\rquote s trace through this routine for a short example and find out how efficient it is. We\rquote ll use a size of 5, with starting numbers of 5, 4, 3, 2 and 1, in that order. You should follow along with a pencil and paper, writing down the values of variables, executing this algorithm by hand, and counting the operations on your own.\par The first time through the loop we do four compares and four swaps. The numbers in the array are ordered like this after the first time through the loop:\par \par }{\f6\fs20 4  3  2  1  5\par }{\par We still have to do four compares each time through the loop. After the next loop, and four more compares, the array looks like this:\par \par }{\f6\fs20 3  2  1  4  5\par }{\par This process continues until the numbers are sorted. We have to do one extra pass after all of the numbers are sorted, since we keep going until SWAP stays FALSE. Here are the numbers in the array, along with the total number of compares we have performed:\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\f6\fs20 2  1  3  4  5       12\par 1  2  3  4  5       16\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\f6\fs20 1  2  3  4  5       20\par }{\par While we won\rquote t go through a formal mathematical proof, by trying a few cases you can probably convince yourself that if you are sorting N things, and the numbers start out in reverse order, the number of compares will be N * (N - 1). Starting with the array in reverse order is the worst possible situation for this sort, so we call this the worst case run time.\par In a sense, it is pretty unfair to judge anything by the worst case. This is especially true in computer science, since it turns out that in many situations the typical run time for an algorithm is very different than the worst case run time. In fact, there are many situations where the algorithm that has the best worst case run time is not the one with the best typical run time. On the other hand, you do need to know the worst case time, too, since you may be planning a program that is very time critical. In other words, it pays to know as much about algorithms and their efficiency as you can take the time to learn. You may end up picking one method of sorting in one program, and a different method in another.\par You will be able to find the worst case run time in published books for most algorithms you are likely to need. What if you can\rquote t find out about the algorithm from a book? Or, what if you find the algorithm, but they don\rquote t tell you the typical run time, only the worst case run time? Well, you\rquote ve already seen one way to find the worst case run time, by tracing through the program by hand. You could also do the same thing by machine, of course. While this doesn\rquote t give you a mathematical proof, counting the operations does give you a good handle on the run time of an algorithm. You can use the same idea to find the typical run time. These ideas are expanded on in the problems.\par \par Problem 13.1. Write a program that creates an array of integers in reverse order, like the array we looked at in the example in this section. Be sure and use a constant for the size of the array. Sort the array using the algorithm shown, but add a counter than counts the number of compares. Print this value.\par Run this program with arrays that have 2, 3, 4, 5, and 10 values. Do all of the numbers match the value N*(N + 1)?\par \par Problem 13.2. Finding the typical run time for an algorithm is a lot like finding the worst case run time, like you did in problem 13.1. If you have some actual samples of numbers you plan to sort, you can use the samples to find the typical run time. Another way is to use a simulation, filling the arrays with random values several times, then averaging the run time for the various sorts.\par Try this method to find the typical run time for the shell sort. Modify the program from problem 13.1 so it uses a random number generator to fill the array with values between 1 and the size of the array. To keep things simple, allow duplicates. In other words, you don\rquote t have to check to be sure that the random number generator returns each possible value once; it is fine if the array has some duplicates. Do this 100 times, and average the number of compares. Find the values for arrays with 2, 3, 4, 5, and 10 elements.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v sorting\:shell sort}{\rxe shell_sort}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v shell sort}{\v }{\rxe shell_sort}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart quick_sort}{\*\bkmkstart _Toc444244638}{\*\bkmkend shell_sort}Quick Sort{\*\bkmkend _Toc444244638}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {There are several ways of sorting information that are a little faster than the shell sort, but these generally still have a run time that is proportional to N*N, or something pretty close to N*N, like the N*(N-1) that we found for the shell sort. There are also some sorts that have a typical run time proportional to N*ln(N)/ln(2). To see what this means, let\rquote s stop and think about a fairly common sorting problem, sorting a mailing list to zip-code order. There are a variety of mailing lists that come in a variety of sizes, but it isn\rquote t uncommon to have 100,000 names in a mailing list. Sorting 100,000 names using the shell sort has a worst case run time of 100,000*(100,000-1), or 9,999,900,000 compares. To say the least, doing nearly ten billion compares takes some serious computer time, especially if you are comparing floating-point numbers, or worse yet, strings. The faster sorts that work in N*ln(N)/log(2) time, though, would do the same thing using 1,660,964 compares, which is over 6,000 times faster!\par The most popular of the fast sorts is a recursive sort called quick sort. Quick sort uses a divide and conquer technique. On each step, a pivot value is picked. Picking a good pivot value is something of a fine art, and it is a very important step. In most cases, the middle value is a good choice for the pivot value. For example, if you are sorting an array with indices from 1 to 100, you would use the 50th element as the pivot value. The routine then moves anything smaller than the pivot value to the left of the pivot, and anything larger than the pivot value to the right of the pivot. The recursive step comes next: the quick sort procedure calls itself, passing the part of the array to the left of the pivot, then makes another recursive call to sort the right half of the array.\par Understanding how this works is pretty tricky, so let\rquote s get used to it slowly. Type in the following program and make sure it works. It uses quick sort to sort a small array with ten values.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM A sample of quick sort.\par \par CONST SIZE = 10\par \par DIM A(SIZE) AS INTEGER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {CALL FILL\par CALL SORT(1, (SIZE))\par CALL PRINTARRAY\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Fill - fill an array\par !\par ! Shared Variables\par !    A - array to fill\par !    size - number of elements to fill\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB FILL\par \par SHARED A(), SIZE\par \par DIM I AS INTEGER :! loop variable\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FOR I = 1 TO SIZE\par   A(I) = SIZE + 1 - I\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! PrintArray - print the array\par !\par ! Shared Variables\par !    A - array to sort\par !    size - number of elements to fill\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTARRAY\par \par SHARED A(), SIZE\par \par DIM I AS INTEGER :! loop variable\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {FOR I = 1 TO SIZE\par   PRINT A(I)\par NEXT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Sort - sort an array\par !\par ! Shared Variables:\par !    A - array to sort\par !    size - number of elements to fill\par !\par ! Parameters:\par !    left, right - range of indices to sort\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB SORT(LEFT AS INTEGER , RIGHT AS INTEGER )\par \par SHARED A(), SIZE\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM I AS INTEGER , J AS INTEGER :! array indices\par DIM PIVOT AS INTEGER :! pivot value\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM TEMP AS INTEGER :! used to swap values\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! quit if there is only 1 element to sort\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {IF RIGHT > LEFT THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! find the pivot index\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  I = (LEFT - 1) + (RIGHT - LEFT + 1) / 2\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! put the pivot at the end and save it for compares\par   PIVOT = A(I)\par   A(I) = A(RIGHT)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  A(RIGHT) = PIVOT\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! set up the start indices\par   I = LEFT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  J = RIGHT - 1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! partition the array\par   WHILE I <> J\par     WHILE A(I) <= PIVOT AND I <> J\par       I = I + 1\par     WEND\par     WHILE A(J) >= PIVOT AND I <> J\par       J = J - 1\par     WEND\par     TEMP = A(I)\par     A(I) = A(J)\par     A(J) = TEMP\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! find the pivot insert point\par   IF A(I) < PIVOT THEN\par     I = I + 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! replace the pivot\par   TEMP = A(I)\par   A(I) = A(RIGHT)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  A(RIGHT) = TEMP\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! sort to the left of the pivot\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL SORT(LEFT, I - 1)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! sort to the right of the pivot\par   CALL SORT(I + 1, RIGHT)\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\f6\fs20 \par }{Type it in, then run the program once to make sure it is typed in correctly. \par For our first look at the SORT subroutine, we will not worry too much about how each statement works. Instead, let\rquote s look closely at what happens on the whole. The SORT subroutine is really divided into four distinct steps:\par \par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 1.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls18\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls18\adjustright {Find a pivot value.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 2.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls18\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls18\adjustright {Put everything smaller than the pivot to the left of the pivot value, and everything larger than the pivot value to the right of the pivot.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 3.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls18\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls18\adjustright {Sort the values to the left of the pivot.\par {\pntext\pard\plain\s28 \hich\af4\dbch\af0\loch\f4 4.\tab}}\pard \s28\fi-360\li720\sb40\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls18\pnrnot0\pndec\pnstart1\pnindent360\pnhang{\pntxta .}}\ls18\adjustright {Sort the values to the right of the pivot.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par This is a classic example of recursion as we saw it in the last lesson. To understand quick sort, it is very important to look at what happens on one step, not worrying about how we "sort everything to the left of the pivot."\par The first few lines of the procedure find the pivot value and move it to the right-hand side of the array, where it is out of the way:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {  ! find the pivot index\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  I = (LEFT - 1) + (RIGHT - LEFT + 1) / 2\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! put the pivot at the end and save it for compares\par   PIVOT = A(I)\par   A(I) = A(RIGHT)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  A(RIGHT) = PIVOT\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par It may seem strange to go to all of the work to pluck a pivot from the middle of the array and move it to the right-hand side of the array, but there really is a good reason to do this. The algorithm to shuffle the values smaller than the pivot to the left, and the values larger than the pivot to the right, is a lot simpler and faster if we move the pivot value out of the way. It might seem like a good idea to simply use the right-hand value for the pivot, then. It turns out that this is a rotten idea. If you pick the right-hand value for the pivot, and start with a sorted array, quick sort gives the worst performance possible. In practice, picking the middle element of the array for the pivot works very well. An alternate scheme that works even better is to examine the leftmost, rightmost and middle value and pick the middle of the three values. Other schemes for picking a pivot are covered in books that go into more detail on sorting.\par The next step is to partition the array. That\rquote s the term used to describe the process of shuffling all of the values less of the pivot to the left, and all of the values higher than the pivot right.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {  ! set up the start indices\par   I = LEFT\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  J = RIGHT - 1\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! partition the array\par   WHILE I <> J\par     WHILE A(I) <= PIVOT AND I <> J\par       I = I + 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    WEND\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    WHILE A(J) >= PIVOT AND I <> J\par       J = J - 1\par     WEND\par     TEMP = A(I)\par     A(I) = A(J)\par     A(J) = TEMP\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  WEND\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This step uses two array indices, I and J. They start at opposite ends of the array, working their way towards the middle until they meet (which means we are finished) or they hit a value that is in the wrong spot. If a value is found that is out of place, it is swapped with another value that is out of place on the other end of the array. \par Once the array is partitioned, the pivot value itself is floated to the proper spot in the array.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {  ! find the pivot insert point\par   IF A(I) < PIVOT THEN\par     I = I + 1\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! replace the pivot\par   TEMP = A(I)\par   A(I) = A(RIGHT)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  A(RIGHT) = TEMP\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par With these steps complete, SORT has finished the first cycle through the array and is ready to sort the two partitions. At the point the array actually looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {2 3 4 5 1 6 8 9 10 7\par }\pard\plain \s28\sb40\widctlpar\adjustright \f4\cgrid {\par The partition value of 6 has been floated to it\rquote s proper spot. Every value smaller than 6 appears to it\rquote s left, and everything larger than 6 appears to the right.\par }\pard \s28\fi360\sb40\widctlpar\adjustright {The last step is to call SORT recursively two times, once for the portion of the array to the left of 6, and once for the portion of the array to the right of 6. Each of these calls will perform this same process to sort the smaller piece of the array until SORT is called with the indexes the same. One element can\rquote t be out of order, so that\rquote s when SORT finally return without calling itself.\par Let\rquote s face it: Quick sort is quite a bit more complicated than the shell sort. Why is it faster? After all, if you count the compares in the while loop that partitions the array, we still end up with about N compares. The trick, though, is that quick sort doesn\rquote t have to go through its main loop as many times as the shell sort does. In this example, we\rquote ve divided the problem in half. Thinking about that in terms of the shell sort, where the worst case sort time is n*(n-1), you can see what an advantage this is. If we are sorting 100 values with the shell sort, the worst case run time is 100*(100-1), or 9900. If we sort 2 arrays, each with 50 elements, though, the run time is proportional to 2*(50*(50-1)), or 4900. You can see that the savings would mount up pretty quickly, since quick sort would divide the 50 element arrays in half, too.\par \par Problem 13.3. How many times does the SORT subroutine get called in the example shown in this section? (Hint: put a counter in the SORT subroutine and run the program.)\par \par Problem 13.4. Find the typical run time for quick sort for arrays that have 2, 3, 4, 5 and 10 elements. Use the same method that you used in problem 13.2. Count the compares of values in the array, but don\rquote t count the compares of array indices. There are three places in the subroutine where you will need to increment the counter: inside each of the short WHILE loops, and right after you exit the large WHILE loop.\par How do these values compare to the ones you found in problem 13.2?}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v quick sort}{\rxe quick_sort}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe sorting\:{\v quick sort}{\v }{\rxe quick_sort}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244639}{\*\bkmkend quick_sort}How Fast Are They?{\*\bkmkend _Toc444244639}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {All of this mathematical gobbledegook about theoretical efficiency may be making your head spin. It can also be taken too far. There are a surprising number of people running around with a degree in computer science who will tell you that quick sort is always faster than a shell sort. Even in theory, this simply isn\rquote t true. There are some rare cases where the shell sort will outperform the quick sort if the values in the array happen to be placed just right.\par On average, though, quick sort seems like it should work better than the shell sort. It turns out that this isn\rquote t quite true. The shell sort has one advantage over quick sort: It is simpler. Recursive subroutine calls take some time; far more time than looping through a WHILE loop. There are also a lot of compares and tests in the quick sort subroutine that aren\rquote t needed in the shell sort. It turns out that the shell sort is actually faster than quick sort for small arrays. In fact, on my machine, the solution to problem 13.2 ran faster than the solution to problem 13.4, even though it did more compares. Some sophisticated sorting subroutines take advantage of this fact by using quick sort to sort the array until it is divided into small chunks, then using the shell sort, or one of its close relatives, to sort the small pieces.\par This is where practice meets theory. A computer scientist who really understands his topic knows all of this, of course. The theoretical run times are very important, but it is also important to keep the overhead in mind. Unfortunately, while a computer scientist can use mathematical proofs to find the theoretical run time for an algorithm, there is no easy way to predict the actual run time. That depends on a lot of variables, like how efficient subroutine calls are (they are more efficient compared to loops on an Apple\~II}{\fs20 GS}{, for example, than on an IBM 370 mainframe, which does not have a stack), what kind of information you are comparing (integer compares are much faster than string compares), and how long it takes to swap elements of the array (for arrays of records, the swap may take longer than the compare!).\par While the theoretical efficiency is a great number to know, there\rquote s nothing like actually timing a real program on real data to decide between two competing algorithms.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart quick_sort2}{\*\bkmkstart _Toc444244640}Quick Sort Can Fail!{\*\bkmkend _Toc444244640}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {One little point has been ignored up to now. Quick sort is very fast, especially for large arrays. Quick sort is a little tougher to implement, but you can modify the SORT subroutine from this lesson fairly easily. The big problem with quick sort is that it doesn\rquote t always work.\par This may come as quite a shock to you. After all, you stepped through the SORT subroutine fairly carefully. You saw how it worked. How could it fail?\par The answer is that there is nothing wrong with the basic idea behind quick sort. Quick sort will always work unless it runs out of memory. You see, every time you make a subroutine call, your program uses a small amount of memory from the variable buffer. The variable buffer is limited in size. By default, programs written in GSoft\~BASIC have an 64K variable buffer. You can increase this size, but there is always a limit\emdash and the larger the data you\rquote re sorting, the less space is left over for subroutine calls.\par In version 1.1 of GSoft\~BASIC, each call to the SORT procedure uses 477 bytes of space from the variable buffer. If you call a subroutine several times from a loop, the procedure uses the same memory each time you call it, but if a subroutine calls itself recursively, each recursive call uses a new chunk of memory. For a variety of reasons, there is no good way to tell in advance exactly how much stack space will be used by a subroutine. Adding a new local variable or switching to a different version of GSoft\~BASIC will change the memory used. With the default stack size of 64K, and the SORT subroutine we have used in this lesson, it is easy to see that the Sort procedure cannot safely recur more than 137 levels deep. In practice, the value is a little smaller.\par If SORT happens to hit a worst-case situation, it will recur as deep as the size of the array. In the best case, Sort will recur ln(N)/ln(2) levels deep, where N is the size of the array. This happens when Sort splits the array exactly in half on each call.\par All of this points out that you really have to understand not only the advantages of a particular algorithm, but its disadvantages as well. Any algorithm has to be viewed with a critical eye. Quick sort is a lot faster than the shell sort for large arrays, but the shell sort never fails. And for small array, like the 10 element arrays used in our examples, the shell sort is actually faster than quick sort because it is a less complicated algorithm and ends up executing fewer statements in order to make a swap.\par }{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v FRE function}}}{Fortunately, there is a solution to this mess. You can use the FRE(0) function to determine how much free memory is left in the variables buffer. If the amount drops below some predetermined limit, say 2000 bytes, you can use a shell sort to sort the piece of the array that you are working on, rather than recurring deeper. You can also time the two sorts for small arrays to find out how large an array needs to be before quick sort is faster, and trigger a shell sort if the array is smaller than that limit.\par \par Problem 13.5. Modify Sort so it uses a shell sort if the number of array elements to sort is smaller than SHELLSIZE, a constant in your SORT procedure. Also, add a constant called MEMLIMIT and compare the free memory left in the variables buffer to this value when you enter SORT. If the free memory drops below this value, switch to a shell sort. Try your sort on an array with 50 elements.\par If you are curious, run the program several times with different values for SHELLSIZE to determine the proper value for sorting integers. If you\rquote re really curious, you could do the same thing for an array of DOUBLE values.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v sorting\:quick sort}{\rxe quick_sort2}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v quick sort}{\v }{\rxe quick_sort2}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc444244641}{\*\bkmkend quick_sort2}Sorting Summary{\*\bkmkend _Toc444244641}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Sorting has given you your first real taste of writing efficient programs. You can start to see some of the trade-offs that you will have to make when you write programs, as well as some of the techniques you can use to see the impact of these trade-offs.\par You probably know that this lesson has only scratched the surface of sorting. Complete books\emdash long ones, at that\emdash have been written on the topic of sorting. The methods covered in this lesson will work in almost any programming situation you are likely to come across, but if you are ever writing a program that is doing a lot of sorting, it would pay to dig into some books to learn about some of the other sorting methods.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v sorting}{\rxe sorts}}}{\par }\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {\sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244642}{\*\bkmkend sorts}Lesson Fourteen \endash  Searches and Trees{\*\bkmkend _Toc444244642}\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc440158888}{\*\bkmkstart _Toc444244643}Storing and Accessing Information{\*\bkmkend _Toc440158888}{\*\bkmkend _Toc444244643}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The title for this lesson is "Searches and Trees," but a more down-to-earth description would be "better ways to store and find information."  Why is this important? Why spend the very last lesson of an introductory programming course on this topic, when there are so many more topics I could have picked?\par To answer that, let\rquote s step back from the trees a bit and look at the forest. Computers are used for a lot of things, but desktop computers are used most often to display information, make calculations, or store and retrieve information. That\rquote s a pretty broad statement, but I think it is true. Spread sheets and engineering calculations are obviously applications where we make calculations. Spread sheets, data bases and spelling checkers are examples of applications where one goal is to store or retrieve information. Word processors, page layout programs, paint programs, and some database programs display information. What about an adventure game, though? Most adventure games are really databases inside, concerned with storing and retrieving information about the adventure world. A chess program is calculation intensive. The list goes on and on.\par You already know a few basic ways to store and access information. You have used arrays when you knew how much information would be stored in advance, or when you could put a reasonable limit on the amount of information that would be stored. You have used linked lists when the fixed size of an array created problems. You have even used files when the information had to be written to disk.\par This lesson concentrates on two basic themes. If the information is stored in an array, linked list, or disk file, how can you find it quickly? And, what are some better ways to store the information so you can find it even quicker?\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc440158889}{\*\bkmkstart searches}{\*\bkmkstart _Toc444244644}Sequential Searches{\*\bkmkend _Toc440158889}{\*\bkmkend _Toc444244644}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v searches\:sequential search}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v sequential search}{\v }}}{If you have an array, linked list, or file, the simplest way to find a particular piece of information is to start at the beginning and scan through the data structure until you find the entry you want. This is called a sequential search, and it is nothing new to you. You used a sequential search in Lesson 11 to look for a particular name in a linked list of strings. Of course, you can use a sequential search to look for something in a file or array, too. To look for a numeric value in an array of records, a sequential search would look like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {I = 1\par FOUND = FALSE\par DO\par   IF A(I).AGE = 40 THEN\par     FOUND = TRUE\par   ELSE\par     I = I + 1\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LOOP UNTIL FOUND OR I = MAXINDEX\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par On average you will have to look through half of the information to find the record you want. If the record doesn\rquote t exist\emdash if, for example, you are looking for someone who is 40, but there are no 40 year olds in your data base\emdash you will always scan the entire list. A sequential search, then, has a typical run time of O(N/2) if the item you are looking for is found, and a worst case run time of O(N), where N is the number of things to look at. (The capital O means \ldblquote on the order of.\rdblquote )\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc440158890}{\*\bkmkstart binary_search}{\*\bkmkstart _Toc444244645}The Binary Search{\*\bkmkend _Toc440158890}{\*\bkmkend _Toc444244645}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The sequential search is a very common kind of search to implement, and it is often the best kind of search to use. In some cases, though, you know more about the information you are searching. For example, one common thing that you might know is that the information is sorted in some kind of order. If you are looking for a man named Smith, for example, you may have ordered your data base so that all of the people are listed in alphabetical order. If you are looking for hospital patients using a Social Security Number, you may be searching a database that is sorted by Social Security Numbers.\par When you are searching a list of items that is sorted, and you know in advance how many things are in the array, there is a much better way of finding the information than scanning the array sequentially. The "better way" is called a binary search. The binary search is basically a divide and conquer method, just like quick sort. Binary searches are usually not implemented with recursion, though.\par The idea behind a binary search is to start by checking the middle value, rather than the first value. To see how this works, let\rquote s assume we are looking for the number 44 in an array of 100 things. The array is very simple: each value is the same as its index, so A(44) is 44. We\rquote ll start by looking at the middle value, A(50). The value is 50, which is too large. Since the array is sorted, we know that the value we are looking for must be in the portion of the array from A(1) to A(49), assuming it exists at all. We split the array in half again, and so forth. The table below shows our progress.\par \par }\pard \s28\li720\ri4680\sb40\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \brdrb\brdrs\brdrw10\brsp20 \tx1800\tx2880\adjustright {index\tab value\tab result\par }\pard \s28\li720\ri4680\keepn\widctlpar\tx1800\tx2880\adjustright {50\tab 50\tab too big\par 25\tab 25\tab too small\par 37\tab 37\tab too small\par 43\tab 43\tab too small\par 46\tab 46\tab too big\par }\pard \s28\li720\ri4680\widctlpar\tx1800\tx2880\adjustright {44\tab 44\tab match\par }\pard \s28\fi360\sb40\widctlpar\adjustright {\par This divide and conquer search is extremely powerful. Its worst case run time is O(ln(N)/ln(2)). For our sample of 100 items, a few seconds with a calculator gives the value of 6.64, which tells us that the search will always succeed after no more than 7 compares. That\rquote s a big improvement over the sequential sort, with a typical run time for the same array of 50\emdash the binary search is 7 times faster. The larger the array, the bigger the difference, too. For an array with 100,000 values, the sequential search will look at an average of 50,000 values. The binary search will only need to look at 17 values! For an array with 100,000 elements, the binary search is nearly 3,000 times faster.\par While there are many twists on the sequential search and binary search, these two basic ideas are at the core of many searches in real programs. Whenever the information you need to search is in no particular order, or is in a linked list, the sequential search is a good choice. If the information is sorted, the binary search is the best choice. Most other searching methods depend on organizing the information better to start with.\par \par Problem 14.1. Develop a binary search algorithm, and test in on a simple array. The search should be implemented as a function that returns the index into the array if the value you pass it is found, and zero if it is not. Use an array of 100 integers, with each array element containing an even number. For example, A(1) would be 2, A(2) is 4, and so forth. Test your search by looking for all of the even numbers from 2 to 200. Make sure the search works when values are not found by passing it 0, 202, and 101.{\*\bkmkend binary_search}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v searches\:binary search}{\rxe binary_search}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe binary search{\rxe binary_search}}}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe searches{\rxe searches}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc440158891}{\*\bkmkstart _Toc444244646}{\*\bkmkend searches}A Cross Reference Program for {\*\bkmkend _Toc440158891}BASIC{\*\bkmkend _Toc444244646}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {A binary search is an extremely efficient way of looking for a particular piece of information, but it does have one drawback. While it works well for arrays, it is impossible to implement an efficient binary search for a linked list, simply because you can\rquote t hop into the middle of the linked list.\par The two most common ways of searching records in dynamically allocated memory are called binary trees and hash tables. Both of these methods use a different way of organizing information to make the search faster. We\rquote re going to use a BASIC cross reference program to look at binary trees. A cross-reference program is a program that looks at the source code to a program and lists all of the places where a particular identifier are used. The purpose of this lesson isn\rquote t really to make you write a BASIC cross reference program, so this section gives you one to start with. This BASIC cross reference program uses a linked list for the symbol table.\par This program uses the same scanning techniques that we discussed back in Lesson 11, although a few new features have been added to handle comments and to keep track of line numbers. Once a token is found, the program searches for the token in a symbol table that is a simple linked list. If the token does not exist, the search routine creates a new entry in the symbol table. Finally, the program places the line number where the token was found in a linked list in the symbol table. While both the symbol table itself and the line numbers are simple linked lists, this is the first time you have seen a linked list where each element of the linked list point to yet another linked list. There are no new concepts involved in creating linked lists this way, but the details are interesting enough to make it worth looking at the program carefully.\par If you have time, you might want to try writing this program on your own before typing in the version you see here.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {REM XREF\par REM\par REM This program generates a cross reference of a BASIC\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {REM program, showing where any symbol is used.\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! line number list\par TYPE LINERECORD\par   NEXTP AS POINTER TO LINERECORD\par   NUMBER AS INTEGER\par END TYPE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TYPE LINEPTR AS POINTER TO LINERECORD\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! symbol table entry\par TYPE SYMBOLRECORD\par   NEXTP AS POINTER TO SYMBOLRECORD\par   SYMBOL AS STRING\par   LINES AS LINEPTR\par END TYPE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TYPE SYMBOLPTR AS POINTER TO SYMBOLRECORD\par \par CONST F = 1:! file number\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM CH AS STRING :! current character\par DIM FNAME AS STRING :! file name\par DIM LINE$ AS STRING :! current line\par DIM LINEINDEX AS INTEGER :! index into line$\par DIM LINENUMBER AS INTEGER :! current line number\par DIM SYMBOLS AS SYMBOLPTR:! symbol table\par DIM TOKEN AS STRING :! current token\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM TOKENLINE AS INTEGER :! line number at start of token\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! nothing in the symbol table\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {SYMBOLS = NIL\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! first line\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {LINENUMBER = 0\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! get the file name\par FNAME = GETFILENAME\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {IF LEN (FNAME) <> 0 THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! initialize the scanner\par   OPEN FNAME FOR INPUT AS #F\par   CH = " "\par   LINE$ = ""\par   LINEINDEX = 0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL NEXTCH\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! find all of the symbols\par   DO\par     CALL NEXTTOKEN\par     IF LEN (TOKEN) <> 0 THEN\par       CALL INSERT\par     END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  LOOP UNTIL LEN (TOKEN) = 0\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! print the symbols\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL PRINTSYMBOLS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! dispose of the symbol table\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  CALL DISPOSESYMBOLS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! close the file\par   CLOSE #F\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! DisposeSymbols - dispose of the symbol table\par !\par ! Shared Variables:\par !    symbols - pointer to the first entry in the symbol table\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB DISPOSESYMBOLS\par \par SHARED SYMBOLS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM LPTR AS LINEPTR:! work line pointer\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM SPTR AS SYMBOLPTR:! work symbol pointer\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {WHILE SYMBOLS <> NIL\par   ! remove the symbol from the symbol table\par   SPTR = SYMBOLS\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  SYMBOLS = SPTR^.NEXTP\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! dispose of the lines\par   WHILE SPTR^.LINES <> NIL\par     ! remove the line from the line list\par     LPTR = SPTR^.LINES\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    SPTR^.LINES = LPTR^.NEXTP\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! dispose of the line record\par     DISPOSE (LPTR)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ! dispose of the symbol record\par   DISPOSE (SPTR)\par WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! GetFileName - get the name of the file to cross-reference\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par FUNCTION GETFILENAME AS STRING\par \par DIM NAME$ AS STRING :! file name\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {INPUT "File to cross-reference: ";NAME$\par GETFILENAME = NAME$\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Insert - insert a symbol use in the symbol table\par !\par ! Shared Variables:\par !    tokenLine - line number at the start of the token\par !    token - symbol to insert\par !    symbols - pointer to the first entry in the symbol table\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB INSERT\par \par SHARED TOKENLINE, TOKEN, SYMBOLS\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM LPTR AS LINEPTR:! current line number pointer\par DIM SPTR AS SYMBOLPTR:! current symbol pointer\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM WPTR AS SYMBOLPTR:! work symbol pointer\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! try to find the symbol\par SPTR = NIL\par WPTR = SYMBOLS\par WHILE WPTR <> NIL\par   IF TOKEN = WPTR^.SYMBOL THEN\par     SPTR = WPTR\par     WPTR = NIL\par   ELSE\par     WPTR = WPTR^.NEXTP\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {WEND\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! if the symbol isn't in the table then create a new entry\par IF SPTR = NIL THEN\par   ALLOCATE (SPTR)\par   IF SPTR <> NIL THEN\par     SPTR^.NEXTP = SYMBOLS\par     SYMBOLS = SPTR\par     SPTR^.SYMBOL = TOKEN\par     SPTR^.LINES = NIL\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! enter the line number\par IF SPTR <> NIL THEN\par   ALLOCATE (LPTR)\par   IF LPTR <> NIL THEN\par     LPTR^.NEXTP = SPTR^.LINES\par     SPTR^.LINES = LPTR\par     LPTR^.NUMBER = TOKENLINE\par   END IF\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! NextCh - get the next character from the file\par !\par ! Shared Variables:\par !    ch - next character from the file\par !    f - file number\par !    line$ - current line from the file\par !    lineindex - index of the character ch in line$\par !    linenumber - current line number\par !\par ! Notes: The end of a line is reported as a space\par !    character.  All characters are converted to uppercase.\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB NEXTCH\par \par SHARED CH, F, LINE$, LINEINDEX, LINENUMBER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! if we need one, get a new line\par IF LINEINDEX > LEN (LINE$) THEN\par   IF EOF (F) THEN\par     CH = ""\par   ELSE\par     LINE INPUT #F, LINE$\par     LINEINDEX = 0\par     LINENUMBER = LINENUMBER + 1\par   END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! check for an end of file\par IF LEN (CH) <> 0 THEN\par   LINEINDEX = LINEINDEX + 1\par   IF LINEINDEX > LEN (LINE$) THEN\par     ! handle an end of line\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    CH = " "\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  ELSE\par     ! report the next character\par     CH = MID$ (LINE$, LINEINDEX, 1)\par     IF CH >= "a" AND CH <= "z" THEN\par       CH = CHR$ ( ASC (CH) - 32)\par     END IF\par   END IF\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! NextToken - read a word from the file\par !\par ! Shared Variables:\par !    ch - next character from the file\par !    token - string in which to return the token\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB NEXTTOKEN\par \par SHARED CH, TOKEN, TOKENLINE, LINENUMBER\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! initialize the token\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TOKEN = ""\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! find the next token\par DO\par   ! record the line number for the token\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  TOKENLINE = LINENUMBER\par \par   IF CH = "!" THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! handle a comment\par     WHILE ASC (CH) <> 0 AND TOKENLINE = LINENUMBER\par       CALL NEXTCH\par     WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  ELSE IF CH >= "0" AND CH <= "9" THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! handle a number\par     WHILE CH >= "0" AND CH <= "9"\par       CALL NEXTCH\par     WEND\par     IF CH = "E" OR CH = "D" THEN\par       CALL NEXTCH\par       IF CH = "-" OR CH = "+" THEN\par         CALL NEXTCH\par       END IF\par       WHILE CH >= "0" AND CH <= "9"\par         CALL NEXTCH\par       WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par \par   ELSE IF ASC (CH) = 34 THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! handle a string constant\par     CALL NEXTCH\par     WHILE ASC (CH) <> 34 AND TOKENLINE = LINENUMBER\par       CALL NEXTCH\par     WEND\par     IF ASC (CH) = 34 THEN\par       CALL NEXTCH\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {    END IF\par \par   ELSE IF (CH >= "A" AND CH <= "Z") OR (CH = "_") THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! handle a token\par     WHILE (CH >= "A" AND CH <= "Z") OR (CH >= "0" AND CH <= "9") OR (CH = "_")\par       TOKEN = TOKEN + CH\par       CALL NEXTCH\par     WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  ELSE IF ASC (CH) <> 0 THEN\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {    ! handle any other character\par     CALL NEXTCH\par   END IF\par LOOP UNTIL ASC (CH) = 0 OR LEN (TOKEN) <> 0\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! PrintNumber - recursively print the line numbers\par !\par ! Parameters:\par !    nPtr - pointer to the remainder of the line number list\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTNUMBER(NPTR AS LINEPTR)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF NPTR <> NIL THEN\par   CALL PRINTNUMBER(NPTR^.NEXTP)\par   PRINT NPTR^.NUMBER;" ";\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! PrintSymbols - print the symbols and line numbers\par !\par ! Shared Variables:\par !    symbols - pointer to the first entry in the symbol table\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTSYMBOLS\par \par SHARED SYMBOLS\par \par DIM SPTR AS SYMBOLPTR:! current symbol pointer\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {SPTR = SYMBOLS\par WHILE SPTR <> NIL\par   PRINT SPTR^.SYMBOL, ;\par   CALL PRINTNUMBER(SPTR^.LINES)\par   PRINT\par   SPTR = SPTR^.NEXTP\par WEND\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par There are two ways to save a BASIC program. The SAVE command saves the program as a tokenized file, which replaces BASIC\rquote s reserved words with shorter numeric values. This program is designed to process text files, so be sure you try it on programs saves with the SSAVE or TSAVE command. If you want to try to improve the program so it can handle either format, refer to Appendix\~F of the GSoft\~BASIC reference manual for details about the tokenized file format used by GSoft\~BASIC.\par Even for text files, though, there are a couple of problems with the BASIC cross reference program you just tried. The program is a lot slower than it could be if we read the file into memory in one chunk using GS/OS disk operating system calls, but the purpose of this lesson isn\rquote t learning GS/OS, so we\rquote ll put up with that problem. The most subtle problem is that it is a lot slower than it could be, simply because it takes so darn long to deal with a sequential linked list. This is the main problem we will try to solve in the next section. The most obvious problem, though, is that the symbols are printed in the reverse order of when they are first seen in the program. It would be a lot more convenient if they were printed in alphabetical order. We will take care of this problem as a side effect of getting rid of the linked list. The last problem is that any sequence of alphanumeric characters is treated as a symbol. Your program reports all of the places where you used the reserved word end, for example. That one you will solve yourself a bit later, as one of the problems.\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc440158892}{\*\bkmkstart binary_tree}{\*\bkmkstart _Toc444244647}The Binary Tree{\*\bkmkend _Toc440158892}{\*\bkmkend _Toc444244647}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {The major problem with a linked list is the same as the major problem with a sequential search: The program has to scan through an average of half of the list to find a particular entry. If the entry doesn\rquote t exist, the program scans through the entire list. A binary tree is another way of handling dynamically allocated records that essentially does the same thing for linked lists that the binary search did for searches. At each level, the tree divides the search in half.\par The way this works is to include two pointers to another record in each record, rather than one. In a linked list, each record has a pointer we have called NEXTP that points to the next record in the list. In a binary tree, each record has two pointers, which we will call LEFT and RIGHT. If we look at a particular record, and the one we want is "smaller" that the one we are looking at, we follow the left link. If the one we want is "larger" than the one we are looking at, we follow the right link.\par We\rquote ll use a few short programs to see how this works. The first task is to learn to add a new item to a binary tree. This is a little harder than it was for a linked list, but the same basic ideas are involved. The program below reads strings from the keyboard and adds them to a binary tree.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {REM Create a binary tree from keyboard strings\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! tree entry\par TYPE TREERECORD\par   LEFT AS POINTER TO TREERECORD\par   RIGHT AS POINTER TO TREERECORD\par   STR AS STRING\par END TYPE\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TYPE TREEPTR AS POINTER TO TREERECORD\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {DIM TREE AS TREEPTR:! top of the tree\par DIM TPTR AS TREEPTR:! work pointer\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {DIM STR AS STRING :! work string\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! nothing in the tree\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {TREE = NIL\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {! build the tree of strings\par DO\par   ! get a string\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {  LINE INPUT "String: ";STR\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {  IF LEN (STR) <> 0 THEN\par     ! create a new record\par     ALLOCATE (TPTR)\par     IF TPTR <> NIL THEN\par       TPTR^.LEFT = NIL\par       TPTR^.RIGHT = NIL\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {      TPTR^.STR = STR\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {      ! add it to the tree\par       CALL ADD(TREE, TPTR)\par     END IF\par   END IF\par LOOP UNTIL LEN (STR) = 0\par \par ! dispose of the tree of string\par IF TREE <> NIL THEN\par   CALL DISPOSETREE(TREE)\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! Add - add a record to the tree\par !\par ! Parameters:\par !    tree - next node in the tree\par !    rec - record to add to the tree\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB ADD(TREE AS TREEPTR, REC AS TREEPTR)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF TREE = NIL THEN\par   TREE = REC\par ELSE IF REC^.STR < TREE^.STR THEN\par   CALL ADD(TREE^.LEFT, REC)\par ELSE IF REC^.STR > TREE^.STR THEN\par   CALL ADD(TREE^.RIGHT, REC)\par ELSE\par   DISPOSE (TREE)\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par \par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {!----------------------------------------------------------\par !\par ! DisposeTree - dispose of the tree\par !\par ! Parameters:\par !    tree - node to dispose of\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB DISPOSETREE(TREE AS TREEPTR)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF TREE^.RIGHT <> NIL THEN\par   CALL DISPOSETREE(TREE^.RIGHT)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END IF\par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF TREE^.LEFT <> NIL THEN\par   CALL DISPOSETREE(TREE^.LEFT)\par END IF\par DISPOSE (TREE)\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par One of the first things you might notice as you look at this program is that we are using a recursive subroutine again. Just as with any situation where recursion is useful, we can look at the tree as a piecemeal problem. Let\rquote s look at an example to see how this will work. As an example, let\rquote s place four states in the tree. We\rquote ll use Maine, Oregon, Texas and Colorado for our states. Maine is simple: we create a new record, set LEFT and RIGHT to NILL, record the string, and call ADD. The subroutine ADD sees that TREE is NIL, and records TREE there. The effect on the global variables is to assign TPTR to TREE, so tree now points to the first record in our list, Maine. Symbolically, we write the tree like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\widctlpar\adjustright \f6\fs20\cgrid {\tab \tab \tab Maine\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Well, there isn\rquote t much there, yet, so our meager tree doesn\rquote t look very impressive. Adding Oregon shapes things up a bit, though. This time when we call ADD, the subroutine sees that PTR is not NIL, and checks to see if Oregon is less than Maine. It isn\rquote t, so it moves on to the next check to be sure that Oregon is greater than Maine. It is, but let\rquote s stop for a moment and consider what would happen if it wasn\rquote t. The only way a name could fail both checks is if it matched the name in TREE^.STR exactly. The series of checks, then, prevents duplicates. You can have duplicates in a binary tree, but your search has to take it into account if you do. We don\rquote t need them.\par At this point, ADD calls itself, passing TREE^.RIGHT as the new top of the tree. TREE^.RIGHT is NIL, so REC is added as the so-called "right child" of Maine. It makes as much sense to call Oregon a branch of Maine, but for historical reasons, we refer to Oregon as the right child of Maine, and Maine as the parent of Oregon. Our tree looks like this, now:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {               Maine\par                    \\\par                     \\\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {                     Oregon\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Notice how recursion handled the problem of tracing the tree fairly neatly. Once we decided that the top node existed, and which way to go, we called ADD again, treating TREE^.RIGHT as a brand-new tree, which in a sense it is. If you recall, when recursion was first introduced, I said that the way to think about recursion was to think about one part of the problem at a time. We used that method to solve the Tower of Hanoi problem, where we conceptually moved an entire pile of disks, rather than thinking about the problem as moving individual disks. The same idea cropped up when we used recursion for quick sort, where the subroutine split the problem in half and called itself to solve each half. Here we see the same idea again: ADD decides which half of the tree is the important part, then calls itself, processing the appropriate half of the tree as a new tree.\par The next state to add is Texas, which makes two recursive calls, getting tacked onto the tree as the right child of Oregon. Follow through the code, writing the steps down on paper if necessary, to see how this is done.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {               Maine\par                    \\\par                     \\\par                      Oregon\par                       \\\par                        \\\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {                        Texas\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par The last state is Colorado. Since Colorado is less than Maine, it is added as the left child of Maine. Our final tree looks like this:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {               Maine\par               /    \\\par              /      \\\par      Colorado        Oregon\par                       \\\par                        \\\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {                        Texas\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par By now, you may have noticed one of the problems with binary trees. To keep the search time to a minimum, you want the tree to be balanced. What that means is that, when you start at the top, the top element of the tree is also the middle element, so that the compare splits the tree in half. In this example, if we had started with Colorado, adding the states in alphabetical order, we would have ended up with a pretty poor excuse for a tree:\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {     Colorado\par              \\\par               \\\par                Maine\par                 \\\par                  \\\par                   Oregon\par                    \\\par                     \\\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {                     Texas\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par You can add a new record to the tree and shuffle the tree around at the same time to make sure it stays balanced. We won\rquote t cover how, since it involves some fairly advanced pointer manipulation. In practical situations it often isn\rquote t necessary to create a perfectly balanced tree. If records are added to the tree in a fairly random manner the savings of using a tree instead of a linked list are still enormous. Whether the extra effort involved in balancing the tree is worth the time depends on how often the tree will be searched and how random the records are. In our application, they are fairly random.\par Searching a binary tree is pretty trivial once you know how to create one. After all, adding a new record to the tree searches the tree as a side effect! Here\rquote s a function, based on the ADD procedure, that will search the tree, returning a pointer to the correct record, or NIL if the record does not exist.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! Search - search the tree\par !\par ! Parameters:\par !    tree - node to search\par !    str - string to look for\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par FUNCTION SEARCH(TREE AS TREEPTR, STR AS STRING ) AS TREEPTR\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF TREE = NIL THEN\par   SEARCH = NIL\par ELSE IF TREE^.STR > STR THEN\par   SEARCH = SEARCH(TREE^.LEFT, STR)\par ELSE IF TREE^.STR < STR THEN\par   SEARCH = SEARCH(TREE^.RIGHT, STR)\par ELSE\par   SEARCH = TREE\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END FUNCTION\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par This is one of those subroutines that you might struggle for a long time to come up with on your own, but is so simple that once you see it, it is easy to understand and remember. Trace through the subroutine, looking for Oregon and Indiana if you aren\rquote t sure how it works.\par Finally, we come to a subject that impacts directly on our cross-reference program. Using a method called recursive tree traversal we can write a very simple subroutine that will trace through the tree, doing something in order. In our case, we want to print the symbols found in the BASIC program. Here\rquote s a simple PRINTTREE subroutine that prints the states in our example program; the subroutine in the BASIC cross reference program will have exactly the same structure.\par \par }\pard\plain \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright \f6\fs20\cgrid {!----------------------------------------------------------\par !\par ! PrintTree - print the tree\par !\par ! Parameters:\par !    tree - tree to print\par !\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {!----------------------------------------------------------\par \par SUB PRINTTREE(TREE AS TREEPTR)\par \par }\pard \s29\qj\fi360\li360\ri360\keepn\widctlpar\adjustright {IF TREE <> NIL THEN\par   CALL PRINTTREE(TREE^.LEFT)\par   PRINT TREE^.STR\par   CALL PRINTTREE(TREE^.RIGHT)\par END IF\par }\pard \s29\qj\fi360\li360\ri360\widctlpar\adjustright {END SUB\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {\par Notice how, once again, recursion simplifies the problem. At any particular place in the tree, we need to print all of the names that come before the one we are working on first, so we call PRINTTREE to do that. Next, we need to print the record we are working on. Finally, we print all of the names that come after the one we just printed. The initial check to make sure TREE is not NIL keeps us from stepping off of the "end" of the tree.\par \par Problem 14.2. Add the print subroutine to the binary tree sample program. Try the program with a variety of names.\par \par Problem 14.3. Change the XREF program so it builds a binary tree for the symbol table instead of a linked list. The easy way to do this is to use the INSERT subroutine to insert each symbol in the program into the symbol table. Because of the way the INSERT subroutine is written, if the symbol already exists, a new symbol is not created. You then call the SEARCH subroutine to find the correct entry in the symbol table (which must exist, since you just created one if there wasn\rquote t one already), and enter the appropriate line number.\par A more challenging, and more efficient way to implement the program is to combine the Search and Insert subroutines, creating a function that returns a pointer to the correct entry in the symbol table, creating one if one did not already exist. This is the method the solution uses.\par In either case, printing the symbol table is a simple matter of modifying the PRINTTREE subroutine from the text.\par \par Problem 14.4. Add a new check to the XREF program that checks to see if the symbol just found is a reserved word in BASIC. You can find a list of the reserved words in Lesson 1.\par An easy way to handle reserved words is to add a new flag to each symbol table entry that tells if the entry is a reserved word. If you find a reserved word, you skip adding the line number to the line number list. When printing the symbol table, you again skip reserved words.\par Creating the reserved word list in the first place is a little tedious. You will need a subroutine that calls INSERT for each of the reserved words. There is an optimum order to add the reserved words. See if you can figure it out by thinking about the way trees are created, referring to the example where the names of four states were entered into a tree.}{\pard\plain \s28\fi360\sb40\widctlpar\adjustright \v\f4\cgrid {\xe {\v binary trees}{\rxe binary_tree}}}{\par }\pard\plain \s2\sb240\sa120\keepn\nowidctlpar\brdrt\brdrs\brdrw45\brsp20 \outlinelevel1\adjustright \b\f4\fs36\cgrid {{\*\bkmkstart _Toc440158893}{\*\bkmkstart _Toc444244648}{\*\bkmkend binary_tree}Ruffles and Flourishes{\*\bkmkend _Toc440158893}{\*\bkmkend _Toc444244648}\par }\pard\plain \s28\fi360\sb40\widctlpar\adjustright \f4\cgrid {Well, a few weeks ago, you couldn\rquote t spell recursive tree traversal, and now you know what it is. Not bad. Let me be the first to congratulate you on joining the ranks of real programmers, who do it with bytes and nibbles.\par Of course, as I have pointed out so many times that you may be sick of hearing it, programming is a skill. Like all skills, the more you practice, the easier it gets. There are also a lot more things to learn about programming. Where you go from here depends on your own interests.\par BASIC doesn\rquote t have a universally accepted standard, but it\rquote s generally pretty easy to read books written for any version of BASIC and translate the programs into GSoft\~BASIC. The exception is books that deal with desktop programming. While the BASIC language won\rquote t change enough to make the books impossible to use, the Apple\~II}{\fs20 GS}{ toolbox is different enough from the way the desktop is implemented on other computers that you won\rquote t find much of use from, say a Visual BASIC book.\par That leaves an enormous number of good books out there, though. I\rquote d recommend visiting your bookstore, Amazon.com, and especially your local library. While BASIC has seen a resurgence in popularity in the past few years, it\rquote s no where near as popular as it was in the early 1980\rquote s, when BASIC dominated the microcomputer market. Your library may have a good selection of books from that era on a wide range of topics.\par Don\rquote t discount other books just because they are written for another language, either. One book I think every programmer should own is\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\i Algorithms\par }{Robert Sedgewick\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Addison-Wesley Publishing Company\par \par This is a wonderful encyclopedia of fundamental subroutines that you will use over and over when you program, no matter what computer or language you pick. It was the source for the version of quick sort used in this course, for example.\par \par }\pard \s28\fi360\sb40\keepn\widctlpar\adjustright {\i Algorithms+Data Structures = Programs\par }{Niklaus Wirth\par }\pard \s28\fi360\sb40\widctlpar\adjustright {Prentice-Hall\par \par This classic book is a great introduction to intermediate techniques in computer science. It only has five chapters: Fundamental Data Structures, Sorting, Recursive Algorithms, Dynamic Information Structures and Language Structures and Compilers. These chapters give you a basic understanding of data structures that can improve your programming skills enormously. It\rquote s written for Pascal, but you should be able to read it and make use of it from GSoft\~BASIC, too.\par If you would like to learn to program the toolbox, writing desktop programs with pull down menus and so forth, you need to study a different set of books. A companion course called }{\i Toolbox Programming in GSoft\~BASIC}{ is underway as I write this one. It\rquote s designed as a first book for toolbox programming, and comes with it\rquote s own abridged toolbox reference manual, so you don\rquote t need any other books to get started. For technical references for the toolbox and other parts of the Apple\~II}{\fs20 GS}{ operating system, see the Byte Works web site, currently hosted at http://www.hypermall.com/byteworks.\par Whatever you decide to do from here, I hope you enjoyed the course, and learned a few things along the way. Once again, congratulations on completing the course!\par }\pard \s28\sb40\widctlpar\adjustright {\par \sect }\sectd \sbkodd\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl {\headerf \pard\plain \s32\qr\nowidctlpar\brdrb\brdrs\brdrw10\brsp20 \tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid {\f5\fs20 Learn to Program in GSoft BASIC}{\par }}\pard\plain \s1\qc\sa240\keepn\widctlpar\outlinelevel0\adjustright \b\f4\fs48\cgrid {{\*\bkmkstart _Toc444244649}Index{\*\bkmkend _Toc444244649}\sect }\sectd \sbknone\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl {\headerf \pard\plain \s32\qr\nowidctlpar\brdrb\brdrs\brdrw10\brsp20 \tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid {\f5\fs20 Learn to Program in GSoft BASIC}{\par }}\pard\plain \s39\fi-240\li960\nowidctlpar\adjustright \f4\cgrid {\field\fldedit{\*\fldinst { INDEX \\c "2" }}{\fldrslt {\lang1024 \sect }\sectd \sbknone\linex-32767\headery1440\footery1440\cols2\endnhere\titlepg\sectdefaultcl \pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 ! statement, 18\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {A\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 addition, 25, 26\par ALLOCATE statement, 146\par animation, 49\endash 51, 52\par arrays, 93\endash 114\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 declaring, 93\par miltidimensional, 103\par of records, 119\par passing to subroutines, 110\par problems with, 143\par range of indecies, 93\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 ASC function, 84\par ASCII character set, 84\par assembly language, 178\par assignment statement, 18\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {B\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 backups, 5\par binary operator, 26\par binary search, 220\endash 21\par binary trees, 229\endash 36\par Boolean logic, 55\endash 56\par Boolean values, 99\par BYTE type, 115\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {C\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 CALL statement. }{\i\lang1024 See}{\lang1024  subroutines\par CASE ELSE statement, 160\par case sensitivity, 11\par character set, 77, 84\endash 87\par CHR$ function, 84\par CLOSE statement, 124, 133\par comments, 17, 23, 62\par comparing strings, 88\par comparisons, 26, 29, 55\par compiler, 2\par CONST statement, 117\par constants, 117\par c-string, 87, 88\par cursor position, 192\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {D\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 DIM statement, 20, 93\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 pointers, 144\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 DISPOSE statement, 146\par division, 47\par DO-LOOP statement, 38\endash 42\par DOUBLE type, 32, 116\par double-precision real numbers, 32\par drawing\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 COPY mode, 50\par exclusive OR mode, 50\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 dynamic memory, 143\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {E\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 EDIT command, 7\par ELSE statement. }{\i\lang1024 See}{\lang1024  IF statement\par END FUNCTION statement. }{\i\lang1024 See}{\lang1024  subroutines\par END IF statement. }{\i\lang1024 See}{\lang1024  IF statement\par END statement, 62\par END SUB statement. }{\i\lang1024 See}{\lang1024  subroutines\par END TYPE statement. }{\i\lang1024 See}{\lang1024  TYPE statement\par EOF function, 129\par ERR function, 167\par error handling, 166\endash 68\par ERROR statement, 167\par errors, 9\par evaluating expressions, 200\par exclusive OR drawing mode, 50\par exponents. }{\i\lang1024 See}{\lang1024  real numbers\par extended character set, 86\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {F\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 false, 55, 99, 118\par files, 121\endash 41\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 binary files, 133\par closing, 123\par end of file, 129\par file names, 122, 126\endash 29\par file number, 122\par file types, 136\par opening, 122, 133\par opening for input, 124\par path names, 127\endash 28\par random access, 137\endash 41\par writing with PRINT, 123\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 Finder, 179\par FOR statement, 22\endash 23, 161\endash 64\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 NEXT, 23, 164\par STEP size, 83, 162\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 format model, 29\par format string, 29\par FRE function, 90, 217\par FUNCTION statement. }{\i\lang1024 See}{\lang1024  subroutines\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {G\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 GET statement, 135\par GOTO statement, 12, 53, 165\endash 66\par graphics, 13\endash 16, 35. }{\i\lang1024 See also}{\lang1024  animation\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 colors, 16\par drawing a dot, 45\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 GS/OS, 126\par GS/OS strings, 88\par GSoft BASIC, The FREE Version!, 5, 178\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {H\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 handling run-time errors, 166\endash 68\par HFS disks, 126\par HGR statement, 14\par HOME statement, 192\par HTAB command, 192\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {I\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 IF statement, 46\endash 49\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 ELSE clause, 48\par ELSE IF clause, 51\par old forms, 53\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 INPUT statement, 14, 35, 77, 89\par INTEGER type, 21, 115\par integers, 18, 21, 26, 30, 33\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 long. }{\i\lang1024 See}{\lang1024  long integers\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 interpreter, 2\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {L\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 LEFT$ function, 79\par LEN function, 79\par LET statement. }{\i\lang1024 See}{\lang1024   assignment statement\par lexical analysis, 182\par libraries, 178\par LINE INPUT statement, 78, 89\par line numbers, 12\par LINETO tool call, 15\par linked lists, 148\endash 56, 199\par LIST command, 8\par LOADLIBRARY statement, 179\par long integers, 27, 33\par LONG type, 27, 115\par LOOP statement. }{\i\lang1024 See}{\lang1024  DO-LOOP statement\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {M\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 MakeRuntime utility, 179\par memory\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 changing size, 178\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 memory leak, 152\par MID$ function, 81\par MOVETO tool call, 15\par multiplication, 19, 25\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {N\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 negative numbers, 26\par NIL constant, 150\par null terminated string, 87\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {O\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 ONERR GOTO statement, 166\endash 68\par OPEN statement, 122, 124, 133, 137, 138\par operator precidence, 24\par ORCA shell, 6\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {P\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 parenthesis, 26\par parsers, 182, 189\endash 93, 200\endash 205\par pixel, 14\par pointers, 143\endash 56\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 declaring, 144\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 prerequisits, 4\par PRINT statement, 7, 10, 19\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 in files, 123\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 PRINT USING statement, 29\par printing, 132\par ProDOS, 126\par ProDOS disks, 126\par p-string, 87\par PUT statement, 134\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {Q\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 queues, 155\endash 56\par quick sort, 210\endash 15, 216\endash 17\par QuickDraw\~II, 14\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {R\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 random numbers, 42\endash 46\par real numbers, 18, 21, 27, 30, 33\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 exponents, 31\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 REAL type, 21\par records, 118\endash 20\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 variant, 168\endash 77\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 recursion, 195\endash 205\par REM statement, 17\par reserved words, 10, 11\par RESUME statement, 167\par RIGHT$ function, 79\par RUN command, 8\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {S\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 SAVE command, 8\par scanning text, 182, 183\endash 86\par scientific notation. }{\i\lang1024 See}{\lang1024  real numbers\par searches, 219\endash 21\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 binary search, 220\endash 21\par sequential search, 219\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 SELECT CASE statement, 157\endash 61\par semantic analysis, 183\par sequential search, 219\par SETMEM statement, 178\par SETPENMODE tool call, 15\par SETSOLIDPENPAT tool call, 15, 16\par SHARED command. }{\i\lang1024 See}{\lang1024  subroutines\par shell sort, 207\endash 9\par SINGLE type, 116\par SIZEOF function, 138\par sorting, 207\endash 18\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 quick sort, 210\endash 15, 216\endash 17\par shell sort, 97, 207\endash 9\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 stacks, 150\endash 54\par stand-alone programs, 179\par statement separator, 21\par STR$ function, 89\par STRING type, 21\par strings, 77\endash 91\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 adding, 79\par ASCII character set, 84\par character set, 77\par comparing, 88\par concatenation, 79\par constant, 7\par c-string, 87, 88\par extended character set, 86\par garbage collection, 89\par GS/OS strings, 88\par null terminated string, 87\par p-string, 87\par size limit, 88\par text blocks, 88\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 SUB statement. }{\i\lang1024 See}{\lang1024  subroutines\par subroutines, 57\endash 75\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 CALL statement, 60\par END SUB statement, 61\par FUNCTION statement, 66\par parameter list, 60\par parameters, 69\endash 74\par passing arrays, 110\par SHARED command, 74\par SUB statement, 60\par value parameters, 70\par variable parameters, 69\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 subtraction, 26\par symbol tables, 168\endash 77\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {T\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 text blocks, 88\par tokens, 182, 183, 186\par true, 55, 99, 118\par truncation, 47\par type characters, 19\par TYPE statement, 117\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 records, 118\endash 20\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 types\par }\pard\plain \s37\fi-240\li480\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 BYTE, 115\par DOUBLE, 116\par INTEGER, 115\par LONG, 115\par SINGLE, 116\par UNIV, 115\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {U\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 unary operations, 26\par UNIV type, 115\par UNLOADLIBRARY statement, 179\par User Tools, 178\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {V\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 VAL function, 89\par variable names, 19\par variant records, 168\endash 77\par VTAB command, 192\par }\pard\plain \s45\sb240\sa240\nowidctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\lang1024\cgrid {W\par }\pard\plain \s35\fi-240\li240\nowidctlpar\tqr\tldot\tx3950\adjustright \f4\cgrid {\lang1024 WEND statement, 28\par WHILE statement, 28, 41\par }\pard\plain \s39\fi-240\li960\nowidctlpar\adjustright \f4\cgrid {\lang1024 \sect }\sectd \sbknone\linex-32767\headery1440\footery1440\endnhere\titlepg\sectdefaultcl \pard\plain \s39\fi-240\li960\nowidctlpar\adjustright \f4\cgrid }}\pard\plain \s39\fi-240\li960\nowidctlpar\adjustright \f4\cgrid {\par }}