{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f23\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f25\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f26\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f27\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f28\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f34\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f35\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f37\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f38\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f40\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f41\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f42\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f43\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f44\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f45\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f46\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f47\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f48\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f49\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f50\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f51\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f52\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f53\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f55\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f57\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f58\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f60\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f61\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f62\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f63\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f64\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f65\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f66\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f67\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f68\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f69\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f77\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f78\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f80\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f81\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f82\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f86\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f87\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f88\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f89\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f90\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f91\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f92\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f93\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f96\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f97\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f98\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f99\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f100\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f101\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f102\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f103\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f104\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f105\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f106\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f107\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f108\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f109\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f110\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f112\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f113\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f114\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f115\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f116\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f117\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f118\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f119\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f121\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f122\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f123\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f124\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f125\fnil\fcharset2\fprq2 Zapf Dingbats;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f23\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f25\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f26\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f27\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f28\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f34\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f35\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f37\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f38\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f40\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f41\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f42\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f43\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f44\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f45\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f46\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f47\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f48\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f49\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f50\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f51\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f52\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f53\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f55\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f57\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f58\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f60\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f61\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f62\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f63\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f64\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f65\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f66\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f67\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f68\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f69\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f77\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f78\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f80\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f81\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f82\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f86\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f87\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f88\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f89\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f90\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f91\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f92\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f93\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f96\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f97\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f98\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f99\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f100\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f101\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f102\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f103\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f104\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f105\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f106\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f107\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f108\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f109\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f110\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f112\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f113\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f114\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f115\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f116\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f117\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f118\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f119\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f121\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f122\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f123\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f124\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f125\fnil\fcharset2\fprq2 Zapf Dingbats;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \snext0 Normal;}{\s1\keepn\widctlpar\tqr\tx9000\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 1;}{\s2\keepn\widctlpar\tqr\tx9000\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext15 header;}{\s16\qj\widctlpar\adjustright \f4\lang1024\cgrid \snext16 Text;}{\s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid \sbasedon0 \snext17 Code;}{\s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid \sbasedon0 \snext18 Model;}{\s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext19 Parameters;}{\s20\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext20 footer;}{\*\cs21 \additive \sbasedon10 page number;}{\s22\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 1;}{\s23\li240\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 2;}{\s24\li480\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 3;}{\s25\li720\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 4;}{\s26\li960\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s27\li1200\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s28\li1440\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{\s29\li1680\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s30\li1920\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}}{\info{\title Utilities Package #1}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy18\hr14\min41}{\revtim\yr2000\mo10\dy18\hr14\min41}{\printim\yr2000\mo10\dy18\hr14\min40}{\version2}{\edmins0}{\nofpages33}{\nofwords6397}{\nofchars36463}{\*\company Byte Works, Inc.}{\nofcharsws44779}{\vern99}}\margl1440\margr1440 \facingp\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbknone\linex-32767\headery1080\footery1080\sectdefaultcl {\footerl \pard\plain \s20\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\li20\nowidctlpar\tqr\tx9360\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs72 Utilities Package #1\par }\pard \qc\li20\nowidctlpar\tqc\tx2500\tqr\tx9360\adjustright {\fs28 for ORCA/M for the Apple II}{\fs22 GS}{\fs28 \par or the Apple II}{\fs22 GS}{\fs28  Programmer's Workshop\par }\pard \qc\nowidctlpar\tqc\tx2500\tqr\tx9360\adjustright {\par \par \par }\pard \qc\li20\nowidctlpar\tqr\tx9360\adjustright {\b\fs28 Includes Source Code\par }\pard \qc\widctlpar\adjustright {\b \par \par }{\fs72 {\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex109\picscaley116\piccropl0\piccropr0\piccropt0\piccropb0\picw360\pich219\picwgoal7200\pichgoal4380\macpict\bliptag-1555728666\blipupi72{\*\blipuid a34576e68d883ab644b5068fc7c732b9}002900400037011b019f110101000a001d0008011b01e90800090b000a000a4000400037011b019fff}}{\b \par \par \par \par \par }\pard \qc\nowidctlpar\tqr\tx9360\adjustright {\fs30 By Mike Westerfield\par \par }\pard \qc\li20\nowidctlpar\tqr\tx9360\adjustright {Copyright 1987\par \par }{{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich176\picwgoal8760\pichgoal3520\macpict\bliptag-1229934158\blipupi72{\*\blipuid b6b0b1b2b2eba5eae05d25da145947cc}0e220000000100b001b7001102ff0c00ffffffff000100000000000001b7000000b000000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800380000000000b001b80000000100b001b70000000100b001b7000115e200011ffffb0006300600c0000003fd000060fc0018e200043fff80000cfe0006300600c0000003fd000060fc0018e20004380380000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0019e20004300180000cfe0007300600c00000030cfe000060fc0019e20004300180003ffe0007300600c00000030cfe000070fc001ce2001838038381bf0ffc00300600c7fc1ff30c0ff800787fc1ff00001ce200183fffc7c18c1ffe00380600cfff3ff30c1ffc007cffe3ff80001ce200183fffe7c18c1c0e003c0600cfff38030c1c1c007ce0e38180001ce200183f00e7c18c1806003e0600ce0730030c180c007cc0630180001ce200183e0067c18c1806003e0600cc0330030c1800007cc0630180001be200153e0067c18c1c0e003e0600cc033003ff9800007cc063fe001ce200183e0067c18e1ffe003e0600ce033803ff9ff8007ce0638000001ce200183e0067c18f1ffc003e0600cf033c03e38ffc007cf063c0000020e7000010fd00183e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d18003fc0003e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d180030c0003e0067818f9f00003e0600cf833e03e1807c007cf863e0000022e8001e030c3830c0003e0067018f9f00003e0600cf833e03e1807c007cf863e1800022e8001e060cfc30c0003e0066018f9f06003e0600cf833e03e1987c007cf863e1800022e8001e0c07cc3fc0003f00e6038f9f06003f0f01cfc73e03e1987c007cf863e18e0022e8001e1807063800003fffe7ff8f9ffe003fffffcfff3e03e19ffc007cf863ff8e0022e8001e3807023800001fffc3ff870ffc001fffff87fe1c01c187f800387061ff0e000fe800047c030338c0fd00010380ed000fe80004ce03c13fc0fd00010180ed0012ec00070200000187c1e180fc00010180ed0013ee000801480020000303e1f0fb00010180ed0015ef000930140024c0000001f0f0fc000203ff80ed0014ef000438e0000043fe0001f8f0fc000103ffec000eef00087b01ec02678000007ce4000eef00083c7a00201f8000003ce4000ff000050733e0000207fe00001ce4000cf0000607c7f80001610ce1000cf00006079e01090092dce1000cf00006033c8832041c7ce1000cf0000646e8004000823ce1000cf00006fddd20402005d0e1000df00007fbf5c4801040ccc0e2000df00007f7f13080120967e0e2000df000072f8121801020b2e0e2000df000075f7e8880108af1c0e20011f1000b07be65404032012880000262e50011f1000b07be85c26020457c80002777e50012f1000c077cf93000c1029c5c0077ff30e60012f1000c017b0d848a08278e7c003f9f70e60012f1000c02fc02d0100018ef280771e1e0e60012f1000c02f402c40001201f3007fdff76e60012f1000c1ce801008096341f9003afbdbee60012f1000c1de801626b1e4c0d9116fbf01ee60012f1000c3de8018180ecdc0f973dffedece60012f1000c39e80116003f5e0bcf3bf9680ce60013f1000d0bc4026c401f5f0bce1ff7656780e70013f1000d0bc403f8700fafd1cc1f9c1d9f80e70012f1000c0bc30fdbe067e7d3c873e3e063e60012f1000c73cefbe73e33f867e4ffc7f35fe60013f1000df3cfff22ff1bf7bde4dfaff9adc0e70013f1000d73dfe746ff99ffffe7ef0ff9e1c0e70013f1000d17d7ffc5ffddecece7edeff9fd80e70012f1000c17feff45ffcdfedfe1e80ffa3fe60012f1000c17afdbc5ffcdebffe0e56ffb7fe60013f1000d67b9ffc57fcdffffe17d87f1ddc0e70013f1000df7fbff457f5debede7e061e279c0e70012f1000cf3c17a46be99e8ffe7ff500f7ee60012f1000c73cbfe23453adf47e53dadadbee60012f1000c13e3ff21be33bfcfe4df400337e60012f1000c0bc87f908065ffa3cefdededefe60012f1000c0bc1879800cf7f2bcbfff89be8e60012f1000c19f2018c03deff53c1ffed77f8e60012f1000c79f251860fbcff97caf37edfbce60012f1000c7ce440c180fafff798fde9677ce60012f1000c3cb480807ff0fff397867f5f80e60012f1000c04f400b000297fe786013dafc0e60012f1000c0274008040d87fe72000b7fec0e60011f1000b0e7a012000013fcf0000d2e6e50011f1000b0d2e01301f160f0e45804ae0e50011f1000b3f1d86e060c0e01c79404be0e50011f1000b6c9178c0c1e0021cfd8055e0e50011f1000b3d2ac05081f16238fdb04dc0e50011f1000b2c46370101f980703c52d680e50011f1000b1466cec103f880703faceae0e50011f1000b33f339a103f804e47fe9f2f0e50011f1000b35f1870107f841cf7f86c970e50012f2000c07ebe0c68107f8039b7fff9560e50012f2000c06f86321808ff00f257fffed40e50012f2000c0703e79800dfe31e06bfffdf60e50012f2000c03afffc6007fc078c7dffa50b8e50011f1000be7ffc3801f01e5f78ffe84b8e50014f4000ee000002fe7e080000388ffdfff36b8e50015f5000f0178000077e37210003c18ffa7e598a0e50015f5000f021c00009fc6e00519c07cfff7efc2a0e50015f5000f030e0001bc03c23000039fffc7d864a0e50015f5000f03070002febde506023f0ffff5a016b8e50015f5000f01830002747cf01f0b850fffcc6808b8e50015f5000f01c18003827e84320f8fffffc4d00fb8e50015f5000f40e10000027f900007cdffff9c9c07a0e50015f5000f60718000027ffd2a2fff7fff8eb80fa0e50015f5000f703f00000366ef2e3fffbfff2fa80720e50015f5000f780a000003fdffdc3ffffffe9f980738e50015f500005cfe000b01f9ffe7de7f5ffc3ff00f78e50015f500000efe000b01ffdff6fe3ff7f2ff400f70e50016f6001010072000000e5ffffffc1fff55ff201e40e50016f600101803e0000007fde7ff6c1ffff3ff187e40e50016f600101c01c0000007bf5f7ffc1ffd5ffebffef0e50016f600101e0180000006fdadbffc1ffffff117fcf0e50016f600010701fe000b02dbbadffb3fffffe45afd60e50014f600010380fe000307ffc07ffdff02fe1679e40016f700020701c0fe00031ffe3f7ffdff03c1aafb80e50017f700020bc0f8fe000439f77fafeffeff03bcd6f3c0e50017f7000210e070fe00031d5dff9ffeff04fd5b4bf780e50016f70002187060fe000a0c78ffdfeffcfffeeda5ece40016f700021838c0fe000a077fffdfde78f1fec0a3dce40015f700010c18fd000a0dfdffdfce38e1f900239ee40015f700010e0cfd000a1c007f9f1e0003a1c02736e40015f700010708fd000a39edffaf180001e3c02660e40016f8000240038cfd000a3c081e3280ffe013d84cf0e40016f80002c001f8fd000a0f6560f10f01fe07dcc978e40016f80002c00050fd000a039d9df03ba60f8385b330e40015fa000201e0e0fb0009026061f1fedfe6601e4fe30015fa0002021160fb0009065f5e33fdefd3d8599fe30015fa0002021860fb0009062dbc07ff1769241a67e30015fa0002821830fb00090f81ff1ff0f7fd7f09c0e30016fb000301860c30fb00090e6dff3ffb5ffd1d87e0e30016fc00040103830c30fa00086932fff9b7fd4ec3e0e30016fc00040102c30c18fa00087562fde7b7f97fe3c0e30015fc00040380c3041efa0007fde1fefdebfa2f71e2001909081e0207800380c18438fa00081af9c1fdadf67ff0b8e30019091833060cc00580618c40fa000802fb98df2e0feff8fce300180838210e084001c060ccf900080397787d45fbfff87ce3001808586196186000c06030f900080306f03ba007f83c38e3001707186186186000c030f80008030ef03f2a00b01e30e3001707186186186000e03cf80008034ef03c9fc1e40e10e300170718618618600060e0f8000801dee0386037ca071be300150618618618600068f600075e7039800fdc071fe300160618618618600070f7000803bf3c7a4003d8078fe300160618210608400080f700081fbf9ef48009d4078ce30014041833060cc0f500080fbfc18b8002db0788e30014047e1e1f8780f5000806bfff730f0aee0f8ce3000ff00009035fffe73fc0729f4780e4000ff00009017ffdce7fe6783fc780e4000ef00008037efbcc7fe2bfffc7e3000ef00008077fbfacfff43fffc6e3000ef000083f7fff5cfff0bfffc6e3000ff000093f7fffdcfffb3fffc380e4000ff00009077effecfff02effc380e4000ff00009037fffac7ff2bfffc780e4000ff00009017f83ee7ff83ffdc780e4000ef00008017f3dd63fc5fc3fc4e3000ef00008037e06f60f81710fc4e3000ef000080fbc037b0028e6e78ee3000ef000081fbc01798005e7178fe3000ef000080ebc0154c0214c3b8fe3000ef0000801bc017a702ad4938fe3000def00075c025d900c580318e3000def00075e00fe6030c80310e3000ef0000801cf01eb9fc8e80618e3000ef0000801ef837e000020063ce3000ef0000803e7fcfbbe12b00c3ce3000ef0000803d7cfebc1e14c3c7ce3000def00071bbfdf808057f8c8e3000def000719ff9700440ff080e3000def000705ff6c002153f180e3000def000706ffbe000217e3c0e3000def00071a7daa000841c3e0e3000def00073f367400081b86c0e3000def0007389cfe00108f0c40e3000bee0005476b0004541ce2000bee0005b32a8080187ee2000bee0005f8e1000060dee2000cef000601c63b94c38384e2000cef000601830e40140780e2000cef00060103c0e08019c0e2000bee000503b80200f0c0e2000aee00040714800f28e1000aee0004041d6d9a10e10008ed0002082307e00008ed00020c08c2e0000000a0008f00a0008300ff}}{\par }\pard \li20\nowidctlpar\tqr\tx9360\adjustright {\par }\pard \qj\li20\nowidctlpar\adjustright {\b\fs20 \sect }\sectd \sbkodd\linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \qj\li20\nowidctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs20 Limited Warranty \_ Subject }{\fs20 to the below stated limitations, Byte Works, Inc., hereby warrants that the programs contained in this unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from date of purchase. Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose. The limits of warranty extend only to the original purchaser.\par }\pard \nowidctlpar\adjustright {\fs20 \par }\pard \qj\li20\nowidctlpar\adjustright {\fs20 Neither Byte Works, Inc., nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par }\pard \nowidctlpar\adjustright {\fs20 \par }\pard \qj\li20\nowidctlpar\adjustright {\fs20 To obtain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works, Inc., within ten (10) days of purchase.\par }\pard \nowidctlpar\adjustright {\fs20 \par }\pard \qj\li20\nowidctlpar\adjustright {\b\fs20 Important Notice }{\fs20 \_ This is a fully copyrighted work and as such is protected under copyright laws of the United States of America. According to these laws, consumers of copywritten material may make copies for their personal use only. Duplication for any purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par }\pard \nowidctlpar\adjustright {\fs20 \par }\pard \qj\li20\nowidctlpar\adjustright {\fs20 This product is sold for use on a }{\i\fs20 single computer }{\fs20 at a }{\i\fs20 single location. }{\fs20 Contact the publisher for information regarding licensing for use at multiple\_ workstation or multiple\_computer installations.\par }\pard \nowidctlpar\adjustright {\fs20 \par }\pard \qj\li20\nowidctlpar\adjustright {\fs20 Source code for all programs included in this package are copyrighted and may not be duplicated or redistributed under any circumstances without prior written permission of the publisher.\par }\pard \nowidctlpar\adjustright {\fs20 \par }\pard \qj\li20\nowidctlpar\adjustright {\fs20 ORCA/M is a trademark of the Byte Works, Inc. Apple is a registered trademark of Apple Computer, Inc.\par }\pard \nowidctlpar\adjustright {\fs20 \par }\pard \qc\li20\nowidctlpar\tqr\tx9360\adjustright {\fs20 Program, Documentation and Design\par Copyright 1987\par The Byte Works, Inc.\par \par }\pard \nowidctlpar\tqr\tx9360\adjustright {\fs44 \sect }\sectd \sbkodd\linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \qc\li20\nowidctlpar\tqr\tx9360\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs32 Table of Contents\par }\pard \nowidctlpar\tqr\tx9360\adjustright {\b\fs32 \par }\pard\plain \s22\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field\fldedit{\*\fldinst {\b\fs32  TOC \\o "1-3" }}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 Getting Started\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514284 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200380034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 1}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Installation Details\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514285 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200380035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 2}}}{\lang1024 \par }\pard\plain \s23\li240\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 How a Utility is Installed\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514286 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200380036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 2}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The INSTALL Program\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514287 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200380037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 2}}}{\lang1024 \par }\pard\plain \s22\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Utilities\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514288 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200380038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 3}}}{\lang1024 \par }\pard\plain \s23\li240\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 Standard Input and Standard Output\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF\hich\af4\dbch\af4\loch\f4  _Toc496514289 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200380039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 3}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 File Names\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514290 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 4}}}{\lang1024 \par }\pard\plain \s22\widctlpar\tx720\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 CAL\tab Calendar\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514291 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 5}}}{\lang1024 \par }\pard \s22\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 CHECK\tab Check a Disk\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514292 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 6}}}{\lang1024 \par }\pard \s22\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 CMP\tab Compare Binary Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514293 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 7}}}{\lang1024 \par }\pard \s22\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 LOWER\tab Convert to Lowercase\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF \hich\af4\dbch\af4\loch\f4 _Toc496514294 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 9}}}{\lang1024 \par }\pard \s22\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SORT\tab Sort an ASCII File\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514295 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 10}}}{\lang1024 \par }\pard\plain \s23\li240\widctlpar\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 The Basic Sort\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514296 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 10}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 The Quick Sort\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514297 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 11}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 Options\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514298 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 12}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx1920\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SORT \_B file\tab Ignore Leading Blanks\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAG\hich\af4\dbch\af4\loch\f4 EREF _Toc496514299 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003200390039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 12}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SORT \_D file\tab Sort in Dictionary Order\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514300 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 SORT \_F file\tab Fold Uppercase into Lowercase\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514301 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx1680\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SORT \_I file\tab Ignore Non\_printing Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514302 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 13}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx1920\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SORT\hich\af4\dbch\af4\loch\f4  \_R file\tab Reverse the Sense of the Compare\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514303 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 14}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx1440\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SORT \_V\tab Write the Program Version and Copyright\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514304 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 14}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx1920\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 SORT \_W rile\tab Runs of White Space Compare Equal\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514305 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 14}}}{\lang1024 \par }\pard\plain \s22\widctlpar\tx1200\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 STRIPC\tab Strip Control\hich\af4\dbch\af4\loch\f4  Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514306 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 15}}}{\lang1024 \par \hich\af4\dbch\af4\loch\f4 STRIPW\tab Strip Trailing White Space\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514307 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 16}}}{\lang1024 \par }\pard \s22\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP\tab Compare Text Files\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514308 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 17}}}{\lang1024 \par }\pard\plain \s23\li240\widctlpar\tx2320\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP \_B filel file2\tab Ignore Leading Blanks\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514309 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300300039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx2300\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP \_F file\hich\af4\dbch\af4\loch\f4 l file2\tab Fold Uppercase into Lowercase\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514310 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310030000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 19}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx2240\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP \_I filel file2\tab Ignore Non\_Printing Characters\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514311 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310031000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 20}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx2340\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP \_N filel file2\tab Print Line Numbers of Mismatches\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514312 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310032000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 20}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx2480\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP \_S n filel\hich\af4\dbch\af4\loch\f4  file2\tab Resynchronize After n Lines Match\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514313 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310033000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 21}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx2320\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP \_V filel file2\tab Write the Program Version and Copyright\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514314 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310034000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 21}}}{\lang1024 \par }\pard \s23\li240\widctlpar\tx2380\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 TCMP \_W filel file2\tab Runs of White Space Compare Equal\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514315 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310035000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 21}}}{\lang1024 \par }\pard\plain \s22\widctlpar\tx720\tqr\tx9350\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\lang1024 \hich\af4\dbch\af4\loch\f4 TE\hich\af4\dbch\af4\loch\f4 E\tab Split Input to Standard and Error Out\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514316 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310036000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 23}}}{\lang1024 \par }\pard \s22\widctlpar\tx960\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 UNIQ\tab Find Unique Lines\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514317 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310037000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 24}}}{\lang1024 \par }\pard \s22\widctlpar\tx1200\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 UPPER\tab Convert to Uppercase\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514318 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310038000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 26}}}{\lang1024 \par }\pard \s22\widctlpar\tx720\tqr\tx9350\adjustright {\lang1024 \hich\af4\dbch\af4\loch\f4 WC\tab Word Count\tab }{\field{\*\fldinst {\lang1024 \hich\af4\dbch\af4\loch\f4  PAGEREF _Toc496514319 \\h }{\lang1024 {\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390036003500310034003300310039000000}}}{\fldrslt {\lang1024 \hich\af4\dbch\af4\loch\f4 27}}}{\lang1024 \par }\pard\plain \nowidctlpar\tqr\tx9360\adjustright \loch\af4\hich\af4\dbch\f4\cgrid }}\pard\plain \nowidctlpar\tqr\tx9360\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\b\fs32 \par }\pard \nowidctlpar\tx400\tqr\tx9360\adjustright {\par }\pard \li20\nowidctlpar\tqr\tx9360\adjustright {\fs54 \sect }\sectd \sbkodd\pgnrestart\linex-32767\headery1080\footery1080\sectdefaultcl {\footerl \pard\plain \s20\qj\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs21 \hich\af4\dbch\af4\loch\f4  PAGE }}{\fldrslt {\cs21\lang1024 \hich\af4\dbch\af4\loch\f4 6}}}{\par }}{\footerr \pard\plain \s20\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs21 \hich\af4\dbch\af4\loch\f4  PAGE }}{\fldrslt {\cs21\lang1024 \hich\af4\dbch\af4\loch\f4 7}}}{\fs20 \par }}\pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514284}\hich\af4\dbch\af4\loch\f4 Getting Started{\*\bkmkend _Toc496514284}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par This utility package serves several purposes. How you use it, and what you read in this manual, will depend on which of those purposes you purchased the package for. Whatever the purpose, though, start by making a backup of the disk that the utilities are on. The disk is not copy protected, so you can use any copy program (including COPY \_D from the shell) to copy the disk. Protect your investment \_ don't skip this step!\par \par With a backup made and safely tucked away, the first step is to install the utilities in your system. If you are using a hard disk, or if you have split things up on your 3.5" system disk, there will be plenty of room for the utilities. If you are working from a 3.5" disk exactly as it was shipped, you may want to free up some space first by deleting files you do not use, or by splitting the system up so it spans two disks. How you do this depends on which program (ORCA/M or APW) and which version you are using. Refer to the documentation for details.\par \par Assuming you have enough free room on the disk that contains your utility prefix (120 blocks are enough), installation is really quite easy. The Utility Pack #1 disk has an EXEC file called INSTALL that installs the utilities automatically. If you are in a hurry, simply insert the disk in a drive (with your utilities in another drive) and type\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {PREFIX /UTILITY.PAC.1 INSTALL\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The installation program will keep you advised of the actions it is taking. Details on what will happen are discussed below.\par \par If you decide not to install the utilities, you can still use them. If the utilities are on the current prefix (if so, you will see them when you type CATALOG), you can use them as described here. If not, simply type the fell path name of the utility instead of the name of the utility.\par \par While the main thrust of this package is to provide a set of useful utilities, you may have purchased it primarily for the source code. The source code for each of the utilities, as well as the macros used, are in subdirectories of the SOURCE directory. For example, the source code for the CAL utility is in the directory /UTILITY.PAC. 1 /SOURCE/CAL. The file CL is the source code itself, while CL.MACROS contain the macros used to assemble the CAL utility. To assemble this utility, type\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {PREFIX /UTILITY.PAC.1/SOURCE/CAL\par ASML CL\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par As you explore the source, you will find many similarities between the programs. These similarities are a clue to how you can use these programs to write other utilities, quickly and easily.\par \par }\pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514285}\hich\af4\dbch\af4\loch\f4 Installation Details{\*\bkmkend _Toc496514285}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514286}\hich\af4\dbch\af4\loch\f4 How a Utility is Installed{\*\bkmkend _Toc496514286}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\widctlpar\adjustright {There are three steps required to install a program that executes from the shell as a utility. The first step is to place the executable file in the utility subdirectory. This is the directory associated with prefix 6, which is listed when you type the SHOW PREFIX command. The next step is to copy the help file to the help subdirectory of the utility directory. The help file should have the same name as the utility itself, and should be a TXT file or SRC file. The help directory is 6/HELP. Finally, the command table must be updated to add the utility as a command.\par \par As an example, let us assume that you have written a utility that will be called HAL. The executable file that is in your current directory is called HAL.EXE, and the help file is called HAL.HELP. To copy the files to the proper spot, you could type\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {COPY HAL.EXE 6/HAL\par COPY HAL.HELP 6/HELP/HAL\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Once the files are in place, you can edit the command table by typing\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {EDIT 4/SYSCMND\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The numbered prefix 4 is always set to the system prefix while ORCA is running, so unless you have changed it since the last time ORCA was executed, this command will edit the command table that is loaded when you boot ORCA. Once in the editor, add the command HAL to the table (usually in alphabetical order). It should appear in column one of a new line. After at least one space, type a U, indicating that the new command is a utility. If you like, you can skip one more space and type in a comment telling what the utility does. With the new command in the command table, the shell will recognize it automatically after the next time you boot, or you can type\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {COMMANDS 4/SYSCMND\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par to read the new command table in immediately. If everything has been done correctly, the command will appear when you type HELP, the help file will be typed when you type HELP HAL, and the utility will run from any subdirectory when you type its name.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514287}\hich\af4\dbch\af4\loch\f4 The INSTALL Program{\*\bkmkend _Toc496514287}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The install utility does something very similar to the above process. First it copies the utilities and help files to the proper spot. To modify the command table, it actually uses some of the utilities themselves. The commands that must appear in the command table are collected on the disk in a file called SYSCMND. The installation program types this file and your command table with a single type command, which concatenates the two files. The output from this operation is piped to the SORT utility, which alphabetizes the list of files. As a check, just in case you have already installed the utilities once, the sorted file is then piped to the UNIQ utility to remove duplicate lines. Finally, the output is written back to your original command file. The complete command looks like\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {TYPE 4/SYSCMND SYSCMND }{\fs22 | }{BINARY/SORT }{\fs22 | }{BINARY/UNIQ >4/SYSCMND\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The last step is to install the new command table with the command\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {COMMANDS 4/SYSCMND\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514288}\hich\af4\dbch\af4\loch\f4 The Utilities{\*\bkmkend _Toc496514288}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Each of the utilities in this package is described in detail on the following pages. Each of the descriptions starts with a header listing the name of the utility, what it is for, a model line, and a brief description of the parameters. After you have read the details about a utility once, the header (or the help file!) will often contain all of the information you need to refresh your memory about its use.\par \par After the header is a detailed description of how to use the utility. This description tells what the utility does, exactly what each of the flags lets you control, and where appropriate, how the utility operates. For example, it is fairly obvious that the UPPER utility converts each lowercase character that is read into an uppercase character before writing it out, so the algorithm is not described in detail. At the other extreme, it is vitally important to know how text files are compared by the TCMP utility to be able to use it effectively, so a great deal of space is devoted to examples showing its subtleties. If a utility has any limitations, these are also discussed.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514289}\hich\af4\dbch\af4\loch\f4 Standard Input and Standard Output{\*\bkmkend _Toc496514289}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Many of the utilities process text information. These utilities can usually read their input from a file or from standard input. Reading the input from a file is fairly straight forward, and the reasons for doing so are fairly apparent. Why, though, should a utility be able to read information from standard input? The answer lies mostly in the fact that standard input can be redirected, as happens with pipes. In the section above that described how the installation procedure worked, a command appeared which concatenated two text files, sorted them, removed duplicated lines, and finally wrote the file back out. This was only possible because the utilities could read input from standard input.\par \par When text utilities produce text output, they write the output to standard output. Normally, this is the computer's display screen, but you can use output redirection to redirect the output to a file, or pipelines to send the output on to the next program.\par \par For example, let's assume that you have a file which contains a mailing list. Naturally, you want to remove duplicates. This can be done by first sorting the file, so that all duplicates are next to each other, and then using the UNIQ utility, which, among other things, can remove adjacent duplicate lines from a file. Assuming the file is called MAIL, you can do this by sorting the file and piping the output to UNIQ The output from UNIQ which has all of the duplicates removed, is then sent to a file called MAIL2:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {SORT MAIL }{\fs22 | }{UNIQ >MAIL2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par For the sake of speed, when you give a utility a file to work on, it reads the entire file into memory with one ProDOS read. The savings in speed are enormous, but there is an obvious disadvantage: if you do not have enough memory to hold the entire file, the utility will fail. Most of the utilities (SORT is not one of them) can work on a file one line at a time. If your memory is limited, you can force the utility to read the file one character at a time, processing the file as it goes, by redirecting the input from the file rather than giving it the file name directly. For example,\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UNIQ MAIL2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par will read in the entire MAIL2 file, then process it. This is fast, but requires lots of memory. The command\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UNIQ <MAIL2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par reads the lines in two at a time, processing the first line before reading the next. This takes more time, but requires very little memory. If you are not sure if you have enough memory, try it the first way first. No harm will be done if you have too little memory \_ you will simply get an error message. If that happens, use the second method instead.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514290}\hich\af4\dbch\af4\loch\f4 File Names{\*\bkmkend _Toc496514290}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par These utilities support the full range of special file name features introduced by ORCA/M and ProDOS 16. You can use device names, wildcards, prefix numbers and .. for directory walking in the normal way. If you are unfamiliar with these options, see your user's manual for details.\par \par }\pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514291}\hich\af4\dbch\af4\loch\f4 CAL\tab Calendar{\*\bkmkend _Toc496514291}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 CAL [\_V] [month] \hich\af6\dbch\af4\loch\f6 year\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 _V\tab Write the program name and copyright.\par \hich\af4\dbch\af4\loch\f4 month\tab The month to print a calendar for.\par \hich\af4\dbch\af4\loch\f4 year\tab The year to print a calendar for.\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {The CAL utility writes a calendar to standard output. Calendars are always printed for an entire month. A sample calendar is shown below to illustrate the format used.\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {         July 1987\par \par Sun Mon Tue Wed Thu Fri Sat\par               1   2   3   4\par   5   6   7   8   9  10  11\par  12  13  14  15  16  17  18\par  19  20  21  22  23  24  25\par  26  27  28  29  30  31\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par If you leave off the }{\i month }{parameter, the utility will print a calendar for the entire year. Years are specified as a full four\_digit year. Years must be greater than 1499, and less than 4000. For example, to print the calendar for the year of 1987, type\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {CAL 1987\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par If you specify a specific month, only the calendar for that month is printed. Months are specified as the first three characters of the name of the month. It is not an error if more than three characters are specified, but any extra characters are not checked for spelling. For example, to print the calendar for July 1987 (shown above), you would type\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {CAL JUL 1987\par \par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs32 \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514292}\hich\af4\dbch\af4\loch\f4 CHECK\tab Check a Disk}{\fs50 {\*\bkmkend _Toc496514292}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 CHECK [\_S] [\_V] device\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 -S\tab Don't print anything \_ set return codes only.\par \hich\af4\dbch\af4\loch\f4 -V\tab Write the program name and copyright.\par \hich\af4\dbch\af4\loch\f4 device\tab The device (by name o\hich\af4\dbch\af4\loch\f4 r number) to check.\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {The check utility checks a disk for bad blocks. It does this by first reading block two, where ProDOS disks have a field telling how many blocks are on the device. Each block on the device is then read. If a read error occurs, the block number where the error occurred is written to error out.\par \par The \_S flag adds to the usefulness of this utility when used from an EXEC file. In an EXEC file, where branching on the result of the check is more important that the messages the utility normally prints, the \_S flag can be used to turn off the text messages. The utility will set the status flag to zero if there are no bad blocks, to one if there are bad blocks, and to \_1 (65535) if there is an error, such as a bad parameter.\par \par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs34 \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514293}\hich\af4\dbch\af4\loch\f4 CMP\tab Compare Binary F\hich\af4\dbch\af4\loch\f4 iles{\*\bkmkend _Toc496514293}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 CMP [-L] [-S] [-V] filel file2\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 -L\tab Print all differences, not just the first.\par \hich\af4\dbch\af4\loch\f4 -S\tab Don't print anything \_ set return codes only.\par \hich\af4\dbch\af4\loch\f4 -V\tab Write the program name and copyright.\par \hich\af4\dbch\af4\loch\f4 file1\tab First file to compare.\par \hich\af4\dbch\af4\loch\f4 file2\tab Second file to compare.\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {The CMP utility does a binary compare of the two input files. The method used is to read both files into memory, then scan the files from start to finish looking for a byte that differs. If such a byte is found, the displacement into the files where the differing byte is located is written, first in decimal format and then in hexadecimal format. The bytes are then written, with the byte from }{\i filel }{appearing first.\par \par If there are no differing bytes, but one file is shorter than the other, a message to that effect is written.\par \par If there are no differences, and the files are the same length, a message is written to let you know that the files are equal.\par \par One use of CMP is in EXEC files, where text messages telling what happened are not as useful as an error return code, which could be tested. The CMP utility will return one of three status codes. If the files are identical, the status will be zero. If the files are not identical, the status will be 1. If there was some error, such as an illegal flag or a missing file, the status will be set to 65535 (\_ 1).\par \par For example, suppose that you want to write an EXEC file to insure two files are identical. If they match, the duplicate is to be deleted, but if they do not match, you want to leave both files intact for further examination. The EXEC file would take as input the names of the two files to compare, deleting the second one if they match. The EXEC file, then, is\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {CMP \{1\} \{2\}\par IF \{STATUS\} == 0\par \tab DELETE \{2\}\par END\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Two flags control options available with this utility. If you are using CMP in an EXEC file, and would rather not have CMP write anything to standard output, even if the files differ, use the \_S flag. Normally, only the first differing byte is printed. If you want all differences to be listed, and not just the first, use the \_L flag.\par \par Finally, some comment is in order about the method used to compare the files. The intent with CMP is to provide a utility that can verify that two files are identical as quickly as possible. This is the reason for reading the files in before starting the compare \_ the fewer calls to ProDOS, the faster the utility will run. This has two minor disadvantages. The first is that, if there is a difference early in the files, it takes longer to find the difference than if a character by character compare were used. The second is that there must be enough free memory to hold both of the files at the same time.\par \par See TCMP for a utility that is set up to compare text files, rather than binary files.\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs32 \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514294}\hich\af4\dbch\af4\loch\f4 LOWER\tab Convert to Lowercase{\*\bkmkend _Toc496514294}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 LOWER [\_V] [file ... ]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \_\hich\af4\dbch\af4\loch\f4 V\tab Write the p\hich\af4\dbch\af4\loch\f4 rogram name and copyright.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Characters are read from a file or standard input and written to standard output. Any character that appears in the input file as an uppercase alphabetic character (i.e. 'A' to 7) is converted to the equivalent lowercase character before being written out.\par \par There are three ways to provide input to the utility. The first is to take the input from the keyboard, which happens if the utility is called with no file name and without redirecting input. To exit the utility, type CTRL\_@. The second is to take the input from a file by redirecting the input, or by piping the input from a previous program. Finally, you can type the name of a file. While the last two methods generally result in the same output, there are internal differences in the way the input is handled. When input comes from a file, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {LOWER MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility loads the entire file into memory with a single ProDOS call, then processes it. This is generally about twice as fast as redirecting the input, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {LOWER <MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The advantage of redirecting input is that, since the entire file is not loaded into memory, you do not have to have enough memory to hold the file.\par \par If more than one file name is supplied on the command line, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {LOWER MYFILE1 MYFILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the files are concatenated, and processed as if they were a single file.\par \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514295}\hich\af4\dbch\af4\loch\f4 SORT\tab Sort an ASCII File{\*\bkmkend _Toc496514295}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 SORT [\_B] [\_D] [\_F] [\_I] [\_R] [\_V] [\_W] [file]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 -B\tab Ignore leading blanks.\par \_\hich\af4\dbch\af4\loch\f4 D\tab Dictionary order (ignore all but alphanumeric and spaces).\par \_\hich\af4\dbch\af4\loch\f4 F\tab Fold uppercase into lowercase.\par \_\hich\af4\dbch\af4\loch\f4 I\tab Ignore non\_printing characters.\par \_\hich\af4\dbch\af4\loch\f4 R\tab Reverse the sense of the comparisons.\par \hich\af4\dbch\af4\loch\f4 -V\tab Write the program name and copyright.\par \_\hich\af4\dbch\af4\loch\f4 W\tab Runs of white space compare equal.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from file.\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {Due to the fact that it has so many options, the SORT utility is one of the hardest to explain. It is not, however, hard to use. The explanation will be divided into three sections. In the first section, we will look at basically what the sort utility does, and how to use it. The next section covers the type of sort used, along with the limitations and advantages that this method implies. Finally, we will look at the options, describing how each option changes the basic sort performed by this utility.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514296}\hich\af4\dbch\af4\loch\f4 The Basic Sort{\*\bkmkend _Toc496514296}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The SORT utility takes ASCII text as input, reading it from the file specified, or if no file is listed, from standard input. Whether the input comes from a file or from standard input, the entire file is read into memory before the sort starts, so there must be enough free memory to hold the file. The utility then sorts the file in ASCII character order.\par \par To understand fully what SORT will do to a particular file, we must look at what happens in a few specific cases. First, if two lines are different in length, but they are identical up to the last character of the shorter line, the shorter line is placed first in the file. Another important case is when a line contains tabs. While tabs look like spaces when you are in the editor or when the file is typed, they are not. A tab is treated like any other character when the file is sorted.\par \par As an example, consider the following file.\par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {\par Now is the time\par for all good men\par to come to the aid\par of their computer.\par \par And now, some numbers:\par 1\par    1\par  10\par !Wow!\par \par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {When sorted, the file will be\par }\pard\plain \s17\fi700\li20\keepn\nowidctlpar\adjustright \f6\fs20\cgrid {\par \par    1\par  10\par !Wow!\par }\pard \s17\fi700\li20\nowidctlpar\adjustright {1\par And now, some numbers:\par Now is the time\par for all good men\par of their computer.\par to come to the aid\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {Note that the first line is blank.\par \par The sort utility assumes that all lines in the file are less than or equal to 255 characters. If the \_B, \_ D, \_F, \_1 and \_W flags are not used, lines up to 65535 characters can be sorted. If any of these flags are used, any characters after the first 255 characters in a line are ignored.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514297}\hich\af4\dbch\af4\loch\f4 The Quick Sort{\*\bkmkend _Toc496514297}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par While we will not go into what the quick sort is, or how to implement it, it is important to know about some of its advantages and disadvantages for you to understand this utility. The quick sort is a sort that functions recursively, by dividing a file into successively smaller pieces, and then sorting the smaller pieces. The way the quick sort algorithm is implemented in this utility, if you are sorting a perfectly random file, the recursion depth will be\par \par ln(lines)/ln(2)\par \par where }{\i lines }{is the number of lines in the file, and In is the natural logarithm function. In plain English, this means that if you double the number of lines in your file, the recursion depth increases by one. As we pointed out, this formula holds for a perfectly sorted file. It is also approximately correct for a randomly sorted file. In extreme cases, though, it is possible for the recursion depth to equal the number of lines.\par \par The reason that all of this is so important is that there is a maximum recursion depth that the utility can handle. The maximum depth that can be handled is 89, so that the utility can sort a presorted file up to 6e29 lines long. While that is plenty of capacity, it is possible, although rare, that the utility will fail. This would occur on files that were ordered very strangely to start with. If the file is ordered strangely enough, the utility could fail on an 89 line file.\par \par With the possibility that the sort could fail on some files, you may wonder why we did not choose a more reliable sort, like the shell sort. After all, the shell sort does not fail on any length of file that it can read into memory. The reason is that the common shell sort requires a time proportional to N}{\super 2}{ to sort an N line file, while the quick sort requires a time proportional to N*ln(N). For a short file, this is of little consequence, but if you are sorting, say, a 1000 line source file, the quick sort method would be about 144 times faster than a shell sort.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514298}\hich\af4\dbch\af4\loch\f4 Options{\*\bkmkend _Toc496514298}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\widctlpar\adjustright {A number of options give you close control over the method used to sort the file. These options can be used alone, or in combination. To get a firm grasp on what each option does, we will continue to sort the file shown in the example above.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514299}\hich\af4\dbch\af4\loch\f4 SORT \_B file\tab Ignore Leading Blanks{\*\bkmkend _Toc496514299}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The \_B flag causes the sort utility to ignore leading blanks when comparing two lines. Note that the blanks are not actually removed from the lines, just ignored. Sorted this way, our example file would become\par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {\par \par !Wow!\par    1\par 1\par  10\par And now, some numbers:\par Now is the time\par for all good men\par of their computer.\par to come to the aid\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {When two lines compare equal, as with the two lines that contain the number 1, ties are broken by comparing the two lines without removing the leading blanks first. Since a blank is the first printable ASCII character, that means that in the absence of imbedded control characters, the line with the most leading blanks will appear first. Lines containing all blanks will always appear first in the sorted file (again, assuming no imbedded control characters). If two all blank lines appear, the shorter one appears first.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514300}\hich\af4\dbch\af4\loch\f4 SORT \_D file\tab Sort in Dictionary O\hich\af4\dbch\af4\loch\f4 rder{\*\bkmkend _Toc496514300}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par Dictionary order basically means that the utility ignores any character that is not alphabetic, numeric, or a space. In our sample, then, the exclamation marks in the !Wow! line are ignored.\par }\pard\plain \s17\fi700\li20\keepn\nowidctlpar\adjustright \f6\fs20\cgrid {\par \par    1\par  10\par 1\par And now, some numbers:\par Now is the time\par !Wow!\par for all good men\par of their computer.\par }\pard \s17\fi700\li20\nowidctlpar\adjustright {to come to the aid\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514301}\hich\af4\dbch\af4\loch\f4 SORT \_F file\tab Fold Uppercase into Lowercase{\*\bkmkend _Toc496514301}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par The \_F option performs a case\_insensitive sort. This means that the 'A' and 'a' characters, which normally are not considered to be the same, are both treated as if they were the 'a' character. Sorted this way, the test file becomes\par }\pard\plain \s17\fi700\li20\keepn\nowidctlpar\adjustright \f6\fs20\cgrid {\par \par    1\par  10\par !Wow!\par 1\par And now, some numbers:\par for all good men\par Now is the time\par of their computer.\par }\pard \s17\fi700\li20\nowidctlpar\adjustright {to come to the aid\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514302}\hich\af4\dbch\af4\loch\f4 SORT \_I file\tab Ignore Non\_printing Characters}{\fs50 {\*\bkmkend _Toc496514302}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par It is possible to have control characters or characters whose numeric value is over 126 in an ASCII file, despite the fact that they do not print on the screen. A common example is a file that contains form feed characters. These show up in the editor as inverse L characters. When printed to the screen, they cause the screen to clear and the cursor to be placed at the top left comer of the screen. The \_I flag causes them to be ignored when sorting the file.\par \par Since our example did not contain any non\_printing characters, we will not list the results again here.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514303}\hich\af4\dbch\af4\loch\f4 SORT \_R file\tab Reverse the Sense of the Compare{\*\bkmkend _Toc496514303}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par The \_R flag causes the sort to work in reverse order. Our sample file would then be\par \par }\pard\plain \s17\fi700\li20\keepn\nowidctlpar\adjustright \f6\fs20\cgrid {\par to come to the aid\par of their computer.\par for all good men\par Now is the time\par And now, some numbers:\par 1\par }\pard \s17\fi700\li20\nowidctlpar\adjustright {!Wow!\par  10\par    1\par \par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514304}\hich\af4\dbch\af4\loch\f4 SORT \_V\tab Write the Program Version and Copyright}{\fs34 {\*\bkmkend _Toc496514304}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Before sorting the file, the version number and copyright notice are printed.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514305}\hich\af4\dbch\af4\loch\f4 SORT \_W rile\tab Runs of White Space Compare Equal{\*\bkmkend _Toc496514305}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par White space is a term used to refer to all of the ASCII characters that have something to do with spacing the file, such as the space character itself, horizontal tabs, form feeds, and carriage returns. White space characters consist of the space and all ASCII characters whose numeric values are in the range 9 to 13. The \_W flag causes all sequences of white space that occur in a line to be treated as if they were one space. It the sample file, this means that the multiple spaces in front of the 1 are treated as a single space. This does not actually change anything in our sample.\par }\pard\plain \s1\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514306}\hich\af4\dbch\af4\loch\f4 STRIPC\tab Strip Control Characters{\*\bkmkend _Toc496514306}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 STRIPC [\_V] [file...]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \_\hich\af4\dbch\af4\loch\f4 V\tab Write the program name and copyright.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {Characters are read from standard input. If the character is a printable ASCII character (ASCII code $20 to $7F), a carriage return ($OD), or a tab ($09), it is written to standard output All other characters are disposed of.\par \par There are three ways to provide input to the utility. The first is to take the input from the keyboard, which happens if the utility is called with no file name and without redirecting input. To exit the utility, type CTRL\_@. The second is to take the input from a file by redirecting the input, or by piping the input from a previous program. Finally, you can type the name of a file. While the last two methods generally result in the same output, there are internal differences in the way the input is handled. When input comes from a file, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {STRIPC\tab MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility loads the entire file into memory with a single ProDOS call, then processes it. This is generally about twice as fast as redirecting the input, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {STRIPC\tab <MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The advantage of redirecting input is that, since the entire file is not loaded into memory, you do not have to have enough memory to hold the file.\par \par If more than one file name is supplied on the command line, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {STRIPC\tab MYFILE1 MYFILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the files are concatenated, and processed as if they were a single file.\par \par }\pard\plain \s1\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514307}\hich\af4\dbch\af4\loch\f4 STRIPW\tab Strip Trailing White Space}{\fs52 {\*\bkmkend _Toc496514307}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 STRIPW [\_V] [file ... ]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \_\hich\af4\dbch\af4\loch\f4 V\tab Write the program name and copyr\hich\af4\dbch\af4\loch\f4 ight.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {Lines are read from standard in. The end of each line is marked with a carriage return (ASCII code $OD). All white space that appears at the end of the line is removed, and the resulting line is written to standard output.\par \par There are three ways to provide input to the utility. The first is to take the input from the keyboard, which happens if the utility is called with no file name and without redirecting input. To exit the utility, type CTRL\_@. The second is to take the input from a file by redirecting the input, or by piping the input from a previous program. Finally, you can type the name of a file. While the last two methods generally result in the same output there are internal differences in the way the input is handled. When input comes from a file, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {STRIPW MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility loads the entire file into memory with a single ProDOS call, then processes it. This is generally about twice as fast as redirecting the input, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {STRIPW <MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The advantage of redirecting input is that, since the entire file is not loaded into memory, you do not have to have enough memory to hold the file.\par \par If more than one file name is supplied on the command line, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {STRIPW MYFILE1 MYFILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the files are concatenated, and processed as if they were a single file.\par }\pard\plain \s1\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514308}\hich\af4\dbch\af4\loch\f4 TCMP\tab Compare Text Files{\*\bkmkend _Toc496514308}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 TCMP [\_B] [\_F] [\_I] [\_N] [\_S n] [\_V] }{\fs32 \hich\af6\dbch\af4\loch\f6 [\_W] }{\hich\af6\dbch\af4\loch\f6 file1 file2\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\_\hich\af4\dbch\af4\loch\f4 B\tab Ignore leading blanks.\par \_\hich\af4\dbch\af4\loch\f4 F\tab Fold uppercase into lowercase.\par \_\hich\af4\dbch\af4\loch\f4 I\tab Ignore non\_printing characters.\par \_\hich\af4\dbch\af4\loch\f4 N\tab Print line numbers of mismatches.\par \_\hich\af4\dbch\af4\loch\f4 S\hich\af4\dbch\af4\loch\f4  n\tab Resynchronize after n lines match.\par \hich\af4\dbch\af4\loch\f4 -V\tab Write the program name and copyright.\par \_\hich\af4\dbch\af4\loch\f4 W\tab Runs of white space compare equal.\par \hich\af4\dbch\af4\loch\f4 filel\tab First file to compare.\par \hich\af4\dbch\af4\loch\f4 file2\tab Second file to compare.\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The TCMP utility compares two ASCII files. The files are first read into memory, and then compared, one line at a time. If two lines differ, the utility attempts to resynchronize by skipping lines in one or both files. Lines are skipped in such a way that the fewest possible number of total lines are skipped. When five lines from each file match, the utility prints the lines skipped and continues comparing the files from that point as if they were equal.\par \par To get a better grasp on all of this, we will look at several examples. In the first, we will compare two files that have a single line that differs between them.\par \par }\pard\plain \li720\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 File 2:\par }{\hich\af6\dbch\af4\loch\f6 Shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6 Dickinson\tab Dickiinson\par \hich\af6\dbch\af4\loch\f6 Farley\tab Farley\par \hich\af6\dbch\af4\loch\f6 Asimov\tab Asimov\par \hich\af6\dbch\af4\loch\f6 Locke\tab Locke\par \hich\af6\dbch\af4\loch\f6 Plato\tab Plato\par \hich\af6\dbch\af4\loch\f6 Heinlein\tab Heinlein\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Since the two files differ \_ Dickinson is misspelled in the second file \_ the utility will detect the difference and write\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {\_\_\_\_ Files differ:\par \par \_\_ File 1:\par \par Dickinson\par \par \_\_ File 2:\par \par Dickinson\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Note that even though the files are of different length, the utility does not report the rest of the file as being different, as the CUP utility would. The key point to remember is that at least five lines must match before the utility believes the files are in step again. For example, if two of the names were different, as in\par \par }\pard\plain \li720\keepn\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 File 2:\par }{\hich\af6\dbch\af4\loch\f6 Shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6 Dickinson\tab Dickiinson\par \hich\af6\dbch\af4\loch\f6 Farley\tab Farley\par \hich\af6\dbch\af4\loch\f6 Asimov\tab I\hich\af6\dbch\af4\loch\f6 saac\par \hich\af6\dbch\af4\loch\f6 Locke\tab Locke\par \hich\af6\dbch\af4\loch\f6 Plato\tab Plato\par }\pard \li720\widctlpar\tx4320\adjustright {\hich\af6\dbch\af4\loch\f6 Heinlein\tab Heinlein\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility will report the entire last section of the files as different:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {\_\_\_\_ Files differ:\par \par \_\_ File 1:\par \par Dickinson\par Farley\par Asimov\par Locke\par Plato\par Heinlein\par \par \_\_ File 2:\par \par Dickiinson\par Farley\par Isaac\par Locke\par Plato\par Heinlein\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par As was mentioned, the files can actually have extra lines, as the files below do.\par \par }\pard\plain \li720\keepn\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 File 2:\par }{\hich\af6\dbch\af4\loch\f6 Shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6 Dickinson\tab Farley\par \hich\af6\dbch\af4\loch\f6 Farley\tab Isaac\par \hich\af6\dbch\af4\loch\f6 Asimov\tab Locke\par \hich\af6\dbch\af4\loch\f6 Locke\tab Plato\par \hich\af6\dbch\af4\loch\f6 Plato\tab Heinlein\par }\pard \li720\widctlpar\tx4320\adjustright {\hich\af6\dbch\af4\loch\f6 Heinlein\tab \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Here, the difference is that the first file has a line for Dickinson, while that name is missing from the second file. If you are not expecting the results, they may not seem correct at first glance, since one file has no information at all listed:\par \par }\pard\plain \s17\fi700\li20\keepn\nowidctlpar\adjustright \f6\fs20\cgrid {\_\_\_\_ Files differ:\par }\pard \s17\fi700\li20\nowidctlpar\adjustright {\par \_\_ File 1:\par \par Dickinson\par \par \_\_ File 2:\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514309}\hich\af4\dbch\af4\loch\f4 TCMP \_B filel file2\tab Ignore Leading Blanks{\*\bkmkend _Toc496514309}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The \_B flag causes leading blanks to be ignored when the lines are compared. Thus, the following sample files would compare equal if this option were used.\par \par }\pard\plain \li720\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 File 2:\par }{\hich\af6\dbch\af4\loch\f6 Shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6 Dickinson\tab    Di\hich\af6\dbch\af4\loch\f6 ckinson\par \hich\af6\dbch\af4\loch\f6 Farley\tab Farley\par \hich\af6\dbch\af4\loch\f6 Asimov\tab Asimov\par \hich\af6\dbch\af4\loch\f6 Locke\tab Locke\par \hich\af6\dbch\af4\loch\f6 Plato\tab Plato\par \hich\af6\dbch\af4\loch\f6 Heinlein\tab Heinlein\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514310}\hich\af4\dbch\af4\loch\f4 TCMP \_F filel file2\tab Fold Uppercase into Lowercase{\*\bkmkend _Toc496514310}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Lowercase and their uppercase counterparts compare as the same character. Thus, with this option, the following two files will compare as equal.\par \par }\pard\plain \li720\keepn\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 File 2:\par }{\hich\af6\dbch\af4\loch\f6 shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6 Dickinson\tab Dickinson\par \hich\af6\dbch\af4\loch\f6 Farley\tab Farley\par }\pard \li720\widctlpar\tx4320\adjustright {\hich\af6\dbch\af4\loch\f6 Asimov\tab Asimov\par \hich\af6\dbch\af4\loch\f6 Locke\tab Locke\par \hich\af6\dbch\af4\loch\f6 Plato\tab Plato\par \hich\af6\dbch\af4\loch\f6 Heinlein\tab Heinlein\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514311}\hich\af4\dbch\af4\loch\f4 TCMP \_I filel file2\tab Ignore Non\_Printing Characters{\*\bkmkend _Toc496514311}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Non\_printing characters are removed from the lines before they are compared. The non\_printing characters are all characters outside of the ASCII range $20 (the space) to $7E (the \_), with the exception of $09 (the tab character), which is considered to be printable.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514312}\hich\af4\dbch\af4\loch\f4 TCMP \_N filel file2\tab Print Line Numbers of\hich\af4\dbch\af4\loch\f4  Mismatches{\*\bkmkend _Toc496514312}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par With the \_N option, when differences occur, the line number where the difference occurs is also listed. This can be useful in tracking down the exact position of a difference in a file. For example, if you compare these two files:\par \par }\pard\plain \li720\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Fil\hich\af4\dbch\af4\loch\f4 e 2:\par }{\hich\af6\dbch\af4\loch\f6 Shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6 Dickinson\tab Dickiinson\par \hich\af6\dbch\af4\loch\f6 Farley\tab Farley\par \hich\af6\dbch\af4\loch\f6 Asimov\tab Asimov\par \hich\af6\dbch\af4\loch\f6 Locke\tab Locke\par \hich\af6\dbch\af4\loch\f6 Plato\tab Plato\par \hich\af6\dbch\af4\loch\f6 Heinlein\tab Heinlein\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par and the \_N option is used, the output looks like this:\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {\_\_\_\_ Files differ:\par \par \_\_ File 1:\par \par     2 Dickinson\par \par \_\_ File 2:\par \par     2 Dickinson\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par You can then use the editor repeat count to edit the file and jump to the differing line, or use the TYPE command with the +N flag to see the lines that surround the differing line.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514313}\hich\af4\dbch\af4\loch\f4 TCMP \_S n filel file2\tab Resynchronize After n Lines Match{\*\bkmkend _Toc496514313}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Normally, the utility resynchronizes after five lines that match are found. This has been found to be a good number for comparing assembly language files \_ with this value, it can generally locate an entire subroutine that has been inserted into the program. Depending on what you are searching for, you may want to have the utility resynchronize after more or fewer lines match. The \_S flag allows you to select the number of lines that match before the utility considers the file to be in step again.\par \par Some cautionary notes are in order. The more lines you ask to match, the longer it will take the utility to scan a pair of files. If you use a value that is too small, the utility may not be able to detect when several lines are inserted into a file.\par \par As an example, the following command will search the two files, resynchronizing after three lines match.\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {TCMP \_S 3 FILE1 FILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514314}\hich\af4\dbch\af4\loch\f4 TCMP \_V filel file2\tab Write the Program Version and Copyright{\*\bkmkend _Toc496514314}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par Before printing any differences that may exist between the two files, the version number and copyright notice are printed.\par \par }\pard\plain \s2\keepn\widctlpar\tqr\tx9000\outlinelevel1\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514315}\hich\af4\dbch\af4\loch\f4 TCMP \_W filel file2\tab Runs of White Space Compare Equal{\*\bkmkend _Toc496514315}\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par This flag causes sequences of white space (spaces, tabs, line feeds, form feeds) to be compared as if they were a single space. Note that at least one space must exist for the comparison to match. For example, the files\par \par \par }\pard\plain \li720\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 File 2:\par }{\hich\af6\dbch\af4\loch\f6 Shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6  Dickinson\tab          Dickinson\par \hich\af6\dbch\af4\loch\f6 Farley\tab Farley\par \hich\af6\dbch\af4\loch\f6 Asimov\tab Asimov\par \hich\af6\dbch\af4\loch\f6 Locke\tab Locke\par \hich\af6\dbch\af4\loch\f6 Plato\tab Plato\par \hich\af6\dbch\af4\loch\f6 Heinlein\tab Heinlein\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par would be considered to be equal if the \_W flag is used, but the files\par \par }\pard\plain \li720\keepn\widctlpar\tx4320\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\ul \hich\af4\dbch\af4\loch\f4 File 1:}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 File 2:\par }{\hich\af6\dbch\af4\loch\f6 Shakespeare\tab Shakespeare\par \hich\af6\dbch\af4\loch\f6 Dickinson\tab          Dickinson\par \hich\af6\dbch\af4\loch\f6 Farley\tab Farley\par }\pard \li720\widctlpar\tx4320\adjustright {\hich\af6\dbch\af4\loch\f6 Asimov\tab Asimov\par \hich\af6\dbch\af4\loch\f6 Locke\tab Locke\par \hich\af6\dbch\af4\loch\f6 Plato\tab Plato\par \hich\af6\dbch\af4\loch\f6 Heinlein\tab Heinlein\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par are not equal, since there is no space at all in the first file.\par \par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs32 \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514316}\hich\af4\dbch\af4\loch\f4 TEE\tab Split Input to Standard and Error Out}{\fs50 {\*\bkmkend _Toc496514316}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 TEE [\_V] [file ... ]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \_\hich\af4\dbch\af4\loch\f4 V\tab Write the program name and copyright.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {Characters are read from standard input. Each character is written to both standard output and error output.\par \par There are three ways to provide input to the utility. The first is to take the input from the keyboard, which happens if the utility is called with no file name and without redirecting input. To exit the utility, type CTRL\_@. The second is to take the input from a file by redirecting the input, or by piping the input from a previous program. Finally, you can type the name of a file. While the last two methods generally result in the same output, there are internal differences in the way the input is handled. When input comes from a file, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {TEE  MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility loads the entire file into memory with a single ProDOS call, then processes it. This is generally about twice as fast as redirecting the input, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {TEE  <MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The advantage of redirecting input is that, since the entire file is not loaded into memory, you do not have to have enough memory to hold the file.\par \par If more than one file name is supplied on the command line, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {TEE  MYFILE1  MYFILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the files are concatenated, and processed as if they were a single file.\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs48 \par }{\fs32 \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514317}\hich\af4\dbch\af4\loch\f4 UNIQ\tab Find Unique L\hich\af4\dbch\af4\loch\f4 ines{\*\bkmkend _Toc496514317}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 UNIQ [\_C] [\_D] [\_U] [\_V] [file ... ]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \_\hich\af4\dbch\af4\loch\f4 C\tab Write a frequency count.\par \_\hich\af4\dbch\af4\loch\f4 D\tab Print only lines with duplicates.\par \hich\af4\dbch\af4\loch\f4 -U\tab Print only lines that are unique.\par \hich\af4\dbch\af4\loch\f4 -V\tab Write the program name and copyright.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par UNIQ lets you remove adjacent duplicate lines from a file. The utility examines each line in the file, and removes any lines that exactly match an adjacent line. If the \_C option is coded, each line that is written to standard output is preceded by a five\_digit frequency count, telling how many times the line occurred in the original file.\par \par Two options allow you to print only unique lines or only lines that were not unique. The first, \_D, prints lines that were duplicated. It still only prints each line one time. The \_U option suppresses lines that were duplicated, printing only those that were unique. These two options cannot be used together.\par \par Note that only adjacent unique lines are removed. For example, if the input file is\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {Mike\par Phil\par Phil\par Patty\par Mike\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par and you run UNIQ on the file with the \_C option, the output would be\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {1 Mike\par 2 Phil\par 1 Patty\par 1 Mike\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The duplicate Phil is counted and removed, but since the two Mike's are not adjacent, they are both flagged as unique. If you want to find all duplications of a given line, run the file through the SORT utility first. For example, if the above file is called MYFILE, the command\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {SORT MYFILE | UNIQ \_C\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par would give the output\par \par }\pard\plain \s17\fi700\li20\keepn\nowidctlpar\adjustright \f6\fs20\cgrid {2 Mike\par 1 Patty\par }\pard \s17\fi700\li20\nowidctlpar\adjustright {2 Phil\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par There are three ways to provide input to the utility. The first is to take the input from the keyboard, which happens if the utility is called with no file name and without redirecting input. To exit the utility, type CTRL\_@. The second is to take the input from a file by redirecting the input, or by piping the input from a previous program. Finally, you can type the name of a file. While the last two methods generally result in the same output there are internal differences in the way the input is handled. When input comes from a file, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UNIQ  MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility loads the entire file into memory with a single ProDOS call, then processes it. This is generally about twice as fast as redirecting the input, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UNIQ  <MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The advantage of redirecting input is that, since the entire file is not loaded into memory, you do not have to have enough memory to hold the file.\par \par If more than one file name is supplied on the command line, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UNIQ  MYFILE1  MYFILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the files are concatenated, and processed as if they were a single file.\par \par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs36 \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514318}\hich\af4\dbch\af4\loch\f4 UPPER\tab Convert to Uppercase{\*\bkmkend _Toc496514318}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 UPPER [\_V] [file]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \_\hich\af4\dbch\af4\loch\f4 V\tab Write the progr\hich\af4\dbch\af4\loch\f4 am name and copyright.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {Characters are read from a file or standard input and written to standard output. Any character that appears in the input file as a lowercase alphabetic character (i.e. 'a' to Y) is converted to the equivalent uppercase character before being written out.\par \par There are three ways to provide input to the utility. The first is to take the input from the keyboard, which happens if the utility is called with no file name and without redirecting input. To exit the utility, type CTRL\_@. The second is to take the input from a file by redirecting the input, or by piping the input from a previous program. Finally, you can type the name of a file. While the last two methods generally result in the same output, there are internal differences in the way the input is handled. When input comes from a file, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UPPER MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility loads the entire file into memory with a single ProDOS call, then processes it. This is generally about twice as fast as redirecting the input, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UPPER <MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The advantage of redirecting input is that, since the entire file is not loaded into memory, you do not have to have enough memory to hold the file.\par \par If more than one file name is supplied on the command line, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {UPPER MYFILE1 MYFILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the files are concatenated, and processed as if they were a single file.\par }\pard\plain \widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs52 \par }{\fs32 \sect }\sectd \linex-32767\headery1080\footery1080\sectdefaultcl \pard\plain \s1\keepn\widctlpar\tqr\tx9000\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {{\*\bkmkstart _Toc496514319}\hich\af4\dbch\af4\loch\f4 WC\tab Word Count{\*\bkmkend _Toc496514319}\par }\pard\plain \s16\qj\keepn\widctlpar\adjustright \f4\lang1024\cgrid {\par }\pard \s16\qj\keepn\widctlpar\brdrt\brdrs\brdrw10\brsp20 \adjustright {\par }\pard\plain \s18\widctlpar\adjustright \fs28\loch\af6\hich\af6\dbch\f4\cgrid {\hich\af6\dbch\af4\loch\f6 WC [\_C] [\_L] [\_V] [\_W] [file ... ]\par }\pard\plain \s19\fi-1440\li2160\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\par \_\hich\af4\dbch\af4\loch\f4 C\tab Write the number of characters in the file.\par \_\hich\af4\dbch\af4\loch\f4 L\tab Write the number of lines in the file.\par \_\hich\af4\dbch\af4\loch\f4 V\tab Write the program name\hich\af4\dbch\af4\loch\f4  and copyright.\par \_\hich\af4\dbch\af4\loch\f4 W\tab Write the number of words in the file.\par \hich\af4\dbch\af4\loch\f4 file\tab Take the input from }{\i \hich\af4\dbch\af4\loch\f4 file}{\hich\af4\dbch\af4\loch\f4 .\par \par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {Counts the number of characters, words and lines in an ASCII file. Words are defined as any sequence of characters, separated by white space. Lines are counted by counting the number of carriage returns in the file. Characters are counted by counting all of the characters in the file except for carriage returns.\par \par If no parameters are coded, lines, characters and words are all counted. If any option \_ including the \_V flag \_ is coded, only those counts requested with a flag are written out. For example, if you code\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {WC \_L MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the only thing printed will be the number of lines.\par \par There are three ways to provide input to the utility. The first is to take the input from the keyboard, which happens if the utility is called with no file name and without redirecting input. To exit the utility, type CTRL\_@. The second is to take the input from a file by redirecting the input, or by piping the input from a previous program. Finally, you can type the name of a file. While the last two methods generally result in the same output, there are internal differences in the way the input is handled. When input comes from a file, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {WC MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the utility loads the entire file into memory with a single ProDOS call, then processes it. This is generally about twice as fast as redirecting the input, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {WC <MYFILE\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par The advantage of redirecting input is that, since the entire file is not loaded into memory, you do not have to have enough memory to hold the file.\par \par If more than one file name is supplied on the command line, as in\par \par }\pard\plain \s17\fi700\li20\nowidctlpar\adjustright \f6\fs20\cgrid {WC MYFILE1 MYFILE2\par }\pard\plain \s16\qj\widctlpar\adjustright \f4\lang1024\cgrid {\par the files are concatenated, and processed as if they were a single file.\par }}