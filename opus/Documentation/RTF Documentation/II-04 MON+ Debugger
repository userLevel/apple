{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}}{\*\ud{\fonttbl{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \snext0 Normal;}{\s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 1;}{\s3\sb240\sa60\keepn\widctlpar\adjustright \loch\af5\hich\af5\dbch\f4\cgrid \sbasedon0 \snext0 heading 3;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\adjustright \fs20\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon0 \snext15 Plain Text;}{\s16\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext16 header;}{\s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon15 \snext17 Text;}{\s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \sbasedon17 \snext18 Code;}{\s19\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext19 footer;}{\*\cs20 \additive \sbasedon10 page number;}{\s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid \sbasedon17 \snext22 Command Header;}}{\info{\title MON+}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy26\hr16\min23}{\revtim\yr2000\mo10\dy26\hr16\min23}{\printim\yr2000\mo10\dy26\hr16\min22}{\version2}{\edmins0}{\nofpages19}{\nofwords3626}{\nofchars20672}{\*\company Byte Works, Inc.}{\nofcharsws25386}{\vern99}}\margl3067\margr3067\margt2880\margb2880 \facingp\widowctrl\ftnbj\aenddoc\formshade\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl {\headerl \pard\plain \s16\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af7\dbch\af4\loch\f7 MON+ Symbolic Deb\hich\af7\dbch\af4\loch\f7 ugger}{\par }}{\headerr \pard\plain \s16\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s15\qc\widctlpar\brdrt\brdrs\brdrw60\brsp20 \brdrb\brdrs\brdrw60\brsp20 \adjustright \fs20\loch\af2\hich\af2\dbch\f4\cgrid {\i\fs72 \hich\af4\dbch\af4\loch\f4 MON+\par \hich\af4\dbch\af4\loch\f4 Symbolic Debugger\par }\pard \s15\qc\widctlpar\adjustright {\fs36 \hich\af4\dbch\af4\loch\f4 for the ProDOS 8 version of ORCA/M\par }\pard \s15\widctlpar\adjustright {\par \par \par \par \par \par \par \par \par }{\fs28 \hich\af4\dbch\af4\loch\f4 By Dave Winzler of Microseeds, Inc.\par }{\par \par \par \par \par \par \par \par \par }{\fs28 \hich\af4\dbch\af4\loch\f4 Copyright 1987\par }{\par }{{\shp{\*\shpinst\shpleft0\shptop0\shpright6114\shpbottom2457\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz0\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex70\picscaley70\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich176\picwgoal8760\pichgoal3520\macpict\bliptag-1229934158\blipupi72{\*\blipuid b6b0b1b2b2eba5eae05d25da145947cc}0e220000000100b001b7001102ff0c00ffffffff000100000000000001b7000000b000000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800380000000000b001b80000000100b001b70000000100b001b7000115e200011ffffb0006300600c0000003fd000060fc0018e200043fff80000cfe0006300600c0000003fd000060fc0018e20004380380000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0019e20004300180000cfe0007300600c00000030cfe000060fc0019e20004300180003ffe0007300600c00000030cfe000070fc001ce2001838038381bf0ffc00300600c7fc1ff30c0ff800787fc1ff00001ce200183fffc7c18c1ffe00380600cfff3ff30c1ffc007cffe3ff80001ce200183fffe7c18c1c0e003c0600cfff38030c1c1c007ce0e38180001ce200183f00e7c18c1806003e0600ce0730030c180c007cc0630180001ce200183e0067c18c1806003e0600cc0330030c1800007cc0630180001be200153e0067c18c1c0e003e0600cc033003ff9800007cc063fe001ce200183e0067c18e1ffe003e0600ce033803ff9ff8007ce0638000001ce200183e0067c18f1ffc003e0600cf033c03e38ffc007cf063c0000020e7000010fd00183e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d18003fc0003e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d180030c0003e0067818f9f00003e0600cf833e03e1807c007cf863e0000022e8001e030c3830c0003e0067018f9f00003e0600cf833e03e1807c007cf863e1800022e8001e060cfc30c0003e0066018f9f06003e0600cf833e03e1987c007cf863e1800022e8001e0c07cc3fc0003f00e6038f9f06003f0f01cfc73e03e1987c007cf863e18e0022e8001e1807063800003fffe7ff8f9ffe003fffffcfff3e03e19ffc007cf863ff8e0022e8001e3807023800001fffc3ff870ffc001fffff87fe1c01c187f800387061ff0e000fe800047c030338c0fd00010380ed000fe80004ce03c13fc0fd00010180ed0012ec00070200000187c1e180fc00010180ed0013ee000801480020000303e1f0fb00010180ed0015ef000930140024c0000001f0f0fc000203ff80ed0014ef000438e0000043fe0001f8f0fc000103ffec000eef00087b01ec02678000007ce4000eef00083c7a00201f8000003ce4000ff000050733e0000207fe00001ce4000cf0000607c7f80001610ce1000cf00006079e01090092dce1000cf00006033c8832041c7ce1000cf0000646e8004000823ce1000cf00006fddd20402005d0e1000df00007fbf5c4801040ccc0e2000df00007f7f13080120967e0e2000df000072f8121801020b2e0e2000df000075f7e8880108af1c0e20011f1000b07be65404032012880000262e50011f1000b07be85c26020457c80002777e50012f1000c077cf93000c1029c5c0077ff30e60012f1000c017b0d848a08278e7c003f9f70e60012f1000c02fc02d0100018ef280771e1e0e60012f1000c02f402c40001201f3007fdff76e60012f1000c1ce801008096341f9003afbdbee60012f1000c1de801626b1e4c0d9116fbf01ee60012f1000c3de8018180ecdc0f973dffedece60012f1000c39e80116003f5e0bcf3bf9680ce60013f1000d0bc4026c401f5f0bce1ff7656780e70013f1000d0bc403f8700fafd1cc1f9c1d9f80e70012f1000c0bc30fdbe067e7d3c873e3e063e60012f1000c73cefbe73e33f867e4ffc7f35fe60013f1000df3cfff22ff1bf7bde4dfaff9adc0e70013f1000d73dfe746ff99ffffe7ef0ff9e1c0e70013f1000d17d7ffc5ffddecece7edeff9fd80e70012f1000c17feff45ffcdfedfe1e80ffa3fe60012f1000c17afdbc5ffcdebffe0e56ffb7fe60013f1000d67b9ffc57fcdffffe17d87f1ddc0e70013f1000df7fbff457f5debede7e061e279c0e70012f1000cf3c17a46be99e8ffe7ff500f7ee60012f1000c73cbfe23453adf47e53dadadbee60012f1000c13e3ff21be33bfcfe4df400337e60012f1000c0bc87f908065ffa3cefdededefe60012f1000c0bc1879800cf7f2bcbfff89be8e60012f1000c19f2018c03deff53c1ffed77f8e60012f1000c79f251860fbcff97caf37edfbce60012f1000c7ce440c180fafff798fde9677ce60012f1000c3cb480807ff0fff397867f5f80e60012f1000c04f400b000297fe786013dafc0e60012f1000c0274008040d87fe72000b7fec0e60011f1000b0e7a012000013fcf0000d2e6e50011f1000b0d2e01301f160f0e45804ae0e50011f1000b3f1d86e060c0e01c79404be0e50011f1000b6c9178c0c1e0021cfd8055e0e50011f1000b3d2ac05081f16238fdb04dc0e50011f1000b2c46370101f980703c52d680e50011f1000b1466cec103f880703faceae0e50011f1000b33f339a103f804e47fe9f2f0e50011f1000b35f1870107f841cf7f86c970e50012f2000c07ebe0c68107f8039b7fff9560e50012f2000c06f86321808ff00f257fffed40e50012f2000c0703e79800dfe31e06bfffdf60e50012f2000c03afffc6007fc078c7dffa50b8e50011f1000be7ffc3801f01e5f78ffe84b8e50014f4000ee000002fe7e080000388ffdfff36b8e50015f5000f0178000077e37210003c18ffa7e598a0e50015f5000f021c00009fc6e00519c07cfff7efc2a0e50015f5000f030e0001bc03c23000039fffc7d864a0e50015f5000f03070002febde506023f0ffff5a016b8e50015f5000f01830002747cf01f0b850fffcc6808b8e50015f5000f01c18003827e84320f8fffffc4d00fb8e50015f5000f40e10000027f900007cdffff9c9c07a0e50015f5000f60718000027ffd2a2fff7fff8eb80fa0e50015f5000f703f00000366ef2e3fffbfff2fa80720e50015f5000f780a000003fdffdc3ffffffe9f980738e50015f500005cfe000b01f9ffe7de7f5ffc3ff00f78e50015f500000efe000b01ffdff6fe3ff7f2ff400f70e50016f6001010072000000e5ffffffc1fff55ff201e40e50016f600101803e0000007fde7ff6c1ffff3ff187e40e50016f600101c01c0000007bf5f7ffc1ffd5ffebffef0e50016f600101e0180000006fdadbffc1ffffff117fcf0e50016f600010701fe000b02dbbadffb3fffffe45afd60e50014f600010380fe000307ffc07ffdff02fe1679e40016f700020701c0fe00031ffe3f7ffdff03c1aafb80e50017f700020bc0f8fe000439f77fafeffeff03bcd6f3c0e50017f7000210e070fe00031d5dff9ffeff04fd5b4bf780e50016f70002187060fe000a0c78ffdfeffcfffeeda5ece40016f700021838c0fe000a077fffdfde78f1fec0a3dce40015f700010c18fd000a0dfdffdfce38e1f900239ee40015f700010e0cfd000a1c007f9f1e0003a1c02736e40015f700010708fd000a39edffaf180001e3c02660e40016f8000240038cfd000a3c081e3280ffe013d84cf0e40016f80002c001f8fd000a0f6560f10f01fe07dcc978e40016f80002c00050fd000a039d9df03ba60f8385b330e40015fa000201e0e0fb0009026061f1fedfe6601e4fe30015fa0002021160fb0009065f5e33fdefd3d8599fe30015fa0002021860fb0009062dbc07ff1769241a67e30015fa0002821830fb00090f81ff1ff0f7fd7f09c0e30016fb000301860c30fb00090e6dff3ffb5ffd1d87e0e30016fc00040103830c30fa00086932fff9b7fd4ec3e0e30016fc00040102c30c18fa00087562fde7b7f97fe3c0e30015fc00040380c3041efa0007fde1fefdebfa2f71e2001909081e0207800380c18438fa00081af9c1fdadf67ff0b8e30019091833060cc00580618c40fa000802fb98df2e0feff8fce300180838210e084001c060ccf900080397787d45fbfff87ce3001808586196186000c06030f900080306f03ba007f83c38e3001707186186186000c030f80008030ef03f2a00b01e30e3001707186186186000e03cf80008034ef03c9fc1e40e10e300170718618618600060e0f8000801dee0386037ca071be300150618618618600068f600075e7039800fdc071fe300160618618618600070f7000803bf3c7a4003d8078fe300160618210608400080f700081fbf9ef48009d4078ce30014041833060cc0f500080fbfc18b8002db0788e30014047e1e1f8780f5000806bfff730f0aee0f8ce3000ff00009035fffe73fc0729f4780e4000ff00009017ffdce7fe6783fc780e4000ef00008037efbcc7fe2bfffc7e3000ef00008077fbfacfff43fffc6e3000ef000083f7fff5cfff0bfffc6e3000ff000093f7fffdcfffb3fffc380e4000ff00009077effecfff02effc380e4000ff00009037fffac7ff2bfffc780e4000ff00009017f83ee7ff83ffdc780e4000ef00008017f3dd63fc5fc3fc4e3000ef00008037e06f60f81710fc4e3000ef000080fbc037b0028e6e78ee3000ef000081fbc01798005e7178fe3000ef000080ebc0154c0214c3b8fe3000ef0000801bc017a702ad4938fe3000def00075c025d900c580318e3000def00075e00fe6030c80310e3000ef0000801cf01eb9fc8e80618e3000ef0000801ef837e000020063ce3000ef0000803e7fcfbbe12b00c3ce3000ef0000803d7cfebc1e14c3c7ce3000def00071bbfdf808057f8c8e3000def000719ff9700440ff080e3000def000705ff6c002153f180e3000def000706ffbe000217e3c0e3000def00071a7daa000841c3e0e3000def00073f367400081b86c0e3000def0007389cfe00108f0c40e3000bee0005476b0004541ce2000bee0005b32a8080187ee2000bee0005f8e1000060dee2000cef000601c63b94c38384e2000cef000601830e40140780e2000cef00060103c0e08019c0e2000bee000503b80200f0c0e2000aee00040714800f28e1000aee0004041d6d9a10e10008ed0002082307e00008ed00020c08c2e0000000a0008f00a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\absh2457\absw6114\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex70\picscaley70\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich176\picwgoal8760\pichgoal3520\macpict\bliptag-1229934158\blipupi72{\*\blipuid b6b0b1b2b2eba5eae05d25da145947cc}0e220000000100b001b7001102ff0c00ffffffff000100000000000001b7000000b000000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800380000000000b001b80000000100b001b70000000100b001b7000115e200011ffffb0006300600c0000003fd000060fc0018e200043fff80000cfe0006300600c0000003fd000060fc0018e20004380380000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0019e20004300180000cfe0007300600c00000030cfe000060fc0019e20004300180003ffe0007300600c00000030cfe000070fc001ce2001838038381bf0ffc00300600c7fc1ff30c0ff800787fc1ff00001ce200183fffc7c18c1ffe00380600cfff3ff30c1ffc007cffe3ff80001ce200183fffe7c18c1c0e003c0600cfff38030c1c1c007ce0e38180001ce200183f00e7c18c1806003e0600ce0730030c180c007cc0630180001ce200183e0067c18c1806003e0600cc0330030c1800007cc0630180001be200153e0067c18c1c0e003e0600cc033003ff9800007cc063fe001ce200183e0067c18e1ffe003e0600ce033803ff9ff8007ce0638000001ce200183e0067c18f1ffc003e0600cf033c03e38ffc007cf063c0000020e7000010fd00183e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d18003fc0003e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d180030c0003e0067818f9f00003e0600cf833e03e1807c007cf863e0000022e8001e030c3830c0003e0067018f9f00003e0600cf833e03e1807c007cf863e1800022e8001e060cfc30c0003e0066018f9f06003e0600cf833e03e1987c007cf863e1800022e8001e0c07cc3fc0003f00e6038f9f06003f0f01cfc73e03e1987c007cf863e18e0022e8001e1807063800003fffe7ff8f9ffe003fffffcfff3e03e19ffc007cf863ff8e0022e8001e3807023800001fffc3ff870ffc001fffff87fe1c01c187f800387061ff0e000fe800047c030338c0fd00010380ed000fe80004ce03c13fc0fd00010180ed0012ec00070200000187c1e180fc00010180ed0013ee000801480020000303e1f0fb00010180ed0015ef000930140024c0000001f0f0fc000203ff80ed0014ef000438e0000043fe0001f8f0fc000103ffec000eef00087b01ec02678000007ce4000eef00083c7a00201f8000003ce4000ff000050733e0000207fe00001ce4000cf0000607c7f80001610ce1000cf00006079e01090092dce1000cf00006033c8832041c7ce1000cf0000646e8004000823ce1000cf00006fddd20402005d0e1000df00007fbf5c4801040ccc0e2000df00007f7f13080120967e0e2000df000072f8121801020b2e0e2000df000075f7e8880108af1c0e20011f1000b07be65404032012880000262e50011f1000b07be85c26020457c80002777e50012f1000c077cf93000c1029c5c0077ff30e60012f1000c017b0d848a08278e7c003f9f70e60012f1000c02fc02d0100018ef280771e1e0e60012f1000c02f402c40001201f3007fdff76e60012f1000c1ce801008096341f9003afbdbee60012f1000c1de801626b1e4c0d9116fbf01ee60012f1000c3de8018180ecdc0f973dffedece60012f1000c39e80116003f5e0bcf3bf9680ce60013f1000d0bc4026c401f5f0bce1ff7656780e70013f1000d0bc403f8700fafd1cc1f9c1d9f80e70012f1000c0bc30fdbe067e7d3c873e3e063e60012f1000c73cefbe73e33f867e4ffc7f35fe60013f1000df3cfff22ff1bf7bde4dfaff9adc0e70013f1000d73dfe746ff99ffffe7ef0ff9e1c0e70013f1000d17d7ffc5ffddecece7edeff9fd80e70012f1000c17feff45ffcdfedfe1e80ffa3fe60012f1000c17afdbc5ffcdebffe0e56ffb7fe60013f1000d67b9ffc57fcdffffe17d87f1ddc0e70013f1000df7fbff457f5debede7e061e279c0e70012f1000cf3c17a46be99e8ffe7ff500f7ee60012f1000c73cbfe23453adf47e53dadadbee60012f1000c13e3ff21be33bfcfe4df400337e60012f1000c0bc87f908065ffa3cefdededefe60012f1000c0bc1879800cf7f2bcbfff89be8e60012f1000c19f2018c03deff53c1ffed77f8e60012f1000c79f251860fbcff97caf37edfbce60012f1000c7ce440c180fafff798fde9677ce60012f1000c3cb480807ff0fff397867f5f80e60012f1000c04f400b000297fe786013dafc0e60012f1000c0274008040d87fe72000b7fec0e60011f1000b0e7a012000013fcf0000d2e6e50011f1000b0d2e01301f160f0e45804ae0e50011f1000b3f1d86e060c0e01c79404be0e50011f1000b6c9178c0c1e0021cfd8055e0e50011f1000b3d2ac05081f16238fdb04dc0e50011f1000b2c46370101f980703c52d680e50011f1000b1466cec103f880703faceae0e50011f1000b33f339a103f804e47fe9f2f0e50011f1000b35f1870107f841cf7f86c970e50012f2000c07ebe0c68107f8039b7fff9560e50012f2000c06f86321808ff00f257fffed40e50012f2000c0703e79800dfe31e06bfffdf60e50012f2000c03afffc6007fc078c7dffa50b8e50011f1000be7ffc3801f01e5f78ffe84b8e50014f4000ee000002fe7e080000388ffdfff36b8e50015f5000f0178000077e37210003c18ffa7e598a0e50015f5000f021c00009fc6e00519c07cfff7efc2a0e50015f5000f030e0001bc03c23000039fffc7d864a0e50015f5000f03070002febde506023f0ffff5a016b8e50015f5000f01830002747cf01f0b850fffcc6808b8e50015f5000f01c18003827e84320f8fffffc4d00fb8e50015f5000f40e10000027f900007cdffff9c9c07a0e50015f5000f60718000027ffd2a2fff7fff8eb80fa0e50015f5000f703f00000366ef2e3fffbfff2fa80720e50015f5000f780a000003fdffdc3ffffffe9f980738e50015f500005cfe000b01f9ffe7de7f5ffc3ff00f78e50015f500000efe000b01ffdff6fe3ff7f2ff400f70e50016f6001010072000000e5ffffffc1fff55ff201e40e50016f600101803e0000007fde7ff6c1ffff3ff187e40e50016f600101c01c0000007bf5f7ffc1ffd5ffebffef0e50016f600101e0180000006fdadbffc1ffffff117fcf0e50016f600010701fe000b02dbbadffb3fffffe45afd60e50014f600010380fe000307ffc07ffdff02fe1679e40016f700020701c0fe00031ffe3f7ffdff03c1aafb80e50017f700020bc0f8fe000439f77fafeffeff03bcd6f3c0e50017f7000210e070fe00031d5dff9ffeff04fd5b4bf780e50016f70002187060fe000a0c78ffdfeffcfffeeda5ece40016f700021838c0fe000a077fffdfde78f1fec0a3dce40015f700010c18fd000a0dfdffdfce38e1f900239ee40015f700010e0cfd000a1c007f9f1e0003a1c02736e40015f700010708fd000a39edffaf180001e3c02660e40016f8000240038cfd000a3c081e3280ffe013d84cf0e40016f80002c001f8fd000a0f6560f10f01fe07dcc978e40016f80002c00050fd000a039d9df03ba60f8385b330e40015fa000201e0e0fb0009026061f1fedfe6601e4fe30015fa0002021160fb0009065f5e33fdefd3d8599fe30015fa0002021860fb0009062dbc07ff1769241a67e30015fa0002821830fb00090f81ff1ff0f7fd7f09c0e30016fb000301860c30fb00090e6dff3ffb5ffd1d87e0e30016fc00040103830c30fa00086932fff9b7fd4ec3e0e30016fc00040102c30c18fa00087562fde7b7f97fe3c0e30015fc00040380c3041efa0007fde1fefdebfa2f71e2001909081e0207800380c18438fa00081af9c1fdadf67ff0b8e30019091833060cc00580618c40fa000802fb98df2e0feff8fce300180838210e084001c060ccf900080397787d45fbfff87ce3001808586196186000c06030f900080306f03ba007f83c38e3001707186186186000c030f80008030ef03f2a00b01e30e3001707186186186000e03cf80008034ef03c9fc1e40e10e300170718618618600060e0f8000801dee0386037ca071be300150618618618600068f600075e7039800fdc071fe300160618618618600070f7000803bf3c7a4003d8078fe300160618210608400080f700081fbf9ef48009d4078ce30014041833060cc0f500080fbfc18b8002db0788e30014047e1e1f8780f5000806bfff730f0aee0f8ce3000ff00009035fffe73fc0729f4780e4000ff00009017ffdce7fe6783fc780e4000ef00008037efbcc7fe2bfffc7e3000ef00008077fbfacfff43fffc6e3000ef000083f7fff5cfff0bfffc6e3000ff000093f7fffdcfffb3fffc380e4000ff00009077effecfff02effc380e4000ff00009037fffac7ff2bfffc780e4000ff00009017f83ee7ff83ffdc780e4000ef00008017f3dd63fc5fc3fc4e3000ef00008037e06f60f81710fc4e3000ef000080fbc037b0028e6e78ee3000ef000081fbc01798005e7178fe3000ef000080ebc0154c0214c3b8fe3000ef0000801bc017a702ad4938fe3000def00075c025d900c580318e3000def00075e00fe6030c80310e3000ef0000801cf01eb9fc8e80618e3000ef0000801ef837e000020063ce3000ef0000803e7fcfbbe12b00c3ce3000ef0000803d7cfebc1e14c3c7ce3000def00071bbfdf808057f8c8e3000def000719ff9700440ff080e3000def000705ff6c002153f180e3000def000706ffbe000217e3c0e3000def00071a7daa000841c3e0e3000def00073f367400081b86c0e3000def0007389cfe00108f0c40e3000bee0005476b0004541ce2000bee0005b32a8080187ee2000bee0005f8e1000060dee2000cef000601c63b94c38384e2000cef000601830e40140780e2000cef00060103c0e08019c0e2000bee000503b80200f0c0e2000aee00040714800f28e1000aee0004041d6d9a10e10008ed0002082307e00008ed00020c08c2e0000000a0008f00a0008300ff}\par}}}{\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\b\fs16 \hich\af4\dbch\af4\loch\f4 Limited Warranty }{\fs16 \hich\af4\dbch\af4\loch\f4 - Subject to the below stated limitations, Byte Works Inc. hereby warrants that the programs contained in thi\hich\af4\dbch\af4\loch\f4 s unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from date of purchase. Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantabi\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 ity or its fitness for any particular purpose. The limits of warranty extend only to the original purchaser.\par \par \hich\af4\dbch\af4\loch\f4 Neither Byte Works Inc. nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleg\hich\af4\dbch\af4\loch\f4 ed to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par \par \hich\af4\dbch\af4\loch\f4 To obtain the warranty offered, the enclosed purchaser registratio\hich\af4\dbch\af4\loch\f4 n card must be completed and returned to the Byte Works Inc. within ten (10) days of purchase.\par \par }{\b\fs16 \hich\af4\dbch\af4\loch\f4 Important Notice }{\fs16 \hich\af4\dbch\af4\loch\f4 - This is a fully copyrighted work and as such is protected under copyright laws of the United States of America. According to these laws, cons\hich\af4\dbch\af4\loch\f4 umers of copywritten material may make copies for their personal use only. Duplication for any purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual dama\hich\af4\dbch\af4\loch\f4 g\hich\af4\dbch\af4\loch\f4 es, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par \par \hich\af4\dbch\af4\loch\f4 This product is sold for use on a }{\i\fs16 \hich\af4\dbch\af4\loch\f4 single computer}{\fs16 \hich\af4\dbch\af4\loch\f4  at a single location. Contact the publisher for information regarding licensing for use at multiple-workstation or multiple\hich\af4\dbch\af4\loch\f4  computer installations.\par \par \hich\af4\dbch\af4\loch\f4 ORCA/M is a trademark of the Byte Works, Inc.\par \par }{\b\fs16 \hich\af4\dbch\af4\loch\f4 Apple Computer, Inc.}{\fs16 \hich\af4\dbch\af4\loch\f4  MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.\hich\af4\dbch\af4\loch\f4  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITTED BY SOME STATES. THE ABOVE EXCLUSION MAY NOT APPLY TO YOU. THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS. THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE.\par \par \hich\af4\dbch\af4\loch\f4 ProDOS is a \hich\af4\dbch\af4\loch\f4 copyrighted program of Apple Computer, Inc. licensed to Byte Works, Inc. to distribute for use only in combination with ORCA/Pascal. Apple software shall not be copied onto another diskette (except for archive purpose) or into memory unless as part of the\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 execution of ORCA/Pascal. When ORCA/Pascal has completed execution Apple Software shall not be used by any other program.\par \par \hich\af4\dbch\af4\loch\f4 Apple is a registered trademark of Apple Computer, Inc.\par \par \hich\af4\dbch\af4\loch\f4 Program, Documentation and Design\par \hich\af4\dbch\af4\loch\f4 Copyright 1984, 1985, 1986\par \hich\af4\dbch\af4\loch\f4 The Byte Works,\hich\af4\dbch\af4\loch\f4  Inc.\par }\par \par \sect \sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\sectdefaultcl {\headerl \pard\plain \s16\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af7\dbch\af4\loch\f7 MON+ Symbolic Debugger}{\par }}{\headerr \pard\plain \s16\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \hich\af7\dbch\af4\loch\f7 MON+ Symbolic Debugger\par }}{\footerl \pard\plain \s19\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs20\fs20 \hich\af7\dbch\af4\loch\f7  PAGE }}{\fldrslt {\cs20\fs20\lang1024 \hich\af7\dbch\af4\loch\f7 14}}}{\fs20 \par }}{\footerr \pard\plain \s19\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\field{\*\fldinst {\cs20\fs20 \hich\af7\dbch\af4\loch\f7  PAGE }}{\fldrslt {\cs20\fs20\lang1024 \hich\af7\dbch\af4\loch\f7 1}}}{\fs20 \par }}\pard\plain \s17\qc\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\b\i\fs36 \hich\af4\dbch\af4\loch\f4 MON+\par \hich\af4\dbch\af4\loch\f4 6502/65CO2 Symbolic Debugger\par }\pard \s17\qj\widctlpar\adjustright \par \par \par \par \par MON+ is a powerful debugging tool for tile ORCA environment. It provides a complete set of memory examination and manipulation commands, arithmetic and logical functions, a disassembler, a miniassembler and, as its most powerful feature, a step and trace facility that includes the ability to set and clear break points as will as have free-running subroutines. The disassembler, the mini-assembler, and the tracer all support a symbol table. Entries can be either manually-defined, or included as data tables in the object code of the program being debugged, and copied automatically into the symbol table. Likewise, the standard 65CO2 instruction set is supported by these three functions, although the tracer will only work properly if there is a 65CO2 processor installed in the machine.\par \par Each of the MON+ commands is explained in detail below. In the description that follows, the meta-symbol {\i \hich\af4\dbch\af4\loch\f4 adr} (address) stands for any hexadecimal number in the range $0000..$FFFF. A user-defined symbol (see SYMBOL below) may be used anywhere adr may be used, provided the symbol is preceded by a @ sign. The meta-symbol {\i \hich\af4\dbch\af4\loch\f4 byte} stands for any hexadecimal number in the range $00.41717. Square brackets around command parameters indicate that the bracketed parameter is optional.\par \par The meta-symbol {\i \hich\af4\dbch\af4\loch\f4 filename} can be replaced by any valid ProDOS file name or full or partial path name.\par \par \pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid Using MON+\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Before using MON+, it must be installed in the utility subdirectory. This is the same directory that contains all of the ORCA utilities, such as PEEK. If, for example, you are using the default configuration, you would copy MON+ to the Utilities disk using the command\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid COPY /MONPLUS/DEBUG /UTILITY\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par The next step is to enable the DEBUG command using the ORCA COMMANDS utility. The reference manual for ORCA explains how to do this. Add DEBUG as a utility command. After installing MON+, you can execute it from any directory by typing {\fs18 \hich\af6\dbch\af4\loch\f6 DEBUG}.\par \par The program's version number and copyright notice will be displayed, and the cursor will appear next to the prompt (which is the + symbol). Any of the MON+ commands may then be entered; for example, to display memory in the range $2000 through $201F, enter the command:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid LIST 2000.201F\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Most commands may be shortened to one or two characters; the above example could have been shortened to:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid L 2000.201F\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par The commands are checked in the order in which the HELP command lists them, and the first one which matches the entered command is used. Extra letters are ignored. The above example could be lengthened to:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid LISTLESSLY 2000.201F\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par and it would still have done the same thing.\par \par \pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid Using Break Points\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par When the SETB commands is used to set a break point, MON+ stores the break point address away in its break point table, along with the operation code at that address, and replaces the operation code with a BRK instruction. When control passes to that address, the BRK instruction is treated like an interrupt; a routine in the Apple F8 Monitor ROM saves the contents of tile 6502 registers, and passes control to MON+'s break point handier (via the hook at $3FO). MON+ fixes the stack pointer, tells the user where the break occurred, and checks to see if that address is in its break point table. If it is, MON+ replaces the original operation code, executes the instruction, replaces the BRK instruction, and enters the trace mode. If the BRK instruction isn't in the break point table, MON+ will simply wait for the next command.\par \par To use a break point, it's necessary to have both the program being debugged and MON+ in memory at the same time.\par \par While debugging a program using break points, it's most convenient to have both an assembly listing of the program, as well as a link editor listing, which shows where each subroutine starts. It is then a simple matter to add the relative address within each routine to the absolute address of the start of the machine (using MON+'s ADD instruction) to get the absolute address of an instruction within a routine. Here's a quick and easy method for getting MON+ and a program into memory at the same time, with MON+ in control:\par \par \pard \s17\qj\fi-360\li1080\widctlpar\adjustright 1)\tab Type DEBUG.\par \par 2)\tab Use MON+'s BLOAD command to load in the program.\par \par 3)\tab At this point the program can be listed, break points set, symbols entered, and the program traced. All of MON+'s other features may be used to debug the program as well.\par \par 4)\tab When a session is done, use the QUIT command to return to the ORCA monitor.\par \pard \s17\qj\widctlpar\adjustright \par If it's more convenient, it isn't always necessary to have the most recent listing, although obviously the more recent the listing, the better. Use the FIND command to search for a series of bytes in the vicinity of a target area, and then use LIST to pinpoint the actual addresses or code in question.\par \par Note that when a break point is encountered, the break point handler will execute the instruction and stop {\i \hich\af4\dbch\af4\loch\f4 after} the break point, not before. For example, suppose that in the following piece of code:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid 3A06: LDA #6\par 3A08: STA $3A74\par 3A0B: JMP $3A05\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par a break point is placed at the STA instruction at $3A08. When that break point is encountered, the STA instruction is executed, MON+ displays the instruction and the registers, enters the TRACE mode automatically, and then waits for a key press. At this point, since the STA instruction has been executed, location $3A74 contains a 6.\par \par A more sophisticated way of dealing with break points - and one which can all but eliminate the need for a current program listing for reference - is to use symbols to refer to addresses; for an explanation of symbols, see the SYMBOL and GETSYM commands described below.\par \par \pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid Memory Usage\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par MON+ loads into memory at $9000. Except for the bottom thirty-two bytes of the stack, ($100 - $11F), MON+ does not directly use any memory below $9000. It "borrows" page zero memory by swapping a copy of user page zero and MON+'s page zero.\par \par \pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid Input and Output\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Like most debuggers, MON+ uses the input and output routines provided by the operating system. This makes it difficult to trace screen output of keyboard input operations. As a result, you should always execute subroutines that will do screen output or keyboard input at full speed, using the GO or JUMP commands.\par \par Disk input and output presents another problem. Disk routines are very time critical, and cannot be traced using a debugger. It is best to always execute calls to ProDOS at full speed, again using the GO command. Unless you over ride MON+ it will automatically execute any JSR to either ProDOS or the ORCA/HOST shell at full speed.\par \par \pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid MON+ Commands\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid ADD\tab [adr1[adr2[adr3 ... ]]]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the sum of the operands (adr1 + adr2) in hex and, in parentheses, decimal. Zero or more operands may be specified.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid AND\tab [adr1[adr2[adr3 ... 13]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the logical (bitwise) AND of the operands. Zero or more operands may be specified.\par \par \pard\plain \s22\qj\keepn\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid ASM adr\par \pard\plain \s17\qj\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par \pard \s17\qj\widctlpar\adjustright Enters the mini-assembler. The current address (set if adr is specified) is displayed, followed by a colon. The miniassembler is ready for input. A RETURN exits the mini-assembler.\par \par If you enter something on the command line other than a valid 65CO2 instruction mnemonic, MON+ will try to use it as a command. For example, you can still list memory while assembling a program.\par \par The mini-assembler's syntax is slightly different from the standard 6502 syntax in that no operands are specified for the accumulator addressing mode. ROR means rotate right accumulator, but ROR A means rotate right memory address $0A. All numbers in the mini-assembler are interpreted as hexadecimal, so the leading dollar sign ($) is optional. Symbols may be used wherever an address is expected, provided they have been previously defined and are preceded with the @ sign. All 65CO2 mnemonics and addressing modes are supported.\par \par An example of the use of the ASM command, with symbols, is shown below. The symbol ABC must have been defined previously.\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid +ASM 2000\par 2000: LDA 5000\par 2003: STA @ABC \par 2006:\par +\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par The mini-assembler was exited by typing RETURN in response to the 2006: prompt, causing the MON+ prompt to re-appear.\par \par There are two important predefined symbols, @PRODOS and @ORCAHOST. These are the locations of the ProDOS entry vector ($BFOO) and the ORCA/HOST entry vector ($OOFD). MON+ handles these symbols in a special way. Whenever a JSR to one of the symbols is assembled, MON+ automatically leaves three bytes after the JSR to give you room to add the ProDOS or ORCA operation code and a pointer to the parameter table.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid BLOAD\tab filename\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Loads the binary file specified by {\i \hich\af4\dbch\af4\loch\f4 filename}. The file is loaded at its default address. An error message is generated if {\i \hich\af4\dbch\af4\loch\f4 filename} isn't found, or if it's not a binary file. Needless to say, if a file is loaded on top of either MON+ ($9000 - $BFOO) the operating system ($D000 - $FFFF), or ORCA ($800 - $lFFF) the system will crash.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid BRUN\tab filename\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par BLOADs {\i \hich\af4\dbch\af4\loch\f4 filename}, then does a JSR to the file's load address.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid CONTINU\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par CONTINU is a special form of the JUMP command that continues execution from the last executed location. For example, after tracing the program with the TRACE command, you might CONTINU program execution at full speed.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid CAT\tab [filename]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays a disk catalog. {\i \hich\af4\dbch\af4\loch\f4 Filename} is optional. If specified, it must be the name of a directory file; that directory will be cataloged.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid CLRB\tab adr\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Clears the break point specified at {\i \hich\af4\dbch\af4\loch\f4 adr} and displays a list of the remaining break points. Beeps if there is no break point at {\i \hich\af4\dbch\af4\loch\f4 adr}. If {\i \hich\af4\dbch\af4\loch\f4 adr} is not specified, the routine displays the current break points. If {\i \hich\af4\dbch\af4\loch\f4 adr} is specified, and there is a break point at {\i \hich\af4\dbch\af4\loch\f4 adr}, the routine removes the break point and restores the original operation code at {\i \hich\af4\dbch\af4\loch\f4 adr}.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid CLRSYM\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par This command clears the symbol table, setting it back to its original state. It does not remove the two special symbols, @PRODOS and @ORCAHOST. Since the command is potentially dangerous, you will be asked if you are sure about the choice before the table is cleared.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid COMPARE  adr1.adr2  adr3\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Compare the contents of the memory range {\i \hich\af4\dbch\af4\loch\f4 adr\hich\af4\dbch\af4\loch\f4 1} through {\i \hich\af4\dbch\af4\loch\f4 adr2} with a range of the same length, starting at {\i \hich\af4\dbch\af4\loch\f4 adr3}. If any byte does not match, the address within the first range is displayed, along with the differing bytes. If any of the operands are missing, an error message is displayed.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid CONFIG\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par CONFIG allows the selection of two operational "preferences." In response to the CONFIG command, two prompts are displayed:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid Display stack? N\par \par Pause on JSR? Y\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par The default responses are indicated in boldface; to accept them, simply press RETURN. The Display Stack option enables or disables the printing of the values of the top eight stack entries during tracing, causing the trace for each instruction to span two lines; by disabling this feature, only a single-line instruction disassembly and register dump is listed. The Pause on JSR? option enables or disables a trace. With pause enabled, rather than continuing directly to the next instruction, a key press must be made. At this point, the subroutine may be executed as "free-running" -- that is, not traced, by pressing the R key. See the description of the TRACE command for details.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid EOR\tab [adr1[adr2[adr3 ... ]]]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the logical (bitwise) exclusive OR of the operands. Zero or more operands may be specified.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid FIND\tab adr1.adr2  list\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Find and display all occurrences of list in the memory range {\i \hich\af4\dbch\af4\loch\f4 adr1} through {\i \hich\af4\dbch\af4\loch\f4 adr2}. {\i \hich\af4\dbch\af4\loch\f4 List} may be composed of hex bytes or ASCII strings within quotes; use double quotes for high order bit on, single quotes for high order bit off.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid FILL\tab adr1.adr2  byte\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Fills the memory range {\i \hich\af4\dbch\af4\loch\f4 adr1} through {\i \hich\af4\dbch\af4\loch\f4 adr\hich\af4\dbch\af4\loch\f4 2} with die value {\i \hich\af4\dbch\af4\loch\f4 byte}. An error message is generated if any operand is missing,. Because it is a potentially dangerous command, it responds with an 'Are you Sure' prompt. Enter Y to execute, N to cancel.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid GO [adr]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Calls {\i \hich\af4\dbch\af4\loch\f4 adr} as a subroutine (performs a JSR to {\i \hich\af4\dbch\af4\loch\f4 adr}). If {\i \hich\af4\dbch\af4\loch\f4 adr} is not specified, GO uses the current valued of the program counter, stored at $3A and $3B. When an RTS is encountered, GO returns control to the MON+ command handier.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid GETSYM adr\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Copies symbol table entries from memory (presumably, from a loaded code file containing them), starting at {\i \hich\af4\dbch\af4\loch\f4 adr}. The format of the symbol table entries is:\par \par \pard \s17\qj\li720\widctlpar\tx2160\adjustright bytes 1..10\tab Label name, with high bit of each character set\par bytes 11..12 \tab Address, in low-high order\par \pard \s17\qj\widctlpar\adjustright \par A list of entries may be placed in memory; the end of die list is indicated by a zero. The GETSYM command is intended to provide a simple yet effective mechanism for transferring symbolic values from a program into the MON+ symbol table. There is no direct mechanism for transferring all global labels from an object module into the MON+ symbol table; instead, labels whose value is desired for debugging a given subroutine or series of routines are manually entered into the program source code in the following way:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid ABC\tab START\par XYZ\tab GEQU\tab $1234\par \tab LDA\tab #5\par \tab STA\tab XYZ\par \tab RTS\par \tab END\par \par SYMBOLS DATA\par \pard \s18\qj\fi720\li720\widctlpar\adjustright DC\tab C'ABC\tab ',A'ABC'\par DC\tab C'XYZ\tab ',A'XYZ'\par DC\tab H'00'\tab INDICATES END OF TABLE\par END\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par If the address of SYMBOLS is known (from the global symbol table listing of the link editor - in this example, suppose the value is $2006), and the code file has been previously loaded into memory from MON+, a GETSYM command of the form\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid GET 2006\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par will copy the label names and their values into the MON+ symbol table.\par \par Now if a TRACE command, for example, is used on the short program listed above, symbols will appear in disassembled trace:\par \par \pard\plain \s18\qj\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid 2000: A905   ABC    LDA  #$05  A=05 X=00 Y=D8 P=30 S=83\par 2002: BD3412 STA    XYZ        A=05 X=00 Y~D8 P=30 S=83\par 2005: 60     RTS               A=05 X=00 Y=D8 P=30 S=83\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Symbols may also be entered manually after a GET, and multiple GETs may be used, with the same or different address; if a label with the same address as an existing label is entered, a Duplicate Symbol error message is displayed, and the new entry is skipped. For manual symbol entry, see SYMBOL.\par \par There is a macro file on the MON+ disk called M6502.MONPLUS. It contains a macro called SYM, which simplifies the inclusion of symbol tables in a source program. Its usage is:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid SYM\tab ABC\par SYM\tab XYZ\par DC\tab H'00'\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par This will create a symbol table identical to the one indicated above; note that a zero must still be placed at the end of the table.\par \par MON+ starts out with two symbols already defined. ProDOS is defined as $BFOO, and ORCAHOST is defined as $OOFD. These special symbols cannot be deleted. They are marked in the symbol table with a special P flag.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid HELP\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays a listing of all of the available MON+ commands.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid JUMP\tab (adr]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Transfers control to {\i \hich\af4\dbch\af4\loch\f4 adr}; essentially, does a JMP to {\i \hich\af4\dbch\af4\loch\f4 adr}. If {\i \hich\af4\dbch\af4\loch\f4 adr} is not specified, it uses the current value of the program counter, stored at $3A and $313. JUMP is useful for continuing a program in real time after a break point.\par \par \pard\plain \s22\qj\keepn\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid LIST adr | LIST adr1.adr2 | LIST | LIST adr ln\par \pard\plain \s17\qj\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par \pard \s17\qj\widctlpar\adjustright Disassembles a machine language program. If a range is specified, the entire memory range is disassembled. If {\i \hich\af4\dbch\af4\loch\f4 adr}, {\i \hich\af4\dbch\af4\loch\f4 adr1.adr2} or {\i \hich\af4\dbch\af4\loch\f4 ln} are not specified, the next twenty instructions are disassembled. If In is specified, the next In instructions are disassembled. 65CO2 operation codes will be disassembled when encountered. Disassembly of JSR instructions to either of the special labels (@PRODOS or @ORCAHOST) will display the operation code and parameter table address in a special format in the operand field.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid LABEL\tab [adr label]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par LABEL is another name for the SYMBOL command. See the SYMBOL command for a description of its use.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid MEM adr | MEM adr1.adr2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays contents of memory in both hexadecimal and ASCII. If only one address is specified, the contents of the address are displayed. If a range is specified, the contents of that memory range are displayed. It is an error if {\i \hich\af4\dbch\af4\loch\f4 adr} is missing. (Note the description of the shorthand notation described immediately below.)\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid MEM adr [list]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Store {\i \hich\af4\dbch\af4\loch\f4 [list]} into memory starting at {\i \hich\af4\dbch\af4\loch\f4 adr}. {\i \hich\af4\dbch\af4\loch\f4 [list]} can be composed of hexadecimal bytes or ASCII strings within quotes (double quotes for high order bit on, single quotes for high order bit off).\par \par For example:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid MEM 2000 A9 'Z' 20 ED FD 'A long string'\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par There is a shorthand notation for either version of the MEM command: the arguments of the MEM command, such as a number range\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid 2000.20FF\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par may be entered without being preceded by an explicit MEM command; MON+ defaults to interpreting commands as MEM only if numeric arguments are provided.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid MOVE adr1.adr2 adr3\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Copy the memory range {\i \hich\af4\dbch\af4\loch\f4 adr1} through {\i \hich\af4\dbch\af4\loch\f4 adr2} to memory starting at {\i \hich\af4\dbch\af4\loch\f4 adr3}. The routine can move a block of memory up or down, with or without overlaps, with no side effects. An error message is displayed if any of the operands are missing. Because it is a potentially dangerous command, it responds with an 'Are you sure?' prompt. Enter Y to execute, N to cancel.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid NEGATE\tab adr\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the two's complement (negative) of {\i \hich\af4\dbch\af4\loch\f4 adr}. Extra operands are ignored.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid NOT\tab adr\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par The one's complement of the operand is displayed. Additional parameters are ignored.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid OR\tab [adr[adr2[adr3 ... ]]]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the logical OR of the operands. Zero or more operands may be specified.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid PAGE\tab [adr]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the contents of an entire memory page, starting at {\i \hich\af4\dbch\af4\loch\f4 adr}. If {\i \hich\af4\dbch\af4\loch\f4 adr} is missing, the routine continues displaying the next page.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid PREFIX filename\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Set the default prefix to {\i \hich\af4\dbch\af4\loch\f4 filename}.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid PROFF\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Turns off the printer. Subsequent output is sent to the screen.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid PRON\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Turns on the printer. Subsequent output is sent to the printer.\par \par \pard\plain \s22\qj\keepn\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid QUIT\par \pard\plain \s17\qj\keepn\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par \pard \s17\qj\widctlpar\adjustright Returns to the ORCA monitor via an RTS. It also restores tile BRK vector (if it was changed by SETB).\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid READ\tab blockl[.block2] \tab adr[,SSlot,Ddrive]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Reads 512 byte disk blocks starting with {\i \hich\af4\dbch\af4\loch\f4 blockl} and continuing to {\i \hich\af4\dbch\af4\loch\f4 block2} into memory starting at {\i \hich\af4\dbch\af4\loch\f4 adr}. Because the command is potentially dangerous, it responds with the 'Are you sure?' prompt.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid REG\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the current 6502 register values (A, X, Y, Status and Stack Pointer). Their values may be changed as each register is displayed in turn. Press RETURN to leave the contents alone, or enter a new hex value to change the contents of the register being displayed.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid SETB\tab [adr] \tab [label]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Sets a break point at adr and displays a list of all break points. If adr is missing, the routine simply displays the break points. If adr is specified, it is added to the list of active break points. The operation code that was at adr is replaced with a BRK instruction; it then modifies the BRK vector to point to the MON+ break point handler, after first saving the original value.\par \par The optional label parameter allows a symbolic name to be assigned to the break point as it is defined.\par \par SUB\tab [adr1[adr2[adr3\par \par ... I]]\par \par Displays the difference of the operands ({\i \hich\af4\dbch\af4\loch\f4 adr1} - {\i \hich\af4\dbch\af4\loch\f4 adr2} ... ). Zero or more operands are allowed. If more than two operands are supplied, tile second through tile last are all subtracted from the first.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid SYMBOL  [adr label]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Associates {\i \hich\af4\dbch\af4\loch\f4 adr} with the symbol label. If {\i \hich\af4\dbch\af4\loch\f4 adr} is already in the symbol table replaces that entry with {\i \hich\af4\dbch\af4\loch\f4 label}, but leaves the break flag intact. If {\i \hich\af4\dbch\af4\loch\f4 label} is already assigned to another address, an error message is displayed and the command is ignored. If no operands are specified, the entire symbol table is displayed.\par \par Once a symbol has been defined, it may be used anywhere an adr may be used, including within the mini-assembler. For example, if MYLAB is associated the address $2000 (SYM 2000 MYLAB), these two statements produce identical results:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid LIST 2000\par LIST @MYLAB\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Or from the mini-assembler:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid 3000: LDA @MYLAB\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par or like so:\par \par \pard\plain \s18\qj\fi720\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid ADD 10 @MYLAB\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par The result is $2010.\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid TRACE\tab [adr]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Executes (and traces) code starting at {\i \hich\af4\dbch\af4\loch\f4 adr}. If the operand is missing, it executes the instruction at the location of the current program counter stored at $3A and $313. When this command is invoked, the instruction a {\i \hich\af4\dbch\af4\loch\f4 adr} is executed, and the instruction mnemonic and the contents of the register are displayed. The following single-key commands are active during a trace:\par \par \pard \s17\qj\fi-1080\li1440\widctlpar\adjustright SPACE\tab single steps one instruction, then pauses.\par \par RETURN\tab traces quickly until a key is pressed.\par \par F\tab causes a fast trace (turns off display) until and RTS is encountered.\par \par R\tab executes a subroutine in real time (only available after a JSR is displayed; causes a fast-trace if another instruction is displayed.\par \par C\tab continues the program in real time (no trace).\par \par ESC\tab returns to the MON+ command handler.\par \pard \s17\qj\widctlpar\adjustright \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid VECTOR\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Displays the current RESET, BRK and lRQ vectors. Their values may be changed as each vector is displayed in turn. Press RETURN to leave the contents alone, or enter a new hex value to change the contents of the register being displayed. (Use with caution!)\par \par \pard\plain \s22\qj\widctlpar\adjustright \fs20\loch\af6\hich\af6\dbch\f4\cgrid WRITE\tab block1[.block2]  adr[,Sslot,Ddrive]\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \par Writes the disk blocks starting with {\i \hich\af4\dbch\af4\loch\f4 block1} and continuing to {\i \hich\af4\dbch\af4\loch\f4 block2} from memory starting at {\i \hich\af4\dbch\af4\loch\f4 adr}. Optional slot and drive parameters may be specified. Because the command is potentially dangerous, it responds with the 'Are you sure?' prompt.\par \par \sect \sectd \pgnrestart\linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s17\qc\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\b\fs28 \hich\af4\dbch\af4\loch\f4 MON+ COMMAND SUMMARY\par }\pard \s17\qj\widctlpar\adjustright \par \pard \s17\fi-2880\li2880\widctlpar\tx1080\tx2880\adjustright ADD\tab [adr1[adr2[adr3 ... ]]]\tab addition: {\i \hich\af4\dbch\af4\loch\f4 adr1} + {\i \hich\af4\dbch\af4\loch\f4 adr2}\par AND\tab [adr1[adr2[adr3 ... ]]]\tab logical and: {\i \hich\af4\dbch\af4\loch\f4 adr1} AND {\i \hich\af4\dbch\af4\loch\f4 adr2}\par ASM\tab adr\tab enters mini-assembler\par BLOAD\tab filename\tab load binary file into memory\par BRUN\tab filename\tab loads and runs binary file\par CONTINU\tab \tab continue program execution\par CAT\tab filename\tab displays catalog\par CLRB\tab adr\tab clear break point\par CLRSYM\tab \tab clear symbol table\par COMPARE\tab adr1.adr2 adr3\tab compare memory\par CONFIG\tab \tab configure debugger\par EOR\tab [adr1[adr2[adr3...]]]\tab exclusive or: {\i \hich\af4\dbch\af4\loch\f4 adr1} EOR {\i \hich\af4\dbch\af4\loch\f4 adr2}\par FIND\tab adr1.adr2 list\tab find {\i \hich\af4\dbch\af4\loch\f4 list} in memory range {\i \hich\af4\dbch\af4\loch\f4 adr1}-{\i \hich\af4\dbch\af4\loch\f4 adr2}\par FILL\tab adr1.adr2 byte\tab fill memory range {\i \hich\af4\dbch\af4\loch\f4 adr1}-{\i \hich\af4\dbch\af4\loch\f4 adr2} with {\i \hich\af4\dbch\af4\loch\f4 byte}\par GO\tab [adr]\tab execute code at {\i \hich\af4\dbch\af4\loch\f4 adr} (via JSR)\par GETSYM\tab adr\tab gets symbol table entries from memory\par HELP\tab \tab list commands\par JUMP\tab [adr]\tab execute code at {\i \hich\af4\dbch\af4\loch\f4 adr} (via JMP)\par LIST\tab adr1 [.adr2] [ln]\tab disassemble code\par LABEL\tab [adr label]\tab define label; same as SYMBOL\par MEM\tab adr1 [.adr2]\tab display or change memory byte (or range)\par MOVE\tab adr1.adr2 adr3\tab copy memory range {\i \hich\af4\dbch\af4\loch\f4 adr1} -{\i \hich\af4\dbch\af4\loch\f4 adr2} to {\i \hich\af4\dbch\af4\loch\f4 adr}\par NEGATE\tab adr\tab two's complement: 0 MINUS {\i \hich\af4\dbch\af4\loch\f4 adr}\par NOT\tab adr\tab one's complement: {\i \hich\af4\dbch\af4\loch\f4 adr} EOR #$FF\par OR\tab [adr1[adr2[adr3...]]]\tab logical or: {\i \hich\af4\dbch\af4\loch\f4 adr1} OR {\i \hich\af4\dbch\af4\loch\f4 adr2}\par PAGE\tab [adr]\tab display memory page\par PREFIX\tab filename\tab set prefix\par PROFF\tab \tab turns off output to the printer\par PRON\tab \tab turns on output to the printer \par QUIT\tab \tab re-enters ORCA monitor\par READ\tab blockl [.block2] adr[,S,D]  read disk blocks\par REG\tab \tab display/change 6502 registers\par SETB\tab [adr] [label]\tab set break point\par SUB\tab [adr1[adr2[adr3...]]] \tab subtraction: {\i \hich\af4\dbch\af4\loch\f4 adr1} - {\i \hich\af4\dbch\af4\loch\f4 adr2\par }SYMBOL\tab [adr label] \tab associates {\i \hich\af4\dbch\af4\loch\f4 label} with {\i \hich\af4\dbch\af4\loch\f4 adr} in symbol table\par TRACE\tab [adr]\tab trace program\par VECTOR\tab \tab display/change RESET, BREAK and IRQ vectors\par WRITE\tab block1.block2] adr[,S,D]  write disk blocks\par }