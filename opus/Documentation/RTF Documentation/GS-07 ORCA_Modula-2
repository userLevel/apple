{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 4528036d633c00027258}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 85580410046400027258}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 7b700000000000027258}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f21\fnil\fcharset2\fprq2{\*\panose 036d78d0005f001d7e70}Zapf Dingbats;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f23\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f25\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f26\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f27\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f28\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f34\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f35\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f37\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f38\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f40\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f41\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f42\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f44\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f45\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f46\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f47\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f48\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f49\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f50\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f51\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f52\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f53\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f55\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f56\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f57\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f58\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f60\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f61\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f62\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f63\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f64\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f65\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f66\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f67\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f68\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f69\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f78\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f80\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f81\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f82\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f86\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f87\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f88\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f89\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f90\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f91\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f92\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f93\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f96\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f97\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f98\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f99\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f100\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f101\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f102\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f103\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f104\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f105\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f106\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f107\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f108\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f109\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f110\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f112\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f113\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f114\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f115\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f116\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f117\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f118\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f119\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f121\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f122\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f123\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f124\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f125\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 4528036d633c00027258}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 85580410046400027258}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 7b700000000000027258}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f21\fnil\fcharset2\fprq2{\*\panose 036d78d0005f001d7e70}Zapf Dingbats;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f23\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f25\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f26\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f27\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f28\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f34\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f35\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f37\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f38\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f40\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f41\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f42\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f43\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f44\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f45\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f46\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f47\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f48\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f49\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f50\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f51\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f52\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f53\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f55\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f56\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f57\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f58\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f60\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f61\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f62\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f63\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f64\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f65\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f66\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f67\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f68\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f69\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f77\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f78\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f80\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f81\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f82\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f86\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f87\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f88\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f89\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f90\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f91\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f92\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f93\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f96\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f97\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f98\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f99\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f100\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f101\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f102\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f103\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f104\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f105\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f106\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f107\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f108\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f109\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f110\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f112\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f113\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f114\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f115\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f116\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f117\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f118\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f119\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f121\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f122\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f123\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f124\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f125\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \f4\cgrid \snext0 Normal;}{\s1\sb240\widctlpar\adjustright \b\f5\ul\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb120\widctlpar\adjustright \b\f5\cgrid \sbasedon0 \snext0 heading 2;}{\s3\li360\widctlpar\adjustright \b\f4\cgrid \sbasedon0 \snext0 heading 3;}{\s4\li360\widctlpar\adjustright \f4\ul\cgrid \sbasedon0 \snext0 heading 4;}{\s5\li720\widctlpar\adjustright \b\f4\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\s6\li720\widctlpar\adjustright \f4\fs20\ul\cgrid \sbasedon0 \snext0 heading 6;}{\s7\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 8;}{\s9\li720\widctlpar\adjustright \i\f4\fs20\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\li5040\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 8;}{\s16\li4320\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 7;}{\s17\li3600\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 6;}{\s18\li2880\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 5;}{\s19\li2160\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 4;}{\s20\li1440\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 3;}{\s21\li720\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 2;}{\s22\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 1;}{\s23\li2160\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 7;}{\s24\li1800\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 6;}{\s25\li1440\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 5;}{\s26\li1080\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 4;}{\s27\li720\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 3;}{\s28\li360\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 2;}{\s29\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 index 1;}{\*\cs30 \additive \sbasedon10 line number;}{\s31\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext31 footer;}{\s32\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext32 header;}{\*\cs33 \additive \fs16\up6 \sbasedon10 footnote reference;}{\s34\widctlpar\adjustright \f4\fs20\cgrid \sbasedon0 \snext34 footnote text;}{\s35\li5760\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f4\cgrid \sbasedon0 \snext0 toc 9;}{\*\cs36 \additive \sbasedon10 page number;}{\s37\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext0 Unnamed Style;}{\s38\ri960\sb160\sl280\slmult0\keep\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext38 1text;}{\s39\sl240\slmult0\widctlpar\adjustright \f6\fs20\cgrid \sbasedon0 \snext39 cv;}{\s40\qj\widctlpar\adjustright \f4\cgrid \sbasedon0 \snext40 Times Normal;}}{\*\revtbl {Unknown;}}{\info{\title ORCA/Pascal 2.0}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy25\hr12\min43}{\revtim\yr2000\mo10\dy25\hr12\min43}{\printim\yr2000\mo10\dy25\hr12\min32}{\version2}{\edmins1}{\nofpages377}{\nofwords104847}{\nofchars597632}{\*\company Byte Works, Inc.}{\nofcharsws733934}{\vern99}}\margl2160\margr2160\margt2880\margb2880 \facingp\widowctrl\ftnbj\aenddoc\hyphhotz0\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\fs20 \par }}{\headerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\tx450\tx720\adjustright \f4\cgrid {\b\fs72 \par \par }\pard \qc\widctlpar\adjustright {\b\i\fs72 ORCA/Modula-2}{\b\fs48\up20 \u8482\'aa}{\b\i\fs72 \par }{\b\i\shad\fs36 Version 1.0\par \par A Modula-2 Compiler\par and Development System \par for the\par Apple\~II}{\b\i\shad\scaps\fs28 GS}{\b\i\shad\fs36 \par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\b\fs36 \par Peter Easdown\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\fs36 Byte Works}{\fs20\up12 \u174\'a8}{\fs36 , Inc.}{\par 4700 Irving Blvd. NW, Suite 207\par Albuquerque, NM  87114\par (505) 898-8183\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f12 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \widctlpar\tx450\tx720\adjustright \f4\cgrid {\fs20 \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {Credits\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par }\pard \li2880\widctlpar\adjustright {\fs20 Modula-2 Compiler\par \tab Peter Easdown\par \par Development Environment\par \tab Mike Westerfield\par \tab Phil Montoya\par \par Documentation\par \tab Peter Easdown\par \tab Mike Westerfield\par }\pard \widctlpar\tx450\tx720\adjustright {\fs20 \par \par \par \par \par \par \par \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\fs20 Copyright 1993\par By The Byte Works, Inc.\par All Rights Reserved\par \par Copyright 1986,1987, 1989, 1991, 1993\par Apple Computer, Inc.\par All Rights Reserved\par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\fs20 \page }{\b\fs18 Limited Warranty}{\fs18  - Subject to the below stated limitations, Byte Works, Inc. hereby warrants that the programs contained in this unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from date of purchase.  Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose.  The limits of warranty extend only to the original purchaser.\par Neither Byte Works, Inc. nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par To obtain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works, Inc. within ten (10) days of purchase.\par }{\b\fs18 Important Notice}{\fs18  - This is a fully copyrighted work and as such is protected under copyright laws of the United States of America.  According to these laws, consumers of copywritten material may make copies for their personal use only.  Duplication for any purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par This product is sold for use on a }{\i\fs18 single computer}{\fs18  at a }{\i\fs18 single location}{\fs18 .  Contact the publisher for information regarding licensing for use at multiple-workstation or multiple-computer installations.\par }{\b\fs18 Use of Libraries}{\fs18  - The enclosed subroutine libraries are fully copyrighted works.  It is the policy of Byte Works, Inc. to license these libraries to purchasers of ORCA/Modula-2 free of charge.  Such licenses are generally restricted to include the libraries of binary files, and do not extend to use of the source code.  For details, see Appendix C.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\fs18 ORCA/Modula-2 is a trademark of the Byte Works, Inc.\par The Byte Works is a registered trademark of the Byte Works, Inc.\par Apple and GS/OS are registered trademarks of Apple Computer, Inc.\par }{\fs14 \par }\pard \qc\fi540\widctlpar\tx450\tx720\adjustright {\fs18 Program, Documentation and Design\par Copyright 1984-1993\par The Byte Works, Inc.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\fs14 \par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\fs18 Apple Computer, Inc. MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITTED BY SOME STATES.  THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS.  THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE.\par GS/OS is a copyrighted program of Apple Computer, Inc. licensed to Byte Works, Inc. to distribute for use only in combination with ORCA/Modula-2.  Apple software shall not be copied onto another diskette (except for archive purpose) or into memory unless as part of the execution of ORCA/Modula-2.  When ORCA/Modula-2 has completed execution Apple Software shall not be used by any other program.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\fs18 Apple is a registered trademark of Apple Computer, Inc.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Table of Contents\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Table of Contents\par }}{\footerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \chpgn \par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Table of Contents\par }{\fs20 \par \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 1 \endash  Introducing ORCA/Modula-2\tab 1\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 ORCA/Modula-2\tab 1\par What You Need\tab 1\par About the Manual\tab 2\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Visual Cues\tab 3\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Other Books and Reference Materials\tab 3\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 2 \endash  Exploring the System\tab 7\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Backing Up ORCA/Modula-2\tab 7\par Installing ORCA/Modula-2\tab 7\par The Bull's Eye Program\tab 7\par Finding Out About the Desktop\tab 9\par How Graphics and Text are Handled\tab 9\par The Languages Menu\tab 10\par What's a Debugger?\tab 10\par Using the Source-Level Debugger\tab 11\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Debugging a Simple Graphics Program\tab 11\par The Step Command\tab 12\par The Stop Command\tab 12\par The Trace Command\tab 12\par The Go Command\tab 12\par The Set Auto-Go Command\tab 13\par Break Points\tab 13\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Debugging a Program With More Than One Subroutine\tab 13\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Profile Command\tab 14\par The Step Through Command\tab 15\par The Goto Next Return Command\tab 15\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Viewing Program Variables\tab 16\par The Samples Disk\tab 17\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 3 \endash  Compiler Directives\tab 19\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 What's a Compiler Directive?\tab 19\par How Directives are Coded\tab 19\par A Brief Summary of ORCA/Modula-2 Compiler Directives\tab 19\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 4 \endash  Programming on the Apple\~II}{\fs18 GS}{\fs20 \tab 23\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Text Programs\tab 23\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Modula-2 Libraries\tab 28\par Console Control Codes\tab 28\par Stand-Alone Programs\tab 28\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Graphics Programs\tab 29\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Your First Graphics Program\tab 29\par Stand-Alone Programs\tab 30\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Programming on the Desktop\tab 31\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Learning the Toolbox\tab 32\par Toolbox Interface Files\tab 33\par Debugging a Desktop Program\tab 34\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Writing New Desk Accessories\tab 35\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Debugging NDAs\tab 37\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Inits\tab 38\par Control Panel Devices (CDevs)\tab 38\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 5 \endash  Writing Assembly Language Subroutines\tab 39\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Introduction\tab 39\par The Basics\tab 39\par Returning Function Values From Assembly Language Subroutines\tab 41\par Passing Parameters to Assembly Language Subroutines\tab 42\par Accessing Modula-2 Variables from Assembly Language\tab 45\par Calling Modula-2 Procedures and Functions from Assembly Language\tab 46\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 6 \endash  Using the Shell\tab 47\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Another Look at the Shell Window\tab 47\par Getting Into Text\tab 47\par How Shell Commands Work\tab 48\par File Names\tab 49\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Directory Walking\tab 50\par Device Names\tab 50\par Standard Prefixes\tab 51\par Using Wild Cards\tab 53\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Required and Optional Parameters\tab 55\par Redirecting Input and Output\tab 55\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Pipelines\tab 56\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Writing Your Own Utilities\tab 56\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Installing a New Utility\tab 57\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Learning More About the Shell\tab 58\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 7 \endash  Desktop Reference\tab 59\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Basic Operations\tab 59\par The Cursor\tab 59\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Insertion Point\tab 59\par Over Strike Mode\tab 59\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Selecting Text\tab 60\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Selection By Dragging\tab 60\par Selecting Lines\tab 60\par Selecting the Entire Document\tab 61\par Selecting Words\tab 61\par Extending a Selection\tab 61\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Split Screen\tab 62\par Entering Text\tab 62\par Special Keys\tab 63\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Return Key\tab 63\par Delete Key\tab 63\par Tab Key\tab 63\par The Arrow Keys\tab 63\par Screen Moves\tab 64\par Word Tabbing\tab 64\par Moving to the Start or End of a Line\tab 64\par Moving Within the File\tab 64\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Ruler\tab 65\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Default tab stops\tab 65\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The File Menu\tab 66\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 New\tab 66\par Open\tab 66\par Close\tab 66\par Save\tab 66\par Save As\tab 67\par Revert To Saved\tab 67\par Page Setup\tab 67\par Print\tab 67\par Quit\tab 67\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Edit Menu\tab 68\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Undo\tab 68\par Cut\tab 68\par Copy\tab 68\par Paste\tab 68\par Clear\tab 69\par Select All\tab 69\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Windows Menu\tab 69\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Tile\tab 69\par Stack\tab 70\par Shell Window\tab 70\par Graphics Window\tab 70\par Variables Window\tab 70\par List of Window Names\tab 72\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Find Menu\tab 72\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Find\tab 72\par Find Same\tab 74\par Display Selection\tab 74\par Replace\tab 74\par Replace Same\tab 75\par Goto\tab 75\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Extras Menu\tab 75\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Shift Left\tab 75\par Shift Right\tab 76\par Delete to End of Line\tab 76\par Join Lines\tab 76\par Insert Line\tab 76\par Delete Line\tab 77\par Auto Indent\tab 77\par Over Strike\tab 77\par Show Ruler\tab 78\par Auto Save\tab 78\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Run Menu\tab 78\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Compile to Memory\tab 79\par Compile to Disk\tab 79\par Check for Errors\tab 80\par Compile\tab 80\par Link\tab 82\par Execute\tab 84\par Execute Options...\tab 84\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Debug Menu\tab 85\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Step\tab 85\par Step Through\tab 86\par Trace\tab 86\par Go\tab 86\par Go to Next Return\tab 86\par Stop\tab 87\par Profile\tab 87\par Set/Clear Break Points\tab 87\par Set/Clear Auto-Go\tab 88\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Languages Menu\tab 88\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Installed Languages\tab 89\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The SYSTABS File\tab 89\par Setting up Defaults\tab 90\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 8 \endash  The Command Processor\tab 93\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Line Editor\tab 93\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Command Name Expansion\tab 93\par Multiple Commands\tab 95\par Scrolling Through Commands\tab 95\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Command Types\tab 95\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Built-in Commands\tab 96\par Utilities\tab 96\par Language Names\tab 96\par Program Names\tab 97\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Standard Prefixes\tab 97\par Prefixes 0 to 7\tab 99\par File Names\tab 100\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Wildcards\tab 101\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Types of Text Files\tab 102\par EXEC Files\tab 102\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Passing Parameters Into EXEC Files\tab 103\par Programming EXEC Files\tab 104\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Redirecting Input and Output\tab 108\par The .PRINTER Driver\tab 109\par The .NULL Driver\tab 112\par Pipelines\tab 112\par The Command Table\tab 113\par Command And Utility Reference\tab 115\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 ALIAS\tab 116\par ASM65816\tab 117\par ASML\tab 118\par ASMLG\tab 121\par ASSEMBLE\tab 121\par BREAK\tab 121\par CAT\tab 122\par CATALOG\tab 122\par CC\tab 125\par CHANGE\tab 125\par CMPL\tab 126\par CMPLG\tab 126\par COMMANDS\tab 127\par COMPACT\tab 127\par COMPILE\tab 128\par COMPRESS\tab 128\par CONTINUE\tab 129\par COPY\tab 129\par CREATE\tab 131\par CRUNCH\tab 131\par DELETE\tab 132\par DEREZ\tab 132\par DEVICES\tab 134\par DISABLE\tab 135\par DISKCHECK\tab 136\par ECHO\tab 137\par EDIT\tab 137\par ELSE\tab 138\par ENABLE\tab 138\par ENTAB\tab 138\par END\tab 139\par ERASE\tab 139\par EXEC\tab 140\par EXECUTE\tab 140\par EXISTS\tab 140\par EXIT\tab 141\par EXPORT\tab 141\par EXPRESS\tab 141\par FILETYPE\tab 142\par FOR\tab 144\par HELP\tab 144\par HISTORY\tab 145\par HOME\tab 145\par IF\tab 145\par INIT\tab 146\par INPUT\tab 147\par LINK\tab 147\par LINKER\tab 149\par LOOP\tab 149\par MAKELIB\tab 150\par MODULA2\tab 151\par MOVE\tab 152\par NEWER\tab 152\par PASCAL\tab 153\par PREFIX\tab 153\par PRODOS\tab 154\par QUIT\tab 154\par RENAME\tab 154\par RESEQUAL\tab 155\par REZ\tab 156\par RUN\tab 156\par SET\tab 156\par SHOW\tab 157\par SHUTDOWN\tab 158\par SWITCH\tab 158\par TEXT\tab 159\par TOUCH\tab 159\par TYPE\tab 160\par UNALIAS\tab 161\par UNSET\tab 161\par *\tab 161\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 9 \endash  The Text Editor\tab 163\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Modes\tab 163\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Insert\tab 163\par Escape\tab 164\par Auto Indent\tab 164\par Select Text\tab 164\par Hidden Characters\tab 165\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Macros\tab 166\par Using Editor Dialogs\tab 167\par Using the Mouse\tab 169\par Command Descriptions\tab 169\par Setting Editor Defaults\tab 182\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 10 \endash  The Resource Compiler\tab 185\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Overview\tab 185\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Decompiler\tab 185\par Type Declaration Files\tab 185\par Using the Resource Compiler and DeRez\tab 186\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Structure of a Resource Description File\tab 186\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Sample Resource Description File\tab 187\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Description Statements\tab 188\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Syntax Notation\tab 188\par Include \endash  Include Resources from Another File\tab 189\par Read \endash  Read Data as a Resource\tab 191\par Data \endash  Specify Raw Data\tab 191\par Type \endash  Declare Resource Type\tab 191\par Symbol Definitions\tab 200\par Delete \endash  Delete a Resource\tab 201\par Change \endash  Change a Resource's Vital Information\tab 201\par Resource \endash  Specify Resource Data\tab 201\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Labels\tab 204\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Built-in Functions to Access Resource Data\tab 204\par Declaring Labels Within Arrays\tab 205\par Label Limitations\tab 206\par An Example Using Labels\tab 207\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Preprocessor Directives\tab 207\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Variable Definitions\tab 208\par If-Then-Else Processing\tab 208\par Printf Directive\tab 209\par Include Directive\tab 212\par Append Directive\tab 212\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Description Syntax\tab 213\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Numbers and Literals\tab 213\par Expressions\tab 214\par Variables and Functions\tab 215\par Strings\tab 217\par Escape Characters\tab 218\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Using the Resource Compiler\tab 219\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Resource Forks and Data Forks\tab 219\par Rez Options\tab 220\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 11 \endash  Program Symbols\tab 223\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Identifiers\tab 223\par Reserved Words\tab 223\par Reserved Symbols\tab 224\par Constants\tab 224\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Integers\tab 224\par Cardinals\tab 225\par Reals\tab 225\par Strings\tab 226\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Separators\tab 226\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 12 \endash  Basic Data Types\tab 227\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Integers\tab 227\par Reals\tab 227\par Sets\tab 228\par Booleans\tab 228\par Characters\tab 228\par Pointers\tab 229\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 13 \endash  Derived Data Types\tab 231\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Enumerations\tab 231\par Subranges\tab 231\par Arrays\tab 232\par Strings\tab 232\par Records\tab 233\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 14 \endash  The Module\tab 235\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Program Modules\tab 235\par Definition Modules\tab 235\par Implementation Modules\tab 236\par Example Modules\tab 236\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Chapter 15 \endash  Local Modules\tab 239\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 16 \endash  The Declaration Section\tab 241\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Constants\tab 241\par Types\tab 242\par Variables\tab 243\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 17 \endash  Procedures\tab 245\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Value Parameters\tab 246\par Variable Parameters\tab 246\par Procedure Types\tab 247\par Forward\tab 248\par Tool, UserTool, Vector and ProDOS\tab 249\par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Chapter 18 \endash  The Block\tab 251\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 19 \endash  Statements\tab 253\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 The Assignment Statement\tab 253\par CASE Statement\tab 254\par EXIT Statement\tab 255\par FOR Statement\tab 255\par IF-THEN/ELSIF-THEN-ELSE Statement\tab 256\par LOOP Statement\tab 257\par Procedure Calls\tab 257\par REPEAT Statement\tab 257\par RETURN Statement\tab 258\par WHILE Statement\tab 258\par WITH Statement\tab 259\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 20 \endash  Expressions\tab 261\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Operators\tab 261\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Arithmetic Operators\tab 261\par Logical Operators\tab 262\par Set Operators\tab 262\par Relations\tab 262\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Operations on Characters\tab 263\par Operations on Addresses and Pointers\tab 263\par Operator Precedence\tab 264\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 21 \endash  Compiler Directives\tab 265\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 CDEV\tab 265\par ChainTo\tab 265\par DataBank\tab 266\par Dynamic\tab 266\par INIT\tab 267\par Keep\tab 267\par NDA\tab 268\par NILCheck\tab 269\par NoImp\tab 269\par OverflowCheck\tab 270\par Pascal\tab 270\par RangeCheck\tab 271\par RTL\tab 272\par Segment\tab 272\par StackCheck\tab 273\par Stacksize\tab 273\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Chapter 22 \endash  Standard Procedures and Functions\tab 275\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 ABS\tab 275\par CAP\tab 276\par CHR\tab 276\par DEC\tab 276\par EXCL\tab 277\par FLOAT\tab 277\par HALT\tab 277\par HIGH\tab 277\par INC\tab 278\par INCL\tab 278\par LONG\tab 278\par MAX\tab 279\par MIN\tab 279\par ODD\tab 279\par ORD\tab 280\par SHORT\tab 280\par SIZE\tab 281\par TRUNC\tab 281\par TRUNCD\tab 281\par VAL\tab 281\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Chapter 23 \endash  Libraries\tab 283\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Tool Interfaces\tab 283\par Standard Libraries\tab 283\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 FileSystem\tab 283\par InOut\tab 286\par LongMath and MathLib0\tab 290\par L2Lib\tab 292\par Storage\tab 295\par Strings\tab 296\par System\tab 298\par Terminal\tab 302\par TermProc\tab 304\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Other Libraries\tab 306\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Appendix A \endash  Error Messages\tab 307\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Terminal Compilation Errors\tab 307\par Non-Terminal Compilation Errors\tab 309\par Internal Compiler Errors\tab 325\par Linking Errors\tab 326\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Linker Error Levels\tab 326\par Recoverable Linker Errors\tab 326\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Terminal Linker Errors\tab 330\par Execution Errors\tab 332\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f  }}{\fldrslt {\fs20 Appendix B \endash  Custom Installations\tab 337\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Installer Scripts\tab 337\par }\pard\plain \s20\li1440\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 New System\tab 337\par New Text System\tab 338\par ORCA Icons\tab 338\par PRINTER Driver\tab 338\par Modula-2, Pascal, C, Asm Libraries\tab 338\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 RAM Disks\tab 339\par Details About Configuration\tab 340\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Appendix C \endash  Run-Time License\tab 343\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-2"  }}{\fldrslt {\fs20 Appendix D \endash  Console Control Codes\tab 345\par }\pard\plain \s21\li720\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\fs20 Beep the Speaker\tab 345\par Cursor Control\tab 345\par Clearing the Screen\tab 347\par Inverse Characters\tab 348\par MouseText\tab 349\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard\plain \s22\widctlpar\tqr\tx7920\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  TOC \\f \\l "1-1"  }}{\fldrslt {\fs20 Index\tab 351\par }\pard\plain \qc\fi-450\li450\widctlpar\adjustright \f4\cgrid }}\pard\plain \qc\fi-450\li450\widctlpar\adjustright \f4\cgrid {\sect }\sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 User's Manual\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 1 - Introducing ORCA/Modula-2\par }}\pard\plain \qj\keepn\widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 1 \endash  Introducing ORCA/Modula-2\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 1 \endash  Introducing ORCA/Modula-2\tcl1}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ORCA/Modula-2}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 ORCA/Modula-2\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Welcome to ORCA/Modula-2!  ORCA/Modula-2 is a complete, stand-alone program containing all of the software you need to write professional quality programs on the Apple\~II}{\fs18 GS}{\fs20 .  The package includes a fast, easy to use Modula-2 compiler, a linker that lets you create and use libraries, or even mix Modula-2 programs with subroutines written in other languages, and two complete development environments.  This manual is based on the most popular of the two development environments, which we refer to as the desktop development environment}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop development environment}}}{\fs20 .  The desktop development environment gives you fast graphics and mouse based editing.  The editor supports files up to the size of available memory; split screen; search and replace; cut, copy and paste; the ability to edit several files at one time; and several specialized editing features.  The desktop development environment also features a built-in debugger.  This source level debugger lets you debug Modula-2 programs, showing you what line is executing and the values of the variables.  It supports many advanced debugging features like step-and-trace, break points, and profiling.\par The second development environment is a UNIX-style text based development}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text based development}}}{\fs20  environment.  This is an updated version of the same environment sold by Apple Computer as Apple Programmer's Workshop (APW}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APW}}}{\fs20 ).  Many programmers who program on a daily basis prefer text environments for their speed and power.  In later chapters, you will learn how to set up and use the text based environment.  At least while you are getting started, we recommend using the desktop development environment unless you have a compelling reason to use the text environment.  You might want to consider the text environment if you are working on a computer without much memory, or if you are used to text environments and prefer them over desktop programs.\par In later chapters, as we explore the capabilities of the desktop environment, you will also find that the power of the text based shell is not lost to those who prefer the desktop environment.  The central part of the text based environment is a powerful, programmable shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 .  The shell is a program that gives you control over the files on your disks, the process of compiling programs, and where program output goes and input comes from.  You may have used simple shells before, like BASIC.SYSTEM, used with AppleSoft.  The ORCA shell shares many features with these simpler shells, but is much more powerful.\par After purchasing a new program, you would probably like to sit right down at your computer and try it out.  We encourage you to do just that, and in fact, this manual is designed to help you.  Before getting started, though, we would like to take some time to suggest how you should approach learning to use ORCA/Modula-2, since the best approach is different for different people.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 What You Need}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 What You Need\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 installation}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory\:requirements}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 disks\:requirements}}}{\fs20 To use ORCA/Modula-2, you will need an Apple\~II}{\fs18 GS}{\fs20  with at least 1.75M of memory.  (You can use ORCA/Modula-2 with less memory, but only with the text environment.)  You will also need a hard disk.\par Before using ORCA/Modula-2, you will need to install it on your hard disk.  The Extras Disk has a copy of Apple's Installer, along with several scripts that will help you install ORCA/Modula-2 in a variety of different configurations; these are explained in detail in Appendix B.  In general, you should use "New System" to install a complete copy of ORCA/Modula-2 in a folder on your hard disk.  If you want to install ORCA/Modula-2 along with another ORCA language, refer to Appendix B.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 About the Manual}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 About the Manual\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This manual is your guide to ORCA/Modula-2.  To make it easy for you to learn about the system, this manual has been divided into three major sections.  The first part is called the "User's Guide."  It is a tutorial introduction to the development environment, showing you how to create Modula-2 programs under ORCA.  The second part is called the "Environment Reference Manual."  It is a working reference to provide you with in-depth information about the development environment you will use to create and test Modula-2 programs.  Part three is the "Language Reference Manual."  It contains information about the ORCA/Modula-2 programming language.  This organization also makes it easy for you to skip sections that cover material that you already know.  For example, the ORCA languages are unique on the Apple\~II}{\fs18 GS}{\fs20  in that a single development environment can be used with many different languages.  If you have already used the development environment with another ORCA language, you can skip the sections that cover the environment, and concentrate on the Modula-2 programming language.\par While this manual will teach you how to use ORCA/Modula-2 to write and test programs, it does not teach you the basics of the language itself.  Basic concepts about programming in Modula-2 are necessary to create useful, efficient programs.  There are a number of books available about the Modula-2 language.  If you are new to Modula-2, but are familiar with Pascal, you might be able to learn enough about Modula-2 from the reference section of this manual to write Modula-2 programs.  If you would like to find other books on Modula-2, try both your local library and bookstore first.  Be sure and check Books in Print at the bookstores; many fine Modula-2 books are not stocked at general bookstores.\par If you are new to ORCA, start at the beginning and carefully read the first three chapters of the "User's Manual," along with any portions of Chapter 4 that interest you.  These sections were written with you in mind.  Work all the examples, and be sure that you understand the material in each chapter before leaving it.  ORCA is a big system, and like any sophisticated tool, it takes time to master.  On the other hand, you don't need to know everything there is to know about ORCA to create sophisticated programs, and the desktop environment makes it easy to write and test the most common kinds of Modula-2 programs.  The first four chapters give you enough information to create, test and debug Modula-2 programs using ORCA/Modula-2.  After working through these chapters, you can skim through the rest of the manual to pick up more advanced features.\par From time to time, we make improvements to ORCA/Modula-2.  You should return your registration card}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 registration card}}}{\fs20  so we can notify you when the software is improved.  We also notify our customers when we release new products, often offering substantial discounts to those who already have one of our programs.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Visual Cues}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Visual Cues\tcl3}}}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\xe {\b\v }{\b\v visual cues}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 In order to tell the difference between information that this manual provides and characters that you type or characters that appear on your computer screen, special type faces are used.  When you are to enter characters, the type face }{\b\f6\fs18 looks like this}{\b\f6\fs20 .  }{\fs20 When you are supposed to notice characters displayed on the computer screen}{\f6\fs20  }{\f6\fs18 they look like this}{\f6\fs20 . }{\fs20 Named keys, such as the return key, are shown in outline, }{\outl\fs18 like this}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Other Books and Reference Materials}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Other Books and Reference Materials\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx450\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you are new to Modula-2, you will need to supplement this manual with a good beginner's book on the Modula-2 programming language.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 learning Modula-2}}}{\fs20 \par If you will be using the Apple\~II}{\fs18 GS}{\fs20  Toolbox to create your own desktop programs, you should have a copy of the }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Toolbox Reference}{\fs20 , volumes 1 through 3, and }{\fs20\ul Programmer\rquote s Reference for System 6.0}{\fs20 .  These books do not teach you about the toolbox, but they are essential references.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 toolbox}}}{\fs20 \par }\pard \qj\widctlpar\tx450\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Programming in Modula-2}{\fs20 \par Niklaus Wirth\par Springer-Verlag, New York\par }\pard \qj\li360\widctlpar\adjustright {\fs20 This is the original book defining Modula-2, written by the designer of the language.  It's now in its fourth edition.  ORCA/Modula-2 uses this book as the standard for the language.\par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Technical Introduction to the Apple\~II}{\scaps\fs20\ul gs}{\fs20 \par Apple Computer\par Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 A good basic reference source for the Apple\~II}{\scaps\fs20 gs}{\fs20 .\par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Hardware Reference}{\fs20  and }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Firmware Reference}{\fs20 \par Apple Computer\par Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 These manuals provide information on how the Apple\~II}{\fs18 GS}{\fs20  works.\par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Programmer's Introduction to the Apple\~II}{\scaps\fs20\ul gs}{\fs20 \par Apple Computer\par Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 Provides programming concepts about the Apple\~II}{\scaps\fs20 gs}{\fs20 .}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:learning}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference: Volume I}{\fs20 , }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference: Volume II}{\fs20  and }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference: Volume III}{\fs20 \par Apple Computer\par Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 These volumes provide essential information on how the tools work \endash  the parameters you need to set up and pass, the calls that are available, etc.  You must have these books to use the Apple\~II}{\scaps\fs20 gs}{\fs20  toolbox effectively.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:reference manuals}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Programmer\rquote s Reference for System 6.0}{\pard\plain \qj\li360\keepn\widctlpar\adjustright \v\f4\fs20\ul\cgrid {\xe {\v\fs20\ul Programmer\rquote s Reference for System 6.0}}}{\fs20 \par Mike Westerfield\par Byte Works, Inc., Albuquerque, New Mexico\par }\pard \qj\li360\widctlpar\adjustright {\fs20 The first three volumes of the toolbox reference manual cover the Apple\~II}{\fs18 GS}{\fs20  toolbox up through System 5.  This book covers the new features added to the toolbox and GS/OS in System 6.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:reference manuals}}}{\v\fs20 .0;}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 System 6.0}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul GS/OS}{\pard\plain \qj\li360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20\ul GS/OS}}}{\fs20\ul  Reference\par }{\fs20 Apple Computer\par Addison-Wesley Publishing Company, Inc.  Reading, MA\par }\pard \qj\li360\widctlpar\adjustright {\fs20 This manual provides information on the underlying disk operating system.  It is rarely needed for Modula-2 programming, since Modula-2 has built-in subroutines for dealing with disk files.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS}}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul ORCA/M}{\pard\plain \qj\li360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20\ul ORCA/M}}}{\fs20\ul   A Macro Assembler for the Apple\~II}{\scaps\fs20\ul gs}{\scaps\fs20 \par }{\fs20 Mike Westerfield and Phil Montoya\par Byte Works, Inc., Albuquerque, NM\par }\pard \qj\li360\widctlpar\adjustright {\fs20 ORCA/M is a macro assembler that can be used with ORCA/Modula-2.  Without changing programming environments, you can create a program in Modula-2, assembly language, or a combination of the two.  Chapter 5 will give you more information on how easy it is to mix the two languages.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul ORCA/C}{\pard\plain \qj\li360\keepn\widctlpar\adjustright \v\f4\fs20\ul\cgrid {\xe {\v\fs20\ul ORCA/C}}}{\scaps\fs20 \par }{\fs20 Mike Westerfield\par Byte Works, Inc., Albuquerque, NM\par }\pard \qj\li360\widctlpar\adjustright {\fs20 ORCA/C is a C compiler which can be installed in the same environment as ORCA/Modula-2.  With the C compiler installed, you can write C or Modula-2 programs without switching environments.  You can also use library routines written in C from your Modula-2 programs.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C\:see also ORCA/C}{\txe }}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul ORCA/Pascal}{\pard\plain \qj\li360\keepn\widctlpar\adjustright \v\f4\fs20\ul\cgrid {\xe {\v\fs20\ul ORCA/Pascal}}}{\scaps\fs20 \par }{\fs20 Mike Westerfield\par Byte Works, Inc., Albuquerque, NM\par }\pard \qj\li360\widctlpar\adjustright {\fs20 ORCA/Pascal is a Pascal compiler which can be installed in the same environment as ORCA/Modula-2.  With the Pascal compiler installed, you can write Pascal or Modula-2 programs without switching environments.  You can also use library routines written in Pascal from your Modula-2 programs.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal\:see also ORCA/Pascal}{\txe }}}{\fs20 \par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\fs20\ul Toolbox Programming in Pascal}{\pard\plain \qj\li360\keepn\widctlpar\adjustright \v\f4\fs20\ul\cgrid {\xe {\v\fs20\ul Toolbox Programming in Pascal}}}{\scaps\fs20 \par }{\fs20 Mike Westerfield\par Byte Works, Inc., Albuquerque, NM\par }\pard \qj\li360\widctlpar\adjustright {\fs20 As this book goes to press, there is no separate toolbox programming course for Modula-2.  Since Modula-2 is a direct descendant of Pascal, though, it is easy to convert Pascal programs to Modula-2.  This toolbox course for our Pascal compiler can be used effectively with Modula-2.}{\pard\plain \qj\li360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox}}}{\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 2 - Exploring the System\par }}\pard\plain \qj\keepn\widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 2 \endash  Exploring the System\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 2 \endash  Exploring the System\tcl1}}}{\v\fs20 \par }{\fs20 {\*\bkmkstart bk0}\par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Backing Up ORCA/Modula-2}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Backing Up ORCA/Modula-2\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter is a hands-on introduction to ORCA/Modula-2.  You should read it while seated at your computer, and try the things suggested as we talk about them.  By the end of the chapter, you will have a good general feel for what Modula-2 programming is like using ORCA/Modula-2.  The next two chapters introduce slightly more advanced topics, including control of the compiler, and how to write programs for the various environments supported on the Apple\~II}{\fs18 GS}{\fs20 .\par As with any program, the first step you should take is to make a backup copy of the original disks.  To do this, you will need five blank disks and a copy program \endash  Apple's Finder, from the System Disk, will do the job, or you can use any other copy program if you have a personal favorite.  If you are unfamiliar with copying disks, refer to the documentation that came with your computer.  As always, copies are for your personal use only.  Using the copies for any purpose besides backing up your program is a violation of federal copyright laws.  If you will be using ORCA/Modula-2 in a classroom or work situation where more than one copy is needed, please contact the publisher for details on our licensing policies.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 backing up the disks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 copying disks}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 site license}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Installing ORCA/Modula-2}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Installing ORCA/Modula-2\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Modula-2 is designed to run from a hard disk.  Before using ORCA/Modula-2, you will need to install it on your hard disk.  The easiest way to install ORCA/Modula-2 is:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Create a new folder on your hard disk.  You can use any name you like, and put the folder in any partition or inside of some other folder.\par 2.\tab Insert the ORCA/Modula-2 Extras disk and run the Installer from that disk.\par 3.\tab Select the script "New System" from the left list.\par 4.\tab Using the list on the right side of the dialog, open the folder you created in step 1.\par 5.\tab Click "Install."\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par There are several other installer scripts, and several other ways to use ORCA/Modula-2.  Appendix B covers all of the installer scripts.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Bull's Eye Program}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Bull's Eye Program\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The first thing we will do is run a simple sample program that draws a bull's eye on the screen.  We will use this program to get an overview of the system, and gradually build on this foundation by supplying more and more details about what is happening.  The first step is to start ORCA/Modula-2.  To do this, run the file called ORCA.Sys16 \endash  it's located in the folder where you installed ORCA/Modula-2.\par Go ahead and select Open from the File menu.  In the list of files you will see a folder called Samples.  Open this folder by clicking twice in rapid succession on the name, or by clicking once on the name to select the folder, and then clicking on the Open button.  You will see another, shorter list of files.  One of these is called BullsEye.mod.  This file is the source code for the Modula-2 program we will run.  Click twice on the file name, and the program will appear in a window on the desktop.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command}}}{\fs20 \par The bull's eye program will draw several circles, one inside the other.  ORCA/Modula-2 let's you see the output from your program while you look at the source code.  Naturally, to do this, you need someplace to put the output.  In the case of graphics output, the drawing appears in a special window called the Graphics Window.  To see this window, you need to do two things.  First, shrink the bull's eye program's window by holding the mouse down in the grow box (the box at the bottom right of the window) and dragging the grow box to the left.  You want to cut the width of the window to about half of the screen, so the right side of the window is just before the start of the word Run in the menu bar.  Now pull down the Windows menu and select the Graphics Window command.  The graphics window will show up in the lower right portion of the screen.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command}}}{\fs20 Positioning the windows is the hard part!  To run the program, pull down the Run menu and select the Compile to Memory command.  A third window, called Shell, will show up in the top right portion on the screen.  The system uses this window to write text error messages and keep you informed about progress as the program is compiled and linked.  The first compile of the day takes a little time, so be patient.  The desktop development environment is a multi-lingual programming environment.  Because the program doesn't know in advance what language you will be using, it waits until you compile a program to load the compiler and linker.  If you have 1.75M of memory, and haven't set aside a large RAM disk, these programs generally remain in memory, so subsequent compiles are much faster.  In addition, once a program has been compiled, if you try to compile it again without changing the source file, the program is simply executed.  To see this, try the Compile To Memory command again.  The executable program is loaded from disk and re-executed.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command}}}{\fs20 You might wonder why the executable program is saved to disk when you use the Compile To Memory command.  Compile To Memory refers to the intermediate files, called }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 object modules, that are passed from the compiler to the linker when your program is prepared for execution.  For some advanced applications, you will want to save these to disk, but for simple programs like the bull's eye program, the Compile To Memory command gives you faster compiles by not writing the object modules to disk.  For both Compile to Memory and Compile to Disk, though, the executable program is still saved on the disk.\par Before moving on, let's try one more command.  Pull down the Debug menu and select Trace.  Watch the left margin of your source window as the program runs \endash  you will see an arrow moving from line to line in the source code.  The ability to trace through a program is the foundation of the debugger supplied with ORCA/Modula-2.  In later sections, we will explore this capability in detail.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Finding Out About the Desktop}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Finding Out About the Desktop\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As you can see, it's pretty easy to load, compile and execute programs using ORCA/Modula-2.  One of the main advantages of the desktop programming environment is ease of use.  The rest of this chapter explains how to use the desktop development environment to develop programs, but it assumes that you already know how to use menus, how to manipulate windows on the desktop, and how to edit text using a mouse.  If you had any trouble understanding how to use the mouse to manipulate the menu commands and window in the last section, or if you are unfamiliar with mouse-based editors, now would be a good time to refer to Chapter 3 of the }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Owner's Guide}{\fs20 , which came with your computer.  The owner's guide has a brief tutorial introduction to using desktop programs.  Complete details on our desktop can be found in Chapter 7 of this manual, but that chapter is arranged for reference \endash  if you are completely new to desktop programs, a gentler introduction, like the one in the user's guide, is probably better.  The major features of our desktop development environment that are specific to programming, and are therefore not covered in Apple's introductory manual, will be covered in the remainder of this chapter.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menus}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 windows}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 mouse}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 How Graphics and Text are Handled}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 How Graphics and Text are Handled\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 One of the unique features of the desktop development environment is its ability to show you the program and its output at the same time.  You have already seen an example of this.  The bull's eye program produces graphics and text output (it writes the string "Bull's eye!" after the bull's eye is drawn).  Most books on Modula-2 teach you the language using text input and output.  As with the bull's eye program, the text will show up in a special window called the Shell window.  This window is created automatically when you compile a program, and stays around until you close it.  You can resize it \endash  even hide it behind the program window if it bothers you.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 \par The shell window is used for several other purposes besides giving your program a place to write text output.  If your program needs input from the keyboard, you will see the input echoed in the shell window.  The compiler and linker also write error messages to the shell window.  These error messages will also be shown in a dialog, so you won't miss the error even if you hide the shell window.  Writing the errors to the shell window, though, gives you a more permanent record of the errors.  Later, in Chapter 6, we will explore still more uses of the shell window.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compilation errors}}}{\fs20 \par The graphics window lets you write programs that draw pictures without doing all of the initialization required to write stand-alone programs.  For example, if you are writing a game that uses pull-down menus and windows, your program will open windows for itself.  For simple graphics tasks like drawing bull's eyes or plotting a function, though, the graphics window lets you concentrate on the algorithms and on the graphics language, without all of the fuss of learning how to create menus and windows for yourself.\par You don't need to open the graphics window unless your program uses it.  If you want to use the graphics window, just be sure to open it before running your program.  (If you forget, nothing tragic happens \endash  you just won't be able to see the graphics output from your program.)  If you need more space, you can drag the window around and size it.\par One feature of the graphics window is worth pointing out.  When your program draws to the graphics window, it does so using QuickDraw II.  The development environment does not know what commands you are using, so it cannot repaint the window.  What this means is that if you move a window on top of a drawing in the graphics window, and then move it back off, the only way to refresh the picture is to run the program again.  You might try this right now to see what we mean.  Drag the shell window down so it covers about half of the graphics window, then move it back to its original location.  The part of the graphics window that was covered will be erased.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Languages Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Languages Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 languages menu}}}{\fs20 The Languages menu shows all of the languages installed on your system.  It changes when you install or delete a programming language.  You can use this menu to find out what language is associated with a particular file, or to change the language.\par Under ORCA, all source and data files are associated with a language.  The system uses the underlying language stamp to call the appropriate compiler or assembler when you issue a compile command for a source file.  For example, if you select the BullsEye.mod source file (a window is selected by clicking anywhere on the window) and pull down the Languages menu, you will see MODULA2 checked.  If you select the shell window, the language SHELL will be checked.  When you create a new program, the system tries to select the proper language automatically by assigning the language of the last file edited.  You should always check the language menu, though.  If you write a Modula-2 program, and the system thinks it is an assembly language source file, the assembler will give you enough errors that you will know something is wrong.  If you don't have the assembler on the disk, a dialog will appear with the message "A compiler is not available for this language."  In either case, simply pull down the Languages menu and select the appropriate language, then try compiling again.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 What's a Debugger?}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 What's a Debugger?\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A debugger helps you find errors in your program.  You can use a debugger to execute all or part of your program one line at a time, watching the values of selected variables change as the program runs.  If you know that some subroutines are working, while there are problems with other subroutines, you can execute the working routines at full speed and then trace slowly through the problem areas.  You can also set break points}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 break points}}}{\fs20  in your program and then have the debugger execute your program until it reaches the break.\par While the desktop development system supports many languages besides Modula-2, not all languages that work with the development system support the source-level debugger.  If you are using another language with ORCA/Modula-2, and are not sure whether or not it supports the debugger, try it.  If the language doesn't support the debugger, your program will simply execute at full speed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 There is one very important point to keep in mind about the debugger.  When you compile a program with debug on, the compiler inserts special code into your program to help the debugger decide which line it is on, where symbols are located, and so forth.  If you run a program with debug code in it from the Finder or the text-based shell, the program will crash.  For that reason, it is very important that you turn the debug option off after a program is finished.  To turn debugging off, pull down the Run menu and select the Compile command.  The dialog that appears has an option with the caption "Generate debug code."  If there is an X in the box to the left of this option, debug code is turned on; if there is no X, it is turned off.  Clicking in the box turns the option on and off.  Once you set this option the way you want it, click on the Set Options button.\par One other point about debug code deserves to be mentioned.  The debug code takes time and space.  When you turn debugging off, your program will get smaller and faster.  In programs that do lots of graphics or floating point calculations, like the bull's eye program, the difference is relatively small, but in programs that spend their time looping and doing logical operations, the difference in execution speed can be considerable.\par In the remainder of this chapter, we will look at how you can use the source-level debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  to find problems in your Modula-2 programs.  The examples we will use here are fairly short, simple programs.  You can debug large programs, including desktop applications.  The basic ideas are similar, but there are a few restrictions to keep in mind.  Debugging desktop programs is covered in a special section in Chapter 4.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Using the Source-Level Debugger}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using the Source-Level Debugger\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 Let's use the bull's eye program again to become familiar with the source-level debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 .  If you do not have the program open on the desktop, please pull down the File menu and use the Open command to load it from the Samples folder}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Samples folder}}}{\fs20 .  Now shrink the bull's eye window to about half its current width, as before.  If you do not have a graphics window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20  open, pull down the Windows menu and use the Graphics Window command to open a graphics window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\trowd \clvertalt\cltxlrtb \cellx7920\pard \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b Debugging a Simple Graphics Program}{\pard\plain \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Debugging a Simple Graphics Program\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile command}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run menu}}}{\fs20 Pull down the Run menu and select the Compile command.  The desktop brings up a dialog box.  For now, just ignore all of the items in the Compile window except the box in front of the "Generate debug code" option.  This box should be marked with an X, telling the compiler to produce the special code needed during debugging.  After checking the "Generate debug code" box, click on the Set Options button at the bottom of the Compile window. }{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 \par Now pull down the Debug menu.\cell }\pard \widctlpar\intbl\adjustright {\fs20 \row }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b The Step Command}{\pard\plain \keepn\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Step Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\tx2880\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 Select the Step command from the Debug menu and watch the source file window.  When the program starts to run, you will see an arrow pointing to the first line in the source file.  Select Step again \endash  the arrow now moves down to the second line in the program.  You can continue to select Step from the Debug menu, or you can use the keyboard equivalent.  Holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key and typing }{\b\fs20 [}{\fs20  will also step one time.  Remembering the keystroke will be hard at first, but you can always pull down the menu to check to see what key is used:  the key is shown to the right of the menu command name.  Either way, each time you step, the arrow moves to the next line in the program, and the bull's eye is slowly painted on the graphics window}{\pard\plain \qj\fi360\widctlpar\intbl\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 , one circle at a time.}{\v\fs20 \cell }\pard \widctlpar\intbl\adjustright {\v\fs20 \row }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Stop Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Stop Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 Any time your program is executing, you can use the Stop command to stop the program.  This also works when the debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  is paused, waiting for you to select the next debugging command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Trace Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Trace Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 At any time, you can trace your program's execution by selecting Trace from the Debug menu.  Once it starts tracing, the program will run until it finishes, or until you issue another debugging command.  Select Trace from the Debug menu, and notice the arrow in the source file window \endash  it moves through the lines of code as each line is executed.  Any of the windows which might be open as a result of debugging (the source file, shell, variables, stack, and memory windows) will be continually updated while Trace is running.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 \par To pause for a moment in the middle of a trace, move the cursor to the menu bar and press on the mouse button.  You do not have to be on a menu; in fact, it is better if you aren't.  As long as you hold down on the mouse button, the program will pause.  When you let up, execution continues.  While you have the mouse button down, if you decide to switch to step mode or stop the program, move to the Debug menu and select the appropriate command, or use the appropriate keyboard equivalent.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Go Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Go Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 go command}}}{\fs20 Experiment with the Go command in the Debug menu.  It is similar to Trace, but executes an entire program at full speed.  Unlike Trace, however, the debugging windows are not updated.  Go is especially useful for quickly seeing the results of changing your program while you are fixing bugs.  It is also useful when you are using break points and want to execute up to the location of the first break point.\par Once a program is executing, it can be stopped by using one of the debug commands in the first part of the Debug menu.  A break point or run-time error will also stop the program.  You can pause debugging at any time by moving the cursor to the right-hand area of the menu bar}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  and pressing on the mouse button.  Debugging continues as soon as you release the mouse button.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Set Auto-Go Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Set Auto-Go Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\fs20 \par }\trowd \trgaph90\trleft-90 \clvertalt\cltxlrtb \cellx4230\clvertalt\cltxlrtb \cellx8010\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 Now let's look at Auto-Go.  You can set lines for Auto-Go so that they will be executed at full speed, even if you are stepping or tracing.  Use the mouse to select the four lines assigning values to the rectangle, as shown in the figure.}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto-go command}}}{\fs20   Next, pull down the Debug menu and choose Set/Clear Auto-Go.  A large green dot will appear to the left of each of the selected lines.   Now use the Step command to step through the for loop.  Notice that when the arrow stepped into the block of statements you selected, it jumped to the end of the block marked for auto-go.  As you can see, Auto-Go can be very useful when you are stepping through your program, but don't want to see portions you have already debugged.\par \cell }\pard \qr\widctlpar\intbl\adjustright {\par {\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw341\pich284\picwgoal6820\pichgoal5680\macpict\bliptag-777675450\blipupi72{\*\blipuid d1a59d469c4f26a969f86f814bc5e4ca}1a2600000000011c01551101a00082a0008e01000a000000000308028098002c0000000000f001580000000000f001550000000000f00155000102d50007007fd8ff01f00007007fd8ff01f000070060d800013000070060d800013000070060d800013000070060d8000130001b0367e7fff3f6ff0407c0038380fb00010307f7ff05fe7fff3f30001b0367e7fff3f6ff0407c0038380fb00010307f7ff05fe7fff3f3000190360060030f600040660018180fb000003f5000460c3003000190360060030f600040660018180fb000003f5000460c30030001e0367e60033f6ff0c0666618183c3c663c0fe1e1f07f7ff05fe60c33f30001e0367e60033f6ff0c0666618183c3c663c0fe1e1f07f7ff05fe60c33f30001c0360060030f6000b07c661818606666660db3333f500047fc30030001c0360060030f6000b07c661818606666660db3333f500047fc30030001e0367e60033f6ff0c0666618183c7e6e7e0db333307f7ff05fe60033f30001e0367e60033f6ff0c0666618183c7e6e7e0db333307f7ff05fe60033f30001c0360060030f6000b066661818066036600db3333f5000460030030001c0360060030f6000b066661818066036600db3333f5000460030030001e0367e7fff3f6ff0207c3e3fec306c463c6db1e1f07f7ff05fe7fff3f30001e0367e7fff3f6ff0207c3e3fec306c463c6db1e1f07f7ff05fe7fff3f30000c0060ed000103c0ee000130000c0060ed000103c0ee00013000070060d800013000070060d80001300007007fd8ff01f00007007fd8ff01f0000a0060db00043ffffff0000a0060db00043ffffff0001d0060fd00050f1fc000000efc000606001fd8dfd0c0f100043ffffff0001d0060fd00050f1fc000000efc000606001fd8dfd0c0f100043ffffff0001d0060fd00010618fe000006fc00060e000618d818c0f100043ffffff0001d0060fd00010618fe000006fc00060e000618d818c0f100043ffffff0001f0060fd00110618000fcf860f97800f8006000618d81cc0f100043ffffff0001f0060fd00110618000fcf860f97800f8006000618d81cc0f100043ffffff0001f0060fd0011061f801818c618d8c000000600061fdf9fc0f100043ffffff0001f0060fd0011061f801818c618d8c000000600061fdf9fc0f100043ffffff0001f0060fd00110618001818c618d8000f8006000618d819c0f1000430000030001f0060fd00110618001818c618d8000f8006000618d819c0f1000430000030001f0060fd00070618001818c618d8fe000606000618d818c0f1000430030030001f0060fd00070618001818c618d8fe000606000618d818c0f1000430030030001f0060fd00070f18000fcf8f0f98fe00060f000618dfd840f10004300cc030001f0060fd00070f18000fcf8f0f98fe00060f000618dfd840f10004300cc03000080060db00fd300000080060db00fd300000130060f900000efb00010f80ec000430c00c3000130060f900000efb00010f80ec000430c00c3000130060f9000006fb000118c0ec000433f03f3000130060f9000006fb000118c0ec000433f03f3000160060fb000a0fcf860f9780060f8000c0ec00fd300000160060fb000a0fcf860f9780060f8000c0ec00fd300000160060fb00051818c618d8c0fe00010186ec00fd300000160060fb00051818c618d8c0fe00010186ec00fd300000150060fb00091818c618d800060f8006eb00fd300000150060fb00091818c618d800060f8006eb00fd300000170060fb00041818c618d8fd00011806ec0004303ff03000170060fb00041818c618d8fd00011806ec0004303ff03000170060fb00040fcf8f0f98fd00011fc6ec00043000003000170060fb00040fcf8f0f98fd00011fc6ec000430000030000e0060f100000cec00043ffffff0000e0060f100000cec00043ffffff000120060fd00041fd80f9fc0e400043aaaaab000120060fd00041fd80f9fc0e400043aaaaab000100060fd00fe180058e300043aaaaab000100060fd00fe180058e300043aaaaab0000e0060fd00fd18e300043aaaaab0000e0060fd00fd18e300043aaaaab000120060fd00041f980f9f80e400043aaaaab000120060fd00041f980f9f80e400043aaaaab000110060fd0003181800d8e300043aaaaab000110060fd0003181800d8e300043aaaaab000110060fd0003181810d8e300043aaaaab000110060fd0003181810d8e300043aaaaab000120060fd00041fdfcf9fc0e400043aaaaab000120060fd00041fdfcf9fc0e400043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab000120060f900000efb000006eb00043aaaaab000120060f900000efb000006eb00043aaaaab000120060f9000006fb00000eeb00043aaaaab000120060f9000006fb00000eeb00043aaaaab000170060fb00090fcf860f9780060f8006eb00043aaaaab000170060fb00090fcf860f9780060f8006eb00043aaaaab000180060fb00051818c618d8c0fe00010606ec00043aaaaab000180060fb00051818c618d8c0fe00010606ec00043aaaaab000170060fb00091818c618d800060f8006eb00043aaaaab000170060fb00091818c618d800060f8006eb00043aaaaab000170060fb00041818c618d8fd00010606ec00043aaaaab000170060fb00041818c618d8fd00010606ec00043aaaaab000170060fb00040fcf8f0f98fd00010f06ec00043aaaaab000170060fb00040fcf8f0f98fd00010f06ec00043aaaaab0000e0060f100000cec00043aaaaab0000e0060f100000cec00043aaaaab000110060fd00031fd0df80e300043aaaaab000110060fd00031fd0df80e300043aaaaab000110060fd00031818d8c0e300043aaaaab000110060fd00031818d8c0e300043aaaaab000110060fd0003181cd8c0e300043aaaaab000110060fd0003181cd8c0e300043aaaaab000110060fd00031f9fd8c6e300043aaaaab000110060fd00031f9fd8c6e300043aaaaab000110060fd00031819d8c0e300043aaaaab000110060fd00031819d8c0e300043aaaaab000110060fd00031818d8c6e300043aaaaab000110060fd00031818d8c6e300043aaaaab000110060fd00031fd85f86e300043aaaaab000110060fd00031fd85f86e300043aaaaab0000e0060fa00000ce300043aaaaab0000e0060fa00000ce300043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043ffffff0000a0060db00043ffffff0000a0060db00043c0000f0000a0060db00043c0000f0000a0060db00043c0000f0000a0060db00043c0000f0001901601ffeff09e730e0273fffffe0707feaff05e03c0000f0001901601ffeff09e730e0273fffffe0707feaff05e03c0000f0001901601ffeff09e739f9e73fffffe7273feaff05e03c0000f0001901601ffeff09e739f9e73fffffe7273feaff05e03c0000f0001901601ffeff09e739f9e73fe87fe7273feaff05e03c0000f0001901601ffeff09e739f9e73fe87fe7273feaff05e03c0000f0001901601ffeff09e539f9e03fe73fe7273feaff05e03c0000f0001901601ffeff09e539f9e03fe73fe7273feaff05e03c0000f0001901601ffeff09e039f9e73fe7ffe7273feaff05e03c0000f0001901601ffeff09e039f9e73fe7ffe7273feaff05e03c0000f0001901601ffeff09e739f9e73fe7ffe7273feaff05e03c0000f0001901601ffeff09e739f9e73fe7ffe7273feaff05e03c0000f0001901601ffeff09efb0f9e73fe7ffe0707feaff05e03c0000f0001901601ffeff09efb0f9e73fe7ffe0707feaff05e03c0000f0000c01601fddff05e03c0000f0000c01601fddff05e03c0000f0002301601ffcff01e7f9fdff03f9f8703ffcff0039feff03fdffe03ff9ff05e03c0000f0002301601ffcff01e7f9fdff03f9f8703ffcff0039feff03fdffe03ff9ff05e03c0000f0002201601ffcff01e7f1fdff03f1f3e73ffcff003ffeff02e53fe7f8ff05e03c0000f0002201601ffcff01e7f1fdff03f1f3e73ffcff003ffeff02e53fe7f8ff05e03c0000f0002501601ffcff15e079fff9f07ff9e7e63fffffe8707031e7303ff07fe1f8ff05e03c0000f0002501601ffcff15e079fff9f07ff9e7e63fffffe8707031e7303ff07fe1f8ff05e03c0000f0002501601ffcff01e739fdff10f9e0653fe03fe73f2739e727fff8fffe79f9ff05e03c0000f0002501601ffcff01e739fdff10f9e0653fe03fe73f2739e727fff8fffe79f9ff05e03c0000f0002601601ffcff16e739fff9f07ff9e7233fffffe7f02739e7307ff07fff3ff9ff05e03c0000f0002601601ffcff16e739fff9f07ff9e7233fffffe7f02739e7307ff07fff3ff9ff05e03c0000f0002501601ffcff01e739fdff10f9e7273fffffe7e72739e73f3fe53fe739f9ff05e03c0000f0002501601ffcff01e739fdff10f9e7273fffffe7e72739e73f3fe53fe739f9ff05e03c0000f0002501601ffcff01e730fdff10f0f0607fffffe7f03030f0607ffdfff079f9ff05e03c0000f0002501601ffcff01e730fdff10f0f0607fffffe7f03030f0607ffdfff079f9ff05e03c0000f0001001601fe6ff00f3f9ff05e03c0000f0001001601fe6ff00f3f9ff05e03c0000f0002401601ffcff02e7f07ffeff03f9f8703ffcff0039feff03fdffe03ff9ff05e03c0000f0002401601ffcff02e7f07ffeff03f9f8703ffcff0039feff03fdffe03ff9ff05e03c0000f0002401601ffcff02e7e73ffeff04f1f3e73ff9fdff003ffeff02e53fe7f8ff05e03c0000f0002401601ffcff02e7e73ffeff04f1f3e73ff9fdff003ffeff02e53fe7f8ff05e03c0000f0002501601ffcff15e07f3ff9f07ff9e7e63ff9ffe8707031e7303ff07fe1f8ff05e03c0000f0002501601ffcff15e07f3ff9f07ff9e7e63ff9ffe8707031e7303ff07fe1f8ff05e03c0000f0002601601ffcff02e73e7ffeff10f9e0653fe07fe73f2739e727fff8fffe79f9ff05e03c0000f0002601601ffcff02e73e7ffeff10f9e0653fe07fe73f2739e727fff8fffe79f9ff05e03c0000f0002601601ffcff16e739fff9f07ff9e7233ff9ffe7f02739e7307ff07fff3ff9ff05e03ffffff0002601601ffcff16e739fff9f07ff9e7233ff9ffe7f02739e7307ff07fff3ff9ff05e03ffffff0002501601ffcff01e727fdff10f9e7273ff9ffe7e72739e73f3fe53fe739f9ff05e03aaaaab0002501601ffcff01e727fdff10f9e7273ff9ffe7e72739e73f3fe53fe739f9ff05e03aaaaab0002601601ffcff02e7203ffeff10f0f0607fffffe7f03030f0607ffdfff079f9ff05e03aaaaab0002601601ffcff02e7203ffeff10f0f0607fffffe7f03030f0607ffdfff079f9ff05e03aaaaab0001001601fe6ff00f3f9ff05e03aaaaab0001001601fe6ff00f3f9ff05e03aaaaab0002101601ffbff00f9fdff02fc707ffcff0039feff03fdfff07ff8ff05e03aaaaab0002101601ffbff00f9fdff02fc707ffcff0039feff03fdfff07ff8ff05e03aaaaab0002101601ffbff00f1fdff02f8673ffcff003ffeff03e53fe73ff8ff05e03aaaaab0002101601ffbff00f1fdff02f8673ffcff003ffeff03e53fe73ff8ff05e03aaaaab0002501601ffcff15e739fff9f07ff27f3fffffe8707031e7303ff07fff3ff8ff05e03aaaaab0002501601ffcff15e739fff9f07ff27f3fffffe8707031e7303ff07fff3ff8ff05e03aaaaab0002401601ffcff01e739fdff0fe67e7fe03fe73f2739e727fff8fffe79f8ff05e03aaaaab0002401601ffcff01e739fdff0fe67e7fe03fe73f2739e727fff8fffe79f8ff05e03aaaaab0002401601ffcff07e739fff9f07fe039feff09e7f02739e7307ff07ff9f7ff05e03aaaaab0002401601ffcff07e739fff9f07fe039feff09e7f02739e7307ff07ff9f7ff05e03aaaaab0002401601ffcff01f279fdff01fe67feff0ae7e72739e73f3fe53fe7f9f8ff05e03aaaaab0002401601ffcff01f279fdff01fe67feff0ae7e72739e73f3fe53fe7f9f8ff05e03aaaaab0002401601ffcff01f8f0fdff0ffe603fffffe7f03030f0607ffdffe039f8ff05e03aaaaab0002401601ffcff01f8f0fdff0ffe603fffffe7f03030f0607ffdffe039f8ff05e03aaaaab0001001601fe7ff00f3f8ff05e03aaaaab0001001601fe7ff00f3f8ff05e03aaaaab0002201601ffbff01f07ffeff02fc707ffcff0039feff03fdfff07ff8ff05e03aaaaab0002201601ffbff01f07ffeff02fc707ffcff0039feff03fdfff07ff8ff05e03aaaaab0002301601ffbff01e73ffeff03f8673ff9fdff003ffeff03e53fe73ff8ff05e03aaaaab0002301601ffbff01e73ffeff03f8673ff9fdff003ffeff03e53fe73ff8ff05e03aaaaab0002501601ffcff15e73f3ff9f07ff27f3ff9ffe8707031e7303ff07fff3ff8ff05e03aaaaab0002501601ffcff15e73f3ff9f07ff27f3ff9ffe8707031e7303ff07fff3ff8ff05e03aaaaab0002501601ffcff02e73e7ffeff0fe67e7fe07fe73f2739e727fff8fffe79f8ff05e03aaaaab0002501601ffcff02e73e7ffeff0fe67e7fe07fe73f2739e727fff8fffe79f8ff05e03aaaaab0002401601ffcff14e739fff9f07fe039fff9ffe7f02739e7307ff07ff9f7ff05e03aaaaab0002401601ffcff14e739fff9f07fe039fff9ffe7f02739e7307ff07ff9f7ff05e03aaaaab0002401601ffcff01f267fdff0ffe67fff9ffe7e72739e73f3fe53fe7f9f8ff05e03aaaaab0002401601ffcff01f267fdff0ffe67fff9ffe7e72739e73f3fe53fe7f9f8ff05e03aaaaab0002501601ffcff02f8e03ffeff0ffe603fffffe7f03030f0607ffdffe039f8ff05e03aaaaab0002501601ffcff02f8e03ffeff0ffe603fffffe7f03030f0607ffdffe039f8ff05e03aaaaab0001001601fe7ff00f3f8ff05e03aaaaab0001001601fe7ff00f3f8ff05e03aaaaab0001c01601ffeff0ce02f207ffffcfde730e0273df9edff05e03aaaaab0001c01601ffeff0ce02f207ffffcfde730e0273df9edff05e03aaaaab0001c01601ffeff0ce7e7273ffff9e52739f9e7253cedff05e03aaaaab0001c01601ffeff0ce7e7273ffff9e52739f9e7253cedff05e03aaaaab0001d01601ffeff0de7e3273ffff3f06739f9e7307e7feeff05e03aaaaab0001d01601ffeff0de7e3273ffff3f06739f9e7307e7feeff05e03aaaaab0001d01601ffeff0de0602739fff3f8e539f9e038fe7feeff05e03aaaaab0001d01601ffeff0de0602739fff3f8e539f9e038fe7feeff05e03aaaaab0001d01601ffeff0de7e6273ffff3f06039f9e7307e7feeff05e03aaaaab0001d01601ffeff0de7e6273ffff3f06039f9e7307e7feeff05e03aaaaab0001c01601ffeff0ce7e72739fff9e52739f9e7253cedff05e03aaaaab0001c01601ffeff0ce7e72739fff9e52739f9e7253cedff05e03aaaaab0001c01601ffeff0ce027a079fffcfdefb0f9e73df9edff05e03aaaaab0001c01601ffeff0ce027a079fffcfdefb0f9e73df9edff05e03aaaaab0001001601ffbff00f3e4ff05e03aaaaab0001001601ffbff00f3e4ff05e03aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043aaaaab0000a0060db00043ffffff0000a0060db00043ffffff0000a0060db000430000030000a0060db000430000030000a0060db0004303ff030000a0060db0004303ff03000170060fd000b1f800600060f80000e030006eb00fd300000170060fd000b1f800600060f80000e030006eb00fd300000170060fd000b18c000000618c00006060003eb00fd30000098002c00f00000011c015800f00000011c015500f00000011c01550001170060fd000b18c000000618c00006060003eb00fd300000180060fd000c18cf8e1f9f98d8cf860c178180ec00fd300000180060fd000c18cf8e1f9f98d8cf860c178180ec00fd3000001a0060fd000c1f80c618c618d8c0c60c18c186ec000433f03f30001a0060fd000c1f80c618c618d8c0c60c18c186ec000433f03f30001a0060fd000c180fc618c618d8cfc60c180180ec000430c00c30001a0060fd000c180fc618c618d8cfc60c180180ec000430c00c3000180060fd000c1818c618c6d8cd98c606180306ec00fd300000180060fd000c1818c618c6d8cd98c606180306ec00fd3000001a0060fd000c180fcf18c38f870fcf03180606ec0004300cc030001a0060fd000c180fcf18c38f870fcf03180606ec0004300cc030000e0060f100000cec000430030030000e0060f100000cec000430030030000a0060db000430000030000a0060db0004300000300007007fd8ff01f00007007fd8ff01f00014036000003ffdff00eae6aa07e00000300000300014036000003ffdff00eae6aa07e00000300000300014036007003efd0000eae6aa07e00e0033ff00300014036007003efd0000eae6aa07e00e0033ff0030001403601b003efd0000eae6aa07e00d8033030030001403601b003efd0000eae6aa07e00d80330300300014036063fe3efd0000eae6aa07e7fc603303ff300014036063fe3efd0000eae6aa07e7fc603303ff300014036180063efd0000eae6aa07e60018330303300014036180063efd0000eae6aa07e60018330303300014036600063efd0000eae6aa07e6000633ff03300014036600063efd0000eae6aa07e6000633ff03300014036180063efd0000eae6aa07e60018306003300014036180063efd0000eae6aa07e60018306003300014036063fe3efd0000eae6aa07e7fc60306003300014036063fe3efd0000eae6aa07e7fc6030600330001403601b003efd0000eae6aa07e00d8030600330001403601b003efd0000eae6aa07e00d80306003300014036007003efd0000eae6aa07e00e00307fff300014036007003efd0000eae6aa07e00e00307fff300014036000003efd0000eae6aa07e00000300000300014036000003efd0000eae6aa07e00000300000300014036000003ffdff00eae6aa07e00000300000300014036000003ffdff00eae6aa07e00000300000300007007fd8ff01f00007007fd8ff01f00002d500a0008fa00083ff}\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Break Points}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Break Points\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Next let's look at how to set break points}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 break points}}}{\fs20 .  First use the Stop command to stop the program (if it hasn't already completed), and then select the program line containing the call to PaintOval.  Now choose Set/Clear Break Point from the Debug menu.  A purple X will appear to the left of the PaintOval line, indicating it is a break point.  Now select Trace from the Debug menu.  Execution stops at the PaintOval line.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 \par A break point will always cause the program to stop \endash  even if it was executing at full speed.  Break points are especially useful for debugging large programs.  You can set a break point on the first line of the area you want to examine, then execute the rest of the program at full speed.  Execution will be suspended when you reach the break point.\par Another use of break points is when you suspect that a certain portion of your program is not being executed at all.  By setting a break point, you can check where your program quits executing, and then determine if this is in the location that you thought was not being reached.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Debugging a Program With More Than One Subroutine}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Debugging a Program With More Than One Subroutine\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are several features of the debugger that are only useful in programs that have more than one subroutine.  The bull's eye program we have been using so far doesn't have any subroutines, so we will need to switch to a program that does.  If you haven't already done so, stop the bull's eye program.  After you get the main menu back, close the graphics window and the bull's eye program's source window, and then open the file Sort.mod.  Like the bull's eye program, the sort program is in the Samples folder.  The sort program compares two simple sort procedures by sorting the same array of integers using each routine.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Profile Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Profile Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 One of the advanced features of the debugger that can help you improve a program is the profiler.  The profiler collects statistics about your program to help you find bugs and "hot spots."  A hot spot is a place in your program that takes a long time to execute compared with the rest of the program.  You may have heard of a famous rule of thumb in programming which states that a program spends 90% of its time in 10% of its code.  The 10% of the code is the hot spot, and knowing where it is can help you speed up your program.\par As you can see, the sort program you just opened has two subroutines, named ShellSort and BubbleSort.  Shrink the window to about half its width.  Pull down the Debug menu and select the Profile command.  This turns the profiler on.  Next, use the Compile to Memory command to compile and execute the program, just as you did with the bull's eye program.  After the program compiles and executes, you will see the profiler's statistics printed in the shell window.  The profiler returns the following information:}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profiler}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The number of times each subroutine and main program was called.\par 2.\tab The number of heartbeats while in each subroutine and the main program.\par 3.\tab The percent of heartbeats for each subroutine and main program compared to the total number of heartbeats.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This information is in columns, and won't all be visible unless you expand the size of the shell window.  If you don't see three columns of numbers after the names of the subroutines, make the shell window larger.\par The number of times a subroutine is called is more useful than it seems at first.  For example, let's say you are testing a program that reads characters from a file and processes them \endash  a spelling checker, perhaps.  If you know that the test file has 3278 characters, but the subroutine you call to read a single character is called 3289 times, you know right away that there is a problem.  In addition, if you are really calling a subroutine 3278 times, and the subroutine is a short one that is only called from a few places, you might want to consider placing the few lines of code "in-line," replacing the subroutine calls.  Your program will get larger, and perhaps a little harder to read, but the improvement in execution speed could make these inconveniences worthwhile.\par The sort program only calls each sort one time, so the first column of information isn't very useful in this example.  We also see, however, that the sort program spent about 30% of its time in the BubbleSort subroutine, about 32% of its time in the ShellSort routine, and about 38% of its time in the main program.  At least for this type of data, then, the bubble sort is the better choice.  You should be aware that the statistics generated by the profiler are based on a random sampling.  It can be quite accurate for some types of programs, and very unreliable for others.  To get the best results, run a program several times, and try to use input data that will cause it to execute for several seconds to a few minutes.  The larger the sample, the better the results will be.\par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Step Through Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Step Through Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step through command}}}{\fs20 Two commands, Step Through and Goto Next Return, are designed to make debugging subroutines easier. The Step Through command is used to execute subroutines at full speed.  For instance, many times when you are writing a new program, you may have problems with one or more of the subroutines, but you know that other subroutines are working fine.  You would like to be able to pass quickly through the working routines, and then slow down and step through the problem areas of the code.  This is the reason for the Step Through command.\par To see how the Step Through command works, let's debug the Sort.mod program.  If you pull down the Debug menu, you will see that the Step Through, Go to Next Return, and Stop items are all dimmed, meaning that they cannot be selected at this time.  This is because there is nothing to step through or stop, and no return to go to.  \par Pull down the Debug menu and select the Step command.  Sort.mod is compiled and linked, and then our step arrow appears next to the for loop, which is the first statement in the main program.  To get beyond the for loop, select Step eleven times.  The step arrow is now next to the line containing the call to the ShellSort subroutine.  Now pull down the Debug menu and select Step Through.  There is a momentary pause, and then the arrow advances to the next line, another for loop.  The Step Through command has just executed the ShellSort subroutine at full speed.  If we now single-step through the for loop, we will see the sorted array values printed in the shell window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Goto Next Return Command}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Goto Next Return Command\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto next return command}}}{\fs20 The Goto Next Return command is useful when you are only debugging a portion of a subroutine.  To see how this command works, single-step through the statements in the main program until you reach the line containing the call to the BubbleSort routine.  Single-step once more to reach the beginning of the BubbleSort subroutine.  Now select Go to Next Return from the Debug menu.  The BubbleSort routine is executed, and then the step arrow appears to the left of the line following that which called the BubbleSort function.  To verify execution of the subroutine, we could use Step, Step Through, Go, or Trace to see the sorted array displayed in the shell window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Viewing Program Variables}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Viewing Program Variables\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \clvertalt\cltxlrtb \cellx4680\clvertalt\cltxlrtb \cellx7920\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 Watching a program execute, and seeing exactly when output is produced, can be very useful.  The debugger has another ability, though, which is even more important:  you can watch the values of the internal variables.}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:variables}}}{\fs20 \par To see how this works, pull down the Windows menu and select the Variables command.   The desktop brings up a Variables window in the center of the screen, like the one pictured to the right.  (The window you will see won't have any variable names in it.)}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables command}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 \cell }\pard \qr\widctlpar\intbl\adjustright {\par }{{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw270\pich152\picwgoal5400\pichgoal3040\macpict\bliptag88307961\blipupi72{\*\blipuid 054378f9bf0516b681dc75a89cc14c7c}077d000000000098010e1101a00082a0008e01000a00000000030802809800220000000000980110000000000098010e000000000098010e000102df0006007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f80b056000c0018003e60000180b056000c0018003e60000180e086020c0818183000006e90000180e086020c0818183000006e90000180b056060c26183c3e60000180b056060c26183c3e60000180f096020ca899ffb3f87ce3eea0000180f096020ca899ffb3f87ce3eea0000180f096060c0418ff336ccc633ea0000180f096060c0418ff336ccc633ea0000180f096222c081866336ccc633ea0000180f096222c081866336ccc633ea0000180f096264c04187e336ccc633ea0000180f096264c04187e336ccc633ea0000180f0960a0c0818ff336c7cf33ea0000180f0960a0c0818ff336c7cf33ea0000180b056060c0418e73e60000180b056060c0418e73e60000180b056000c0018003e60000180b056000c0018003e600001806007fe1ff00f806007fe1ff00f8090060e400031ffffff8090060e400031ffffff811036003cc0ff80001c1e0f200031800001811036003cc0ff80001c1e0f2000318000018110360030cc3f9000103c3f1000318018018110360030cc3f9000103c3f1000318018018110361f30cc3f80001c3e0f2000318066018110361f30cc3f80001c3e0f20003180660180e0363330cc3f80001c330f200fd180e0363330cc3f80001c330f200fd18110363330fc3f80001c330f2000318600618110363330fc3f80001c330f20003186006181103633300c3f80001c330f2000319f81f981103633300c3f80001c330f2000319f81f980f0361f300c3f9000203f1e0f200fd180f0361f300c3f9000203f1e0f200fd1809036003c00fe700fd1809036003c00fe700fd18060060e400fd18060060e400fd180f016180f7000103e0f10003181ff8180f016180f7000103e0f10003181ff8180d0060f6000003f00003180000180d0060f6000003f00003180000180f016380f7000103e0f100031ffffff80f016380f7000103e0f100031ffffff80e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180f016180f700010330f10003180000180f016180f700010330f10003180000180f0163c0f7000101e0f10003180000180f0163c0f7000101e0f1000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e40003181ff818090060e40003181ff818060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18090060e4000319f81f98090060e4000319f81f98090060e4000318600618090060e4000318600618060060e400fd18060060e400fd18090060e4000318066018090060e4000318066018090060e4000318018018090060e4000318018018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e4000319ff8018090060e4000319ff8018090060e4000319818018090060e4000319818018090060e400031981ff98090060e400031981ff98090060e4000319818198090060e4000319818198090060e4000319ff8198090060e4000319ff8198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e40003183fff98090060e40003183fff98090060e4000318000018090060e4000318000018090060e4000318000018090060e400031800001806007fe1ff00f806007fe1ff00f802df00a0008fa00083ff}}{\f12 \par }{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 The rectangle beneath the title bar of the Variables window contains three boxes, and an area to the right of the boxes where the name of the currently executing subroutine is displayed.  Drag the Variables window out of the way of the other windows on the desktop, and then select the source file window.\par We can't enter any variables into the Variables window unless we are executing a program.  This makes intuitive sense \endash  memory for variables isn't allocated until run-time.  The first two boxes control which subroutine we are looking at, while the third is a command button that displays all of the simple variables.  Likewise, these boxes are dimmed until they can be used.\par To see how to set up the variables we would like to view, start stepping through the program by using the Step command.  You should be at the first line in the main program.  Click anywhere in the Variables window below the title bar and function-name bar, and to the left of the scroll control.  (This area is called the content region of the window.)  A line-edit box will appear, with a flashing insertion point.  Let's enter one of the main program's variables, a[4], and then press }{\outl\fs18 return}{\fs20 .  After the carriage return, we see the current value of a[4] displayed, which is zero.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 You can enter new variable names by clicking in the content region of the Variables window, and then typing in the name.  You can change an existing variable in the window by clicking on its name, and then using the line editor to make the necessary modifications.\par Typing the name of a variable works great when we are trying to look at very specific things, like a particular element of an array, or if we just want to look at a few variables.  It\rquote s a little tedious to type the names of each and every variable, though.  If you click on the third box \endash  the one with a star \endash  all of the simple variables will be displayed in the window.  For arrays, records or pointers, though, you still have to type the specific value you want to see.\par Continue stepping through the program, and watch what happens when the program enters the ShellSort procedure.  The name ShellSort appears in the information bar of the Variables window, the up-arrow can be selected, and the variable a[4] vanishes.  If you click on the up arrow to the left of the ShellSort procedure name, you will see the variables display for the main program, and the down arrow in the Variables window can be selected.  The variable a[4], which is defined at the main program level, also reappears.  If you click on the down arrow, the Variables window switches back to the ShellSort display.  You can enter any of the ShellSort variable names whose values you wish to see whenever the program is executing in this subroutine.\par If you haven't finished executing the program, stop it now using the Stop command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 The debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  is capable of displaying any scalar quantity.  Scalar variables include integers, real numbers, strings, pointers, booleans, and characters.  Integers, reals, and strings are stored internally in a variety of formats; the debugger can display any of these formats.  The debugger can also show values pointed to by a pointer, fields within a record, or elements of an array, so long as the actual thing you are trying to display is ultimately a single value.  For example, you can use\par \par }{\f6\fs18 r.h1\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 to display one of the fields within the rectangle record in the bull\rquote s eye program, although you cannot just type }{\f6\fs18 r}{\fs20  to try to display the entire record.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The rules you use to type complex expressions are covered in detail in Chapter 7, but some simpler rules of thumb are probably all you need.  First, array subscripts must always be constant values, not expressions or variables.  To look at the value of a pointer, type its name; to look at the value the pointer points to, type the name followed by ^, just like you would in a Modula-2 program.  You can use }{\f6\fs18 ^.}{\fs20  to look at a field in a record that is pointed to by a pointer, just like you do in Modula-2.  Finally, you can use pointer operators (}{\f6\fs18 ^}{\fs20 ), field operators (the }{\f6\fs18 .}{\fs20  character) and array subscripts in combination.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 \par The debugger is case insensitive, which is different from the Modula-2 language.  In Modula-2, MINE and Mine are two different variable names, but the debugger doesn't distinguish between the two.  When using the debugger, it's a good idea not to depend on the case of variable names.  If you do end up with two variable names that differ only in the case of the characters, the debugger will still work, but you will only be able to look at one of the two variables.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:case sensitivity}}}{\fs20 \par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Samples Disk}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Samples Disk\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 One of the disks that comes with ORCA/Modula-2 is filled with samples.  These sample programs are not installed when you install ORCA/Modula-2, although you can certainly copy the samples to your hard disk if you want to keep them handy.\par The samples disk is chock-full of actual Modula-2 programs, some of which illustrate useful programming techniques, some of which are used later in Chapter 4 to illustrate the various programming environments on the Apple\~II}{\fs18 GS}{\fs20 , and some of which are just plain fun.  If you have a question about how to do something on the Apple\~II}{\fs18 GS}{\fs20 , you might look on the samples disk first \endash  there just might be a program on the samples disk that does exactly what you are trying to do.\par }\pard \widctlpar\adjustright {\*\bkmkend bk0}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop development environment}{\rxe bk0}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 3 - Compiler Directives\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 3 \endash  Compiler Directives\par }\pard \keepn\widctlpar\adjustright {\fs20 {\*\bkmkstart bk1}\par \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 3 \endash  Compiler Directives\tcl1}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 What's a Compiler Directive?}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 What's a Compiler Directive?\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you learn to write programs in Modula-2, most books cover relatively straightforward text-based programs that can be written using standard Modula-2.  You don't need to use compiler directives in such simple programs.  Later, as you develop more experience, you start to wish the compiler performed just a little differently.  If the compiler generates code to check sub ranges, but you are writing time critical code, you might not want the compiler to generate the extra code.  If you are trying to write a desk accessory on the Apple II}{\fs18 GS}{\fs20 , you need a compiler that will generate a special header.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directives}}}{\fs20 \par Compiler directives are instructions to the compiler.  They give you a way to tell the compiler to do something in a slightly different way than it normally does.  With compiler directives, you can actually ask ORCA/Modula-2 to generate range checking code, or create a desk accessory.  This chapter lists the compiler directives used in ORCA/Modula-2, and briefly describes what they are for.  While you don't need to be intimately familiar with each of the compiler directives to use the system, it is important that you know that they exist, and basically what they do.  That way, you will end up saying to yourself "let's see, to make the compiler do...," rather than "gee, it's to bad the compiler can't..."\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 How Directives are Coded}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 How Directives are Coded\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directives\:see compiler directives}{\txe }}}{\v\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\fs20 Compiler directives under ORCA/Modula-2 follow a common convention.  They look very much like a comment, except that the character right after the opening comment character is a dollar sign ($).  Most of them can be used anywhere in the source file. It is important to note that compiler directives are case-sensitive.  This means that the compiler will not recognize them unless you use the correct case mixture.\par The following example shows how to save the object module to the file MYPROG.  The function of the directives themselves will be explained later \endash  this example is simply to show you the correct format.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$Keep 'MYPROG'*)\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 A Brief Summary of ORCA/Modula-2 Compiler Directives}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 A Brief Summary of ORCA/Modula-2 Compiler Directives\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The various compiler directives are explained in detail later in this book.  All of the compiler directives are described in Chapter 21, and many are explained in the next chapter, which outlines the various kinds of programs you can write with ORCA/Modula-2.  The table you see below gives you a brief overview of the compiler directives so you know what is available.\par \par }\pard \qj\li360\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 directive\tab use\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 CDEV\tab Used to create Control Panel Devices (CDevs).  CDevs are small programs executed by Apple's Control Panel NDA; they are usually used to configure your computer or set software options.  Chapter 4 discusses CDevs in more detail.\par ChainTo\tab The ChainTo directive tells the compiler to open a new source file.  It's generally used for small, multi-lingual programs.  For example, if the file you append is an assembly language source file containing a few assembly language subroutines, the ORCA system will automatically switch to the ORCA/M assembler to assemble the new file.\par DataBank\tab }{\pard\plain \qj\fi-1800\li2160\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox}}}{\fs20 When you are using the Apple\~II}{\fs18 GS}{\fs20  toolbox, there are a few cases where you need to define a function that will be called by the toolbox itself.  Modula-2 expects a register called the databank register to be set in a specific way, though, and the toolbox does not set the databank register.  This directive tells ORCA/Modula-2 to set the databank register properly, something it normally does not need to do.\par Dynamic\tab You can create programs that aren't all in memory at one time.  These programs are broken up into more than one piece; each piece is called a segment.  The Dynamic directive tells the compiler that the subroutines that follow it should be put in a segment that will be left on the disk until it is needed.\par INIT\tab The INIT directive is currently another name for the RTL directive.  It is used to create Inits, which are programs that get executed as the computer boots.  See Chapter 4 for more information about Inits.\par Keep\tab The Keep directive lets you hard code a specific keep name in the source file for your program.\par NDA\tab Used to create New Desk Accessories (NDAs).  NDAs are the small programs available under the Apple menu in most desktop programs.  NDAs are discussed in Chapter 4.\par NILCheck\tab When this check is enabled, the compiler generates code that checks for dereferencing a NIL pointer.  This directive may not be used within the scope of a procedure.\par NoImp\tab This directive tells the Modula-2 compiler that a module was create in some language other than Modula-2, and doesn't have an implementation procedure.  For example, Apple's tools are declared in modules; this directive is used with Apple's tool header files.\par OverflowCheck\tab Causes the compiler to generate code that ensures that the result of an expression does not overflow (meaning: go outside the legal bounds) the base type of the expression.\par Pascal\tab ORCA/Modula-2 uses a parameter passing mechanism that is a little different from the other ORCA languages.  The Pascal directive lets you tell ORCA/Modula-2 to use the standard ORCA parameter passing mechanism for an external procedure.\par RangeCheck\tab Causes the compiler to generate code that flags an error if you assign a value to a variable that is outside of the range of allowed values for the variable.  This range is determined by the base type of the variable.  See the chapters on data types for a specification of the legal range of each data type.\par RTL\tab Used to create programs that exit with an rtl instruction instead of using a GS/OS Quit call.  See INIT.\par Segment\tab Programs on the 65816 can be any size, but each piece of the program (called a segment) has to be smaller than 64K.  This directive let's you break the program up into more than one segment.\par StackCheck\tab When turned on, the compiler generates code immediately after the procedure entry code to ensure that the programs stack has not been exceeded.  This directive may not be used within the scope of a procedure.\par StackSize\tab Local variables and some information used as functions are called are stored in a special area of memory called the stack.  If your program uses too much stack space, it could crash or cause other programs (like PRIZM) to crash.  By default, your program has 4K of stack space; this directive is used to increase or decrease the stack space.\par }\pard \widctlpar\adjustright {\*\bkmkend bk1}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler directives}{\rxe bk1}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 4 - Programming on the Apple II}{\f5\fs18 GS}{\f5\fs20 \par }}\pard\plain \keepn\widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 4 \endash  Programming on the Apple\~II}{\b\scaps\fs36 gs}{\b\fs36  \par }{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 4 \endash  Programming on the Apple\~IIGS\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Apple\~II}{\scaps\fs20 gs}{\fs20  is a very flexible machine.  With it, you can write programs in a traditional text environment, in a high-resolution graphics environment, or in a Macintosh-style desktop environment.  ORCA/Modula-2 lets you write programs for all of these environments, and also supports a number of specialty formats, like new desk accessories.  In this chapter, we will look at each of the programming environments in turn, examining how you use ORCA/Modula-2 to write programs, what tools and libraries are available, and what your programs can do in each of the environments.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Text Programs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Text Programs\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\fs20 Text programs are by far the easiest kind of programs to write.  To write characters to the shell window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 , you use the appropriate built-in subroutines, like WriteLn}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 WriteLn}}}{\fs20 .  Input is just as easy \endash  you use built-in subroutines to read characters from the keyboard.  Later, when the shell is covered in detail, you will also see that text programs can be executed as a command from the shell window, or even used from the text based programming environment.\par As an example, we'll create a simple text program to show how many payments will be needed to pay off a loan for any given interest rate, loan amount, and payment.  The variables are placed at the top of the program as constants, so there is no input.\par This is actually the first time we have created a program from scratch in this manual, so we will go over the steps involved fairly carefully.  If you aren't in the development environment, boot it now.  Pull down the File menu and use the New command to open a new program window.  Be sure and check the languages menu - MODULA2 should be checked.  If it is not, select MODULA2 from the languages menu.  Now type in the program shown below.  If you have trouble using the editor, glance through Chapter 7 for help.\par (Note:  Although the point of this example is to show you how to type in a program from scratch, we should point out that the following example is also on the samples disk in the Text.Samples folder.)\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 (*-----------------------------------------------*)\par (*                                               *)\par (*  Financing                                    *)\par (*                                               *)\par (*  This program prints the balance on an        *)\par (*  account for monthly payments, along with the *)\par (*  total amount paid so far.                    *)\par (*                                               *)\par (*-----------------------------------------------*)\par \par MODULE Finance;\par \par FROM InOut IMPORT WriteString, WriteFixPt, WriteInt, WriteLn;\par \par CONST\par    loanAmount    = 10000.0;      (*amount of the loan*)\par    payment       = 600.0;        (*monthly payment*)\par    interest      = 15;           (*yearly interest (as %)*)\par \par VAR\par    balance: REAL;                (*amount left to pay*)\par    month: INTEGER;               (*month number*)\par    monthlyInterest: REAL;        (*multiplier for interest*)\par    paid: REAL;                   (*total amount paid*)\par \par BEGIN\par    (*set up the initial values*)\par    balance := loanAmount;\par    paid := 0.0;\par    month := 0;\par    monthlyInterest := 1.0+FLOAT(interest)/1200.0;\par \par    (*write out the conditions*)\par    WriteString('Payment schedule for a loan of ');\par    WriteFixPt(loanAmount, 10, 2);\par    WriteLn;\par    WriteString('with monthly payments of ');\par    WriteFixPt(payment, 5, 2);\par    WriteString(' at an');\par    WriteLn;\par    WriteString('interest rate of ');\par    WriteInt(interest, 1);\par    WriteString('%.');\par    WriteLn;\par    WriteLn;\par    WriteString('          month        balance    amount paid');\par    WriteLn;\par    WriteString('          -----        -------    -----------');\par    WriteLn;\par \par    (*check for payments that are too small*)\par    IF balance*monthlyInterest-balance >= payment THEN\par       WriteString('The payment is too small!');\par       WriteLn;\par    ELSE\par       WHILE balance > 0.0 DO\par          (*add in the interest*)\par          balance := balance*monthlyInterest;\par          (*make a payment*)\par          IF balance > payment THEN\par             balance := balance-payment;\par             paid := paid+payment;\par          ELSE\par             paid := paid+balance;\par             balance := 0.0;\par          END;\par          (*update the month number*)\par          month := month+1;\par          (*write the new statistics*)\par          WriteInt(month, 15);\par          WriteString('     ');\par          WriteFixPt(balance, 10, 2);\par          WriteString('     ');\par          WriteFixPt(paid, 10, 2);\par          WriteLn;\par       END;\par    END;\par END Finance.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\fs20 Once the program is typed in, you will need to save it to disk.  The best choice is a work folder somewhere on your hard drive.  The choice of a file name is important.  Because of the way the ORCA system deals with multi-lingual compiles and partial compiles, and because of some other naming conventions we won't go into now, it's best to pick a name for your program that is ten characters or less, then add .MOD to the name.  For this particular program, save it as Finance.mod.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command}}}{\fs20 With the program safely on a disk, you are ready to compile it.  As with the bull's eye program, you compile the program using Compile to Memory command from the Run menu.  If you didn't type the program in properly, an attention box will appear with the error message.  When you click OK, you will find the cursor on the exact spot where the error occurred \endash  simply make the correction and recompile.  Once the program compiles, it will print the results in the shell window.  Unless you shrink the window with your program, you won't see the source window, but the output is still there.  You will need to move the shell window and grow it to see all of the results.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\fs20 One of the classic interactive computer games of all time will serve as our second example, giving us a chance to explore text input and accessing the Apple\~II}{\fs18 GS}{\fs20  toolbox.  In this simple game, the computer will pick a distance to a target, and you pick a firing angle for a cannon.  The computer then lets you know if you hit the target, or if you missed, by how much.  The listing is show below.  Go ahead and type it in, but don't compile it yet.\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 (*-----------------------------------------------*)\par (*                                               *)\par (*  Artillery                                    *)\par (*                                               *)\par (*  This classic interactive text game lets you  *)\par (*  pick the angle of your artillery gun in      *)\par (*  an attempt to knock out the enemy position.  *)\par (*  The computer picks a secret distance.  When  *)\par (*  you fire, you will be told how much you      *)\par (*  missed by, and must fire again.              *)\par (*                                               *)\par (*-----------------------------------------------*)\par \par MODULE Artillery;\par \par FROM SYSTEM IMPORT ADR;\par FROM MiscToolSet IMPORT ReadASCIITime;\par FROM InOut IMPORT ReadReal, WriteInt, WriteLn, WriteString;\par FROM MathLib0 IMPORT sin, cos;\par \par CONST\par    blastRadius = 50.0;            (*max distance from target to get a hit*)\par    degreesToRadians = 0.01745329; (*convert from degrees to radians*)\par    velocity = 434.6;              (*muzzle velocity*)\par \par VAR\par    angle: REAL;                   (*angle*)\par    asciiTime: ARRAY[1..20] OF CHAR; (*time - for random #s*)\par    distance: REAL;                (*distance to the target*)\par    done: BOOLEAN;                 (*is there a hit, yet?*)\par    time: REAL;                    (*time of flight*)\par    tries: INTEGER;                (*number of shots*)\par    x: REAL;                       (*distance to impact*)\par    vx,vy: REAL;                   (*x, y velocities*)\par \par BEGIN\par    (*choose a distance to the target*)\par    ReadASCIITime(ADR(asciiTime));\par    distance := FLOAT(((ORD(asciiTime[16])-0B0H)*10\par       + (ORD(asciiTime[17])-0B0H))*100);\par \par    (*not done yet...*)\par    done := FALSE;\par    tries := 1;\par \par    (*shoot 'til we hit it*)\par    REPEAT\par       (*get the firing angle*)\par       WriteString('Firing angle: ');\par       ReadReal(angle);\par       WriteLn;\par \par       (*compute the muzzle velocity in x, y*)\par       angle := angle*degreesToRadians;\par       vx := cos(angle)*velocity;\par       vy := sin(angle)*velocity;\par \par       (*find the time of flight*)\par       (*(velocity = acceleration*time, two trips)*)\par       time := 2.0*vy/32.0;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18       (*find the distance*)\par }\pard \fi360\widctlpar\adjustright {\f6\fs18       (*(velocity = distance/time)*)\par       x := vx*time;\par \par       (*see what happened...*)\par       IF ABS(distance-x) < blastRadius THEN\par          done := TRUE;\par          WriteString('A hit, after ');\par          WriteInt(tries, 1);\par          IF tries = 1 THEN\par            WriteString(' try!');\par          ELSE\par            WriteString(' tries!');\par          END;\par          WriteLn;\par          CASE tries OF\par             1: WriteString('(A lucky shot...)');\par           | 2: WriteString('Phenomenal shooting!');\par           | 3: WriteString('Good shooting.');\par             ELSE WriteString('Practice makes perfect - try again.');\par          END; (*case*)\par          WriteLn;\par       ELSIF distance > x THEN\par          WriteString('You were short by ');\par          WriteInt(TRUNC(distance-x), 1);\par          WriteString(' feet.');\par          WriteLn;\par       ELSE\par          WriteString('You were over by ');\par          WriteInt(TRUNC(x-distance), 1);\par          WriteString(' feet.');\par          WriteLn;\par       END;\par       tries := tries+1;\par    UNTIL done;\par END Artillery.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}}}{\fs20 One of the problems with interactive text programs is that, if you can't see the input, you can't run the program.  Before compiling the artillery program, be sure to arrange your windows so you can see the shell window.\par By now you've seen that the shell window will open automatically when the program starts to compile, but in a case like this one, you need to open the shell window and resize it before you start to compile the program.  There's nothing special about the shell window the system opens for you, so you could just create a new window and change the language type to Shell.  You can also open the system's shell window early, though, using the Window menu's Shell Window command.\par For the artillery program, you might try leaving the program's window at the full width of the screen, but shortening it so the bottom third of the screen is free.  The shell window can be sized to fit in the bottom third of the screen.  This arrangement works very well when both the program and its output use most of the available screen width.\par When you run the program, you will see a prompt for the firing angle followed by a black box.  This black box is the cursor used by interactive text programs.  It lets you know that the input is being read by a program, so normal desktop editing features cannot be used.  If you make a mistake, you can use the }{\outl\fs18 delete}{\fs20  key to back space over your input.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Modula-2 Libraries}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Modula-2 Libraries\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 InOut module}}}{\fs20 Your most important resource for writing programs that run in the text environment are the procedures in the module InOut.  These are prewritten library routines that do common text input and output chores.  This module includes procedures you've seen in several examples, like WriteLn and WriteString.  These procedures and functions are described in Chapter 23.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Console Control Codes}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Console Control Codes\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 console device}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output}}}{\fs20 When you are writing text programs that will execute on a text screen, one of the things you should know about are the console control codes.  These are special characters that, when written to the standard text output device, cause specific actions to be taken.  Using console control codes, you can beep the speaker, move the cursor, or even turn the cursor off.  The console control codes are covered in Appendix D.\par Keep in mind that these console control codes only work with the text screen.  While you can write text programs and execute them from the desktop, you cannot use these console control codes to control the output in the shell window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Stand-Alone Programs}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stand-Alone Programs\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files\:see individual file types}{\txe }}}{\fs20 So far, all of the programs you have created have an executable file type of EXE.  EXE files are special in the sense that the program environment knows it does not have to shut itself down to run the program.  EXE files can also have embedded debug code, and do not have to start the tools for themselves.  Unfortunately, they cannot be executed from the Finder.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 There are two changes you need to make before any of the text programs you have created so far can run from the Finder.  The first is to turn off debug code, which you can do by disabling the "Generate debug code" check box in the Compile dialog.  The other change you must make is to change the file type to S16 in the Link dialog; you do this by selecting the S16 radio button.  In general, you should also turn off the "Execute after linking" option in the Link dialog, since it's a pretty slow process to run an S16 program directly from PRIZM.\par With these changes made, recompile one of your text programs and leave the ORCA environment.  From the Finder, you will now see the hand-in-a-diamond program icon, which tells you that you can run the program from the Finder.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Graphics Programs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Graphics Programs\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A large subset of programs need to display graphics information of some kind, but aren't necessarily worth the effort of writing a complete desktop program.  These include simple fractal programs, programs to display graphs, slide show programs, and so forth.  In this book, these programs are called graphics programs.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Your First Graphics Program}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Your First Graphics Program\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics environment}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 Writing a graphics program with ORCA/Modula-2 is really quite easy.  In general, all you have to do is issue QuickDraw II}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 QuickDraw II}}}{\fs20  commands, and be sure the Graphics window is positioned properly before you run your program.  QuickDraw II is the largest and most commonly used tool in the Apple\~II}{\fs18 GS}{\fs20  toolbox}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  toolbox}}}{\fs20 , so it's also a good place to get started along the road to writing desktop programs.\par To learn about QuickDraw II, you will need a copy of the }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Toolbox Reference , Volume 2}{\fs20 .  This book was written by Apple Computer, and is published by Addison Wesley.  While the toolbox reference manual is a reference, and thus not an easy book to read, it is essential that you have a copy to answer your specific questions about the toolbox.  This section shows a couple of examples so you know how to create graphics programs using ORCA/Modula-2, but there is a lot more to QuickDraw II than you see here.\par To get access to QuickDraw II}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 QuickDraw II}}}{\fs20 , you must include the statement\par \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 FROM}{\v\fs20  statement}{\v\f6\fs18 }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 IMPORT\:see FROM}{\txe }}}{\f6\fs18 FROM QuickDrawII IMPORT LineTo, MoveTo;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 in your program.  This particular FROM statement imports the QuickDraw II LineTo and MoveTo calls.  You can import as many procedures, variables, types or constant as you like, separating each with a comma.  You do have to list all of the identifiers you use in the program, though.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In this example, you see three procedures imported from QuickDraw II, and two more from the math library.\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 MODULE Spiral;\par \par FROM QuickDrawII IMPORT SetPenSize, MoveTo, LineTo;\par FROM MathLib0 IMPORT sin, cos;\par \par VAR\par    r, theta: REAL;\par \par    PROCEDURE Round (x: REAL): INTEGER;\par \par    BEGIN\par    IF x < 0.0 THEN\par       RETURN TRUNC(x - 0.5);\par    END;\par    RETURN TRUNC(x + 0.5);\par    END Round;\par \par BEGIN\par    theta := 0.0;\par    r := 40.0;\par    SetPenSize(2, 1);\par    MoveTo(280, 40);\par    WHILE r > 0.0 DO\par       theta := theta + 3.1415926535/20.0;\par       LineTo(Round(cos(theta)*r*3.0) + 160,\par          Round(sin(theta)*r) + 40);\par       r := r - 0.15;\par    END;\par END Spiral.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Save the program as Spiral.mod.  As with the bull's eye program, reduce the width of your source code window to about half the screen width and open the graphics window before executing the program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Stand-Alone Programs}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stand-Alone Programs\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Any program that uses any of the Apple\~II}{\fs18 GS}{\fs20  toolbox must initialize the tools it uses.  ORCA/Modula-2 automatically initializes several tools, and opens the .CONSOLE device used for text input and output.  Graphics programs, though, are using QuickDraw II, and ORCA/Modula-2 does not automatically start this tool.  Before you can run a graphics program from outside of PRIZM, you will have to learn to start and shut down QuickDraw II.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 FROM}{\v\fs20  statement}{\v\f6\fs18 }}}{\fs20 In the case of simple graphics programs, the easiest way to start QuickDraw II is to use the procedure EZStartGraph}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EZStartGraph procedure}}}{\fs20 .  EZStartGraph uses a single integer parameter to determine the size of screen to use.  This parameter is a scan line control byte, which QuickDraw II uses to determine, among other things, the size of the screen.  For a 640 mode screen, you should pass SCB(80H), which converts the hexadecimal number 80 to an SCB and passes the result as a parameter.  For 320 mode, use SCB(0), instead.  EZStartGraph also returns a value; you need to save this value and pass it to EZEndGraph}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EZEndGraph procedure}}}{\fs20  at the end of the program.  EZEndGraph shuts down QuickDraw II.\par The spiral program is shown below, changed to meet these requirements.  The changes are shown in bold-face.\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 MODULE Spiral;\par \par FROM QuickDrawII IMPORT SetPenSize, MoveTo, LineTo;\par FROM MathLib0 IMPORT sin, cos;\par }{\b\f6\fs18 FROM Common IMPORT SCB;\par FROM ToolLocator IMPORT StartStopRecordPtr;\par FROM EZTools IMPORT EZStartGraph, EZEndGraph;\par }{\f6\fs18 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 VAR\par    r, theta: REAL;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18    }{\b\f6\fs18 ssRec: StartStopRecordPtr;}{\f6\fs18 \par \par    PROCEDURE Round (x: REAL): INTEGER;\par \par    BEGIN\par    IF x < 0.0 THEN\par       RETURN TRUNC(x - 0.5);\par    END;\par    RETURN TRUNC(x + 0.5);\par    END Round;\par \par BEGIN\par    }{\b\f6\fs18 ssRec := EZStartGraph(SCB(80H));}{\f6\fs18 \par    theta := 0.0;\par    r := 40.0;\par    SetPenSize(2, 1);\par    MoveTo(280, 40);\par    WHILE r > 0.0 DO\par       theta := theta + 3.1415926535/20.0;\par       LineTo(Round(cos(theta)*r*3.0) + 160,\par          Round(sin(theta)*r) + 40);\par       r := r - 0.15;\par    END;\par    }{\b\f6\fs18 EZEndGraph(ssRec);}{\f6\fs18 \par END Spiral.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:menu bar while debugging}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20 You can still run this program from the desktop development environment.  The only change you will see is that the menu bar will vanish while the program is executing.  This happens any time you start a tool; the system is allowing your program to draw its own menu bar.  To switch back to the debugger's menu bar while your program is running, click on the double-arrow icon that appears at the right-hand side of your menu bar.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 As with a stand-alone text program, you must remember to turn off debug code and to change the file type to S16.  With these changes in place, you can compile the program, creating an executable file that will run from the Finder.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Programming on the Desktop}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Programming on the Desktop\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk2}Most people we talk to want to write programs that use Apple's desktop interface.  These programs are the ones with }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20 menu bars, multiple windows}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 windows}}}{\fs20 , and the friendly user interface popularized by the Macintosh computer.  If you fall into that group of people, this section will help you get started.  Before diving in, though, we want to let you know what you will need to do to write this kind of program.\par Anyone who tells you that writing desktop programs is easy, or can be learned by reading a few short paragraphs, or even a chapter or two of a book is probably a descendent of someone who sold snake oil to your grandmother to cure her arthritis.  It just isn't so.  Learning the Apple\~II}{\fs18 GS}{\fs20  toolbox well enough to write commercial-quality programs is every bit as hard as learning a new programming language.  In effect, that's exactly what you will be doing.  The Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference Manuals come in four large volumes.  Most of the pages are devoted to brief descriptions of the tool calls \endash  about one call per page.  It takes time to learn about all of those calls.  Fortunately, you don't have to know about each and every call to write desktop programs.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Learning the Toolbox}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Learning the Toolbox\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:learning\bxe }}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As we mentioned, learning to write desktop programs takes about the same amount of time and effort as learning to program in Modula-2.  If you don't already know how to program in Modula-2, }{\i\fs20 learn Modula-2 first!}{\fs20   Concentrate on text and graphics programs until you have mastered the language, and only then move on to desktop programming.\par This doesn't mean that you need to know everything there is to know about Modula-2, but you should feel comfortable writing programs that are a few hundred lines long, and you should understand how to use records and pointers, since the toolbox makes heavy use of these features.\par The toolbox itself is very large.  The }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  Toolbox Reference Manual}{\fs20  is a three volume set that is basically a catalog of the hundreds of tool calls available to you.  These three volumes cover the tools up through System 5.0; the additions through System 6.0.1 are covered in }{\fs20\ul Programmer's Reference for System 6.0.1}{\fs20 .  This four-volume set is an essential reference when you are writing your own toolbox programs.  A lot of people have tried to write toolbox programs without these manuals.  I can't name a single one that succeeded.\par A lot of people have been critical of the toolbox reference manuals because they do not teach you to write toolbox programs, but that's a lot like being critical of the Oxford English Dictionary because it doesn't teach you to write a book.  The toolbox reference manuals are a detailed, technical description of the toolbox, not a course teaching you how to use the tools.  While there are no courses that teach you to write toolbox programs in Modula-2 (at least, not as this book goes to press), Modula-2 is similar enough to Pascal that you can read and easily translate Pascal programs to Modula-2, and there is a good toolbox course for Pascal.  It's called }{\fs20\ul Toolbox Programming in Pascal}{\fs20 .  This self-paced course also includes an abridged toolbox reference manual, so you can learn to use the toolbox before you spend a lot of money buying the four volume toolbox reference manual.\par All of this is not meant to frighten you away.  Anyone who can learn a programming language can learn to write desktop programs.  Unfortunately, too many people approach desktop programming with the attitude, fostered by some books and magazine articles, that they can learn to write desktop programs in an evening, or at most a weekend.  This leads to frustration and usually failure.  If you approach desktop programming knowing it will take some time, but willing to invest that time, you }{\i\fs20 will}{\fs20  succeed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Toolbox Interface Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Toolbox Interface Files\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx2880\tx4320\tx5580\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~IIGS Toolbox\:interface files\bxe }}}{\fs20 As you look through the toolbox reference manuals, you will see that the toolbox is divided into a set of tools, each with its own name.  There is a definition module for each of these tools; it contains definitions for all of the tool calls and data structures used by the tools.\par Here's a list of the current toolbox files and the tool they define.  The name shown is the name you would use in the FROM statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FROM statement}}}{\fs20 ; on disk, the file will have .SYM appended, and be located at 13:M2Defs .}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 M2Defs}}}{\fs20   A few, like GSOS and FINDER, don't technically document the tools, but they are included here for completeness.\par \par }\pard \li1260\keepn\widctlpar\tx3780\adjustright {\pard\plain \li1260\keepn\widctlpar\tx3780\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 toolbox\:interface files}}}{\v\fs20 \par }\pard \li1260\ri1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3780\adjustright {\fs20 FROM Name\tab Tool\par }\pard \li1260\keepn\widctlpar\tx3780\adjustright {\fs20 ACE\tab Audio Compression/Expansion\par }\pard \li1260\widctlpar\tx3780\adjustright {\fs20 Common\tab types and constants\par ControlMana\tab Control Manager\par DeskManager\tab Desk Manager\par DialogManag\tab Dialog Manager\par EventManage\tab Event Manager\par FontManager\tab Font Manager\par GSOSInterfa\tab GS/OS Disk File Manager\par IntegerMath\tab Integer Math Tool Set\par LineEdit\tab Line Edit Tool Set\par ListManager\tab List Manager\par Loader\tab Program Loader\par MemoryManag\tab Memory Manager\par MenuManager\tab Menu Manager\par MIDI\tab MIDI Sound Tools\par MiscToolSet\tab Miscellaneous Tool Set\par NoteSequenc\tab Note Sequencer\par NoteSynthes\tab Note Synthesizer\par ORCAShell\tab ORCA Shell Interface\par PrintManage\tab Print Manager\par QuickDrawII\tab QuickDraw II and QuickDraw Auxiliary\par ResourceMan\tab Resource Manager\par Scheduler\tab Scheduler\par ScrapManage\tab Scrap Manager\par StandardFil\tab Standard File Operations Tool Set\par SoundManage\tab Sound Manager\par TextEdit\tab Text Edit Tool Set\par TextTools\tab Text Tool Set\par ToolLocator\tab Tool Locator\par }\pard \li1260\keepn\widctlpar\tx3780\adjustright {\fs20 WindowManag\tab Window Manager\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Table 4.1:  Summary of Tool Interface Files\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Debugging a Desktop Program}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Debugging a Desktop Program\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx2880\tx4320\tx5580\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright {\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop programs}}}{\fs20 Debugging a desktop program is not much more difficult than debugging a text or graphics program, but there are a few points you need to keep in mind.  These arise from the fact that both the debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 high level language debugger}}}{\fs20  and your program need the mouse, keyboard, and menu bar}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  to function.\par As soon as the debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 high level language debugger}}}{\fs20  decides that your program is a desktop program, you will see your menu bar}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  replace the desktop menu bar.  The debugger makes this decision based on tool startup calls.  If you initialize any tool in Table 4.1 except SANE, the debugger treats your program like a desktop program.  ORCA's windows are still visible, but you can no longer select them.  At the far right of your menu bar, you will see two special icons, created by the debugger.  The first is a footprint and the second is a combined left and right arrow.  The footprint is used to step through your program, one line at a time, without having to return to the desktop.  The arrows are used to return to the desktop to issue some other debugging command.   If you switch to the desktop while you are debugging your program, you will see that the special icons are also in the Desktop's menu bar.  You can select the arrows icon to return to your program.\par You }{\i\fs20 should}{\fs20  }{\i\fs20 not}{\fs20  switch menu bars while your program is creating its menu bar}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20 .  From the time you issue the first Insert Menu tool call until you draw the menu bar, your menu bar is incomplete.  This restriction should not pose any special problems if you are building standard menus, but could be troublesome in the case where you are defining your own menus.  To debug your menu bar routine, then, you will need to limit your debugging activities to clicking on the step icon.\par }{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 A second source of potential trouble lies in trying to debug your window update routine.  Again, you should not switch to the desktop during your update routine, since the debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  might need to use your routine to repaint your windows.  You should use the footprint icon to invoke the Step command to debug your update routine.\par A third problem area regards your program stack.  The debugger will be using your stack, so you need to be sure that you do not use coding tricks that depend on the values below the stack pointer remaining unchanged.  The Modula-2 compiler doesn't do this; it would only happen in your own assembly language subroutines.  You also need to make sure that there are at least 256 bytes of free stack space at all times.\par }{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 The fourth point is that you should not issue a Stop command in the middle of debugging, but instead let your program continue to execute until it reaches its natural conclusion.  This restriction applies to the case where you have started tools that were not started by PRIZM, and a premature abort from your program will leave these tools open.  It is assumed that your program shuts down any tools it starts; the debugger looks over your shoulder and prevents startup calls for tools already initialized, and also prevents shutting down tools it needs.  The debugger}{\pard\plain \qj\fi360\widctlpar\tx2880\tx4320\tx5580\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  does not shut down any extra tools you have initialized.  PRIZM starts the following tools:\par \par }\pard \qj\fi-270\li3420\widctlpar\adjustright {\fs20 \bullet \tab Control Manager\par \bullet \tab Desk Manager\par \bullet \tab Dialog Manager\par \bullet \tab Event Manager\par \bullet \tab Font Manager\par \bullet \tab Line Edit Tool\par \bullet \tab List Manager\par \bullet \tab Memory Manager\par \bullet \tab Menu Manager\par \bullet \tab Print Manager\par \bullet \tab QuickDraw Auxiliary\par \bullet \tab QuickDraw II\par \bullet \tab SANE\par \bullet \tab Scrap Manager\par \bullet \tab Standard File Manager\par }\pard \qj\fi-270\li3420\keepn\widctlpar\adjustright {\fs20 \bullet \tab Tool Locator\par \bullet \tab Window Manager\par }\pard \qj\keepn\widctlpar\tx2880\tx3150\tx4320\tx5580\adjustright {\fs20 \par }\pard \qc\widctlpar\tx2880\tx3150\tx4320\tx5580\adjustright {\fs20 Table 4.2 \endash  Tools started by PRIZM\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Keep in mind that since these tools are already active when your program executes, debugging may not reveal errors associated with failure to load and start these tools.\par A fifth area of trouble is switching to the desktop between paired events in your program.  For example, the code which handles mouse-down events and mouse-up events is usually closely connected.  A switch to the debugger causes a flush of the event queue.  If you switch to the desktop after detecting one kind of event, then return to your program where you await that event's paired ending, your program may go into a state of suspended animation.  You can avoid this problem by carefully considering where switches to the desktop are not dangerous.  Don't switch menu bars if you are in doubt!\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:NDA}}}{\fs20 There are two restrictions on the kind of desktop programs you can debug.  The desktop handles 640 mode only; you should use 640 mode while you are debugging your program.  The second is that the file type of your program can only be EXE or NDA (GS/OS executable file or new desk accessory, respectively).  You should change your program's file type to one of these during debugging, and then change it back to whatever you want after you have the program running.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Writing New Desk Accessories}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Writing New Desk Accessories\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 New desk accessories are those programs which can be selected from the apple menu}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 apple menu}}}{\fs20  of a desktop program.  The principal advantage of a desk accessory is that it can be used from any desktop program which follows Apple's guidelines.  Writing a desk accessory is not hard, but it does require the compiler to generate special code, so you must write a desk accessory in a special way.  For the most part, though, writing a desk accessory uses the same tools and techniques you use to write desktop programs.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NDA directive}}}{\fs20 Your desk accessory starts with the NDA directive.  This directive has seven parameters.  The first four are the names of four subroutines in your program that have special meaning in a desk accessory.  The next two are the update period and event mask.  The last is the name of your desk accessory, as it will appear in the Apple menu.  The format is:\par \par }{\f6\fs18 (*$NDA }{\i\f6\fs18 open close action period eventMask menuLine}{\f6\fs18 *)\par }{\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 open\tab This parameter is an identifier that specifies the name of the function procedure that is called when someone selects your desk accessory from the Apple Menu.  It must return a pointer to the window that it opens.\par \par close\tab This parameter is an identifier that specifies the name of the procedure to call when the user wants to close your desk accessory.  It must be possible to call this function even if open has not been called.\par \par action\tab The action parameter is the name of a procedure that is called whenever the desk accessory must perform some action.  It must declare two parameters.  The first is an integer parameter, which describes the action to be taken.  The second parameter is a pointer to an event record.  See page 5-7 of the }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Toolbox Reference Manual}{\fs20  for a list of the actions that will result in a call to this function.\par \par period\tab This parameter tells the desk manager how often it should call your desk accessory for routine updates, such as changing the time on a clock desk accessory.  A value of 0FFFFH tells the desk manager to call you only if there is a reason; 0 indicates that you should be called as often as possible; and any other value tells how many 60ths of a second to wait between calls. This parameter is treated as a CARDINAL.\par \par eventMask\tab This value tells the desk manager what events to call you for.  See the Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference Manual for details.  ORCA/Modula-2 expects a CARDINAL value for this parameter.\par \par menuLine\tab The last parameter is a string.  It tells the desk manager what the name of your desk accessory is.  The name must be preceded by two spaces.  After the name, you should always include the characters }{\f6\fs20 \\H**}{\fs20 .\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 The body of a Modula-2 module is called once to initialize the module, and again to shut it down.  In a New Desk Accessory, this initialization procedure is called when the Desk Manager makes it's initialization call and shutdown call.  The Desk Manager passes a single value which you access from Modula-2 by reading the variable NDACode.  The value is 0 for a shutdown call, and 1 for a startup call.  NDACode is declared in M2Lib, and must be imported.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 The format for a sample desk accessory, then, is:\par \par }\pard \fi360\widctlpar\adjustright {\pard\plain \fi360\widctlpar\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 NDA directive\: examples}}}{\f6\fs18 (*$NDA Open Close Action 60 0FFFFH '--Clock\\H**'*)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par MODULE SampleDesk;\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 FROM M2Lib IMPORT NDACode;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Open(): GrafPortPtr;\par BEGIN\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 <<<open the window and assign the pointer>>>\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END Open;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Close;\par BEGIN\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 <<<close the window>>>\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END Close;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Action(code: CARDINAL; param: LONGINT);\par BEGIN\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 <<<handle events>>>\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END Action;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 BEGIN\par   IF NDACode = 0 THEN\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    <<<shutdown code>>>\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18   ELSE\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18    <<<startup code>>>\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18   END;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END Clock.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\fs20 Once you have written a desk accessory, you must install it.  For the desk manager to find your desk accessory, it must be located on the boot volume in a directory called SYSTEM:DESK.ACCS.  It also has a special file type, called NDA}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\: NDA}}}{\fs20 .  To create the desk accessory, select the NDA file type from the Link dialog that appears when you use the Link command from the Run menu.  Be sure and turn debugging off for your final compile!\par For a sample desk accessory that illustrates these principles, see Clock.mod on the samples disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Debugging NDAs}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Debugging NDAs\tcl3}}}{\b \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new desk accessories}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger\:new desk accessories}}}{\fs20 Normally, to run a new desk accessory, you install it in the desk accessories folder.  From that time on, the desk accessory is available to any desktop program that supports desk accessories.  When you are developing a desk accessory, though, you don't want to reboot every time you change the program.  Instead, the desktop development environment allows you to execute a new desk accessory just like any other program.  Be sure and use the Link dialog box in the Run menu to change the file type of the file to NDA, though.  If the file type is not set to NDA, the desktop development environment does not know that the file is a desk accessory, and the program will almost certainly crash when you try to execute it.  When you are developing the desk accessory, you do not have to move it to the desk accessories folder, nor do you have to execute it from the Apple menu.  You can also leave the debug code}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20  turned on, and debug the desk accessory just like any other desktop program.  When you execute the desk accessory this way, the development environment simulates the same conditions that the desk accessory will face when it is executed from the Apple menu.\par Once the program is finished, you can turn off debugging and move the program to the desk accessories folder.{\*\bkmkend bk2}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop environment}{\rxe bk2}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Inits}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Inits\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INIT directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Inits}}}{\v\fs20 \par }{\fs20 Initialization programs are a special kind of program that is executed as your computer boots.  There are a number of special requirements for Inits, but only two effect the way you use ORCA/Modula-2.\par When most Modula-2 programs are complete, ORCA/Modula-2 makes sure a GS/OS Quit call is executed; this shuts down the program and returns control to the Finder (or whatever program launcher was used).  Initialization programs must exit with an RTL instruction, instead.  To accomplish this, place an INIT directive at the start of the program.  The INIT directive has no parameters.  The rest of the program looks just like a normal Modula-2 program.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:PIF}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TIF}}}{\fs20 The other special requirement is to set the file type to either PIF (for a permanent initialization program) or TIF (for a temporary initialization program).  In practice, you will also need to use the Rez compiler to create the icon that shows up when the program starts.  Since this means you have at least three steps \endash  compiling the Modula-2 program, compiling the resources, and setting the file type \endash  in practice initialization files are almost always built with script files.\par For an example of a very simple TIF, see the Samples disk.  For more information about the shell and script files, see Chapter 6 and Chapter 8.  The resource compiler is covered in Chapter 10.  For information about writing initialization programs that is not ORCA/Modula-2-specific, see the Apple\~II}{\fs18 GS}{\fs20  File Type Notes for file types $B6 (PIF) and $B7 (TIF).\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Control Panel Devices (CDevs)}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Control Panel Devices (CDevs)\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CDEV directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Control Panel}}}{\v\fs20 \par }{\fs20 You can write Control Panel CDevs with ORCA/Modula-2 with the aid of the CDEV directive.  The format for the CDEV directive is:\par \par }{\f6\fs18 (*$CDEV }{\i\f6\fs18 main}{\f6\fs18 *)\par }{\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 main\tab This parameter is an identifier that specifies the name of the function procedure that is called when the Control Panel calls the CDEV.  This function procedure accepts an integer parameter and two long integer parameters, in that order, and returns a long integer.  The parameters and return value are explained in the references mentioned below.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDV}}}{\fs20 For a description of the parameters and the value returned by the function, along with the other information you need to write CDevs, see the Apple\~II}{\fs18 GS}{\fs20  File Type Notes for file type $C7 (CDV).\par For an example of a simple CDEV, see the Modula-2 Samples folder.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 5 - Writing Assembly Language Subroutines\par }}\pard\plain \keepn\widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 5 \endash  Writing Assembly Language Subroutines\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 5 \endash  Writing Assembly Language Subroutines\tcl1}}}{\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Introduction}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Introduction\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk3}By using the ORCA/M macro assembler with ORCA/Modula-2, it is easy to write assembly language subroutines that can be called from Modula-2 programs.  This chapter describes in detail how this is done.  You do not need to know the information in this chapter to write Modula-2 programs.  To understand all of the information in this chapter, you must already know assembly language and how to use ORCA/M.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Basics}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Basics\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Calling an assembly language subroutine from Modula-2 is actually quite easy.  For our first example, we will take the simplest case: a procedure defined in assembly language that has no parameters and does not use any global variables from Modula-2.\par }\pard \qj\fi360\widctlpar\tx288\tx1152\adjustright {\fs20 The first step is to tell the Modula-2 compiler that the procedure will not appear in the program, but that it will, in fact, be found by the linker.  One of the important things to remember about this is that when you start dealing with procedures and functions defined outside of the Modula-2 part of the program, you will always have to tell the compiler what you are doing.  The compiler is a trusting program - it will always believe you.  The compiler can check the Modula-2 program to make sure that it agrees with your statements about what is defined elsewhere, but it is up to you to make sure that you tell the compiler the truth.  If you lie, on purpose or by accident, the results can be dramatic!  So be careful when you tell the compiler about the procedure.\par We will define a small procedure to clear the keyboard strobe.  This is one of those tasks that is almost impossible to do from Modula-2, yet takes only four lines of assembly language.  You might want to call this procedure from a real program - the effect is to erase any character that the user has typed, but that has not yet been processed by a read statement.\par ORCA/Modula-2 gives you several options when defining external procedures.  When writing procedures in assembler that are to be called by Modula-2 code, it is normal (and in fact desirable) to place them in an external module.\par The Modula-2 program must import the procedure from an external module.  This is how you tell the compiler that the procedure appears outside of the Modula-2 part of the program.  A program that simply calls the procedure would look like this:\par \par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs18 (*$Keep 'MYPROG'*)\par (*$ChainTo 'MYPROG.ASM'*)\par MODULE ClearStrobe;\par FROM MyProg IMPORT Clear;\par \par BEGIN\par  Clear;\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 END ClearStrobe.\par }\pard \qj\widctlpar\tx1152\tx2304\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Once you have typed the program in, save it as ClearStrobe.MOD.  Be sure the file type is Modula-2.  You can check this by pulling down the languages menu.  \par There are two other files required before we can try to compile and link the program.  The first is the definition file for the assembler module:\par }\pard \qj\widctlpar\tx1152\tx2304\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs18 (*$NoImp*)\par DEFINITION MODULE MyProg;\par PROCEDURE Clear;\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 END MyProg.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The NoImp directive at the start of the module tells the compiler that there will be no Modula-2 Implementation module for this module.\par Save the file as MYPROG.DEF, again being sure that the file type is Modula-2.  At this point we need to add the assembly language procedure.  Create a new window, then pull down the Languages menu and select ASM65816 to change the language stamp of the window to assembly language.  With that accomplished, type in the procedure shown below.\par \par }\pard \qj\li360\widctlpar\tx1800\tx2700\adjustright {\f6\fs18 \tab objcase\tab on\par \tab case\tab on\par ; \par ; Clear the keyboard strobe\par ;\par MyProg_Clear\tab start\par \tab sep\tab #$20\par \tab sta\tab >$C010\par \tab rep\tab #$20\par \tab rtl\par \tab end\tab MyProg_Clear\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Now is a good time to explain the naming conventions used by ORCA/Modula-2 for procedures.  First, they are case-sensitive.  Second, all procedure names contain their module name as a prefix, so that it is possible to have a number of procedures with the same name in several modules without having any name conflicts.  The module name and procedure name should be separated by a single underscore.\par Save the file as MYPROG.ASM, the same name that appeared in the append directive at the end of the Modula-2 program.\par Now for the fun part.  We must now compile and link the program.  To do this, we should start by compiling MYPROG.DEF.  This will (via the ChainTo directive) cause both ClearStrobe.MOD and MYPROG.ASM to be compiled.  Select the MYPROG.DEF window, and then use the Compile To Memory command, as if the program is written entirely in Modula-2.  It doesn't matter if the assembly language source file is open on the desktop or not.  What happens is this:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab ORCA looks at the file MYPROG.DEF.  Since it is a Modula-2 file, the Modula-2 compiler is called to compile the program.\par 2.\tab When the compiler finishes with MYPROG.DEF, ORCA looks at MYPROG.MOD, and re-invokes the Modula-2 compiler to compile MYPROG.MOD.\par 3.\tab When the compiler is done with MYPROG.MOD, ORCA then looks at MYPROG.ASM.  Since it is not a Modula-2 program, ORCA invokes the assembler to assemble MYPROG.ASM.\par 4.\tab The linker is called.  It links the Modula-2 and assembly language parts into one program and writes an executable file called MYPROG.\par 5.\tab The program is executed.\par }\pard \qj\li990\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The reason we compile the .DEF file first is that ClearStrobe imports the module MyProg, and in doing so, assumes that MyProg.DEF has already been compiled, thus making MyProg.SYM available for importing.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Returning Function Values From Assembly Language Subroutines}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Returning Function Values From Assembly Language Subroutines\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\widctlpar\adjustright {\b\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: returning function values}}}{\fs20 Unlike other ORCA languages, ORCA/Modula-2 does not use the registers to return function procedure results.  They are returned on the stack in the same manner as the toolbox.}{\b\fs20 \par }{\fs20 Our next example program illustrates how to implement an assembly language function procedure from Modula-2.  The Modula-2 program stays in a tight loop, repeatedly calling an assembly language subroutine, named Keypress to see if a key has been pressed.  Once a key has been pressed, it calls another assembly language subroutine, named Clear, to clear the strobe.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*$ChainTo 'MYPROG.ASM'*)\par (*$Keep 'MYPROG'*)\par MODULE Wait;\par FROM MyProg IMPORT Clear, Keypress;\par BEGIN\par   WHILE NOT Keypress() DO\par   END;\par \par   Clear;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Wait.\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Once this file is entered, check to be sure its language stamp is Modula-2, and save it as Wait.MOD.  Next, type in the definition module for the assembler module, and save it as MyProg.DEF.\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*$NoImp*)\par DEFINITION MODULE MyProg;\par PROCEDURE Clear;\par PROCEDURE Keypress(): BOOLEAN;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MyProg.\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Next, type in the following assembly language file, make sure it is stamped as ASM65816, and save it as MYPROG.ASM.\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab objcase\tab on\par \tab case\tab on\par ;\par ; Return the status of the keyboard strobe\par ;\par MyProg_Keypress start\par \tab sep\tab #$20\par \tab lda\tab >$C000\tab get keyboard key\par \tab asl\tab A\tab roll high bit to A\par \tab rep\tab #$20\par \tab lda\tab #0\par \tab rol\tab A\par \tab sta\tab 4,S\tab save in result area\par \tab rtl\par \tab end\tab MyProg_Keypress\par ;\par ; Clear the keyboard strobe\par ;\par MyProg_Clear\tab start\par \tab sep\tab #$20\par \tab sta\tab >$C010\par \tab rep\tab #$20\par \tab rtl\par \tab end\tab MyProg_Clear\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Passing Parameters to Assembly Language Subroutines}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Passing Parameters to Assembly Language Subroutines\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To better understand the interaction between Modula-2 and assembly language in the ORCA environment, we will look at how parameters are passed from a Modula-2 program to an assembly language subroutine.  ORCA/Modula-2 places the parameters which appear in a subroutine call on the stack, in the order that they appear in the parameter list.  It then issues a JSL to your subroutine.\par In ORCA/Modula-2, value parameters are passed by pushing the value on the stack, while non-value parameters are passed as addresses.  The only exception to this is an open array parameter, where a 6 byte descriptor is passed.\par The first two bytes of an open-array descriptor are a cardinal value defining the upper boundary of the array that is being passed.  The last four bytes are the address of the first element of the open array.  When an open array is passed as a value parameter, the compiler does not generate the copy of the array on the stack before the call.  It is the responsibility of the called procedure to generate the copy.\par Consider the Modula-2 program fragment below:\par }\pard \qj\fi360\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 ...\par \par PROCEDURE DoSomething(i: INTEGER; ch: CHAR; VAR z: REAL);\par \par ...\par \par i := 3;\par ch := 'a';\par z := 5.6;\par DoSomething(i, ch, z);\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 ...\par }\pard \qj\fi360\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When DoSomething is called, the stack will look like this:\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw486\pich334\picwgoal9720\pichgoal6680\macpict\bliptag296653728\blipupi72{\*\blipuid 11ae93a09f62e1337b1f9082a9a31073}054c00000000014e01e61101a10064000c574f524400000000014e01e601000a00000000014e01e6200001006d00c6006d200000001c00c6001c220045001c5100220012001c5100a10096000c01000000010000000000000003364f0d000c2e0004000000002b022303203130a00097a10096000c0100000001000000000000002b091e0139a00097220063001c51002200cf001c510022002c001c090022002c0064090022007e00640900220099006409002200ea001c09002200b4001c0900220099001c090022007e0025f700a10096000c01000000010000000000000028002300400130a00097a10096000c0100000001000000000000002b01190133a00097a10096000c01000000010000000000000028005c003d03276127a00097a10096000c01000000010000000000000028005c000b0138a00097a10096000c010000000100000000000000280052007f3a546865207365636f6e6420706172616d657465722069732061206368617261637465722e20204974732076616c756520697320706173736564202a100d6f6e2074686520737461636b2ea00097a10096000c010000000100000000000000280077000b0137a00097a10096000c0100000001000000000000002a1b0136a000972000a2001c014d001c2000a2006d014d006da10096000c0100000001000000000000002a1b0135a00097a10096000c0100000001000000000000002a1b0134a00097220120001c510022013b001c5100a10096000c0100000001000000000000002a1b0133a00097a10096000c0100000001000000000000002a1b0132a00097a10096000c0100000001000000000000002a1b0131a00097a10096000c0100000001000000000000002a1b0130a0009722010a001c09002200ea006409002200b400640900a10096000c01000000010000000000000028007700803554686520746869726420706172616d6574657220697320612063616c6c206279207265666572656e6365206f662061207265616c0d2a10316e756d6265722e202048657265206120706f696e74657220746f20746865206e756d626572206973207061737365642e0d2a102b506f696e74657273207265717569726520666f7572206279746573206f6620737461636b2073706163652ea00097a10096000c010000000100000000000000280076003607706f696e746572a00097a10096000c0100000001000000000000002b081d02746fa00097a10096000c0100000001000000000000002b0317017aa00097a10096000c0100000001000000000000002800e300370672657475726ea00097a10096000c01000000010000000000000028010100340761646472657373a0009722010a00640900a10096000c010000000100000000000000280029007f3b54686520666972737420706172616d6574657220697320616e20696e74656765722e20204974732076616c756520697320706173736564206f6e0d2a103074686520737461636b20616e642072657175697265732074776f206279746573206f6620737461636b2073706163652ea00097a10096000c0100000001000000000000002b03aa3a46696e616c6c792c207765206172652063616c6c656420776974682061204a534c2c20736f207468652072657475726e2076616c75652069730d2a103661742074686520746f70206f662074686520737461636b20616e642075736573207468726565206279746573206f6620737461636b0d2a100673706163652ea0009774001e012f00820135008e01320082012f008e0132008e0135008e01320082220132008e0c00a10096000c0100000001000000000000002b27330d537461636b20706f696e746572a00097ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\:direct page}}}{\fs20 One way to access the passed parameters in our assembly language subroutine is to set up a local direct page, using the stack.  Be very careful to save and restore the direct page register!  Upon entry to the subroutine, we do not know where the direct page register points - failure to restore it could lead to disastrous results.\par One of the simplest ways to set the direct page register equal to the stack pointer is to transfer the stack register contents to the accumulator, save the current direct-page register by pushing it onto the stack, and then setting the new direct-page register by transferring the contents of the accumulator to the direct-page register:\par \par }\pard \qj\li360\keepn\widctlpar\tx1440\adjustright {\f6\fs18 \tab tsc\par \tab phd\par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f6\fs18 \tab tcd\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Before leaving the subroutine, we can restore the old value of the direct-page register by pulling it from the stack:\par \par }\pard \qj\li360\widctlpar\tx1440\adjustright {\f6\fs18 \tab pld\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par We are now in a position to access the passed parameters as direct page locations.  Referring to the stack diagram given above, we can code a series of equates, setting the positions in the stack to local labels: \par \par }\pard \qj\li360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 i\tab equ\tab 9\par ch\tab equ\tab 8\par }\pard \qj\li360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 z\tab equ\tab 4\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\fs20 After setting up a direct page from the stack, }{\f6\fs20 i}{\fs20  and }{\f6\fs20 ch}{\fs20  can now be accessed as simple direct-page values, as in \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab lda\tab i\par \tab lda\tab ch\par }\pard \qj\li360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab and\tab #$00FF\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 while }{\f6\fs20 z}{\fs20 , since it is a pointer, requires long indirect addressing:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab lda\tab [z]\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\fs20 Putting this all together, the Modula-2 program below shows how to implement an assembly language function procedure.  The program does little more than define an integer and then call a function procedure to reverse the bits in the integer.  If you are not sure how the assembly language program works, make yourself a stack diagram.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (* Place following code in a file called: FunctionIt.MOD *)\par \par (* Demonstrate calling assembly language functions from Modula-2.  *)\par (*$Keep 'MyProg'*)\par (*$ChainTo 'MyProg.ASM'*)\par MODULE FunctionIt;\par FROM InOut IMPORT WriteInt, WriteLn;\par FROM MyProg IMPORT reverse;\par BEGIN\par   WriteInt(6, 5);\par   WriteLn;\par   WriteInt(reverse(6), 5);\par   WriteLn;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END FunctionIt.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (* Place following code in a file called: MyProg.DEF *)\par (*$NoImp*)\par DEFINITION MODULE MyProg;\par PROCEDURE reverse(a: INTEGER): INTEGER;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MyProg.\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 assembly language\: direct page}}}{\f6\fs18 ;\par ; Place following code in a file called: MyProg.ASM\par ;\par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx2880\tx3960\tx4320\adjustright {\f6\fs18 \tab objcase\tab on\par \tab case\tab on\par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 ;\par ; Reverse the bits in an integer\par ;\par MyProg_reverse start\par result\tab equ\tab 6\par parm\tab equ\tab 4\tab passed parameter\par ret\tab equ\tab 1\tab return address\par \tab tsc\tab \tab record current stack pointer\par \tab phd\tab \tab save old DP\par \tab tcd\tab \tab set new DP to stack pointer\par \tab ldx\tab #16\tab place result in A\par lb1\tab asl\tab parm\par \tab ror\tab A\par \tab dex\par \tab bne\tab lb1\par \tab sta\tab result\tab put the result in the space provided\par \tab lda\tab ret+1\tab set up stack for return from\par \tab sta\tab parm\tab  subroutine\par \tab lda\tab ret-1\par \tab sta\tab ret+1\par \tab pld\tab \tab restore old DP\par \tab pla\tab \tab set stack ptr for return\par \tab rtl\par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab end\tab MyProg_reverse\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Accessing Modula-2 Variables from Assembly Language}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Accessing Modula-2 Variables from Assembly Language\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: accessing global variables}}}{\fs20 Some global variables are available from assembly language.  Use long addressing to access the variables.\par Those variables defined within a definition module are publicly available to external modules.  Those declared in the implementation module are only available to those procedures local to that module.  Any assembly language subroutine attached to the module via the ChainTo directive is local to the module, and can access these variables.\par Global variable names use the same convention as that used for procedures.  The variable name is case-sensitive, and is preceded by the module name and a single underscore.\par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Calling Modula-2 Procedures and Functions from Assembly Language}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Calling Modula-2 Procedures and Functions from Assembly Language\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx2160\tx2880\tx4320\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language\: calling Modula-2 procedures and functions}}}{\fs20 Calling a procedure from assembly language is extremely straight forward.  You simply push any required parameters onto the stack, and issue a JSL to the procedure you want to call.  If you have called a function procedure, remember to push space onto the stack for the result value, in the same way you do for toolbox calls.\par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\fs20 For example, to call a Modula-2 function procedure that takes a pointer as input and returns an integer result, you could use the PH4 macro (supplied with ORCA/M) to push the pointer onto the stack, then call the procedure as follows:\par \par }\pard \qj\fi360\keepn\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab pea\tab 0\tab push the result space\par \tab ph4\tab #parm\tab push the address of the parameter\par \tab jsl\tab pasfunc\tab call the function\par \tab pla\tab \tab pull the result off the stack\par }\pard \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright {\f6\fs18 \tab sta\tab result\tab save the integer result\par {\*\bkmkend bk3}}{\pard\plain \qj\fi360\widctlpar\tx1440\tx2340\tx4320\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}{\rxe bk3}}}{\f6\fs18 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 6 - Using the Shell\par }}\pard\plain \keepn\widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 6 \endash  Using the Shell\par {\*\bkmkstart bk4}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 6 \endash  Using the Shell\tcl1}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Another Look at the Shell Window}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Another Look at the Shell Window\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkstart bk5}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20 The desktop development environment we have dealt with so far in this manual is very easy to use.  You have probably either used or heard of some of the text based programming environments like UNIX, MS-DOS, or even the text based version of ORCA (which is included in this package).  Ease of use is, of course, the biggest advantage of the desktop development environment over the text environment.\par On the other hand, the text environment has several advantages over the desktop environment, too.  The text environment takes less time to boot, and requires less memory.  It is easy to make coding errors in Modula-2 that will crash the system; if you find this is true in your own programs, the shorter boot time could be significant.  The shell also provides a very powerful programming tool.  The shell gives you dozens of built-in commands, and even lets you add your own.  You get more control over the process of compiling and linking a program with the shell, and you can even write programs, called exec files}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 exec files}}}{\fs20 , that execute shell commands.\par As it turns out, you aren't forced to choose between the desktop programming environment and the shell.  You can actually use all of the features of the shell right from the desktop by simply clicking on the shell window, and typing the shell commands!\par If the programs you write are generally in a single source file, you don't build libraries}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\fs20  often, you are not mixing Modula-2 with assembly language}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\fs20 , and you are not using Apple's Rez compiler, it may not be worth your effort to learn to use the shell and the shell window.  If, however, your programs fall into any of these categories, or if you would like to use the shell's impressive abilities to manage files, it would be time well spent to learn about the shell.  This chapter introduces the shell, as used from the shell window in the desktop development environment.  All of the topics covered, however, apply equally well to using the shell in the text environment.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Getting Into Text}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Getting Into Text\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 While you can use the shell commands from a window on the desktop, you may want to make use of the text environment for any number of reasons.  There are basically two ways to get into the text environment.  The first is to set up a separate, text-based copy of ORCA/Modula-2, something you can do with an installer script; see Appendix B for details if you are interested in doing this.\par The other thing you can do is to set up ORCA/Modula-2 so you can switch between the text and desktop environment.  The only change you have to make to let you switch between the two environments is to remove one line from the LOGIN file; you can find this file in the Shell folder of the ORCA/Modula-2 Program Disk and load it with the desktop editor.  At the end of the file you will find two lines:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 prizm\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 quit\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 The LOGIN file is a script file that is executed when you start up the ORCA system.  The line "prizm" is a shell command that actually runs the desktop development system you have used up to this point.  When you quit from PRIZM using the Quit command, you don't go right back to the Finder; instead, the shell executes the next line of the LOGIN file.  In the LOGIN file that we ship with ORCA/Modula-2, the next line tells the shell to quit back to the Finder.  If you remove the last line, quitting from PRIZM will put you into the text shell.  From there, typing quit will return you to the Finder, while typing prizm will put you back into the desktop programming environment.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 After changing the LOGIN file, you will have to reboot before the shell realizes the change has been made.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 How Shell Commands Work}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 How Shell Commands Work\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The shell is really an interpreter, just like AppleSoft BASIC.  Like AppleSoft, the shell has variables, loops, and an if statement.  You can even pass variables to programs written using the shell.  Unlike AppleSoft, the shell's commands are not intended for general programming.  Instead, the shell has commands like catalog, which produces a detailed list of the files on a disk.  The shell can manipulate files with copy (copies files or disks), move (moves files), delete (deletes files), and create (creates directories).  You can see all or part of a file using type.  You can also compile and link programs with a variety of commands.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell\: commands}}}{\fs20 You can execute shell commands from any window on the desktop.  If the window you select is a shell window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window}}}{\fs20  (that is, if the language shown in the Languages menu is Shell), you execute a command by typing the command and pressing }{\outl\fs18 return}{\fs20 .  In any other window, you use }{\outl\fs18 enter}{\fs20 .\par You can also execute groups of shell commands.  To execute more than one shell command at a time, simply select the block of text containing the shell commands, then press }{\outl\fs18 return }{\fs20 if you are in a shell window, or }{\outl\fs18 enter}{\fs20  if you are in any other kind of window.  The commands will be executed, one after the other, until all commands have executed or an error occurs.\par Many shell commands write output to the screen.  The "screen" is a somewhat vague term.  For a variety of reasons, we usually say the output is written to "standard out}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\fs20 ."  In the text environment, standard out is the text screen.  When you are using the shell from the desktop environment, standard out is whatever window the shell command is issued from.  Later in this chapter, you will learn how to change standard out, so that the output of a program can be sent to a disk file or printer.\par Some shell commands are interactive, requiring input from the keyboard.  When this happens, a cursor will appear in the window.  The cursor is an inverse space.  You can type in the response, and then press the }{\outl\fs18 return }{\fs20 key.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 File Names}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 File Names\tcl2}}}{\b\fs28 \par }\pard \qj\fi540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 folders}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 folders\:see also directories}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories\:see also folders}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names\:see also path names}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names\:see also file names}{\txe }}}{\fs20 When you use the desktop, you open and create files using dialogs that show you the files in a particular folder.  When you are using the shell, you must type the names of files instead of using these dialogs.  In all cases, the name of the file itself is the same in the shell and from the dialogs.  Under the ProDOS FST, which is the one you are probably using, file names are limited to fifteen characters.  Each name must start with an alphabetic character (one of the letters 'A' through 'Z'), and can contain alphabetic characters, numeric digits, or the period character in the remaining characters.  You can use either uppercase or lowercase letters interchangeably.\par To find a file, you need more than just the file name.  Just as with the dialogs, you need to know what disk the file is on, and what folder it is in.  (Folders are called directories in the text environment.)  The names of disks and directories follow the same conventions as file names.  The colon (or slash) character is used before the name of a disk, and between the names of disks, directories and files to separate the names from one another.  Spaces are not allowed.  For example, to specify the file MYFILE, located on a disk called MYDISK and in a directory called MYFOLDER, you would type\par \par }{\b\f6\fs18 :mydisk:myfolder:myfile}{\fs20 \par \par It would get tiring in a hurry if you were forced to specify the name of the disk, any directories, and the file every time you wanted to refer to a disk file.  Fortunately, there is a shortcut.  The shell remembers the location of the directory you are currently using.  If you want a file from the current directory, you only have to type the name of the file to specify the file.  For example, if the current directory is :mydisk:myfolder, you only have to type }{\b\f6\fs18 myfile}{\fs20  to get at the same file we referenced a moment ago.  If the current folder is :mydisk, you would type }{\b\f6\fs18 myfolder:myfile}{\fs20 .  When you type the entire path for the file, as in :mydisk:myfolder:myfile, it is called the file's path name, or sometimes its full path name.  When you use the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 current directory to avoid typing the full path name, as in }{\f6\fs18 myfolder:myfile}{\fs20 , it is called a partial path name or, if no directories need to be specified at all, the file name.\par You can set the current directory at any time using the prefix command.  Type the name of the directory you want to become the current directory right after the name of the command.  For example,\par \par }{\b\f6\fs18 prefix :mydisk:myfolder}{\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 sets the current prefix.  Now that we are in the same directory as the file myfile (from our previous example), we can access the file by simply typing }{\b\f6\fs18 myfile}{\fs20 .  The same concept applies to directory names.  Instead of using a single prefix command to set the default prefix, we could first set the prefix to the disk }{\f6\fs18 :mydisk}{\fs20 , and then change the default prefix to the directory myfolder on that disk with the commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 prefix :mydisk}{\fs20 \par }{\b\f6\fs18 prefix myfolder}{\fs20 \par \par }\pard \qj\widctlpar\adjustright {\fs20 In this case, the first prefix command changed the prefix to the disk }{\f6\fs18 mydisk}{\fs20  \endash  the leading colon tells the shell that the name is the name of a disk.  The second prefix command changes the prefix to the current prefix plus the folder }{\f6\fs18 myfolder}{\fs20 .  The shell knows that the second command is changing the default prefix to a directory in the current default prefix because the name given does not start with a colon.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The current prefix is shared between the shell and the desktop.  You may have noticed that when you use any of the file dialogs from the desktop, they always come up showing the folder where the last file command was executed.  The desktop uses the current prefix to do this.  If you use one of the file dialogs from the desktop, you can change the current prefix, and changing the current prefix from the shell will change the folder that is shown the next time you use a file dialog.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Directory Walking}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Directory Walking\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 Sometimes it is useful to go back a directory.  The symbol .. (two periods) means go back (or up) one directory.  Suppose that you have the directory structure shown below.\par \par }\pard \qc\li450\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex64\picscaley62\piccropl0\piccropr0\piccropt0\piccropb0\picw244\pich117\picwgoal4880\pichgoal2340\macpict\bliptag-1587465063\blipupi72{\*\blipuid a1613499b37e637377f33d9b18a457fc}018000070007007c00fb1101a00082a100960006050000000274a1009a0008fffd0000001d0000a0009801000a00070007007c00fb0300150d000a2b6e13084f55525354554646a00099a00097a100960006050000000274a1009a0008fffd0000001b0000a00098280052004a074d5950524f4753a00099a00097a100960006050000000274a1009a0008fffd000000220000a00098295a09594f555250524f4753a00099a00097220019007fee2d220019007f362da100960006050000000274a1009a0008fffd000000130000a00098280076000b0550524f4731a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829360550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009829900550524f4732a00099a00097a100960006050000000274a1009a0008fffd000000130000a0009828007600a40550524f4731a00099a000972200560067c8152200560066f21422005500c5f11522005600c51914a00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Assume that the current prefix is /ourstuff/myprogs.  If you want to access prog1 in the yourprogs directory, you can use the partial path\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 ..:yourprogs:prog1\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 to get to it.  The partial path name given tells the shell to move up one directory level, from :ourstuff:myprogs to :ourstuff, and then move down the directory tree to }{\f6\fs18 yourprogs:prog1}{\fs20 .\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Device Names}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Device Names\tcl3}}}{\b \par }\pard \keepn\widctlpar\tx450\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\fs20 GS/OS assigns a device name to each I/O device currently on line.  These device names can be used as part of the path name.  Let's check to see what assignments have been made.  Enter the command:\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 show units\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command will display a table showing the device names associated with the devices on line.  For an example, suppose you have a hard disk, a floppy disk, and a RAM disk installed in your computer.  When you issue the show units command, you will see something like \par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 Units Currently On Line:\par \par     Number  Device              Name\par \par     .D1     .APPLESCSI.HD01.00  :HARD.DISK\par     .D4     .CONSOLE            <Character Device>\par     .D6     .NULL               <Character Device>\par }\pard \li360\widctlpar\adjustright {\f6\fs18     .D7     .PRINTER            <Character Device>\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx450\tx720\adjustright {\fs20 You can substitute a device name or a device number anywhere you would have used a volume name.  Thus,\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 catalog .d1}{\f6\fs18 \par }{\fs20 \par }\pard \widctlpar\adjustright {\fs20 will have the same effect as\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 catalog :hard.disk\par }{\fs20 \par Incidentally, the catalog command is a good one to know about.  The catalog command lists all of the files in a directory, along with a great deal of information about each file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Standard Prefixes}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Standard Prefixes\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\fs20 The shell provides prefixes which can be substituted for path names.  We've already looked at one of these, the default prefix.  There are a total of 31 of these prefixes.  You can obtain a listing of the standard prefixes for your system by typing the command\par \par }{\b\f6\fs18 show prefix\par }{\fs20 \par ORCA will respond by printing a list similar to the one below.\par \par }\pard \li360\keepn\widctlpar\adjustright {\f6\fs18 System Prefix:\par \par }\pard \li360\keepn\widctlpar\tx1980\adjustright {\f6\fs18 Number\tab Name\par \par *\tab :Modula.2:\par }\pard \li360\widctlpar\tx1980\adjustright {\f6\fs18 @\tab :Modula.2:\par 8\tab :Modula.2:\par 9\tab :Modula.2:\par 10\tab .CONSOLE:\par 11\tab .CONSOLE:\par 12\tab .CONSOLE:\par 13\tab :Modula.2:LIBRARIES:\par 14\tab :Modula.2:\par 15\tab :Modula.2:SYSTEM:\par 16\tab :Modula.2:LANGUAGES:\par 17\tab :Modula.2:UTILITIES:\par 18\tab :Modula.2:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The left-hand column of the listing is the prefix number.  The right-hand column is a path name.  The purpose of the prefix numbers is to provide you with a typing short-cut when you use path names.  For example, suppose you have a program with the file name myprog located in }{\f6\fs18 :Modula.2}{\fs20 .  You could use the path name\par \par }{\f6\fs18 18:myprog\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 and it would have the same effect as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 :modula.2:myprog\par }{\fs20 \par Notice that we have used the prefix command two ways.  If you supply a prefix number followed by a path name, the prefix command changes the prefix number you give.  If you type a prefix name with no prefix number, the prefix command sets the default prefix (prefix 8).\par While you can modify prefix seven to suit your needs, the other prefixes have special, predefined uses.  For example, if you kept your programs in a directory called }{\f6\fs18 MYSTUFF}{\fs20 , you could rename prefix 18 to correspond to }{\f6\fs18 :ORCA:MYSTUFF}{\fs20  using the command:\par \par }{\b\f6\fs18 prefix 18 :orca:mystuff:\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Now, when you want to access the program myprog, instead of using the path name\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 :orca:mystuff:myprog\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 you can use the path name\par \par }\pard \qj\li360\widctlpar\adjustright {\b\f6\fs18 18:myprog\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par As we mentioned a moment ago, many of these prefixes have predefined, standard uses, such as defining the location of the languages prefix, or telling the linker where to look for libraries.  The predefined uses are:\par \par }\pard \qj\fi-720\li1080\widctlpar\adjustright {\fs20 *\tab The asterisk indicates the boot prefix.  The boot prefix is the name of the disk that GS/OS executed from.\par \par @\tab This prefix is a special prefix used by programs that need to access user-specific information in a networked environment.\par \par 0-7\tab These seven prefixes are obsolete.  They can only hold path names up to 64 characters.  They should not be set while using ORCA/Modula-2.\par \par 8\tab This is the default (or current) prefix.  Whenever you supply a partial path name to the shell, or directly to GS/OS via a program that makes GS/OS calls, the partial path name is appended to the default prefix.\par \par 9\tab Prefix 9 is the program's prefix.  Whenever a program is executed, prefix 9 is set to the directory where the program was found.\par \par 10\tab Prefix 10 is the device or file from which standard input characters are read.\par \par 11\tab Prefix 11 is the device or file to which standard output characters are written.\par \par 12\tab Prefix 12 is the device or file to which error output characters are written.\par \par 13\tab }{\pard\plain \qj\fi-720\li1080\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\fi-720\li1080\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\pard\plain \qj\fi-720\li1080\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 M2Defs}}}{\fs20 Prefix 13 is the library prefix.  The ORCA linker searches the library prefix for libraries when unresolved references occur in a program.  The Modula-2 compiler looks in this folder for another folder called M2Defs to resolve FROM statement}{\pard\plain \qj\fi-720\li1080\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FROM statement}}}{\fs20 s.\par \par 14\tab Prefix 14 is the work prefix.  This is the location used by various programs when an intermediate work file is created.  If a RAM disk is available, this prefix should point to it.\par \par 15\tab Prefix 15 is the shell prefix.  The command processor looks here for the LOGIN file and command table (SYSCMND) at boot time.  If you use the text based editor, it also looks here for the editor, which in turn looks for its macro file (SYSEMAC), tab file (SYSTABS) and, if present, editor command table (SYSECMD).  The desktop development system also uses the SYSTABS file, but does not make use of the SYSEMAC file or the SYSECMD file.\par \par 16\tab Prefix 16 is the languages prefix.  The shell looks here for the linker, assembler, and compilers.\par \par 17\tab Prefix 17 is the utilities prefix.  When a utility is executed, the command processor looks here for the utility.  Help files are contained in the subdirectory HELP.\par \par 18-31\tab These prefixes do not have a predefined use.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Using Wild Cards}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Using Wild Cards\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\fs20 One of the built-in features that works with almost every command in ORCA is wild cards in file names.  Wild cards let you select several files from a directory by specifying some of the letters in the file name, and a wild card which will match the other characters.  Two kinds of wild cards are recognized, the = character and the ? character.  Using the ? wild card character causes the system to confirm each file name before taking action, while the = wild card character simply takes action on all matching file names.\par To get a firm grasp on wild cards, we will use the enable and disable commands.  These commands turn the file privilege flags on and off, something that is very much like locking and unlocking files in BASIC, but with more flexibility. The privilege flags can be examined in the catalog command display.  The flags are represented by characters under the access attribute.  First, disable delete privileges for all files on the }{\f6\fs18 :Modula.2}{\fs20  directory.  To do this, type\par \par }{\b\f6\fs18 disable d =\par }{\fs20 \par Cataloging }{\f6\fs18 :Modula.2}{\fs20  should show that the D is missing from the access column of each directory entry.  This means that you can no longer delete the files. Now, enable the delete privilege for the ORCA.Sys16 file.  Since the ORCA.Sys16 file is the only one that starts with the character O, you can do this by typing\par \par }{\b\f6\fs18 enable d O=\par }{\fs20 \par The wild card matches all of the characters after O. \par What if you want to specify the last few characters instead of the first few?  The wild card works equally well that way, too.  To disable delete privileges for the ORCA.Sys16, you can specify the file as =Sys16.  It is even possible to use more than one wild card.  You can use =.= to specify all files that contain a period somewhere in the file name.  Or, you could try M=.=S to get all files that start with an M, end in an S, and contain a period in between.  As you can see, wild cards can be quite flexible and useful.\par To return the }{\f6\fs18 :Modula.2}{\fs20  disk to its original state, use the command\par \par }{\b\f6\fs18 ENABLE D ?\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 This time, something new happens.  The system stops and prints each file name on the screen, followed by a cursor.  It is waiting for a Y, N or Q. Y will enable the D flag, N will skip this file, and Q will stop, not searching the rest of the files.  Give it a try! \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 edit command}}}{\fs20 Four minor points about wild cards should be pointed out before you move on.  First, not all commands support wild cards every place that a file name is accepted.  The compile}{\scaps\fs20 , }{\fs20 link}{\scaps\fs20  }{\fs20 and run}{\scaps\fs20  }{\fs20 commands don't allow them at all, and rename and copy commands allow them only in the first file name. Secondly, wild cards are only allowed in the file name portion, and not in the subdirectory part of a full or partial path name.  For example, :=:STUFF is not a legal use of a wild card.  The next point is that not all commands respect the prompting of the ? wild card.  Catalog}{\scaps\fs20  }{\fs20 does not, and new commands added to the system by separate products may not.  Finally, some commands allow wild cards, but will only work on one file. }{\scaps\fs20  }{\fs20 The edit command}{\scaps\fs20  }{\fs20 is a good example.  You can use wild cards to specify the file to edit, but only the first file that matches the wild card file name is used.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Required and Optional Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Required and Optional Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are two kinds of parameters used in shell commands, required and optional.  If you leave out an optional parameter, the system takes some default action.  For example, if you use the catalog}{\scaps\fs20  }{\fs20 command without specifying a path name, the default prefix is cataloged.  An example of a required parameter is the file name in the edit command:  the system really needs to have a file name, since there is no system default.  For all required parameters, if you leave it out, the system will prompt for it.  This lets you explore commands, or use commands without needing to look them up, even if you cannot remember the exact order of all of the required parameters.\par At first glance, it may seem strange to have an edit command}{\pard\plain \qj\fi360\widctlpar\adjustright \scaps\v\f4\fs20\cgrid {\xe {\scaps\v\fs20 }{\v\fs20 edit command}}}{\fs20  in the shell.  Its original use was to start the text editor, back in the days when the desktop development environment did not exist.  You can still use it for that in the text environment, but there is also another use.  If you use edit from a shell window, the file is loaded into a new window.  If the file was already on the desktop, it is brought to the front.  This can have several uses, especially in script files.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Redirecting Input and Output}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Redirecting Input and Output\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 input redirection}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 output redirection}}}{\fs20 The Apple\~II}{\scaps\fs20 gs }{\fs20 supports two character-output devices and one character-input device.  Input redirection lets you tell ORCA to take the characters from a file instead of the .CONSOLE device (which is, basically, the text screen and keyboard).  When you write a character, you have a choice of two devices:  standard output or standard error output.  Normally, both send the characters to the screen.  ORCA lets you redirect these devices separately to either a disk file or a printer.\par For example, when you specify a help command, the output is printed on the screen.  Using redirection, the output can be moved, or redirected, somewhere else.  There are two devices that come with ORCA/Modula-2 that you might want to use for redirected output, or you can redirect output to any file.  The first device is }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printer device}}}{\fs20 .PRINTER}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers}}}{\fs20 , a character device driver that comes with ORCA/Modula-2 that can be installed in your system folder using the Installer.  Once installed, your Modula-2 programs can redirect output to .PRINTER to print files, or even open .PRINTER as a file from within a Modula-2 program to print simple text streams to your printer.  The other driver is .NULL, which accepts input and does nothing; you can redirect output to .NULL if you want to execute a command, but don't want to see the output.\par If you have a printer connected and turned on, and you have installed the .PRINTER driver, you can try a simple redirection:\par \par }{\b\f6\fs18 help delete >.printer\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 If you do not have a printer connected, the system will hang, waiting for a response from the printer.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are five types of redirect commands available on the command line.\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \fi-554\li900\keepn\widctlpar\adjustright {\fs20 <\tab Redirect input.\par >\tab Redirect output.\par >&\tab Redirect error output.\par >>\tab Redirect output and append it to the contents of an existing file.\par }\pard \fi-554\li900\widctlpar\adjustright {\fs20 >>&\tab Append error output to an existing file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Pipelines}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Pipelines\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes}}}{\fs20 Pipelines let you "pipe" the output from one process into the input for another process.  The symbol for the pipeline is a vertical bar (|).  For example, you might have two programs.  The first program will determine the students' scores for the year.  The second program will use the end-of-year scores to compute class statistics.  You could use the command\par \par }{\b\f6\fs18 prog1|prog2\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 instead of the series of commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\li540\widctlpar\adjustright {\b\f6\fs18 prog1 >data\par }{\fs20 \par }{\b\f6\fs18 prog2 <data\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par As another example, assume you have a program called UPPER which reads characters from the keyboard, converts them to uppercase, and writes them to the screen.  Then\par \par }\pard \qj\fi360\li540\widctlpar\adjustright {\b\f6\fs18 catalog | upper\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would catalog your disk in uppercase.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Unlike pipelines on multitasking systems, pipelines on the Apple\~II}{\scaps\fs20 gs }{\fs20 execute sequentially.  Each program runs to completion, sending its output to a temporary file on the work prefix.  The next program uses that file as its input, sending its output (if it is piped) to another temporary file.  The files are called SYSPIPE0, SYSPIPE1, and so on.  They are not deleted after the commands execute, so you can edit the files when debugging programs.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Writing Your Own Utilities}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Writing Your Own Utilities\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 utilities}}}{\fs20 One of the powerful features of the shell is that you can add new commands.  To do this, you simply write a normal program, then follow a few simple steps to make the shell aware of it.  The program then becomes a utility.  There are a variety of things that you need to know about programs that are designed to run from the shell which can help you write standard types of utilities that end up looking like they were always a part of the system.  This section covers those facts, as well as stepping you through the installation of a simple utility.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\fs20 Any program launcher that is capable of launching an EXE file (one kind of executable file the shell can run) is required to do some things for you.  It sets up a text device for input and output, gets a user ID number for memory management calls, and if the program launcher is a shell, like ORCA or APW}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APW}}}{\fs20 , it can pass the command line to you.\par If you are initializing tools, you will notice that many of them ask you to reserve memory for them, usually in bank zero.  When you do this, you should always use the user ID number returned by the ORCA/Modula-2 UserID function procedure.  This built-in function returns an integer, and requires no parameters.  This function works from all environments, regardless of which program launcher executed your program.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 It also works for S16 files (described later).  It is very important that you use this user ID number, since failure to do so can result in memory not being deleted properly when your program has finished executing.\par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell identifier}}}{\fs20 Many program launchers, including ORCA and APW, provide an eight-character shell identifier to tell you what shell you are running under.  For both ORCA and APW, the shell identifier is BYTEWRKS.  You can read the shell identifier by looking at the first eight characters returned by the procedure getCommandLine.\par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line\: reading}}}{\fs20 The last piece of information passed to you by a shell is the one most commonly used by a text based application.  When you execute a program from ORCA, you type the program name, followed by some parameters.  This command line, with any input and output redirection removed, is passed to you.  You can read the information using the predefined procedure getCommandLine}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 getCommandLine procedure}}}{\fs20 .  The first eight characters of the string are the shell identifier, and should be ignored.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell\: errors}}}{\fs20 When you detect a run-time error in your program, you should report the error by returning a value from main, which is the error code to be returned to the shell.   The error code is used by the shell to determine what steps need to be taken, if any, because of the error.  For example, the shell might need to stop execution of an EXEC file.  If a system error occurred, return the error number reported by the toolbox.  If an internal error was detected by your program, then you should return the value -1.  You should always return a value from main when you are writing shell utilities, returning 0 if there was no error.\par You can find a small sample program that shows these ideas at work on your Samples disk; the path is :M2.Samples:Text.Samples:CLine.mod.  It prints the user ID number, shell identifier and command line passed to it when it executes.  Try running the program with a variety of things typed after the command name, especially input and output redirection.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Installing a New Utility}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Installing a New Utility\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 utilities}}}{\fs20 Once you have an executable file that runs under the ORCA shell, you may want to install it as a utility.  The advantages of doing so are that the program can be executed from any directory without typing a full path name, and the utility shows up in the command table.  Once it is in the command table, you can use right-arrow expansion to abbreviate the command (from the text environment only), and the help command}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 help command}}}{\fs20  will list it.\par Installing the program as a utility is really quite simple.  To do so:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Place the program (the executable image) in the utility prefix.  As shipped, this is the :Modula.2:Utilities prefix, but you may have moved it to your hard disk, if you are using one.\par \par 2.\tab Add the program name to the command table.  The command table is in the SYSTEM folder.  It is called SYSCMND.  The command table is a text file, and can be changed with the editor.  Simply edit it, and add the name of your program to the list of commands you see.  Be sure the name of your command is the same as the file name you used for the executable file, and that the command name starts in column 1.  After at least one space, type a U, which indicates that the command is a utility.\par \par \tab Be sure to put the command in the correct location.  The order that commands appear in the command table determines how right-arrow expansion works from the text based shell.  The shell expands the first command that matches all letters typed.  In general, the commands should be listed alphabetically.\par \par \tab The new command will not be in the command table until you use the COMMANDS command to reread the command table, or reboot.\par \par 3.\tab If you would like to have on-line help for the command, add a text file to the Utilities:Help folder.  The name of the file must be the same as the name of the utility.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Learning More About the Shell}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Learning More About the Shell\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 While this chapter has introduced the basic concepts needed to deal with the shell, we have really only scratched the surface of what the shell can do for you.  After you get a little experience with shell commands and file names, you should browse through Chapter 8, which covers the shell in detail.  There you will find out many more things about the shell, like how to write shell programs, and how to control the process of compiling programs more closely.\par }\pard \widctlpar\adjustright {\*\bkmkend bk4}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text environment}{\rxe bk4}}}{\*\bkmkend bk5}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}{\rxe bk5}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\b\fs36 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Environment Reference Manual\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 7 - Desktop Reference\par }}{\headerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 \par }}\pard\plain \qj\widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 7 \endash  Desktop Reference\par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 7 \endash  Desktop Reference\tcl1}}}{\v\fs20 \par }{\fs20 {\*\bkmkstart bk13}\par \par }\pard \widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Basic Operations}{\pard\plain \widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Basic Operations\tcl2}}}{\b\fs28 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The desktop development environment is a standard implementation of a desktop program, as recommended by Apple Computer.  All of the basic operations that you have come to expect on the Apple\~II}{\fs18 GS}{\fs20  and Macintosh computers are supported.  Refer to the introductory manuals that came with your computer for information about the standard desktop interface.\par }\pard \qj\widctlpar\tx3240\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Cursor}{\pard\plain \widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Cursor\tcl2}}}{\b\fs28 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Insertion Point}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Insertion Point\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The main purpose of the mouse is to position the cursor.  Use the mouse to move the cursor around on the screen, and notice how the cursor changes in different regions.  When it is within the confines of the text portion of the window (called the content region of the window), the cursor looks like a cross-hair.  This shape allows you to use the mouse to pinpoint the location of the cursor. The selected place is called the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  \endash  any typing you now do will appear before the insertion point.  Notice that the insertion point is marked with a flashing vertical bar.\par For example, if the line\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw123\pich24\picwgoal2460\pichgoal480\macpict\bliptag-1550471424\blipupi72{\*\blipuid a395af0063573a9dcd5e0f294ada7929}0159000000000018007b1101a00082a0008e01000a0000000002d002409800100000000000180080000000000018007b000000000018007b000102f10002f10002f10002f100100c04300000018000018800018180fe00100c04300000018000018800018180fe000d010630fc00040188000180fd000d010630fc00040188000180fd00110f0733e6300383f007ebe007e38633e000110f0733e6300383f007ebe007e38633e000110f07f63630018600018e30018187763000110f07f63630018600018e30018187763000110f067636b00183e0018ff0018186b7f000110f067636b00183e0018ff0018186b7f000110d0636377001803001be0001b18636ff00110d0636377001803001be0001b18636ff00110f0613e63003c7e000ebf000e3c633f000110f0613e63003c7e000ebf000e3c633f00006f9000008fa0006f9000008fa0002f10002f10002f10002f100a0008fa00083ff}}{\f6\fs18 \tab \par }\pard \qj\widctlpar\adjustright {\fs20 \par is on the screen, you would first set the insertion point}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the position shown by moving the mouse until the cursor is positioned between the 't' and 'e,' and then click the mouse.  When you type a character, the text on the screen will be moved apart to make room for the new character, and the character that you typed will be placed in the space.  Typing an 'h' would change the line to be\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley47\piccropl0\piccropr0\piccropt0\piccropb0\picw128\pich23\picwgoal2560\pichgoal460\macpict\bliptag1673867555\blipupi72{\*\blipuid 63c531232f1185fa7ebd79f6ab0e8e25}015600000000001700801101a00082a0008e01000a0000000002d00240980010000000000017008000000000001700800000000000170080000102f10002f10002f10002f100100c08600000030000030c10000303fe00100c08600000030000030c10000303fe000d010c60fc0004030c100003fd000d010c60fc0004030c100003fd00110f0e67cc600707e00fcfd7c00fc70c67c0110f0e67cc600707e00fcfd7c00fc70c67c0110f0fec6c60030c00030c7c6003030eec60110f0fec6c60030c00030c7c6003030eec60110f0cec6d600307c0030c7fe003030d6fe0110f0cec6d600307c0030c7fe003030d6fe0110f0c6c6ee0030060036c7c0003630c6c00110f0c6c6ee0030060036c7c0003630c6c00110f0c27cc60078fc001cc77e001c78c67e0110f0c27cc60078fc001cc77e001c78c67e006f8000010fb0006f8000010fb0002f10002f10002f100a0008fa00083ff}}{\f6\fs18 \tab \par }\pard \qj\widctlpar\adjustright {\fs20 \par Notice how the insertion point is now between the 'h' and 'e.'\par \par \par }\pard \qj\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Over Strike Mode}{\pard\plain \qj\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Over Strike Mode\tcl3}}}{\b\fs28 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extras menu}}}{\fs20 What we have been discussing is how text is inserted into a file.  The editor is normally in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , but you can change this to over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 .  When you are using the over strike mode, new characters replace the character the cursor is on, rather than moving old text over to make room for new characters.  You can switch between the insert and over strike modes by using the Over Strike command in the Extras menu.  When you are in the over strike mode, the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  will change to a line that appears under the character that will be replaced.  Like the vertical bar, this line flashes.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Selecting Text}{\pard\plain \widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Selecting Text\tcl2}}}{\b\fs28 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Another important use of the mouse is to select text}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting text}}}{\fs20 .  There are a variety of reasons to select text, including:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 clear command}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 undo command}}}{\fs20 Selected text can be deleted using the }{\outl\fs18 delete}{\fs20  key}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 delete}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  or the Clear command.  (You can retrieve the last text that you deleted by issuing the Undo command, located in the Edit menu.)\par \bullet \tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 paste command}}}{\fs20 Selected text is replaced when you type a character from the keyboard, or when you paste text from the clipboard using the Paste command.\par \bullet \tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 print command}}}{\fs20 If any text is selected when you use the Print command, only the selected text is printed.  This lets you print part of a text window without the need to copy the part you want to print to a separate window.\par \bullet \tab If any text is selected when you use the }{\outl\fs18 enter}{\fs20  key}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 enter}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  from a text window, or the }{\outl\fs18 return}{\fs20  key from a shell window, the selected text is executed.  Without this ability, you would be limited to executing single-line shell}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Selection By Dragging}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selection By Dragging\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Your }{\fs20\ul Apple\~II}{\scaps\fs20\ul gs}{\fs20\ul  Owner's Manual}{\fs20  described text selection by the clicking and dragging method.  (That is, you click the mouse where you want to start selecting, and then drag the mouse until you have finished selecting.  If you move the mouse off of the text in any direction, the page will start to scroll.  This allows you to select more text than you can see in the window at any one time.)  ORCA/Desktop supports this method of text selection, and also provides some short-hand ways to choose text blocks.  A selection can be canceled with a single click of the mouse.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Selecting Lines}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selecting Lines\tcl3}}}{\b \par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting lines}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you are typing in a program, one of the most important shortcuts is selecting a line.  To select a line, start by moving the mouse to the left edge of the window.  When you have moved the mouse to the left of all of the text, but while it is still on the window, you will see the cursor change to an arrow.  Unlike the arrow that you see when you are selecting menu commands, this one points up and to the right.  This special arrow tells you that you are in the correct place to select a line.\par To actually select the line, move the mouse so it is to the left of the line you want to select, and click.  The entire line appears highlighted in inverse video.\par You can also select more than one line using this basic method.  To select more than one line, start as you did before, by moving the mouse to the left of the first line you want to select.  This time, though, hold the mouse button down and drag the mouse up or down.  As you drag the mouse, all of the lines between the original line and the line you are on will be selected.  As with dragging the mouse over characters, you let up on the mouse button to complete the selection.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Selecting the Entire Document}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selecting the Entire Document\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting a document}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 select all command}}}{\fs20 There are two ways to select all of the text in a file.  The first, and simplest, is to use the Select All command, located in the Edit menu.\par The second method is closely related to selecting lines.  As with line selections, you start by moving the cursor to the left of the text, but keeping it in the window.  The special right-arrow cursor lets you know you are in the correct place.  Now, hold down the command key (the one with the }{\outl\fs18 \u-3\'f0}{\fs20  on it) and click the mouse.  All of the text in the document is selected.  Note that it doesn't matter what line you started on.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Selecting Words}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Selecting Words\tcl3}}}{\b \par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 selecting words}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Word selection allows you to quickly isolate a single word.  To do this, move the cursor so that it is on the word you want to select, and click the mouse rapidly two times.  This is called double-clicking.  The word that the mouse was on is selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Extending a Selection}{\pard\plain \widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Extending a Selection\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extending a selection}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto command}}}{\fs20 Extending a selection is a method that is generally used to select large pieces of text, although it can also be used to change the amount of text already selected.  The basic idea is fairly simple.  You place the cursor at one end of the text you want to select, or you use one of the existing selection methods to select some text.  Now move the mouse to the point in the text where the selection is to end.  (You can use scrolling or the Goto command, located in the Find menu.)  Hold down the shift key, and click the mouse or continue selecting text.  All of the text, from the original insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the new position, is selected.\par This method of selecting text is very useful when copying or deleting subroutines from a program.  While you can easily drag the selection region to select the subroutine, it can take a fair amount of time to scroll the screen on a large subroutine.  Instead, you can start by placing the cursor at the beginning of the subroutine, or perhaps by selecting the first line.  Now move to the end using whatever method is appropriate.  Holding down the shift key, select the last line in the subroutine.  All lines from the first to the last are also selected, and you can easily copy or cut the subroutine from the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Split Screen}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Split Screen\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx4500\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 split screen\bxe }}}{\fs20 How many times have you been typing in a program, and wanted to refer back to an earlier subroutine or data declaration?  Split screen is a feature designed to help you do that.  When you split the screen, you can look at two different parts of a file at the same time.\par Splitting the screen is very simple.  The screen splitting control is the small black box that appears just above the vertical scroll bar.  Move the cursor to this box, and drag it about halfway down the page.  When you release the mouse button, the screen will split.\cell }\pard \qr\widctlpar\intbl\adjustright {\fs18 \par }{{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw290\pich230\picwgoal5800\pichgoal4600\macpict\bliptag-1785404566\blipupi72{\*\blipuid 9594e36a7dcb5a56a0c1273e5602ecf9}14d10000000000e601221101a00082a0008e01000a0000000002d00240980026000000000054012800000000005401220000000000540122000102db0007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff0180001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e200050180000180000b0060e200050180000180000b0060e200050180180180000b0060e200050180180180000f046018cf9780e600050180660180000f046018cf9780e600050180660180000f046018c0d8c0e6000001fe810180000f046018c0d8c0e6000001fe810180000e036018cfd8e500050186006180000e036018cfd8e500050186006180000e03600d98d8e50005019f81f980000e03600d98d8e50005019f81f980000e0360070fd8e5000001fe810180000e0360070fd8e5000001fe810180000b0060e2000001fe810180000b0060e2000001fe81018000150060fd00000efd0002060006ee000001fe81018000150060fd00000efd0002060006ee000001fe81018000130060fd000006fb000006ee00050181ff818000130060fd000006fb000006ee00050181ff8180001c0c6000000fcf860f9786000e1f9ffe8f019780f300050180000180001c0c6000000fcf860f9786000e1f9ffe8f019780f300050180000180001c0d6000001818c618d8c0000618c618fed800c6f3000001feff0180001c0d6000001818c618d8c0000618c618fed800c6f3000001feff0180001b106000001818c618d806000618c61fd8dfd8f2000501e6666780001b106000001818c618d806000618c61fd8dfd8f2000501e6666780001c116000001818c618d800000618c6d80fd81806f3000001feff0180001c116000001818c618d800000618c6d80fd81806f3000001feff0180001c116000000fcf8f0f9800000f18c38fc0cfd806f3000501e0000780001c116000000fcf8f0f9800000f18c38fc0cfd806f3000501e000078000120060f400030f80000cf3000501e000078000120060f400030f80000cf3000501e000078000150060fc0000c6fd0002060006ef000501e000078000150060fc0000c6fd0002060006ef000501e000078000130060fc0000c0fb000006ef000501e000078000130060fc0000c0fb000006ef000501e0000780001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e0000780001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e0000780001d0e60000018c0d8c618d800000618c618fed800c6f4000501e0000780001d0e60000018c0d8c618d800000618c618fed800c6f4000501e0000780001c11600000180fd8c618cf86000618c61fd8dfd8f3000001feff0180001c11600000180fd8c618cf86000618c61fd8dfd8f3000001feff0180001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e6666780001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e666678000120060f300030f80000cf4000001fe99018000120060f300030f80000cf4000001fe990180000f0060f9000006eb000501e6666780000f0060f9000006eb000501e6666780000f0060f9000006eb000001fe990180000f0060f9000006eb000001fe99018000150a600000178600178f8fdf80ec000001feff018000150a600000178600178f8fdf80ec000001feff018000150a60000018c00018d8d80606ec00050180000180009800260054000000a801280054000000a801220054000000a801220001150a60000018c00018d8d80606ec00050180000180001409600000180600181fd806eb00050181ff8180001409600000180600181fd806eb00050181ff8180001505600000180000fe180106c6ec000001fe810180001505600000180000fe180106c6ec000001fe81018000150a600000180000180fcfc386ec000001fe81018000150a600000180000180fcfc386ec000001fe810180000f0060f800000cec000001fe810180000f0060f800000cec000001fe810180000b0060e20005019f81f980000b0060e20005019f81f980000b0060e200050186006180000b0060e200050186006180000b0060e2000001fe810180000b0060e2000001fe810180000b0060e200050180660180000b0060e200050180660180000b0060e200050180180180000b0060e200050180180180000b0060e200050180000180000b0060e200050180000180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff01800007007fdeff01800007007fdeff0180000b0060e2000001feff0180000b0060e2000001feff01800022176000000f80060f800e0600df80001f80060300000e000006f9000001feff01800022176000000f80060f800e0600df80001f80060300000e000006f9000001feff01800022176000001840061840060000d8c00018c00606000006000003f9000501800001800022176000001840061840060000d8c00018c00606000006000003f900050180000180002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa00050180180180002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa000501801801800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa000501806601800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa0005018066018000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000001fe81018000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000001fe81018000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa0005018600618000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa000501860061800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa0005019f81f9800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa0005019f81f980000f0060ea00000cfa000001fe810180000f0060ea00000cfa000001fe810180001a0060fd00000ef900000efe000306001fc0f7000001fe810180001a0060fd00000ef900000efe000306001fc0f7000001fe810180001a0060fd000006f9000006fe0003060000c0f7000001fe810180001a0060fd000006f9000006fe0003060000c0f7000001fe8101800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020086000001818c618d8c0fe00091818c618d8c006000306f7000501800001800020086000001818c618d8c0fe00091818c618d8c006000306f7000501800001800020156000001818c618d800060f801818c618d80006000180f7000001feff01800020156000001818c618d800060f801818c618d80006000180f7000001feff0180001f076000001818c618d8fd00041818c618d8fe000118c6f7000501e6666780001f076000001818c618d8fd00041818c618d8fe000118c6f7000501e6666780001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f7000001fe990180001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f7000001fe990180000f0060ed00000cf7000501e6666780000f0060ed00000cf7000501e6666780001a0060fe0002060618fd0005c00018000006f2000001fe990180001a0060fe0002060618fd0005c00018000006f2000001fe99018000160060fd00010618fd0002c00018ef000501e666678000160060fd00010618fd0002c00018ef000501e6666780001d1260000018ce1f9f8017800fcf801f8f8f8e1f80f4000001feff0180001d1260000018ce1f9f8017800fcf801f8f8f8e1f80f4000001feff0180001d1260000018c60618c018c018d8c018d8d8c618c0f4000501e0000780001d1260000018c60618c018c018d8c018d8d8c618c0f4000501e0000780001d126000001ac60618c0180018d8c018dfd8c618c0f4000501e0000780001d126000001ac60618c0180018d8c018dfd8c618c0f4000501e0000780001d126000001dc606d8c0180018d8c018d80fc618c0f4000501e0000780001d126000001dc606d8c0180018d8c018d80fc618c0f4000501e0000780001d1260000018cf0398c018000fcf801f8fc0cf18c0f4000501e0000780001d1260000018cf0398c018000fcf801f8fc0cf18c0f4000501e000078000100060f300010f80f2000501e000078000100060f300010f80f2000501e000078000200060fd00011806fd000306078fc0fe0005c60000021fc0f9000501e000078000200060fd00011806fd000306078fc0fe0005c60000021fc0f9000501e0000780001f0060fd0001180efd00030e0c18c0fe0004c000001ad8f8000001feff0180001f0060fd0001180efd00030e0c18c0fe0004c000001ad8f8000001feff018000200060fd00111f8600060f80061819c0178f8fce18cfcf9ef8000001fe9901800098002600a8000000e6012800a8000000e6012200a8000000e601220001200060fd00111f8600060f80061819c0178f8fce18cfcf9ef8000001fe99018000200060fd000118c6fd000c061f9adfd8c0d8c618d8070186f9000501e666678000200060fd000118c6fd000c061f9adfd8c0d8c618d8070186f9000501e666678000210060fd001218c600060f800618dcc0180fd8c618cf8f80c0f9000001fe99018000210060fd001218c600060f800618dcc0180fd8c618cf8f80c0f9000001fe99018000200060fd000118c6fd000c0618d8c01818d8c618c0dad8c6f9000501e666678000200060fd000118c6fd000c0618d8c01818d8c618c0dad8c6f9000501e666678000200060fd000118cffd000c0f0f9f80180fcfcf0f9f820f86f9000001fe99018000200060fd000118cffd000c0f0f9f80180fcfcf0f9f820f86f9000001fe990180000f0060eb00000cf9000001feff0180000f0060eb00000cf9000001feff018000210060fd0002180f80fe000306078fc0fe0005c60000021fc0f90005018000018000210060fd0002180f80fe000306078fc0fe0005c60000021fc0f90005018000018000200060fd00021818c0fe00030e0c18c6fe0004c000001ad8f800050181ff818000200060fd00021818c0fe00030e0c18c6fe0004c000001ad8f800050181ff818000200060fd00111f80c0060f80061819c6178f8fce18cfcf9ef8000001fe81018000200060fd00111f80c0060f80061819c6178f8fce18cfcf9ef8000001fe81018000210060fd000218c180fe000c061f9adf98c0d8c618d8070186f9000001fe81018000210060fd000218c180fe000c061f9adf98c0d8c618d8070186f9000001fe81018000210060fd001218c600060f800618dcc6180fd8c618cf8f80c0f9000001fe81018000210060fd001218c600060f800618dcc6180fd8c618cf8f80c0f9000001fe81018000200060fd000118d8fd000c0618d8c61818d8c618c0dad8c6f90005019f81f98000200060fd000118d8fd000c0618d8c61818d8c618c0dad8c6f90005019f81f98000210060fd000218dfc0fe000c0f0f9f80180fcfcf0f9f820f86f90005018600618000210060fd000218dfc0fe000c0f0f9f80180fcfcf0f9f820f86f900050186006180000f0060eb00000cf9000001fe810180000f0060eb00000cf9000001fe810180000b0060e200050180660180000b0060e200050180660180000b0060e200050180180180000b0060e200050180180180000b0060e200050180000180000b0060e2000501800001800007007fdeff01800007007fdeff01800014066000003ffffffdeb99089f000001800001800014066000003ffffffdeb99089f000001800001800014066007003e00000eeb6608670070019ff801800014066007003e00000eeb6608670070019ff80180001406601b003e00000deb99089f006c0198180180001406601b003e00000deb99089f006c01981801800014066063fe3e00000eeb6608673fe301981ff9800014066063fe3e00000eeb6608673fe301981ff9800014066180063e00000deb99089f3000c1981819800014066180063e00000deb99089f3000c1981819800014066600063e00000eeb6608673000319ff819800014066600063e00000eeb6608673000319ff819800014066180063e00000deb99089f3000c1830019800014066180063e00000deb99089f3000c1830019800014066063fe3e00000eeb6608673fe301830019800014066063fe3e00000eeb6608673fe30183001980001406601b003e00000deb99089f006c0183001980001406601b003e00000deb99089f006c01830019800014066007003e00000eeb66086700700183fff9800014066007003e00000eeb66086700700183fff9800014066000003e00000deb99089f000001800001800014066000003e00000deb99089f000001800001800014066000003ffffffeeb660867000001800001800014066000003ffffffeeb660867000001800001800007007fdeff01800007007fdeff01800002db00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can edit in either half of the window.  Simply use the cursor to position the insertion point, or scroll using either vertical scroll bar.  The active half of the screen will change automatically.  \par There is one limitation on split screens.  In order to show a complete scroll bar, you must have at least five lines of text in both the top and bottom half of the screen.  If you try to make either part of the screen smaller, the split will be moved to give the appropriate number of lines.  If the window isn't large enough to split it with five lines on both the top and bottom, the split screen control will vanish.  With this restriction in mind, you can split the screen between any two lines.\par Removing the split screen is just as easy as splitting it.  Simply drag the split screen control to the top of the window and release it.\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Entering Text}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Entering Text\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Whenever a text window is the front (active) window, and a dialog box is not active, any text you type from the keyboard will appear in the window.  In insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , the text always appears before the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 .  In over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , the character that is underlined is replaced.\par If you select some text, and then begin typing, the selected text is deleted, and the new characters appear where the selected text was located.\par If the insertion point is not on the screen when you start typing, the screen will scroll to show the insertion point, and then the characters are inserted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Special Keys}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Special Keys\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Return Key}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Return Key\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For any text window that is not a shell window, the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  breaks a line at the point where the }{\outl\fs18 return}{\fs20  key is pressed, moving all of the text from the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the end of the line to a new line.  If you are at the end of a line when you type the }{\outl\fs18 return }{\fs20 key, a new, blank line is created.  There are, however, many variations on this basic theme.  If you are in over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , the behavior of the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  changes.  Instead of breaking the line or creating a new line, the }{\outl\fs18 return }{\fs20 key functions simply as a cursor movement command \endash  the insertion point is moved to the start of the next line in the file.  Only if you are at the end of the file does the }{\outl\fs18 return }{\fs20 key create a new line.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 indenting}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extras menu}}}{\fs20 In block-structured languages like Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20  and Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\fs20 , indenting is often used to show the structure of a program.  The major problem with indenting is moving the cursor to the correct spot in the line before starting to type in text.  The way the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  works can be changed to make this process easier.  Once changed, pressing }{\outl\fs18 return }{\fs20 causes the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to automatically space over, following the indentation of the line above the current line.  If the current line is blank, the cursor is moved to line up with the first line above the current line that is not blank.  This is called the Auto-Indent mode.  To activate auto-indent mode, select Auto Indent from the Extras menu.  Auto indent is turned off by selecting it a second time.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Delete Key}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete Key\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 clear command}}}{\fs20 If you have selected any text, the }{\outl\fs20 delete}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 delete}{\v\fs20  key}{\outl\v\fs20 \bxe }}}{\fs20  works exactly like the Clear command:  it removes the selected text from the file.  If no text is selected, the }{\outl\fs18 delete }{\fs20 key deletes the character to the left of the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 .  If the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  is at the start of a line, the remainder of the line is appended to the end of the line above.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Tab Key}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Tab Key\tcl3}}}{\b\caps \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you are in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , the }{\outl\fs18 tab}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 tab}{\v\fs20  key}{\outl\v\fs18 \bxe }}}{\fs20  inserts spaces until the insertion point reaches the next tab stop}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20 .  In over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , the }{\outl\fs18 tab }{\fs20 key simply moves the insertion point forward to the next tab stop.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b The Arrow Keys}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v The Arrow Keys\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The four arrow keys}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrow keys\bxe }}}{\fs20  can be used to move the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 .  Using the arrow keys will deselect any previously selected text without removing it from the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Screen Moves}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Screen Moves\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key while typing the up-arrow key will cause the selection point to move to the top of the window.  If the insertion point is already at the top of the window, the window will scroll up by one screen.\par Likewise, holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key while typing the down-arrow key will move the selection point to the bottom of the window.  Again, if you are already at the bottom of the window, the display scrolls down one screen full toward the end of the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Word Tabbing}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Word Tabbing\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can move to the start of the next word or previous word in the file using word tabbing}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 word tabbing\bxe }}}{\fs20 .  A word is defined as any sequence of characters other than spaces and end-of-line markers.  To move to the next word in the file, hold down the }{\outl\fs18 option}{\fs20  key and type the right-arrow key.  Using the left-arrow key instead of the right-arrow key will move to the beginning of the previous word.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Moving to the Start or End of a Line}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Moving to the Start or End of a Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can move to the start of a line by holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key and typing the left-arrow key.  This moves to the first column in the line, regardless of the current auto-indent mode.  To move to the end of the line, hold down the }{\outl\fs18 \u-3\'f0}{\fs20  key and type the right-arrow key.  This moves to the column immediately after the last non-blank character in the line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Moving Within the File}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Moving Within the File\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Typing one of the digit keys (}{\outl\fs18 1}{\fs20  to }{\outl\fs18 9}{\fs20 ) while holding down the }{\outl\fs18 \u-3\'f0}{\fs20  key will move the display to one of nine evenly spaced intervals in the file.  }{\outl\fs18 \u-3\'f01}{\fs20  moves to the start of the file, while }{\outl\fs18 \u-3\'f09}{\fs20  moves to the end of the file.  The other keys each move to a location one-eighth of the way through the file from the previous key.\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Ruler}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Ruler\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ruler}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 show ruler command}}}{\fs20 You can see where the current tab stops are, and change them, by using the ruler.  To make the ruler visible, use the Show Ruler command in the Extras menu.  Select the same command a second time to make the ruler disappear.\par With the ruler visible, your edit window will look like the one shown on the right.\par The numbers, dots, and vertical bars across the top indicate the columns in the document.  Every ten columns, a number appears.  The twentieth column, for example, is marked with the number 2.  Halfway between each numbered column is a vertical bar.  The remaining columns are marked with a dot.\cell }\pard \qr\widctlpar\intbl\adjustright {\par }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw289\pich249\picwgoal5780\pichgoal4980\macpict\bliptag-787103515\blipupi72{\*\blipuid d115c0e52b0339d319ab2e09387432c7}15920000000000f901211101a00082a0008e01000a0000000002d00240980026000000000055012800000000005501210000000000550121000102db0007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff0180001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001c037ff8000ff9ff08f83999f9fc3833307efe0ff9ff05fc0007ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff0bf99999f9f999f333fe666667f9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff02f99999fef905f333fe66667ff9ff05fcf9e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf83999f9fc387870fe0e670ff9ff05fc01e7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9ff99fcf3fe7e07e7f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff9ffcff9ff0bf99999f9f999fcf3fe7e6667f9ff05fcffe7ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff80001d037ff8000ff9ff0bf83c38181c383cf0667e670ff9ff05fc0007ff800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff01800007007fdeff018000080060df0002018000080060df0002018000140060f8000004f800000cf800001efd0002018000140060f8000004f800000cf800001efd0002018000200060fd000004fd000004fd000004fd000012fd000004fd000004fd0002018000200060fd000004fd000004fd000004fd000012fd000004fd000004fd0002018000200060fd000004fd000004fd000004fd000004fd000004fd00000cfd0002018000200060fd000004fd000004fd000004fd000004fd000004fd00000cfd0002018000210060fd0c0004fd0c0004fd0c0004fd0c0008fd0c0004fd0c01020cfe0002018000210060fd0c0004fd0c0004fd0c0004fd0c0008fd0c0004fd0c01020cfe0002018000210060fd0c0000fd0c0004fd0c0000fd0c001efd0c0000fd0c011c0cfe0002018000210060fd0c0000fd0c0004fd0c0000fd0c001efd0c0000fd0c011c0cfe0002018000140060f900000cfa00000cfa00000cf80002018000140060f900000cfa00000cfa00000cf80002018000140060f900001efa00001efa00001ef80002018000140060f900001efa00001efa00001ef80002018000140060f900003ffa00003ffa00003ff80002018000140060f900003ffa00003ffa00003ff80002018000080060df0002018000080060df000201800007007fdeff01800007007fdeff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001feff0180000f046018cf9780e6000001feff0180000f046018cf9780e6000001feff0180000f046018c0d8c0e6000001feff0180000f046018c0d8c0e6000001feff0180000e036018cfd8e500050180000180000e036018cfd8e500050180000180000e03600d98d8e500050180180180000e03600d98d8e500050180180180000e0360070fd8e500050180660180000e0360070fd8e500050180660180000b0060e2000001fe810180000b0060e2000001fe81018000150060fd00000efd0002060006ee0005018600618000150060fd00000efd0002060006ee0005018600618000130060fd000006fb000006ee0005019f81f98000130060fd000006fb000006ee0005019f81f980001c0c6000000fcf860f9786000e1f9ffe8f019780f3000001fe810180001c0c6000000fcf860f9786000e1f9ffe8f019780f3000001fe810180001c0d6000001818c618d8c0000618c618fed800c6f3000001fe810180001c0d6000001818c618d8c0000618c618fed800c6f3000001fe810180001b106000001818c618d806000618c61fd8dfd8f2000001fe810180001b106000001818c618d806000618c61fd8dfd8f2000001fe810180001c116000001818c618d800000618c6d80fd81806f300050181ff8180001c116000001818c618d800000618c6d80fd81806f300050181ff8180001c116000000fcf8f0f9800000f18c38fc0cfd806f300050180000180001c116000000fcf8f0f9800000f18c38fc0cfd806f30005018000018000120060f400030f80000cf3000001feff018000120060f400030f80000cf3000001feff0180009800260055000000aa01280055000000aa01210055000000aa01210001150060fc0000c6fd0002060006ef000501e666678000150060fc0000c6fd0002060006ef000501e666678000130060fc0000c0fb000006ef000001fe99018000130060fc0000c0fb000006ef000001fe990180001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e6666780001d0d600000178f8fce18cfc6000e1f9ffe8f019780f4000501e6666780001d0e60000018c0d8c618d800000618c618fed800c6f4000001fe990180001d0e60000018c0d8c618d800000618c618fed800c6f4000001fe990180001c11600000180fd8c618cf86000618c61fd8dfd8f3000501e6666780001c11600000180fd8c618cf86000618c61fd8dfd8f3000501e6666780001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d126000001818d8c618c0c0000618c6d80fd81806f4000001fe990180001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e6666780001d12600000180fcfcf0f9f80000f18c38fc0cfd806f4000501e666678000120060f300030f80000cf4000001feff018000120060f300030f80000cf4000001feff0180000f0060f9000006eb000501e0000780000f0060f9000006eb000501e0000780000f0060f9000006eb000501e0000780000f0060f9000006eb000501e000078000150a600000178600178f8fdf80ec000501e000078000150a600000178600178f8fdf80ec000501e000078000150a60000018c00018d8d80606ec000501e000078000150a60000018c00018d8d80606ec000501e0000780001409600000180600181fd806eb000501e0000780001409600000180600181fd806eb000501e0000780001505600000180000fe180106c6ec000501e0000780001505600000180000fe180106c6ec000501e000078000150a600000180000180fcfc386ec000501e000078000150a600000180000180fcfc386ec000501e0000780000f0060f800000cec000501e0000780000f0060f800000cec000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000501e0000780000b0060e2000001feff0180000b0060e2000001feff0180000b0060e2000001fe990180000b0060e2000001fe990180000f046018000006e6000501e6666780000f046018000006e6000501e6666780000c016018e3000001fe990180000c016018e3000001fe990180001106601f8f8f8e1f80e8000501e6666780001106601f8f8f8e1f80e8000501e66667800011066018d8d8c618c0e8000001fe9901800011066018d8d8c618c0e8000001fe9901800011066018dfd8c618c0e8000501e66667800011066018dfd8c618c0e8000501e66667800011066018d80fc618c0e8000001fe9901800011066018d80fc618c0e8000001fe990180001106601f8fc0cf18c0e8000501e6666780001106601f8fc0cf18c0e8000501e6666780000f046000000f80e6000001fe990180000f046000000f80e6000001fe9901800012036000000efb000006ec000501e66667800012036000000efb000006ec000501e666678000120360000006fb00000eec000001fe99018000120360000006fb00000eec000001fe99018000150a600fcf860f9780060f8006ec000501e666678000150a600fcf860f9780060f8006ec000501e6666780001606601818c618d8c0fe00010606ed000001fe990180001606601818c618d8c0fe00010606ed000001fe99018000150a601818c618d800060f8006ec000501e666678000150a601818c618d800060f8006ec000501e6666780001505601818c618d8fd00010606ed000001fe990180001505601818c618d8fd00010606ed000001fe990180001505600fcf8f0f98fd00010f06ed000501e6666780001505600fcf8f0f98fd00010f06ed000501e6666780000f0060f700000ced000001fe990180000f0060f700000ced000001fe990180002202600780fc0000c6fb00160f8fc000c00000060000060000c000180001e6666780002202600780fc0000c6fb00160f8fc000c00000060000060000c000180001e6666780002202600cc0fc0000c0fb001118d8c000c000000600000e0000c000180001fe990180002202600cc0fc0000c0fb001118d8c000c000000600000e0000c000180001fe990180002725600c0f9780178f8fce18cfc0060f8000d9c00fcf98df9f8f8006000fcf801f8f81e66667800098002600aa000000f9012800aa000000f9012100aa000000f9012100012725600c0f9780178f8fce18cfc0060f8000d9c00fcf98df9f8f8006000fcf801f8f81e666678000260a601f18d8c018c0d8c618d8fd0003019ac018fed80ac618c0060018d8c018d8c1fe99018000260a601f18d8c018c0d8c618d8fd0003019ac018fed80ac618c0060018d8c018d8c1fe990180002725600c18d800180fd8c618cf80060f80061cc018d8dad8c618c0060018d8c018dfc1e6666780002725600c18d800180fd8c618cf80060f80061cc018d8dad8c618c0060018d8c018dfc1e666678000270b600c18d8001818d8c618c0c0fe00111818c018d8ddd8c6d8c0060018d8c018d801fe99018000270b600c18d8001818d8c618c0c0fe00111818c018d8ddd8c6d8c0060018d8c018d801fe99018000270b600c0f9800180fcfcf0f9f80fe00161fdf800fcf98d8c38f800f000fcf801f8fc1e666678000270b600c0f9800180fcfcf0f9f80fe00161fdf800fcf98d8c38f800f000fcf801f8fc1e6666780000b0060e2000001fe990180000b0060e2000001fe9901800022176000000f80060f800e0600df80001f80060300000e000006f9000501e66667800022176000000f80060f800e0600df80001f80060300000e000006f9000501e66667800022176000001840061840060000d8c00018c00606000006000003f9000001fe9901800022176000001840061840060000d8c00018c00606000006000003f9000001fe990180002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa000501e6666780002318600000180f9f980f860e0fd8cf9f98cf9f8c0fcf860f978180fa000501e66667800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa000001fe9901800023186000000f98c60f98c60618df98d8df80c60c1818c618d8c186fa000001fe99018000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000501e666678000230060fe0014dfc600d8c60618d81fd8d80fc60c1818c618d80180fa000501e666678000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa000001fe99018000231860000010d806d0d8c60618d81818d818c6c61818c618d80306fa000001fe9901800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa000501e66667800023056000000f8fc3fe8f0f0f0fd80fd8d80fc3830fcf8f0f980606fa000501e6666780000f0060ea00000cfa000001fe990180000f0060ea00000cfa000001fe990180001a0060fd00000ef900000efe000306001fc0f7000001feff0180001a0060fd00000ef900000efe000306001fc0f7000001feff0180001a0060fd000006f9000006fe0003060000c0f700050180000180001a0060fd000006f9000006fe0003060000c0f7000501800001800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020156000000fcf860f9780060f800fcf860f978006000180f700050181ff81800020086000001818c618d8c0fe00091818c618d8c006000306f7000001fe8101800020086000001818c618d8c0fe00091818c618d8c006000306f7000001fe8101800020156000001818c618d800060f801818c618d80006000180f7000001fe8101800020156000001818c618d800060f801818c618d80006000180f7000001fe810180001f076000001818c618d8fd00041818c618d8fe000118c6f7000001fe810180001f076000001818c618d8fd00041818c618d8fe000118c6f7000001fe810180001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f70005019f81f980001f076000000fcf8f0f98fd00090fcf8f0f980006000f86f70005019f81f980000f0060ed00000cf700050186006180000f0060ed00000cf700050186006180000b0060e2000001fe810180000b0060e2000001fe810180000b0060e200050180660180000b0060e200050180660180000b0060e200050180180180000b0060e200050180180180000b0060e200050180000180000b0060e2000501800001800007007fdeff01800007007fdeff01800014066000003ffffffdeb99089f000001800001800014066000003ffffffdeb99089f000001800001800014066007003e00000eeb6608670070019ff801800014066007003e00000eeb6608670070019ff80180001406601b003e00000deb99089f006c0198180180001406601b003e00000deb99089f006c01981801800014066063fe3e00000eeb6608673fe301981ff9800014066063fe3e00000eeb6608673fe301981ff9800014066180063e00000deb99089f3000c1981819800014066180063e00000deb99089f3000c1981819800014066600063e00000eeb6608673000319ff819800014066600063e00000eeb6608673000319ff819800014066180063e00000deb99089f3000c1830019800014066180063e00000deb99089f3000c1830019800014066063fe3e00000eeb6608673fe301830019800014066063fe3e00000eeb6608673fe30183001980001406601b003e00000deb99089f006c0183001980001406601b003e00000deb99089f006c01830019800014066007003e00000eeb66086700700183fff9800014066007003e00000eeb66086700700183fff9800014066000003e00000deb99089f000001800001800014066000003e00000deb99089f000001800001800014066000003ffffffeeb660867000001800001800014066000003ffffffeeb660867000001800001800007007fdeff01800007007fdeff018000a0008fa00083ff}}{\par }{\fs20 \cell }\pard \widctlpar\intbl\adjustright {\fs20 \row }\pard \qj\fi360\widctlpar\adjustright {\fs20 Under some of the columns you will see an inverted triangle pointing at the column marker.  This inverted triangle is a tab stop}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop\bxe }}}{\fs20 .  When you use the }{\outl\fs18 tab}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 tab}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20 , it moves the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  to the next tab stop, inserting a tab character if you are in insert mode or past the end of the line in overstrike mode.\par To remove an existing tab stop, move the cursor so that the arrow points at the tab stop, and click.  To create a tab stop where none exists, move the cursor to the column on the ruler where you want a tab stop, and click.\par Moving a tab stop, then, is a two-step process.  First, remove the old tab stop, and then place a new tab stop in the proper column.  Of course, the order of these steps can be changed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Default tab stops}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Default tab stops\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20 All of the ORCA language development environments are multi-lingual; the same environment can be used with more than one language.  Tab stops that are reasonable for assembly language, however, may not be the best choice for Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\fs20 .  The same is true for virtually any pair of languages you might pick.\par As a result, each language has a different default tab line.  When you open a new window, the tab line is set to the default tab stops for the language assigned to the new window.  If you change the language stamp, a dialog will appear that gives you the choice of changing to the new language's default tabs or sticking with the ones that are already in use.\par The default tab line is changed by making changes in the SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20 .  This is described in detail later in this chapter.  For now, the important point is that changing the tab stops with the ruler does not change the default tabs.  The next time you load the file from disk, the original tab stops will again be used.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The File Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The File Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx6120\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk6}The File menu is used to open files, save files to disk that have been created or changed with the editor, quit the program, and for various disk-based housekeeping functions.\par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \par \par }\pard \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \tx8730\adjustright {\b New}{\pard\plain \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \tx8730\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v New\tcl3}}}{\b \par }\pard \qj\widctlpar\intbl\tx8730\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\tx8730\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\tx8730\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new command}}}{\fs20 The New command opens a new window.  Until it is saved for the first time, the window will be called "Untitled X," where X is a number.  The first new window opened will be assigned a number of 1, and subsequent windows will increment the value.  You would use the New command to create new programs.\par \par }\pard \qj\widctlpar\intbl\tx8730\adjustright {\fs20 \cell }\pard \widctlpar\intbl\adjustright {\par }{{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw146\pich248\picwgoal2920\pichgoal4960\macpict\bliptag-2054001889\blipupi72{\*\blipuid 85926b1fbf2312c96fc0914fd41d49bc}0cd90000000000f800921101a00082a0008e01000a00000000030802809800140000000000f800980000000000f800920000000000f80092000102ed0008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30009057fc1cf1ffffcf30009057fc1cf1ffffcf30009057fcfff9ffffcf30009057fcfff9ffffcf30009057fcf8f9f0ffcf30009057fcf8f9f0ffcf30009057fc3cf9e67fcf30009057fc3cf9e67fcf30009057fcfcf9e07fcf30009057fcfcf9e07fcf30009057fcfcf9e7ffcf30009057fcfcf9e7ffcf30009057fcf870f0ffcf30009057fcf870f0ffcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ffdff00fcf30008007ff1ff00f8ff0008007ff1ff00f8ff00080060f1000018ff00080060f1000018ff00080060f1000018ff00080060f1000018ff000c02600046f500020c2318ff000c02600046f500020c2318ff000c02600066f5000408331f80000c02600066f5000408331f80000e046000763cc3f70004363b1f80000e046000763cc3f70004363b1f80000e0460007e66dbf70004433f1f80000e0460007e66dbf70004433f1f80000e0460006e7edbf7000442371f80000e0460006e7edbf7000442371f80000e046000666066f700044b331f80000e046000666066f700044b331f80000e046000623c66f7000436311f80000e046000623c66f7000436311f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000667c3c7cf8000436331f80000f056000667c3c7cf8000436331f80000d016000fd66f8000443331f80000d016000fd66f8000443331f80000f05600066667e66f8000442331f80000f05600066667e66f8000442331f80000f05600066666066f800044b331f80000f05600066666066f800044b331f8000110760003c7c3c666660fa0004361e1f8000110760003c7c3c666660fa0004361e1f80000b0360000060f400021f80000b0360000060f400021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000d0360003c38f600040c619f80000d0360003c38f600040c619f80000d0360006618f6000408619f80000d0360006618f6000408619f80000f0360006018fe3cf90004366d9f80000f0360006018fe3cf90004366d9f8000100660006018666066f90004436d9f8000100660006018666066f90004436d9f8000100660006018663c7ef90004426d9f8000100660006018663c7ef90004426d9f8000100660006618660660f900044b331f8000100660006618660660f900044b331f80000d016000fc3cf9000436331f80000d016000fc3cf9000436331f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000c0260003cf500040c1e1f80000c0260003cf500040c1e1f80000c02600066f5000408331f80000c02600066f5000408331f80000f056000603e631ef8000436301f80000f056000603e631ef8000436301f80000f0560003c666333f80004431e1f80000f0560003c666333f80004431e1f80000f0560000666363ff8000442031f80000f0560000666363ff8000442031f80000f05600066663630f800044b331f80000f05600066663630f800044b331f80000f0560003c3e1c1ef80004361e1f80000f0560003c3e1c1ef80004361e1f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260003cfe000101e0f800021f80000f0260003cfe000101e0f800021f80000f02600066fe00010330f800021f80000f02600066fe00010330f800021f800010086000603e631e0331e0f900021f800010086000603e631e0331e0f900021f80000f0760003c6663330333f800021f80000f0760003c6663330333f800021f8000100860000666363f03f1e0f900021f8000100860000666363f03f1e0f900021f80001008600066663630033030f900021f80001008600066663630033030f900021f8000110960003c3e1c1e0331e333fa00021f8000110960003c3e1c1e0331e333fa00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000130260007cfc000307e0003cfe000403001f8000130260007cfc000307e0003cfe000403001f80001402600066fd00043001800066fe000403001f80001402600066fd00043001800066fe000403001f800015136000663c631e367c0183c0603e631e1f001f800015136000663c631e367c0183c0603e631e1f001f8000151360007c66633338300186603c66633333001f8000151360007c66633338300186603c66633333001f8000151360006c7e363f30300186600666363f33001f8000151360006c7e363f30300186600666363f33001f8000151360006660363030360186606666363033001f8000151360006660363030360186606666363033001f800015136000663c1c1e301c0183c03c3e1c1e1f001f800015136000663c1c1e301c0183c03c3e1c1e1f001f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000f0260007cfe000103c0f800021f80000f0260007cfe000103c0f800021f80001002600066fe0002066003f900021f80001002600066fe0002066003f900021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130b6000663e3e3c0603c7c667c0fc00021f8000130260007cfe660503c663066660fc00021f8000130260007cfe660503c663066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b60006066667e0067e3066660fc00021f8000130b600060663e60066603666660fc00021f8000130b600060663e60066603666660fc00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000140c6000603e463c03c3c1c3e7c666fd00021f8000100060fe00003cfc000006fb00021f8000100060fe00003cfc000006fb00021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460007c0060f700040c3e1f80000e0460007c0060f700040c3e1f8000100660006600000180f9000408331f8000100660006600000180f9000408331f800010066000666ce3e3e0f9000436331f800010066000666ce3e3e0f9000436331f8000100660007c70633180f90004433e1f8000100660007c70633180f90004433e1f8000100660006060633180f9000442301f8000100660006060633180f9000442301f80001006600060606331b0f900044b301f80001006600060606331b0f900044b301f8000110760006060f330e333fa000436301f8000110760006060f330e333fa000436301f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f80000e0460003c0030f700040c1e1f80000e0460003c0030f700040c1e1f80000f056000660000c0f8000408331f80000f056000660000c0f8000408331f80000f056000666671f0f8000436331f80000f056000666671f0f8000436331f80000f056000666630c0f8000443331f80000f056000666630c0f8000443331f80000f056000666630c0f8000442331f80000f056000666630c0f8000442331f80000f056000666630d8f800044b331f80000f056000666630d8f800044b331f80000f0560003c3e7870f80004361e1f80000f0560003c3e7870f80004361e1f80000b02600006f40003031f80000b02600006f40003031f8000080060f100021f8000080060f100021f8000080060f100021f8000080060f100021f800007007ff0ff01800007007ff0ff018000070003f0ff018000070003f0ff01800002ed00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Open}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Open\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command\bxe }}}{\fs20 The Open command is used to open a text file that already exists on a disk.  After choosing the file from the Open command's file list, it will be opened and placed in a new window.  Like all windows newly created on the desktop, this window will be as large as the screen.\par }\pard \qj\ri1980\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Close}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Close\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 close command\bxe }}}{\fs20 The Close command closes the front window.  The front window is the window that is currently highlighted.  If the file has changed since the last time it was saved, a dialog box appears before the window is closed.  The dialog box gives you a chance to save the changes to the file, or to cancel the close operation.\par This menu item will be dimmed if there are no windows open on the desktop.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \tx0\adjustright {\b Save}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \tx0\adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Save\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 save command\bxe }}}{\fs20 If the front window was loaded from disk, or if it has already been saved at least one time, then ORCA knows which disk file is associated with the window.  In that case, this command causes the contents of the window to be written to the disk.  After the write operation is complete, the desktop returns to its original state \endash  the file is still on the desktop, and all characteristics of the file have been preserved.\par If you use the Save command on an untitled window, it will function as though you had selected the Save As command.  The Save As command is discussed below.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Save As}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Save As\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 save as command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 open command}}}{\fs20 The Save As command is used to write the contents of a window to a file that is different from the original text file, or to save a new, untitled window to a file for the first time.  The Save As... dialog is the standard file save dialog, described in the manuals that come with your computer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Revert To Saved}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Revert To Saved\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 revert to saved command\bxe }}}{\fs20 The contents of the window are replaced by a copy of the file read from disk.  The cursor is moved to the first character of the first line of the file, but all other options (such as over strike or auto indent) remain the same.\par This menu will be dimmed if there have been no changes to the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Page Setup}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Page Setup\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 page setup command\bxe }}}{\fs20 The Page Setup command is used when you are ready to print the contents of one of your open windows.  The actual dialog depends on the printer driver you have selected from the Chooser.  For detailed information about the Page Setup dialog, see the documentation that comes with your computer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Print}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Print\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 print command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printing files}}}{\fs20 The Print command sends the contents of the front window to your printer.  You can select only a portion of your document to be printed, or, if no text has been selected when you issue the Print command, then the entire file will be printed.\par The Print command brings up a standard dialog to control the printing process.  This dialog is documented in the manuals that came with your computer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Quit}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Quit\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 quit command\bxe }}}{\fs20 All windows on the desktop are closed.  If any of the files have changed since the last time they were saved, you are presented with a dialog box that gives you a chance to save the file or cancel the Quit command.  If you cancel the Quit command, all windows that have already been closed stay closed.  Once all windows are closed, the program returns control to the text programming environment.  From there, you can use the shell's quit command to return to the program launcher that you used to start ORCA/Modula-2.\par }\pard \qj\fi540\widctlpar\adjustright {\*\bkmkend bk6}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file menu\bxe }{\rxe bk6}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Edit Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Edit Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx6480\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk7}The Edit menu provides the standard editing capabilities common to virtually all desktop programs.  You can select all of the text in the document; cut, copy or clear selected text; paste text from the current scrap; or undo changes to the file.\par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \par \par }\pard \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b Undo}{\pard\plain \qj\widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Undo\tcl3}}}{\b\fs20 \par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 undo command\bxe }}}{\fs20 The Undo command changes the file back to the state it was in before the last command that changed the file was executed.  For example, if you use the }{\outl\fs20 delete}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 delete}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20  to delete several characters of text, then use the Undo command, the deleted characters will reappear in the file.}{\v\fs20 \cell }\pard \qr\widctlpar\intbl\adjustright {\par \par }{{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw126\pich175\picwgoal2520\pichgoal3500\macpict\bliptag1613807943\blipupi72{\*\blipuid 6030c147747206bf9ed44854c7945715}07e00000000000af007e1101a00082a0008e01000a0000000002d002409800100000000000af00800000000000af007e0000000000af007e000102f10008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008047c1f9cfffcf60008047c1f9cfffcf60008047cff9ff3fcf60008047cff9ff3fcf60008047cfc18e0fcf60008047cfc18e0fcf60008047c399cf3fcf60008047c399cf3fcf60008047cf99cf3fcf60008047cf99cf3fcf60008047cf99cf27cf60008047cf99cf27cf60008047c1c1878fcf60008047c1c1878fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60008007ffeff00fcf60006007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80c046001100010f900024151f80c046001100010f900024151f80c046002200020f900028021f80c046002200020f900028021f80e05600111415140fb0003014041f80e05600111415140fb0003014041f80d016002fe220020fa00022081f80d016002fe220020fa00022081f80e016001fe110010fb0003040101f80e016001fe110010fb0003040101f80d016002fe220020fa0002a201f80d016002fe220020fa0002a201f80e05600141115140fb0003014151f80e05600141115140fb0003014151f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80c046002200080f900028221f80c046002200080f900028221f80d046001011140fa0003014141f80d046001011140fa0003014141f80c046002022080f900022081f80c046002022080f900022081f80c0360010111f90003040141f80c0360010111f90003040141f80c0460022220a0f90002a221f80c0460022220a0f90002a221f80d046001415040fa0003014111f80d046001415040fa0003014111f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024141f80a02600140f700024141f80a02600220f700028221f80a02600220f700028221f80e05600101414110fb0003014101f80e05600101414110fb0003014101f80d05600202222220fa00022201f80d05600202222220fa00022201f80e05600101111150fb0003040101f80e05600101111150fb0003040101f80d056002222220a0fa0002a221f80d056002222220a0fa0002a221f80e05600141414010fb0003014141f80e05600141414010fb0003014141f80c056000000200a0f9000101f80c056000000200a0f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a02600140f700024111f80a02600140f700024111f80d05600220000080fa00028209f80d05600220000080fa00028209f80f0660011151414140fc0003014111f80f0660011151414140fc0003014111f80e066002a222008220fb000220a1f80e066002a222008220fb000220a1f80f0660010111410150fc0003040111f80f0660010111410150fc0003040111f80d056002022020a2fa0002a0a1f80d056002022020a2fa0002a0a1f80f0660010151404140fc0003014041f80f0660010151404140fc0003014041f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f80a0360014140f7000101f80a0360014140f7000101f80a0360022080f7000101f80a0360022080f7000101f80d0660010041415140fa000101f80d0660010041415140fa000101f80d0660020082222280fa000101f80d0660020082222280fa000101f80c05600100415111f9000101f80c05600100415111f9000101f80c05600220820222f9000101f80c05600220820222f9000101f80c016001fe410051f9000101f80c016001fe410051f9000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8110f6001e001c0000001e1c1c00000c1e1f8110f6001e001c0000001e1c1c00000c1e1f8110f60033000c000018330c0c000008331f8110f60033000c000018330c0c000008331f8110f600301e0c1e1e3e330c0c000036331f8110f600301e0c1e1e3e330c0c000036331f8110f6001e330c333318330c0c000043331f8110f6001e330c333318330c0c000043331f8110f600033f0c3f30183f0c0c0000423f1f8110f600033f0c3f30183f0c0c0000423f1f8110f60033300c30331b330c0c00004b331f8110f60033300c30331b330c0c00004b331f810016001fde109e0e331e1e000036331f810016001fde109e0e331e1e000036331f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f8070060f4000101f806007ff3ff00f806007ff3ff00f8060001f3ff00f8060001f3ff00f8a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you have enough memory to hold all of the changes, repeated use of the Undo command will eventually return the file to the same condition it was in when it was originally loaded from disk.  If memory starts to run short, all but the most recent changes may be lost.  In general, you should not depend on being able to undo more than one command.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Cut}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Cut\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cut command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 paste command}}}{\fs20 The selected text is removed from the file and placed in the clipboard.  You can paste this text anywhere in a window with the Paste command, described below.  The clipboard holds only one block of text at a time.  The next Cut or Copy command will cause the contents of the clipboard to be replaced by the new selection.\par This menu item is disabled if no text has been selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Copy}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Copy\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 copy command\bxe }}}{\fs20 The selected text is copied to the clipboard, replacing the previous contents of the clipboard.  The file being edited is not affected.\par This menu item is disabled if no text has been selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Paste}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Paste\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 paste command\bxe }}}{\fs20 The contents of the clipboard are copied into the file at the current insertion point.  If any text was selected when the Paste command was issued, the selected text is cleared before the Paste is performed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Clear}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Clear\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 clear command\bxe }}}{\fs20 The selected text is removed from the file.\par Assuming that some text has been selected, this command is equivalent to using the }{\outl\fs20 delete}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 delete}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20 .\par This menu item is disabled if no text has been selected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Select All}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Select All\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 select all command\bxe }}}{\fs20 All of the text in the file is selected.\par You can also select all of the text in the file by moving the mouse to the left of the text, holding down the command (}{\outl\fs18 \u-3\'f0}{\fs20 ) key, and clicking the mouse.\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk7}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 edit menu\bxe }{\rxe bk7}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Windows Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Windows Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\trowd \trgaph90\trleft-90 \clvertalt\cltxlrtb \cellx6210\clvertalt\cltxlrtb \cellx8010\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk8}The Windows menu gives you control over how the windows are displayed, and helps you find windows on a cluttered desktop.  The Tile and Stack commands sort the files on the desktop into two different pictorial formats.  The names of all windows currently open are also shown in this menu.  The front window's name is marked with a check.  You can bring any window to front by selecting its name from the window list.}{\v\fs20 \cell }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw156\pich152\picwgoal3120\pichgoal3040\macpict\bliptag-586680411\blipupi72{\*\blipuid dd07f7a59aa680b7e5b48f75d34562b5}080b000000000098009c1101a00082a0008e01000a000000000308028098001400000000009800a0000000000098009c000000000098009c000102ed0008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f7000c047f9e73fff9fdff0080f7000c047f9e73fff9fdff0080f7000c047f9e7ffff9fdff0080f7000c047f9e7ffff9fdff0080f7000d097f926383c1c33ce1ff80f7000d097f926383c1c33ce1ff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324cfff80f7000d027f9273fe990324e1ff80f7000d027f9273fe990324e1ff80f7000c027fccf3fd9902fcff80f7000c027fccf3fd9902fcff80f7000d097fcce199c1c399e1ff80f7000d097fcce199c1c399e1ff80f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70008007ff9ff0080f70007007ff0ff01fe0007007ff0ff01fe00070060f000010e00070060f000010e00070060f000010e00070060f000010e000b0460002a20a0f400010e000b0460002a20a0f400010e000b046000100040f400010fe00b046000100040f400010fe00c056000082020a0f500010fe00c056000082020a0f500010fe00c05600010104110f500010fe00c05600010104110f500010fe00c056000082020a8f500010fe00c056000082020a8f500010fe00b046000101041f400010fe00b046000101041f400010fe00c0560000828a0a0f500010fe00c0560000828a0a0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe00d02600028fe000020f600010fe00d02600028fe000020f600010fe00d0660004410000040f600010fe00d0660004410000040f600010fe00d06600020282a2822f600010fe00d06600020282a2822f600010fe00c0360001410fe44f600010fe00c0360001410fe44f600010fe00d0660000220222028f600010fe00d0660000220222028f600010fe00c0360004414fe44f600010fe00c0360004414fe44f600010fe00d06600028082a2822f600010fe00d06600028082a2822f600010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0120b60003c600038380c318000c0fb00010fe0120b60003c600038380c318000c0fb00010fe0120b600066600018180c300000c0fb00010fe0120b600066600018180c300000c0fb00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d6000607c3c18180db38f87c79860fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d60003c666618180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe0140d600006667e18180db18cccccdb60fd00010fe014096000666660181806618cfecc00c0fd00010fe014096000666660181806618cfecc00c0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0140360003c66fe3c060663ccc7c78cc0fd00010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0140260003cfe0007c0600000618c0006fd00010fe0140260003cfe0007c0600000618c0006fd00010fe01402600066fe0000c0fe000361800006fd00010fe01402600066fe0000c0fe000361800006fd00010fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe015136000606c7cf8f8e1e1e06d9c7c3e3cc300000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006e70fecc046333006d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0150360006660fecc046301e06d8cfe6604db00000fe0140360006660fecc04633030330cfd660300000fe0140360006660fecc04633030330cfd660300000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe0151360003c607cf8ccf1e1e0331e663e3c6600000fe00b0060fd0000c0f500010fe00b0060fd0000c0f500010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe0150e6000630000300180e0000030c60003fe00010fe0150e6000630000300180e0000030c60003fe00010fe01502600063fe0008018060000030c00003fe00010fe01502600063fe0008018060000030c00003fe00010fe015136000631f3670f9f060f0f036ce3e1f1e61800fe015136000631f3670f9f060f0f036ce3e1f1e61800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333831999861998036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0150c600036333031999861f8f036c6fe33036d800fe0140c60001c33303199986180181986fd3302000fe0140c60001c33303199986180181986fd3302000fe0140660001c1f3078f9fdf008198f331f1e33000fe0140660001c1f3078f9fdf008198f331f1e33000fe0070060f000010fe0070060f000010fe0070060f000010fe0070060f000010fe006007fefff00e006007fefff00e006007fefff00e006007fefff00e0060003efff00e0060003efff00e002ed00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Tile}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Tile\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tile command\bxe }}}{\fs20 The Tile command changes all of the windows on the desktop to the same size, then places them so that none overlap.  The name comes from the fact that the windows are placed next to one another, much as tiles are laid down on a floor.\par Tiling the windows is a quick way to organize your desktop.  Once the windows are tiled, it is fairly easy to find a particular window.  On the other hand, if you have a lot windows open, they generally become too small to be useful.  That is when the zoom box, located at the top right of the window's title bar, becomes handy.  When you click this box, the window grows to take up the entire desktop.  Once you have finished with the window, and would like to select another, click the zoom box again.  The window returns to its original size and location, and you can see all of the tiled windows again.\par If there are nine windows on the desktop, the Tile command will create three rows; each row will have three windows.  If more than nine windows are on the desktop, the extras are laid on top of the first nine.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Stack}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stack\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stack command\bxe }}}{\fs20 The Stack command stacks the windows on the desktop. Each window is moved a little to the right of the window it covers, and it is also moved far enough down so that the window's name can be read.\par If there are more than seven windows open, the extra windows are stacked on top of the first seven windows.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Shell Window}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Shell Window\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell window command\bxe }}}{\fs20 The Shell Window command opens the shell window.  The shell window is basically an untitled window with a few special characteristics.  The special characteristics are:  the shell window has the name Shell, rather than a name that starts with Untitled; it shows up in the top right corner of the screen; and the shell window always starts with a language stamp of Shell.\par This window will be opened automatically before any EXE program, including the compiler, is executed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Graphics Window}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Graphics Window\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window\bxe }}}{\fs20 The Graphics Window command brings up a special window where the output from graphics programs}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics programs}}}{\fs20  can be written without leaving the programming environment.  Whenever you write a graphics program, use this command to open the window before running your program.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20   If you forget to open the graphics window, the program will still run, but the graphics output will be lost.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Variables Window}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Variables Window\tcl3}}}{\b \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5040\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables command\bxe }}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 The Variables Window command brings up another special window.  You can enter the names of variables from your program, and the variable and its current value will show up in the window, updating as you step through your program.  When debugging a program, you would normally select the Variables command, and then select one of the debugging commands such as Step, Trace, or Go.  You cannot enter a variable name until the program begins execution, since variables are undefined until run-time.  Also, the variable names that you type into the Variables window can only be entered when the program is executing in the subroutine for which these variables are defined.}{\v\fs20 \cell }\pard \widctlpar\intbl\adjustright {\par \par }{{\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw270\pich152\picwgoal5400\pichgoal3040\macpict\bliptag88307961\blipupi72{\*\blipuid 054378f9bf0516b681dc75a89cc14c7c}077d000000000098010e1101a00082a0008e01000a00000000030802809800220000000000980110000000000098010e000000000098010e000102df0006007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff8000ff9ff06f9cffffcffe7f1f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f813037ff9ffcff9ff01f9cffeff01e7f9f3ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08f9ce0c98f060f9f0f0f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9ccc7ce66679e667f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f815037ff9ffcff9ff08fc9cccfce66679e070f5ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f816037ff9ffcff9ff09fe3cccfce66679e7fe7ff6ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f814037ff8000ff9ff05fe3e0cf87060fef0f5ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f806007fe1ff00f80b056000c0018003e60000180b056000c0018003e60000180e086020c0818183000006e90000180e086020c0818183000006e90000180b056060c26183c3e60000180b056060c26183c3e60000180f096020ca899ffb3f87ce3eea0000180f096020ca899ffb3f87ce3eea0000180f096060c0418ff336ccc633ea0000180f096060c0418ff336ccc633ea0000180f096222c081866336ccc633ea0000180f096222c081866336ccc633ea0000180f096264c04187e336ccc633ea0000180f096264c04187e336ccc633ea0000180f0960a0c0818ff336c7cf33ea0000180f0960a0c0818ff336c7cf33ea0000180b056060c0418e73e60000180b056060c0418e73e60000180b056000c0018003e60000180b056000c0018003e600001806007fe1ff00f806007fe1ff00f8090060e400031ffffff8090060e400031ffffff811036003cc0ff80001c1e0f200031800001811036003cc0ff80001c1e0f2000318000018110360030cc3f9000103c3f1000318018018110360030cc3f9000103c3f1000318018018110361f30cc3f80001c3e0f2000318066018110361f30cc3f80001c3e0f20003180660180e0363330cc3f80001c330f200fd180e0363330cc3f80001c330f200fd18110363330fc3f80001c330f2000318600618110363330fc3f80001c330f20003186006181103633300c3f80001c330f2000319f81f981103633300c3f80001c330f2000319f81f980f0361f300c3f9000203f1e0f200fd180f0361f300c3f9000203f1e0f200fd1809036003c00fe700fd1809036003c00fe700fd18060060e400fd18060060e400fd180f016180f7000103e0f10003181ff8180f016180f7000103e0f10003181ff8180d0060f6000003f00003180000180d0060f6000003f00003180000180f016380f7000103e0f100031ffffff80f016380f7000103e0f100031ffffff80e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180e016180f6000030f10003180000180f016180f700010330f10003180000180f016180f700010330f10003180000180f0163c0f7000101e0f10003180000180f0163c0f7000101e0f1000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e40003181ff818090060e40003181ff818060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18060060e400fd18090060e4000319f81f98090060e4000319f81f98090060e4000318600618090060e4000318600618060060e400fd18060060e400fd18090060e4000318066018090060e4000318066018090060e4000318018018090060e4000318018018090060e4000318000018090060e4000318000018090060e400031ffffff8090060e400031ffffff8090060e4000318000018090060e4000318000018090060e4000319ff8018090060e4000319ff8018090060e4000319818018090060e4000319818018090060e400031981ff98090060e400031981ff98090060e4000319818198090060e4000319818198090060e4000319ff8198090060e4000319ff8198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e4000318300198090060e40003183fff98090060e40003183fff98090060e4000318000018090060e4000318000018090060e4000318000018090060e400031800001806007fe1ff00f806007fe1ff00f802df00a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Variables window above is typical.  Under the window's title bar are an up-arrow, a down-arrow, star, and the name of the currently executing subroutine or main program.  Beneath the arrows is a list of variable names and their current values.  Along the right side of the window is a scroll bar, used to scroll through the variables list.\par The arrows next to the current subroutine's name can be used to move through the local variables in the various subroutines; they cannot be selected unless your program is executing at a point where a function call has been detected by the debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 .  For example, once you enter a subroutine from the program body, the window display changes to show the variables in the subroutine.  The up-arrow darkens, indicating that you may click on it to change the display to that of the main program.  If you select the up-arrow, you will see the variables display that you created in the program block, and the down-arrow can be selected so that you may return to the subroutine's variables display.\par The star button is a short-cut that displays all of the simple variables available from the current subroutine.  Simple variables are any variable that does not need to be dereferenced with an array subscript, pointer operator, or field name.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 You can enter variable names by clicking anywhere in the content region of the Variables window.  After clicking, a line-edit box appears under the subroutine-name box.  You can enter the name of one variable in the box, using any of the line-edit tools to type the name.  Press the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20  after entering the name, and the variable's current value will be immediately displayed to the right of the name.  If you decide later that you need to edit or delete the variable name, then click on the name and use any line-edit tools you need to accomplish the task.  \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 Only the names of specific values may be entered into the Variables window; you cannot view the contents of structures or entire arrays.  It is possible to see the value of any array declared as an array of characters, however.  In that case, the debugger expects a null-terminated string.\par When you display a pointer, you will see its value printed in hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  format.  You can also look at the value if the object pointed to by the pointer.  To do this, place a }{\f6\fs20 ^ }{\fs20 character after the pointer's name.\par The contents of individual array elements can be seen in the Variables window, provided that the array elements are scalar types.  You must enter all of the indices associated with an array element (i.e. an element in a four-dimensional array requires four indices).  An array element is specified by first entering the name of the array, and then the indices enclosed in either parentheses or square brackets.  While the desktop will recognize both parentheses and square brackets, the opening and ending punctuation must match.  (i.e. use '(' with ')' and '[' with ']').\par You can look at any field within a record or object by typing the record or object name, a dot, and the name of the field.\par If a pointer points to a record or object, you can look at a field in the record or object by typing the name of the pointer, then either ^. or ->, and finally the field name.\par These dereference operators can be used in combination.  For example, it is possible to look at an element of an array that is in a record pointed at by a pointer with a sequence like this one:\par \par }{\f6\fs18 ptr^.arr[4];\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\fs20 The names entered into the variables window are case insensitive \endash  leNGTh and LEngth would be the same variable name, for example.\par Any spaces you type are left in the string for display purposes, but are otherwise ignored, even if they appear in an identifier.\par The debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20  can display variables which are stored internally in any of the following formats:\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \bullet \tab 1-, 2-, and 4-byte integers\par \bullet \tab 4-, 8-, and 10-byte reals\par \bullet \tab Modula-2 style strings and null terminated strings\par \bullet \tab booleans\par \bullet \tab characters (Only the first byte of the character is examined.  Non-printing characters are output as blanks.)\par \bullet \tab pointers (These print as hexadecimal values.)\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Table 7.1:  Variable formats\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The variables window is updated after each command is executed by a Step or Trace command.  It is also updated when a break-point is encountered.  The variables window is not updated if the Go command is used, or during the execution of a Step Through or Go To Next Return command.\par }{\v\fs20 .ib).debug menu;\par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b List of Window Names}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v List of Window Names\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As you open windows, their names appear after the Stack command in the Windows menu.  When you pull down the Windows menu, you can see a list of all of the windows on the desktop, by name.  The window that you are using when you pull the menu down is checked.\par If you would like to use a different window, you can select it from the windows list.  The window you select is placed on top of all of the other windows on the desktop, and becomes the active window.\par There is only room for eleven window names in the Windows menu.  If there are more than eleven windows on the desktop, the extra names will not be displayed in the windows list.\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk8}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 windows menu\bxe }{\rxe bk8}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Find Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Find Menu\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\fs20 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5760\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk10}The Find menu helps you locate strings in a window, replace occurrences of a string with another string, find the cursor, or move to a particular line by line number.\par The Find menu does not appear on the menu bar}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  unless there is a file open on the desktop.\cell }\pard \qr\widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1037{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw182\pich176\picwgoal3640\pichgoal3520\macpict\bliptag-1027009623\blipupi72{\*\blipuid c2c913a9665fb309c98c5d6ff4295614}09ca0000000000b000b61101a00082a0008e01000a0000000002d0024098001800000000008700b800000000008700b600000000008700b6000102e90008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008047c1cfffe7cee0008047c1cfffe7cee0008047cfffffe7cee0008047cfffffe7cee0008047cf8e0f07cee0008047cf8e0f07cee0008047c3ce6667cee0008047c3ce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cfce6667cee0008047cf866707cee0008047cf866707cee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0008007ffeff00fcee0007007fecff01800007007fecff018000080060ed0002018000080060ed0002018000080060ed0002018000080060ed00020180000e056003e3000180f30003c3e180000e056003e3000180f30003c3e180000e05600300000180f300038301f8000e05600300000180f300038301f8000f056003071f0f80f40004036301f8000f056003071f0f80f40004036301f8000f056003c3199980f400040433c1f8000f056003c3199980f400040433c1f8000f05600303199980f40004042301f8000f05600303199980f40004042301f8000f05600303199980f4000404b301f8000f05600303199980f4000404b301f8001006600307998f9998f50004036301f8001006600307998f9998f50004036301f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000f066002a2000080a0f4000380a1f8000f066002a2000080a0f4000380a1f8000f0660010000010110f400030111f8000f0660010000010110f400030111f80013096002020a0a8080aaa828f80004022201f80013096002020a0a8080aaa828f80004022201f800130960014111110051114444f80004041151f800130960014111110051114444f80004041151f8001209600202088880088a28a8f700032221f8001209600202088880088a28a8f700032221f800130960010111110111114440f80004041111f800130960010111110111114440f80004041111f8001309600202888a80a0aa2828f800040220a1f8001309600202888a80a0aa2828f800040220a1f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80018056003e1800007fe0002780070fe000060fd0003c3e1f80018056003e1800007fe0002780070fe000060fd0003c3e1f8001705600330000003fe0005cc0030000060fc00038331f8001705600330000003fe0005cc0030000060fc00038331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f8001917600333878f8307ccc0c078307878f8e1e3e000036331f80019176003318c0cc30cccc078cc30cccc6063333000043331f80019176003318c0cc30cccc078cc30cccc6063333000043331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f8001917600331878cc30ccdc00cfc30fcc06063333000042331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f800191760033180ccc30cc6c0ccc030c0cc6c6333300004b331f80017086003e3c78f8787c8c0fc780938f1e330000363e1f80017086003e3c78f8787c8c0fc780938f1e330000363e1f800100060fe00040c00000780f5000201f800100060fe00040c00000780f5000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000e056003e00001c0f30003c3e1f8000e056003e00001c0f30003c3e1f8000e056003300000c0f300038331f8000e056003300000c0f300038331f8001208600331e3e0c1f1e1e0f70004036331f8001208600331e3e0c1f1e1e0f70004036331f80012086003e33330c3333330f700040433e1f80012086003e33330c3333330f700040433e1f8001208600363f330c33303f0f70004042361f8001208600363f330c33303f0f70004042361f80011076003330330c33333f6000404b331f80011076003330330c33333f6000404b331f8001309600331e3e1e1f1e1e333f80004036331f8001309600331e3e1e1f1e1e333f80004036331f8000b0360000003f0000201f8000b0360000003f0000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80012056002a0000080fe00000af7000382a1f80012056002a0000080fe00000af7000382a1f8001105600110000040fe000011f6000241f8001105600110000040fe000011f6000241f8001605600220a2a080fea003200a2a0afb0004022081f8001605600220a2a080fea003200a2a0afb0004022081f800160c60014111104111111014114511fb0004041041f800160c60014111104111111014114511fb0004041041f8009800180087000000b000b80087000000b000b60087000000b000b60001160d600222a220822202a00222288a80fb00032081f800160d600222a220822202a00222288a80fb00032081f800160c60011101104111110011114510fb0004041041f800160c60011101104111110011114510fb0004041041f8001403600220a2fca0030a0a288afb0004022081f8001403600220a2fca0030a0a288afb0004022081f8000b0360000001f0000201f8000b0360000001f0000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f8000a026001e0ef000201f8000a026001e0ef000201f8000c046003300180f1000201f8000c046003300180f1000201f8000d05600301e3e1e0f2000201f8000d05600301e3e1e0f2000201f8000d05600373318330f2000201f8000d05600373318330f2000201f8000d05600333318330f2000201f8000d05600333318330f2000201f8000d0560033331b330f2000201f8000d0560033331b330f2000201f8000e066001e1e0e1e333f3000201f8000e066001e1e0e1e333f3000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f800080060ed000201f80007007fecff01f80007007fecff01f800070001ecff01f800070001ecff01f80002e900a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Find}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Find\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk9}The Find command is used to find a sequence of characters in the current window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1038{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw342\pich194\picwgoal6840\pichgoal3880\macpict\bliptag-1735962566\blipupi72{\*\blipuid 9887503af6f6fa50ec479808ae78daea}0e230000000000c201561101a00082a0008e01000a000000000308028098002c0000000000c201580000000000c201560000000000c20156000102d50007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f8000e007fefff03f839fffceeff01f8000e007fefff03f839fffceeff01f8000e007fefff03f9fffffceeff01f8000e007fefff03f9fffffceeff01f8000e007fefff03f9f1c1e0eeff01f8000e007fefff03f9f1c1e0eeff01f8000e007fefff03f879cccceeff01f8000e007fefff03f879cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f9cccceeff01f8000e007fefff03f9f0cce0eeff01f8000e007fefff03f9f0cce0eeff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f80007007fd8ff01f800070060d800011800070060d800011800070060d800011800070060d800011800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000e0160f8fc00007fe1ff03807c18000e0160f8fc00007fe1ff03807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c1800110760f803e300018060e2000401807c1800110760f803e300018060e2000401807c1800110760f8030000018060e2000401807c1800110760f8030000018060e2000401807c1800110760f803071f0f9860e2000401807c1800110760f803071f0f9860e2000401807c1800110760f803c319998060e2000401807c1800110760f803c319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f8030319998060e2000401807c1800110760f80307998f9860e2000401807c1800110760f80307998f9860e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000f0160f8fc000060e2000401807c18000e0160f8fc00007fe1ff03807c18000e0160f8fc00007fe1ff03807c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800150960f806000030c330001cfc000030e800027c1800150960f806000030c330001cfc000030e800027c1800150960f806000030c330000cfc000030e800027c1800150960f806000030c330000cfc000030e800027c1800170f60f806000030db3e1e0c1e0618f1b1f0e800027c1800170f60f806000030db3e1e0c1e0618f1b1f0e800027c1800170f60f806000030db33330c3306d999c330e800027c1800170f60f806000030db33330c3306d999c330e800027c1800170f60f806000030db33330c3f06d9998330e800027c1800170f60f806000030db33330c3f06d9998330e800027c1800170f60f8060000306633330c300331998330e800027c1800170f60f8060000306633330c300331998330e800027c1800170760f8060000306633fe1e040330f181f3e800027c1800170760f8060000306633fe1e040330f181f3e800027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800180660f8060000303cfe000603c0000003000ce900027c1800180660f8060000303cfe000603c0000003000ce900027c1800170660f80600003066fe00010660fe00000ce800027c1800170660f80600003066fe00010660fe00000ce800027c18001a1260f806000030603e3c3c0603c7c3c71f1c631eeb00027c18001a1260f806000030603e3c3c0603c7c3c71f1c631eeb00027c18001a1260f8060000306066606603c66666030c0c6333eb00027c18001a1260f8060000306066606603c66666030c0c6333eb00027c18001a1260f80600003060663c7e0067e663c30c0c363feb00027c18001a1260f80600003060663c7e0067e663c30c0c363feb00027c18001a1260f8060000306666066006660660630d8c3630eb00027c18001a1260f8060000306666066006660660630d8c3630eb00027c18001b1360f8060000303c3e3c3c03c3c663c7871e1c1e30ec00027c18001b1360f8060000303c3e3c3c03c3c663c7871e1c1e30ec00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000d0560f807fffff0de00027c18000d0560f807fffff0de00027c1800150960f806000030c3301870ee000070f600027c1800150960f806000030c3301870ee000070f600027c1800150960f806000030c3300030ee000030f600027c1800150960f806000030c3300030ee000030f600027c1800251d60f806000030db3e38307878f87c787807879fc7c3e6c78780787ccc7c30f600027c1800251d60f806000030db3e38307878f87c787807879fc7c3e6c78780787ccc7c30f600027c1800230b60f806000030db331830ccc0fdcc080cccdb6666670ccc00fdcc0030f600027c1800230b60f806000030db331830ccc0fdcc080cccdb6666670ccc00fdcc0030f600027c1800251260f806000030db331830fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030f600027c1800251260f806000030db331830fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030f600027c1800250b60f80600003066331830c00cfecc03c00cccdbfe66030c00c0c0fecc0030f600027c1800250b60f80600003066331830c00cfecc03c00cccdbfe66030c00c0c0fecc0030f600027c1800260860f80600003066333cfe780df87c787807879b67c3e607878078fe7c0178c0f700027c1800260860f80600003066333cfe780df87c787807879b67c3e607878078fe7c0178c0f700027c1800190560f807fffff0fb0000c0fb000006fb00000cf300027c1800190560f807fffff0fb0000c0fb000006fb00000cf300027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c18000f0360f80000f7ff0080e700027c18000f0360f80000f7ff0080e700027c18000f0360f8001ff700007ce700027c18000f0360f8001ff700007ce700027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800220960f80770007c60003023fd00010770fd000270003cfd000238000ef600027c1800220960f80770007c60003023fd00010770fd000270003cfd000238000ef600027c1800230f60f80770006000003033000018000770fd0002700066fd000218000ef600027c1800230f60f80770006000003033000018000770fd0002700066fd000218000ef600027c1800240f60f807700060e3e1f03b1e333e000770fd00097000603e7c3c3c18000ef600027c1800240f60f807700060e3e1f03b1e333e000770fd00097000603e7c3c3c18000ef600027c1800230f60f8077000786333303f331e18000770fd0002700060fd660218000ef600027c1800230f60f8077000786333303f331e18000770fd0002700060fd660218000ef600027c1800240f60f807700060633330373f0c18000770fd00097000606666607e18000ef600027c1800240f60f807700060633330373f0c18000770fd00097000606666607e18000ef600027c1800230f60f80770006063333033301e1b000770fd00017000fd66036018000ef600027c1800230f60f80770006063333033301e1b000770fd00017000fd66036018000ef600027c1800240f60f807700060f331f0311e330e000770fd000470003c3e66fe3c01000ef600027c1800240f60f807700060f331f0311e330e000770fd000470003c3e66fe3c01000ef600027c1800180360f80770f700010770fd000070f900000ef600027c1800180360f80770f700010770fd000070f900000ef600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f803b8f700010ee0fd000038f900001cf600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f801cff7000179c0fd00000ff90000f0f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c1800180360f800f1f7ff01c780fd000001f9ff0080f600027c18000f0360f8001ff700007ce700027c18000f0360f8001ff700007ce700027c18000f0360f80000f7ff0080e700027c18000f0360f80000f7ff0080e700027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800090160f8da00027c1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800080060d9ff02fc1800070060d800011800070060d800011800070060d800011800070060d80001180007007fd8ff01f80007007fd8ff01f80002d500a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you select the Find command, a dialog like the one above appears on your screen.  The Find dialog is a modal dialog that stays in place until one of the buttons is selected.  To find a string of text, enter the text in the line-edit box next to Find: and click on the Find Next button (or press the }{\outl\fs18 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs18 return}{\v\fs20  key}{\outl\v\fs18 }}}{\fs20 ).  The window display will change as necessary to show the first occurrence of the string after the current insertion point, and the string will be selected.\par You can continue searching for the same string by continuing to click on the Find Same command.  If the end of the program is reached, the search starts over at the beginning of the file.  The only time the search will fail is if there are no occurrences of the search string in the entire document.\par There are three options that affect the way searching is conducted.  These appear as check boxes in the Find window.   The first is Whole Word.  When selected, this option will only find strings that are preceded by a non-alphanumeric character or occur at the beginning of a line, and that end in a non-alphanumeric character or the end-of-line marker.  For example, searching for the word "int" with Whole Word enabled would find a match in both of these lines:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 int i;\par (*i is int*)\par }\pard \qj\widctlpar\adjustright {\fs20 \par The characters "int" in this line, though, would not be found:\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 (*print this line*)\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Case Sensitive option makes the search case sensitive.  That is, searching for INT would not find the word int.\par In many situations, especially when programming in assembly language, you want to find two words separated by some spaces.  For example, if you want to find the line\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab \tab lda   #2\par }{\fs20 \par you really don't care if there are two spaces, three spaces, or a tab between the two words \endash  you just want to find all of the places where the accumulator is loaded with the constant 2.  In this case, you would want to use the White Space Compares Equal option.  When selected, all runs of spaces and tabs are treated as if they were a single space.\par \par {\*\bkmkend bk9}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find command}{\rxe bk9}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Find Same}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Find Same\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find same command\bxe }}}{\fs20 If you have already entered a search string using the Find command, you can search for the next occurrence of the same string using the Find Same command.  This allows you to avoid using the Find dialog, and enables searching by simply using the }{\outl\fs18 \u-3\'f0}{\fs20 G keyboard equivalent.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Display Selection}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Display Selection\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 display selection command\bxe }}}{\fs20 If the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  (or selected text) is visible on the screen, this command does nothing.  If you have used the scroll bars to move the display so that the insertion point does not appear on the screen, the Display Selection command moves the display so that you can see the insertion point.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Replace}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Replace\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 replace command\bxe }}}{\fs20 The Replace command brings up a dialog like the one shown below.  All of the buttons, check boxes, and line-edit box from the Find command are present, and are used the same way.  In addition, there are two new buttons and one new text box:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1039{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw514\pich210\picwgoal10280\pichgoal4200\macpict\bliptag901944050\blipupi72{\*\blipuid 35c292f205259ad1e3e9468584616b59}122d0000000000d202021101a00082a0008e01000a0000000002d0024098004200000000002f020800000000002f020200000000002f0202000102bf0007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800012037ff8000fe9ff04fc1ffffe3fe2ff01800012037ff8000fe9ff04fc1ffffe3fe2ff01800012037ff9ffcfe9ff04fccfffff3fe2ff01800012037ff9ffcfe9ff04fccfffff3fe2ff01800015037ff9ffcfe9ff07fcce1c1f3e0e1e1fe5ff01800015037ff9ffcfe9ff07fcce1c1f3e0e1e1fe5ff01800015037ff9ffcfe9ff07fc1ccccf3ccccccfe5ff01800015037ff9ffcfe9ff07fc1ccccf3ccccccfe5ff01800015037ff9ffcfe9ff07fc9c0ccf3cccfc0fe5ff01800015037ff9ffcfe9ff07fc9c0ccf3cccfc0fe5ff01800014037ff9ffcfe9ff06fcccfccf3ccccce4ff01800014037ff9ffcfe9ff06fcccfccf3ccccce4ff01800015037ff8000fe9ff07fcce1c1e1e0e1e1fe5ff01800015037ff8000fe9ff07fcce1c1e1e0e1e1fe5ff0180000b007fe4ff00fce0ff0180000b007fe4ff00fce0ff01800007007fc2ff01800007007fc2ff01800007007fc2ff01800007007fc2ff018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000d0060f800000fceff03f80180000d0060f800000fceff03f80180000e0060f800010c20cf0003180180000e0060f800010c20cf00031801800013056003e3000180fd00010c20cf00031801800013056003e3000180fd00010c20cf0003180180001305600300000180fd00010c20cf0003180180001305600300000180fd00010c20cf00031801800013056003071f0f98fd00010c20cf00031801800013056003071f0f98fd00010c20cf00031801800013056003c3199980fd00010c20cf00031801800013056003c3199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf0003180180001305600303199980fd00010c20cf000318018000980042002f0000005e0208002f0000005e0202002f0000005e020200011305600307998f98fd00010c20cf0003180180001305600307998f98fd00010c20cf0003180180000e0060f800010c20cf0003180180000e0060f800010c20cf0003180180000d0060f800000cce0003180180000d0060f800000cce0003180180000d0060f800000fceff03f80180000d0060f800000fceff03f8018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000d0060f800000fceff03f80180000d0060f800000fceff03f80180000d0060f800000cce0003180180000d0060f800000cce00031801800012056003e00001c0fd00000cce00031801800012056003e00001c0fd00000cce00031801800012056003300000c0fd00000cce00031801800012056003300000c0fd00000cce000318018000130a600331e3e0c1f1e1e3000cce000318018000130a600331e3e0c1f1e1e3000cce000318018000130a6003e33330c3333330000cce000318018000130a6003e33330c3333330000cce000318018000130a600363f330c33303f0000cce000318018000130a600363f330c33303f0000cce000318018000130a6003330330c3333300000cce000318018000130a6003330330c3333300000cce000318018000130a600331e3e1e1f1e1e3000cce000318018000130a600331e3e1e1f1e1e3000cce000318018000100360000003fb00000cce000318018000100360000003fb00000cce0003180180000d0060f800000cce0003180180000d0060f800000cce0003180180000d0060f800000fceff03f80180000d0060f800000fceff03f8018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c7000201800014086006000030c330001cfc000030d1000201800014086006000030c330001cfc000030d1000201800014086006000030c330000cfc000030d10002018000980042005e0000008d0208005e0000008d0202005e0000008d0202000114086006000030c330000cfc000030d10002018000160e6006000030db3e1e0c1e0618f1b1f0d10002018000160e6006000030db3e1e0c1e0618f1b1f0d10002018000160e6006000030db33330c3306d999c330d10002018000160e6006000030db33330c3306d999c330d10002018000160e6006000030db33330c3f06d9998330d10002018000160e6006000030db33330c3f06d9998330d10002018000160e60060000306633330c300331998330d10002018000160e60060000306633330c300331998330d10002018000160660060000306633fe1e040330f181f3d10002018000160660060000306633fe1e040330f181f3d100020180000c046007fffff0c700020180000c046007fffff0c70002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c70002018000130560060000303cfa000203000cd20002018000130560060000303cfa000203000cd200020180001105600600003066f900000cd100020180001105600600003066f900000cd1000201800019116006000030603e3c3c03c3c7c3c71f1c631ed4000201800019116006000030603e3c3c03c3c7c3c71f1c631ed40002018000191160060000306066606606066666030c0c6333d40002018000191160060000306066606606066666030c0c6333d400020180001911600600003060663c7e03c7e663c30c0c363fd400020180001911600600003060663c7e03c7e663c30c0c363fd40002018000191160060000306666066000660660630d8c3630d40002018000191160060000306666066000660660630d8c3630d400020180001a1260060000303c3e3c3c03c3c663c7871e1c1e30d500020180001a1260060000303c3e3c3c03c3c663c7871e1c1e30d500020180000c046007fffff0c700020180000c046007fffff0c70002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000c046007fffff0c700020180000c046007fffff0c7000201800013076006000030c33018ed000070df000201800013076006000030c33018ed000070df0002018000980042008d000000bc0208008d000000bc0202008d000000bc0202000114086006000030c3300060ee000030df000201800014086006000030c3300060ee000030df0002018000241c6006000030db3e38f87878f87c787807879fc7c3e6c78780787ccc7c30df0002018000241c6006000030db3e38f87878f87c787807879fc7c3e6c78780787ccc7c30df0002018000220a6006000030db331860ccc0fdcc080cccdb6666670ccc00fdcc0030df0002018000220a6006000030db331860ccc0fdcc080cccdb6666670ccc00fdcc0030df000201800024116006000030db331860fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030df000201800024116006000030db331860fc78ccccc0fc0c0cdbfe66030fc780fcfecc0030df0002018000240a60060000306633186cc00cfecc03c00cccdbfe66030c00c0c0fecc0030df0002018000240a60060000306633186cc00cfecc03c00cccdbfe66030c00c0c0fecc0030df00020180002518600600003066333c387878f87c787807879b67c3e607878078fe7c0178c0e000020180002518600600003066333c387878f87c787807879b67c3e607878078fe7c0178c0e0000201800018046007fffff0fb0000c0fb000006fb00000cdc000201800018046007fffff0fb0000c0fb000006fb00000cdc0002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c300020180000e02600000efff00c0d800020180000e02600000efff00c0d800020180000e0260001fef00003ed800020180000e0260001fef00003ed8000201800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c00180004007600770007c000038fc001130000003e300018003b801c001f18000c08cfd00071c0070007c000038fe000903c3838000e0070003c0fe0006038000e00180004007600770007c000038fc001130000003e300018003b801c001f18000c08cfd00071c0070007c000038fe000903c3838000e0070003c0fe0006038000e001800042076007700066000018fd001e18300000030000018003b801c001800000c0cc000060001c00700066000018fe00090661818000e007000660fe0006018000e001800042076007700066000018fd001e18300000030000018003b801c001800000c0cc000060001c00700066000018fe00090661818000e007000660fe0006018000e0018000434160077000663c7c183e3c3c003e3e1e3e03071f0f8003b801c001838f87c0ec78ccf8001c007000663c7c183e3c3c0661818000e007000603e7c3c3c18000e0018000434160077000663c7c183e3c3c003e3e1e3e03071f0f8003b801c001838f87c0ec78ccf8001c007000663c7c183e3c3c0661818000e007000603e7c3c3c18000e00180004307600770007c666618fe66010018fe331a03c319998003b801c001e18cccc0fccc7860001c0070007c666618fe66090661818000e007000606fe6606618000e00180004307600770007c666618fe66010018fe331a03c319998003b801c001e18cccc0fccc7860001c0070007c666618fe66090661818000e007000606fe6606618000e00180004341600770006c7e661866607e0018333f33030319998003b801c001818cccc0dcfc3060001c0070006c7e661866607e07e1818000e007000606666607e18000e00180004341600770006c7e661866607e0018333f33030319998003b801c001818cccc0dcfc3060001c0070006c7e661866607e07e1818000e007000606666607e18000e001800042366007700066606618666660001b333033030319998003b801c001818cccc0ccc0786c001c007000666066186666600661818000e0070006fd6606018000e001800042366007700066606618666660001b333033030319998003b801c001818cccc0ccc0786c001c007000666066186666600661818000e0070006fd6606018000e0018000434160077000663c7c3c3e3c3c300e331e330307998f8003b801c00183ccc7c0c478cc38001c007000663c7c3c3e3c3c0663c3c000e0070003c3e663c3c3c000e0018000434160077000663c7c3c3e3c3c300e331e330307998f8003b801c00183ccc7c0c478cc38001c007000663c7c3c3e3c3c0663c3c000e0070003c3e663c3c3c000e00180002902600770fe000060fd000060f8000303b801c0f700021c0070fe000060f80001e007f80003e001800098004200bc000000d2020800bc000000d2020200bc000000d2020200012902600770fe000060fd000060f8000303b801c0f700021c0070fe000060f80001e007f80003e001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800020026003b8ef0003077000e0f70002380038f5000301c00380fa000401c001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800021026001cfef00033ce0003cf8000301e0000ff500030f0000f0fa00040f0001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f80001800020026000f1efff03e3c00007f7ff02000001f5ff03f800001ffaff04f8000180000e0260001fef00003ed800020180000e0260001fef00003ed800020180000e02600000efff00c0d800020180000e02600000efff00c0d80002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c30002018000080060c3000201800007007fc2ff01800007007fc2ff01800002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find command}}}{\fs20 To use the Replace command, you enter a search string exactly as you would with the Find command.  In fact, if you have already used the Find command, the search string you had entered will appear in the Replace window, and the state of the check boxes will also be the same.  Enter a replacement string in the Replace: box.  You can move to this box with the cursor or with the }{\outl\fs20 tab}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 tab}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20 .  Set the options you want with the check boxes.\par If you would like to replace all occurrences of the search string with the replacement string, you can click on the Replace All button.  To examine the target strings before deciding whether to replace them, use the Find Next button.  If you decide that you do want to change the current target string, then click the Replace, then Find button.  This button will also cause the search to continue after replacement. \par After you have found and/or replaced a string, you might want to continue editing your document.  To return to your document window, you must either close the Replace window or bring your program window to front.  To use the Replace command again, you can make it the active window by clicking anywhere on the Replace window (assuming this window is visible), or you can reissue the Replace command. \par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Replace Same}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Replace Same\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 replace same command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 replace command}}}{\fs20 Once you have entered Find and Replace strings with the Replace command, you can use the Replace Same command to replace a single occurrence of the target string.  The Replace Same command is equivalent to the Replace then Find button in the Replace dialog.  This avoids use of the Replace window, and allows you to replace strings with a single keystroke (this command's keyboard equivalent is }{\outl\caps\fs18 \u-3\'f0}{\fs20 T).  In conjunction with the }{\outl\caps\fs18 \u-3\'f0}{\fs20 G keyboard equivalent for Find, you can quickly scan through a program, replacing any occurrences of a string.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Goto}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Goto\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line numbers}}}{\fs20 The Goto command lets you move to any line in the open file by specifying a line number.  The line number is entered as a decimal value in the Goto window's line-edit box.  Clicking on the Goto button causes the desired line to appear at the top of the window, with the insertion point}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20  changed to the beginning of this line.  The Cancel button just causes the Goto window to vanish.\par Goto is very useful when you are looking through a list of errors written to the shell window by a compiler or assembler.  Most of these listings show line numbers along with the line where the error occurred.\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk10}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 find menu\bxe }{\rxe bk10}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Extras Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Extras Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5580\clvertalt\cltxlrtb \cellx8100\pard \qj\fi360\keepn\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk11}\par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 The Extras menu has several editing commands not found in the standard Edit menu.  These commands allow you to shift blocks of text from a block-structured program to the left and right, perform several complex editing operations (like deleting all characters from the cursor to the end of the line), and set several editing options.\par The Extras menu does not appear on the menu bar}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  unless there is a file open on the desktop.\cell }\pard \qr\widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1040{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw201\pich271\picwgoal4020\pichgoal5420\macpict\bliptag1305749435\blipupi72{\*\blipuid 4dd427bb2bdbe668587d652e01291714}0fb400000000010f00c91101a00082a0008e01000a0000000002d0024098001a00000000007a00d000000000007a00c900000000007a00c9000102e70008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0009017c1ffdff00feee0009017c1ffdff00feee000a027cfffcfeff00feee000a027cfffcfeff00feee000a067cf9983938387eee000a067cf9983938387eee000a067c3c3cf8f333feee000a067c3c3cf8f333feee000a067cfe7cf9f3387eee000a067cfe7cf9f3387eee000a067cfc3c99f33f3eee000a067cfc3c99f33f3eee000a067c199e39f8387eee000a067c199e39f8387eee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0008007ffcff00feee0007007feaff01fc0007007feaff01fc00070060ea00011c00070060ea00011c00070060ea00011c00070060ea00011c00120960014101010001000050f5000304041c00120960014101010001000050f5000304041c00130a6002220002080080008080f6000308081f80130a6002220002080080008080f6000308081f80130a6001014105150100515140f6000314101f80130a6001014105150100515140f6000314101f80130a6000a22082080080888080f6000302201f80130a6000a22082080080888080f6000302201f80120960001111040401015041f5000340101f80120960001111040401015041f5000340101f801205600222208208fd8000a0f600030a081f801205600222208208fd8000a0f600030a081f80130a6001411144050150504040f6000314041f80130a6001411144050150504040f6000314041f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80120960014101010001504004f5000304101f80120960014101010001504004f5000304101f80130a6002220002080088000202f6000308081f80130a6002220002080088000202f6000308081f80140b600101410515011141454540f7000314041f80140b600101410515011141454540f7000314041f80130a6000a220820800a0822222f6000302021f80130a6000a220820800a0822222f6000302021f80130a6000111104040110444441f6000340041f80130a6000111104040110444441f6000340041f80140b600222208208808882a22220f700030a081f80140b600222208208808882a22220f700030a081f80140b600141114405011144444140f7000314101f80140b600141114405011144444140f7000314101f800c0060fa00010280f300011f800c0060fa00010280f300011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8018046003e001c0fc000703e00060001c0c06fd00030c331f8018046003e001c0fc000703e00060001c0c06fd00030c331f80191060033000c001800018000300006000300cfc000308331f80191060033000c001800018000300006000300cfc000308331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b19600331e0c1e3e1e03e1e0307c3e03c7c0c0e3e1e000036331f801b1960033330c3318330183303c6666066300c0633330000431e1f801b1960033330c3318330183303c6666066300c0633330000431e1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b19600333f0c3f183f018330306666066300c06333f0000420c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b1960033300c301b3001b330306666066300c06333000004b0c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f801b016003fee114e0e1e00e1e03e663e03c300fcf331e0000360c1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f801007600030018000c060f300030c031f801007600030018000c060f300030c031f800f02600030fe0000c0f2000308031f800f02600030fe0000c0f2000308031f80130a600031e38f80c0e3e1e1e0f6000336031f80130a600031e38f80c0e3e1e1e0f6000336031f801209600033318cc0c0633333f5000343031f801209600033318cc0c0633333f5000343031f80130a600033318cc0c06333f1e0f6000342031f80130a600033318cc0c06333f1e0f6000342031f80130a600333318cc0c063330030f600034b331f80130a600333318cc0c063330030f600034b331f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80130a6001e1e3ccc0fcf331e1e0f60003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8098001a007a000000f400d0007a000000f400c9007a000000f400c90001070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8010026001e0fc00016030f500030c1e1f8010026001e0fc00016030f500030c1e1f8011026000c0fe0002030060f40003080c1f8011026000c0fe0002030060f40003080c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3e1e1e367c06071f0f0f70003360c1f80140b6000c3330333830060319998f70003430c1f80140b6000c3330333830060319998f70003430c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c331e3f30300603199f8f70003420c1f80140b6000c3303303036060319980f700034b0c1f80140b6000c3303303036060319980f700034b0c1f80140b6001e331e1e301c07e7998f0f70003361e1f80140b6001e331e1e301c07e7998f0f70003361e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8012046003e001c0fe00013018f500030c3e1f8012046003e001c0fe00013018f500030c3e1f80110860033000c001800030f4000308331f80110860033000c001800030f4000308331f80140b600331e0c1e3e1e03038f878f7000336331f80140b600331e0c1e3e1e03038f878f7000336331f80140b60033330c33183303018ccccf70003433e1f80140b60033330c33183303018ccccf70003433e1f80140b600333f0c3f183f03018ccfcf7000342331f80140b600333f0c3f183f03018ccfcf7000342331f80140b60033300c301b3003018ccc0f700034b331f80140b60033300c301b3003018ccc0f700034b331f8014016003fee106e0e1e03f3ccc78f70003363e1f8014016003fee106e0e1e03f3ccc78f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e0fe00021e0003f200011f800f026001e0fe00021e0003f200011f80120b6003300180000c0003000018f500011f80120b6003300180000c0003000018f500011f80120b60033333e1e00c3e1f1e3e3ef500011f80120b60033333e1e00c3e1f1e3e3ef500011f8011066003333183300cfd330018f500011f8011066003333183300cfd330018f500011f80120b6003f33183300c33333f3318f500011f80120b6003f33183300c33333f3318f500011f80120b60033331b3300c333330331bf500011f80120b60033331b3300c333330331bf500011f80120b600331f0e1e01e331f1e330ef500011f80120b600331f0e1e01e331f1e330ef500011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8013026001e0fe00041e00003180f600030c3e1f8013026001e0fe00041e00003180f600030c3e1f801302600330fe00043318000180f6000308301f801302600330fe00043318000180f6000308301f80140b60033318f1b0303e367198f0f7000336301f80140b60033318f1b0303e367198f0f7000336301f80140b6003331999c01e183831b198f70003433c1f80140b6003331999c01e183831b198f70003433c1f80140b600331b1f98003183031e1f8f7000342301f80140b600331b1f98003183031e1f8f7000342301f80140b600331b18180331b3031b180f700034b301f80140b600331b18180331b3031b180f700034b301f80140b6001e0e0f1801e0e307998f0f70003363e1f80140b6001e0e0f1801e0e307998f0f70003363e1f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f800f026001e3fe00021f000ef200011f800f026001e3fe00021f000ef200011f800f02600333fe0002198006f200011f800f02600333fe0002198006f200011f80110a603303e1e6181999860f1bf400011f80110a603303e1e6181999860f1bf400011f80110a6061e33336d81f1986199cf400011f80110a6061e33336d81f1986199cf400011f80110a64c0333336d81b19861f98f400011f80110a64c0333336d81b19861f98f400011f8011016383fe3305301999861818f400011f8011016383fe3305301999861818f400011f80110a6101e331e330198f8f0f18f400011f80110a6101e331e330198f8f0f18f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8098001a00f40000010f00d000f40000010f00c900f40000010f00c90001070060ea00011f80070060ea00011f80070060ea00011f800e026001e0fe000101e0f100011f800e026001e0fe000101e0f100011f800e076003300180000330f100011f800e076003300180000330f100011f80110a60033333e1e00301f318f0f400011f80110a60033333e1e00301f318f0f400011f80110a600333318333f1e3331998f400011f80110a600333318333f1e3331998f400011f80110a6003f3318330003331b1f8f400011f80110a6003f3318330003331b1f8f400011f80110a60033331b330033331b180f400011f80110a60033331b330033331b180f400011f80110a600331f0e1e001e1f0e0f0f400011f80110a600331f0e1e001e1f0e0f0f400011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f80070060ea00011f8006007fe9ff008006007fe9ff0080060001e9ff0080060001e9ff0080a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Shift Left}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Shift Left\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shift left command\bxe }}}{\fs20 When you are programming in a block-structured language, like C}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\fs20  or Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\fs20 , indentation is usually used to show the structure of the program at a glance.  If the structure changes, you may want to change the indentation of large blocks of text.  The Shift Left command, along with the Shift Right command described below, can help.\par }\pard \qj\fi540\widctlpar\adjustright {\fs20 The Shift Left command is only available if you have selected some text.  Regardless of whether you selected entire lines or not, the Shift Left command works on whole lines, not on characters.  It scans all of the lines that have at least one character selected, and deletes one space from the beginning of the line.  The effect is to move a block of selected text left by one column.  Only spaces are deleted \endash  if a line has already been shifted as far to the left as possible, it is left untouched.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Shift Right}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Shift Right\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shift right command\bxe }}}{\fs20 Like the Shift Left command, described above, Shift Right is used to move blocks of text.  The Shift Right command is only available if you have selected some text.  All of the lines in the file that have at least one character selected are moved to the right by inserting a space before the first character in the line.\par If any of the lines are 255 characters long before this command is used, the last character on each of the long lines will be lost.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Delete to End of Line}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete to End of Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If any text is selected, it is cleared from the file.  Next, all of the characters from the insertion point to the end of the line are deleted.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 delete to end of line command\bxe }}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Join Lines}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Join Lines\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 join lines command\bxe }}}{\fs20 If any text is selected, it is cleared from the file.  The line after the one the cursor is on is then removed from the file, and appended to the end of the line containing the cursor.  The insertion point is placed between the two joined lines.\par If the combined line has more than 255 characters, all of the characters past the 255th character are lost.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Insert Line}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Insert Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert line command\bxe }}}{\fs20 If any text has been selected, it is cleared.  Next, a new, blank line is inserted in the file beneath the line containing the current insertion point.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Delete Line}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete Line\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 delete line command\bxe }}}{\fs20 If any text has been selected, it is cleared.  Next, the line containing the current insertion point is deleted from the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Auto Indent}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Auto Indent\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto indent command\bxe }}}{\fs20 When you are writing programs in a block-structured language, like Pascal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20  or Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\fs20 , indentation is often used to show program structure.  The Auto Indent option can help you indent your programs.\par If the auto indent mode has not been selected, pressing the }{\outl\fs20 return}{\fs20  key}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\outl\v\fs20 return}{\v\fs20  key}{\outl\v\fs20 }}}{\fs20  causes the insertion point to move to the beginning of the next line.  If you are in over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 , hitting the }{\outl\fs20 return }{\fs20 key will not affect the current line; the insertion point simply moves to the start of the next line in the file.  If you are in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , the current line is split, and the cursor moves to the start of a new line.  This function is provided for assembly language and other line-oriented languages.\par When you select the Auto Indent option, the }{\outl\fs20 return}{\outl\caps\fs20  }{\fs20 key works a little differently.  Instead of moving to the first column of a line, it spaces over to match the current indentation.  If over strike has also been selected, the cursor moves to the first non-blank character in the next line.  If the line is blank, the cursor is aligned with the first non-blank character in the line above.\par With the over strike option turned off, but with auto indent turned on, the cursor still moves so that it is under the first non-blank character in the line above.  If a line has been split, blanks are inserted to move the insertion point to the proper column.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Over Strike}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Over Strike\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insertion point}}}{\fs20 The editor is capable of operating in one of two modes, insert or over strike.  Insert mode is the most common mode for desktop programs, so it is the default mode.  In insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 , all characters typed are inserted into the window by first inserting a new space to the left of the insertion point, then placing the new character in the space.\par Text-based editors generally use over strike mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 .  In over strike mode, any character typed replaces the character that the cursor is on.\par You can tell which mode you are in by pulling down the Extras menu.  If the over strike option has a check mark next to it, you are in the over strike mode.  If there is no check mark, you are in insert mode}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 .  You can also tell which mode you are in by looking at the insertion point.  If the insertion point marker is a flashing vertical bar, you are in the insert mode.  If it is a flashing horizontal line, you are in over strike mode.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Show Ruler}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Show Ruler\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 show ruler command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ruler}}}{\fs20 When you select the Show Ruler command, a ruler appears in an information bar at the top of the front window.  The ruler has markings which show the column numbers.  Below these, any tab stops}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20  appear as inverted triangles.  Selecting Show Ruler a second time will remove the ruler display.\par The description of the ruler, earlier in this chapter, gives more details on how to use the ruler once it is visible.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Auto Save}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Auto Save\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto save command\bxe }}}{\fs20 The Auto Save option is a safety measure.  If you execute a program, and the program crashes, you cannot return to the desktop to save your files.  Any changes that have been made to the files since the last time they were saved to the disk are lost.\par The Auto Save command can prevent this kind of catastrophe.  Before executing any program, any file on the desktop that has been changed is saved to disk.  This takes time \endash  with floppy disks, the time can be considerable.  For that reason, this feature is an option.  Whether you select it or not should depend on how often you save your files, and how likely you think it is that your program will crash.\par Keep in mind that what we mean by a crash is a catastrophic failure, where you actually end up in the monitor, or where you have to reset the computer.  Normal run-time errors in compiled programs are trapped.  These present you with an error message, but do not endanger any files on the desktop.\par One other note of caution.  Saving your files to a RAM}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM}}}{\fs20  disk provides very little protection from a nasty crash.  Often, a crash is due to a program writing to memory that it has not reserved.  This kind of bug is very common in programs that use the toolbox or that make use of Modula-2's new and dispose procedures.  It can also happen if you are using arrays and index past the end of the array.  If a program is doing this, your RAM disk}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM disks}}}{\fs20  is no safer than files on the desktop.  If you want to be sure that your files will not be lost, save them to a floppy disk or hard disk.\par {\*\bkmkend bk11}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extras menu\bxe }{\rxe bk11}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Run Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Run Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5760\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 {\*\bkmkstart bk12}The Run menu contains the commands that allow you to compile a program.  There are a variety of ways to compile a program, reflecting options suited to different sizes of programs and differing personal taste.}{\v\fs20 \cell }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw183\pich200\picwgoal3660\pichgoal4000\macpict\bliptag581651325\blipupi72{\*\blipuid 22ab4b7d3738c815d779a58d7d79506e}0b610000000000c800b71101a00082a0008e01000a00000000030802809800180000000000c800b80000000000c800b70000000000c800b7000102e90008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0009017fc1feff0080ef0009017fc1feff0080ef0009017fccfeff0080ef0009017fccfeff0080ef0009057fccccc1ff80ef0009057fccccc1ff80ef0009057fc1ccccff80ef0009057fc1ccccff80ef0009057fc9ccccff80ef0009057fc9ccccff80ef0009007ffecc01ff80ef0009007ffecc01ff80ef0009057fcce0ccff80ef0009057fcce0ccff80ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0008007ffdff0080ef0007007fecff01c00007007fecff01c000070060ec0001c000070060ec0001c000070060ec0001c000070060ec0001c000140260003cfe00011870fd000082fa00036104fc00140260003cfe00011870fd000082fa00036104fc001402600066fd00053000060000c6fa0003418cfc001402600066fd00053000060000c6fa0003418cfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc0019176000603cfe3e3830780f8780ee3cfe1e36660001b1dcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830cc060cc0fe66db333866000219fcfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006066db331830fc060cc0d67edb33306e000211acfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760006666db331830c006ccc0c660db3330360002598cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc00191760003c3cdb3e3c7878038780c63cdb1e30460001b18cfc000f0060fd000030f600003cfd0001fc000f0060fd000030f600003cfd0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00160260003cfe00011870fd0002f86003fc0003618cfc00160260003cfe00011870fd0002f86003fc0003618cfc001602600066fd00073000060000cc0003fc00034198fc001602600066fd00073000060000cc0003fc00034198fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f6000603cfe3e3830780f8780cce1e330fe000401b1b0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830cc060cc0cc630360fe00040219e0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006066db331830fc060cc0cc61e3c0fe00040211b0fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60006666db331830c006ccc0cc603360fe0004025998fc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc00190f60003c3cdb3e3c7878038780f8f1e330fe000401b18cfc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00140b60003c6000006001c00001f0f900036180fc00140b60003c6000006001c00001f0f900036180fc00140b600066600000600300000180f900034180fc00140b600066600000600300000180f900034180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc00190f6000607c3c3c6607c78d818366c78d8ffe000401b180fc001902600060fe66096c030cce01e3870cce18fe0004021980fc001902600060fe66096c030cce01e3870cce18fe0004021980fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc00190f600060667e6078030ccc0183060ccc0ffe0004021180fc0019176000666660666c030ccc0183060ccc01800000025980fc0019176000666660666c030ccc0183060ccc01800000025980fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00190f60003c663c3c6603078c01f306078c0ffe000401b1f8fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000e0260003cfe00011870f30001fc000e0260003cfe00011870f30001fc000d02600066fd000030f30001fc000d02600066fd000030f30001fc000f086000603cfe3e383078f40001fc000f086000603cfe3e383078f40001fc000f0860006066db331830ccf40001fc000f0860006066db331830ccf40001fc000f0860006066db331830fcf40001fc000f0860006066db331830fcf40001fc000f0860006666db331830c0f40001fc000f0860006666db331830c0f40001fc00110a60003c3cdb3e3c7878ccc0f60001fc00110a60003c3cdb3e3c7878ccc0f60001fc000b0060fd000030f10001fc000b0060fd000030f10001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc000c05600060300180f10001fc000c05600060300180f10001fc000c05600060000180f10001fc000c05600060000180f10001fc000c0560006071f198f10001fc000c0560006071f198f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000c056000603199e0f10001fc000c056000603199e0f10001fc000c056000603199b0f10001fc000c056000603199b0f10001fc000e0360007e79fe990080f30001fc000e0360007e79fe990080f30001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00090260007cee0001fc00090260007cee0001fc000d02600060fd000060f30001fc000d02600060fd000060f30001fc000f08600060cc7878ccf878f40001fc000f08600060cc7878ccf878f40001fc000f0360007878fecc0160ccf40001fc000f0360007878fecc0160ccf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006030fcc0cc60fcf40001fc000f0860006078c0cccc6cc0f40001fc000f0860006078c0cccc6cc0f40001fc00110a60007ccc78787c3878ccc0f60001fc00110a60007ccc78787c3878ccc0f60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00100260007cfb000307800006f80001fc00100260007cfb000307800006f80001fc001102600060fd000460000cc006f70001fc001102600060fd000460000cc006f70001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160f600060cc7878ccf8780ccf8f8e1e3e1efb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160360007878fecc0860cc0cccc606333330fb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006030fcc0cc60fc0cccc60633331efb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00160f60006078c0cccc6cc00cccc6c6333303fb0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc00181160007ccc78787c3878078f838f1e331e3330fd0001fc000b0060f800000cf60001fc000b0060f800000cf60001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc00070060ec0001fc0007007fecff01fc0007007fecff01fc00070003ecff01fc00070003ecff01fc0002e900a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Compile to Memory}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Compile to Memory\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to memory command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The Compile To Memory command compiles, links and executes the program in the front window.  Object modules are not saved to disk, but the executable file is written to disk.  This command will probably be the one you will use most to compile your programs \endash  it gives the fastest turn-around time since writing the object modules to disk is avoided.  \par You should not use this command if your program is split across multiple source files, and you need the object modules to combine with other object files to form the final executable file.  (This is called separate compilation.)  You should also not use this option if your program is made up of more than one language.  For example, if you use the append directive to append an assembly language file to the end of a Modula-2 program, do not use this command to compile the program.  In either of these cases, use Compile to Disk.\par There are some compilers that do not support Compile to Memory.  In these cases, you must use the Compile to Disk command, or you will get linker errors.  ORCA/Modula-2 supports Compile to Memory.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file menu}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 languages menu}}}{\fs20 Whenever you compile a program, information about the compilation is written to a special window called the shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  window.  You can create this window yourself, by selecting New from the File menu and then giving it a language stamp of shell.  (See the description of the Languages menu below for more information about the language stamp.)  If you have not created a shell window, the desktop will do so automatically when you compile a program for the first time.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Compile to Disk}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Compile to Disk\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile to disk command\bxe }}}{\fs20 This command compiles, links, and executes your program.  Unlike Compile to Memory, the program's object files are written to disk.  With that exception, it works just like the Compile To Memory command}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Compile To Memory command}}}{\fs20 .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 ORCA creates object files as a result of compiling or assembling source files; it creates executable files as the output from linking object files.  The number of object files created is typically two, while there is one executable module.  The first object file contains some compiler initialization code; ORCA attaches the suffix .}{\i\fs20 root}{\fs20  to the name it uses for this module.  The second object file contains the rest of the generated intermediate code; ORCA attaches the suffix .}{\i\fs20 a}{\fs20  to its name.  If any other object files are created, the next successive alphabetic character is appended to the file name (i.e. .b, .c, ... , .z).  Multiple object modules could be created by performing some series of partial and/or separate compilations of various source files.  \par If your source file contains a keep directive, ORCA will use the keep name in creating the object and executable files associated with compiling your program.  For example, if your keep name is OUT, then the object files}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20  will be named OUT.ROOT and OUT.A. \par For programs which do not use a keep directive, ORCA uses default names for the object and executable files created as a result of compiling and linking your program; the names are derived from the name of your source file.  If your source file's name contains a suffix (i.e. a period within the name, followed by one or more characters), then the system calls the first object file }{\i\fs20 sourcefile}{\fs20 .root, where }{\i\fs20 sourcefile}{\fs20  is the name of your source file, with the suffix stripped.  The second object file is named }{\i\fs20 sourcefile}{\fs20 .a.  The executable file is named }{\i\fs20 sourcefile}{\fs20 .  If your source file's name does not contain a suffix, then ORCA appends the four-character suffix .}{\i\fs20 obj}{\fs20  to the output files.  The first object file will have .}{\i\fs20 root}{\fs20  appended to the .}{\i\fs20 obj}{\fs20 , and the second will have .}{\i\fs20 a}{\fs20  appended to the .}{\i\fs20 obj}{\fs20 .  For example, if your source file was named FILE1, then the object files would be named FILE1.OBJ.ROOT and FILE1.OBJ.A, while the executable file would be called FILE1.OBJ.\par A word of caution:  using the ProDOS FST, GS/OS restricts file names to 15 characters.  If you will be using the default names assigned by the desktop, you need to ensure that your source file's name is not too long when the suffixes are attached to form the object and executable files' names.\par Programmers typically assign suffixes to their file names to remind them of the file's language type.  We recommend the following suffixes:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\ri5580\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\adjustright {\fs18 Language\tab Suffix\par }\pard \qj\li360\ri5580\keepn\widctlpar\tx1800\adjustright {\fs18 Rez\tab .REZ\par Pascal\tab .PAS\par Modula-2\tab .MOD\par assembly\tab .ASM\par BASIC\tab .BAS\par }\pard \qj\li360\ri5580\widctlpar\tx1800\adjustright {\fs18 C\tab .CC\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 BASIC}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez}}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 We strongly recommend that you not use single-character suffixes, since these can interfere with partial compiles and multi-lingual compiles.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Check for Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Check for Errors\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 check for errors command}}}{\fs20 The Check For Errors command compiles your program, but does not save the result of the compile.  This allows the compiler to scan your program quickly for errors.  Most compilers can scan for errors about twice as fast as they can compile a program.  Once all errors have been removed, you can use one of the compile commands to compile the program.\par If you use a keep directive in your program, this command will compile your program instead of just scanning for errors.  To make effective use of this command, be sure to remove any keep directives.  Note that removal of keep directives allow you to use the automatic naming for object and executable files discussed above.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Compile}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Compile\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compile command}}}{\fs20 The purpose of this command is to set the default options for compilation, or to compile a program without linking.   Note that the options you choose affect all compile commands selected to compile the front window.\par Below is a picture of the dialog box brought up by the Compile command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw512\pich330\picwgoal10240\pichgoal6600\macpict\bliptag1053564528\blipupi72{\*\blipuid 3ecc1e70ce59bdaec441964701b6389d}1cd300000000014a02001101a00082a0008e01000a00000000030802809800400000000000a002000000000000a002000000000000a00200000102c10006007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe14007fe9ff0087feff06cf1ffff0fffff3e6ff00fe14007fe9ff0087feff06cf1ffff0fffff3e6ff00fe12007fe9ff0033fdff049fffe67ff3e5ff00fe12007fe9ff0033fdff049fffe67ff3e5ff00fe17007fe9ff0d3f8603838f9f0fe660e0e3c383c3e9ff00fe17007fe9ff0d3f8603838f9f0fe660e0e3c383c3e9ff00fe17007fe9ff0d3f324999cf9e67e66673f399999fe9ff00fe17007fe9ff0d3f324999cf9e67e66673f399999fe9ff00fe17007fe9ff0d3f324999cf9e07e66673f39999c3e9ff00fe17007fe9ff0d3f324999cf9e07e66673f39999c3e9ff00fe17007fe9ff0d33324999cf9e7fe66672739999f9e9ff00fe17007fe9ff0d33324999cf9e7fe66672739999f9e9ff00fe17007fe9ff0d87864983870f0ff0e0f8e1c399c3e9ff00fe17007fe9ff0d87864983870f0ff0e0f8e1c399c3e9ff00fe0e007fe6ff009ffdff00e7e4ff00fe0e007fe6ff009ffdff00e7e4ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe060060c3000006060060c3000006060060c3000006060060c3000006060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060e0160f8f200010308d70002601f060e0160f8f200010308d70002601f06160360f801e0fc00027c61c0fc00010308d70002601f06160360f801e0fc00027c61c0fc00010308d70002601f06160360f80330fc00026000c0fc00010308d70002601f06160360f80330fc00026000c0fc00010308d70002601f06190c60f80301e33363c3c060e0c1e3fd00010308d70002601f06190c60f80301e33363c3c060e0c1e3fd00010308d70002601f06190c60f801e333338666607860c330fd00010308d70002601f06190c60f801e333338666607860c330fd00010308d70002601f06190260f800fe33060607e06060c3f0fd00010308d70002601f06190260f800fe33060607e06060c3f0fd00010308d70002601f06180260f803fe33050666006060c3fc00010308d70002601f06180260f803fe33050666006060c3fc00010308d70002601f06190c60f801e1e1f303c3c060f1e1e3fd00010308d70002601f06190c60f801e1e1f303c3c060f1e1e3fd00010308d70002601f060e0160f8f200010308d70002601f060e0160f8f200010308d70002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06140360f80318fe00011180f9000003d60002601f06140360f80318fe00011180f9000003d60002601f06140360f80330fe00011980f9000003d60002601f06140360f80330fe00011980f9000003d60002601f06170b60f80360f0f1f01d8fbf878cfc000003d60002601f06170b60f80360f0f1f01d8fbf878cfc000003d60002601f06170b60f803c19999981f99b6ccc0fc000003d60002601f06170b60f803c19999981f99b6ccc0fc000003d60002601f06170b60f80361f9f9981b99b6cfc0fc000003d60002601f06170b60f80361f9f9981b99b6cfc0fc000003d60002601f06160a60f803318181981999b6ccfb000003d60002601f06160a60f803318181981999b6ccfb000003d60002601f06170b60f80318f0f1f0188fb6c78cfc000003d60002601f06170b60f80318f0f1f0188fb6c78cfc000003d60002601f06120160f8fe00010180f7000003d60002601f06120160f8fe00010180f7000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06140460f801e003fd000003fa000003d60002601f06140460f801e003fd000003fa000003d60002601f06140460f8033003fe000003f9000003d60002601f06140460f8033003fe000003f9000003d60002601f06190d60f8030333e363c667c71f0f0f18fe000003d60002601f06190d60f8030333e363c667c71f0f0f18fe000003d60002601f06180c60f801e3333386666303199998fd000003d60002601f06180c60f801e3333386666303199998fd000003d60002601f06180260f800fe330606666303199f8ffd000003d60002601f06180260f800fe330606666303199f8ffd000003d60002601f06190260f803fe33070666636319980180fe000003d60002601f06190260f803fe33070666636319980180fe000003d60002601f06190d60f801e1f3e303c3e1c7998f0f18fe000003d60002601f06190d60f801e1f3e303c3e1c7998f0f18fe000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06120260f803f900003efc000003d60002601f06120260f803f900003efc000003d60002601f06120260f803f9000033fc000003d60002601f06120260f803f9000033fc000003d60002601f06191160f80301f3e1f331f1f1e0331f36fe1e3003d60002601f06191160f80301f3e1f331f1f1e0331f36fe1e3003d60002601f06160360f80303fb3307303e3338db300003d60002601f06160360f80303fb3307303e3338db300003d60002601f06160360f80303fb3307f0303330db1e0003d60002601f06160360f80303fb3307f0303330db1e0003d60002601f06191160f803033331f33331f300303330db030003d60002601f06191160f803033331f33331f300303330db030003d60002601f06191160f803f1f33231f1f231e0301f30db1e3003d60002601f06191160f803f1f33231f1f231e0301f30db1e3003d60002601f06150160f8fe000401e00001e0fa000003d60002601f06150160f8fe000401e00001e0fa000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f06270260f803f900193e00001c60000300600603c7c3c3c03c0603c463c663c3c7c780e90002601f06270260f803f900193e00001c60000300600603c7c3c3c03c0603c463c663c3c7c780e90002601f06240260f803f9000a3300003000000300600606fe660360660606fb66010cc0e90002601f06240260f803f9000a3300003000000300600606fe660360660606fb66010cc0e90002601f062c1460f80301f3e1f331f1f1e033363c7ce33303067c3efe660c06600666066766066666060c0ce90002601f062c1460f80301f3e1f331f1f1e033363c7ce33303067c3efe660c06600666066766066666060c0ce90002601f06290360f80303fb331a303e38663061e0030066660667c606600c060667e6e66666e78780e90002601f06290360f80303fb331a303e38663061e0030066660667c606600c060667e6e66666e78780e90002601f06290360f80303fb331af030307e3060c0030066660666c607e0180607e6e66667e66600c0e90002601f06290360f80303fb331af030307e3060c0030066660666c607e0180607e6e66667e66600c0e90002601f06291560f803033331f33331f3003030603061e00300666606fe660360300606fb66010cc0e90002601f06291560f803033331f33331f3003030603061e00300666606fe660360300606fb66010cc0e90002601f062c2460f803f1f33231f1f231e030303c30f3330306663e63c663c6667e67e66623c3c663c7c78ce90002601f0698004000a000000140020000a000000140020000a000000140020000012c2460f803f1f33231f1f231e030303c30f3330306663e63c663c6667e67e66623c3c663c7c78ce90002601f06150160f8fe000401e00001e0fa000003d60002601f06150160f8fe000401e00001e0fa000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d60002601f060d0160f8f2000003d6ff02e01f060d0160f8f2000003d6ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06150660f8060000303cf400040e0c000030dc00011f06150660f8060000303cf400040e0c000030dc00011f06180660f80600003066fe000060f8000306000030db00011f06180660f80600003066fe000060f8000306000030db00011f06211a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8de00011f06211a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8de00011f06211a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998de00011f06211a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998de00011f06211a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998de00011f06211a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998de00011f06211a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8de00011f06211a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8de00011f06221b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980df00011f06221b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980df00011f06100560f807fffff0ed0000f0de00011f06100560f807fffff0ed0000f0de00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06180660f8060000303cf700076000380000060380dc00011f06180660f8060000303cf700076000380000060380dc00011f061c0660f80600003066fe000060fb00076000180300060180dc00011f061c0660f80600003066fe000060fb00076000180300060180dc00011f06201960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0dd00011f06201960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0dd00011f06201960f8060000306070cccc60cc0cc0c0cdb6666618030666618660dd00011f06201960f8060000306070cccc60cc0cc0c0cdb6666618030666618660dd00011f06201960f8060000306060fccc60fc0cc078ddb66666180306666187e0dd00011f06201960f8060000306060fccc60fc0cc078ddb66666180306666187e0dd00011f061f1860f8060000306660c0cc6cc00cc00c6db66666180366666186dc00011f061f1860f8060000306660c0cc6cc00cc00c6db66666180366666186dc00011f06201960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6dd00011f06201960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6dd00011f06100560f807fffff0f8000078d300011f06100560f807fffff0f8000078d300011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06160660f8078000f03cf90001c00cfc00000cda00011f06160660f8078000f03cf90001c00cfc00000cda00011f06190660f80670073066fc0004600000c00cfc00000cda00011f06190660f80670073066fc0004600000c00cfc00000cda00011f061e1760f8060e3830603c7c3c6c7cf87807c78f8cc7c078787c78db00011f061e1760f8060e3830603c7c3c6c7cf87807c78f8cc7c078787c78db00011f061b0660f80601c0306efe660470cc60cc0cfdcc00c0fdccdb00011f061b0660f80601c0306efe660470cc60cc0cfdcc00c0fdccdb00011f061e0f60f8060e3830667e667e60cc60fc0ccffecc04c0c0ccccfcdb00011f061e0f60f8060e3830667e667e60cc60fc0ccffecc04c0c0ccccfcdb00011f061e1360f8067007306660666060cc6cc00ccc0cccc7c0fecc00c0db00011f061e1360f8067007306660666060cc6cc00ccc0cccc7c0fecc00c0db00011f061f1860f8078000f03c3c663c607c387807c78f87c8c078787c78c0dc00011f061f1860f8078000f03c3c663c607c387807c78f87c8c078787c78c0dc00011f06110560f807fffff0f500010780d700011f06110560f807fffff0f500010780d700011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060c0560f807fffff0c900011f060c0560f807fffff0c900011f06180b60f8078000f0603001800007fa0002018706d900011f06180b60f8078000f0603001800007fa0002018706d900011f06170c60f80670073060000180000c18fa000003d800011f06170c60f80670073060000180000c18fa000003d800011f061e1760f8060e38306071f1980f9f3e1e3603c3cfe3e3830e3e1fdb00011f061e1760f8060e38306071f1980f9f3e1e3603c3cfe3e3830e3e1fdb00011f061e1760f80601c030603199b0198c18333806666db33183063333db00011f061e1760f80601c030603199b0198c18333806666db33183063333db00011f061e1760f8060e3830603199e0198c183f3006066db33183063333db00011f061e1760f8060e3830603199e0198c183f3006066db33183063333db00011f061e1760f806700730603199b0198c1b303006666db3318306331fdb00011f061e1760f806700730603199b0198c1b303006666db3318306331fdb00011f061f1860f8078000f07e7999980f8c0e1e3003c3cdb3e3c78f332330dc00011f061f1860f8078000f07e7999980f8c0e1e3003c3cdb3e3c78f332330dc00011f06140560f807fffff0f5000003fd00001edb00011f06140560f807fffff0f5000003fd00001edb00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06100160f8f200003ff6ff00f0e100011f06100160f8f200003ff6ff00f0e100011f06120160f8f3000107c0f600010f80e200011f06120160f8f3000107c0f600010f80e200011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06400560f80070003cfe0009187000001c0001dc000ffe0003f00000c0fd0005ee00070003c0fe000f038000e001c000f000001f000700001cfe000007fe00011f06400560f80070003cfe0009187000001c0001dc000ffe0003f00000c0fd0005ee00070003c0fe000f038000e001c000f000001f000700001cfe000007fe00011f063e0560f800700066fd000e3000001c0001dc0019800c019800c0fc0005ee0007000660fe0013018000e001c0019800c019800c00000c18000007fe00011f063e0560f800700066fd000e3000001c0001dc0019800c019800c0fc0005ee0007000660fe0013018000e001c0019800c019800c00000c18000007fe00011f06413a60f8007000603cfe3e383078001c0001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e0007fe00011f06413a60f8007000603cfe3e383078001c0001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e0007fe00011f06412360f80070006066db331830cc001c0001dc000f198c019998c0c666660000ee0007000606fe6613618000e001c000f198c019998c33330c18300007fe00011f06412360f80070006066db331830cc001c0001dc000f198c019998c0c666660000ee0007000606fe6613618000e001c000f198c019998c33330c18300007fe00011f06413a60f80070006066db331830fc001c0001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e0007fe00011f06413a60f80070006066db331830fc001c0001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e0007fe00011f06402260f80070006666db331830c0001c0001dc0019980d819998d8c666606000ee00070006fd6613018000e001c0019980d819980c33330c1b030007fe00011f06402260f80070006666db331830c0001c0001dc0019980d819998d8c666606000ee00070006fd6613018000e001c0019980d819980c33330c1b030007fe00011f06413a60f80070003c3cdb3e3c7878001c0001dc000f0f0700f1f071e3c663c000ee00070003c3e663c3c3c000e001c000f0f0701f0f0c1f1f1e0e1e0007fe00011f06413a60f80070003c3cdb3e3c7878001c0001dc000f0f0700f1f071e3c663c000ee00070003c3e663c3c3c000e001c000f0f0701f0f0c1f1f1e0e1e0007fe00011f062a0360f80070fd000030fd00031c0001dcfc00010180fb0002ee0007f80002e001c0f4000007fe00011f062a0360f80070fd000030fd00031c0001dcfc00010180fb0002ee0007f80002e001c0f4000007fe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06240360f80038f80003380000eef5000401dc000380fa000301c000e0f400000efe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06260360f8000ff9000501e0000073c0f600040f380000f0fa00030f00003cf4000078fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06240360f80001f8fffe00013c7ff6ff04f8f000001ffaff03f8000007f4ff00c0fe00011f06120160f8f3000107c0f600010f80e200011f06120160f8f3000107c0f600010f80e200011f06100160f8f200003ff6ff00f0e100011f06100160f8f200003ff6ff00f0e100011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06060060c3ff000698004001400000014a020001400000014a020001400000014a02000001060060c3ff0006060060c3ff0006060060c3ff0006060060c3000006060060c3000006060060c3000006060060c300000606007fc3ff00fe06007fc3ff00fe02c100a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The rectangular boxes next to the first five items in the Compile window are line-edit boxes.  In the Source File: box, you can enter the name of the source program that you want to compile.  A complete or partial path name may be entered here.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files\:see executable files}{\txe }}}{\fs20 The Keep Name: box is where you enter the name of the object module produced by compiling the source file; again, this can be either a full or partial path name.  Any name supplied here takes precedence over KEEP names supplied in your source file, or over the default naming of object files described earlier in this section.  Make sure the }{\caps\fs20 keep}{\fs20  name is different from the source file name to prevent linker errors when the linker tries to overwrite the source file with the object module.  \par The Subroutines: box is used for }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 partial compilation}}}{\fs20 partial compilation.  Under ORCA, once you have compiled a complete program, you can individually compile selected subroutines.  This can be very useful when you have a long program made up of several subroutines.  If you find you have made a mistake in only a few of the subroutines, then you are not forced to recompile the entire program to correct these few mistakes.  To perform a partial compile, enter the names of the subroutines needing to be recompiled, separated by a space. Not all compilers support partial compilation.  Please refer to Chapter 8 for more information about partial compilation.\par The Language Parms: box is used to tell the system about any special parameters your compiler needs.  ORCA/Modula-2 does not use these fields.  If you are using another compiler, your compiler reference manual will tell you if you need these options.\par The Language Prefix: box is used to tell the system that you have installed your compilers in some }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 directory other than the default Languages prefix.  The default prefix is the subdirectory named Languages contained in the directory where you installed your desktop system.  If you are using the full ORCA shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  or more than one compiler, setting up a special directory to hold your compilers, assemblers, and linker is a good idea.  You should enter either a full or partial path name here.\par The next four boxes are check boxes.  To select any or all of the options, move the cursor over the box and click once with the mouse.  To deselect an option, click on the box a second time.\par Checking the Create a source listing box causes the compiler to produce a listing of your source file as it compiles your program, and checking the Create a symbol table box causes the compiler to produce a symbol table.  A symbol table is a summary of the all of the functions and variables detected in the program.  ORCA/Modula-2 does not produce a symbol table.  Generate debug code calls for the compiler to produce special code that will be used by the desktop in running the source-level debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 .  The debug box should be checked while you are in the process of debugging your program, and then deactivated after your program is working properly so that the code produced by the compiler is more compact.  Link after compiling causes the desktop to invoke the linker after successful compilation of your program.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20  \par The four buttons in the bottom of the Compile window cause the desktop to take action based on the button chosen.  Clicking the Compile button starts the compilation of your source file.  Clicking the Set Options button causes the desktop to record information about future compilations based on the choices you have made in this window.  Cancel returns you to where you were before selecting the Compile command; no system action is taken.  The Set Defaults button causes the desktop to record the information you have given in this dialog.  Then, whenever you launch the desktop, the compilation options specified here will be automatically applied to the program being compiled.  See "Setting up Defaults," later in this chapter, for further information about setting system defaults.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Link}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Link\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\fs20 The purpose of the Link command is to set default options to be used when linking the front window, or to manually link object modules.\par The linker can be regarded as an advanced feature.  You do not need to understand the function of a linker to effectively use the desktop, since the compile commands are set up to automatically call the linker.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1043{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex44\picscaley45\piccropl0\piccropr0\piccropt0\piccropb0\picw512\pich280\picwgoal10240\pichgoal5600\macpict\bliptag-1585933941\blipupi72{\*\blipuid a178918b2b029059f4b61865186d765d}1e6000000000011802001101a00082a0008e01000a00000000030802809800400000000000a002000000000000a002000000000000a00200000102c10006007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe12007fe8ff08f9fcffe7ff0fffff3fe5ff00fe12007fe8ff08f9fcffe7ff0fffff3fe5ff00fe11007fe8ff07f9ffffe7fe67ff3fe4ff00fe11007fe8ff07f9ffffe7fe67ff3fe4ff00fe15007fe8ff0bf9f8e0e67e660e0e3c383c3fe8ff00fe15007fe8ff0bf9f8e0e67e660e0e3c383c3fe8ff00fe14007fe8ff0af9fce664fe66673f399999e7ff00fe14007fe8ff0af9fce664fe66673f399999e7ff00fe15007fe8ff0bf9fce661fe66673f39999c3fe8ff00fe15007fe8ff0bf9fce661fe66673f39999c3fe8ff00fe15007fe8ff0bf9fce664fe66672739999f9fe8ff00fe15007fe8ff0bf9fce664fe66672739999f9fe8ff00fe15007fe8ff0bf81866667f0e0f8e1c399c3fe8ff00fe15007fe8ff0bf81866667f0e0f8e1c399c3fe8ff00fe0b007fe3ff01fe7fe3ff00fe0b007fe3ff01fe7fe3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe06007fc3ff00fe060060c3000006060060c3000006060060c3000006060060c3000006060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06170560f801e30060fe00027c61c0fd00000cd50002601f06170560f801e30060fe00027c61c0fd00000cd50002601f06170360f80333fe000403006000c0fd00000cd50002601f06170360f80333fe000403006000c0fd00000cd50002601f06180c60f80333e0e3c3c7c060e0c1e3fe00000cd50002601f06180c60f80333e0e3c3c7c060e0c1e3fe00000cd50002601f06180c60f8033330666663007860c330fe00000cd50002601f06180c60f8033330666663007860c330fe00000cd50002601f06180c60f803333067e603006060c3f0fe00000cd50002601f06180c60f803333067e603006060c3f0fe00000cd50002601f06170760f8033330660663fe6000c3fd00000cd50002601f06170760f8033330660663fe6000c3fd00000cd50002601f06180c60f801e3e363c3c1c060f1e1e3fe00000cd50002601f06180c60f801e3e363c3c1c060f1e1e3fe00000cd50002601f06110560f8000001c0f700000cd50002601f06110560f8000001c0f700000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06140360f80318fe00011180fa00000cd50002601f06140360f80318fe00011180fa00000cd50002601f06140360f80330fe00011980fa00000cd50002601f06140360f80330fe00011980fa00000cd50002601f06170b60f80360f0f1f01d8fbf878cfd00000cd50002601f06170b60f80360f0f1f01d8fbf878cfd00000cd50002601f06170b60f803c19999981f99b6ccc0fd00000cd50002601f06170b60f803c19999981f99b6ccc0fd00000cd50002601f06170b60f80361f9f9981b99b6cfc0fd00000cd50002601f06170b60f80361f9f9981b99b6cfc0fd00000cd50002601f06160a60f803318181981999b6ccfc00000cd50002601f06160a60f803318181981999b6ccfc00000cd50002601f06170b60f80318f0f1f0188fb6c78cfd00000cd50002601f06170b60f80318f0f1f0188fb6c78cfd00000cd50002601f06120160f8fe00010180f800000cd50002601f06120160f8fe00010180f800000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f06270460f803018cfd000903e00001c600000c00f1fef00a0f0180f1f1f0f1f0f1f1e0e50002601f06270460f803018cfd000903e00001c600000c00f1fef00a0f0180f1f1f0f1f0f1f1e0e50002601f06270460f803000cfd000303300003fe00010c01fe99049819818061fe990398618330e50002601f06270460f803000cfd000303300003fe00010c01fe99049819818061fe990398618330e50002601f06281960f803038f8d8f9b33033363c7ce33300c199999819818198061fe990398618303e50002601f06281960f803038f8d8f9b33033363c7ce33300c199999819818198061fe990398618303e50002601f06282060f803018cce199c3303e38663061e000c0199f1819818018061f1f199f061e1e0e50002601f06282060f803018cce199c3303e38663061e000c0199f1819818018061f1f199f061e1e0e50002601f06282060f803018ccc199837030307e3060c000c0199b181f81801806199b1f9b0618030e50002601f06282060f803018ccc199837030307e3060c000c0199b181f81801806199b1f9b0618030e50002601f06281160f803018ccc19981b03030603061e000c01fe99049819818061fe990398618330e50002601f06281160f803018ccc19981b03030603061e000c01fe99049819818061fe990398618330e50002601f06280860f803f3cf8c0f9823fe0314c30f33300c18f198f1998f19f8f1f1999998f1f1e3e50002601f06280860f803f3cf8c0f9823fe0314c30f33300c18f198f1998f19f8f1f1999998f1f1e3e50002601f06110160f8fb00001efa00000cd50002601f06110160f8fb00001efa00000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000cd50002601f060d0160f8f300000fd5ff02e01f060d0160f8f300000fd5ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06120560f807fffff0e70002fffffee600011f06120560f807fffff0e70002fffffee600011f06290660f8060000303cf400040e0c000030fa0004f0001e0f80fa000070fe000438300180c0f800011f06290660f8060000303cf400040e0c000030fa0004f0001e0f80fa000070fe000438300180c0f800011f062e0660f80600003066fe000060f8000306000030f90003ce00e60cfd00000cfe0007c180000018000180f700011f062e0660f80600003066fe000060f8000306000030f90003ce00e60cfd00000cfe0007c180000018000180f700011f063b1a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8fc0016c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0fa00011f063b1a60f806000030606c787cf87807c07878ccd8f0f0061c3c7c71f0f8fc0016c1c7060c198f0f199f0f00f9f3e1e3601871f199c7c3e0fa00011f063b1a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998fc0016c038060f0f1999998c198198c1833380183199b0c66660fa00011f063b1a60f8060000306070cccc60cc0cc0c0cccce19998060c6030319998fc0016c038060f0f1999998c198198c1833380183199b0c66660fa00011f063b1a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998fc0016c1c7060c061f98198c1f8198c183f300183199e0c66660fa00011f063b1a60f8060000306060fccc60fc0cc078ccccc181f8060c3c30319998fc0016c1c7060c061f98198c1f8198c183f300183199e0c66660fa00011f063b1a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8fc0016ce00e60c0f1819998d980198c1b30300183199b0c663e0fa00011f063b1a60f8060000306660c0cc6cc00cc00cccccc19980060c06363198f8fc0016ce00e60c0f1819998d980198c1b30300183199b0c663e0fa00011f063c1b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980fd0016f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466fa00011f063c1b60f8060000303c60787c387807c078787cc0f0f00f1e3c1c79991980fd0016f0001e0f998f0f0f870f00f8c0e1e3003c799999e66466fa00011f061b0560f807fffff0ed0000f0fc0002fffffeef000103c0fa00011f061b0560f807fffff0ed0000f0fc0002fffffeef000103c0fa00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06120560f807fffff0e70002fffffee600011f06120560f807fffff0e70002fffffee600011f062e0660f8060000303cf700076000380000060380fa0004f0001e0780f7000560380001c61cfd0006031800c0001f062e0660f8060000303cf700076000380000060380fa0004f0001e0780f7000560380001c61cfd0006031800c0001f06350660f80600003066fe000060fb00076000180300060180fa0004ce00e60cc0f90012300060180003000c00018000030000c0001f06350660f80600003066fe000060fb00076000180300060180fa0004ce00e60cc0f90012300060180003000c00018000030000c0001f063e1960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0fb001fc1c7060c07cc63c03c663c3c667c3e7c183c07ce0c1e03e1e01f3878cc001f063e1960f806000030606c787cf87807c078cdfc7c3c1807c3e7c183c0fb001fc1c7060c07cc63c03c663c3c667c3e7c183c07ce0c1e03e1e01f3878cc001f063e1960f8060000306070cccc60cc0cc0c0cdb6666618030666618660fb0009c03806078ccc6660663cfe6612306666186603060c330183303318c0d8001f063e1960f8060000306070cccc60cc0cc0c0cdb6666618030666618660fb0009c03806078ccc6660663cfe6612306666186603060c330183303318c0d8001f063e1960f8060000306060fccc60fc0cc078ddb66666180306666187e0fb001fc1c70600ccc6c7e07e187e6066306666187e03060c3f018330331878f0001f0698004000a000000118020000a000000118020000a000000118020000013e1960f8060000306060fccc60fc0cc078ddb66666180306666187e0fb001fc1c70600ccc6c7e07e187e6066306666187e03060c3f018330331878f0001f063d1860f8060000306660c0cc6cc00cc00c6db66666180366666186fa001fce00e60cccc6c600603c606666366666186003060c3001b33033180cd8001f063d1860f8060000306660c0cc6cc00cc00c6db66666180366666186fa001fce00e60cccc6c600603c606666366666186003060c3001b33033180cd8001f063e1960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6fb001ff0001e0787c383c03c663c3c3e1c3e7c3c3c030f1e1e00e1e01f3c78ccc01f063e1960f8060000303c60787c387807c0788db67c3c3c01c3e7c3c3c6fb001ff0001e0787c383c03c663c3c3e1c3e7c3c3c030f1e1e00e1e01f3c78ccc01f06160560f807fffff0f8000078f10002fffffee600011f06160560f807fffff0f8000078f10002fffffee600011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f062b0860f800e00e01f333e0fe00051c01c01e0c1efe000603803803c7c3c0fe00057007008cf878e800011f062b0860f800e00e01f333e0fe00051c01c01e0c1efe000603803803c7c3c0fe00057007008cf878e800011f06290760f8030fe1818333fd0005600030333c30fe000c0c0006066666600000018000c0fecce800011f06290760f8030fe1818333fd0005600030333c30fe000c0c0006066666600000018000c0fecce800011f062a0760f8063ff8c181e3fd0005c00018300c3efe000f18000306066660000003000060eccccce800011f062a0760f8063ff8c181e3fd0005c00018300c3efe000f18000306066660000003000060eccccce800011f062b0860f8067ffcc1e0c3c0fe0005c000181e0c33fe000f18000306066660000003000060fccccce800011f062b0860f8067ffcc1e0c3c0fe0005c000181e0c33fe000f18000306066660000003000060fccccce800011f062a0760f8063ff8c181e3fd0005c00018030c33fe000f180003060667e0000003000060dcccfce800011f062a0760f8063ff8c181e3fd0005c00018030c33fe000f180003060667e0000003000060dcccfce800011f06290760f8030fe1818333fd0005600030330c33fe000c0c0006066666600000018000c0fecce800011f06290760f8030fe1818333fd0005600030330c33fe000c0c0006066666600000018000c0fecce800011f062b0860f800e00e01f333e0fe00051c01c01e3f1efe000603803803c7c660fe0005700700c4f8cce800011f062b0860f800e00e01f333e0fe00051c01c01e3f1efe000603803803c7c660fe0005700700c4f8cce800011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f061a0460f8001ff0fa000103fef900017fc0fa00010ff8e400011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f061a0560f807fffff0f200031fffffc0f0000307fffff0f100011f061a0560f807fffff0f200031fffffc0f0000307fffff0f100011f06300c60f8078000f03c3c063c3c03c0f90004180000c104fb00010780f90007060000307c000060fe000103c0fa00011f06300c60f8078000f03c3c063c3c03c0f90004180000c104fb00010780f90007060000307c000060fe000103c0fa00011f06300c60f80670073066660c66660660f90004180000c18cfb00010cc0f9000c06000030660000603000000660fa00011f06300c60f80670073066660c66660660f90004180000c18cfb00010cc0f9000c06000030660000603000000660fa00011f063d1060f8060e38306060186660066c31f363c0fd0004180000c1dcfe78087c7c780cd863e6c780fd000e06000030663c3c667c3c7c0667c7c0fc00011f063d1060f8060e38306060186660066c31f363c0fd0004180000c1dcfe78087c7c780cd863e6c780fd000e06000030663c3c667c3c7c0667c7c0fc00011f063d1060f80601c0306e3c30663c066db3338660fd0007180000c1fcccc0c0fecc050cdb66670cc0fd000e060000306666606c30666606666660fc00011f063d1060f80601c0306e3c30663c066db3338660fd0007180000c1fcccc0c0fecc050cdb66670cc0fd000e060000306666606c30666606666660fc00011f063d1060f8060e3830660660660607edb33307e0fd0010180000c1acfc7878ccccfc0fdb66660fc0fd000e06000030667e3c7830666607e66660fc00011f063d1060f8060e3830660660660607edb33307e0fd0010180000c1acfc7878ccccfc0fdb66660fc0fd000e06000030667e3c7830666607e66660fc00011f063b0f60f8067007306666c066660666633306fc000f180000c18cc00c0ccc7cc00cccc6660cfc000e060000306660066c36666606666660fc00011f063b0f60f8067007306666c066660666633306fc000f180000c18cc00c0ccc7cc00cccc6660cfc000e060000306660066c36666606666660fc00011f063d1060f8078000f03c3c803c3c066661f303c0fd0004180000c18cfe78087c8c780cccc3e60780fd000e060000307c3c3c661c3c7c0667c7c6fc00011f063d1060f8078000f03c3c803c3c066661f303c0fd0004180000c18cfe78087c8c780cccc3e60780fd000e060000307c3c3c661c3c7c0667c7c6fc00011f06250560f807fffff0f200031fffffc0fc000078f6000307fffff0fb000360000606fb00011f06250560f807fffff0f200031fffffc0fc000078f6000307fffff0fb000360000606fb00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060a0260f807c7ff02e01f060a0260f807c7ff02e01f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f060e0160f8f5000003f5ffde00011f060e0160f8f5000003f5ffde00011f06100160f8f500007cf50000f8df00011f06100160f8f500007cf50000f8df00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f063d1660f800700060300180003800001dc000f000000f00000cfd00050ee00070003cfd000f38000e001c000f000001f000700001c0fe000070fc00011f063d1660f800700060300180003800001dc000f000000f00000cfd00050ee00070003cfd000f38000e001c000f000001f000700001c0fe000070fc00011f063c1560f800700060000180003800001dc0019800c019800cfc00050ee000700066fd001318000e001c0019800c019800c00000c180000070fc00011f063c1560f800700060000180003800001dc0019800c019800cfc00050ee000700066fd001318000e001c0019800c019800c00000c180000070fc00011f063f3860f80070006071f198003800001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e00070fc00011f063f3860f80070006071f198003800001dc00180f1f0199f1f1c3c7c3c000ee0007000603e7c3c3c18000e001c00180f1f0198f1f1f330c3e1e00070fc00011f063e2060f8007000603199b0003800001dc000f198c019998c0c666660000ee000700060fd661318000e001c000f198c019998c33330c183000070fc00011f063e2060f8007000603199b0003800001dc000f198c019998c0c666660000ee000700060fd661318000e001c000f198c019998c33330c183000070fc00011f063f3860f8007000603199e0003800001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e00070fc00011f063f3860f8007000603199e0003800001dc00019f8c019998c0c66663c000ee0007000606666607e18000e001c00019f8c0199f8c33330c181e00070fc00011f063e1f60f8007000603199b0003800001dc0019980d819998d8c666606000ee0007000fd66146018000e001c0019980d819980c33330c1b0300070fc00011f063e1f60f8007000603199b0003800001dc0019980d819998d8c666606000ee0007000fd66146018000e001c0019980d819980c33330c1b0300070fc00011f063f2260f80070007e799998003800001dc000f0f0700f1f071e3c663c000ee00070003c3e66fe3c12000e001c000f0f0701f0f0c1f1f1e0e1e00070fc00011f063f2260f80070007e799998003800001dc000f0f0700f1f071e3c663c000ee00070003c3e66fe3c12000e001c000f0f0701f0f0c1f1f1e0e1e00070fc00011f06270360f80070fb00043800001dc0fc000018fb00030ee00070f900020e001cf3000070fc00011f06270360f80070fb00043800001dc0fc000018fb00030ee00070f900020e001cf3000070fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06230360f80038fb00047000000ee0f500031dc00038f900021c000ef30000e0fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06260360f8000ffc000503c00000073cf50003f380000ff90003f00003c0f500010780fc00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06250360f80001fcff00fefe000103c7f5ff038f000001f9ff038000007ff5ff00fcfb00011f06100160f8f500007cf50000f8df00011f06100160f8f500007cf50000f8df00011f060e0160f8f5000003f5ffde00011f060e0160f8f5000003f5ffde00011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06080160f8c500011f06060060c3ff0006060060c3ff0006060060c3ff0006060060c3ff0006060060c3000006060060c3000006060060c3000006060060c300000606007fc3ff00fe06007fc3ff00fe02c100a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The line-edit box following Object File: is where you enter the base name of the object files you wish to be linked.  The object file's name should not include any system-added file name extensions.  For example, if you had compiled a program named BULLSEYE.MOD, using a keep name of BULLSEYE, then the system would have created object modules named BULLSEYE.ROOT and BULLSEYE.A.  To link these two object modules, you would enter BULLSEYE as the name of the Object File.  Default object file names are discussed above with the Compile command.\par The Object File box can also be used to perform separate compilation}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 separate compilation}}}{\fs20 .  The first object file name you enter should contain the main program; the other names can be specified in any order.  Enter only the base names of the object files}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 , as explained in the preceding paragraph.  The linker will automatically load all of the object modules produced from compiling a single source file.  See Chapter 8 for more information about separate compilation.\par The line-edit box following Keep Name: is where you enter the name of the executable file that the system will create upon successful linking of the object modules.  It is customary, but not required, to use the same name as that given in the Object File box; the system knows which files are object modules and which are executable images because the object module names always contain system-added extensions.  Using the bull's eye example above, then, we would enter BULLSEYE for the object file and BULLSEYE for the Keep Name.  The object modules would be called BULLSEYE.ROOT and BULLSEYE.A, while the executable file would be named BULLSEYE.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\fs20 The Library Prefix: box is used to tell the system that you have installed the libraries you and your compilers use in some }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 directory other than the default library prefix.  The default prefix is the subdirectory named LIBRARIES contained in the directory where you installed your desktop system.  You must enter a full path name here.\par As with the Compile window, the next four boxes are check boxes.  The first box gives you the option of producing a listing of the link.  The second box is used to specify whether a symbol table is to be generated during linking.  The third box lets you specify whether execution of the program should immediately occur after successful linking of the object modules.  The fourth box tells the system whether or not to save the executable image to disk.  This last option is for future expansion; currently, the linker saves the file to disk if there is a keep name, and does not save the file if there is no keep name.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\fs20 The radio buttons below the check boxes allow you to set the file type of the executable image.  Different file types are used depending upon the function of the program.  If you want to execute the program without leaving the development environment, use a file type of EXE.  You must use EXE to use the debugger}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debugger}}}{\fs20 , shell}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20  window, or graphics window}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 graphics window}}}{\fs20 .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 If you wish to create a stand-alone program that can be launched from the Finder, change the file type to S16, turn debugging off, and compile your program.  S16 programs can be executed by the development environment, but the desktop shuts down before executing your program.  S16 programs can also be executed from the Finder; EXE programs cannot.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:CDA}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:NDA}}}{\fs20 Classic desk accessories}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 classic desk accessories}}}{\fs20  have a file type of CDA, while new desk accessories have a file type of NDA.  You can execute a new desk accessory from the desktop as if it were an EXE program, but you must still set the file type to NDA.  Once the desk accessory is debugged, copy the executable image to the DESK.ACCS subdirectory of the SYSTEM }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directories}}}{\fs20 directory.  Remember to turn debugging off before the final compilation!  After the desk accessory has been installed into the SYSTEM/DESK.ACCS directory, you can access it from the Apple menu of any desktop program.\par Classic desk accessories}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desk accessories}}}{\fs20  cannot be debugged directly from the desktop.  To debug a classic desk accessory, compile it as an EXE program with a main program that calls the initialization and action functions.  Once debugged, remove the main program from the source code, turn off debugging, change the file type to CDA, and then recompile your program.  You can then copy the finished executable program to the SYSTEM:DESK.ACCS directory, where it can be accessed by using the three-key command sequence }{\outl\caps\fs18 \u-3\'f0}{\outl\fs18 -control-esc}{\fs20 .\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:EXE}}}{\fs20 The three check boxes below the radio buttons are used to set bits in the auxiliary file type; these are used by various program launchers to decide how to execute your program.  The complete description for these options is in Apple's File Type Notes for file type $B3 (S16) or $B5 (EXE).  Briefly, "GS/OS Aware" tells the program launcher that your program is a modern one that knows about the longer prefixes, and will use prefix 8 for the default prefix.  The ORCA/Modula-2 libraries assume you are using the new prefixes, so this option should be checked.  "Message Aware" tells the Finder that your program uses messages passed by the message center.  This would be true of most desktop programs.  "Desktop App." tells the Finder that the program is a desktop application.  In this case, the Finder shuts down the tools in a special way so the text screen doesn't flash on the screen as your program starts.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cancel button}}}{\fs20 Clicking the Link button causes the system to begin linking the object modules named in the Object File: box.  Selecting Set Options causes the information entered in the dialog to replace the previous linker defaults.  The Cancel button closes the dialog without saving the changes.  The Set Defaults button causes the desktop to record the information you have given in this dialog.  Then, whenever you launch the desktop, the linker options specified here will be automatically applied to the program being linked.  See "Setting up Defaults," later in this chapter, for further information about setting system defaults.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Execute}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Execute\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 execute command\bxe }}}{\fs20 The Execute command allows you to run an executable program.  The program's file type must be EXE, S16, or SYS.  The dialog box brought up by this command is shown below:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1044{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw426\pich250\picwgoal8520\pichgoal5000\macpict\bliptag-2064906402\blipupi72{\*\blipuid 84ec075e10059aaf74eecdb95e561f7d}18d50000000000fa01aa1101a00082a0008e01000a0000000002d0024098003600000000003901b000000000003901aa00000000003901aa000102cb0006007fcdff008006007fcdff0080070060ce00010180070060ce00010180070060ce00010180070060ce00010180070060ceff01c180070060ceff01c180070060ceff01c180070060ceff01c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180120460f80007c0fa00020f8c38dd000207c180120460f80007c0fa00020f8c38dd000207c180150360f80006fd000006fe00020c0018dd000207c180150360f80006fd000006fe00020c0018dd000207c180170f60f800060cc7878ccf87807c0c1c183cde000207c180170f60f800060cc7878ccf87807c0c1c183cde000207c180170f60f80007878cccccc60cc0cc0f0c1866de000207c180170f60f80007878cccccc60cc0cc0f0c1866de000207c180170f60f80006030fcc0cc60fc0cc0c0c187ede000207c180170f60f80006030fcc0cc60fc0cc0c0c187ede000207c180170f60f80006078c0cccc6cc00cc0c0c1860de000207c180170f60f80006078c0cccc6cc00cc0c0c1860de000207c180170f60f80007ccc78787c387807c0c1e3c3cde000207c180170f60f80007ccc78787c387807c0c1e3c3cde000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180230160f8fb000f0c7800078000000380000067c0000006fe000306000060ed000207c180230160f8fb000f0c7800078000000380000067c0000006fe000306000060ed000207c180261760f800000ff0000018cc000cc0000001800000c660000006fe0003060000c0ed000207c180261760f800000ff0000018cc000cc0000001800000c660000006fe0003060000c0ed000207c180261e60f80000300ffc0030c0780c07dfc7c183c3c18663c7c3c7cfe1f36663c180ed000207c180261e60f80000300ffc0030c0780c07dfc7c183c3c18663c7c3c7cfe1f36663c180ed000207c180251460f800003000030060c0cc078cdb666186660307c6fe66056db33386c603ec000207c180251460f800003000030060c0cc078cdb666186660307c6fe66056db33386c603ec000207c180250760f8000fffffc300fec01200ccdb666187e3c60667e666066db3330783c6ec000207c180250760f8000fffffc300fec01200ccdb666187e3c60667e666066db3330783c6ec000207c180251d60f800030000330180cccc0cccdb666186006c06660666666db33306c06cec000207c180251d60f800030000330180cccc0cccdb666186006c06660666666db33306c06cec000207c180250e60f80000c0000f01007878c787db67fec30bc807c3c663c66db1f30663c8ec000207c180250e60f80000c0000f01007878c787db67fec30bc807c3c663c66db1f30663c8ec000207c180120660f800003ffffffa000006dd000207c180120660f800003ffffffa000006dd000207c18098003600390000007201b000390000007201aa00390000007201aa0001090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c180230660f8000800ffc0ec000718030030000001c0fe000301f0c006fc0005e0000007c180230660f8000800ffc0ec000718030030000001c0fe000301f0c006fc0005e0000007c180260960f8000800c03c00f8c6ef0007180cc03000000380fe000301980006fc000570000007c180260960f8000800c03c00f8c6ef0007180cc03000000380fe000301980006fc000570000007c180270960f8000800c03f00c006ef000018fe300300000380fe00040199c3c660fd000570000007c180270960f8000800c03f00c006ef000018fe300300000380fe00040199c3c660fd000570000007c180280a60f8000800c00300c1c7c0f0000718c00c3000000380fe00040198c606c0fd000570000007c180280a60f8000800c00300c1c7c0f0000718c00c3000000380fe00040198c606c0fd000570000007c180280a60f8000800c00300f0c660f000071bf03f3000000380fe00040198c3c780fd000570000007c180280a60f8000800c00300f0c660f000071bf03f3000000380fe00040198c3c780fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe00040198c066c0fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe00040198c066c0fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe000401f1e3c660fd000570000007c180280a60f8000800c00300c0c660f0000018fe300300000380fe000401f1e3c660fd000570000007c180200a60f8000800ffff00c1e7c0f0000018fe3003000001c0f50005e0000007c180200a60f8000800ffff00c1e7c0f0000018fe3003000001c0f50005e0000007c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c180150660f8000800ffc0ec00031ffffff0ee000207c180150660f8000800ffc0ec00031ffffff0ee000207c1801b0860f8000800c03c0078fe000060f2000318000030ee000207c1801b0860f8000800c03c0078fe000060f2000318000030ee000207c1801b0c60f8000800c03f003000003060f2000318000030ee000207c1801b0c60f8000800c03f003000003060f2000318000030ee000207c1801b0c60f8000800c0030031fc3e7c7cf2000318000030ee000207c1801b0c60f8000800c0030031fc3e7c7cf2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663066f2000318000030ee000207c1801b0c60f8000800c0030031b6663666f2000318000030ee000207c1801b0c60f8000800c0030031b6663666f2000318000030ee000207c1801b0c60f8000800ffff0079b63e1c66f2000318000030ee000207c1801b0c60f8000800ffff0079b63e1c66f2000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f8000fe9ff03f8000030ee000207c180120360f8000fe9ff03f8000030ee000207c180150660f8000fff003fecff03f8000030ee000207c180150660f8000fff003fecff03f8000030ee000207c180190a60f8000fff3fc3ff07ff3ff0ff03f8000030ee000207c1809800360072000000ab01b00072000000ab01aa0072000000ab01aa0001190a60f8000fff3fc3ff07ff3ff0ff03f8000030ee000207c1801f0860f8000fff3fc0ff33eeff03f8000030fe000007f6ff00f8fe000207c1801f0860f8000fff3fc0ff33eeff03f8000030fe000007f6ff00f8fe000207c180230c60f8000fff3ffcff3326301e1ff2ff03f8000030fe0000f8f6000607c0000007c180230c60f8000fff3ffcff3326301e1ff2ff03f8000030fe0000f8f6000607c0000007c180230c60f8000fff3ffcff071f324ccff2ff07f80000300000078ff6ff06fc78000007c180230c60f8000fff3ffcff071f324ccff2ff07f80000300000078ff6ff06fc78000007c180230c60f8000fff3ffcff3f3f324c0ff2ff07f800003000000e78f60006079c000007c180230c60f8000fff3ffcff3f3f324c0ff2ff07f800003000000e78f60006079c000007c180260b60f8000fff3ffcff3f3f324cf1ff07f800003000001dc0fe000101e0fa0005ee000007c180260b60f8000fff3ffcff3f3f324cf1ff07f800003000001dc0fe000101e0fa0005ee000007c180270c60f8000fff0000ff3f3e124e1ff2ff07f800003000003b80fe00010330fa000577000007c180270c60f8000fff0000ff3f3e124e1ff2ff07f800003000003b80fe00010330fa000577000007c180210360f8000fe9ff07f800003000003b80fe00040333e1e3e0fd000577000007c180210360f8000fe9ff07f800003000003b80fe00040333e1e3e0fd000577000007c180210360f80008e900071800003000003b80fe000003fe330030fd000577000007c180210360f80008e900071800003000003b80fe000003fe330030fd000577000007c180240660f8000800ffc0ec00071800003000003b80fe0004033333f330fd000577000007c180240660f8000800ffc0ec00071800003000003b80fe0004033333f330fd000577000007c180260860f8000800c03c0078ee00071800003000003b80fe00040333330330fd000577000007c180260860f8000800c03c0078ee00071800003000003b80fe00040333330330fd000577000007c180260860f8000800c03f00ccee00071800003000003b80fe000401e3e1e330fd000577000007c180260860f8000800c03f00ccee00071800003000003b80fe000401e3e1e330fd000577000007c180270d60f8000800c00300c07cc63e3e3cf300071800003000001dc0fd000003fa0005ee000007c180270d60f8000800c00300c07cc63e3e3cf300071800003000001dc0fd000003fa0005ee000007c180230a60f8000800c0030078ccc6fe66f300071800003000000e78f60006079c000007c180230a60f8000800c0030078ccc6fe66f300071800003000000e78f60006079c000007c180240d60f8000800c003000ccc6c66667ef30007180000300000078ff6ff06fc78000007c180240d60f8000800c003000ccc6c66667ef30007180000300000078ff6ff06fc78000007c180240d60f8000800c00300cccc6c663e60f3000318000030fe0000f8f6000607c0000007c180240d60f8000800c00300cccc6c663e60f3000318000030fe0000f8f6000607c0000007c180240d60f8000800ffff00787c383e463cf3000318000030fe000007f6ff00f8fe000207c180240d60f8000800ffff00787c383e463cf3000318000030fe000007f6ff00f8fe000207c180160360f80008f900003cf2000318000030ee000207c180160360f80008f900003cf2000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801e0360f80008e9000718000030000001c0fe00011e1cfa0005e0000007c1801e0360f80008e9000718000030000001c0fe00011e1cfa0005e0000007c1801e0360f80008e900071800003000000380fe0001330cfa000570000007c1801e0360f80008e900071800003000000380fe0001330cfa000570000007c180200360f80008e900071800003000000380fe0001300cfe1efd000570000007c180200360f80008e900071800003000000380fe0001300cfe1efd000570000007c180210360f80008e900071800003000000380fe0004300c333033fd000570000007c180210360f80008e900071800003000000380fe0004300c333033fd000570000007c180210360f80008e900071800003000000380fe0004300c331e3ffd000570000007c180210360f80008e900071800003000000380fe0004300c331e3ffd000570000007c180210360f80008e900071800003000000380fe0004330c330330fd000570000007c180210360f80008e900071800003000000380fe0004330c330330fd000570000007c18098003600ab000000e401b000ab000000e401aa00ab000000e401aa00011d0360f80008e900071800003000000380fe00fc1efd000570000007c1801d0360f80008e900071800003000000380fe00fc1efd000570000007c180190360f80008e9000718000030000001c0f50005e0000007c180190360f80008e9000718000030000001c0f50005e0000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe000078f600060780000007c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e9000318000030ee000207c180120360f80008e900031ffffff0ee000207c180120360f80008e900031ffffff0ee000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e9000318000030fe00000ff6ff00fcfe000207c1801a0360f80008e90003183ff030fe000078f600060780000007c1801a0360f80008e90003183ff030fe000078f600060780000007c180220360f80008e9000018fe3007000001c0000001e0fe000101c0fe0005e0000007c180220360f80008e9000018fe3007000001c0000001e0fe000101c0fe0005e0000007c180210360f80008e9000018fe30070000038000000330fd0000c0fe000570000007c180210360f80008e9000018fe30070000038000000330fd0000c0fe000570000007c180220360f80008e9000018fe300c0000038000000301f3e1e1e0c0fe000570000007c180220360f80008e9000018fe300c0000038000000301f3e1e1e0c0fe000570000007c180220360f80008e9000b1bf03f300000038000000303fe330130c0fe000570000007c180220360f80008e9000b1bf03f300000038000000303fe330130c0fe000570000007c180220360f80008e9001018c00c300000038000000303333303f0c0fe000570000007c180220360f80008e9001018c00c300000038000000303333303f0c0fe000570000007c180210360f80008e9000018fe300600000380000003fd330100c0fe000570000007c180210360f80008e9000018fe300600000380000003fd330100c0fe000570000007c180220360f80008e90010180cc03000000380000001e1f331e1e1e0fe000570000007c180220360f80008e90010180cc03000000380000001e1f331e1e1e0fe000570000007c180190360f80008e9000718030030000001c0f50005e0000007c180190360f80008e9000718030030000001c0f50005e0000007c1801a0360f80008e9000318000030fe000078f600060780000007c18098003600e4000000fa01b000e4000000fa01aa00e4000000fa01aa00011a0360f80008e9000318000030fe000078f600060780000007c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180170360f8000fe6ff00f0fe00000ff6ff00fcfe000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180090160f8d0000207c180070060ceff01c180070060ceff01c180070060ceff01c180070060ceff01c180070060ce00010180070060ce00010180070060ce00010180070060ce0001018006007fcdff008006007fcdff008002cb00a0008fa00083ff}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par To execute a file, simply open it.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Execute Options...}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Execute Options...\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 execute options command\bxe }}}{\fs20 The Execute Options command allows you to set certain characteristics that effect the Execute command and programs with debug code that are executed from the shell window.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1045{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw550\pich228\picwgoal11000\pichgoal4560\macpict\bliptag1419490931\blipupi72{\*\blipuid 549bb67394fb45731626b32c5d7f3e5b}0fa20000000000e402261101a00082a0008e01000a0000000003080280980046000000000094022800000000009402260000000000940226000102bb0007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80018007febff01f07ffbff000ffcff04f9fc3ffffce7ff01f80018007febff01f07ffbff000ffcff04f9fc3ffffce7ff01f80019007febff00f3fdff03f3fffe67fcff03f9f99ffce6ff01f80019007febff00f3fdff03f3fffe67fcff03f9f99ffce6ff01f80020007febff15f3e670f0e660f0fe7f0c0603c183c1f9983838f0e0f0eaff01f80020007febff15f3e670f0e660f0fe7f0c0603c183c1f9983838f0e0f0eaff01f80020007febff0bf0f0e6666673e67e7e649249fe9906f9999cfce66667eaff01f80020007febff0bf0f0e6666673e67e7e649249fe9906f9999cfce66667eaff01f80020007febff0bf3f9e067e673e07e7e649249fe9906f9999cfce66670eaff01f80020007febff0bf3f9e067e673e07e7e649249fe9906f9999cfce66670eaff01f80021007febff0bf3f0e7e6667267fe66649249fe9907f9999c9ce6667e7febff01f80021007febff0bf3f0e7e6667267fe66649249fe9907f9999c9ce6667e7febff01f80020007febff15f06670f0f078f0ff0f0c9249c199c1fc383e3870e670eaff01f80020007febff15f06670f0f078f0ff0f0c9249c199c1fc383e3870e670eaff01f8000b007fdbff00f9e5ff01f8000b007fdbff00f9e5ff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f80007007fbeff01f800070060be00011800070060be00011800070060be00011800070060be00011800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800110360f801e0fc00020c0c06ca00027c1800110360f801e0fc00020c0c06ca00027c1800100360f80330fc00010c0cc900027c1800100360f80330fc00010c0cc900027c1800160e60f80301e7f3f87cf87c0c0e3e1e30cd00027c1800160e60f80301e7f3f87cf87c0c0e3e1e30cd00027c1800150660f8030336db6cfecc030c063333cc00027c1800150660f8030336db6cfecc030c063333cc00027c1800150660f8030336db6cfecc030c06333fcc00027c1800150660f8030336db6cfecc030c06333fcc00027c1800150660f8033336db6cfecc030c063330cc00027c1800150660f8033336db6cfecc030c063330cc00027c1800160e60f801e1e6db6c7ccc7c0fcf331e30cd00027c1800160e60f801e1e6db6c7ccc7c0fcf331e30cd00027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f83fc2ff03f07c18000b0260f83fc2ff03f07c18000b0260f830c20003307c18000b0260f830c20003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000c0360f83080c30003307c18000b0260f830c20003307c18000b0260f830c20003307c18000b0260f83fc2ff03f07c18000b0260f83fc2ff03f07c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f807c2ff03807c18000b0260f807c2ff03807c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800180160f8f300011ff0fa000101fff60001ff80e600027c1800180160f8f300011ff0fa000101fff60001ff80e600027c1800200160f8f30003e00e00f0fc00040e00e01f80fa00040700700780e800027c1800200160f8f30003e00e00f0fc00040e00e01f80fa00040700700780e800027c18002a0460f803e003fe000320800180fe0004030fe18198fc000330001806f9000418000c0cc6e800027c18002a0460f803e003fe000320800180fe0004030fe18198fc000330001806f9000418000c0cc6e800027c1800320460f8033003fe000331800180fe0005063ff8c180f0fd000760000c061b1f1e1efd00073000060c0f878f80eb00027c1800320460f8033003fe000331800180fe0005063ff8c180f0fd000760000c061b1f1e1efd00073000060c0f878f80eb00027c1800311460f80331e3e331f03b8f0f8f180000067ffcc1b998fd000460000c061cfe33fd000730000607860cccc0eb00027c1800311460f80331e3e331f03b8f0f8f180000067ffcc1b998fd000460000c061cfe33fd000730000607860cccc0eb00027c1800310260f803fd3301303ffe9908800000063ff8c19998fd000760000c061833303ffd000730000600c60fccc0eb00027c1800310260f803fd3301303ffe9908800000063ff8c19998fd000760000c061833303ffd000730000600c60fccc0eb00027c1800321460f80333f33333303599999f800000030fe1819998fd00073000180618333330fd000718000c0cc6cc0cc0eb00027c1800321460f80333f33333303599999f800000030fe1819998fd00073000180618333330fd000718000c0cc6cc0cc0eb00027c1800310b60f80333033331f031999998fd0004e00e00f0f0fd00070e00e006181f1e1efd00070700700783878f80eb00027c1800310b60f80333033331f031999998fd0004e00e00f0f0fd00070e00e006181f1e1efd00070700700783878f80eb00027c1800270c60f803e1e3e1f230318f0f8f18fe00011ff0fa000101fff60001ff80fe00000cea00027c1800270c60f803e1e3e1f230318f0f8f18fe00011ff0fa000101fff60001ff80fe00000cea00027c18000e0160f8fd000101e0c600027c18000e0160f8fd000101e0c600027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18009800460094000000e402280094000000e402260094000000e402260001090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000b0260f807c2ff03807c18000b0260f807c2ff03807c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c18000f0360f80000fdff0080c700027c18000f0360f80000fdff0080c700027c18000f0360f8001ffd00007cc700027c18000f0360f8001ffd00007cc700027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c18001d0960f80770003c63000770fe000270003cfd000238000ed500027c18001d0960f80770003c63000770fe000270003cfd000238000ed500027c18001d0960f80770006666000770fe0002700066fd000218000ed500027c18001d0960f80770006666000770fe0002700066fd000218000ed500027c18001e0960f8077000666c000770fe00097000603e7c3c3c18000ed500027c18001e0960f8077000666c000770fe00097000603e7c3c3c18000ed500027c18001d0960f80770006678000770fe0002700060fd660218000ed500027c18001d0960f80770006678000770fe0002700060fd660218000ed500027c18001e0960f8077000666c000770fe00097000606666607e18000ed500027c18001e0960f8077000666c000770fe00097000606666607e18000ed500027c18001d0960f80770006666000770fe00017000fd66036018000ed500027c18001d0960f80770006666000770fe00017000fd66036018000ed500027c18001e0960f80770003c63000770fe000470003c3e66fe3c01000ed500027c18001e0960f80770003c63000770fe000470003c3e66fe3c01000ed500027c1800180360f80770fd00010770fe000070f900000ed500027c1800180360f80770fd00010770fe000070f900000ed500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f803b8fd00010ee0fe000038f900001cd500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f801cffd000179c0fe00000ff90000f0d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c1800180360f800f1fdff01c780fe000001f9ff0080d500027c18000f0360f8001ffd00007cc700027c18000f0360f8001ffd00007cc700027c18000f0360f80000fdff0080c700027c18000f0360f80000fdff0080c700027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800090160f8c000027c1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800080060bfff02fc1800070060be00011800070060be00011800070060be00011800070060be0001180007007fbeff01f80007007fbeff01f80002bb00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The command line is passed to the program as if it were typed from the shell window.  Be sure and include the name of the program, since the program will expect to find the name.  Do not use I/O redirection, piping, or multiple commands on one line.\par The "Debug Mode" radio buttons tell the debugger how to execute the program.  The three starting modes start the program at full speed ("Go"), in trace mode ("Trace") or in single-step mode ("Step").  If the program was compiled with debug code off, the setting of these buttons is ignored.\par }\pard \widctlpar\adjustright {\*\bkmkend bk12}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run menu\bxe }{\rxe bk12}}}{\v\fs20 \par }{\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Debug Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Debug Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx5580\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 The Debug menu contains commands that allow you to operate the source-level debugger.  All of the source-level debug options require the compiler to generate special debug code}{\pard\plain \qj\fi360\widctlpar\intbl\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 .  Many compilers support the +d flag to generate this debug code.  If they do not, these debugging options cannot be used.  Chapter 4 has information about debugging desktop programs, as well as a tutorial on the debugger itself.}{\v\fs20 \cell }\pard \qr\widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1046{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw211\pich248\picwgoal4220\pichgoal4960\macpict\bliptag-540904951\blipupi72{\*\blipuid dfc27209380d6d4c23c3ef235c2deae4}0ebf0000000000f800d31101a00082a0008e01000a000000000308028098001c0000000000f800d80000000000f800d30000000000f800d3000102e50008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed0008007ffbff0080ed000b037fc1ffcffeff0080ed000b037fc1ffcffeff0080ed000b037fccffcffeff0080ed000b037fccffcffeff0080ed000b077fcce1c1cce0ff80ed000b077fcce1c1cce0ff80ed0009007ffccc01ff80ed0009007ffccc01ff80ed000b027fccc0fecc01ff80ed000b027fccc0fecc01ff80ed000b077fcccfcccce0ff80ed000b077fcccfcccce0ff80ed000b077fc1e1c1e0dcff80ed000b077fc1e1c1e0dcff80ed000a007ffdff02e1ff80ed000a007ffdff02e1ff80ed0008007ffbff0080ed0008007ffbff0080ed0008007fe9ff00fcff0008007fe9ff00fcff00080060e900000cff00080060e900000cff00080060e900000cff00080060e900000cff000c0260003ced0004061e0fc0000c0260003ced0004061e0fc0000d0360006630ee000404180fc0000d0360006630ee000404180fc0000f056000607c3c7cf000041b180fc0000f056000607c3c7cf000041b180fc0000f0560003c306666f0000421980fc0000f0560003c306666f0000421980fc0000f05600006307e66f0000421180fc0000f05600006307e66f0000421180fc0000f05600066366066f0000425980fc0000f05600066366066f0000425980fc0000f0560003c1c3c7cf000041b180fc0000f0560003c1c3c7cf000041b180fc0000d0060fd000060ef00031e0fc0000d0060fd000060ef00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fe00010544fd000004f7000404000fc0001502600014fe00010544fd000004f7000404000fc000130360002220fe000082fd000008f500020fc000130360002220fe000082fd000008f500020fc000160c60004054145401054445044545f7000411000fc000160c60004054145401054445044545f7000411000fc000170960002820222200822208fe880080f80004208a8fc000170960002820222200822208fe880080f80004208a8fc000170960000410544401044404fe440040f8000401000fc000170960000410544401044404fe440040f8000401000fc000170d6000222220220082220888828880f8000420800fc000170d6000222220220082220888828880f8000420800fc00017016000fe1408540104440505404440f8000411000fc00017016000fe1408540104440505404440f8000411000fc000110060fd000020fc00010280f500020fc000110060fd000020fc00010280f500020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260007eed0004061e0fc0000c0260007eed0004061e0fc0000c02600018ed000404060fc0000c02600018ed000404060fc00010066000186c7c7878f100041b060fc00010066000186c7c7878f100041b060fc0000f0360001870feccf1000421860fc0000f0360001870feccf1000421860fc000100660001860ccc0fcf1000421060fc000100660001860ccc0fcf1000421060fc000100660001860ccccc0f1000425860fc000100660001860ccccc0f1000425860fc0001006600018607c7878f100041b060fc0001006600018607c7878f100041b060fc000090060ea00031e0fc000090060ea00031e0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000c0260003ced0004060c0fc0000c0260003ced0004060c0fc0000c02600066ed0004040c0fc0000c02600066ed0004040c0fc0000d036000603cee00041b0c0fc0000d036000603cee00041b0c0fc0000d0360006e66ee000421800fc0000d0360006e66ee000421800fc0000d0360006666ee000421000fc0000d0360006666ee000421000fc0000d0360006666ee000425800fc0000d0360006666ee000425800fc0000d0360003c3cee00041b000fc0000d0360003c3cee00041b000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001502600014fd000044fe00010540f7000404000fc0001502600014fd000044fe00010540f7000404000fc000150d6000220002000022000020022002f600020fc000150d6000220002000022000020022002f600020fc0001a106000401405414054144454044145444445fb000411150fc0001a106000401405414054144454044145444445fb000411150fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b1160002a220202202a22282002822202220880fc000420800fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600044440104404454101004454104440440fc000401150fc0001b11600022220222202220282202220222220880fc000420800fc0001b11600022220222202220282202220222220880fc000420800fc0001b0b600014140141404014441404fe4102440440fc000411000fc0001b0b600014140141404014441404fe4102440440fc000411000fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000a02600014eb00020fc0000a02600014eb00020fc0000b0360002220ec00020fc0000b0360002220ec00020fc0000d05600040541454ee00020fc0000d05600040541454ee00020fc0000d05600028202222ee00020fc0000d05600028202222ee00020fc0000d05600004104444ee00020fc0000d05600004104444ee00020fc0000b016000fd22ee00020fc0000b016000fd22ee00020fc0000d016000fe140054ee00020fc0000d016000fe140054ee00020fc0000c0060fd000020ee00020fc0000c0060fd000020ee00020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0000f0760007c000038c380f000020fc0000f0760007c000038c380f000020fc0000f076000660000600180f000020fc0000f076000660000600180f000020fc00010086000666c78f9c183c0f100020fc00010086000666c78f9c183c0f100020fc000100860007c70cc60c18660f100020fc000100860007c70cc60c18660f100020fc000100860006060cc60c187e0f100020fc000100860006060cc60c187e0f100020fc0000f0760006060cc60c186f000020fc0000f0760006060cc60c186f000020fc0001008600060607861e3c3c0f100020fc0001008600060607861e3c3c0f100020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760003c0000063c38fe00080f8000001801f000c0fe000406198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d0760006600300c6618fe00100cc00000180198000003000004198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b6000603c7c1860183c3e6c0ccd8f0f998198f1c7c7c0001b198fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b60003c66303060186666700f8e19999b01f198c6630000219f8fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000067e306060187e66600ccc1f999e018198c663000021198fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d1b6000666036c066186066600ccc18199b018198c663600025998fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc0001d0560003c3c1c80fe3c123e600f8c0f0f998180f1e661c0001b198fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760003c0000063c38fe00010780fe00010780fc000406198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001b0760006600300c6618fe00060cc00600000cc0fc000404198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c126000603c7c1860183c3e6c0ccccf87800c0780fd00041b198fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c1260003c66303060186666700cccc60ccfcdccc0fd000421998fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000067e306060187e66600fccc60cc00cccc0fd000421198fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c126000666036c066186066600cccc6ccc00cccc0fd000425998fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc0001c0560003c3c1c80fe3c093e600cc7c38780078780fd00041b0f0fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc000080060e900020fc00007007fe8ff01c00007007fe8ff01c000070003e8ff01c000070003e8ff01c00002e500a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Step}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Step\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command\bxe }}}{\fs20 When you select Step, Trace, or Go, the first thing that happens is the system checks to see if the program in the front window has been compiled.  If not, the front window is compiled to memory, and then executed in the selected debug mode.  If the program has already been compiled, the disk copy of the program is loaded and executed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 When you select the Step command, your program starts executing, but stops when it gets to the first executable line.  A small arrow appears in the source window, pointing to the line that will be executed next.  At this point, you can use any of the debugging commands.\par Repeated use of the Step command steps through your program, one line at a time.  As this happens, the arrow pointing to the current line will be updated.  Using this method, you can actually watch your program execute, quickly locating problem spots.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window\bxe }}}{\fs20 If you are using a Variables window, all variable values in the window are updated after each Step command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Step Through}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Step Through\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step through command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 If you encounter a function call while you are stepping through a program using the Step command, you will step right into the function, executing its commands one by one until it returns to the subroutine which called it.  Many times, you do not want to step through each line of the subroutine.  Instead, you would rather concentrate on one function, assuming that the subroutines called work correctly.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 The Step Through command helps you do this.  It works exactly like the Step command until you come to a line with a function call.  On those lines, the function is executed at full speed.  Execution of the stepped-through subroutine will be terminated if a run-time error is detected, a break point is encountered, or the Stop command is selected from the Debug menu.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Trace}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Trace\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables window}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 step command}}}{\fs20 When you use the Trace command, the program starts stepping automatically.  The Variables window still gets updated after each line is executed, and you can still watch the flow of the program as the arrow moves through each line that is executed.  At any time, you can use the Step command to stop the trace.  That does not stop the execution of the program; it only pauses, waiting for the next debug command.  Step, Step Through, Trace, Go, Go to Next Return, and Stop can all be used.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command\bxe }}}{\fs20 \par If you want to pause during a trace, move the cursor to the right side of the menu bar}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 menu bar}}}{\fs20  and hold the mouse button down.  Program execution will cease until you let up on the mouse button.  As soon as you release the mouse button, the trace will resume.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Go}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Go\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 go command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command}}}{\fs20 When you select the Go command, your program starts executing at full speed.  It will continue executing until it is finished, a break point is reached, or the Stop command is issued.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Go to Next Return}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Go to Next Return\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command is used to allow a subroutine to run to completion.  If you have been stepping or tracing through a subroutine, and you get to a point where you do not need to watch the remainder of the subroutine execute, simply use the Go to Next Return command.  The program will execute at full speed until the end of the subroutine.  You will end up in step mode, with the debugging arrow pointing to the line in the source window which comes after the line which called the subroutine.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 goto next return command\bxe }}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Stop}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Stop\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 stop command\bxe }}}{\fs20 The Stop command terminates execution of the program.  Any program that was compiled with debugging turned on can be stopped this way, whether or not it was started using the debug commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Profile}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Profile\tcl3}}}{\b \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profile command\bxe }}}{\fs20 The Profile command helps you find the functions where your program is spending the most time.  It returns the following three statistics about the execution of your program:  the number of times each subroutine and main program was called; the number of heartbeats that occurred during each subroutine and main program; the percent of heartbeats for each subroutine and main program as a function of the total number of heartbeats generated during the entire execution.\par The Profiler is a routine which is installed into the heart-beat interrupt handler of the computer.  It maintains a stack of pointers to profiling information.  Upon entry to a new subroutine, the subroutine's name is added to the stack, and profiling counters are incremented.  When entering a subroutine which is already included in the stack, the pointer to the subroutine's information is accessed and the appropriate counters are incremented.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profiler}}}{\fs20 The information returned by Profile can be quite accurate for some programs, but be somewhat misleading for others.  The Profiler works by counting heartbeats.  A heartbeat occurs 60 times each second.  Each time a heartbeat occurs, the heartbeat counter for the current subroutine is incremented.  If the subroutines in your program are very short, they may not take enough CPU time for a heartbeat to occur.  If the program runs for a long time, the impact of this problem is reduced.  Counting heartbeats is, after all, a statistical process.  The larger your sample, the better the results will be.\par Another potential problem area is disabling interrupts.  Heartbeats are interrupts \endash  disabling interrupts stops the process of counting heartbeats.  The most common culprit is GS/OS, which disables interrupts while reading and writing to the disk.\par To obtain the best results from the Profiler, then, use it on a long execution.  Be suspicious of statistics for programs that have very short, fast subroutines, or that perform lots of disk I/O.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Set/Clear Break Points}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Set/Clear Break Points\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 set/clear break points command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 break points}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 Break points are used when you want to execute up to some predetermined place in your program, then pause.  For example, if you know that the first 500 lines of your program are working correctly, but you need to step through the 20 lines after that, it would take a great deal of time to get to the suspected bug using the Step or Trace commands.  You can, however, set a break point.  You would start by setting a break point at line 500, then execute the program using one of the Compile commands.  When your program reached line 500, execution would stop, and the arrow marker would point to line 500.  You could then use the debug commands to examine the area of interest.\par There is no limit to the number of break points that can be placed in a compiled program.\par To set a break point in a compiled program, start by selecting the line or lines in the source window where a break point is to occur.  With the lines selected, apply the Set/Clear Break Point command.  A purple X will appear to the left of the line, indicating that the line has a break point.\par To remove an existing break point, select the line and use the Set/Clear Break Point command again.  The X that indicates a break point will vanish.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Set/Clear Auto-Go}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Set/Clear Auto-Go\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There may be places in your program that you always want the Step and Trace commands to skip.  That is where the Set/Clear Auto-Go command is used.  Any lines that have been set for auto-go will execute at full speed, even if you are using the Step and Trace commands.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auto-go command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 trace command}}}{\fs20 \par To mark lines for auto-go, select the lines and then invoke this command.  A green spot will appear to the left of the selected lines.  To clear auto-go, select the lines and apply the command again.\par A line cannot be marked for both auto-go and as a break point.  If you select a line for auto-go, any existing break point is removed.  Similarly, marking a line for a break point will remove its auto-go status.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Languages Menu}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Languages Menu\tcl2}}}{\b\fs28 \par }\trowd \trgaph180\trleft-180 \clvertalt\cltxlrtb \cellx6660\clvertalt\cltxlrtb \cellx8100\pard \qj\keepn\widctlpar\intbl\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\intbl\adjustright {\fs20 The Languages menu shows all of the languages installed on your system.  It changes when you install or delete a programming language.  You can use this menu to find out what language is associated with a particular file, or to change the language.\par Under ORCA, all source and data files are associated with a language.  The system uses the underlying language stamp to call the appropriate compiler or assembler when you issue a compile command for a source file.\cell }\pard \widctlpar\intbl\adjustright {{\pict{\*\picprop\shplid1047{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw96\pich248\picwgoal1920\pichgoal4960\macpict\bliptag1539573551\blipupi72{\*\blipuid 5bc4072fb4b33f59bc7a98be2b67ebde}09ff0000000000f800601101a00082a0008e01000a0000000002d0024098000c0000000000f800600000000000f800600000000000f80060000102f50007007ff8ff01800007007ff8ff01800007007ff8ff01800007007ff8ff01800007007ff8ff01800007007ff8ff01800007007cf8ff01800007007cf8ff01800007007cf8ff01800007007cf8ff0180000d0b7cfe0c1e0cce0e0e1e1f80000d0b7cfe0c1e0cce0e0e1e1f800009017cfcfacc02ff800009017cfcfacc02ff80000a017cfcfbcc030e1f80000a017cfcfbcc030e1f80000d0b7cfcccce0cccce0cffcf80000d0b7cfcccce0cccce0cffcf80000d0b7c0e0ccdce0e0dce1e1f80000d0b7c0e0ccdce0e0dce1e1f80000d0b7ffffffe1ffffe1fffff80000d0b7ffffffe1ffffe1fffff800007007ff8ff01800007007ff8ff01800006007ff7ff00c006007ff7ff00c0060060f70000c0060060f70000c0060060f70000c0060060f70000c00c066001e30001c1c0fd0000c00c066001e30001c1c0fd0000c00c066003330000c0c0fd0000fc0c066003330000c0c0fd0000fc0c06600303e1e0c0c0fd0000fc0c06600303e1e0c0c0fd0000fc0c066001e33330c0c0fd0000fc0c066001e33330c0c0fd0000fc0c0660003333f0c0c0fd0000fc0c0660003333f0c0c0fd0000fc0c066003333300c0c0fd0000fc0c066003333300c0c0fd0000fc0c066001e331e1e1e0fd0000fc0c066001e331e1e1e0fd0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc06007ff7ff00fc06007ff7ff00fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0d0b6001e1e208f1f0f060f000fc0d0b6001e1e208f1f0f060f000fc0d0b6003333319818199e18000fc0d0b6003333319818199e18000fc0d0b60033303b9f1f19861f000fc0d0b60033303b9f1f19861f000fc0d0b600331e3f99818f0619800fc0d0b600331e3f99818f0619800fc0d0b6003f03359981998619800fc0d0b6003f03359981998619800fc0d0b6003333319999998619800fc0d0b6003333319999998619800fc0d0b600331e318f0f0f1f8f000fc0d0b600331e318f0f0f1f8f000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc09036001e1e0fa0000fc09036001e1e0fa0000fc090360033330fa0000fc090360033330fa0000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc0802600303f90000fc090360033330fa0000fc090360033330fa0000fc09036001e1e0fa0000fc09036001e1e0fa0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b016003fde100e0fd0000fc0b016003fde100e0fd0000fc0c066003333330c330fd0000fc0c066003333330c330fd0000fc0b056003333300c3fc0000fc0b056003333300c3fc0000fc0b056003e331e0c3fc0000fc0b056003e331e0c3fc0000fc0b05600333f030c3fc0000fc0b05600333f030c3fc0000fc0c066003333330c330fd0000fc0c066003333330c330fd0000fc0c066003e331e1e1e0fd0000fc0c066003e331e1e1e0fd0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b016003fde100e3fd0000fc0b016003fde100e3fd0000fc09016003fc33fd0000fc09016003fc33fd0000fc0c0060fe3302030333fd0000fc0c0060fe3302030333fd0000fc0c066063e331e30333fd0000fc0c066063e331e30333fd0000fc0c0664c303f03303f3fd0000fc0c0664c303f03303f3fd0000fc0a02638303fd33fd0000fc0a02638303fd33fd0000fc0d0761030331e1e333f0fe0000fc0d0761030331e1e333f0fe0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0d07600301e23319f3e0fe0000fc0d07600301e23319f3e0fe0000fc0d07600300c333318330fe0000fc0d07600300c333318330fe0000fc0d07600300c3b3618330fe0000fc0d07600300c3b3618330fe0000fc0d07600300c3f3c1e330fe0000fc0d07600300c3f3c1e330fe0000fc0d07600300c373618330fe0000fc0d07600300c373618330fe0000fc0d07600300c333318330fe0000fc0d07600300c333318330fe0000fc0d076003f1e31319f3e0fe0000fc0d076003f1e31319f3e0fe0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0d076003e3e1e3e1e1e0fe0000fc0d076003e3e1e3e1e1e0fe0000fc0b016003fc330030fe0000fc0b016003fc330030fe0000fc09016003fc33fd0000fc09016003fc33fd0000fc0d076003e3e3333331e0fe0000fc0d076003e3e3333331e0fe0000fc0d076003036333333030fe0000fc0d076003036333333030fe0000fc0c02600303fd330030fe0000fc0c02600303fd330030fe0000fc0d0760030331e3e1e1e0fe0000fc0d0760030331e3e1e1e0fe0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b056003f3e667e0fc0000fc0b056003f3e667e0fc0000fc0b056000c3066180fc0000fc0b056000c3066180fc0000fc0b056000c303c180fc0000fc0b056000c303c180fc0000fc0b056000c3c18180fc0000fc0b056000c3c18180fc0000fc0b056000c303c180fc0000fc0b056000c303c180fc0000fc0b056000c3066180fc0000fc0b056000c3066180fc0000fc0b056000c3e66180fc0000fc0b056000c3e66180fc0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc0b056003e667c780fc0000fc0b056003e667c780fc0000fc0b05600306660cc0fc0000fc0b05600306660cc0fc0000fc0a04600303c60cfb0000fc0a04600303c60cfb0000fc0a046003c1878cfb0000fc0a046003c1878cfb0000fc0a04600303c60cfb0000fc0a04600303c60cfb0000fc0b05600306660cc0fc0000fc0b05600306660cc0fc0000fc0b056003e667c780fc0000fc0b056003e667c780fc0000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc060060f70000fc06007ff7ff00fc06007ff7ff00fc060001f7ff00fc060001f7ff00fc02f500a0008fa00083ff}}{\cell }\pard \widctlpar\intbl\adjustright {\row }\pard \qj\ri2160\widctlpar\adjustright {\fs20 \par \par }\trowd \clvertalt\cltxlrtb \cellx7920\pard \widctlpar\intbl\brdrt\brdrs\brdrw15 \adjustright {\b Shell}{\b\v ;}{\b \par }\pard \qj\widctlpar\intbl\adjustright {\fs20 \cell }\pard \widctlpar\intbl\adjustright {\fs20 \row }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell command\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 Shell is a special entry, and so is set off from the other names in the Languages menu.  The desktop maintains a window called the shell window, whose corresponding language is the Shell.  You can create a window yourself, by first selecting the New command located in the File menu, and then selecting Shell from the Languages menu.  If you do not create a Shell window, the desktop will create one for you the first time that you compile a program.\par The desktop uses the Shell window to display information about what it is doing.  For example, when you compile a program, the results of compilation are shown in the Shell window.\par You can also use the Shell window to communicate with the ORCA shell.  You can enter any available shell commands, and then press }{\outl\fs18 return}{\fs20 .  The shell will execute the commands and then return to the desktop, displaying any text output in the shell window, as well as using the shell window for prompts and to echo text responses.  See Chapter 8 for a detailed description of the shell.  Chapter 6 has a brief introduction to the shell, describing in more detail how to use the shell from the desktop development environment.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Installed Languages}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Installed Languages\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 languages menu}}}{\fs20 Below the name Shell in the Languages menu is a list of the names of the compilers and assemblers that are currently installed in your desktop system, as well as some names used for other ASCII file types.  Each text window in the desktop will have a language stamp associated with it.  You can pull down the Languages menu to see what language stamp the front window has, or you can select a different language for the front window by selecting the appropriate language from this menu.  The language associated with the front window will be checked.\par There is always one language which is the current language; it is the same as the language of the front window.  When you change the language stamp of the front window, you also change the current system language.  New windows are stamped with the current system language.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 The languages ProDOS, Text, and Exec are special.  A file whose language stamp is ProDOS means that the file contains only ASCII text.  Data files read by a program are typically stamped as ProDOS.  The language Text is reserved for use by text editors.  The language Exec is given to shell script files.  See Chapter 8 for more information about Exec files.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The SYSTABS File}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The SYSTABS File\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20  is located in the SYSTEM prefix of the program disk.  It contains the default settings for tab stops, auto-indent mode, and cursor mode.  It is an ASCII text file that can be opened under the desktop and edited to change the default settings.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tab stop}}}{\fs20 \par }\pard \qj\fi360\widctlpar\tx720\tx1080\tx1440\adjustright {\fs20 Each language recognized by ORCA is assigned a language number.  The SYSTABS file has three kinds of lines associated with each language:\par }\pard \qj\widctlpar\tx720\tx1080\tx1440\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The language number.\par 2.\tab The default settings for the different editing modes. \par 3.\tab The default tab and end-of-line-mark settings.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The first line of each set of lines in the SYSTABS file specifies the language that the next two lines apply to.  ORCA languages can have numbers from 0 to 32767 (decimal).  The language number must start in the first column; leading zeros are permitted and are not significant, but leading spaces are not allowed.\par The second line of each set of lines in the SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\v\fs20  }{\fs20 sets the defaults for various editor modes, as follows:\par }\pard \qj\fi-270\li1170\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab If the first column contains a zero, pressing }{\outl\fs18 return}{\fs20  causes the insertion point to be placed in column one in the next line.  If column one (in the SYSTABS file) contains a one, then pressing }{\outl\fs18 return }{\fs20 aligns the insertion point with the first nonspace character in the next line.  If the line is blank, then the insertion point is aligned with the first nonspace character in the line above.\par 2.\tab The second column is used by the text-based editor to indicate the selection mode.  It is not used by the desktop editor.  It can be either a zero or one.\par 3.\tab The next character indicates the wrap mode.  It is not used by the desktop editor.\par 4.\tab The fourth character is used to set the default cursor mode.  A zero will cause the editor to start out in over strike mode}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 over strike mode}}}{\fs20 .  A one will cause it to start in insert mode}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 .\par 5.\tab The fifth and sixth characters are used by the text based editor.\par }\pard \qj\fi-10\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The third line of each set of lines in the SYSTABS file sets default tab stops.  There are 255 zeros and ones, representing the length of lines under the desktop.  The ones indicate the positions of the tab stops.  A two in any column sets the end of the line.  The column containing the two then replaces column 255 as the default right margin when the editor is set to that language.\par For example, the following lines define the defaults for ORCA/Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\fs20 .  Note that only the first few characters of the tab line are shown; the tab line actually contains 255 characters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\keepn\widctlpar\adjustright {\f6\fs18 272\par 100110\par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 0000000010000000010000000010000000010000000010\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If no defaults are specified for a language (that is, there are no lines in the SYSTABS file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20  for that language), then the editor assumes the following defaults:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\fs20 \bullet \tab }{\outl\fs18 return}{\fs20  sends the cursor to column one.\par \bullet \tab The editor starts in insert mode}{\pard\plain \qj\fi-360\li720\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 insert mode}}}{\fs20 .\par \bullet \tab There is a tab stop every eighth column.\par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab The end of the line is at column 255.\par }\pard \qj\fi-10\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Setting up Defaults}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Setting up Defaults\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 defaults for PRIZM}}}{\fs20 You can tailor your environment on the desktop by setting various options, and saving them.  Then, whenever you run the desktop, your defaults will be automatically loaded, and your desktop will look the same from session to session.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 ORCA always saves information about your environment before it executes an S16 program, to ensure that everything will be as it was after execution.  This allows the environment to be purged while your program executes, then have everything return to its original state when your program finishes.  Automatic rebuilding of your environment saves you time, since you do not have to reopen various files and windows, size them correctly, etc.  It also allows you to quickly remember what you were doing before you left the desktop.\par ORCA records the following information about your current desktop, in a file named PRIZM.TEMP, located in the same prefix as PRIZM:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab The path name of the file displayed in the front window, and that window's size and location on the screen.\par \bullet \tab The setting of the Auto-save flag.\par \bullet \tab Where prefixes 8, 13, and 16 are located.\par \bullet \tab The settings of the compile flags for source listing, symbol table, generation of debug code}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 debug code}}}{\fs20 , and link after compile.\par \bullet \tab The settings of the link flags for source listing, symbol table, saving of the executable file, and file type of the executable file.\par \bullet \tab The setting of the Profile flag.}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 profiler}}}{\fs20 \par \bullet \tab The current language.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Permanent default information is stored in the file named PRIZM.CONFIG, located in the same folder as PRIZM.  The same information listed above is saved.  To set these defaults, use the Save Defaults button from the Compile or Link dialogs.  To return to the system defaults, simply delete the PRIZM.CONFIG file.\par }\pard \widctlpar\adjustright {\*\bkmkend bk13}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desktop development environment}{\rxe bk13}}}{\v\fs20 \par }{\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 8 - The Command Processor\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 8 - The Command Processor\par }{\pard\plain \widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 8 \endash  The Command Processor\tcl1}}}{\fs18 {\*\bkmkstart bk16}\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter will cover the operation of the ORCA Command Processor.  A command processor is an interface between you and the operating system of a computer.  You enter a command on the command line.  The command processor will interpret your command and take some specific action corresponding to your command.  The command processor for ORCA is very powerful.  The features available to you and discussed in this chapter are:\par }\pard \qj\widctlpar\adjustright {\fs18 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab The line editor.\par \bullet \tab Command types.\par \bullet \tab Standard prefixes and file names.\par \bullet \tab EXEC files.\par \bullet \tab Input and output redirection.\par \bullet \tab Pipelines.\par \bullet \tab Command table.\par \bullet \tab Command reference.\par }\pard \widctlpar\adjustright {\fs18 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Line Editor}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Line Editor\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\fs18 {\*\bkmkstart bk14}\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When commands are issued to the shell, they are typed onto the command line using the line editor.  The line editor allows you to:\par }\pard \qj\widctlpar\tx720\adjustright {\fs18 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Expand command names.\par \bullet \tab Make corrections.\par \bullet \tab Recall the twenty most recently issued commands.\par \bullet \tab Enter multiple commands.\par \bullet \tab Use wildcards in file names.\par }\pard \qj\widctlpar\adjustright {\fs18 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Command Name Expansion}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Command Name Expansion\tcl3}}}{\b \par }\pard \qj\keep\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keep\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command expansion}}}{\v\fs20 \par }{\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 It is not necessary to enter the full command name on the command line.  Type in the first few letters of a command (don't use }{\outl\fs18 RETURN}{\fs20 ) and press the }{\outl\fs18 RIGHT-ARROW}{\fs20  key.  It will compare each of the commands in the command table with the letters typed so far.  The first command found that matches all of the characters typed is expanded in the command line.  For example, if you typed:\par }\pard \qj\widctlpar\tx720\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 CO}{\b\outl\f6\fs14 RIGHT-ARROW}{\b\f6\fs18 \par }\pard \qj\widctlpar\tx720\adjustright {\pard\plain \qj\widctlpar\tx720\adjustright \v\f4\fs18\cgrid {\xe {\v\fs18 }{\v\fs18 COMMANDS command}}}{\v\fs18 \par }{\fs18 \par }{\fs20 ORCA would match this with the command COMMANDS, and would complete the command like this:\par }{\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 COMMANDS\par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\b Editing A Command On The Command Line\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The available line-editing commands available are listed in the table below:\par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi-2700\li3150\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3150\adjustright {\fs20 command\tab command name and effect\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:cursor-left command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:cursor-right command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:end-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:start-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:delete-character-left command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:delete-to-end-of-line command}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:insert mode}}}{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:clear-line command}}}{\v\fs20 \par }{\outl\fs14 \par LEFT-ARROW}{\fs18 \tab }{\b\fs18 cursor left}{\fs18  - The cursor will move to the left on the command line.\par \par }{\outl\fs14 RIGHT-ARROW}{\fs18 \tab }{\b\fs18 cursor right}{\fs18  - The cursor will move to the right.  If the cursor is at the end of a sequence of characters which begin the first command on the line, the shell will try to expand the command.\par \par }{\outl\fs14 \u-3\'f0 LEFT-ARROW}{\fs18 \tab }{\b\fs18 word left}{\fs18  - The cursor will move to the start of the previous word.  If the cursor is already on the first character of a word, it moves to the first character of the previous word.\par \par }{\outl\fs14 \u-3\'f0 RIGHT-ARROW}{\fs18 \tab }{\b\fs18 word right}{\fs18  - The cursor will move to the end of the current word.  If the cursor is already on the last character in a word, it moves to the last character in the next word.\par \par }{\outl\fs14 UP-ARROW }{\fs18 or}{\outl\fs18  }{\outl\fs14 DOWN-ARROW}{\fs18 \tab }{\pard\plain \qj\fi-2700\li3150\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command list}}}{\v\fs20 .}{\b\fs18 edit command}{\fs18  - The up and down arrows are used to scroll through the 20 most recently executed commands.  These commands can be executed again, or edited and executed.\par \par }{\outl\fs14 \u-3\'f0}{\fs18 >}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 .}{\outl\fs18 \tab }{\b\fs18 end of line}{\fs18  -  The cursor will move to the right-hand end of the command line.\par \par }{\outl\fs14 \u-3\'f0}{\fs18 <}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 ,}{\outl\fs18 \tab }{\b\fs18 start of line}{\fs18  - The cursor will move to the left-hand end of the command line.\par \par }{\outl\fs14 DELETE}{\fs18 \tab }{\b\fs18 delete character left}{\fs18  - Deletes the character to the left of the cursor, moving the cursor left.\par \par }\pard \qj\fi-2700\li3150\widctlpar\tx1170\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 F or\tab }{\outl\fs14 CTRL}{\fs18 F\tab }{\b\fs18 delete character right}{\fs18  - Deletes the character that the cursor is covering, moving characters from the right to fill in the vacated character position.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \qj\fi-2700\li3150\widctlpar\tx1170\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 Y or\tab }{\outl\fs14 CTRL}{\fs18 Y\tab }{\b\fs18 delete to end of line}{\fs18  - Deletes characters from the cursor to the end of the line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 E or\tab }{\outl\fs14 CTRL}{\fs18 E\tab }{\b\fs18 toggle insert mode}{\fs18  - Allows characters to be inserted into the command line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \fi-2700\li3150\widctlpar\tx1080\tx3150\adjustright {\outl\fs14 \u-3\'f0}{\fs18 Z or\tab }{\outl\fs14 CTRL}{\fs18 Z\tab }{\b\fs18 undo}{\fs18  - Resets the command line to the starting string.  If you are typing in a new command, this erases all characters.  If you are editing an old command, this resets the command line to the original command string.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \qj\fi-2700\li3150\widctlpar\tx990\tx1980\tx3150\adjustright {\outl\fs14 ESC}{\fs18 X or }{\outl\fs14 CLEAR}{\fs18  or }{\outl\fs14 CTRL}{\fs18 X\tab }{\b\fs18 clear command line}{\fs18  - Removes all characters from the command line.\par }\pard \qj\fi-2700\li3150\widctlpar\tx3150\adjustright {\fs18 \par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx1530\tx3150\adjustright {\outl\fs14 RETURN}{\fs18  or }{\outl\fs14 ENTER}{\fs18 \tab }{\b\fs18 execute command}{\fs18  - Issue a command to the shell, and append the command to the list of the most recent twenty commands.\par }\pard \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright {\pard\plain \qj\fi-2700\li3150\keepn\widctlpar\tx3150\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\:execute command}}}{\v\fs20 \par }\pard \qc\widctlpar\tx2880\adjustright {\fs20 \par Table 8.1  Line-Editing Commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The shell normally starts in over strike mode; see the description of the \{Insert\} shell variable to change this default.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prompt}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The shell's command line editor prints a # character as a prompt before it accepts input.  See the description of the \{Prompt\} shell variable for a way to change this default.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Multiple Commands}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Multiple Commands\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:multiple commands}}}{\v\fs20 \par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Several commands can be entered on one line using a semicolon to separate the individual commands.  For example,\par }\pard \qj\widctlpar\tx720\adjustright {\pard\plain \qj\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RENAME command}}}{\v\fs20 \par }\pard \qj\fi450\widctlpar\tx720\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 RENAME WHITE BLACK;EDIT BLACK\par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par would first change the name of the file WHITE to BLACK, and then invoke the editor to edit the file named BLACK.  If any error occurs, commands that have not been executed yet are canceled.  In the example above, if there was an error renaming the file WHITE, the shell would not try to edit the file BLACK.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Scrolling Through Commands}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Scrolling Through Commands\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command list}}}{\*\bkmkend bk14}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 line editor\bxe }{\rxe bk14}}}{\v\fs20 \par }\pard \qj\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Using the }{\outl\fs18 UP-ARROW}{\fs20  and }{\outl\fs18 DOWN-ARROW}{\fs20  keys, it is possible to scroll through the twenty most recent commands.  You can then modify a previous command using the line-editing features described above and execute the edited command.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Command Types}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Command Types\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:command types\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Commands in ORCA can be subdivided into three major groups:  built-in commands, utilities, and language names.  All are entered from the keyboard the same way. \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Built-in Commands}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Built-in Commands\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:built-in commands}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Built-in commands can be executed as soon as the command is typed and the }{\outl\fs18 RETURN}{\fs20  key is hit, since the code needed to execute the command is contained in the command processor itself.  Apple DOS and Apple ProDOS are examples of operating systems that have only built-in commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Utilities}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Utilities\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:utilities}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CRUNCH utility}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 restartable programs}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA supports commands that are not built into the command processor.  An example of this type of command is CRUNCH, which is a separate program under ORCA.  The programs to perform these commands are contained on a special directory known as the }{\i\fs20 utilities}{\fs20  directory.  The command processor must first load the program that will perform the required function, so the }{\i\fs20 utilities}{\fs20  directory must be on line when the command is entered.  The command will also take longer to execute, since the operating system must load the utility program.  Most utilities can be restarted, which means that they are left in memory after they have been used the first time.  If the memory has not been reused for some other purpose, the next time the command is used, there is no delay while the file is loaded from disk.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The utilities themselves must all reside in the same subdirectory so that the command processor can locate them.  The name of the utility is the same as the name of the command used to execute it; the utility itself can be any file that can be executed from the shell, including script files.  Utilities are responsible for parsing all of the input line which appears after the command itself, except for input and output redirection.  The }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\fs20 command line is passed to a utility the same way it is passed to any other program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Language Names}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Language Names\tcl3}}}{\b \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:language names\bxe }}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASM65816 language}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The last type of command is the language name.  All source files are stamped with a language, which can be seen when the file is cataloged under ORCA.  There is always a single system language active at any time when using ORCA.\par The system language will change for either of two reasons.  The first is if a file is edited, in which case the system language is changed to match the language of the edited file.  The second is if the name of a language is entered as a command. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\v\fs20 \par }{\fs20 Table 8.2 shows a partial list of the languages and language numbers that are currently assigned.  CATALOG and HELP will automatically recognize a language if it is properly included in the command table.  ProDOS has a special status:  it is not truly a language, but indicates to the editor that the file should be saved as a standard GS/OS TXT file}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\fs20 . Language numbers are used internally by the system, and are generally only important when adding languages to ORCA.  They are assigned by Apple Computer, Inc.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language numbers\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT language}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASM6502 language}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Modula-2 language}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Modula-2 language}}}{\v\fs20 \par }\pard \qj\fi2340\keepn\widctlpar\tx4320\adjustright {\fs20\ul \par }\pard \qj\li2520\ri2880\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx4320\adjustright {\fs20 language\tab number\par }\pard \qj\li2520\ri2880\keepn\widctlpar\tx4320\adjustright {\fs20 \par ProDOS\tab 0\par TEXT\tab 1\par ASM6502\tab 2\par ASM65816}{\tab }{\fs20 3\par ORCA/Pascal\tab 5\par EXEC\tab 6\par ORCA/C\tab 8\par ORCA/Modula-2\tab 272\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Table 8.2 A Partial list of the Languages and Language Numbers\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\fs20 You can see the list of languages currently installed in your system using the SHOW LANGUAGES command.  While all of the languages from the above table are listed, the compilers needed to compile C or Pascal programs and the assembler needed to assemble ASM65816 programs are sold separately.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Program Names}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Program Names\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTEM files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS 8}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Anything which cannot be found in the command table is treated as a path name, and the system tries to find a file that matches the path name.  If an executable file is found, that file is loaded and executed.  If a source file with a language name of EXEC is encountered, it is treated as a file of commands, and each command is executed, in turn.  Note that S16 files can be executed directly from ORCA.  ProDOS 8 SYSTEM files can also be executed, provided ProDOS 8 (contained in the file P8) is installed in the system directory of your boot disk.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Standard Prefixes}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Standard Prefixes\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you specify a file on the Apple\~II}{\scaps\fs20 gs}{\fs20 , as when indicating which file to edit or utility to execute, you must specify the file name as discussed in the section \ldblquote File Names\rdblquote  in this chapter.  GS/OS provides 32 prefix numbers that can be used in the place of prefixes in path names.  This section describes the ORCA default prefix assignments for these GS/OS prefixes.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PREFIX command}}}{\v\fs20 \par }{\fs20 ORCA uses six of the GS/OS prefixes (8 and 13 through 17) to determine where to search for certain files.  When you start ORCA, these prefixes are set to the default values shown in the table below.  You can change any of the GS/OS prefixes with the shell PREFIX command, as described in this chapter.\par GS/OS also makes use of some of these numbered prefixes, as does the Standard File Manager from the Apple\~II}{\fs18 GS}{\fs20  toolbox.  Prefixes 8 through 12 are used for special purposes by GS/OS or Standard File.  Prefix 8 is used by GS/OS and Standard File to indicate the default prefix; that's the same reason ORCA uses prefix 8.  Prefix 9 is set by any program launcher (including GS/OS, ORCA, and Apple's Finder) to the directory containing the executable file.  Prefixes 10, 11 and 12 are the path names for standard input, standard output, and error output, respectively.  Use of these prefixes is covered in more detail later in this chapter.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program launchers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 boot prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Library prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Languages prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output}}}{\v\fs20 \par }\pard \qj\fi-533\li533\keep\widctlpar\tx533\tx1080\tx2880\tx5220\adjustright {\fs20 \par }\pard \li720\ri1800\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2340\tx4140\adjustright {\fs20 Prefix Number\tab Use\tab Default\par }\pard \li720\ri1800\keepn\widctlpar\tx2340\tx4140\adjustright {\fs20 \par @\tab User's folder\tab Boot prefix\par *\tab Boot prefix\tab Boot prefix\par 8\tab Current prefix\tab Boot prefix\par }\pard \li720\ri1800\keep\keepn\widctlpar\tx2340\tx4140\adjustright {\fs20 9\tab Application\tab Prefix of ORCA.Sys16\par 10\tab Standard Input\tab .CONSOLE\par 11\tab Standard Output\tab .CONSOLE\par 12\tab Error Output\tab .CONSOLE\par 13\tab ORCA library\tab 9:LIBRARIES:\par 14\tab ORCA work\tab 9:\par 15\tab ORCA shell\tab 9:SHELL:\par 16\tab ORCA language\tab 9:LANGUAGES:\par 17\tab ORCA utility\tab 9:UTILITIES:\par }\pard \qj\ri360\keep\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\ri360\keep\widctlpar\adjustright {\fs20 Table 8.3  Standard Prefixes\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The prefix numbers can be used in path names.  For example, to edit the system tab file, you could type either of the following commands:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDIT command}}}{\v\fs20 \par }\pard \qj\fi446\keepn\widctlpar\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\b\f6\fs18 EDIT :ORCA:SHELL:SYSTABS\par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 EDIT 15:SYSTABS\par }\pard \qj\ri360\keep\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 boot prefix}}}{\v\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\fs20 Each time you restart your Apple\~II}{\scaps\fs20 gs}{\fs20 , GS/OS retains the volume name of the boot disk.  You can use an asterisk (*) in a path name to specify the boot prefix.  You cannot change the volume name assigned to the boot prefix except by rebooting the system.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 networks}}}{\v\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\fs20 The @ prefix is useful when you are running ORCA from a network.  If you are using ORCA from a hard disk or from floppy disks, prefix @ is set just like prefix 9, defaulting to the prefix when you have installed ORCA.Sys16.  If you are using ORCA from a network, though, prefix @ is set to your network work folder.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 current prefix}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The current prefix (also called the default prefix) is the one that is assumed when you use a partial path name.  If you are using ORCA on a self-booting 3.5 inch disk, for example, prefix 8 and prefix 9 are both normally :ORCA:.  If you boot your Apple\~II}{\scaps\fs20 gs}{\fs20  from a 3.5-inch :ORCA disk, but run the ORCA.Sys16 file in the ORCA: subdirectory on a hard disk named HARDISK, prefix 8 would still be :ORCA: but prefix 9 would be :HARDISK:ORCA:.\par The following paragraphs describe ORCA\rquote s use of the standard prefixes.\par ORCA looks in the current prefix (prefix 8) when you use a partial path name for a file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Library prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MAKELIB utility}}}{\v\fs20 \par }{\fs20 The linker searches the files in the ORCA library prefix (prefix 13) to resolve any references not found in the program being linked.  ORCA comes with a library file that supports the standard Modula-2 library; you can also create your own library files.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:include statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler and the DeRez utility both look for a folder called RInclude in the library prefix when they process partial path names in include and append statements.  The path searched is 13:RInclude.  See the description of the resource compiler for details.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 units}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FROM statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 M2Defs}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When the compiler encounters a FROM statement, and a LibPrefix directive has not been used, it searches first in 13:M2Defs.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PREFIX command}}}{\v\fs20 \par }{\fs20 The work prefix (prefix 14) is used by some ORCA programs for temporary files.  For example, when you pipeline two or more programs so that the output of one program becomes the input to the next, ORCA creates temporary files in the work prefix for the intermediate results (pipelines are described in the section \ldblquote Pipelines\rdblquote  in this chapter).  Commands that use the work prefix operate faster if you set the work prefix to a RAM disk, since I/O is faster to and from memory than to and from a disk.  If you have enough memory in your system to do so, use the Apple\~II}{\scaps\fs20 gs}{\fs20  control panel to set up a RAM disk (be sure to leave at least 1.25M for the system), then use the PREFIX command to change the work prefix.  To change prefix 14 to a RAM disk named :RAM5, for example, use the following command:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 PREFIX 14 :RAM5\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You won't want to do this every time you boot.  You can put this command in the LOGIN file, which you will find in the shell prefix.  The LOGIN file contains commands that are executed every time you start the ORCA shell.\par ORCA looks in the ORCA shell prefix (prefix 15) for the following files:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDITOR file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSEMAC file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSCMND file}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\tx2880\adjustright {\fs20 \par EDITOR\par SYSTABS\par SYSEMAC\par SYSCMND\par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\fs20 LOGIN\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As we mentioned a moment ago, the LOGIN file is an EXEC file that is executed automatically at load time, if it is present.  The LOGIN file allows automatic execution of commands that should be executed each time ORCA is booted.\par }\pard \qj\fi-360\li360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi-360\li360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Languages prefix}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA looks in the language prefix (prefix 16) for the ORCA linker, the ORCA/Modula-2 compiler, and any other assemblers, compilers, and text formatters that you have installed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CRUNCH utility}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INIT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MAKELIB utility}}}{\v\fs20 \par }{\fs20 ORCA looks in the utility prefix (prefix 17) for all of the ORCA utility programs except for the editor, assembler, and compilers.  Prefix 17 includes the programs that execute utility commands, such as CRUNCH and MAKELIB.  The utility prefix also contains the HELP: subdirectory, which contains the text files used by the HELP command.  Command types are described in the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Prefixes 0 to 7}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Prefixes 0 to 7\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefix 0-7}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers}}}{\pard\plain \qj\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS aware}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The original Apple\~II}{\fs18 GS}{\fs20  operating system, ProDOS 16, had a total of eight numbered prefixes that worked a lot like the 32 numbered prefixes in GS/OS.  In fact, the original eight prefixes, numbered 0 to 7, are still in GS/OS, and are now used to support old programs that may not be able to handle the longer path names supported by GS/OS.\par When the programmers at Apple wrote GS/OS, one of the main limitations from ProDOS that they wanted to get rid of was the limit of 64 characters in a path name.  GS/OS has a theoretical limit of 32K characters for the length of a path name, and in practice supports path names up to 8K characters.  This presented a problem: existing programs would not be able to work with the longer path names, since they only expected 64 characters to be returned by calls that returned a path name.  Apple solved this problem by creating two classes of programs: GS/OS aware programs, and older programs.  When a program launcher, like Apple's Finder or the ORCA shell, launches a GS/OS aware program, prefixes 0 to 7 are cleared (if they had anything in them to start with).  The program launcher expects the program to use prefixes 8 and above.  When an old program is executed, prefixes are mapped as follows:\par \par }\pard \qj\li2160\ri2340\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3960\adjustright {\fs20 GS/OS prefix\tab old ProDOS prefix\par }\pard \qj\li2160\ri2340\keepn\widctlpar\tx3960\adjustright {\fs20 8\tab 0\par 9\tab 1\par 13\tab 2\par 14\tab 3\par 15\tab 4\par 16\tab 5\par 17\tab 6\par }\pard \qj\li2160\ri2340\widctlpar\tx3960\adjustright {\fs20 18\tab 7\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par In each case, the new, GS/OS prefix is copied into the older ProDOS prefix.  If any of the GS/OS prefixes are too long to fit in the older, 64 character prefixes, the program launcher refuses to run the old application, returning an error instead.  Assuming the old application is executed successfully, when it returns, the old ProDOS prefixes are copied into their corresponding GS/OS prefixes, and the ProDOS prefixes are again cleared.\par The ORCA shell fully supports this new prefix numbering scheme.  When you are working in the ORCA shell, and use a prefix numbered 0 to 7, the ORCA shell automatically maps the prefix into the correct GS/OS prefix.  The shell checks for the GS/OS aware flag before running any application, and maps the prefixes if the application needs the older prefix numbers.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 File Names}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 File Names\tcl2}}}{\b\fs28 \par }\pard \qj\keep\widctlpar\adjustright {\pard\plain \qj\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 File name designation in ORCA follows standard GS/OS conventions.  There are some special symbols used in conjunction with file names:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 symbol\tab meaning\par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names\bxe }}}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device numbers}}}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\v\fs20 \par }{\fs20 \par .Dx\tab This indicates a device name formed by concatenating a device number and the characters '.D'.  Use the command:\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 \tab \tab SHOW UNITS\par }{\fs20 \tab \par \tab to display current assignment of device numbers.  Since device numbers can change dynamically with some kinds of devices (e.g. CD ROM drives) it is a good idea to check device numbers before using them.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\v\fs20 .PRINTER;}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.PRINTER}}}{\v\fs20 .CONSOLE;}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.CONSOLE}}}{\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\v\fs20 \par }{\fs20 .name\tab This indicates a device name.  As with device numbers, the "show units" command can be used to display a current list of device names.  The two most common device names that you will use are .CONSOLE and .PRINTER, although each device connected to your computer has a device name.  .CONSOLE is the keyboard and display screen, while .PRINTER is a device added to GS/OS by the Byte Works to make it easy for text programs to use the printer.\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 prefixes\:numbers}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 x\tab Prefix number.  One of the 32 numbered prefixes supported by GS/OS.  See the previous section for a description of their use.  You may use a prefix number in place of a volume name.\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 directory walking\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 ..\tab When this is placed at the start of a path name, it indicates that the reference is back (or up) one directory level.\par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 :\tab This symbol, when inserted in a path name, refers to a directory.  You can also use /, so long as you do not mix : characters and / characters in the same path name.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA allows the use of a physical device number in full path names.  For example, if the SHOW UNITS command indicates that the drive with the disk named :ORCA is .D1, the following file names are equivalent.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 :ORCA:MONITOR\tab .D1:MONITOR\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Here are some examples of legal path names:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 :ORCA:SYSTEM:SYSTABS\par ..:SYSTEM\par 15:SYSCMND\par .D1\par .D3:LANGUAGES:ASM65816\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 14:\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Wildcards}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Wildcards\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Wildcards may be used on any command that requires a file name.  Two forms of the wildcard are allowed, the = character and the ? character.  Both can substitute for any number of characters.  The difference is that use of the ? wildcard will result in prompting, while the = character will not. Wildcards cannot be used in the subdirectory portion of a path name.  For example,\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DELETE command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 \par DELETE MY=\par }\pard \qj\widctlpar\adjustright {\fs20 \par would delete all files that begin with MY.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The command,\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 DELETE MY?\par }\pard \qj\widctlpar\adjustright {\fs20 \par would delete files that begin with MY after you responded yes to the prompt for each file.  The wildcards can be used anywhere in the file name.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are limitations on the use of wildcards.  Some commands don't accept wildcards in the second file name.  These commands are:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COPY command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MOVE command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RENAME command}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par COPY\par MOVE\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 RENAME\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are some commands that only work on one file.  As a result, they will only use the first matching file name.  These commands are:\par }\pard \qj\fi446\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPILE command}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 ASML\par CMPL\par CMPLG\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 COMPILE\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Types of Text Files}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Types of Text Files\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 GS/OS defines and uses ASCII format files with a TXT designator.  ORCA fully supports this file type with its system editor, but requires a language stamp for files that will be assembled or compiled, since the assembler or compiler is selected automatically by the system.  As a result, a new ASCII format file is supported by ORCA.  This file is physically identical to TXT files; only the file header in the directory has been changed.  The first byte of the AUX field in the file header is now used to hold the language number, and the file type is $B0, which is listed as SRC when cataloged from ORCA. \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS language}}}{\v\fs20 TYPE command;\par }{\fs20 One of the language names supported by ORCA SRC files is TEXT.  TEXT files are used as inputs to a text formatter.  In addition, PRODOS can be used as if it were an ORCA language name, resulting in a GS/OS TXT file.  TXT files are also sent to the formatter if an ASSEMBLE, COMPILE, or TYPE command is issued.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 EXEC Files}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 EXEC Files\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 EXEC files\bxe }}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 shell commands}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 EXEC language}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 path names}}}{\b\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can execute one or more ORCA shell commands from a command file.  To create a command file, set the system language to EXEC and open a new file with the editor.  Any of the commands described in this chapter can be included in an EXEC file.  The commands are executed in sequence, as if you had typed them from the keyboard.  To execute an EXEC file, type the full path name or partial path name (including the file name) of the EXEC file and press RETURN.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long command lines}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There is one major advantage to using an EXEC file over typing in a command from the command line.  The command line editor used by the shell restricts your input to 255 characters.  With EXEC files, you can enter individual command lines that are up to 64K characters in length.  Since it probably isn't practical or useful to type individual command lines that are quite a bit wider than what you can see on your computer screen, you can also use continuation lines.  In any EXEC file, if the shell finds a line that ends with a backslash (\\) character (possibly followed by spaces or tabs), the line is concatenated with the line that follows, and the two lines are treated as a single line.  The command is treated exactly as if the backslash character and the end of line character were replaced by spaces.  For example, the command\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 link file1 file2 file3 keep=myfile\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 could be typed into an EXEC file as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 link             \\\par    file1         \\\par    file2         \\\par    file3         \\\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18    keep=myfile\par }\pard \qj\widctlpar\adjustright {\fs20 The two versions of the command would do exactly the same thing.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you execute an interactive utility, such as the ORCA Editor, from an EXEC file, the utility operates normally, accepting input from the keyboard.  If the utility name was not the last command in the EXEC file, then you are returned to the EXEC file when you quit the utility.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 branching\:EXEC files}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 EXEC files are programmable; that is, ORCA includes several commands designed to be used within EXEC files that permit conditional execution and branching.  You can also pass parameters into EXEC files by including them on the command line.  These features are described in the following sections.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 EXEC files can call other EXEC files.  The level to which EXEC files can be nested and the number of variables that can be defined at each level depend on the available memory.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:multiple commands}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can put more than one command on a single line of an EXEC file; to do so, separate the commands with semicolons (;).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Passing Parameters Into EXEC Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Passing Parameters Into EXEC Files\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute an EXEC file, you can include the values of as many parameters as you wish by listing them after the path name of the EXEC file on the command line.  Separate the parameters with spaces or tab characters; to specify a parameter value that has embedded spaces or tabs, enclose the value in quotes.  Quote marks embedded in a parameter string must be doubled.\par For example, suppose you want to execute an EXEC file named FARM, and you want to pass the following parameters to the file:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi7\li360\keepn\widctlpar\adjustright {\fs20 cow\par chicken\par one egg\par }\pard \qj\fi7\li360\widctlpar\adjustright {\fs20 tom's cat\par }\pard \qj\fi-274\li533\widctlpar\tx533\tx2880\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 In this case, you would enter the following command on the command line:\par \par }\pard \fi360\widctlpar\adjustright {\b\f6\fs18 FARM cow chicken "one egg" "tom's cat"\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 Parameters are assigned to variables inside the EXEC file as described in the next section.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Programming EXEC Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Programming EXEC Files\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In addition to being able to execute any of the shell commands discussed in the command descriptions section of this chapter, EXEC files can use several special commands that permit conditional execution and branching.  This section discusses the use of variables in EXEC files, the operators used to form boolean (logical) expressions, and the EXEC command language.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\fs20 Variables\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity\:shell}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Any alphanumeric string up to 255 characters long can be used as a variable name in an EXEC file.  (If you use more than 255 characters, only the first 255 are significant.)  All variable values and parameters are ASCII strings of 65535 or fewer characters.  Variable names are not case sensitive, but the values assigned to the variables }{\i\fs20 are }{\fs20 case sensitive.  To define values for variables, you can pass them into the EXEC file as parameters, or include them in a FOR command or a SET command as described in the section \ldblquote EXEC File Command Descriptions.\rdblquote   To assign a null value to a variable (a string of zero length), use the UNSET command.  Variable names are always enclosed in curly brackets (\{\}), except when being defined in the SET, UNSET and FOR commands.\par Variables can be defined within an EXEC file, or on the shell command line before an EXEC file is executed, by using the SET command.  Variables included in an EXPORT command on the shell command line can be used within any EXEC file called from the command line.  Variables included in an EXPORT command within an EXEC file are valid in any EXEC files called by that file; they can be redefined locally, however.  Variables redefined within an EXEC file revert to their original values when that EXEC file is terminated, except if the EXEC file was run using the EXECUTE command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:scope}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPORT command}}}{\v\fs20 \par }{\fs20 The following variable names are reserved.  Several of these variables may have number values; keep in mind that these values are literal ASCII strings.  A null value (a string of zero length) is considered undefined.  Use the UNSET command to set a variable to a null value.  Several of the predefined variables are used for special purposes within the shell.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{0\} shell variable\bxe }}}{\v\fs20 ... shell variables;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{1\}, \{2\}, ... shell variables\bxe }}}{\v\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{CaseSensitive\} shell variable\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Command\} shell variable\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Echo\} shell variable\bxe }}}{\v\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\fs20 \par \{0\}\tab The name of the EXEC file being executed.\par \par \{1\}, \{2\}, ...\tab Parameters from the command line.  Parameters are numbered sequentially in the sequence in which they are entered.\par \par \{#\}\tab The number of parameters passed.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{AuxType\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auxiliary file type}}}{\v\fs20 \par }{\fs20 \par \{AuxType\}\tab Provides automatic auxiliary file type specification.  The variable contains a single value, specified as a hex or decimal integer.  The AuxType string sets the auxiliary file type for the executable file produced by the linker.  Any value from 0 to 65535 ($FFFF) can be used.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity\:shell}}}{\v\fs20 \par }{\fs20 \par \{CaseSensitive\}\tab If you set this variable to any non-null value, then string comparisons are case sensitive.  The default value is null.\par \par \{Command\}\tab The name of the last command executed, exactly as entered, excluding any command parameters.  For example, if the command was :ORCA:MYPROG, then \{Command\} equals :ORCA:MYPROG; if the command was EXECUTE :ORCA:MYEXEC, then \{Command\} equals EXECUTE.  The \{Parameters\} variable is set to the value of the entire parameters list.\par \par \{Echo\}\tab If you set this variable to a non-null value, then commands within the EXEC file are printed to the screen before being executed.  The default value for Echo is null (undefined).\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Exit\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\v\fs20 \par }{\fs20 \par \{Exit\}\tab If you set this variable to any non-null value, and if any command or nested EXEC file returns a non-zero error status, then execution of the EXEC file is terminated.  The default value for \{Exit\} is non-null (it is the ASCII string true).  Use the UNSET command to set \{Exit\} to a null value (that is, to delete its definition).\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Insert\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }{\fs20 \par \{Insert\}\tab When you are using the shell's line editor, you start off in over strike mode.  If the \{Insert\} shell variable is set to any value, the shell's line editor defaults to over strike mode.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepName\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP directive}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\v\fs20 \par }{\fs20 \par \{KeepName\}\tab Provides an automatic output file name for compilers and assemblers, avoiding the KEEP parameter on the command line and the KEEP directive in the language.  If there is no keep name specified on the command line, and there is a non-null \{KeepName\} variable, the shell will build a keep name using this variable.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command}}}{\v\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright {\fs20 \tab \tab This keep name will be applied to all object modules produced by an assembler or compiler.  On the ASML, ASMLG and RUN commands, if no \{LinkName\} variable is used, the output name from the assemble or compile will also determine the name for the executable file.  See \{LinkName\} for a way to override this.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:metacharacters}}}{\v\fs20 \par }{\fs20 \tab \tab There are two special characters used in this variable that affect the automatic naming: % and $.  Using the % will cause the shell to substitute the source file name.  Using $ expands to the file name with the last extension removed (the last period (.) and trailing characters).\par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepType\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\v\fs20 \par }{\fs20 \par \{KeepType\}\tab Provides automatic file type specification.  The variable contains a single value, specified as a hex or decimal integer, or a three-letter GS/OS file type.  The KeepType string sets the file type for the executable file produced by the linker.  Legal file types are $B3 to $BF.  Legal file descriptors are: EXE, S16, RTL, STR, NDA, LDA, TOL, etc.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Libraries\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\v\fs20 \par }{\fs20 \par \{Libraries\}\tab When the linker finishes linking all of the files you specify explicitly, it checks to see if there are any unresolved references in your program.  If so, it searches various libraries to try and resolve the references.  If this variable is not set, the linker will search all of the files in prefix 13 that have a file type of LIB.  If this variable is set, the linker searches all of the files listed by this shell variable, and does not search the standard libraries folder.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{LinkName\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command}}}{\v\fs20 \par }{\fs20 \par \{LinkName\}\tab Provides an automatic output name for the executable file created by the link editor.  The % and $ metacharacters described for \{KeepName\} work with this variable, too.  When an ASML, ASMLG or RUN command is used, this variable determines the name of the executable file, while \{KeepName\} specifies the object file name.  This variable is also used to set the default file name for the LINK command.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Parameters\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command}}}{\v\fs20 \par }{\fs20 \par \{Parameters\}\tab The parameters of the last command executed, exactly as entered, excluding the command name.  For example, if the command was  EXECUTE :ORCA:MYEXEC, then \{Parameters\} equals :ORCA:MYEXEC.  The \{Command\} variable is set to the value of the command name.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prompt}}}{\v\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Prompt\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line\:prompt}}}{\v\fs20 \par }{\fs20 \par \{Prompt\}\tab When the shell's command line editor is ready for a command line, it prints a # character as a prompt.  If the \{Prompt\} shell variable is set to any value except the # character, the shell will print the value of the \{Prompt\} shell variable instead of the # character.  If the \{Prompt\} shell variable is set to #, the shell does not print a prompt at all.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Separator\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS}}}{\v\fs20 \par }{\fs20 \par \{Separator\}\tab Under ProDOS, full path names started with the / character, and directories within path names were separated from each other, from volume names, and from file names by the / character.  In GS/OS, both the / character and the : character can be used as a separator when you enter a path name, but the : character is universally used when writing a path name.  If you set the Separator shell variable to a single character, that character will be used as a separator whenever the shell writes a path name.  Note that, while many utilities make shell calls to print path names, not all do, and if the utility does not use the shell or check the \{Separator\} shell variable, the path names will not be consistent.\par }{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} shell variable\bxe }}}{\pard\plain \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\v\fs20 \par }{\fs20 \par \{Status\}\tab The error status returned by the last command or EXEC file executed.  This variable is the ASCII character 0 ($30) if the command completed successfully.  For most commands, if an error occurred, the error value returned by the command is the ASCII string 65535 (representing the error code $FFFF).\par \par }\pard \qj\keep\keepn\widctlpar\adjustright {\b\fs20 Logical Operators\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 expressions\:shell\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity\:shell}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA includes two operators that you can use to form boolean (logical) expressions.  String comparisons are case sensitive if \{CaseSensitive\} is not null (the default is for string comparisons to }{\i\fs20 not}{\fs20  be case sensitive).  If an expression result is true, then the expression returns the character 1.  If an expression result is not true, then the expression returns the character 0.  There must be one or more spaces before and after the comparison operator.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1710\li2160\widctlpar\tx2160\tx2880\adjustright {\i\fs20 str1}{\fs20  == }{\i\fs20 str2}{\fs20 \tab String comparison:  true if string }{\i\fs20 str1}{\fs20  and string }{\i\fs20 str2}{\fs20  are identical; false if not.\par }{\i\fs20 str1}{\fs20  != }{\i\fs20 str2}{\fs20 \tab String comparison:  false if string }{\i\fs20 str1}{\fs20  and string }{\i\fs20 str2}{\fs20  are identical; true if not.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Operations can be grouped with parentheses.  For example, the following expression is true if one of the expressions in parentheses is false and one is true; the expression is false if both expressions in parentheses are true or if both are false:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi360\widctlpar\adjustright {\b\f6\fs18 IF ( COWS == KINE ) != ( CATS == DOGS )\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Every symbol or string in a logical expression must be separated from every other by at least one space.  In the preceding expression, for example, there is a space between the string comparison operator != and the left parentheses, and another space between the left parentheses and the string CATS.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Entering Comments\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comments\:EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMENT command}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printing files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To enter a comment into an EXEC file, start the line with an asterisk (*).  The asterisk is actually a command that does nothing, so you must follow the asterisk by at least one space.  For example, the following EXEC file sends a catalog listing to the printer:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\b\f6\fs18 CATALOG >.PRINTER\par }\pard \fi360\widctlpar\adjustright {\b\f6\fs18 * Send a catalog listing to the printer\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use a semicolon followed by an asterisk to put a comment on the same line as a command:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 CATALOG >.PRINTER  ;* Send a catalog listing to the printer\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Redirecting Input and Output}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Redirecting Input and Output\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright {\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard input}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\keepn\widctlpar\tx720\tx1080\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 appending to the end of a file\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Standard input is usually through the keyboard, although it can also be from a text file or the output of a program; standard output is usually to the screen, though it can be redirected to a printer or another program or disk file.  You can redirect standard input and output for any command by using the following conventions on the command line:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \fi-2160\li2160\keepn\widctlpar\tx360\tx2160\adjustright {\fs20 \tab <}{\i\fs20 inputdevice}{\fs20 \tab Redirect input to be from }{\i\fs20 inputdevice.}{\fs20 \par \tab >}{\i\fs20 outputdevice}{\fs20 \tab Redirect output to go to }{\i\fs20 outputdevice.}{\fs20 \par }\pard \fi-2160\li2160\widctlpar\tx360\tx2160\adjustright {\fs20 \tab >>}{\i\fs20 outputdevice}{\fs20 \tab Append output to the current contents of }{\i\fs20 outputdevice.}{\fs20 \par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\v\fs20 .CONSOLE;}{\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.CONSOLE}}}{\v\fs20 .PRINTER;}{\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.PRINTER}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The input device can be the keyboard or any text or source file.  To redirect input from the keyboard, use the device name .CONSOLE.\par The output device can be the screen, the printer, or any file.  If the file named does not exist, ORCA opens a file with that name.  To redirect output to the screen, use the device name .CONSOLE; to redirect output to the printer, use .PRINTER.  .PRINTER is a RAM based device driver; see the section describing .PRINTER, later in this chapter, for details on when .PRINTER can be used, how it is installed, and how you can configure it.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Both input and output redirection can be used on the same command line.  The input and output redirection instructions can appear in any position on the command line.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\fs20 For example, to redirect output from a compile of the program MYPROG to the printer, you could use either of the following commands:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:redirecting output}}}{\v\fs20 \par }\pard \qj\fi446\keepn\widctlpar\tx360\tx2070\adjustright {\b\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\b\f6\fs18 COMPILE MYPROG >.PRINTER\par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 COMPILE >.PRINTER MYPROG\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 appending to the end of a file}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To redirect output from the CATALOG command to be appended to the data already in a disk file named CATSN.DOGS, use the following command:\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 CATALOG >>CATSN.DOGS\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\pard\plain \qj\widctlpar\tx360\tx2070\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:redirection}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Input and output redirection can be used in EXEC files.  When output is redirected when the EXEC file is executed, input and output can still be redirected from individual commands in the EXEC file.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\fs20 The output of programs that do not use standard output, and the input of programs that do not use standard input, cannot be redirected.\par }{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error output}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Error messages also normally go to the screen.  They can be redirected independently of standard output.  To redirect error output, use the following conventions on the command line:\par }\pard \qj\widctlpar\tx360\tx2070\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 >&}{\i\fs20 outputdevice}{\fs20 \tab Redirect error output to go to }{\i\fs20 outputdevice.}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 >>&}{\i\fs20 outputdevice}{\fs20 \tab Append error output to the current contents of }{\i\fs20 outputdevice.\par }\pard \qj\fi-2160\li2160\widctlpar\tx360\tx2160\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Error output devices follow the same conventions as those described above for standard output.  Error output redirection can be used in EXEC files.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The .PRINTER Driver}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The .PRINTER Driver\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\v\fs20 {\*\bkmkstart bk15}.printer;}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.printer}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The operating system on the Apple\~II}{\fs18 GS}{\fs20  gives you a number of ways to write to a printer, but none of them can be used with input and output redirection, nor can they be used with standard file write commands, which is the way you would write text to a printer on many other computers.  On the other hand, GS/OS does allow the installation of custom drivers, and these custom drivers can, in fact, be used with I/O redirection, and you can use GS/OS file output commands to write to a custom driver.  Our solution to the problem of providing easy to use text output to a printer is to add a custom driver called .PRINTER.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:redirecting output}}}{\v\fs20 \par }{\fs20 As described in the last section, you can redirect either standard out or error out to your printer by using the name .PRINTER as the destination file, like this:\par \par }{\b\f6\fs18 TYPE MyFile >.Printer\par }{\fs20 \par You can also open a file, using .PRINTER as the file name, using standard GS/OS calls.  When you write to this file, the characters appear on your printer, rather than being written to disk.  In short, as far as your programs are concerned, .PRINTER is just a write-only file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:configuration}}}{\v\fs20 \par }{\fs20 The only thing you have to watch out for is that, since .PRINTER is a RAM based driver, it must be installed on your boot disk before you can use the driver.  If you are running from the system disk we sent with ORCA/Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Modula-2}}}{\fs20 , the .PRINTER driver is already installed, and you can use it right away.  If you are booting from some other disk, you will need to install the .PRINTER driver on that disk.  There is an installer script that will move the correct file for you, or you can simply copy the files ORCA.PRINTER and PRINTER.CONFIG from the SYSTEM:DRIVERS folder of the ORCA system disk to the SYSTEM:DRIVERS folder of your system disk.\par All printers are not created equal, so any printer driver must come with some method to configure the driver.  By default, our printer driver is designed to handle a serial printer installed in slot 1.  It prints a maximum of 80 characters on one line, after which it will force a new line, and put any remaining characters on the new line.  After printing 60 lines, a form feed is issued to advance the paper to the start of a new page.  When a new line is needed, the driver prints a single carriage return character ($0D).  If any of these options are unsuitable for your printer, you can change them using either a CDev or a CDA.  Both of these programs produce a configuration file called PInit.Options, which will be placed in your System folder, so you need to be sure your boot disk is in a drive and not write protected when you configure your printer.  This file is read by an init called TextPrinterInit at boot time to configure the text printer driver, which is itself a GS/OS driver called TextPrinter.\par Figure 8.4 shows the screens you will see when you use the CDev from Apple's Control panel or when you select the CDA from the CDA menu.  The options that you can select are the same for both configuration programs; these are described in Table 8.5.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {{\pict{\*\picprop\shplid1048{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw326\pich380\picwgoal6520\pichgoal7600\macpict\bliptag1776081729\blipupi72{\*\blipuid 69dcdb41b16dd6ebf27523eee4ea197c}275200000000017c01461101a00082a0008e01000a0000000002d0024098002a00000000004b014800000000004b014600000000004b0146000102d70007007fdaff01f80007007fdaff01f800070060da00011800070060da00011800070060da00011800070060da00011800190367e7fff3f8ff01f81efc00063807c000000380f4ff019800190367e7fff3f8ff01f81efc00063807c000000380f4ff0198001a0360060030f7000c33000018000018066000000180f4000118001a0360060030f7000c33000018000018066000000180f4000118001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001b0367e60033f8ff0df8301e3e3e363c180663e7c3c180f4ff0198001a0360060030f7000c3033331838661807c666666180f4000118001a0360060030f7000c3033331838661807c666666180f4000118001b0367e60033f8ff0df83033331830661806066667e180f4ff0198001b0367e60033f8ff0df83033331830661806066667e180f4ff019800190360060030f700fe33091b306618060666660180f400011800190360060030f700fe33091b306618060666660180f4000118001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff0198001b0367e7fff3f8ff0df81e1e330e303c3c0603e663c3c0f4ff019800070060da00011800070060da00011800070060da00011800070060da0001180007007fdaff01f80007007fdaff01f8000e0070f6000360060060e9000118000e0070f6000360060060e900011800150070f6000360198060fd00030ffffffef100011800150070f6000360198060fd00030ffffffef100011800180370000007fbff018000fd60fd00030c000006f100011800180370000007fbff018000fd60fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001b0370000006fc000601800061801860fd00030c000006f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001a0370000019fb9905800067e07e60fd00030c000c06f1000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001b0370000061fb99018000fd60083c3800000c003c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001c0370000060fc0002018000fd6008661800300c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001a0370000061fb99018000fc6007183c7c0c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001c0370000061fb990e8000607fe0603c1866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001d0370000060fc000f01800060000060061866300c000c07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001c037000007ffbff0e800060000060661866360c003f07e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001f0f70000007bbe66671111600007fffffe0fe3c051c0c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0f70000006eee0007ffffe0000799999e0fd00040c000007e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001e0b70000007bbe7980006600000fe660060fd00000ffeff00e0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f2000118001d0f70000006eee7987e06600000799999e0fc00037fffffe0f200011800160b70000007bbe0667e66600000fe660060e900011800160b70000007bbe0667e66600000fe660060e900011800160f70000006eee6667e66600000799999e0e900011800160f70000006eee6667e66600000799999e0e900011800160570000007bbe0fe0002600000fe660060e900011800160570000007bbe0fe0002600000fe660060e900011800140370000007fcff06e00000799999e0e900011800140370000007fcff06e00000799999e0e9000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0002600000fe660060f4000003fdff00fefc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001c0370000006fc0006600000799999e0f4000003fd000006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc000118001f0370000007fcff02e00000fe6602606030f600050303c1e00006fc00011800180070f60004799999e060f50005030602600006fc00011800180070f60004799999e060f50005030602600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc00011800200070f600fe6602606071fef00d1f0f1b03e1f1f1e00307c6600006fc0001180098002a004b000000960148004b000000960146004b0000009601460001280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800280070fe000301f0f104fd000c799999e0603199998019999c03fe330630030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800270070fe00030199998cfd00fe660960603199f8f0199f9803fe3306f0030666600006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800280070fe0003019999dcfd0016799999e06031998018199818033331f300030666400006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800270070fe000301f199fcfd00fe6613607e7998f0f01f0f1803e1f231e00303c7800006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc00011800250070fe000301b1f9acfd0003799999e0fc0008180000030001e00003fd000006fc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc000118001c0070fe00030199998cfd00fe660060f4000003fdff00fefc00011800150070fe00030199998cfd0003799999e0e900011800150070fe00030199998cfd0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e9000118001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001b0370000007fcff02e00000fe660060f100003ffdff04e0000018001d0570000006aae0fe0006600000799999e0f1000030fd000460000018001d0570000006aae0fe0006600000799999e0f1000030fd00046000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800260570000006aae6fe6602600000fe6603603c0038f900013830fe000930001800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd000930007800006000001800250570000006aae6fe6609600000799999e0660018f9000018fd0009300078000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6602600000fe661a60603c1866fe3e1e03e1e3601871f0f000300018000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae6fe6620600000799999e060661866db3330033333801831999800307e18000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b0570000006aae0fe0002600000fe661a6060661866db331e0333f300183199f800300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b2970000006aae679e618600000799999e066661866db3303033303001831998000300018000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e000060000018002b0b70000007ffe679e618600000fe660060fe3c163edb331e03e1e3003c7998f00030007e00006000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd00046000001800210f70000006eee00001e0600000799999e0fa000003f9000030fd000460000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e0000018001d0b70000007bbe79879e0600000fe660060f100003ffdff04e000001800160f70000006eee79879e6600000799999e0e900011800160f70000006eee79879e6600000799999e0e900011800160b70000007bbe00001e6600000fe660060e900011800160b70000007bbe00001e6600000fe660060e900011800160f70000006eee6667806600000799999e0e900011800160f70000006eee6667806600000799999e0e9000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001e0b70000007bbe6667986600000fe660060f9000001f6ff00fcfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001f0570000006eee0fe0006600000799999e0f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe000118001d0370000007fcff02e00000fe660060f900010180f700000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800240370000006fc0006600000799999e0f9000c018000cf800380000e0018000cfe00011800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000006fc0002600000fe6603607c0038fe00130607c180018cc0060000060c0c000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800290370000007fcff20e00000799999e066001800300006060180030cc78f8f99861f06000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800220070f600fe661a60663c183c7c3c06060180060cccc61999860c03000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800230070f6001d799999e066661866306606078180030ccfc61999860c06000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc000001800270070fe0001f0e0fb00fe661a60667e187e307e06060180018ccc061999860d8c000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002a0770000001986000c0fd001d799999e06660186036600606018000cf87860f8f8f0718000fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018002308700000018060f1f0f0fe00fe6601607cfe3c051c3c07e60180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001f0070fe0004f06198c180fe0003799999e0f900010180f700050fc0000018001c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c00000180098002a0096000000e101480096000000e101460096000000e1014600011c0070fe0004186198c0f0fe00fe660060f9000001f5ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c0000018001d0870000001986198d818fe0003799999e0f800000ff6ff04c000001800140070fe00fef00170f0fe00fe660060e900011800140070fe00fef00170f0fe00fe660060e9000118000e0070f60003799999e0e9000118000e0070f60003799999e0e900011800150070f600fe660060fc000001f6ff00f8fb00011800150070f600fe660060fc000001f6ff00f8fb00011800170070f60003799999e0fc00010180f7000018fb00011800170070f60003799999e0fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb00011800160070f600fe660060fc00010180f7000018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb000118001e0070f60003799999e0fc000c018000cf800380000e00180018fb00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f600fe6601603cfe060e07c180018cc0060000060c0c001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f60004799999e066fd060d0180030cc78f8f99861f06001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800200070f600fe661360663e3e06060180060cccc61999860c03001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800280070fd000306000020fe0003799999e0fe660f06078180030ccfc61999860c06001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800270070fd00031e000008fe00fe6613607e666606060180018ccc061999860d8c001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800280070fd000366000002fe0003799999e0fe660f0606018000cf87860f8f8f0718001f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800210070fe00040186100002fe00fe660760663e3e07e60180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc00011800200f70000007fe06040000800000799999e0fc00010180f700011f80fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0b700000180606040000800000fe660060fc000001f5ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc000118001e0f700000180606040000800000799999e0fb00000ff6ff0080fc00011800160b700000180606040000800000fe660060e900011800160b700000180606040000800000fe660060e900011800160f70000007fe06040000800000799999e0e900011800160f70000007fe06040000800000799999e0e9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fe00040186100002fe00fe660060f700000ffdff00fef9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001d0070fd000366000002fe0003799999e0f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001c0070fd00031e000008fe00fe660060f700000cfd000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001e0070fd000306000020fe0003799999e0f700050c0033000006f9000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001b0070f600fe6601607efb0009823c7c0c0033000007e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001c0070f60004799999e018fb0009c666660c00331e1e07e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001e0070f600fe66116018666cf8078f80ee60660c001e333007e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001f0070f60014799999e0186670cc0cccc0fe3c7c0c000c3f1e07e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa000118001e0070f600fe661160186660cc0cccc0d606660c000c300307e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa00011800270070fe0000f0fe000018fe0014799999e0186660cc0cccc0c666660c000c1e1e07e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa0001180025047000000198fe000018fe00fe660b60183e60cc078cc0c63c7c0cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001f087000000180f199f0f8fe0003799999e0f700000cfd000107e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001d0070fe0000f1fe990098fe00fe660060f700000ffcff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa000118001e0070fe000019fe990098fe0003799999e0f600007ffdff00e0fa00011800140370000001fd990098fe00fe660060e900011800140370000001fd990098fe00fe660060e900011800160070fe0004f0f0f998f8fe0003799999e0e900011800160070fe0004f0f0f998f8fe0003799999e0e9000118000d0070f600fe660060e9000118000d0070f600fe660060e900011800130070f60003799999e0f600003ff6ff02fc1800130070f60003799999e0f600003ff6ff02fc180098002a00e10000012c014800e10000012c014600e10000012c01460001140070f600037fffffe0f600013080f700020c1800140070f600037fffffe0f600013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001c0070f6000b780001e03c0030000f000018fe00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001a0070f60009780001e0180000c0198cfc00013080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c18001c0070f60010780001e0187c71f0181f1b38f87c003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe0fd0010780001e0186630c00f0c1c18cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031fffffe6fd0010780001e0186630c0018c1818cccc003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800230070fe00031f807860fd0010780001e0186630d8198d9818cc7c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c1800240070fe00001ffeff0080fe0010780001e03c6678700f07183ccc8c003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001e0070fe00041f81860780fe0003780001e0f8000378003080f700020c18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc18001b0070fe00001ffeff0080fe0003780001e0f600003ff6ff02fc1800160070fe00041f98186780fe0003780001e0e900011800160070fe00041f98186780fe0003780001e0e900011800150070fe00001ffeff0080fe0002780001e8ff01f800150070fe00001ffeff0080fe0002780001e8ff01f800160070fe00041f80060780fe0003780001e2e922013800160070fe00041f80060780fe0003780001e2e922013800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00001ffeff0080fe0003780001e8e988019800160070fe00041f81860780fe0003780001e2e922013800160070fe00041f81860780fe0003780001e2e9220138001604700000079ffeff009efe0003780001e8e9880198001604700000079ffeff009efe0003780001e8e98801980016047000000780fe00071e600000780001e2e92201380016047000000780fe00071e600000780001e2e922013800150370000007fdff07fe600000780001e8e988019800150370000007fdff07fe600000780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e8e988019800150370000007fdff00fefe0003780001e2e922013800150370000007fdff00fefe0003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e98801980016017607feff02e0ffe7feff04fe780001e2e92201380016017607feff02e0ffe7feff04fe780001e2e922013800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779fffff3fe67fffff9ffffe780001e8e988019800160f779f0e660fe664c707078726780001e2e922013800160f779f0e660fe664c707078726780001e2e922013800160f779e670f3fe0e3e7339f331e780001e8e988019800160f779e670f3fe0e3e7339f331e780001e8e9880198001604779e079f3ffee707339f033e780001e2e9220138001604779e079f3ffee707339f033e780001e2e9220138001604779e7f0f27fee70733933f3e780001e8e9880198001604779e7f0f27fee70733933f3e780001e8e988019800160f779f0e678fe7e7c333c7873e780001e2e922013800160f779f0e678fe7e7c333c7873e780001e2e9220138000f0077f7ff04fe780001e8e9880198000f0077f7ff04fe780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e9220138000e0070f60003780001e8e9880198000e0070f60003780001e8e9880198000e0070f60003780001e2e9220138000e0070f60003780001e2e922013800140070fd000201ff80fd0003780001e8e988019800140070fd000201ff80fd0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800160070fe000407800001e0fe0003780001e8e98801980098002a012c000001770148012c000001770146012c0000017701460001160070fe000407800001e0fe0003780001e8e988019800160070fe00041800180018fe0003780001e2e922013800160070fe00041800180018fe0003780001e2e922013800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e8e988019800160070fe00046000180006fe0003780001e2e922013800160070fe00046000180006fe0003780001e2e922013800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e8e988019800160f700000018000180001800000780001e2e922013800160f700000018000180001800000780001e2e922013800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e8e988019800160f700000060000180000600000780001e2e922013800160f700000060000180000600000780001e2e922013800160f700000060000060000600000780001e8e988019800160f700000060000060000600000780001e8e988019800160f700000018000018001800000780001e2e922013800160f700000018000018001800000780001e2e922013800160f700000018000006001800000780001e8e988019800160f700000018000006001800000780001e8e988019800160070fe00046000001806fe0003780001e2e922013800160070fe00046000001806fe0003780001e2e922013800160070fe00046000000606fe0003780001e8e988019800160070fe00046000000606fe0003780001e8e988019800160070fe000018fe000018fe0003780001e2e922013800160070fe000018fe000018fe0003780001e2e922013800160070fe000407800001e0fe0003780001e8e988019800160070fe000407800001e0fe0003780001e8e988019800140070fd00027e007efd0003780001e2e922013800140070fd00027e007efd0003780001e2e922013800140070fd000201ff80fd00037fffffe8e988019800140070fd000201ff80fd00037fffffe8e9880198000e0070f600037fffffe2e9220138000e0070f600037fffffe2e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000e0070f60003607fe062e9220138000e0070f60003607fe062e922013800120070fe00010fc6fb00fe600068e988019800120070fe00010fc6fb00fe600068e988019800110070fe000003fa00fe600062e922013800110070fe000003fa00fe600062e922013800140070fe0003030e7f0ffd00fe600068e988019800140070fe0003030e7f0ffd00fe600068e988019800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9980fe000367e07e62e922013800160070fe000403066d9f80fe000361801868e988019800160070fe000403066d9f80fe000361801868e988019800140070fe000303066d98fd00fe600062e922013800140070fe000303066d98fd00fe600062e922013800150070fe0003030f6d8ffd000360198068e988019800150070fe0003030f6d8ffd000360198068e9880198000e0070f6000360060062e9220138000e0070f6000360060062e9220138000e0070f6000360000068e9880198000e0070f6000360000068e9880198000b007ff3ff00e2e9220138000b007ff3ff00e2e9220138000f0070fd0000f0f80000e8e9880198000f0070fd0000f0f80000e8e988019800150a70001801e0f0000019800efd0000e2e922013800150a70001801e0f0000019800efd0000e2e922013800150a7000780260f00000198006fd0000e8e988019800150a7000780260f00000198006fd0000e8e988019800160b70c6180660f00000198f061ffe0000e2e922013800160b70c6180660f00000198f061ffe0000e2e922013800160f70c6180660f000001f998619800000e8e988019800160f70c6180660f000001f998619800000e8e988019800160f706c180660f00000199f8619800000e2e922013800160f706c180660f00000199f8619800000e2e922013800160f706c180640f0000019980619800000e8e988019800160f706c180640f0000019980619800000e8e988019800160b70387e6780f00000198f0f1ffe0000e2e922013800160b70387e6780f00000198f0f1ffe0000e2e92201380098002a01770000017c014801770000017c014601770000017c01460001130070fd0000f0fc000018fe0000e8e988019800130070fd0000f0fc000018fe0000e8e98801980007007fdaff01f80007007fdaff01f80002d700a0008fa00083ff}}{\tab }{{\pict{\*\picprop\shplid1049{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw387\pich378\picwgoal7740\pichgoal7560\macpict\bliptag3408740\blipupi72{\*\blipuid 00340364c76202c5ae82cc2c87d7c6bf}18e500000000017a01831101a00082a0008e01000a0000000002d0024098003200000000003f018800000000003f018300000000003f0183000105d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0002105c0003f3f0f31febf03003f0006fd00041f00000e06fd0002060180ee0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c0001d0bc00031b18631863031803180fc00033180001bfc000006ec0001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec00031b186398630318031b78e319f3780301f3f180e1f318de7cfc387cfc0f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec0003f3f0635863f3f0031b80631b1b8003031b1bf0631b18e0066018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303606338630360031b00631bfb0003031b1980631b18c07e6018c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec000303306318630330031b0061b30300031b1b198061fb38c0c66618c6c60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c000251ec01830318f31863fb1803f300f0e1fb0001f1f31980f019d8c07e3c3c7cc60f00001c0000b00c0ec00001fe80001c0000b00c0ec00001fe80001c00005d1ff01c00005d1ff01c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0001009c0018060f1ffe7ffc006db0001c0001009c0018060f1ffe7ffc006db0001c0001009c001804e79ffe7ffc00edb0001c0001009c001804e79ffe7ffc00edb0001c0001009c003004ff9e0c0f9c006db0001c0001009c003004ff9e0c0f9c006db0001c0001009c0330060f9ce67ffc006db0001c0001009c0330060f9ce67ffc006db0001c0001009c01e007e79ce67f9c006db0001c0001009c01e007e79ce67f9c006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c004e79ce667fc006db0001c0001009c00c0060f0e0f0ffc00fdb0001c0001009c00c0060f0e0f0ffc00fdb0001c0000e03c000007ffdff00c0da0001c0000e03c000007ffdff00c0da0001c0001004c001803006f30001079fe60001c0001004c001803006f30001079fe60001c0001003c0018030f200021c3180e70001c0001003c0018030f200021c3180e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c0dc00300300e3f1f1f003f1f37803ffe1f040600303380e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c03300300631b1b00031b1b8003181b1b180003f3580e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c01e00300631bf9f0031bfb000319fb1bf860031b980e70001c0001c15c00c00300631b001803f3030003f319fb0000031b180e70001c000980032003f0000007e0188003f0000007e0183003f0000007e018300011c15c00c00300631b001803f3030003f319fb0000031b180e70001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001b14c00c003f8f319f9f00301fb000301f819f80001f1fe60001c0001100c0f9000030fe000230001fe10001c0001100c0f9000030fe000230001fe10001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002205c001801f000ef800010e06fd000d033f3f0e318001800e00000e1818f40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002105c00180318006f8000006fc000d0631b19b3b8001801b000006180cf40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c00300301f0631bbbf1f003f1f3780060e3f1f06000c31b1b1b5801f9f181f31863f06f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c0330030318631b5b1b00031b1b800060631b18000183f3f31b58031b1bf01b1861803f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c01e0030318631b5b19f0031bfb000060631bf86000c31b63fb18031bf981fb1861806f40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c0031b18633b5b181803f303000060631b000000631b331b18031b01831b386198cf40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0002922c00c001f1f0f1db1b19f00301fb0000f0f319f8000033f31b1b1801f9f981f9d8f0f18f40001c0000b00c0f7000030dd0001c0000b00c0f7000030dd0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c0003115c001803f000e001800000e0600001800303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818fc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000310ac00180318006001800001bfe00071800303000001b18fe001131b180000631b19b3b8001801b000006180cfc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac00300319f061f3f1f00180e379f3f003030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac0330031b186319831803f0638301800303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac01e0031bf863f983f801806301f18003030001f98183fb000303606000c31b63fb18031bf981fb1861806fc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c0031b0063019b000180630019980303000319819b0300031b300000631b331b18031b01831b386198cfc0001c000312ac00c003f1f8f1f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c000312ac00c003f1f001f8f1f80180f301f0f003fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18fc0001c0000700c0d20001c0000700c0d20001c0000d06c001800e018180d80001c000280cc001800e018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303f80000e18fe00111f3f0000033f3f0e318001800e00000e1818f30001c000280cc001801b018180303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c000280cc00300319f9f80303000001b18fe001131b180000631b19b3b8001801b000006180cf30001c0002821c00300319f9f803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b1803030001f183f1f3780303186000c31b1b1b5801f9f181f31863f06f30001c0002821c0330031b1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b180303f0001bf1831b800303f0000183f3f31b58031b1bf01b1861803f30001c0002821c01e003fb1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b1803030001f98183fb000303606000c31b63fb18031bf981fb1861806f30001c0002821c00c0031b1b180303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f80303000319819b0300031b300000631b331b18031b01831b386198cf30001c0002821c00c00319f9f803fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0002500c0fb001a3fb0001f980f1fb0001f318000033f31b1b1801f9f981f9d8f0f18f30001c0000700c0d20001c0001104c001803f80fb0002319f3fdf0001c0001504c001803f80fb0006319f3f00003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001403c0018006fa00063bb1b180003180e30001c0001811c003000631b7bf001f3f0035b03186003180e30001c0001912c003000631b7bf001f3f0035b03186001b1f1fe40001c0001912c033000631b8318031b180359f3f00001b1f1fe40001c0001912c033000631b8318031b180359f3f00000631b0e40001c0001912c01e000631b0318031b1803181b186000631b0e40001c0001912c01e000631b0318031b1803181b18600063f9fe40001c000980032007e000000bd0188007e000000bd0183007e000000bd018300011912c00c000633b0318031b18031b1b18000063f9fe40001c0001a13c00c000633b0318031b18031b1b1800006300180e50001c0001a13c00c00061db031801f3180319f3f000006300180e50001c0001912c00c00061db031801f3180319f3f0000061f9fe40001c0000d00c0f20002061f9fe40001c0000700c0d20001c000120bc001800f0006180000180006dd0001c0001a0bc001800f0006180000180006fd000003fd000018e70001c0001809c0018006000018000018fb000003fd000018e70001c0001809c0018006000018000018fb000006fd00000ce70001c0001b10c00300063f0e3f001f3f378e3f1f060006fd00000ce70001c0001c15c00300063f0e3f001f3f378e3f1f06000c3f1f3f1f06e70001c0001c15c0330006318618003018380631b180000c3f1f3f1f06e70001c0001c11c0330006318618003018380631b180001831feb10083e70001c0001c11c01e0006318618001f18300631b186001831feb10083e70001c0001c15c01e0006318618001f18300631b186000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000c31b1b1bf86e70001c0001c15c00c0006318619800199b006319f80000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f318180000631b1b1b00ce70001c0001c15c00c000f318f0f001f0f300f3181800003319f319f98e70001c0001300c0f500081f000003319f319f98e70001c0000b00c0f500001fdf0001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200bd000000fc018800bd000000fc018300bd000000fc018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c00098003200fc0000013b018800fc0000013b018300fc0000013b018300010700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000700c0d20001c0000c00c0d900010180fc0001c0000c00c0d900010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002e00c0fd00121f000e00001800000600060006000600001f80fe00040e00003f80fe00001ffc00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0002d00c0fd001131800600001800000c00030006000f000030fd000306000030fd00013180fd00010180fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd0025301f061f1fbf06001800018006001f8000301f3f1f9f060600301f1f8000301f319f06000980fc0001c0003000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c000980032013b0000017a0188013b0000017a0183013b0000017a018300013000c0fd00251f318631b01800003fc03fc036c036c0003001b1b0318600003f303000001f01b1b180001980fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0003000c0fd002501bf863fb0180600180001801f80060000301fb1b03f860600301f300000019fb1bf86003f80fc0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd002431b00630301980000c0003000f000600003031b1b0300600003001b0000031b19b30000018fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0002f00c0fd00241f1f8f1f9f8f00000600060006000600001f9fb19f9f8f00003f9f1f80001f1f8e1f800008fb0001c0000700c0d20001c0000700c0d20001c00005d1ff01c00005d1ff01c00002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf0002cf00a0008fa00083ff}}{\par }\pard \qc\keepn\widctlpar\tqr\tx7920\adjustright {\fs20 \par }\pard \qc\widctlpar\tqr\tx7920\adjustright {\fs20 Figure 8.4:  Text Printer Configuration Screens\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li2160\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\adjustright {\fs20 Option\tab Description\par }\pard \qj\fi-1080\li2160\widctlpar\tx2520\adjustright {\fs20 \par Slot\tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:slot}}}{\fs20 This entry is the physical slot where your printer is located.\par Lines per page\par \tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:lines per page}}}{\fs20 This entry is a single number, telling the printer driver how many lines appear on a sheet of paper.  Most printers print 66 lines on a normal letter-size sheet of paper; it is traditional to print on 60 of those lines and leave the top and bottom 3 lines blank to form a margin.  When the printer driver finishes printing the number of lines you specify, it issues a form-feed character ($0C), which causes most printers to skip to the top of a new page.\par \tab \tab If you set this value to 0, the printer driver will never issue a form-feed character.\par Columns per line\par \tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:characters per line}}}{\fs20 This option is a single number telling the printer driver how many columns are on a sheet of paper.  Most printers print 80 columns on a normal letter-size sheet of paper.  If you use a value of -1, the printer driver will never split a line.  (Using the CDA configuration program, the value before 0 shows up as BRAM default; you can use the normal control panel printer configuration page to set the line length to unlimited.)  What your printer does with a line that is too long is something you would have to determine be trial and error.\par Delete LF\tab Some printers need a carriage-return line-feed character sequence to get to the start of a new line, while others only need a carriage-return.  Some programs write a carriage-return line-feed combination, while others only write a carriage-return.  This option lets you tell the printer driver to strip a line-feed character if it comes right after a carriage-return character, blocking extra line-feed characters coming in from programs that print both characters.\par \tab \tab You can select three options here:  Yes, No, or BRAM Default.  The Yes option strips extra line-feeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have selected using the printer configuration program in the control panel.\par Add LF\tab Some printers need a carriage-return line-feed character sequence to get to the start of a new line, while others only need a carriage-return.  This option lets you tell the printer driver to add a line-feed character after any carriage-return character that is printed.\par \tab \tab You can select three options here:  Yes, No, or BRAM Default.  The Yes option adds a line-feeds, while the No option does not.  The BRAM Default option tells the printer driver to use whatever value is in the BRAM; this is the same value you would have selected using the printer configuration program in the control panel.\par Turn on MSB\par \tab This line is a flag indicating whether the printer driver should set the most significant bit when writing characters to the printer.  If this value is Yes the printer driver will set the most significant bit on all characters before sending the characters to the printer.  If you code any number other than 0, the most significant bit will be cleared before the character is sent to the printer.\par Init string\tab }{\pard\plain \qj\fi-1080\li2160\widctlpar\tx2520\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\:control characters}}}{\fs20 This option sets a printer initialization string.  This string is sent to the printer when the driver is used for the first time.  With most printers and interface cards, there is some special code you can use to tell the printer that the characters that follow are special control codes.  These codes are often used to control the character density, number of lines per page, font, and so forth.  This initialization string, sent to the printer by the .PRINTER driver the first time the printer is used, is the traditional way of setting up your favorite defaults.\par \tab \tab You will find many cases when you will need to send a control character to the printer as part of this initialization string.  To do that using the CDev configuration program precede the character with a ~ character.  For example, an escape character is actually a control-[, so you could use ~[ to send an escape character to the printer.  The printer driver does not do any error checking when you use the ~ character, it simply subtracts $40 from the ASCII code for the character that follows the ~ character, and sends the result to the printer.  For example, g is not a control character, but ~g would still send a value, $27, to the printer.  From the CDA configuration program, just type the control character in the normal way; it will show up as an inverse character on the display.\par \tab \tab That manual that comes with your printer should have a list of the control codes you can use to configure the printer.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Table 8.5:  Text Printer Configuration Options\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The .PRINTER driver is a copyrighted program.  If you would like to send it out with your own programs, refer to Appendix C for licensing details.  (Licensing is free, but you need to include our copyright message.)\par }\pard \qj\fi360\keep\widctlpar\adjustright {\*\bkmkend bk15}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printers\bxe }{\rxe bk15}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The .NULL Driver}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The .NULL Driver\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\v\fs20 .NULL;}{\pard\plain \qj\fi360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices\:.NULL}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The .NULL driver is a second driver available from GS/OS once it is installed from ORCA}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA}}}{\fs20 .  This driver is primarily used in shell scripts in situations where a shell program or command is writing output you don't want to see on the screen while the script runs.  In that case, you can redirect the output to .NULL.  The .NULL driver does nothing with the character, so the characters are effectively ignored by the system.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pipelines}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pipelines\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSPIPEx files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA lets you automatically execute two or more programs in sequence, directing the output of one program to the input of the next.  The output of each program but the last is written to a temporary file in the work subdirectory named SYSPIPE}{\i\fs20 n}{\fs20 , where }{\i\fs20 n}{\fs20  is a number assigned by ORCA.  The first temporary file opened is assigned an }{\i\fs20 n}{\fs20  of 0; if a second SYSPIPE}{\i\fs20 n}{\fs20  file is opened for a given pipeline, then it is named SYSPIPE1, and so forth.\par To }{\i\fs20 pipeline}{\fs20 , or sequentially execute programs PROG0, PROG1, and PROG2, use the following command:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 PROG0|PROG1|PROG2\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par The output of PROG0 is written to SYSPIPE0; the input for PROG1 is taken from SYSPIPE0, and the output is written to SYSPIPE1.  The input for PROG2 is taken from SYSPIPE1, and the output is written to standard output.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 SYSPIPE}{\i\fs20 n}{\fs20  files are text files and can be opened by the editor.\par For example, if you had a utility program called UPPER that took characters from standard input, converted them to uppercase, and wrote them to standard output, you could use the following command line to write the contents of the text file MYFILE to the screen as all uppercase characters:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 TYPE MYFILE|UPPER\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To send the output to the file MYUPFILE rather than to the screen, use the following command line:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 TYPE MYFILE|UPPER >MYUPFILE \par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The SYSPIPE}{\i\fs20 n}{\fs20  files are not deleted by ORCA after the pipeline operation is complete; thus, you can use the editor to examine the intermediate steps of a pipeline as an aid to finding errors.  The next time a pipeline is executed, however, any existing SYSPIPE}{\i\fs20 n}{\fs20  files are overwritten.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Command Table}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 The Command Table\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v command table\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v SYSCMND file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v Shell prefix}}}{\v \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v prefixes\:numbers}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:command types}}}{\v \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:built-in commands}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:utility commands}}}{\v \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v shell commands\:language names}}}{\v \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The command table is an ASCII text file, which you can change with the editor, or replace entirely.  It is named SYSCMND, and located in the SHELL prefix of your ORCA program disk.  The format of the command table is very simple.  Each line is either a comment line or a command definition.  Comment lines are blank lines or lines with a semicolon (;) in column one.  Command lines have four fields: the command name, the command type, the command or language number, and a comment.  The fields are separated by one or more blanks or tabs.  The first field is the name of the command.  It can be any legal GS/OS file name.  Prefixes are not allowed.  The second field is the command type.  This can be a C (built-in command), U (utility), or L (language).  The third field of a built-in command definition is the command number; the third field of a language is its language number; utilities do not use the third field.  An optional comment field can follow any command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ALIAS command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMANDS command}}}{\v\fs20 \par }{\fs20 Built-in commands are those that are predefined within the command processor, like the CATALOG command.  Being able to edit the command table means that you can change the name of these commands, add aliases for them, or even remove them, but you cannot add a built-in command.  As an example, UNIX fans might like to change the CATALOG command to be LS.  You would do this by editing the command table.  Enter LS as the command name, in column one.  Enter a C, for built-in command, in column two.  Enter the command number 4, obtained from looking at the command number for CATALOG in the command table, in column three.  Exit the editor, saving the modified SYSCMND file.  Reload the new command table by rebooting or by issuing the COMMANDS command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Languages prefix}}}{\fs20 Languages define the languages available on the system.  You might change the language commands by adding a new language, like ORCA/Modula-2.  The first field contains the name of the EXE file stored in the LANGUAGES subdirectory of your ORCA system.  The second field is the letter L, and the third the language number.  The L can be preceded by an asterisk, which indicates that the assembler or compiler can be restarted.  That is, it need not be reloaded from disk every time it is invoked.  The ORCA/Modula-2 compiler, linker, and editor can all be restarted.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 restartable programs}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:utility commands}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\fs20 The last type of command is the utility.  Utilities are easy to add to the system, and will therefore be the most commonly changed item in the command table.  The first field contains the name of the utility's EXE file stored in the UTILITIES subdirectory of your ORCA system.  The second field is a U.  The third field is not needed, and is ignored if present.  As with languages, utilities that can be restarted are denoted in the command table by preceding the U with an asterisk.  Programs that can be restarted are left in memory after they have been executed.  If they are called again before the memory they are occupying is needed, the shell does not have to reload the file from disk.  This can dramatically increase the performance of the system.  Keep in mind that not all programs can be restarted!  You should not mark a program as one that can be restarted unless you are sure that it really can be safely restarted.\par As an example of what has been covered so far, the command table shipped with the system is shown in Table 8.6.\par }\pard \qc\widctlpar\adjustright {\par }\pard \li1440\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 ;\par ;  ORCA Command Table\par ;\par ALIAS\tab \tab C\tab 40\tab \tab alias a command\par ASM65816\tab *L\tab 3\tab \tab 65816 assembler\par ASML\tab \tab C\tab 1\tab \tab assemble and link\par ASMLG\tab \tab C\tab 2\tab \tab assemble, link and execute\par ASSEMBLE\tab C\tab 3\tab \tab assemble\par BREAK\tab \tab C\tab 25\tab \tab break from loop\par CAT\tab \tab C\tab 4\tab \tab catalog\par CATALOG\tab \tab C\tab 4\tab \tab catalog\par CC\tab \tab *L\tab 8\tab \tab ORCA/C compiler\par CHANGE\tab \tab C\tab 20\tab \tab change language stamp\par CMPL\tab \tab C\tab 1\tab \tab compile and link\par CMPLG\tab \tab C\tab 2\tab \tab compile, link and execute\par COMMANDS\tab C\tab 35\tab \tab read command table\par COMPACT\tab \tab *U\tab \tab \tab compact OMF files\par COMPILE\tab \tab C\tab 3\tab \tab compile\par COMPRESS\tab C\tab 32\tab \tab compress/alphabetize directories\par CONTINUE\tab C\tab 26\tab \tab continue a loop\par COPY\tab \tab C\tab 5\tab \tab copy files/directories/disks\par CREATE\tab \tab C\tab 6\tab \tab create a subdirectory\par CRUNCH\tab \tab *U\tab \tab \tab combine object modules\par DELETE\tab \tab C\tab 7\tab \tab delete a file\par DEREZ\tab \tab *U\tab \tab \tab resource decompiler\par DEVICES\tab \tab C\tab 48\tab \tab Show Devices\par DISABLE\tab \tab C\tab 8\tab \tab disable file attributes\par DISKCHECK\tab U\tab \tab \tab check integrity of ProDOS disks\par DUMPOBJ\tab \tab U\tab \tab \tab object module dumper\par EDIT\tab \tab *C\tab 9\tab \tab edit a file\par ECHO\tab \tab C\tab 29\tab \tab print from an exec file\par ELSE\tab \tab C\tab 31\tab \tab part of an IF statement\par ENABLE\tab \tab C\tab 10\tab \tab enable file attributes\par END\tab \tab C\tab 23\tab \tab end an IF, FOR, or LOOP\par ENTAB\tab \tab *U\tab \tab \tab entab utility\par ERASE\tab \tab C\tab 44\tab \tab Erase entire volume.\par EXEC\tab \tab L\tab 6\tab \tab EXEC language\par EXECUTE\tab \tab C\tab 38\tab \tab EXEC with changes to local variables\par EXISTS\tab \tab C\tab 19\tab \tab see if a file exists\par EXIT\tab \tab C\tab 27\tab \tab exit a loop\par EXPORT\tab \tab C\tab 36\tab \tab export a shell variable\par EXPRESS\tab \tab U\tab \tab \tab converts files to ExpressLoad format\par FILETYPE\tab C\tab 21\tab \tab change the type of a file\par FOR\tab \tab C\tab 22\tab \tab for loop\par GSBUG\tab \tab U\tab \tab \tab application version of debugger\par HELP\tab \tab C\tab 11\tab \tab online help\par HISTORY\tab \tab C\tab 39\tab \tab display last 20 commands\par HOME\tab \tab C\tab 43\tab \tab clear the screen and home the cursor\par IF\tab \tab C\tab 30\tab \tab conditional branch\par INIT\tab \tab C\tab 45\tab \tab initialize disks\par INPUT\tab \tab C\tab 13\tab \tab read a value from the command line\par LINK\tab \tab *C\tab 12\tab \tab link\par LINKER\tab \tab *L\tab 265\tab \tab command line linker script\par LOOP\tab \tab C\tab 24\tab \tab loop statement\par MACGEN\tab \tab U\tab \tab \tab generate a macro file\par MAKEBIN\tab \tab U\tab \tab \tab convert load file to a binary file\par MAKELIB\tab \tab U\tab \tab \tab librarian\par MOVE\tab \tab C\tab 34\tab \tab move files\par MODULA2\tab \tab *L\tab 272\tab \tab Modula-2 compiler\par PREFIX\tab \tab C\tab 14\tab \tab set system prefix\par PRIZM\tab \tab U\tab \tab \tab desktop development system\par PRODOS\tab \tab L\tab 0\tab \tab ProDOS language\par QUIT\tab \tab C\tab 15\tab \tab exit from ORCA\par RENAME\tab \tab C\tab 16\tab \tab rename files\par RESEQUAL\tab *U\tab \tab \tab compares resource forks\par REZ\tab \tab *L\tab 21\tab \tab resource compiler\par RUN\tab \tab C\tab 2\tab \tab compile, link and execute\par SET\tab \tab C\tab 28\tab \tab set a variable\par SHOW\tab \tab C\tab 17\tab \tab show system attributes\par SWITCH\tab \tab C\tab 33\tab \tab switch order of files\par SHUTDOWN\tab C\tab 47\tab \tab shut down the computer\par TEXT\tab \tab L\tab 1\tab \tab Text file\par TOUCH\tab \tab C\tab 46\tab \tab Update date/time\par TYPE\tab \tab C\tab 18\tab \tab list a file to standard out\par UNALIAS\tab \tab C\tab 41\tab \tab delete an alias\par }\pard \li1440\keepn\widctlpar\tx2160\tx2880\tx3600\tx4140\adjustright {\f6\fs14 UNSET\tab \tab C\tab 37\tab \tab delete a shell variable\par *\tab \tab C\tab 42\tab \tab comment\par }\pard \fi-270\li720\keep\keepn\widctlpar\adjustright {\f6\fs14 \par }\pard \qc\keep\keepn\widctlpar\adjustright {\fs20 Table 8.6   System Commands\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Command And Utility Reference}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Command And Utility Reference\tcl2}}}{\b\fs28 \par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each of the commands and utilities than ship with ORCA/Modula-2 are listed in alphabetic order.  The syntax for the command is given, followed by a description and any parameters using the following notation:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\fs20 UPPERCASE}{\fs20 \tab \tab Uppercase letters indicate a command name or an option that must be spelled exactly as shown.  The shell is not case sensitive; that is, you can enter commands in any combination of uppercase and lowercase letters.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 italics}{\fs20 \tab \tab Italics indicate a variable, such as a file name or address.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 directory}{\fs20 \tab \tab This parameter indicates any valid directory path name or partial path name.  It does }{\i\fs20 not}{\fs20  include a file name.  If the volume name is included, }{\i\fs20 directory}{\fs20  must start with a slash (/) or colon (:); if }{\i\fs20 directory}{\fs20  does not start with one of these characters, then the current prefix is assumed.  For example, if you are copying a file to the subdirectory SUBDIRECTORY on the volume VOLUME}{\i\fs20 ,}{\fs20  then the }{\i\fs20 directory }{\fs20 parameter would be:  :VOLUME:SUBDIRECTORY.  If the current prefix were :VOLUME:, then you could use SUBDIRECTORY for }{\i\fs20 pathname .}{\fs20 \par \tab \tab The device numbers .D1, .D2, ... .D}{\i\fs20 n}{\fs20  can be used for volume names; if you use a device name, do not precede it with a slash.  For example, if the volume VOLUME in the above example were in disk drive .D1, then you could enter the }{\i\fs20 directory}{\fs20  parameter as .D1:SUBDIRECTORY.\par \tab \tab GS/OS device names can be used for the volume names.  Device names are the names listed by the SHOW UNITS command; they start with a period.  You should not precede a device name with a slash.\par \tab \tab GS/OS prefix numbers can be used for directory prefixes.  An asterisk (*) can be used to indicate the boot disk.  Two periods (..) can be used to indicate one subdirectory above the current subdirectory.  If you use one of these substitutes for a prefix, do not precede it with a slash.  For example, the HELP subdirectory on the ORCA disk can be entered as 6:HELP.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 filename}{\fs20 \tab \tab This parameter indicates a file name, }{\i\fs20 not}{\fs20  including the prefix.  The device names .CONSOLE and .PRINTER can be used as file names.  Other character devices can also be used as file names, but a block device (like the name of a disk drive) cannot be used as a file name.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2160\adjustright {\fs20 \par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\b\i\fs20 pathname}{\fs20 \tab \tab This parameter indicates a full path name, including the prefix and file name, or a partial path name, in which the current prefix is assumed.  For example, if a file is named FILE in the subdirectory DIRECTORY on the volume VOLUME, then the }{\i\fs20 pathname }{\fs20 parameter would be:  :VOLUME:DIRECTORY:FILE.  If the current prefix were :VOLUME:, then you could use DIRECTORY:FILE for }{\i\fs20 pathname . }{\fs20  A full path name (including the volume name) must begin with a slash (/) or colon (:); do }{\i\fs20 not}{\fs20  precede }{\i\fs20 pathname }{\fs20  with a slash if you are using a partial path name.\par \tab \tab Character device names, like .CONSOLE and .PRINTER, can be used as file names; the device numbers .D1, .D2, ... .D}{\i\fs20 n}{\fs20  can be used for volume names; GS/OS device names can be used a volume names; and GS/OS prefix numbers, an asterisk (*), or double periods (..) can be used instead of a prefix.\par \par }{\b\fs20 |}{\fs20 \tab \tab A vertical bar indicates a choice.  For example, +L|-L indicates that the command can be entered as either +L or as -L.\par \par }{\b\fs20 A|}{\b\fs20\ul B}{\fs20 \tab \tab An underlined choice is the default value.\par \par }\pard \fi-1901\li2160\widctlpar\tx2520\adjustright {\b\fs20 [ ]}{\fs20 \tab \tab Parameters enclosed in square brackets are optional.\par }\pard \qj\fi-1901\li2160\widctlpar\tx2520\adjustright {\fs20 \par }{\b\i\fs20 ...}{\fs20 \tab \tab Ellipses indicate that a parameter or sequence of parameters can be repeated as many times as you wish.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ALIAS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ALIAS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 ALIAS [}{\i\f6\fs20 name}{\f6\fs20  [}{\i\f6\fs20 string}{\f6\fs20 ]]\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ALIAS command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ALIAS command allows you to create new commands based on existing ones.  It creates an alias called }{\i\fs20 name}{\fs20 , which can then be typed from the command line as if it were a command.  When you type the name, the command processor substitutes }{\i\fs20 string}{\fs20  for the name before trying to execute the command.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DUMPOBJ utility}}}{\v\fs20 \par }{\fs20 For example, let's assume you dump hexadecimal files with the DUMPOBJ file fairly frequently.  Remembering and typing the three flags necessary to do this can be a hassle, so you might use the ALIAS command to define a new command called DUMP.  The command you would use would be\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 ALIAS  DUMP  DUMPOBJ -F +X -H\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Now, to dump MYFILE in hexadecimal format, type\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 DUMP MYFILE\par }{\fs20 \par You can create a single alias that executes multiple commands by enclosing a string in quotes.  For example,\par \par }{\f6\fs18 ALIAS GO "CMPL MYFILE.ASM; FILETYPE MYFILE S16; MYFILE"\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 creates a new command called GO.  This new command compiles and links a program, changes the file type to S16, and then executes the program.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The name and string parameters are optional.  If a name is specified, but the string is omitted, the current alias for that name will be listed.  If both the name and the string are omitted, a list of all current aliases and their values is printed.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }{\fs20 Aliases are automatically exported from the LOGIN file to the command level.  This means that any aliases created in the LOGIN file are available for the remainder of the session, or until you specifically delete or modify the alias.  Aliases created in an EXEC file are available in that EXEC file and any other it calls, but not to the command level.  See the EXECUTE command for a way to override this.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNALIAS command}}}{\v\fs20 \par }{\fs20 See the UNALIAS command for a way to remove an alias.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASM65816}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASM65816\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 ASM65816\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASM65816 command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to 65816 Assembly Language.\par While you can set the language and create assembly language files, you will not be able to assemble them unless you purchase the ORCA/M macro assembler and install it with ORCA/Modula-2.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASML}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASML\tcl3}}}{\b \par }\pard \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\f6\fs20 ASML\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linking a program}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command assembles (or compiles) and links a source file.  The ORCA shell checks the language of the source file and calls the appropriate assembler or compiler.  If the maximum error level returned by the assembler or compiler is less than or equal to the maximum allowed (0 unless you specify otherwise with the MERR directive or its equivalent in the source file), then the resulting object file is linked.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MERR directive}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APPEND directive}}}{\v\fs20 \par }{\fs20 You can use APPEND directives (or the equivalent) to tie together source files written in different computer languages; ORCA compilers and assemblers check the language type of each file and return control to the shell when a different language must be called.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:parameters}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASSEMBLE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPILE command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command}}}{\v\fs20 \par }{\fs20 Not all compilers or assemblers make use of all the parameters provided by this command (and the ASSEMBLE, ASMLG, COMPILE, CMPL, CMPLG, and RUN commands, which use the same parameters).  If you include a parameter that a compiler or assembler cannot use, it ignores it; no error is generated.  If you used append statements to tie together source files in more than one language, then all parameters are passed to every compiler, and each compiler uses those parameters that it recognizes.\par Command-line parameters (those described here) override source-code options when there is a conflict.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 +D|-D\tab +D causes debug code to be generated so that the source-level debugger may be used later when debugging the program.  -D, the default, causes debug code to not be generated.\par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:compiler}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +E|-E\tab When a terminal error is encountered during a compile from the command line, the compiler aborts and enters the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.  From an EXEC file, the default is to display the error message and return to the shell.  The +E flag will cause the compiler to abort to the editor, while the -E flag causes the compiler to abort to the shell.\par \par -I\tab When the ORCA/C compiler compiles a program, it normally creates a .sym file in the same location as the original source file.  This flag tells the compiler not to create a .sym file, and to ignore any existing .sym file.  This flag is not used by the ORCA/Modula-2 compiler.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler listings}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LIST directive}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link map}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +L|-L\tab If you specify +L, the assembler or compiler generates a source listing; if you specify -L, the listing is not produced.  The L parameter in this command overrides the LIST directive in the source file.  +L will cause the linker to produce a link map.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +M|-M\tab +M causes any object modules produced by the assembler or compiler to be written to memory, rather than to disk.\par \par }\pard \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 labels\: global}}}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 symbol tables\:linker}}}{\v\fs20 END directive;}{\pard\plain \qj\fi-990\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END directive}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +O|-O\tab This flag is used by ORCA/C and ORCA/Pascal to control the optimizer.  It is not used by ORCA/Modula-2.\par \par +P|-P\tab The compiler, linker, and many other languages print progress information as the various subroutines are processed.  The -P flag can be used to suppress this progress information.\par \par -R\tab ORCA/C can detect changes in the source file or object files that would make it necessary to rebuild the .sym file.  This flag bypasses the automatic check, forcing the compiler to rebuild the .sym file.  ORCA/Modula-2 does not use this flag.\par \par +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all global references in the object file; the assembler or compiler may also produce a symbol table, although the ORCA/Modula-2 compiler does not.  If you specify -S, these symbol tables are not produced.  The S parameter in this command overrides the SYMBOL directive in the source file.\par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \par }\pard \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 terminal errors}}}{\v\fs20 \par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +T|-T\tab The +T flag causes all errors to be treated as terminal errors, aborting the compile.  This is normally used in conjunction with +E.  In that case, any error will cause the compiler to abort and enter the editor with the cursor on the offending line, and the error message displayed in the editor's information bar.}{\i\fs20 \par }{\fs20 \par }\pard \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\v\fs20 .}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:status banner}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wait flag}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\caps\v\fs20 abort}{\v\fs20  command}{\caps\v\fs20 }}}{\v\fs20 \par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 +W|-W\tab Normally, the compiler continues compiling a program after an error has been found.  If the +W flag is specified, the assembler or compiler will stop after finding an error, and wait for a keypress.  Pressing }{\outl\fs20 \u-3\'f0}{\fs20 . will abort the compile, entering the editor with the cursor on the offending line.  Press any other key to continue the compile.}{\i\fs20 \par \par sourcefile}{\fs20 \tab The full path name or partial path name (including the file name) of the source file.\par \par }\pard \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\pard\plain \qj\fi-994\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 partial compilation}}}{\v\fs20 \par }\pard \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 KEEP=}{\i\fs20 outfile}{\fs20   You can use this parameter to specify the path name or partial path name (including the file name) of the output file.  For a program module, ORCA/Modula-2 names the object file }{\i\fs20 outfile}{\fs20 .ROOT; there is no root file in an implementation module.  Procedures and variables are placed in a file called }{\i\fs20 outfile}{\fs20 .A.  If the compilation is followed by a successful link, then the load file is named }{\i\fs20 outfile.}{\fs20 \par }{\pard\plain \qj\fi-994\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP directive}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\i\fs20 \tab \tab }{\fs20 This parameter has the same effect as placing a KEEP directive in your source file.  If you have a KEEP directive in the source file and you also use the KEEP parameter, this parameter has precedence.\par }{\pard\plain \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:metacharacters}}}{\v\fs20 \par }{\fs20 \tab \tab When specifying a KEEP parameter, you can use two metacharacters to modify the KEEP name.  If the % character is found in the keep name, the source file name is substituted.  If $ is encountered, the source file name with the last extension removed is substituted.\par }{\b\fs20 \tab \tab }{\fs20 Note the following about the KEEP parameter:\par }\pard \qj\fi-360\li1800\widctlpar\tx1800\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\tx1440\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\keepn\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepName\} shell variable}}}{\v\fs20 \par }\pard \qj\fi-360\li1800\widctlpar\tx1800\adjustright {\fs20 \bullet \tab If you use neither the KEEP parameter, the \{KeepName\} variable, nor the KEEP directive, then the object files are not saved at all.  In this case, the link cannot be performed, because there is no object file to link.\par }{\pard\plain \qj\fi-360\li1800\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\v\fs20 \par }{\fs20 \par \bullet \tab The file name you specify in }{\i\fs20 outfile}{\fs20  must not be over 10 characters long.  This is because the extension .ROOT is appended to the name, and GS/OS does not allow file names longer than 15 characters.\par \par \bullet \tab By default, PRIZM uses $ as the keep name.  When you are using PRIZM, do not specify the keep name any other way unless in agrees with the keep name PRIZM will generate by default.\par }{\pard\plain \qj\fi-360\li1800\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 code segment}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \par NAMES=(}{\i\fs20 seg1}{\fs20  }{\i\fs20 seg2}{\fs20  ...)  This parameter causes the assembler or compiler to perform a partial assembly or compile; the operands }{\i\fs20 seg1, seg2, ...}{\fs20  specify the names of the subroutines to be assembled or compiled.  It is not used by ORCA/Modula-2.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\tx1800\adjustright {\i\fs20 language1}{\fs20 =(}{\i\fs20 option}{\b\i\fs20  }{\i\fs20 ...}{\fs20 )}{\b\fs20  }{\fs20 ...  This parameter allows you to pass parameters directly to specific compilers and assemblers running under the ORCA shell.  For each compiler or assembler for which you want to specify options, type the name of the language (exactly as defined in the command table), an equal sign (=), and the string of options enclosed in parentheses.  The contents and syntax of the options string is specified in the compiler or assembler reference manual; the ORCA shell does no error checking on this string, but passes it through to the compiler or assembler.  You can include option strings in the command line for as many languages as you wish; if that language compiler is not called, then the string is ignored.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright {\fs20 \tab \tab No spaces are permitted immediately before or after the equal sign in this parameter.\par \tab \tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 initialization procedure}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 key}}}{\fs20 The ORCA/Modula-2 compiler supports one compiler option, -k.  This flag tells ORCA/Modula-2 to write the key to standard out when it compiles a module.  The key is the name of the initialization segment.  Generally, you would use this feature when compiling the header of a module written in another language.  In that case, you must create a parameterless procedure using the name of the key.  This procedure, called the initialization procedure, will be called one time before any other procedures in the module are called.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 redirection}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRINTER directive}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASMLG}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASMLG\tcl3}}}{\b \par }\pard \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright {\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linking a program}}}{\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executing a program}}}{\v\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\fs20 \par }{\f6\fs20 ASMLG\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command assembles (or compiles), links, and runs a source file.  Its function is identical to that of the ASML command, except that once the file has been successfully linked, it is executed automatically.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ASSEMBLE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ASSEMBLE\tcl3}}}{\b \par }\pard \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright {\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\v\fs20 \par }\pard \fi-1350\li1350\keepn\widctlpar\tx1350\adjustright {\fs20 \par }\pard \fi-1340\li1340\keepn\widctlpar\tx1340\adjustright {\f6\fs20 ASSEMBLE\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P]\par \tab [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright {\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\fi-1350\li1350\keepn\widctlpar\tx1350\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command assembles (or compiles) a source file.  Its function is identical to that of the ASML command, except that the ASSEMBLE command does not call the linker to link the object files it creates; therefore, no load file is generated.  You can use the LINK command to link the object files created by the ASSEMBLE command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b BREAK}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v BREAK\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 BREAK\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 BREAK command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ECHO command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command is used to terminate a FOR or LOOP statement.  The next statement executed will be the one immediately after the END statement on the closest nested FOR or LOOP statement.  For example,  the EXEC file\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 FOR I IN 1 2 3\par   FOR J IN 2 3\par     IF \{I\} == \{J\}\par       BREAK\par     END\par     ECHO \{I\}\par   END\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par would print\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 1\par 1\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 3\par }\pard \qj\widctlpar\adjustright {\fs20 \par to the screen.  This order results from the fact that BREAK exits from the closest loop, the }{\f6\fs18 FOR J IN 2 3}{\fs20 , not from all loops.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CAT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CAT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\tx540\adjustright {\f6\fs20 CAT\tab [-A] [-D] [-H] [-L] [-N] [-P] [-T]\par \tab [}{\i\f6\fs20 directory1 }{\f6\fs20 [}{\i\f6\fs20 directory2 ...}{\f6\fs20 ]]\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 \par CAT [-A] [-D] [-H] [-L] [-N] [-P] [-T] [}{\i\f6\fs20 pathname}{\f6\fs20 1 [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command is an alternate name for CATALOG.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CATALOG}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CATALOG\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 current prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\v\fs20 \par }{\fs20 \par }\pard \fi-1080\li1080\keepn\widctlpar\adjustright {\f6\fs20 CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T] \par \tab [}{\i\f6\fs20 directory1 }{\f6\fs20 [}{\i\f6\fs20 directory2 ...}{\f6\fs20 ]]\par \par CATALOG \tab [-A] [-D] [-H] [-L] [-N] [-P] [-T] \par \tab [}{\i\f6\fs20 pathname}{\f6\fs20 1 [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command lists to standard output the directory of the volume or subdirectory you specify.  More than one directory or subdirectory can be listed to get more than one catalog from a single command.\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -A\tab GS/OS supports a status bit called the invisible bit.  Finder droppings files, for example, are normally flagged as invisible so they won't clutter directory listings.  The CATALOG command does not normally display invisible files when you catalog a directory; if you use the -A flag, the CATALOG command will display invisible files.\par \par -D\tab If the -D flag is used, this command does a recursive catalog of directories, showing not only the directory name, but the contents of the directory, and the contents of directories contained within the directory.\par \par -H\tab When this flag is used, the CATALOG command does not print the header, which shows the path being cataloged, or the trailer, which shows statistics about disk use.\par \par -L\tab The standard format for a directory listing is a table, with one line per file entry.  When this flag is used, the CATALOG command shows a great deal more information about each file, but the information is shown using several lines.\par \par -N\tab This flag causes the CATALOG command to show only the name of the file, omitting all other information.  Files are formatted with multiple file names per line, placing the file names on tab stops at 16 character boundaries.  The resulting table is considerably easier to scan when looking for a specific file.\par \par -P\tab The name of a file is normally displayed as a simple file name.  Use of the -P flag causes the files to be listed as full path names.  This option does make the file names fairly long, so the default tabular format may become cumbersome.  Using this option with -L or -N clears up the problem.\par \par -T\tab Most file types have a standard 3-letter identifier that is displayed by the catalog command.  For example, an ASCII file has a 3-letter code of TXT.  These 3-letter codes are displayed by the CATALOG command.  If you use the -T flag, the CATALOG command displays the hexadecimal}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  file type instead of the 3-letter file type code.\par \tab \tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\fs20 This flag also controls the auxiliary file type field, which is shown as a language name for SRC files.  When the -T flag is used, this field, too, is shown as a hexadecimal value for all file types.\par \par }{\i\fs20 directory\tab }{\fs20 The path name or partial path name of the volume, directory, or subdirectory for which you want a directory listing.  If the prefix is omitted, then the contents of the current directory are listed.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 path names}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\i\fs20 \par pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file for which you want directory information.  You can use wildcard characters in the file name to obtain information about only specific files.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \li180\keepn\widctlpar\adjustright {\f6\fs18 :ORCA.DISASM:=\par \par Name            Type  Blocks  Modified        Created         Access  Subtype\par \par Desktop.DISASM  S16+     230 14 Aug 90       21 May 90        DNBWR   $DB03\par DISASM          EXE      101 15 Aug 90       15 Aug 90        DNBWR   $0100\par DISASM.Config   $5A+       2 17 May 90       30 Apr 90        DNBWR   $800A\par DISASM.Data     TXT       95 10 Aug 90       20 Oct 88        DNBWR   $0000\par DISASM.Scripts  SRC       94 23 May 90       15 Aug 89        DNBWR   $0116\par Help            DIR        1 18 Sep 89       14 Sep 89        DNBWR   $0000\par Samples         DIR        1 13 Aug 90       14 Sep 89        DNBWR   $0000\par Icons           DIR        1 17 Sep 89       14 Sep 89        DNBWR   $0000\par \par Blocks Free:   1026      Blocks used:    574      Total Blocks:   1600\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Table 8.7  Sample CATALOG Listing\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Table 8.7 shows the output from cataloging the ORCA/Disassembler 1.2 disk.  This particular disk has a good variety of file types and so forth; we'll use it to see what the CATALOG command can tell us about a disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 disassembler}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 disk size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 block}}}{\fs20 The first line shows the path being cataloged; in this case, we are cataloging all files on the disk ORCA.DISASM.  The last line gives more information about the disk, including the number of blocks that are not used, the number that are used, and the total number of blocks on the disk.  For ProDOS format disks, a block is 512 bytes, so this disk is an 800K disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file names}}}{\fs20 Between these two lines is the information about the files on the disk.  The first column is the file name.  If the file name is too long to fit in the space available, the rest of the information will appear on the line below.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\fs20 Next is the type of the file.  Most file types have a three letter code associated with them, like S16 (System 16) for a file that can be executed from the Finder or the ORCA shell, and DIR (directory) for a folder.  There is no three letter code for a file with a type of $5A, so this file type is shown as the hexadecimal number for the file type.  If a file is an extended file (i.e., if it has a resource fork), the file type is followed by a + character.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 block}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program size}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sparse files}}}{\fs20 The column labeled "Blocks" shows the number of blocks occupied by the file on the disk.  GS/OS is clever about the way it stores files, not using a physical disk block for a file that contains only zeros, for example, and programs are not necessarily loaded all at once, so this block size does not necessarily correspond to the amount of memory that will be needed to load a file or run a program; it only tells how much space is required on the disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 time}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 date}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 creation time}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modify time}}}{\fs20 The columns labeled "Modified" and "Created" give the date and time when the file was last changed and when the file was originally created, respectively.  In this example, the time fields have been artificially set to 00:00 (something the Byte Works does for all of its distribution disks).  When the time is set to 00:00, it is not shown.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\fs20 The column labeled Access shows the values of six flags that control whether a file can be deleted (D), renamed (N), whether it has been backed up since the last time it was modified (B), whether it can be written to (W) or read from (R), and whether it is invisible (I).  In all cases, if the condition is true, the flag is shown as an uppercase letter, and if the condition is false, the flag is not shown at all.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auxiliary file type}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\fs20 The last column, labeled "Subtype", shows the auxiliary file type for the file.  For most files, this is shown as a four-digit hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  number, but for SRC files you will see the name of the language.\par \par }\pard \li2520\keepn\widctlpar\adjustright {\f6\fs18 Name         : Desktop.DISASM\par Storage Type : 5\par File Type    : S16       $B3\par Aux Type     : $DB03\par Access       : DNBWR     $E3\par Mod Date     : 14 Aug 90       \par Create Date  : 21 May 90       \par Blocks Used  : 139\par Data EOF     : $00011A6B\par Res. Blocks  : 91\par Res. EOF     : $0000B215\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Table 8.8\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EOF}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file length}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 block}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource fork}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 storage type}}}{\fs20 The tabular form used by the CATALOG command to show information about files is compact, but doesn't provide enough room to show all of the information about a file that is available from GS/OS.  When the -L flag is used, the CATALOG command uses an expanded form to show more information about the file.  Table 8.8 shows the expanded information for the Desktop.DISASM file.  The name, file type, auxiliary file type, access, modification date and creation date fields are the same as before, although the order has changed and the fields that have a hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  equivalent are shown using both forms.  The old block count field has been expended, showing the number of blocks used by the date fork (the Blocks Used field) and the resource fork (labeled Res. Blocks) as two separate values.  In addition, the true size of the file in bytes is shown, again split between the data fork and resource fork, as the Date EOF field and the Res. EOF field.  Finally, the internal storage type used by GS/OS is listed.\par For a more complete and technical description of the various information returned by the CATALOG command, see }{\i\fs20 Apple\~II}{\i\fs18 GS}{\i\fs20  GS/OS Reference}{\fs20 , Volume 1.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CC}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CC\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 CC\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CC command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to CC, the language stamp used by the ORCA/C compiler.\par While you can set the language and create C source files, you will not be able to compile them unless you purchase the ORCA/C compiler and install it with ORCA/Modula-2.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CHANGE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CHANGE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CHANGE command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 CHANGE [-P] }{\i\f6\fs20 pathname language\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command changes the language type of an existing file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the source file whose language type you wish to change.  You can use wildcard characters in the file name.\par \par }{\i\fs20 language}{\fs20 \tab The language type to which you wish to change this file.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1440\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In ORCA, each source or text file is assigned the current default language type when it is created.  When you assemble or compile the file, ORCA checks the language type to determine which assembler, compiler, linker, or text formatter to call.  Use the CATALOG command to see the language type currently assigned to a file.  Use the CHANGE command to change the language type of any of the languages listed by the SHOW LANGUAGES command.\par You can use the CHANGE command to correct the ORCA language type of a file if the editor was set to the wrong language type when you created the file, for example.  Another use of the CHANGE command is to assign the correct ORCA language type to an ASCII text file (GS/OS file type $04) created with another editor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CMPL}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CMPL\tcl3}}}{\b \par }\pard \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright {\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command\bxe }}}{\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linking a program}}}{\v\fs20 \par }{\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\f6\fs20 CMPL\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-720\li720\keepn\widctlpar\tx720\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles) and links a source file.  Its function and parameters are identical to those of the ASML command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CMPLG}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CMPLG\tcl3}}}{\b \par }\pard \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright {\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command\bxe }}}{\pard\plain \qj\fi-810\li810\keepn\widctlpar\tx810\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executing a program}}}{\v\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\fs20 \par }{\f6\fs20 CMPLG\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles), links, and runs a source file.  Its function is identical to that of the ASMLG command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMMANDS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMMANDS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMANDS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command table}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSCMND file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 restartable programs}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 COMMANDS }{\i\f6\fs20 pathname\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command causes ORCA to read a command table, resetting all the commands to those in the new command table.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file containing the command table.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you load ORCA, it reads the command-table file named SYSCMND in prefix 15.  You can use the COMMANDS command to read in a custom command table at any time.  Command tables are described in the section \ldblquote Command Types and the Command Table\rdblquote  in this chapter.\par The COMMANDS command has one other useful side effect.  Any program that can be restarted that has been loaded and left in memory will be purged, thus freeing a great deal of memory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMPACT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMPACT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPACT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 OMF}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 APW C}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 COMPACT }{\i\f6\fs20 infile}{\f6\fs20  [-O }{\i\f6\fs20 outfile}{\f6\fs20 ] [-P] [-R] [-S]}{\i\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command converts a load file from an uncompacted form to a compacted form. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 infile}{\fs20 \tab Input load file.  Any OMF format file is acceptable, but the only files that benefit from the COMPACT utility are the executable files, such as EXE and S16.\par \par -O }{\i\fs20 outfile}{\fs20 \tab By default, the input file is replaced with the compacted version of the same file.  If you supply an output file name with this option, the file is written to }{\i\fs20 outfile}{\fs20 .\par \par -P\tab When the -P flag is used, copyright and progress information is written to standard out.\par \par -R\tab The -R option marks any segment named ~globals or ~arrays as a reload segment.  It also forces the bank size of the ~globals segment to $10000.  These options are generally only used with APW C programs.\par \par -S\tab The -S flag causes a summary to be printed to standard out.  This summary shows the total number of segments in the file, the number of each type of OMF record compacted, copied, and created.  This information gives you some idea of what changes were made to make the object file smaller.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Compacted object files are smaller and load faster than uncompacted load files.  The reduction in file size is generally about 40%, although the actual number can vary quite a bit in practice.  In addition, if the original file is in OMF 1.0 format, it is converted to OMF 2.0.\par Files created with ORCA/Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Modula-2}}}{\fs20  are compacted by default.  The main reason for using this utility is to convert any old programs you may obtain to the newer OMF format, and to reduce their file size.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMPILE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMPILE\tcl3}}}{\b \par }\pard \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright {\pard\plain \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiling a program}}}{\pard\plain \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPILE command}}}{\pard\plain \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\v\fs20 \par }\pard \fi-1170\li1170\keepn\widctlpar\tx1170\adjustright {\fs20 \par }\pard \fi-980\li980\keepn\widctlpar\tx980\adjustright {\f6\fs20 COMPILE\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\fi-1170\li1170\keepn\widctlpar\tx1170\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles) a source file.  Its function is identical to that of the ASML command, except that it does not call the linker to link the object files it creates; therefore, no load file is generated.  You can use the LINK command to link the object files created by the COMPILE command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COMPRESS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COMPRESS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPRESS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 alphabetizing directories}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 COMPRESS A | C | A C  [}{\i\f6\fs20 directory1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20  ...]]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compresses and alphabetizes directories.  More than one directory can be specified on a single command line.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 A\tab Use this parameter to alphabetize the file names in a directory.  The file names appear in the new sequence whenever you use the CATALOG command.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 C\tab Use this parameter to compress a directory.  When you delete a file from a directory, a \ldblquote hole\rdblquote  is left in the directory that GS/OS fills with the file entry for the next file you create.  Use the C parameter to remove these holes from a directory, so that the name of the next file you create is placed at the end of the directory listing instead of in a hole in the middle of the listing.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\fs20 A C\tab You can use both the A and C parameters in one command; if you do so, you must separate them with one or more spaces.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 current prefix}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DOS}}}{\v\fs20 \par }\pard \qj\fi-990\li1440\widctlpar\tx1800\adjustright {\i\fs20 \par directory}{\fs20 \tab The path name or partial path name of the directory you wish to compress or alphabetize, }{\i\fs20 not}{\fs20  including any file name.  If you do not include a volume or directory path, then the current directory is acted on.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SWITCH command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command works only on GS/OS directories, not on other file systems such as DOS or Modula-2.  Due to the design of GS/OS, the COMPRESS command will also not work on the disk volume that you boot from \endash  to modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par To interchange the positions of two files in a directory, use the SWITCH command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CONTINUE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CONTINUE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CONTINUE command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 CONTINUE\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DELETE command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command causes control to skip over the remaining statements in the closest nested FOR or LOOP statement.  For example, the EXEC file\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }\pard \qj\fi720\keepn\widctlpar\adjustright {\f6\fs18 \par FOR I\par   IF \{I\} == IMPORTANT\par     CONTINUE\par   END\par   DELETE \{I\}\par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par would delete all files listed on the command line when the EXEC file is executed except for the file IMPORTANT.\par \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b COPY}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v COPY\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COPY command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 disk copying}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 COPY [-C] [-F] [-P] [-R] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20 ]\par COPY [-C] [-F] [-P] [-R] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20 ]\par COPY }{\i\f6\fs20 directory1}{\f6\fs20  }{\i\f6\fs20 directory2}{\f6\fs20 \par COPY [-D] }{\i\f6\fs20 volume1 volume2\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command copies a file to a new subdirectory, or to a duplicate file with a different file name.  This command can also be used to copy an entire directory or to perform a block-by-block disk copy.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab If you specify -C before the first path name, COPY does not prompt you if the target file name (}{\i\fs20 pathname2}{\fs20 ) already exists.\par \par -D\tab If you specify -D before the first path name, both path names are volume names, and both volumes are the same size, then a block-by-block disk copy is performed.  Other flags, while accepted, are ignored when this flag is used.\par \par -F\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 data fork}}}{\fs20 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -F flag is used, only the data fork is copied.  If the destination file already exists, its resource fork is left undisturbed.  By copying the data fork of a file onto an existing file with a resource fork, it is possible to combine the data fork of the original file with the resource fork of the target file.\par \par -P\tab The COPY command prints progress information showing what file is being copied as it works through a list of files.  The -P flag suppresses this progress information.\par \par -R\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource fork}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\fs20 Normally, the COPY command copies both the data fork and the resource fork of a file.  When the -R flag is used, only the resource fork is copied.  If the destination file already exists, its data fork is left undisturbed.  By copying the resource fork of a file onto an existing file with a data fork, it is possible to add the resource fork of the original file to the data fork of the target file.\par \par }{\i\fs20 pathname1}{\fs20  \tab The full or partial path name (including the file name) of a file to be copied.  Wildcard characters may be used in the file name.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full or partial path name (including the file name) to be given to the copy of the file}{\i\fs20 .}{\fs20   Wildcard characters can }{\i\fs20 not}{\fs20  be used in this file name.  If you leave this parameter out, then the current directory is used and the new file has the same name as the file being copied.\par \par }{\i\fs20 directory1}{\fs20 \tab The path name or partial path name of a directory that you wish to copy.  The entire directory (including all the files, subdirectories, and files in the subdirectories) is copied.\par \par }{\i\fs20 directory2}{\fs20 \tab The path name or partial path name of the directory to which you wish to copy the file or directory.  If }{\i\fs20 directory2}{\fs20  does not exist, it is created (unless }{\i\fs20 directory1}{\fs20  is empty).  If you do not include this parameter, the current directory is used.\par \par }{\i\fs20 volume1}{\fs20 \tab The name of a volume that you want to copy onto another volume.  The entire volume (including all the files, subdirectories, and files in the subdirectories) is copied.  If both path names are volume names, both volumes are the same size, }{\i\fs20 and}{\fs20  you specify the -D parameter, then a block-by-block disk copy is performed.  You can use a device name (such as .D1) instead of a volume name.\par \par }{\i\fs20 volume2}{\fs20 \tab The name of the volume that you want to copy onto.  You can use a device name instead of a volume name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you do not specify }{\i\fs20 pathname2}{\fs20 , and a file with the file name specified in }{\i\fs20 pathname1}{\fs20  exists in the target subdirectory, or if you do specify}{\i\fs20  pathname2}{\fs20  and a file named }{\i\fs20 pathname2}{\fs20  exists in the target subdirectory, then you are asked if you want to replace the target file.  Type Y and press }{\outl\fs18 RETURN}{\fs20  to replace the file.  Type N and press }{\outl\fs18 RETURN}{\fs20  to copy the file to the target prefix with a new file name.  In the latter case, you are prompted for the new file name.  Enter the file name, or press }{\outl\fs18 RETURN}{\fs20  without entering a file name to cancel the copy operation.  If you specify the -C parameter, then the target file is replaced without prompting.\par If you do not include any parameters after the COPY command, you are prompted for a path name, since ORCA prompts you for any required parameters.  However, since the target prefix and file name are not required parameters, you are }{\i\fs20 not}{\fs20  prompted for them.  Consequently, the current prefix is always used as the target directory in such a case.  To copy a file to any subdirectory }{\i\fs20 other }{\fs20 than the current one, you }{\i\fs20 must}{\fs20  include the target path name as a parameter either in the command line or following the path name entered in response to the file name prompt.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 write protect}}}{\v\fs20 \par }{\fs20 If you use volume names for both the source and target and specify the -D parameter, then the COPY command copies one volume onto another.  In this case, the contents of the target disk are destroyed by the copy operation.  The target disk must be initialized (use the INIT command) }{\i\fs20 before}{\fs20  this command is used.  This command performs a block-by-block copy, so it makes an exact duplicate of the disk.  Both disks must be the same size and must be formatted using the same FST for this command to work.  You can use device names rather than volume names to perform a disk copy.  To ensure safe volume copies, it is a good idea to write-protect the source disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CREATE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CREATE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CREATE command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 CREATE }{\i\f6\fs20 directory1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20  ...]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command creates a new subdirectory.  More than one subdirectory can be created with a single command by separating the new directory names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 directory}{\fs20 \tab The path name or partial path name of the subdirectory you wish to create.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b CRUNCH}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v CRUNCH\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CRUNCH utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 partial compilation}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 CRUNCH [-P] }{\i\f6\fs20 rootname\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command combines the object files created by partial assemblies or compiles into a single object file.  For example, if a compile and subsequent partial compiles have produced the object files FILE.ROOT, FILE.A, FILE.B, and FILE.C, then the CRUNCH command combines FILE.A, FILE.B, and FILE.C into a new file called FILE.A, deleting the old object files in the process.  The new FILE.A contains only the latest version of each function in the program.  New functions added during partial compiles are placed at the end of the new FILE.A.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab Suppresses the copyright and progress information normally printed by the CRUNCH utility.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 rootname}{\fs20 \tab The full path name or partial path name, including the file name but minus any file name extensions, of the object files you wish to compress.  For example, if your object files are named FILE.ROOT, FILE.A, and FILE.B in subdirectory :HARDISK:MYFILES:, you should then use :HARDISK:MYFILES:FILE for }{\i\fs20 rootname.}{\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DELETE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DELETE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DELETE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 DELETE [-C] [-P] [-W] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20  ...]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command deletes the file you specify.  You can delete more than one file with a single command by separating multiple file names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab If you delete the entire contents of a directory by specifying = for the path name, or if you try to delete a directory, the DELETE command asks for confirmation before doing the delete.  If you use the -C flag, the delete command does not ask for confirmation before doing the delete.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When you delete files using wildcards, or when you delete a directory that contains other files, the delete command lists the files as they are deleted.  To suppress this progress information, use the -P flag.\par \par -W\tab When you try to delete a file that does not exist, the DELETE command prints a warning message, but does not flag an error by returning a non-zero status code.  If you use the -W flag, the warning message will not be printed.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file to be deleted.  Wildcard characters may be used in the file name.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par If the target file of the DELETE command is a directory, the directory and all of its contents, including any included directories and their contents, are deleted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DEREZ}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DEREZ\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DEREZ command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 extended files\:see resources}{\txe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\tx900\adjustright {\f6\fs20 DEREZ\tab [-D[EFINE] }{\i\f6\fs20 macro}{\f6\fs20 [=}{\i\f6\fs20 data}{\f6\fs20 ]] [-E[SCAPE]] [-I }{\i\f6\fs20 pathname}{\f6\fs20 ]\par \tab [-M[AXTRINGSIZE] }{\i\f6\fs20 n}{\f6\fs20 ] [-O }{\i\f6\fs20 filename}{\f6\fs20 ]\par \tab [-ONLY }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]] [-P] [-RD]\par \tab [-S[KIP] }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]] [-U[NDEF] }{\i\f6\fs20 macro}{\f6\fs20 ]\par \tab }{\i\f6\fs20 resourceFile}{\f6\fs20  [}{\i\f6\fs20 resourceDescriptionFile}{\f6\fs20 ]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command reads the resource fork of an extended file, writing the resources in a text form.  This output is detailed enough that it is possible to edit the output, then recompile it with the Rez compiler to create a new, modified resource fork. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f6\fs20 -D[EFINE] }{\i\f6\fs20 macro}{\f6\fs20 [=}{\i\f6\fs20 data}{\f6\fs20 ]}{\fs20    Defines the macro }{\i\fs20 macro}{\fs20  with the value }{\i\fs20 data}{\fs20 .  This is completely equivalent to placing the statement\par \par \tab \tab \tab #define }{\i\fs20 macro data}{\fs20 \par \par \tab at the start of the first resource description file.\par \tab \tab If the optional data field is left off, the macro is defined with a null value.\par \tab \tab More than one -d option can be used on the command line.\par \par }{\f6\fs20 -E[SCAPE]}{\fs20 \tab Characters outside of the range of the printing ASCII characters are normally printed as escape sequences, like \\0xC1.  If the -e option is used, these characters are sent to standard out unchanged.  Not all output devices have a mechanism defined to print these characters, so using this option may give strange or unusable results.\par \par }{\f6\fs20 -I }{\i\f6\fs20 pathname}{\fs20 \tab Lets you specify one or more path names to search for #include files.  This option can be used more than once.  If the option is used more than once, the paths are searched in the order listed.\par \par }{\f6\fs20 -M[AXTRINGSIZE] }{\i\f6\fs20 n}{\fs20    This setting controls the width of the output.  It must be in the range 2 to 120.\par \par }{\f6\fs20 -O }{\i\f6\fs20 filename}{\fs20    This option provides another way of redirecting the output.  It should not be used if command line output redirection is also used.  With the -O option, the file is created with a file type of SRC and a language type of Rez.\par \par }{\f6\fs20 -ONLY }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]}{\fs20    Lists only resources with a resource type of }{\i\fs20 typeexpr}{\fs20 , which should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is listed.  To list a range of resources, separate the starting and ending resource ID with a colon.\par \par }{\f6\fs20 -P}{\fs20 \tab When this option is used, the copyright, version number, and progress information is written to standard out.\par \par }{\f6\fs20 -RD}{\fs20 \tab Suppresses warning messages if a resource type is redeclared.\par \par }{\f6\fs20 -S[KIP] }{\i\f6\fs20 typeexpr}{\f6\fs20 [(}{\i\f6\fs20 id1}{\f6\fs20 [:}{\i\f6\fs20 id2}{\f6\fs20 ])]}{\fs20    Lists all but the resources with a resource type of }{\i\fs20 typeexpr}{\fs20 , which should be expressed as a numeric value.  If the value is followed immediately (no spaces!) by a resource ID number in parenthesis, only that particular resource is skipped.  To skip a range of resources, separate the starting and ending resource ID with a colon.\par \par }{\f6\fs20 -U[NDEF] }{\i\f6\fs20 macro}{\fs20    This option can be used to undefine a macro variable.\par \par }{\i\f6\fs20 resourceFile}{\fs20    This is the name of the extended file to process.  The resource fork from this file is converted to text form and written to standard out.\par \par }{\i\f6\fs20 resourceDescriptionFile}{\fs20    This file contains a series of declarations in the same format as used by the Rez compiler.  More than one resource description file can be used.  Any include (not #include), read, data, and resource statements are skipped, and the remaining declarations are used as format specifiers, controlling how DeRez writes information about any particular resource type.\par \tab \tab If no resource description file is given, or if DeRez encounters a resource type for which none of the resource description files provide a format, DeRez writes the resource in a hexadecimal}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  format.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The output from DeRez consists of resource and data statements that are acceptable to the Rez resource compiler.  If the output from DeRez is used immediately as the input to the resource compiler, the resulting resource fork is identical to the one processed by DeRez.  In some cases, the reverse is not true; in particular, DeRez may create a data statement for some input resources.\par Numeric values, such as the argument for the -only option, can be listed as a decimal value, a hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  value with a leading $, as in the ORCA assembler, or a hexadecimal value with a leading 0x, as used by the Modula-2 language.\par For all resource description files specified on the source line, the following search rules are applied:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab DeRez tries to open the file as is, by appending the file name given to the current default prefix.\par 2.\tab If rule 1 fails and the file name contains no colons and does not start with a colon (in other words, if the name is truly a file name, and not a path name or partial path name), DeRez appends the file name to each of the path names specified by -i options and tries to open the file.\par 3.\tab DeRez looks for the file in the folder 13:RInclude.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par For more information about resource compiler source files and type declarations, see Chapter 10.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DEVICES}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DEVICES\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DEVICES command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 DEVICES [-B] [-D] [-F] [-I] [-L] [-M] [-N] [-S] [-T] [-U] [-V]}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The DEVICES command lists all of the devices recognized by GS/OS in a tabular form, showing the device type, device name, and volume name.  Various flags can be used to show other information about the devices in an expanded form.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -B\tab Display the block size for block devices.\par \par -D\tab Display the version number of the software driver for the device.\par \par -F\tab Show the number of free blocks remaining on a block device.\par \par -I\tab Display the file system format used by the device.\par \par -L\tab Show all available information about each device.  This would be the same as typing all of the other flags.\par \par -M\tab Show the total number of blocks on the device.\par \par -N\tab Display the device number.\par \par -S\tab Display the slot number of the device.\par \par -T\tab Show the type of the device.\par \par -U\tab Show the unit number for the device.\par \par -V\tab Show the volume name for the device.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The name of the device is always displayed, but when you use any flag except -L, the device type and volume name are not shown unless you specifically use the -T and -V flags.\par See the GS/OS Technical Reference Manual for a detailed description of what devices are, and what the various fields mean in relation to any particular device.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DISABLE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DISABLE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DISABLE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 locking files}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 DISABLE  [-P] D | N | B | W | R | I }{\i\f6\fs20 pathname\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command disables one or more of the access attributes of a GS/OS file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par D\tab \ldblquote Delete\rdblquote  privileges.  If you disable this attribute, the file cannot be deleted.\par \par N\tab \ldblquote Rename\rdblquote  privileges.  If you disable this attribute, the file cannot be renamed.\par \par B\tab \ldblquote Backup required\rdblquote  flag.  If you disable this attribute, the file will not be flagged as having been changed since the last time it was backed up.\par \par W\tab \ldblquote Write\rdblquote  privileges.  If you disable this attribute, the file cannot be written to.\par \par R\tab \ldblquote Read\rdblquote  privileges.  If you disable this attribute, the file cannot be read.\par \par I\tab \ldblquote Visible\rdblquote  flag.  If you disable this attribute, the file will be displayed by the CATALOG command without using the -A flag.  In other words, invisible files become visible.\par \par }{\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file whose attributes you wish to disable.  You can use wildcard characters in the file name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can disable more than one attribute at one time by typing the operands with no intervening spaces.  For example, to \ldblquote lock\rdblquote  the file TEST so that it cannot be written to, deleted, or renamed, use the command\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 DISABLE DNW TEST\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENABLE command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use the ENABLE command to reenable attributes you disabled with the DISABLE command.\par When you use the CATALOG command to list a directory, the attributes that are currently enabled are listed in the access field for each file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b DISKCHECK}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v DISKCHECK\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DISKCHECK command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 DISKCHECK }{\i\f6\fs20 volume}{\f6\fs20 |}{\i\f6\fs20 device}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command scans the disk for active files and lists all block allocations, including both data and resource forks of any extended file types.  It will then notify you of block conflicts, where two or more files are claiming the same block(s), and provide an opportunity to list the blocks and files involved.  Finally, it will verify the integrity of the disk's bitmap.  Bitmap errors will be reported and you can choose to repair the bitmap.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\f6\fs20 volume}{\f6\fs20 |}{\i\f6\fs20 device}{\fs20    The GS/OS volume name or device name of the disk to check.  The volume name can be specified with or without a beginning colon or slash; for example,\par \par }{\f6\fs18 \tab \tab DiskCheck :HardDisk\par \tab \tab DiskCheck HardDisk\par }{\fs20 \par \tab \tab A device name requires a period before the name; for example, .SCSI1.  Volume numbers can also be used, as in .D2.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par DISKCHECK will only verify a ProDOS volume.  It will not work with an HFS volume.\par In normal display mode, data scrolls continuously on the screen.  While DISKCHECK is running, press the space bar to place DISKCHECK in single step mode.  In this mode, block allocations are displayed one at a time, each time the space bar is pressed.  Press return to return to normal display mode.\par DISKCHECK will check volumes with up to 65535 blocks of 512 bytes (32M).\par DISKCHECK makes the following assumptions:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Blocks zero and one are always used and contain boot code.\par \bullet \tab Enough disk integrity exists to make a GetFileInfo call on the volume.\par \bullet \tab Block two is the beginning of the volume directory and contains valid information regarding the number of blocks, bitmap locations, entries per block, and entry size.\par \bullet \tab All unused bytes at the end of the last bitmap block are truly unused; that is, they will be set to zero whenever the bitmap is repaired.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par DISKCHECK may not catch invalid volume header information as an error.  Likewise, DISKCHECK does not check all details of the directory structures.  Therefore, if large quantities of errors are displayed, it is likely that the volume header information or directory information is at fault.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ECHO}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ECHO\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ECHO command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 ECHO [-N] [-T] }{\i\f6\fs20 string\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command lets you write messages to standard output.  All characters from the first non-blank character to the end of the line are written to standard out.  You can use redirection to write the characters to error out or a disk file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -N\tab The -N flag suppresses the carriage return normally printed after the string, allowing other output to be written to the same line.  One popular use for this option is to write a prompt using the ECHO command, then use the INPUT command to read a value.  With the -N flag, the input cursor appears on the same line as the prompt.\par \par -T\tab By default, and tab characters in the string are converted to an appropriate number of spaces before the string is written.  If the -T flag is used, the tab characters are written as is.\par \par }{\i\fs20 string}{\fs20 \tab The characters to write.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you want to start your string with a space or a quote mark, enclose the string in quote marks.  Double the quote marks to imbed a quote in the string.  For example,\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs14 ECHO "   This string starts with 3 spaces and includes a "" character."\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EDIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EDIT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDIT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CHANGE command}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 EDIT }{\i\f6\fs20 pathname1 pathname2 ...\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command calls the ORCA editor and opens a file to edit.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname1}{\fs20 \tab The full path name or partial path name (including the file name) of the file you wish to edit.  If the file named does not exist, a new file with that name is opened.  If you use a wildcard character in the file name, the first file matched is opened.  If more than one file name is given, up to ten files are opened at the same time.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ORCA default language changes to match the language of the open file.  If you open a new file, that file is assigned the current default language.  Use the CHANGE command to change the language stamp of an existing file.  To change the ORCA default language before opening a new file, type the name of the language you wish to use, and press }{\outl\fs18 RETURN}{\fs20 .\par The editor is described in Chapter 9.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ELSE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ELSE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE clause\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 ELSE\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 ELSE IF }{\i\f6\fs20 expression}{\f6\fs20  \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command is used as part of an IF command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ENABLE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ENABLE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENABLE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DISABLE command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 unlocking files}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 ENABLE  [-P] D |  N | B | W | R | I }{\i\f6\fs20 pathname\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command enables one or more of the access attributes of a GS/OS file, as described in the discussion of the DISABLE command.  You can enable more than one attribute at one time by typing the operands with no intervening spaces.  For example, to \ldblquote unlock\rdblquote  the file TEST so that it can be written to, deleted, or renamed, use the command\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\b\f6\fs18 ENABLE DNW TEST\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When a new file is created, all the access attributes are enabled.  Use the ENABLE command to reverse the effects of the DISABLE command.  The parameters are the same as those of the DISABLE command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ENTAB}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ENTAB\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENTAB utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs\:ENTAB utility}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 ENTAB [-L }{\i\f6\fs20 language}{\f6\fs20 ] [}{\i\f6\fs20 file}{\f6\fs20 ]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command scans a text stream, converting runs of tabs and space characters into the minimum number of tabs and space characters needed to present the same information on the display screen.  Tabs are not used to replace runs of spaces in quoted strings.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par -L }{\i\fs20 language}{\fs20 \tab The ENTAB utility checks the language stamp of the input file and uses the appropriate tab line from the SYSTABS file to determine the location of tab stops.  This flag can be used to override the default language number, forcing the utility to use the tab line for some other language.  You can use either a language number or a language name as the parameter.\par \par }{\i\fs20 file}{\fs20 \tab File to process.\par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\tx2880\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TYPE command}}}{\fs20 There is no DETAB utility, but the TYPE command can be used to strip tab characters from a file, replacing the tab characters with an appropriate number of space characters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b END}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v END\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IF command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 END\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command terminates a FOR, IF, or LOOP command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ERASE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v ERASE\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ERASE command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 formatting disks\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 ERASE [-C] }{\i\f6\fs20 device}{\f6\fs20  [}{\i\f6\fs20 name}{\f6\fs20 ]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command writes the initialization tracks used by GS/OS to a disk that has already been formatted as a GS/OS disk.  In effect, this erases all files on the disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab Normally, the system will ask for permission (check) before erasing a disk.  The -C flag disables that check.\par \par }{\i\fs20 device}{\fs20 \tab The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted already has a volume name, you can specify the volume name instead of a device name.\par \par }{\i\fs20 name}{\fs20 \tab The new volume name for the disk.  If you do not specify }{\i\fs20 name,}{\fs20  then the name :BLANK is used.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA recognizes the device type of the disk drive specified by }{\i\fs20 device}{\fs20 , and uses the appropriate format.  ERASE works for all disk formats supported by GS/OS.\par ERASE destroys any files on the disk being formatted.  The effect of the ERASE command is very similar to the effect of the INIT command, but there are some differences.  The INIT command will work on any disk, while the ERASE command can only be used on a disk that has already been initialized.  The ERASE command works much faster than the INIT command, since the ERASE command does not need to take the time to create each block on the disk.  Finally, when the INIT command is used, each block is filled with zeros.  The ERASE command does not write zeros to the existing blocks, so any old information on the disk is not truly destroyed; instead, it is hidden very, very well, just as if all of the files and folders on the disk had been deleted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXEC}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXEC\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC language}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language stamp}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 EXEC\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to the EXEC command language.  When you type the name of a file that has the EXEC language stamp, the shell executes each line of the file as a shell command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXECUTE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXECUTE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell commands\:parameters}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 EXECUTE }{\i\f6\fs20 pathname}{\f6\fs20  [}{\i\f6\fs20 paramlist}{\f6\fs20 ]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command executes an EXEC file.  If this command is executed from the ORCA Shell command line, then the variables and aliases defined in the EXEC file are treated as if they were defined on the command line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full or partial path name of an EXEC file.  This file name cannot include wildcard characters.\par \par }{\i\fs20 paramlist}{\fs20 \tab The list of parameters being sent to the EXEC file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXISTS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXISTS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXISTS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 EXISTS }{\i\f6\fs20 pathname}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command checks to see if a file exists.  If the file exists, the \{Status\} shell variable is set to 1; if the file does not exist, the \{Status\} shell variable is set to 0.  Several disk related errors can occur, so be sure to check specifically for either a 0 or 1 value.  When using this command in an EXEC file, keep in mind that a non-zero value for the \{Status\} variable will cause an EXEC file to abort unless the \{Exit\} shell variable has been cleared with an UNSET EXIT command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname}{\fs20 \tab The full or partial path name of a file.  More than one file can be checked at the same time by specifying multiple path names.  In this case, the result is zero only if each and every file exists.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXIT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXIT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error reporting\:shell}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} shell variable}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 EXIT [}{\i\f6\fs20 number}{\f6\fs20 ]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command terminates execution of an EXEC file.  If }{\i\fs20 number}{\fs20  is omitted, the \{Status\} variable will be set to 0, indicating a successful completion.  If }{\i\fs20 number}{\fs20  is coded, the \{Status\} variable will be set to the number.  This allows returning error numbers or condition codes to other EXEC files that may call the one this statement is included in.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 number}{\fs20 \tab Exit error code.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXPORT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXPORT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPORT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:scope}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 EXPORT [}{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20  ...]]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command makes the specified variable available to EXEC files called by the current EXEC file.  When used in the LOGIN file, the variable becomes available at the command level, and in all EXEC files executed from the command level.  More than one variable may be exported with a single command by separating the variable names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 n\tab Names of the variables to export.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b EXPRESS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v EXPRESS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPRESS command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 EXPRESS [-P] }{\i\f6\fs20 infile}{\f6\fs20  -O }{\i\f6\fs20 outfile}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The external command EXPRESS reformats an Apple\~II}{\fs18 GS}{\fs20  load file so that it can be loaded by the ExpressLoad loader that comes with Apple's system disk, starting with version 5.0 of the system disk.  When loaded with ExpressLoad, the file will load much faster than it would load using the standard loader; however, files reformatted for use with ExpressLoad can still be loaded by the System Loader.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f6\fs20 -P\tab }{\fs20 If you specify this option, EXPRESS displays progress information.  If you omit it, progress information is not displayed.\par \par }{\i\f6\fs20 infile}{\f6\fs20 \tab }{\fs20 The full or partial path name of a load file.\par \par }{\f6\fs20 -O }{\i\f6\fs20 outfile}{\f6\fs20 \tab }{\fs20 This is the full or partial path name of the file to write.  Unlike many commands, this output file is a required parameter.\par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ExpressLoad}}}{\fs20 Since the linker that comes with ORCA can automatically generate a file that is expressed, this utility is generally only used to reformat executable programs you obtain through other sources.\par EXPRESS only accepts version 2.0 OMF files as input.  You can check the version number of the OMF file using DUMPOBJ, and convert OMF 1.0 files to OMF 2.0 using COMPACT.\par ExpressLoad does not support multiple load files; therefore, you cannot use Express with any program that references segments in a run-time library.\par The following system loader calls are not supported by ExpressLoad:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab GetLoadSegInfo ($0F)  The internal data structures of ExpressLoad are not the same as those of the System Loader.\par \bullet \tab LoadSegNum ($0B)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by the System Loader.  Use the LoadSegName function instead.\par \bullet \tab UnloadSegNum ($0C)  Because EXPRESS changes the order of the segments in the load file, an application that uses this call and has been converted by EXPRESS cannot be processed by the System Loader.  Use the UnloadSeg ($0E) function instead.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b FILETYPE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v FILETYPE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FILETYPE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 auxiliary file type}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:auxtype\:see auxiliary file type}{\txe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 FILETYPE [-P] }{\i\f6\fs20 pathname filetype }{\f6\fs20 [}{\i\f6\fs20 auxtype}{\f6\fs20 ]}{\i\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command changes the GS/OS file type, and optionally the auxiliary file type, of a file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files changed is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname}{\fs20 \tab The full path name or partial path name (including the file name) of the file whose file type you wish to change.\par \par }{\i\fs20 filetype}{\fs20 \tab The GS/OS file type to which you want to change the file.  Use one of the following three formats for }{\i\fs20 filetype}{\fs20 :\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1980\adjustright {\fs20 \tab \tab \bullet \tab A decimal number 0-255.\par \par \tab \tab \bullet \tab A hexadecimal number $00-$FF.\par \par \tab \tab \bullet \tab The three-letter abbreviation for the file type used in disk directories; for example, S16, OBJ, EXE.  A partial list of GS/OS file types is shown in Table 8.13.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 \par }{\i\fs20 auxtype}{\fs20 \tab The GS/OS auxiliary file type to which you want to change the file.  Use one of the following two formats for }{\i\fs20 auxtype}{\fs20 :\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1980\adjustright {\fs20 \tab \tab \bullet \tab A decimal number 0-65535.\par \par \tab \tab \bullet \tab A hexadecimal number $0000-$FFFF.\par \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ENABLE command}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file access flags}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS 8}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can change the file type of any file with the FILETYPE command; ORCA does not check to make sure that the format of the file is appropriate.  However, the GS/OS call used by the FILETYPE command may disable some of the access attributes of the file.  Use the CATALOG command to check the file type and access-attribute settings of the file; use the ENABLE command to reenable any attributes that are disabled by GS/OS.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright {\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{KeepType\} shell variable}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\tx1890\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{AuxType\} shell variable}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker can automatically set the file type and auxiliary file type of a program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \li720\ri1080\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1620\tx2340\tx3780\adjustright {\fs20 Decimal\tab Hex\tab Abbreviation\tab File Type\par }\pard \li720\keepn\widctlpar\tx1620\tx2340\tx3780\adjustright {\fs20 \par 001\tab $01\tab BAD\tab Bad blocks file\par 002\tab $02\tab PCD\tab Modula-2 code file (SOS)\par 003\tab $03\tab PTX\tab Modula-2 text file (SOS)\par }\pard \li720\widctlpar\tx1620\tx2340\tx3780\adjustright {\fs20 004\tab $04\tab TXT\tab ASCII text file\par 005\tab $05\tab PDA\tab Modula-2 data file (SOS)\par 006\tab $06\tab BIN\tab ProDOS 8 binary load\par 007\tab $07\tab FNT\tab Font file (SOS)\par 008\tab $08\tab FOT\tab Graphics screen file\par 009\tab $09\tab BA3\tab Business BASIC program file (SOS)\par 010\tab $0A\tab DA3\tab Business BASIC data file (SOS)\par 011\tab $0B\tab WPF\tab Word processor file (SOS)\par 012\tab $0C\tab SOS\tab SOS system file (SOS)\par 015\tab $0F\tab DIR\tab Directory\par 016\tab $10\tab RPD\tab RPS data file (SOS)\par 017\tab $11\tab RPI\tab RPS index file (SOS)\par 176\tab $B0\tab SRC\tab Source\par 177\tab $B1\tab OBJ\tab Object\par 178\tab $B2\tab LIB\tab Library\par 179\tab $B3\tab S16\tab GS/OS system file\par 180\tab $B4\tab RTL\tab Run-time library\par 181\tab $B5\tab EXE\tab Shell load file\par 182\tab $B6\tab STR\tab  load file\par 184\tab $B8\tab NDA\tab New desk accessory\par 185\tab $B9\tab CDA\tab Classic desk accessory\par 186\tab $BA\tab TOL\tab Tool file\par 200\tab $C8\tab FNT\tab Font file\par 226\tab $E2\tab DTS\tab Defile RAM tool patch\par 240\tab $F0\tab CMD\tab ProDOS CI added command file\par 249\tab $F9\tab P16\tab ProDOS 16 file\par 252\tab $FC\tab BAS\tab BASIC file\par 253\tab $FD\tab VAR\tab EDASM file\par }\pard \li720\keepn\widctlpar\tx1620\tx2340\tx3780\adjustright {\fs20 254\tab $FE\tab REL\tab REL file\par 255\tab $FF\tab SYS\tab ProDOS 8 system load file\par }\pard \fi720\li360\keepn\widctlpar\tx1350\tx2070\tx3420\adjustright {\fs20 \par }\pard \qc\li360\widctlpar\tx1350\tx2070\tx3420\adjustright {\fs20 Table 8.13.  A Partial List of GS/OS File Types\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b FOR}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v FOR\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IN clause of FOR command}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 FOR}{\b\f6\fs20  }{\i\f6\fs20 variable}{\b\f6\fs20  }{\f6\fs20 [IN}{\b\f6\fs20  }{\i\f6\fs20 value1}{\b\f6\fs20  }{\i\f6\fs20 value2}{\f6\fs20  ...}{\b\f6\fs20  }{\f6\fs20 ]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command, together with the END statement, creates a loop that is executed once for each parameter value listed.  Each of the parameters is separated from the others by at least on space.  To include spaces in a parameter, enclose it in quote marks.  For example, the EXEC file\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 FOR I IN GORP STUFF "FOO BAR"\par    ECHO \{I\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ECHO command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\v\fs20 \par }{\fs20 \par would print\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 GORP\par STUFF\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 FOO BAR\par }\pard \qj\widctlpar\adjustright {\fs20 \par to the screen.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the IN keyword and the strings that follow are omitted, the FOR command loops over the command line inputs, skipping the command itself.  For example, the EXEC file named EXECFILE\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 FOR I\par    ECHO \{I\}\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par would give the same results as the previous example if you executed it with the command\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 EXECFILE GORP STUFF "FOO BAR"\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b HELP}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v HELP\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command table}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Utilities prefix}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 HELP [}{\i\f6\fs20 commandname1}{\f6\fs20  [}{\i\f6\fs20 commandname2}{\f6\fs20  ...]]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command provides on-line help for all the commands in the command table provided with the ORCA development environment.  If you omit }{\i\fs20 commandname}{\fs20 , then a list of all the commands in the command table are listed on the screen.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\tx1800\adjustright {\i\fs20 commandname}{\fs20  \tab The name of the ORCA shell command about which you want information.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you specify }{\i\fs20 commandname}{\fs20 , the shell looks for a text file with the specified name in the HELP subdirectory in the UTILITIES prefix (prefix 17).  If it finds such a file, the shell prints the contents of the file on the screen.  Help files contain information about the purpose and use of commands, and show the command syntax in the same format as used in this manual.\par If you add commands to the command table, or change the name of a command, you can add, copy, or rename a file in the HELP subdirectory to provide information about the new command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b HISTORY}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v HISTORY\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HISTORY commands\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command list}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 HISTORY\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command lists the last twenty commands entered in the command line editor.  Commands executed in EXEC files are not listed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b HOME}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v HOME\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HOME commands\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 HOME\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command sends a $0C character to the standard output device.  The output can be redirected to files, printers, or error output using standard output redirection techniques.\par When the $0C character is sent to the console output device, the screen is cleared and the cursor is moved to the top left corner of the screen.  When the $0C character is sent to most printers, the printer will skip to the top of the next page.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b IF}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v IF\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IF command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE IF clause}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE clause}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 expressions\:shell}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 IF }{\i\f6\fs20 expression}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command, together with the ELSE IF, ELSE, and END statements provides conditional branching in EXEC files.  The expression is evaluated.  If the resulting string is the character 0, the command interpreter skips to the next ELSE IF, ELSE or END statement, and does not execute the commands in between.  If the string is anything but the character 0, the statements after the IF statement are executed.  In that case, if an ELSE or ELSE IF is encountered, the command skips to the END statement associated with the IF.\par The ELSE statement is used to provide an alternate set of statements that will be executed if the main body of the IF is skipped due to an expression that evaluates to 0.  It must appear after all ELSE IF statements.\par ELSE IF is used to test a series of possibilities.  Each ELSE IF clause is followed by an expression.  If the expression evaluates to 0, the statements following the ELSE IF are skipped; if the expression evaluates to anything but 0, the statements after the ELSE IF are executed.\par As an example, the following code will translate an Arabic digit (contained in the variable \{I\}) into a Roman numeral.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }{\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 IF \{I\} == 1\par    ECHO I\par ELSE IF \{I\} == 2\par    ECHO II\par ELSE IF \{I\} == 3\par    ECHO III\par ELSE IF \{I\} == 4\par    ECHO IV\par ELSE IF \{I\} == 5\par    ECHO V\par ELSE\par    ECHO The number is too large for this routine.\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b INIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v INIT\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INIT command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 formatting disks\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 INIT [-C] }{\i\f6\fs20 device}{\f6\fs20  [}{\i\f6\fs20 fst}{\f6\fs20 ] [}{\i\f6\fs20 name}{\f6\fs20 ]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command formats a disk as a GS/OS volume.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab Disable checking.  If the disk has been previously initialized, the system will ask for permission (check) before starting initialization.  The default is to check.\par \par }{\i\fs20 device}{\fs20 \tab The device name (such as .D1) of the disk drive containing the disk to be formatted; or, if the disk being formatted already has a volume name, you can specify the volume name instead of a device name.\par \par }{\i\fs20 fst}{\fs20 \tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file system translator}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FST}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS}}}{\fs20 The file system translator number.  The default FST is 1 (ProDOS).\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 name}{\fs20 \tab The new volume name for the disk.  If you do not specify }{\i\fs20 name,}{\fs20  then the name :BLANK is used.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA recognizes the device type of the disk drive specified by }{\i\fs20 device}{\fs20 , and uses the appropriate format.  INIT works for all disk formats supported by GS/OS.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file system translator}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FST}}}{\fs20 GS/OS is capable of supporting a wide variety of physical disk formats and operating system file formats.  The term file system translator, or FST, has been adopted to refer to the various formats.  By default, when you initialize a disk, the INIT command uses the physical format and operating system format that has been in use by the ProDOS and GS/OS operating system since ProDOS was introduced for the Apple //e computer.  If you would like to use a different FST, you can specify the FST as a decimal number.  Apple has defined a wide variety of numbers for use as FSTs, although there is no reason to expect that all of them will someday be implemented in GS/OS; some of the FST numbers are shown in Table 8.14, and a more complete list can be found in }{\i\fs20 Apple\~II}{\i\fs18 GS}{\i\fs20  GS/OS Reference}{\fs20 , Volume 1.  Not all of these FSTs have been implemented in GS/OS as this manual goes to press.  Even if an FST has been implemented, not all FSTs can be used on all formats of floppy disks.  If you aren't sure if an FST is available, give it a try \endash  if not, you will get an error message.\par INIT destroys any files on the disk being formatted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright {\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file system translator}}}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FST}}}{\v\fs20 \par }\pard \qj\li2160\ri1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3600\adjustright {\fs20 FST Number\tab File System\par }\pard \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright {\fs20 1\tab ProDOS (Apple\~II, Apple\~II}{\fs18 GS}{\fs20 )}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS}}}{\fs20 \par \tab    and SOS (Apple ///)}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SOS}}}{\fs20 \par 2\tab DOS 3.3}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DOS}}}{\fs20 \par 3\tab DOS 3.2\par 4\tab Apple\~II Modula-2}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Modula-2}}}{\fs20 \par 5\tab Macintosh MFS}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Macintosh}}}{\fs20 \par 6\tab Macintosh HFS\par 7\tab Lisa}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Lisa}}}{\fs20 \par 8\tab Apple CP/M}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CPM}}}{\fs20 \par 10\tab MS/DOS}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MS/DOS}}}{\fs20 \par 11\tab High Sierra}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 High Sierra}}}{\fs20 \par 13\tab AppleShare}{\pard\plain \qj\li2160\ri1440\keepn\widctlpar\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 AppleShare}}}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Table 8.14  FST Numbers\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b INPUT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v INPUT\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INPUT command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 INPUT }{\i\f6\fs20 variable}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command reads a line from standard input, placing all of the characters typed, up to but not including the carriage return that marks the end of the line, in the shell variable }{\i\fs20 variable}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 \tab Shell variable in which to place the string read from standard in.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b LINK}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v LINK\tcl3}}}{\b \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINK command\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 executable files}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 load files\:see executable files}{\txe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link map}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object segment}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 symbol tables\:linker}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \fi-620\li620\keepn\widctlpar\tx620\adjustright {\f6\fs20 LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile}{\f6\fs20  [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \par LINK\tab [}{\f6\fs20\ul +B}{\f6\fs20 |-B] [+C|}{\f6\fs20\ul -C}{\f6\fs20 ] [+L|}{\f6\fs20\ul \endash L}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [+S|}{\f6\fs20\ul \endash S}{\f6\fs20 ] [}{\f6\fs20\ul +X}{\f6\fs20 |-X] }{\i\f6\fs20 objectfile1}{\f6\fs20  }{\i\f6\fs20 objectfile2}{\f6\fs20   ... [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ] \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command calls the ORCA linker to link object files to create a load file.  You can use this command to link object files created by assemblers or compilers, and to cause the linker to search library files.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 +B|-B\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 bank relative programs}}}{\fs20 The +B flag tells the linker to create a bank relative program.  Each load segment in a bank relative program must be aligned to a 64K bank boundary by the loader.  When the current version of the Apple\~II}{\fs18 GS}{\fs20  loader loads a bank relative program, it also purges virtually all purgeable memory, which could slow down operations of programs like the ORCA shell, which allows several programs to stay in memory.  Bank relative programs take up less disk space than programs that can be relocated to any memory space, and they load faster, since all two-byte relocation information can be resolved at link time, rather than creating relocation records for each address.\par \par +C|-C\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compaction}}}{\fs20 Executable files are normally compacted, which means some relocation information is packed into a compressed form.  Compacted files load faster and use less room on disk than uncompacted files.  To create an executable file that is not compacted, use the -C flag.\par \par +L|-L\tab If you specify +L, the linker generates a listing (called a link map) of the segments in the object file, including the starting address, the length in bytes (hexadecimal) of each segment, and the segment type.  If you specify -L, the link map is not produced.\par \par +P|-P\tab The linker normally prints a series of dots as subroutines are processed on pass one and two, followed by the length of the program and the number of executable segments in the program.  The -P flag can be used to suppress this progress information.\par \par +S|-S\tab If you specify +S, the linker produces an alphabetical listing of all global references in the object file (called a symbol table).  If you specify -S, the symbol table is not produced.\par \par +X|-X\tab }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 expressed files}}}{\fs20 Executable files are normally expressed, which means they have an added header and some internal fields in the code image are expanded.  Expressed files load from disk faster than files that are not expressed, but they require more disk space.  You can tell the linker not to express a file by using the -X flag.\par \par }{\i\fs20 objectfile}{\fs20 \tab The full or partial path name, minus file name extension, of the object files to be linked.  All files to be linked must have the same file name (except for extensions), and must be in the same subdirectory.  For example, the program TEST might consist of object files named TEST.ROOT, TEST.A, and TEST.B, all located in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST for }{\i\fs20 objectfile.\par }{\fs20 \par }{\i\fs20 objectfile1 objectfile2,...  }{\fs20 You can link several object files into one load file with a single LINK command.  Enclose in parentheses the full path names or partial path names, minus file name extensions, of all the object files to be included; separate the file names with spaces.  Either a .ROOT file or a .A file must be present.  For example, the program TEST might consist of object files named TEST1.ROOT, TEST1.A, TEST1.B, TEST2.A, and TEST2.B, all in directory :ORCA:MYPROG:.  In this case, you would use :ORCA:MYPROG:TEST1 for }{\i\fs20 objectfile}{\fs20  and :ORCA:MYPROG:TEST2 for }{\i\fs20 objectfile1}{\fs20 .\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\v\fs20 \par }{\fs20 \tab \tab You can also use this command to specify one or more library files (GS/OS file type $B2) to be searched.  Any library files specified are searched in the order listed.  Only the segments needed to resolve references that haven\rquote t already been resolved are extracted from the standard library files.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\v\fs20 \par }{\fs20 \par KEEP=}{\i\fs20 outfile}{\fs20   Use this parameter to specify the path name or partial path name of the executable load file.\par \tab \tab If you do not use the KEEP parameter, then the link is performed, but the load file is not saved.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{LinkName\} shell variable}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you do not include any parameters after the LINK command, you are prompted for an input file name, as ORCA prompts you for any required parameters.  However, since the output path name is not a required parameter, you are }{\i\fs20 not}{\fs20  prompted for it.  Consequently, the link is performed, but the load file is not saved.  To save the results of a link, you }{\i\fs20 must}{\fs20  include the KEEP parameter in the command line or create default names using the \{LinkName\} variable.\par The linker can automatically set the file type and auxiliary file type of the executable file it creates.\par }\pard \qj\ri360\widctlpar\adjustright {\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPL command}}}{\pard\plain \qj\ri360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CMPLG command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To automatically link a program after assembling or compiling it, use one of the following commands instead of the LINK command:  ASML, ASMLG, CMPL, CMPLG.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b LINKER}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v LINKER\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 LINKER\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LINKER command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker\:script files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 script files\:linker}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language for linker script files.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b LOOP}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v LOOP\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 END command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 BREAK command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} shell variable}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 LOOP\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command together with the END statement defines a loop that repeats continuously until a BREAK command is encountered.  This statement is used primarily in EXEC files.  For example, if you have written a program called TIMER that returns a \{Status\} variable value of 1 when a particular time has been reached, and 65535 for an error, you could cause the program SECURITY.CHECK to be executed each time TIMER returned 1, and exit the EXEC file when TIMER returned 65535.  The EXEC file would be\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Exit\} shell variable}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IF command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE IF clause of IF command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 programming examples}}}{\v\fs20 \par }\pard \qj\fi720\widctlpar\adjustright {\f6\fs18 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 UNSET EXIT\par LOOP\par    TIMER\par    SET STAT \{STATUS\}\par    IF \{STAT\} == 1\par       SECURITY.CHECK\par    ELSE IF \{STAT\} == 65535\par       BREAK\par    END\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b MAKELIB}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v MAKELIB\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MAKELIB utility\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\v\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\tx980\adjustright {\f6\fs20 MAKELIB\tab [-F] [-D] [-P] }{\i\f6\fs20 libfile  }{\f6\fs20 [ + | - | ^  }{\i\f6\fs20 objectfile1  \par \tab }{\f6\fs20 + | - | ^ }{\i\f6\fs20 objectfile2 }{\f6\fs20 ...]\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This external command creates a library file.\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -F\tab If you specify -F, a list of the file names included in }{\i\fs20 libfile}{\fs20  is produced.  If you leave this option out, no file name list is produced.\par \par -D\tab If you specify -D, the dictionary of symbols in the library is listed.  Each symbol listed is a global symbol occurring in the library file.  If you leave this option out, no dictionary is produced.\par \par -P\tab Suppresses the copyright and progress information normally printed by the MAKELIB utility.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 libfile}{\fs20 \tab The full path name or partial path name (including the file name) of the library file to be created, read, or modified.\par \par +}{\i\fs20 objectfilen}{\fs20   The full path name or partial path name (including the file name) of an object file to be added to the library.  You can specify as many object files to add as you wish.  Separate object file names with spaces.\par \par -}{\i\fs20 objectfilen}{\fs20   The file name of a component file to be removed from the library.  This parameter is a file name only, not a path name.  You can specify as many component files to remove as you wish.  Separate file names with spaces.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object modules}}}{\v\fs20 \par }{\fs20 \par ^}{\i\fs20 objectfilen}{\fs20   The full path name or partial path name (including the file name) of a component file to be removed from the library  and written out as an object file.}{\b\fs20   }{\fs20 If you include a prefix in this path name, the object file is written to that prefix.  You can specify as many files to be written out as object files as you wish.  Separate file names with spaces.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\v\fs20 \par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An ORCA library file (GS/OS file type $B2) consists of one or more component files, each containing one or more segments.  Each library file contains a library-dictionary segment that the linker uses to find the segments it needs.\par MAKELIB creates a library file from any number of object files.  In addition to indicating where in the library file each segment is located, the library-dictionary segment indicates which object file each segment came from.  The MAKELIB utility can use that information to remove any component files you specify from a library file; it can even recreate the original object file by extracting the segments that made up that file and writing them out as an object file.  Use the (-F) and (-D) parameters to list the contents of an existing library file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object module format}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 code segment}}}{\v\fs20 \par }{\fs20 The MAKELIB command is for use only with ORCA object-module-format (OMF) library files used by the linker.  For information on the creation and use of libraries used by language compilers, consult the manuals that came with those compilers.\par MAKELIB accepts either OMF 1 or OMF 2 files as input, but always produces OMF 2 files as output.  MAKELIB literally converts OMF 1 files to OMF 2 files before placing them in the library.  Among other things, this gives you one way to convert an OMF 1 file to an OMF 2 file:  first create a library with the OMF 1 file, then extract the file from the library.  The extracted file will be in OMF 2 format.\par To create an OMF library file using the ORCA/Modula-2 compiler, use the following procedure:\par }\pard \qj\widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 1.\tab Write one or more source files as implementation modules.\par }{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 KEEP parameter}}}{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPILE command}}}{\v\fs20 \par }{\fs20 \par 2.\tab Compile the programs.  Each source file is saved as an object files with the extension .A.  Modula-2 will also create a file ending with the suffix .SYM}{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYM files}}}{\fs20 ; this is the reference file which is used by Modula-2 when it processes FROM statement}{\pard\plain \qj\fi-360\li634\widctlpar\tx634\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FROM statement}}}{\fs20 s that use the module.  You will generally mode this file to the interfaces folder, 13:M2Defs.\par \par 3.\tab Run the MAKELIB utility, specifying each object file to be included in the library file.  For example, if you compiled two source files, creating the object files LIBOBJ1.A and LIBOBJ2.A, and your library file is named LIBFILE, then your command line should be as follows:\par \par }\pard \fi-450\li1440\widctlpar\adjustright {\b\f6\fs14 MAKELIB LIBFILE +LIBOBJ1.A +LIBOBJ2.A\par }\pard \qj\fi-360\li634\widctlpar\tx720\adjustright {\fs18 \par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 4.\tab Place the new library file in the LIBRARIES: subdirectory.  (You can accomplish this in step 3 by specifying 13:LIBFILE for the library file, or you can use the MOVE command after the file is created.)\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b MODULA2}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v MODULA2\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 MODULA2\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MODULA2 command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to MODULA2, the language stamp used by ORCA/Modula-2.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b MOVE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v MOVE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\tx360\adjustright {\pard\plain \qj\keepn\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\pard\plain \qj\keepn\widctlpar\tx360\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MOVE command\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 MOVE [-C] [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 pathname2}{\f6\fs20 ]\par \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 MOVE [-C] [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 directory2}{\f6\fs20 ]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command moves a file from one directory to another; it can also be used to rename a file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab If you specify -C before the first file name, then MOVE does not prompt you if the target file name (}{\i\fs20 filename2}{\fs20 ) already exists.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\i\fs20 \par }{\fs20 -P\tab The MOVE command prints progress information showing what file is being moved as it works through a list of files.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname1}{\fs20 \tab The full path name or partial path name (including the file name) of the file to be moved.  Wildcard characters may be used in this file name.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full path name or partial path name of the directory you wish to move the file to.  If you specify a target file name, the file is renamed when it is moved.  Wildcard characters can }{\i\fs20 not}{\fs20  be used in this path name.  If the prefix of }{\i\fs20 pathname2}{\fs20  is the same as that of }{\i\fs20 pathname1}{\fs20 , then the file is renamed only.\par \par }{\i\fs20 directory2}{\fs20 \tab The path name or partial path name of the directory you wish to move the file to.  If you do not include a file name in the target path name, then the file is not renamed.  Wildcard characters can }{\i\fs20 not}{\fs20  be used in this path name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If }{\i\fs20 pathname1}{\fs20  and the target directory are on the same volume, then ORCA calls GS/OS to move the directory entry (and rename the file, if a target file name is specified).  If the source and destination are on different volumes, then the file is copied; if the copy is successful, then the original file is deleted.  If the file specified in }{\i\fs20 pathname2}{\fs20  already exists and you complete the move operation, then the old file named }{\i\fs20 pathname2 }{\fs20 is deleted and replaced by the file that was moved.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b NEWER}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v NEWER\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NEWER command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modification date}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 NEWER }{\i\f6\fs20 pathname1 pathname2...}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command checks to see if any file in a list of files has been modified since the first file was modified.  If the first file is newer than, or as new as, all of the other files, the \{Status\} shell variable is set to 0.  If any of the files after the first file is newer than the first file, the \{Status\} shell variable is set to 1.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname1}{\fs20 \tab The full or partial path name of the file to be checked.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname2...}{\fs20 \tab The full or partial path name of the files to compare with the first file.  If any of the files in this list have a modification date after }{\i\fs20 pathname1}{\fs20 , \{Status\} is set to 1.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command is most commonly used in script files to create sophisticated scripts that automatically decide when one of several files in a project need to be recompiled.\par The GS/OS operating system records the modification date to the nearest minute.  It is quite possible, unfortunately, to make changes to more than one file, then attempt to rebuild a file, in less than one minute.  In this case, the command may miss a file that has been changed.  See the TOUCH command for one way to update the time stamp.\par Wildcards may be used in any path name.  If the first file is specified with a wildcard, only the first matching file is checked.  If wildcards are used in the remaining names, each matching file is checked against the first file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Status\} variable}}}{\v\fs20 \par }{\fs20 It is possible for the NEWER command to return a value other than 0 or 1; this would happen, for example, if a disk is damaged or if one of the files does not exist at all.  For this reason, your script files should check for specific values of 0 or 1.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 \{Exit\} variable}}}{\v\fs20 \par }{\fs20 A status variable other than zero generally causes a script file to exit.  To prevent this, be sure and unset the exit shell variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b PASCAL}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v PASCAL\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs20 PASCAL\par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PASCAL command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the shell default language to PASCAL, the language stamp used by the ORCA/Pascal compiler.\par While you can set the language and create Pascal source files, you will not be able to compile them unless you purchase the ORCA/Pascal compiler and install it with ORCA/Modula-2.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b PREFIX}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v PREFIX\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PREFIX command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 PREFIX [-C] [}{\i\f6\fs20 n}{\f6\fs20 ] }{\i\f6\fs20 directory}{\f6\fs20 [:]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command sets any of the eight standard GS/OS prefixes to a new subdirectory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -C\tab The PREFIX command does not normally allow you to set a prefix to a path name that does not exist or is not currently available.  The -C flag overrides this check, allowing you to set the prefix to any valid GS/OS path name.\par \par }{\i\fs20 n}{\fs20 \tab A number from 0 to 31, indicating the prefix to be changed.  If this parameter is omitted, 8 is used.  This number must be preceded by one or more spaces.\par \par }{\i\fs20 directory}{\fs20 \tab The full or partial path name of the subdirectory to be assigned to prefix }{\i\fs20 n.}{\fs20   If a prefix number is used for this parameter, you must follow the prefix number with the : character.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Prefix 8 is the current prefix; all shell commands that accept a path name use prefix 8 as the default prefix if you do not include a colon (:) at the beginning of the path name.  Prefixes 9 through 17 are used for specific purposes by ORCA, GS/OS and the Apple\~II}{\fs18 GS}{\fs20  tools; see the section \ldblquote Standard Prefixes\rdblquote  in this chapter for details.  The default settings for the prefixes are shown in Table 8.3.  Prefixes 0 to 7 are obsolete ProDOS prefixes, and should no longer be used.  Use the SHOW PREFIX}{\i\fs20  }{\fs20 command to find out what the prefixes are currently set to.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\v\fs20 \par }{\fs20 The prefix assignments are reset to the defaults each time ORCA is booted.  To use a custom set of prefix assignments every time you start ORCA, put the PREFIX commands in the LOGIN file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b PRODOS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v PRODOS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS language}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASCII character set}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 PRODOS\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the ORCA shell default language to GS/OS text.  GS/OS text files are standard ASCII files with GS/OS file type $04; these files are recognized by GS/OS as text files.  ORCA TEXT files, on the other hand, are standard ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The ORCA language type is not used by GS/OS.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b QUIT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v QUIT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 QUIT command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 QUIT\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command terminates the ORCA program and returns control to GS/OS.  If you called ORCA from another program, GS/OS returns you to that program; if not, GS/OS prompts you for the next program to load.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b RENAME}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v RENAME\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RENAME command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 RENAME }{\i\f6\fs20 pathname1}{\f6\fs20  }{\i\f6\fs20 pathname2\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command changes the name of a file.  You can also use this command to move a file from one subdirectory to another on the same volume.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 pathname1}{\fs20  \tab The full path name or partial path name (including the file name) of the file to be renamed or moved.  If you use wildcard characters in the file name, the first file name matched is used.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full path name or partial path name (including the file name) to which }{\i\fs20 pathname1}{\fs20  is to be changed or moved.  You cannot use wildcard characters in the file name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you specify a different subdirectory for }{\i\fs20 pathname2}{\fs20  than for }{\i\fs20 pathname1}{\fs20 , then the file is moved to the new directory and given the file name specified in }{\i\fs20 pathname2.}{\fs20 \par The subdirectories specified in }{\i\fs20 pathname1}{\fs20  and }{\i\fs20 pathname2}{\fs20  must be on the same volume.  To rename a file and move it to another volume, use the MOVE command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b RESEQUAL}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v RESEQUAL\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RESEQUAL command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 RESEQUAL [-P] }{\i\f6\fs20 pathname1 pathname2}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The external command RESEQUAL compares the resources in two files and writes their differences to standard out.\par RESEQUAL checks that each file contains resources of the same type and identifier as the other file; that the size of the resources with the same type and identifier are the same; and that their contents are the same.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\f6\fs20 -P\tab }{\fs20 If this flag is used, a copyright message and progress information is written to error out.\par \par }{\i\f6\fs20 pathname1}{\f6\fs20 \tab }{\fs20 The full or partial path name of one of the two files to compare.\par \par }{\i\f6\fs20 pathname2}{\f6\fs20 \tab }{\fs20 The full or partial path name of one of the two files to compare.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If a mismatch is found, the mismatch and the subsequent 15 bytes are written to standard out.  RESEQUAL then continues the comparison, starting with the byte following the last byte displayed.  The following messages appear when reporting differences:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab In 1 but not in 2\par \par \tab The resource type and ID are displayed.\par \par \bullet \tab In 2 but not in 1\par \par \tab The resource type and ID are displayed.\par \par \bullet \tab Resources are different sizes\par \par \tab The resource type, resource ID, and the size of the resource in each file are displayed.\par \par \bullet \tab Resources have different contents\par \par \tab This message is followed by the resource type and ID, then by the offset in the resource, and 16 bytes of the resource, starting at the byte that differed.  If more than ten differences are found in the same resource, the rest of the resource is skipped and processing continues with the next resource.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b REZ}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v REZ\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 REZ command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 REZ}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This language command sets the default language to Rez.  The resource compiler is described in Chapter 10.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b RUN}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v RUN\tcl3}}}{\b \par }\pard \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright {\pard\plain \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RUN command\bxe }}}{\pard\plain \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASMLG command}}}{\pard\plain \qj\fi-540\li540\keepn\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ASML command}}}{\v\fs20 \par }\pard \fi-540\li540\keepn\widctlpar\tx540\adjustright {\fs20 \par }\pard \fi-810\li810\keepn\widctlpar\tx810\adjustright {\f6\fs20 RUN\tab [+D|-D] [+E|-E] [-I] [+M|-M] [+L|}{\f6\fs20\ul -L}{\f6\fs20 ] [+O|}{\f6\fs20\ul -O}{\f6\fs20 ] [}{\f6\fs20\ul +P}{\f6\fs20 |-P] [-R] [+S|}{\f6\fs20\ul -S}{\f6\fs20 ] [+T|}{\f6\fs20\ul -T}{\f6\fs20 ] [+W|}{\f6\fs20\ul -W}{\f6\fs20 ] }{\i\f6\fs20 sourcefile}{\f6\fs20   [KEEP=}{\i\f6\fs20 outfile}{\f6\fs20 ]\par \tab [NAMES=(}{\i\f6\fs20 seg1}{\f6\fs20 [ }{\i\f6\fs20 seg2}{\f6\fs20 [ ...]])] [}{\i\f6\fs20 language1}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) [}{\i\f6\fs20 language2}{\f6\fs20 =(}{\i\f6\fs20 option}{\f6\fs20  ...) ...]]\par }\pard \qj\li540\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command compiles (or assembles), links, and runs a source file.  Its function is identical to that of the ASMLG command.  See the ASML command for a description of the parameters.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SET}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SET\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:assigning values to}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 command line}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 SET [}{\i\f6\fs20 variable}{\f6\fs20  [}{\i\f6\fs20 value}{\f6\fs20 ]]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command allows you to assign a value to a variable name.  You can also use this command to obtain the value of a variable or a list of all defined variables.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 \tab The variable name you wish to assign a value to.  Variable names are not case sensitive, and only the first 255 characters are significant.  If you omit }{\i\fs20 variable}{\fs20 , then a list of all defined names and their values is written to standard output.\par \par }{\i\fs20 value}{\fs20 \tab The string that you wish to assign to }{\i\fs20 variable.}{\fs20   Values are case sensitive and are limited to 65536 characters.  All characters, including spaces, starting with the first non-space character after }{\i\fs20 variable}{\fs20  to the end of the line, are included in }{\i\fs20 value.}{\fs20   If you include }{\i\fs20 variable}{\fs20  but omit }{\i\fs20 value}{\fs20 , then the current value of }{\i\fs20 variable}{\fs20   is written to standard output.  Embed spaces within }{\i\fs20 value}{\fs20  by enclosing }{\i\fs20 value}{\fs20  in double quote marks.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A variable defined with the SET command is normally available only in the EXEC file where it is defined, or if defined on the command line, only from the command line.  The variable and its value are not normally passed on to EXEC files, nor are the variables set in an EXEC file available to the caller of the EXEC file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXPORT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:scope}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXEC files\:parameter passing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command}}}{\v\fs20 \par }{\fs20 To pass a variable and its value on to an EXEC file, you must export the variable using the EXPORT command.  From that time on, any EXEC file will receive a copy of the variable.  Note that this is a copy: UNSET commands used to destroy the variable, or SET commands used to change it, will not affect the original.  Variables exported from the LOGIN file are exported to the command level.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXECUTE command}}}{\v\fs20 \par }{\fs20 You can cause changes to variables made in an EXEC file to change local copies.  See the EXECUTE command for details.\par Use the UNSET command to delete the definition of a variable.\par Certain variable names are reserved; see "Programming EXEC Files, earlier in this chapter, for a list of reserved variable names.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SHOW}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SHOW\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHOW command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language numbers}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard prefixes}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 device names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 volume names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 devices}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 SHOW [LANGUAGE] [LANGUAGES] [PREFIX] [TIME] [UNITS]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command provides information about the system.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 LANGUAGE \tab Shows the current system-default language.\par \par LANGUAGES\tab Shows a list of all languages defined in the language table, including their language numbers.\par \par PREFIX\tab Shows the current subdirectories to which the GS/OS prefixes are set.  See the section \ldblquote Standard Prefixes\rdblquote  in this chapter for a discussion of ORCA prefixes.\par \par TIME\tab Shows the current time.\par \par UNITS\tab Shows the available units, including device names and volume names.  Only those devices that have formatted GS/OS volumes in them are shown.  To see the device names for all of your disk drives, make sure that each drive contains a GS/OS disk.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 More than one parameter can be entered on the command line; to do so, separate the parameters by one or more spaces.  If you enter no parameters, you are prompted for them.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SHUTDOWN}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SHUTDOWN\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHUTDOWN command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 SHUTDOWN\par }{\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 This internal command shuts down the computer, ejecting floppy disks and leaving any RAM disk intact.  A dialog will appear which allows you to restart the computer.\par Technically, the command performs internal clean up of the shell's environment, just as the QUIT command does, ejects all disks, and then does an OSShutDown call with the shut down flags set to 0.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b SWITCH}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v SWITCH\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SWITCH command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 SWITCH [-P] }{\i\f6\fs20 pathname1}{\f6\fs20  }{\i\f6\fs20 pathname2}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command interchanges two file names in a directory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, the names of the two files switched are written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname1}{\fs20  \tab The full path name or partial path name (including the file name) of the first file name to be moved.  If you use wildcard characters in the file name, the first file name matched is used.\par \par }{\i\fs20 pathname2}{\fs20 \tab The full path name or partial path name (including the file name) to be switched with }{\i\fs20 pathname1}{\fs20  .  The prefix in }{\i\fs20 pathname2}{\fs20  must be the same as the prefix in }{\i\fs20 pathname1}{\fs20 .  You cannot use wildcard characters in this file name.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For example, suppose the directory listing for :ORCA:MYPROGS: is as follows in the figure below:\par }\pard \fi720\widctlpar\tx6120\adjustright {\f6\fs14 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CATALOG command}}}{\v\fs20 \par }\pard \fi720\keepn\widctlpar\tx6120\adjustright {\f6\fs14 :ORCA:MYPROGS:=\par Name         Type   Blocks     Modified           Created    Access  Subtype\par \par C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par ABS.OBJECT    OBJ     8    12 NOV 86 15:02    4 MAR 86 14:17  NBWR   \par }\pard \keepn\widctlpar\tx2070\tx2700\tx4230\tx5130\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Figure 8.15. CATALOG :ORCA:MYPROGS: command\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To reverse the positions in the directory of the last two files, use the following command:\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \fi-270\li720\widctlpar\adjustright {\b\f6\fs18 SWITCH :ORCA:MYPROGS:COMMAND.FILE :ORCA:MYPROGS:ABS.OBJECT\par }\pard \widctlpar\tx360\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Now if you list the directory again, it looks like this:\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \fi720\keepn\widctlpar\tx4230\adjustright {\f6\fs14 :ORCA:MYPROGS:=\par Name         Type   Blocks     Modified           Created    Access  Subtype\par \par C.SOURCE      SRC     5    26 MAR 86 07:43   29 FEB 86 12:34  DNBWR   C\par ABS.OBJECT    OBJ     8    12 NOV 86 15:02    4 MAR 86 14:17   NBWR   \par COMMAND.FILE  SRC     1     9 APR 86 19:22   31 MAR 86 04 22  DNBWR   EXE\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\widctlpar\adjustright {\fs20 Figure 8.16. CATALOG :ORCA:MYPROGS: command\par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DOS}}}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMPRESS command}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can alphabetize GS/OS directories with the COMPRESS command, and list directories with the CATALOG command.  This command works only on GS/OS directories, not on other file systems such as DOS or Modula-2.  Due to the design of GS/OS, the SWITCH command will also not work on the disk volume that you boot from \endash  to modify the boot volume of your hard disk, for example, you would have to boot from a floppy disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b TEXT}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v TEXT\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 source files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language names}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRODOS command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TEXT language}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 TEXT\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\fs20 This language command sets the ORCA shell default language to ORCA TEXT.  ORCA text files are standard-ASCII files with GS/OS file type $B0 and an ORCA language type of TEXT.  The TEXT file type is provided to support any text formatting programs that may be added to ORCA.  TEXT files are shown in a directory listing as SRC files with a subtype of TEXT.\par Use the PRODOS command to set the language type to GS/OS text; that is, standard ASCII files with GS/OS file type $04.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\fs20 PRODOS text files are shown in a directory listing as TXT files with no subtype.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b TOUCH}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v TOUCH\tcl3}}}{\b \par }\pard \keepn\widctlpar\tx620\adjustright {\fs20 \par }{\f6\fs20 TOUCH [-P]\tab }{\i\f6\fs20 pathname}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TOUCH command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modification date}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command "touches" a file, changing the file's modification date and time stamp to the current date and time, just as if the file had been loaded into the editor and saved again.  The contents of the file are not affected in any way.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 -P\tab When wildcards are used, a list of the files touched is written to standard out.  The -P flag suppresses this progress information.\par \par }{\i\fs20 pathname}{\fs20  \tab The full path name or partial path name (including the file name) of the file to be touched.  You can use wildcard characters in this file name, in which case every matching file is touched.  You can specify more than one path name in the command; separate path names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b TYPE}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v TYPE\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\tx620\adjustright {\f6\fs20 TYPE\tab [+N|}{\f6\fs20\ul -N}{\f6\fs20 ] [}{\f6\fs20\ul +T}{\f6\fs20 |-T] }{\i\f6\fs20 pathname1}{\f6\fs20  [}{\i\f6\fs20 startline1}{\f6\fs20  [}{\i\f6\fs20 endline1}{\f6\fs20 ]] [}{\i\f6\fs20 pathname2}{\f6\fs20  \tab [}{\i\f6\fs20 startline2}{\f6\fs20  [}{\i\f6\fs20 endline2}{\f6\fs20 ]]...]\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TYPE command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 wildcards}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 standard output}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This internal command prints one or more text or source files to standard output (usually the screen).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\fs20 +N|-N\tab If you specify +N, the shell precedes each line with a line number.  The default is -N: no line numbers are printed.\par \par +T|-T\tab The TYPE command normally expands tabs as a file is printed; using the -T flag causes the TYPE command to send tab characters to the output device unchanged.\par \par }{\i\fs20 pathname}{\fs20  \tab The full path name or partial path name (including the file name) of the file to be printed.  You can use wildcard characters in this file name, in which case every text or source file matching the wildcard file name specification is printed.  You can specify more than one path name in the command; separate path names with spaces.\par \par }{\i\fs20 start linen}{\fs20 \tab The line number of the first line of this file to be printed.  If this parameter is omitted, then the entire file is printed.\par \par }{\i\fs20 endlinen}{\fs20 \tab The line number of the last line of this file to be printed.  If this parameter is omitted, then the file is printed from }{\i\fs20 startline}{\fs20  to the end of the file.\par }{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text files}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 printing files}}}{\pard\plain \qj\fi-1080\li1440\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 merging files}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA text files, GS/OS text files, and ORCA source files can be printed with the TYPE command.  Use the TYPE command and output redirection to merge files.  For example, to merge the files FILE1 and FILE2 into the new file FILE3, use the command:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\b\f6\fs18 \tab TYPE FILE1 FILE2 > FILE3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs\:removing}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DETAB}}}{\fs20 Normally, the TYPE command functions as a DETAB utility, expanding tabs to an appropriate number of spaces as the file it sent to the output device.  The TYPE command examines the language stamp of the file being typed, reading the appropriate tab line from the SYSTABS file to determine where the tab stops are located.\par If you are using the type command to append one file to the end of another, you may not want tabs to be expanded.  In That case, the -T flag can be used to suppress tab expansions.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b UNALIAS}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v UNALIAS\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNALIAS command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ALIAS command}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 UNALIAS }{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20  ...]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The UNALIAS command deletes an alias created with the ALIAS command.  More than one alias can be deleted by listing all of them, separated by spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b UNSET}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v UNSET\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 UNSET command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SET command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell variables\:assigning values to}}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 UNSET }{\i\f6\fs20 variable1}{\f6\fs20  [}{\i\f6\fs20 variable2}{\f6\fs20 ...]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command deletes the definition of a variable.  More than one variable may be deleted by separating the variable names with spaces.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\widctlpar\tx1800\adjustright {\i\fs20 variable}{\fs20 \tab The name of the variable you wish to delete.  Variable names are not case sensitive, and only the first 255 characters are significant.\par }\pard \qj\fi-1080\li1440\widctlpar\tx1440\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use the SET command to define a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b *}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v *\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 COMMENT command\bxe }}}{\v\fs20 \par }{\fs20 \par }{\f6\fs20 * }{\i\f6\fs20 string}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The * command is the comment.  By making the comment a command that does nothing, you are able to rename it to be anything you wish.  Since it is a command, the comment character must be followed by a space.  All characters from there to the end of the line, or up to a ; character, which indicates the start of the next command, are ignored.\par {\*\bkmkend bk16}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}{\rxe bk16}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 9 - The Text Editor\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 9 \endash  The Text Editor\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Chapter 9 \endash  The Text Editor\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ORCA editor allows you to write and edit source and text files.  This chapter provides reference material on the editor, including detailed descriptions of all editing commands. \par The first section in this chapter, \ldblquote Modes,\rdblquote  describes the different modes in which the editor can operate.  The second section, \ldblquote Macros,\rdblquote  describes how to create and use editor macros, which allow you to execute a string of editor commands with a single keystroke.  The third section, "Using Editor Dialogs," gives a general overview of how the mouse and keyboard are used to manipulate dialogs.  The next section, \ldblquote Commands,\rdblquote  describes each editor command and gives the key or key combination assigned to the command.  The last section, \ldblquote Setting Editor Defaults,\rdblquote  describes how to set the defaults for editor modes and tab settings for each language.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Modes}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Modes\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The behavior of the ORCA editor depends on the settings of several modes, as follows:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Insert.\par \bullet \tab Escape.\par \bullet \tab Auto Indent.\par \bullet \tab Text Selection.\par \bullet \tab Hidden Characters.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Most of these modes has two possible states; you can toggle between the states while in the editor.  The default for these modes can be changed by changing flags in the SYSTABS file; this is described later in this chapter, in the section "Setting Editor Defaults."  All of these modes are described in this section.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Insert}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Insert\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:over strike mode\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert mode\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you first start the editor, it is in over strike mode; in this mode the characters you type replace any characters the cursor is on.  In insert mode, any characters you type are inserted at the left of the cursor; the character the cursor is on and any characters to the right of the cursor are moved to the right.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:line length\bxe }}}{\v\fs20 \par }{\fs20 The maximum number of characters the ORCA editor will display on a single line is 255 characters, and this length can be reduced by appropriate settings in the tab line.  If you insert enough characters to create a line longer than 255 characters, the line is wrapped and displayed as more than one line.  Keep in mind that most languages limit the number of characters on a single source line to 255 characters, and may ignore any extra characters or treat them as if they were on a new line.\par To enter or leave the insert mode, type }{\outl\fs18 \u-3\'f0}{\f6\fs18 E}{\fs20 .  When you are in insert mode, the cursor will be an underscore character that alternates with the character in the file.  In over strike mode, the cursor is a blinking box that changes the underlying character between an inverse character (black on white) and a normal character (white on black).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Escape}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Escape\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:escape mode\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:repeat counts\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\tx180\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you press the }{\outl\fs18 ESC}{\fs20  key, the editor enters the escape mode.  For the most part, the escape mode works like the normal edit mode.  The principle difference is that the number keys allows you to enter repeat counts, rather than entering numbers into the file.  After entering a repeat count, a command will execute that number of times.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert blank lines command}}}{\v\fs20 \par }{\fs20 For example, the }{\outl\fs18 \u-3\'f0}{\fs20 B command inserts a blank line in the file.  If you would like to enter fifty blank lines, you would enter the escape mode, type 50}{\outl\fs18 \u-3\'f0}{\fs20 B, and leave the escape mode by typing the }{\outl\fs18 ESC}{\fs20  key a second time.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:escape mode}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:open Apple key}}}{\v\fs20 \par }{\fs20 Earlier, it was mentioned that the number keys were used in escape mode to enter repeat counts.  In the normal editor mode, }{\outl\fs18 \u-3\'f0}{\fs20  followed by a number key moves to various places in the file.  In escape mode, the }{\outl\fs18 \u-3\'f0 }{\fs20 key modifier allows you to type numbers.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:control underscore key\bxe }}}{\v\fs20 \par }{\fs20 The only other difference between the two modes is the way }{\outl\fs18 CTRL}{\fs20 _ works.  This key is used primarily in macros.  If you are in the editor mode, }{\outl\fs18 CTRL}{\fs20 _ places you in escape mode.  If you are in escape mode, it does nothing.  In edit mode, }{\outl\fs18 \u-3\'f0CTRL}{\fs20 _ does nothing; in escape mode, it returns you to edit mode.  This lets you quickly get into the mode you need to be in at the start of an editor macro, regardless of the mode you are in when the macro is executed.\par The remainder of this chapter describes the standard edit mode.}{\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Auto Indent}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Auto Indent\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:auto-indent mode\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can set the editor so that }{\outl\fs18 RETURN}{\fs20  moves the cursor to the first column of the next line, or so that it follows indentations already set in the text.  If the editor is set to put the cursor on column 1 when you press }{\outl\fs18 RETURN}{\fs20 , then changing this mode causes the editor to put the cursor on the first non-space character in the next line; if the line is blank, then the cursor is placed under the first non-space character in the first non-blank line above the cursor.  The first mode is generally best for line-oriented languages, like assembly language or BASIC.  The second is handy for block-structured languages like C or Modula-2.\par To change the return mode, type }{\outl\fs18 \u-3\'f0RETURN}{\f6\fs18 .}{\outl\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Select Text}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Select Text\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by line\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can use the mouse or the keyboard to select text in the ORCA editor.  This section deals with the keyboard selection mechanism; see "Using the Mouse," later in this chapter, for information about selecting text with the mouse.\par The Cut, Copy, Delete and Block Shift commands require that you first select a block of text.  The ORCA editor has two modes for selecting text: line-oriented and character-oriented selects.  As you move the cursor in line-oriented select mode, text or code is marked a line at a time.  In the character-oriented select mode, you can start and end the marked block at any character.  Line-oriented select mode is the default for assembly language; for text files and most high-level languages, character-oriented select mode is the default.\par While in either select mode, the following cursor-movement commands are active:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:bottom of screen command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:top of screen command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor down command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor up command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:start of line command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:screen move commands}}}{\v\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab bottom of screen\par \bullet \tab top of screen\par \bullet \tab cursor down\par \bullet \tab cursor up\par \bullet \tab start of line\par \bullet \tab screen moves\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In addition, while in character-oriented select mode, the following cursor-movement commands are active:\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor left command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor right command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab left command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word right command}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word left command}}}{\v\fs20 \par }\pard \qj\fi-270\li720\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab cursor left\par \bullet \tab cursor right\par \bullet \tab end of line\par \bullet \tab tab\par \bullet \tab tab left\par \bullet \tab word right\par \bullet \tab word left\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:RETURN key}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:ESCAPE key}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 As you move the cursor, the text between the original cursor position and the final cursor position is marked (in inverse characters).  Press }{\outl\fs18 RETURN}{\fs20  to complete the selection of text.  Press }{\outl\fs18 ESC}{\fs20  to abort the operation, leave select mode, and return to normal editing.\par To switch between character- and line-oriented selection while in the editor, type }{\outl\fs18 CTRL\u-3\'f0}{\f6\fs18 x}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Hidden Characters}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Hidden Characters\tcl3}}}{\b \par }\pard \qj\keep\keepn\widctlpar\adjustright {\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tabs}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:hidden characters}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 return characters}}}{\pard\plain \qj\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hidden characters}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are cases where line wrapping or tab fields may be confusing.  Is there really a new line, or was the line wrapped?  Do those eight blanks represent eight spaces, a tab, or some combination of spaces and tabs?  To answer these questions, the editor has an alternate display mode that shows hidden characters.  To enter this mode, type }{\outl\fs18 \u-3\'f0}{\fs20 =; you leave the mode the same way.  While you are in the hidden character mode, end of line characters are displayed as the mouse text return character.  Tabs are displayed as a right arrow where the tab character is located, followed by spaces until the next tab stop.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Macros}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Macros\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:macros\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can define up to 26 macros for the ORCA editor, one for each letter on the keyboard.  A macro allows you to substitute a single keystroke for up to 128}{\b\fs20  }{\fs20 predefined keystrokes.  A macro can contain both editor commands and text, and can call other macros.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:create macros command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:arrow keys}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:end macro definition command}}}{\v\fs20 \par }{\fs20 To create a macro, press}{\fs18  }{\outl\fs18 \u-3\'f0ESC}{\fs20 .  The current macro definitions for A to J appear on the screen.  The }{\outl\fs18 LEFT-ARROW}{\fs20  and }{\outl\fs18 RIGHT-ARROW}{\fs20  keys can be used to switch between the three pages of macro definitions.  To replace a definition, press the key that corresponds to that macro, then type in the new macro definition.  You must be able to see a macro to replace it - use the left and right arrow keys to get the correct page.  Press }{\outl\fs18 OPTION ESC }{\fs20 to terminate the macro definition.  You can include }{\outl\fs18 CTRL}{\i\fs20 key}{\fs20  combinations, }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20  combinations, }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20  combinations, and the }{\outl\fs18 RETURN}{\fs20 , }{\outl\fs18 ENTER}{\fs20 , }{\outl\fs20 ESC}{\fs20 , and arrow keys.  The following conventions are used to display keystrokes in macros:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:macro keystrokes\bxe }}}{\v\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\outl\fs18 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\outl\fs18 CTRL}{\i\fs20 key}{\fs20  \tab The uppercase character }{\i\fs20 key}{\fs20  is shown in inverse.\par }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20 \tab An inverse A followed by }{\i\fs20 key }{\fs20 (for example,}{\i\fs20  }{\shad\fs20 A}{\fs20 K)\par }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20 \tab An inverse B followed by }{\i\fs20 key}{\fs20  (for example,}{\i\fs20  }{\shad\fs20 B}{\fs20 K)\par }{\outl\fs18 ESC}{\fs20 \tab An inverse left bracket (}{\outl\fs18 CTRL}{\fs20  [).\par }{\outl\fs18 RETURN}{\fs20 \tab An inverse M (}{\outl\fs18 CTRL}{\fs20  M).\par }{\outl\fs18 ENTER}{\fs20 \tab An inverse J (}{\outl\fs18 CTRL}{\fs20  J).\par }{\outl\fs18 UP-ARROW}{\fs20 \tab An inverse K (}{\outl\fs18 CTRL}{\fs20  K).\par }{\outl\fs18 DOWN-ARROW}{\fs20 \tab An inverse J (}{\outl\fs18 CTRL}{\fs20  J).\par }{\outl\fs18 LEFT-ARROW}{\fs20 \tab An inverse H (}{\outl\fs18 CTRL}{\fs20  H).\par }{\outl\fs18 RIGHT-ARROW}{\fs20 \tab An inverse U (}{\outl\fs18 CTRL}{\fs20  U).\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\outl\fs18 DELETE}{\fs20 \tab A block\par }\pard \qj\fi-1800\li2160\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20  combination or }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20  combination counts as two keystrokes in a macro definition.  Although an }{\outl\fs18 \u-3\'f0}{\i\fs20 key}{\fs20  combination looks (in the macro definition) like a }{\outl\fs18 CTRL}{\fs20  A followed by }{\i\fs20 key}{\fs20 , and an }{\outl\fs18 OPTION}{\i\fs20 key}{\fs20  combination looks like a }{\outl\fs18 CTRL}{\fs20  B followed by }{\i\fs20 key}{\fs20 , you cannot enter }{\outl\fs18 CTRL}{\fs20  A when you want an }{\outl\fs18 \u-3\'f0}{\fs20  or }{\outl\fs18 CTRL}{\fs20  B when you want an }{\outl\fs18 OPTION}{\fs20  key.\par }\pard \qj\fi360\ri360\keep\widctlpar\adjustright {\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:deleting characters in macros}}}{\pard\plain \qj\fi360\ri360\keep\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:end macro definition command}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you make a mistake typing a macro definition, you can back up with \u-3\'f0}{\outl\fs18 DELETE}{\f6\fs18 .}{\fs20   If you wish to retype the macro definition, press }{\outl\fs18 OPTION}{\fs20  }{\outl\fs18 ESC}{\fs20  to terminate the definition, press the letter key for the macro you want to define, and begin over.  When you are finished entering macros, press }{\outl\fs18 OPTION}{\fs20  }{\outl\fs18 ESC}{\fs20  to terminate the last option definition, then press }{\outl\fs18 OPTION}{\fs20  to end macro entry.  If you have entered any new macro definitions, a dialog will appear asking if you want to save the macros to disk; select OK to save the new macro definitions, and Cancel to return to the editor.  If you select Cancel, the macros you have entered will remain in effect until you leave the editor.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:exit macro creation command}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSEMAC file}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Macros are saved on disk in the file SYSEMAC in the ORCA shell prefix.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:executing macros\bxe }}}{\v\fs20 \par }{\fs20 To execute a macro, hold down }{\outl\fs18 OPTION}{\fs20  and press the key corresponding to that macro.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Using Editor Dialogs}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using Editor Dialogs\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The text editor makes use of a number of dialogs for operations like entering search strings, selecting a file to open, and informing you of error conditions.  The way you select options, enter text, and execute commands in these dialogs is the same for all of them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:dialogs}}}{\fs20 Figure 9.1 shows the Search and Replace dialog, one of the most comprehensive of all of the editor's dialogs, and one that happens to illustrate many of the controls used in dialogs.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1050{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.1\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:editline items}}}{\fs20 The first item in this dialog is an editline control that lets you enter a string.  When the dialog first appears, the cursor is at the beginning of this line.  You can use any of the line editing commands from throughout the ORCA programming environment to enter and edit a string in this editline control; these line editing commands are summarized in Table 9.2.\par \par }\pard \qj\fi-1340\li1700\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 command\tab command name and effect\par }\pard \qj\fi-1340\li1700\keepn\widctlpar\adjustright {\pard\plain \qj\fi-1340\li1700\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:editline controls}}}{\v\fs20 \par }{\outl\fs14 \par }\pard \qj\fi-1340\li1700\widctlpar\adjustright {\outl\fs14 LEFT-ARROW}{\fs18 \tab }{\b\fs18 cursor left}{\fs18  - The cursor will move to the left.\par }{\outl\fs14 RIGHT-ARROW}{\fs18 \tab }{\b\fs18 cursor right}{\fs18  - The cursor will move to the right. \par }{\outl\fs14 \u-3\'f0}{\fs18 >}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 .}{\outl\fs18 \tab }{\b\fs18 end of line}{\fs18  -  The cursor will move to the right-hand end of the string.\par }{\outl\fs14 \u-3\'f0}{\fs18 <}{\outl\fs18  }{\fs18 or}{\outl\fs18  }{\outl\fs14 \u-3\'f0}{\fs18 ,}{\outl\fs18 \tab }{\b\fs18 start of line}{\fs18  - The cursor will move to the left-hand end of the string.\par }{\outl\fs14 \u-3\'f0}{\fs18 Y or }{\outl\fs14 CTRL}{\fs18 Y\tab }{\b\fs18 delete to end of line}{\fs18  - Deletes characters from the cursor to the end of the line.\par }\pard \fi-1340\li1700\widctlpar\adjustright {\outl\fs14 \u-3\'f0}{\fs18 Z or }{\outl\fs14 CTRL}{\fs18 Z\tab }{\b\fs18 undo}{\fs18  - Resets the string to the starting string.\par }{\outl\fs14 ESC}{\fs18  or }{\outl\fs14 CTRL}{\fs18 X\tab }{\b\fs18 exit}{\fs18  - Stops string entry, leaving the dialog without changing the default string or executing the command.\par }\pard \qj\fi-1340\li1700\widctlpar\adjustright {\outl\fs14 \u-3\'f0}{\fs18 E or }{\outl\fs14 CTRL}{\fs18 E\tab }{\b\fs18 toggle insert mode}{\fs18  - Switches between insert and over strike mode.  The dialog starts out in the same mode as the editor, but switching the mode in the dialog does not change the mode in the editor.\par }\pard \qj\fi-1340\li1700\keepn\widctlpar\adjustright {\outl\fs14 DELETE}{\fs18 \tab }{\b\fs18 delete character left}{\fs18  - Deletes the character to the left of the cursor, moving the cursor left.\par }\pard \qc\keepn\widctlpar\tx2880\adjustright {\fs20 \par }\pard \qc\widctlpar\tx2880\adjustright {\fs20 Table 9.2  Editline Control Commands\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tabs}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\fs20 The Search and Replace dialog has two editline items; you can move between them using the tab key.  You may also need to enter a tab character in a string, either to search specifically for a string that contains an imbedded tab character, or to place a tab character in a string that will replace the string once it is found.  To enter a tab character in an editline string, use }{\outl\fs18 \u-3\'f0}{\fs20 tab.  While only one space will appear in the editline control, this space does represent a tab character.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:check boxes}}}{\fs20 Four options appear below the editline controls.  Each of these options is preceded by an }{\outl\fs18 \u-3\'f0}{\fs20  character and a number.  Pressing }{\outl\fs18 \u-3\'f0}{\fs20 x, where x is the number, selects the option, and causes a check mark to appear to the left of the option.  Repeating the operation deselects the option, removing the check mark.  You can also select and deselect options by using the mouse to position the cursor over the item, anywhere on the line from the }{\outl\fs18 \u-3\'f0}{\fs20  character to the last character in the label.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:buttons}}}{\fs20 At the bottom of the dialog is a pair of buttons; some dialogs have more than two, while some have only one.  These buttons cause some action to occur.  In general, all but one of these buttons will have an }{\outl\fs18 \u-3\'f0}{\fs20  character and a number to the left of the button.  You can select a button in one of several ways:  by clicking on the button with the mouse, by pressing the RETURN key (for the default button, which is the one without an }{\outl\fs18 \u-3\'f0}{\fs20  character), by pressing }{\outl\fs18 \u-3\'f0}{\fs20 x, or by pressing the first letter of the label on the button.  (For dialogs with an editline item, the last option is not available.)\par Once an action is selected by pressing a button, the dialog will vanish and the action will be carried out.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1051{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:list controls}}}{\fs20 Figure 9.3 shown the Open dialog.  This dialog contains a list control, used to display a list of files and folders.\par You can scroll through the list by clicking on the arrows with the mouse, dragging the thumb with the mouse (the thumb is the space in the gray area between the up and down arrows), clicking in the gray area above or below the thumb, or by using the up and down arrow keys.\par If there are any files in the list, one will always be selected.  For commands line Open that require a file name, you will be able to select any file in the list; for commands like New, that present the file list so you know what file names are already in use, only folders can be selected.  You can change which file is selected by clicking on another file or by using the up or down arrow keys.  If you click on the selected name while a folder is selected, the folder is opened.  If you click on a selected file name, the file is opened.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Using the Mouse}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using the Mouse\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:mouse}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 mouse}}}{\fs20 All of the features of the editor can be used without a mouse, but the mouse can also be used for a number of functions.  If you prefer not to use a mouse, simply ignore it.  You can even disconnect the mouse, and the ORCA editor will perform perfectly as a text-based editor.\par The most common use for the mouse is moving the cursor and selecting text.  To position the cursor anywhere on the screen, move the mouse.  As soon as the mouse is moved, an arrow will appear on the screen; position this arrow where you would like to position the cursor and click.\par Several editor commands require you to select some text.  With any of these commands, you can select the text before using the command by clicking to start a selection, then dragging the mouse while holding down the button while you move to the other end of the selection.  Unlike keyboard selection, mouse selections are always done in character select mode.  You can also select words by double-clicking to start the selection, or lines by triple clicking to start the selection.  Finally, if you drag the mouse off of the screen while selecting text, the editor will start to scroll one line at a time.\par The mouse can also be used to select dialog buttons, change dialog options, and scroll list items in a dialog.  See "Using Editor Dialogs" in this chapter for details.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Command Descriptions}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Command Descriptions\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section describes the functions that can be performed with editor commands.  The key assignments for each command are shown with the command description.\par Screen-movement descriptions in this manual are based on the direction the display screen moves through the file, not the direction the lines appear to move on the screen.  For example, if a command description says that the screen scrolls down one line, it means that the lines on the screen move }{\i\fs20 up}{\fs20  one line, and the next line in the file becomes the bottom line on the screen.\par }\pard \qj\ri360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 @\tab }{\b About\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:about command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:version\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Shows the current version number and copyright for the editor.  Press any key or click on the mouse to get rid of the About dialog.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 G\tab }{\b Beep the Speaker\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:beep the speaker command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ASCII control character BEL ($07) is sent to the output device.  Normally, this causes the speaker to beep.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 , or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 <\tab }{\b Beginning of Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:beginning of line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is placed in column one of the current line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 DOWN-ARROW}{\outl\fs18 \tab }{\b Bottom of Screen / Page Down}{\b\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:bottom of screen command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor moves to the last visible line on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the bottom of the screen, the screen scrolls down twenty-two lines.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 C or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 C\tab }{\b Copy\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:copy command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTEMP file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:paste command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the Copy command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\fs18 RETURN}{\fs20 .  The selected text is written to the file SYSTEMP in the work prefix.  (To cancel the Copy operation without writing the block to SYSTEMP, press }{\outl\fs18 ESC }{\fs20 instead of }{\outl\fs18 RETURN}{\fs20 .)  Use the Paste command to place the copied material at another position in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 W or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 W\tab }{\b Close\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:close command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Closes the active file.  If the file has been changed since the last update, a dialog will appear, giving you a chance to abort the close, save the changes, or close the file without saving the changes.  If the active file is the only open file, the editor exits after closing the file; if there are other files, the editor selects the next file to become the active file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 DOWN-ARROW}{\b\fs20 \tab }{\b Cursor Down\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor down command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved down one line, preserving its horizontal position.  If it is on the last line of the screen, the screen scrolls down one line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 LEFT-ARROW}{\tab }{\b Cursor Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved left one column.  If it is in column one, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 RIGHT-ARROW\tab }{\b Cursor Right\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor right command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved right one column.  If it is on the end-of-line marker (usually column 80), the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 UP-ARROW\tab }{\b Cursor Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cursor up command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved up one line, preserving its horizontal position.  If it is on the first line of the screen, the screen scrolls up one line.  If the cursor is on the first line of the file, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 X or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 X\tab }{\b Cut\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:cut command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the Cut}{\i\fs20  }{\fs20 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use cursor-movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\fs18 RETURN}{\fs20 .  The selected text is written to the file SYSTEMP in the work prefix, and deleted from the file.  (To cancel the Cut operation without cutting the block from the file, press  }{\outl\fs18 ESC}{\fs20  instead of }{\outl\fs18 RETURN}{\fs20 ).  Use the Paste command to place the cut text at another location in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 ESC}{\b\scaps\fs20 \tab }{\b Define Macros\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:define macros command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor enters the macro definition mode.  Press }{\outl\fs18 OPTION ESC}{\fs20  to terminate a definition, and }{\outl\fs18 OPTION}{\fs20  to terminate macro definition mode.  The macro definition process is described in the section \ldblquote Macros\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 DELETE}{\b\scaps\fs20 \tab }{\b Delete\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the delete}{\i\fs20  }{\fs20 command, the editor enters select mode, as discussed in the section \ldblquote Select Text\rdblquote  in this chapter.  Use any of the cursor movement or screen-scroll commands to mark a block of text (all other commands are ignored), then press }{\outl\fs18 RETURN}{\fs20 .  The selected text is deleted from the file.  (To cancel the delete operation without deleting the block from the file, press }{\outl\fs18 ESC}{\fs20  instead of }{\outl\fs18 RETURN}{\fs20 .)\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 F or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 F\tab }{\b Delete Character\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo delete buffer}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo command}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The character that the cursor is on is deleted and put in the Undo buffer (see the description of the Undo command).  Characters to the right of the cursor are moved one space to the left to fill in the gap.  The last column on the line is replaced by a space.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 DELETE}{\b\fs20  or }{\outl\fs20 CTRL}{\b\fs20 D\tab }{\b Delete Character Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The character to the left of the cursor is deleted, and the character that the cursor is on, as well as the rest of the line to the right of the cursor, are moved 1 space to the left to fill in the gap.  If the cursor is in column one and the over strike mode is active, no action is taken.  If the cursor is in column one and the insert mode is active, then the line the cursor is on is appended to the line above and the cursor remains on the character it was on before the delete.  Deleted characters are put in the undo buffer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20  }{\b\outl\fs18 \u-3\'f0}{\b\fs20 T or }{\outl\fs20 CTRL}{\b\fs20 T\tab }{\b Delete Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The line that the cursor is on is deleted, and the following lines are moved up one line to fill in the space.  The deleted line is put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 Y or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 Y\tab }{\b Delete to EOL\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete to end of line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The character that the cursor is on, and all those to the right of the cursor to the end of the line, are deleted and put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20  }{\b\outl\fs18 \u-3\'f0}{\b\fs20 G}{\b\scaps\fs20 \tab }{\b Delete Word\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete word command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you execute the delete word command, the cursor is moved to the beginning of the word it is on, then delete character}{\i\fs20  }{\fs20 commands are executed for as long as the cursor is on a non-space character, then for as long as the cursor is on a space.  This command thus deletes the word plus all spaces up to the beginning of the next word.  If the cursor is on a space, that space and all following spaces are deleted, up to the start of the next word.  All deleted characters, including spaces, are put in the Undo buffer (see the description of the Undo command).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 . or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 >\tab }{\b End of Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:end of line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the last column on the line is not blank, the cursor moves to the last column.  If the last column is blank, then the cursor moves to the right of the last non-space character in the line.  If the entire line is blank, the cursor is placed in column 1.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 ? or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 /\tab }{\b Help}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:help command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSHELP file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell prefix}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Displays the help file, which contains a short summary of editor commands.  Use }{\outl\fs18 ESC}{\fs20  to return to the file being edited.\par The help file is a text file called SYSHELP, found in the shell prefix.  Since it is a text file, you can modify it as desired.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 B or }{\outl\fs20 CTRL}{\b\fs20 B\tab }{\b Insert Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A blank line is inserted at the cursor position, and the line the cursor was on and the lines below it are scrolled down to make room.  The cursor remains in the same horizontal position on the screen.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 SPACEBAR}{\b\fs20 \tab }{\b Insert Space\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:insert space command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A space is inserted at the cursor position.  Characters from the cursor to the end of the line are moved right to make room.  Any character in column 255 on the line is lost.  The cursor remains in the same position on the screen.  Note that the Insert Space command can extend a line past the end-of-line marker.\par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 N or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 N\tab }{\b New\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:new command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A dialog like the one show below appears.  You need to enter a name for the new file.  After entering a name, the editor will open an empty file using one of the ten available file buffers.  The file's location on disk will be determined by the directory showing in the dialog's list box.\par While the New command requires selecting a file name, no file is actually created until you save the file with the Save command.\par \par }\pard \qc\widctlpar\adjustright {{\pict{\*\picprop\shplid1052{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw415\pich262\picwgoal8300\pichgoal5240\macpict\bliptag216033400\blipupi72{\*\blipuid 0ce06878b640b85fd7259633d8998b3d}117200000001010601a01101a00082a03039a0008e01000a0000000002d0024098003400000000003b01a000000001003b01a000000001003b01a0000106001fcfff00fc06001fcfff00fc060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003120c60000630000007f0c1c0000630db000003120c60000630000007f0c1c0000630db000003120c600006300000060000c0000630db000003120c600006300000060000c0000630db000003150f60000733e6300601c0c3e00733e773e0de000003150f60000733e6300601c0c3e00733e773e0de000003150f600007f6363007e0c0c63007f036b630de000003150f600007f6363007e0c0c63007f036b630de000003150f60000677f6300600c0c7f00673f6b7f0de000003150f60000677f6b00600c0c7f00673f6b7f0de000003140e6000063606b00600c0c600063636b6dd000003140e6000063606b00600c0c600063636b6dd000003150f60000633f3e00601e1e3f00633f633f0de000003150f60000633f3e00601e1e3f00633f633f0de000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031610600000063007e0c006000c600fe0038060df0000031610600000063007e0c006000c600fe0038060df0000031610600000077006300006000ee00c00018060df0000031610600000077006300006000ee00c00018060df0000031812600000c6b63631c3e6318d6c6c07c187e7cde0e10000031812600000c6b63631c3e6318d6c6c07c187e7cde0e1000003171160000006b63630c606600d6c6fcc618c6c6ee0000003171160000006b63630c606600d6c6fcc618c6c6ee00000031711600000c6363630c3e7c18c6c6c0c618c6fece0000003980034003b0000007601a0003b0001007601a0003b0001007601a000011711600000c6363630c3e7c18c6c6c0c618c6fece000000317116000000633f630c036600c67ec0c618c6c0ce000000317116000000633f630c036600c67ec0c618c6c0ce00000031711600000063037e1e3e6300c606c07c3c7e7ece00000031711600000063037e1e3e6300c606c07c3c7e7ece0000003100060fe000103e0fc000107c0db000003100060fe000103e0fc000107c0db000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000030c02600007ddff00f8f60000030c02600007ddff00f8f60000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe0005060000c001c0e700091bf600838009cffff9f8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe0000031e02600018fe000507e0c0c630c0e700091cce06118009cf39f998fe0000031e02600018fe000507e0c0c630c0e700091cce04118009cf39f998fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050600c0c600c0e7000918c604218009cf3fc998fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031e02600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018de000518c60360000ffeff00f8fe0000031502600018fe0004080ffe3fcfe6ff01f806f60000031502600018fe0004080ffe3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003150a60001803f00009ffff3fcfe6ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003170c600018061fe009fc1f3c0c190fe8ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b6000180600300819cf39c9c8e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c809e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001806003009f9cf39c9f9e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f6000003160b60001807fff009fc1e1c0c09e7ff01f806f60000031102600018fe00000fe2ff01f806f60000031102600018fe00000fe2ff01f806f60000031502600018de00091aae0043e00c1ffffff8fe0000031502600018de00091d560043e00c1ffffff8fe0000031502600018de00091aae00863009cffffff8fe0000031502600018de00091d5600863009cffffff8fe0000039800340076000000b101a00076000100b101a00076000100b101a000011502600018de00091aae03603009c81c1818fe0000031502600018de00091d5603603009c81c1818fe0000031502600018de00051aae0610e009fec900c8fe0000031502600018de00051d560410e009fec900c8fe0000031502600018de00091aae04238009c9c809c8fe0000031502600018de00091d5604238009c9c809c8fe0000031502600018de00091aae04260009c819f9c8fe0000031502600018de00091d5604260009c819f9c8fe0000031502600018de00091aae0297f00c19fc09c8fe0000031502600018de00091d560297f00c19fc09c8fe0000031502600018de00091aae0360000ff9fffff8fe0000031502600018de00091d560360000ff9fffff8fe0000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000031502600018de000d1aae0047f00c1e3ffffff80000031502600018de000d1d560047f00c1e3ffffff80000031502600018de000d1aae00803009cf3ffffff80000031502600018de000d1d5600803009cf3ffffff80000031502600018de000d1aae03606009ff3c1c1c180000031502600018de000d1d5603606009ff3c1c1c180000031502600018de000d1aae0610e009ff39c9f9c80000031502600018de000d1d560410e009ff39c9f9c80000031502600018de000d1aae04203009ff39cc18080000031502600018de000d1d5604203009ff39cc18080000031502600018de000d1aae04263009cf39cfc9f80000031502600018de000d1d5604263009cf39cfc9f80000031502600018de00061aae0293e00c1efe1c03080000031502600018de00061d560293e00c1efe1c03080000031402600018de00051aae0360000ffdff03f80000031402600018de00051d560360000ffdff03f80000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef60000030d02600018de00011d56f60000030d02600018de00011aaef600000398003400b1000000ec01a000b1000100ec01a000b1000100ec01a000010d02600018de00011d56f60000031402600018de000618c60040e00607fdff021c00031402600018de000618c60040e00607fdff021c00031302600018de000518c60081e004fcff029c00031302600018de000518c60081e004fcff029c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c603636004fe0c0e060f9c00031502600018de000d18c606166004ffe4e4fce79c00031502600018de000d18c604166004ffe4e4fce79c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1cce0427f004fe04e4fc079c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1ede04206004fce4e4fcff9c00031502600018de000d1bf6029060060604e606070c00031502600018de000d1bf6029060060604e606070c00031302600018de000518c603600007fcff02fc00031302600018de000518c603600007fcff02fc00030c02600007ddff00f8f60000030c02600007ddff00f8f6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf0000031808600007f0c1c0000630e1000647f00c1ffffff8fe0000031808600007f0c1c0000630e1000647f00c1ffffff8fe00000318086000060000c0000630e10006860009cffffff8fe00000318086000060000c0000630e10006860009cffffff8fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe0000031c0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe0000031c0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031c0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031b0a60000600c0c600063636b6e4000704263009c9cc99f8fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe0000031c0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003160060f7000007e6ff04fc0360000ffeff00f8fe000003160060f7000007e6ff04fc0360000ffeff00f8fe0000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f600000398003400ec0000010601a000ec0001010601a000ec0001010601a000010c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600018dd000003f60000030c02600007ddff00fcf60000030c02600007ddff00fcf6000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf000003060060cf00000306001fcfff00fc06001fcfff00fca0008fa00083ff}}{\par }{\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 O or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 O\tab }{\b Open\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:open command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:multiple files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor can edit up to ten files at one time.  When the open command is used, the editor moves to the first available file buffer, then brings up the dialog shown in Figure 9.4.  If there are no empty file buffers, the editor beeps, and the command is aborted.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1053{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich208\picwgoal8340\pichgoal4160\macpict\bliptag1990922539\blipupi72{\*\blipuid 76ab112bdded95807d2f27afb14cc83c}0fa80000000000d001a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001203600003e0fc000307f0c1c0db000003ff001203600003e0fc000307f0c1c0db000003ff00120360000630fc0003060000c0db000003ff00120360000630fc0003060000c0db000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff00150d60000637e3e7e003e00601c0c3e0dc000003ff001502600006fe360730003007e0c0c630dc000003ff001502600006fe360730003007e0c0c630dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00150d6000063637f63003f00600c0c7f0dc000003ff00140c60000637e6063006300600c0c6db000003ff00140c60000637e6063006300600c0c6db000003ff00150d600003e603f63003f00601e1e3f0dc000003ff00150d600003e603f63003f00601e1e3f0dc000003ff000b0360000006d2000003ff000b0360000006d2000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe0005080f3e3fff3fe7ff09f8c6004180081f3ff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509ffff3ffe3fe7ff09fbf600838009cffff9f8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe000509fe3f3c1f3fe7ff09fede03618009ce3c19c8fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce06118009cf39f998fe000003ff002002600018fe0005081f3f39cf3fe7ff09fcce04118009cf39f998fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f380f3fe7ff09f8c604218009cf3c1838fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509ff3f39ff3fe7ff09f8c604218009cf3fc998fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff002002600018fe000509fe1e1c0e1fe7ff09f8c60293c0081e1c19c8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001b02600018fe00000fe2ff05f8c60360000ffeff00f8fe000003ff001702600018fe000407f001c030e600011806f6000003ff001702600018fe000407f001c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00170a60001803f000060000c030e600011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00190c600018061fe00603e0c3f3e6f0e800011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b60001806003007e630c63637e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c637f6e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b600018060030060630c63606e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff00180b60001807fff00603e1e3f3f6e700011806f6000003ff000f02600018de00011806f6000003ff000f02600018de00011806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff001702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff0098003600ae000000d001a800ae000000d001a100ae000000d001a100011502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.4\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Selecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SRC}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:TXT}}}{\fs20 When you use the open button, if the selected file in the file list is a TXT or SRC file, the file is opened.  If a folder is selected, the folder is opened, and the file list changes to show the files inside the folder.  You can also open a file by first selecting a file, then clicking on it with the mouse.\par If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the file list.  If the file list was created from the root volume of a disk, the close button does nothing.\par The cancel button leaves the open dialog without opening a file.\par For information on how to use the various controls in the dialog, see "Using Editor Dialogs" in this chapter.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 V or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 V\tab }{\b Paste\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:paste command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTEMP file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 work prefix}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode\:by character}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The contents of the SYSTEMP file are copied to the current cursor position.  If the editor is in line-oriented select mode, the line the cursor is on and all subsequent lines are moved down to make room for the new material.  If the editor is in character-oriented select mode, the material is copied at the cursor column.  If enough characters are inserted to make the line longer than 255 characters, the excess characters are lost.\par }\pard \qj\ri360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tx1350\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 Q or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 Q}{\b \tab Quit\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:quit command\bxe }}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The quit command leaves the editor.  If any file has been changed since the last time it was saved to disk, each of the files, in turn, will be made the active file, and the following dialog will appear:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1054{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw231\pich84\picwgoal4620\pichgoal1680\macpict\bliptag1830675910\blipupi72{\*\blipuid 6d1de5c6b9fc7f2c7bf96705af84eab1}052000000000005400e71101a00082a0008e01000a0000000002d0024098001e00000000005400e800000000005400e700000000005400e7000102e30007001fe6ff01f00007001fe6ff01f000070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00140360000f80fe00010f98fc00010f80f500010c00140360000f80fe00010f98fc00010f80f500010c001403600018c0fe000118d8fc000118c0f500010c001403600018c0fe000118d8fc000118c0f500010c00160f6000180f98cf80181f0f9f8000000180f500010c00160a6000180f98cf80181f0f9ffe8f018180f500010c00150e60000f80d8d8c01818c0d8cf8f8f83f400010c00140960000f80d8d8c01818c0fdd80003f400010c001409600000cfd8dfc01818cffdd80003f400010c00150e600000cfd8dfc01818cfd8d8dfcf83f400010c001407600018d8cd980018fdd802dfcf80f400010c001507600018d8cd980018fed803cfd800c0f400010c00150e60000f8fc70fc00f98cfd8cfd800c3f400010c00150e60000f8fc70fc00f98cfd8c0cfcf83f400010c000d0060f60002cfcf80f400010c000c0060f700010f80f200010c000c0060f700010f80f200010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001f06600000e73ffff0fe000a8300139ff0000087c0181ffeff05fc7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001e13600000e73ffff00000010700139ff000010c6013fdff05fe7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600000f2783830000006c3001198300006c06013f83038183e7000000c001f1d600004fcf393f000000c2300101390000c21c013ff9393f39e7000000c001f1d600004fcf393f00000082300101390000821c013ff9393f39e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60000cfcf0183000000843001313900008470013f81393f01e7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60001ffcf3ff90000008430013939000084c0013f39393f3fe7000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001f1d60000c3cf81830000005278013983000052fe018181398181c3000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c001d136000043ffffff0000006c0001ffff00006c0001ffcff04f000000c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c00070060e600010c0007001fe6ff01f00007001fe6ff01f00002e300a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.5\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par If you select Yes, the file is saved just as if the Save command had been used.  If you select No, the file is closed without saving any changes that have been made.  Selecting Cancel leaves you in the editor with the active file still open, but if several files had been opened, some of them may have been closed before the Cancel operation took effect.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs18 CTRL}{\b\fs20 R or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 R\tab }{\b Remove Blanks\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:remove blanks command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the cursor is on a blank line, that line and all subsequent blank lines up to the next non-blank line are removed.  If the cursor is not on a blank line, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20 1 to 32767\tab }{\b Repeat Count\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:repeat counts\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When in escape mode, you can enter a }{\i\fs20 repeat count }{\fs20 (any number from 1 to 32767) immediately before a command, and the command is repeated as many times as you specify (or as many times as is possible, whichever comes first).  Escape mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 RETURN\tab }{\b Return\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:RETURN key\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:auto-indent mode}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\outl\fs18 RETURN}{\fs20  key works in one of two ways, depending on the setting of the auto-indent mode toggle:  1) to move the cursor to column one of the next line; or 2) to place the cursor on the first non-space character in the next line, or, if the line is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor.  If the cursor is on the last line on the screen, the screen scrolls down one line.\par If the editor is in insert mode, the }{\outl\fs18 RETURN}{\fs20  key will also split the line at the cursor position.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 A}{\b\fs18  or}{\b\outl\fs18  \u-3\'f0}{\b\fs20 A\tab }{\b Save As\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:save as command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Save As command lets you change the name of the active file, saving it to a new file name or to the same name in a new file folder.  When you use this command, this dialog will appear:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1055{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw417\pich264\picwgoal8340\pichgoal5280\macpict\bliptag1383067446\blipupi72{\*\blipuid 526fef36b94839b56321b6374aeff36f}132100000000010801a11101a00082a0008e01000a0000000002d0024098003600000000003a01a800000000003a01a100000000003a01a1000102cb0008001fcfff00fcff0008001fcfff00fcff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000b03600003e0d2000003ff000b03600003e0d2000003ff000b0360000630d2000003ff000b0360000630d2000003ff00110960000603e633e003e3e0d8000003ff00110960000603e633e003e3e0d8000003ff001008600003e03636300036d7000003ff001008600003e03636300036d7000003ff00110960000033f637f003f3e0d8000003ff00110960000033f637f003f3e0d8000003ff00110960000636336600063030d8000003ff00110960000636336600063030d8000003ff001109600003e3f1c3f003f3e0d8000003ff001109600003e3f1c3f003f3e0d8000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000063007e0c006000c600fe0038060df000003ff001810600000077006300006000ee00c00018060df000003ff001810600000077006300006000ee00c00018060df000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff001a12600000c6b63631c3e6318d6c6c07c187e7cde0e1000003ff00191160000006b63630c606600d6c6fcc618c6c6ee0000003ff00980036003a0000007401a8003a0000007401a1003a0000007401a10001191160000006b63630c606600d6c6fcc618c6c6ee0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff001911600000c6363630c3e7c18c6c6c0c618c6fece0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff0019116000000633f630c036600c67ec0c618c6c0ce0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff001911600000063037e1e3e6300c606c07c3c7e7ece0000003ff00120060fe000103e0fc000107c0db000003ff00120060fe000103e0fc000107c0db000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe000507f0c1c000c0e7000918c6004180081f3ff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe0005060000c001c0e700091bf600838009cffff9f8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe00050601c0c3e0c0e700091ede03618009ce3c19c8fe000003ff002002600018fe000507e0c0c630c0e700091cce06118009cf39f998fe000003ff002002600018fe000507e0c0c630c0e700091cce04118009cf39f998fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c7f0c0e7000918c604218009cf3c1838fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050600c0c600c0e7000918c604218009cf3fc998fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff002002600018fe00050601e1e3f1e0e7000918c60293c0081e1c19c8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018de000518c60360000ffeff00f8fe000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff001702600018fe0004080ffe3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00170a60001803f00009ffff3fcfe6ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00190c600018061fe009fc1f3c0c190fe8ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b6000180600300819cf39c9c8e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c809e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001806003009f9cf39c9f9e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff00180b60001807fff009fc1e1c0c09e7ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001302600018fe00000fe2ff01f806f6000003ff001702600018de00091aae0043e00c1ffffff8fe000003ff009800360074000000ae01a80074000000ae01a10074000000ae01a100011702600018de00091d560043e00c1ffffff8fe000003ff001702600018de00091aae00863009cffffff8fe000003ff001702600018de00091d5600863009cffffff8fe000003ff001702600018de00091aae03603009c81c1818fe000003ff001702600018de00091d5603603009c81c1818fe000003ff001702600018de00051aae0610e009fec900c8fe000003ff001702600018de00051d560410e009fec900c8fe000003ff001702600018de00091aae04238009c9c809c8fe000003ff001702600018de00091d5604238009c9c809c8fe000003ff001702600018de00091aae04260009c819f9c8fe000003ff001702600018de00091d5604260009c819f9c8fe000003ff001702600018de00091aae0297f00c19fc09c8fe000003ff001702600018de00091d560297f00c19fc09c8fe000003ff001702600018de00091aae0360000ff9fffff8fe000003ff001702600018de00091d560360000ff9fffff8fe000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001702600018de000d1aae0047f00c1e3ffffff8000003ff001702600018de000d1d560047f00c1e3ffffff8000003ff001702600018de000d1aae00803009cf3ffffff8000003ff001702600018de000d1d5600803009cf3ffffff8000003ff001702600018de000d1aae03606009ff3c1c1c18000003ff001702600018de000d1d5603606009ff3c1c1c18000003ff001702600018de000d1aae0610e009ff39c9f9c8000003ff001702600018de000d1d560410e009ff39c9f9c8000003ff001702600018de000d1aae04203009ff39cc1808000003ff001702600018de000d1d5604203009ff39cc1808000003ff001702600018de000d1aae04263009cf39cfc9f8000003ff001702600018de000d1d5604263009cf39cfc9f8000003ff001702600018de00061aae0293e00c1efe1c0308000003ff001702600018de00061d560293e00c1efe1c0308000003ff001602600018de00051aae0360000ffdff03f8000003ff001602600018de00051d560360000ffdff03f8000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff0098003600ae000000e801a800ae000000e801a100ae000000e801a100010f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff000f02600018de00011aaef6000003ff000f02600018de00011d56f6000003ff001602600018de000618c60040e00607fdff021c0003ff001602600018de000618c60040e00607fdff021c0003ff001502600018de000518c60081e004fcff029c0003ff001502600018de000518c60081e004fcff029c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c603636004fe0c0e060f9c0003ff001702600018de000d18c606166004ffe4e4fce79c0003ff001702600018de000d18c604166004ffe4e4fce79c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1cce0427f004fe04e4fc079c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1ede04206004fce4e4fcff9c0003ff001702600018de000d1bf6029060060604e606070c0003ff001702600018de000d1bf6029060060604e606070c0003ff001502600018de000518c603600007fcff02fc0003ff001502600018de000518c603600007fcff02fc0003ff000e02600007ddff00f8f6000003ff000e02600007ddff00f8f6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a08600007f0c1c0000630e1000647f00c1ffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001a086000060000c0000630e10006860009cffffff8fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b60000601c0c3e00733e773e0e500070367e009fc19cc18fe000003ff001e0b600007e0c0c63007f036b630e500070610300c1fc9c9c8fe000003ff001e0b600007e0c0c63007f036b630e500070410300c1fc9c9c8fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001e0b60000600c0c7f00673f6b7f0e500070420300fcc09c808fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001d0a60000600c0c600063636b6e4000704263009c9cc99f8fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff001e0b60000601e1e3f00633f633f0e500070293e00c1c0e3c08fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff00180060f7000007e6ff04fc0360000ffeff00f8fe000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff0098003600e80000010801a800e80000010801a100e80000010801a100010e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600018dd000003f6000003ff000e02600007ddff00fcf6000003ff000e02600007ddff00fcf6000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff00080060cf000003ff0008001fcfff00fcff0008001fcfff00fcff0002cb00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.6\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Selecting Disk brings up a second dialog that shows a list of the disks available.  Selecting one changes the list of files to a list of the files on the selected disk.\par When you use the Open button, the selected folder is opened.  While using this command, you cannot select any files from the list; only folders can be selected.\par If a folder is open, the close button closes the folder, showing the list of files that contains the folder.  You can also close a folder by clicking on the path name shown above the file list.  If the file list was created from the root volume of a disk, the close button does nothing.\par The cancel button leaves the open dialog without opening a file.\par The Save button saves the file, using the file name shown in the editline item labeled "File Name."  You can also save the file by pressing the RETURN key.\par For information on how to use the various controls in the dialog, see "Using Editor Dialogs" in this chapter.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 S}{\b\fs18  or}{\b\outl\fs18  \u-3\'f0}{\b\fs20 S\tab }{\b Save\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:save command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The active file (the one you can see) is saved to disk.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 -1 to }{\b\outl\fs18 \u-3\'f0}{\b\fs20 -9\tab }{\b Screen Moves\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:moving through a file\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file is divided by the editor into 8 approximately equal sections.  The screen-move commands move the file to a boundary between one of these sections.  The command }{\outl\fs18 \u-3\'f0}{\fs20 1 jumps to the first character in the file, and }{\outl\fs18 \u-3\'f0}{\fs20 9 jumps to the last character in the file.  The other seven }{\outl\fs18 \u-3\'f0}{\i\fs20 n }{\fs20 commands cause screen jumps to evenly spaced intermediate points in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 \}\tab }{\b Scroll Down One Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll down one line command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor moves down one line in the file, causing all of the lines on the screen to move up one line.  The cursor remains in the same position on the screen.  Scrolling can continue past the last line in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 ]\tab }{\b Scroll Down One Page\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll down one page command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The screen scrolls down twenty-two lines.  Scrolling can continue past the last line in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 \{\tab }{\b Scroll Up One Line\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll up one line\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor moves up one line in the file, causing all of the lines on the screen to move down one line.  The cursor remains in the same position on the screen.  If the first line of the file is already displayed on the screen, the command is ignored.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 [\tab }{\b Scroll Up One Page\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:scroll up one page command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The screen scrolls up twenty-two lines.  If the top line on the screen is less than one screen\rquote s height from the beginning of the file, the screen scrolls to the beginning of the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 L\tab }{\b Search Down\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search down command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command allows you to search through a file for a character or string of characters.  When you execute this command, the prompt }{\f6\fs18 Search string:}{\fs20  appears at the bottom of the screen.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1056{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich174\picwgoal10440\pichgoal3480\macpict\bliptag-998183356\blipupi72{\*\blipuid c480ee441428365ad0fea5b85187189b}0bd80000000000ae020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180120060fd000386300630f9000003d300010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018019066000080f3fffc8fe000343e00c0ffeff01fe38d40001018019066000080f3fffc8fe000343e00c0ffeff01fe38d400010180980042008d000000ae0210008d000000ae020a008d000000ae020a00011702600009feff00c8fe0002863009fcff0038d4000101801702600009feff00c8fe0002863009fcff0038d4000101801912600009fe381c08000003667009fc181c0c1f38d4000101801912600009fe381c08000003667009fc181c0c1f38d40001018019126000083f39c9c800000616b009ffc9c9f9cf38d40001018019126000083f39c9c800000416b009ffc9c9f9cf38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004273009fc09c9f80f38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009ff39c9c8000004263009f9c9c9f9ff38d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d4000101801912600009fe19cc0800000293e00c0c09cc0c0e18d400010180170260000ffeff06f800000360000ffcff00f8d400010180170260000ffeff06f800000360000ffcff00f8d400010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018007001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.7\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par If you have previously entered a search string, the previous string appears after the prompt as a default.  Type in the string for which you wish to search, and press }{\outl\fs18 RETURN}{\fs20 .  The cursor will be moved to the first character of the first occurrence of the search string after the old cursor position.  If there are no occurrences of the search string between the old cursor position and the end of the file, an alert will show up stating that the string was not found; pressing any key will get rid of the alert.\par By default, string searches are case insensitive, must be an exact match in terms of blanks and tabs, and will match any target string in the file, even if it is a subset of a larger word.  All of these defaults can be changed, so we will look at what they mean in terms of how changing the defaults effect the way string searches work.\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you look at a line like\par \par }\pard \qj\li360\widctlpar\tx980\tx1620\adjustright {\f6\fs18 lb1\tab lda\tab #4\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 without using the hidden characters mode, it is impossible to tell if the spaces between the various fields are caused by a series of space characters, two tabs, or perhaps even a space character or two followed by a tab.  This is an important distinction, since searching for lda<space><space><space>#4 won't find the line if the lda and #4 are actually separated by a tab character, and searching for lda<tab>#4 won't find the line if the fields are separated by three spaces.  If you select the "white space compares equal" option, though, the editor will find any string where lda and #4 are separated by any combination of spaces and tabs, whether you use spaces, tabs, or some combination in the search string you type.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 By default, if you search for lda, the editor will also find LDA, since string searches are case insensitive.  In C, which is case sensitive, you don't usually want to find MAIN when you type main.  Selecting the "case sensitive" option makes the string search case sensitive, so that the capitalization becomes significant.  With this option turned on, searching for main would not find MAIN.\par Sometimes when you search for a string, you want to find any occurrence of the string, even if it is imbedded in some larger word.  For example, if you are scanning your program for places where it handles spaces, you might enter a string like "space".  You would want the editor to find the word whitespace, though, and normally it would.  If you are trying to scan through a source file looking for all of the places where you used the variable i, though, you don't want the editor to stop four times on the word Mississippi.  In that case, you can select the "whole word" option, and the editor will only stop of it finds the letter i, and there is no other letter, number, or underscore character on either side of the letter.  These rules match the way languages deal with identifiers, so you can use this option to search for specific variable names \endash  even a short, common one like i.\par This command searches from the cursor position towards the end of the file.  For a similar command that searches back towards the start of the file, see the "Search Up" command.\par For a complete description of how to use the mouse or keyboard to set options and move through the dialog, see the section "Using Editor Dialogs" in this chapter.\par Once a search string has been entered, you may want to search for another occurrence of the same string.  ORCA ships with two built-in editor macros that can do this with a single keystroke, without bringing up the dialog.  To search forward, use the \u-3\'f0L macro; to search back, use the \u-3\'f0K macro.\par }\pard \qj\fi-1980\li2333\widctlpar\tx2340\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 K\tab }{\b Search Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search up command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command operates exactly like Search Down}{\i\fs20 ,}{\fs20  except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of the file; to search between the current cursor location and the end of the file, use the Search Down command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 J\tab }{\b Search and Replace Down\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search and replace down command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command allows you to search through a file for a character or string of characters, and to replace the search string with a replacement string.  When you execute this command, the following dialog will appear on the screen:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1057{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw522\pich238\picwgoal10440\pichgoal4760\macpict\bliptag-1431515892\blipupi72{\*\blipuid aaaccd0cdf546a15cdf9958021211444}10760000000000ee020a1101a00082a0008e01000a0000000002d0024098004200000000002f021000000000002f020a00000000002f020a000102bf0007001fc2ff01fe0007001fc2ff01fe00070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801403600003e0fe0006060000030000c0cf000101801403600003e0fe0006060000030000c0cf00010180110360000630fe000306000003cc00010180110360000630fe000306000003cc00010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180171060000603e3e6f3f7c003e7e6f1c7e3e0c0d200010180160f600003e6303706063006030700c63630d100010180160f600003e6303706063006030700c63630d100010180171060000037f3f606063003e30600c63630c0d200010180171060000037f3f606063003e30600c63630c0d200010180160f60000636063606063000333600c633f0d100010180160f60000636063606063000333600c633f0d100010180160f600003e3f3f603f63003e1e601e63030d100010180160f600003e3f3f603f63003e1e601e63030d1000101800f0060f4000203e007d4ff03f80001800f0060f4000203e007d4ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180070060c200010180980042002f0000005e0210002f0000005e020a002f0000005e020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801406600007e00001c0fd0003030000c0d0000101801406600007e00001c0fd0003030000c0d0000101801106600006300000c0fd000003cd000101801106600006300000c0fd000003cd00010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d300010180181160000633e7e0c3e3f3e003e7e6f1c7e3e0c0d3000101801710600007e63630c036063006030700c63630d2000101801710600007e63630c036063006030700c63630d2000101801811600006c7f630c3f607f003e30600c63630c0d3000101801811600006c7f630c3f607f003e30600c63630c0d30001018017106000066607e0c636060000333600c633f0d20001018017106000066607e0c636060000333600c633f0d200010180171060000633f601e3f3f3f003e1e601e63030d200010180171060000633f601e3f3f3f003e1e601e63030d200010180130060fe000006f7000203e007d5ff03f8000180130060fe000006f7000203e007d5ff03f80001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600018c60003060001800b02600007c6ff03f80001800b02600007c6ff03f8000180070060c200010180980042005e0000008d0210005e0000008d020a005e0000008d020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180150060fd00054180063600c3ec000101c0e300010180150060fd00054180063600c3ec000101c0e300010180140060fd0005838006360003eb0000c0e300010180140060fd0005838006360003eb0000c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d0361800637c1c7e3e003e7e3e3f3e003f3e777e3e6f3e3e003e3f633e0c0e300010180280060fe001d06118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04118006b630c30630060630360630060636b630370636000636363030c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d04218006b630c307f003e633f607f0060636b633f607f3e007f63633f0c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d042180077630c336000037e6360600060636b7e6360600300603f67630c0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180280060fe001d0293c0063631e1e3f003e603f3f3f003f3e63603f603f3e003f033b3f1e0e300010180180060fe00010360f9000006fa000006fa000030e000010180180060fe00010360f9000006fa000006fa000030e000010180140060fd000343e003e0f90002c300c0d500010180140060fd000343e003e0f90002c300c0d500010180980042008d000000bc0210008d000000bc020a008d000000bc020a0001120060fd000386300630f9000003d300010180120060fd000386300630f9000003d3000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110360300603e3e3e003e3e7e3e1c7e1c633e0d7000101801c0060fe00110610e006003606300606363600c300c63630d7000101801c0060fe00110410e006003606300606363600c300c63630d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801c0060fe00110423800603f3e7f003e7f633e0c300c637f0d7000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe001004260006363036000036063030c330c366d6000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101801b0060fe000b0297f003e3f3e3f003e3f633fde101c3f0d7000101800c0060fe00010360c7000101800c0060fe00010360c700010180150060fd000647f006360001c0fc000030d300010180150060fd000647f006360001c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180150060fd0006803006360000c0fc000030d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0360600637c3e0c3e00633e6f3f0d300010180180060fe000d0610e006b63630c6300636370630d300010180180060fe000d0410e006b63630c6300636370630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04203006b63630c7f006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d04263007763630c60006b6360630d300010180180060fe000d0293e0063633e1e3f00773e603f0d300010180180060fe000d0293e0063633e1e3f00773e603f0d3000101800c0060fe00010360c7000101800c0060fe00010360c700010180170060fd000640e007e00001c0fd000201c1c0d400010180170060fd000640e007e00001c0fd000201c1c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180160060fd000681e006300000c0fc0001c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e0363600633e7e0c3e3f3e003e0c0c0d400010180190060fe000e06166007e63630c03606300030c0c0d400010180190060fe000e04166007e63630c03606300030c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e0427f006c7f630c3f607f003f0c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e042060066607e0c63606000630c0c0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180190060fe000e0290600633f601e3f3f3f003f1e1e0d400010180100060fe00010360fe000006cb00010180100060fe00010360fe000006cb00010180070060c20001018098004200bc000000eb021000bc000000eb020a00bc000000eb020a0001070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101800a016007c5f703f00001800a016007c5f703f0000180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c2000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801c096000081ffffe3ffffff8fe000343e00c0ffeff01fe38d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801a09600009cfffff3ffffff8fe0002863009fcff0038d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c15600009cc181f3c1c0c18000003667009fc181c0c1f38d7000101801c1560000819c9cf3fc9f9c800000616b009ffc9c9f9cf38d7000101801c1560000819c9cf3fc9f9c800000416b009ffc9c9f9cf38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c156000093809cf3c09f808000004273009fc09c9f80f38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c1560000999f81f39c9f9f8000004263009f9c9c9f9ff38d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d7000101801c15600009cc09fe1c0c0c0800000293e00c0c09cc0c0e18d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180190460000ffff9fdff06f800000360000ffcff00f8d700010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c200010180070060c20001018098004200eb000000ee021000eb000000ee020a00eb000000ee020a000107001fc2ff01fe0007001fc2ff01fe0002bf00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.8\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The search string, the first three options, and the buttons work just as they do for string searches; for a description of these, see the Search Down command.  The replace string is the target string that will replace the search string each time it is found.  By default, when you use this command, each time the search string is found in the file you will see this dialog:\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1058{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley48\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich84\picwgoal5880\pichgoal1680\macpict\bliptag-1051516100\blipupi72{\*\blipuid c153233cf432f61985fd11443439c450}063900000000005401261101a00082a0008e01000a0000000002d00240980026000000000053012800000000005301260000000000530126000102db0007001fdeff01e00007001fdeff01e000070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b0560001f800007fc0005030c18000d8cfd00020c1b1ff5000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001b05600018c00003fb00040c18000d8cfd00030c1b3180f6000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e17600018cf9f830f8fcf8018c71f9f000d9f8f9bcf8f9f9b03f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001f98d8c300d818c018c30c18c0000c00dc18d8cc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001e1760001b1fd8c30fd81fc01ac30c18c0000c0fd818dfcc0006f5000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001d16600019981f8318d818001ac30cd8c0000cd8d80fd80cc0f4000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f5000118001e17600018cfd8078fcfcfc01dc78798c000078fd800cfc78006f500011800100060fe000018f300010f80f200011800100060fe000018f300010f80f200011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de000118000e036000003ffbff00e0e8000118002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002706600000e07ffff8feff00e0fe000e0106003067fcffc00000010f80303ffeff05f8e0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce0000018002606600000e73ffffcfeff00e0fe000d020e002727ffffc000000218c027fdff05fce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600000e730607cf0703060fe00170d860027e738c0c000000d80c027f06070307ce000001800270a600004e067273cff27e720fe001718460030667cce40000018438027ff2727e73ce000001800270a600004e067273cff27e720fe001710460030667cce40000010438027ff2727e73ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60000ce4e0273cf027e020fe00171086003f20fcce400000108e0027f02727e03ce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60001fe667e07ce727e7e0fe001710860027267cc0c0000010980027e72727e7fce000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc03030273030386000001800270a60000c273027f870303020fe00170a4f003067384fc000000a5fc0303027303038600000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e00000180024056000043fffe7fdff00e0fe000d0d80003fffffcfc000000d80003ffcff04e000001800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de00011800070060de0001180007001fdeff01e00007001fdeff01e000980026005300000054012800530000005401260053000000540126000102db00a0008fa00083ff}}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 9.9\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 If you select the Replace option, the search string is replaced by the replace string, and the editor scans forward for the next occurrence of the search string.  Choosing Skip causes the editor to skip ahead to the next occurrence of the search string without replacing the occurrence that is displayed.  Cancel stops the search and replace process.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you use the "replace all" option, the editor starts at the top of the file and replaces each and every occurrence of the search string with the target string.  On large files, this can take quite a bit of time.  To stop the process, press }{\outl\fs18 \u-3\'f0}{\fs20 .  (open-apple period).  While the search and replace is going on, you can see a spinner at the bottom right corner of the screen, showing you that the editor is still alive and well.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\b\fs20 H\tab }{\b Search and Replace Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:search and replace up command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This command operates exactly like Search and Replace Down, except that the editor looks for the search string starting at the cursor and proceeding toward the beginning of the file.  The search stops at the beginning of the file; to search between the current cursor location and the end of the file, use the Search and Replace Down command.  If you use the "replace all" option, this command works exactly the same way the Search and Replace Down command does when it uses the same option.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 -}{\b\f6\fs18 \tab }{\b Select File\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select file command\bxe }}}{\v\fs20 .}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:multiple files.}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor can edit up to ten files at one time.  When you use this command, a dialog appears showing the names of the ten files in memory.  You can then move to one of the files by pressing \u-3\'f0n, where n is one of the file numbers.  You can exit the dialog without switching files by pressing ESC or RETURN.\par See also the Switch Files command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 TAB}{\b\f6\fs18 \tab }{\b Set and Clear Tabs\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear tab stops command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If there is a tab stop in the same column as the cursor, it is cleared; if there is no tab stop in the cursor column, one is set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 [}{\b\f6\fs18 \tab }{\b Shift Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:shift left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If this command is issued when no text is selected, you enter the text selection mode.  Pressing RETURN leaves text selection mode.\par At any time while text is selected, using the command shifts all of the selected text left one character.  This is done by scanning the text, one line at a time, and removing a space right before the first character on each line that is not a space or tab.  If the character to be removed is a tab character, it is first replaced by an equivalent number of spaces.  If there are no spaces or tabs at the start of the line, the line is skipped.\par If a large amount of text is selected, this command may take a lot of time.  While the editor is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pressing }{\outl\fs18 \u-3\'f0}{\fs20 ., but this will leave the selected text partially shifted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 ]}{\b\f6\fs18 \tab }{\b Shift Right\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:shift right command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If this command is issued when no text is selected, you enter the text selection mode.  Pressing RETURN leaves text selection mode.\par At any time while text is selected, using the command shifts all of the selected text right one character.  This is done by scanning the text, one line at a time, and adding a space right before the first character on each line that is not a space or tab.  If this leaves the non-space character on a tab stop, the spaces are collected and replaced with a tab character.  If a blank line is encountered, no action is taken.\par If a large amount of text is selected, this command may take a lot of time.  While the editor is working, you will see a spinner at the bottom right of the screen; this lets you know the editor is still processing text.  You can stop the operation by pressing }{\outl\fs18 \u-3\'f0}{\fs20 ., but this will leave the selected text partially shifted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b \u-3\'f0}{\fs20 n}{\b\f6\fs18 \tab }{\b Switch Files\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:switch files command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:multiple files}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The editor can edit up to ten files at one time.  Each of these files is numbered, starting from 0 and proceeding to 9.  The numbers are assigned as the files are opened from the command line.  To move from one file to the next, press \u-3\'f0n, where n is a numeric key.\par When you switch files, the original file is not changed in any way.  When you return to the file, the cursor and display will be in the same place, the undo buffer will still be active, and so forth.  The only actions that are not particular to a specific file buffer are those involving the clipboard \endash  Cut, Copy and Paste all use the same clipboard, so you can move chunks of text from one file to another.\par See also the Select File command.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 TAB}{\b\scaps\fs20 \tab }{\b Tab\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In insert mode, or when in over strike mode and the next tab stop is past the last character in the line, this command inserts a tab character in the source file and moves to the end of the tab field.  If you are in the over strike mode and the next tab stop is not past the last character on the line, the Tab command works like a cursor movement command, moving the cursor forward to the next tab stop.\par Some languages and utilities do not work well (or at all) with tab stops.  If you are using one of these languages, you can tell the editor to insert spaces instead of tab characters; see the section "Setting Editor Defaults," later in this chapter, to find out how this is done.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 TAB}{\b\fs20 \tab }{\b Tab Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved to the previous tab stop, or to the beginning of the line if there are no more tab stops to the left of the cursor.  This command does not enter any characters in the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 RETURN}{\b\f6\fs18 \tab }{\b Toggle Auto Indent Mode\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear auto-indent mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the editor is set to put the cursor on column one when you press }{\outl\fs18 RETURN}{\fs20 , it is changed to put the cursor on the first non-space character; if set to the first non-space character, it is changed to put the cursor on column one.  Auto-indent mode is described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 ESC}{\b\scaps\fs20 \tab }{\b Toggle Escape Mode}{\b\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear escape mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the editor is in the edit mode, it is put in escape mode; if it is in escape mode, it is put in edit mode.  When you are in escape mode, pressing any character not specifically assigned to an escape-mode command returns you to edit mode.  Escape and edit modes are described in the section \ldblquote Modes\rdblquote  in this chapter.\par When in escape mode, }{\b\outl\fs18 \u-3\'f0}{\outl\fs18 CTRL}{\fs20 _ will return you to edit mode.  In edit mode the command has no effect.  From edit mode, }{\outl\fs18 CTRL}{\fs20 _ will place you in escape mode, but the command has no effect in escape mode.  These commands are most useful in an editor macro, where you do not know what mode you are in on entry.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 E or }{\b\outl\fs18 \u-3\'f0}{\b\fs20 E\tab }{\b Toggle Insert Mode\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear insert mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If insert mode is active, the editor is changed to over strike mode.  If over strike mode is active, the editor is changed to insert mode.  Insert and over strike modes are described in the section \ldblquote Modes\rdblquote  in this chapter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\outl\fs20 \u-3\'f0}{\b\fs20 X\tab }{\b Toggle Select Mode\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:set/clear select mode command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If the editor is set to select text for the Cut, Copy, and Delete commands in units of one line, it is changed to use individual characters instead; if it is set to character-oriented selects, it is toggled to use whole lines.  See the section \ldblquote Modes\rdblquote  in this chapter for more information on select mode.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 UP-ARROW}{\outl \tab }{\b Top of Screen / Page Up\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:top of screen command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor moves to the first visible line on the screen, preserving the cursor\rquote s horizontal position.  If the cursor is already at the top of the screen, the screen scrolls up twenty-two lines.  If the cursor is at the top of the screen and less than twenty-two lines from the beginning of the file, then the screen scrolls to the beginning of the file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\outl\fs20 CTRL}{\b\fs20 Z or }{\b\outl\fs20 \u-3\'f0}{\b\fs20 Z\tab }{\b Undo Delete\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo delete command\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:undo delete buffer}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete character left command}}}{\v\fs20 \par }{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete line command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete to end of line command}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:delete word command}}}{\v\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The last operation that changed the text in the current edit file is reversed, leaving the edit file in the previous state.  Saving the file empties the undo buffer, so you cannot undo changes made before the last time the file was saved.\par The undo operation acts like a stack, so once the last operation is undone, you can undo the one before that, and so on, right back to the point where the file was loaded or the point where the file was saved the last time.\par \par }\pard \keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs20 \u-3\'f0}{\outl\fs20 LEFT-ARROW}{\b\fs20 \tab }{\b Word Left\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word left command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved to the beginning of the next non-blank sequence of characters to the left of its current position.  If there are no more words on the line, the cursor is moved to the last word in the previous line or, if it is blank, to the last word in the first non-blank line preceding the cursor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\outl\fs18 \u-3\'f0}{\outl\fs20 RIGHT-ARROW\tab }{\b Word Right\par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:word right command\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The cursor is moved to the start of the next non-blank sequence of characters to the right of its current position.  If there are no more words on the line, the cursor is moved to the first word in the next non-blank line.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Setting Editor Defaults}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Setting Editor Defaults\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:setting defaults\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:customizing\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When you start the ORCA editor, it reads the file named SYSTABS (located in the ORCA shell prefix), which contains the default settings for tab stops, return mode, insert mode, tab mode, and select mode.  The SYSTABS file is an ASCII text file that you can edit with the ORCA editor.\par Each language recognized by ORCA is assigned a language number.  The SYSTABS file has three lines associated with each language:\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 language numbers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:modes}}}{\v\fs20 \par }\pard \qj\fi-270\li720\widctlpar\adjustright {\fs20 \par 1.\tab The language number.\par 2.\tab The default settings for the various modes.\par 3.\tab The default tab and end-of-line-mark settings.\par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The first line of each set of lines in the SYSTABS file specifies the language that the next two lines apply to.  ORCA languages can have numbers from 0 to 32767 (decimal).  The language number must start in the first column; leading zeros are permitted and are not significant, but leading spaces are not allowed.\par The second line of each set of lines in the SYSTABS file sets the defaults for various editor modes, as follows:\par }\pard \qj\fi-270\li720\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:auto-indent mode}}}{\v\fs20 \par }{\fs20 1.\tab If the first column contains a zero, pressing }{\outl\fs18 RETURN}{\fs20  in the editor causes the cursor to go to column one in the next line; if it\rquote s a one, pressing }{\outl\fs18 RETURN}{\fs20  sends the cursor to the first non-space character in the next line (or, if the line is blank, beneath the first non-space character in the first non-blank line on the screen above the cursor).\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:select mode}}}{\v\fs20 \par }{\fs20 2.\tab If the second character is zero, the editor is set to line-oriented selects; if one, it is set to character-oriented selects.\par 3.\tab This flag is not used by the current version of the ORCA editor.  It should be set to 0.\par 4.\tab The fourth character is used by the ORCA/Desktop editor, and is used to set the default cursor mode.  A zero will cause the editor to start in over strike mode; a one causes the editor to start in insert mode.\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:tab mode}}}{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tabs}}}{\v\fs20 \par }{\fs20 5.\tab If the fifth character is a 1, the editor inserts a tab character in the source file when the Tab command is used to tab to a tab stop.  If the character is a 0, the editor inserts an appropriate number of spaces, instead.\par }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 editor\:over strike mode}}}{\v\fs20 \par }{\fs20 6.\tab If the sixth character is a 0, the editor will start in over strike mode; if it is a 1, the editor starts in insert mode.  Using a separate flag for the text based editor (this one) and the desktop editor (see the fourth flag) lets you enter one mode in the desktop editor, and a different mode in the text based editor.\par }\pard \qj\fi-360\li634\widctlpar\tx634\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The third line of each set of lines in the SYSTABS file sets default tab stops.  There are 255 zeros and ones, representing the 255 character positions available on the edit line.  The ones indicate the positions of the tab stops.  A two in any column of this line sets the end of the line; if the characters extend past this marker, the line is wrapped.  The column containing the two then replaces the default end-of-line column (the default right margin) when the editor is set to that language.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 For example, the following lines define the defaults for ORCA Modula-2:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 272\par }\pard \widctlpar\adjustright {\f6\fs14 100110\par 00000000100000001000000010000000100000001000000010000000000000001000000010000000100000001000000...\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The last line continues on for a total of 255 characters.\par If no defaults are specified for a language (that is, there are no lines in the SYSTABS file for that language), then the editor assumes the following defaults:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab }{\outl\fs18 RETURN}{\fs20  sends the cursor to column one.\par \bullet \tab Line-oriented selects.\par \bullet \tab Word wrapping starts in column 80.\par \bullet \tab There is a tab stop every eighth column.\par \bullet \tab The editor starts in over strike mode.\par \bullet \tab Tab characters are inserted to create tabbed text.\par }\pard \qj\fi-274\li533\widctlpar\tx533\tx2880\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Note that you can change tabs and editing modes while in the editor.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 10 - The Resource Compiler\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 10 - The Resource Compiler\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 10 \endash  The Resource Compiler\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter describes the use and operation of the resource compiler.  Key points covered in this chapter are:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 \bullet \tab Creation of resource description files (Rez source files).\par \bullet \tab Creating and using resource type statements.\par \bullet \tab Using Rez to compile a resource description file to create a resource fork.\par \bullet \tab Command, options, and capabilities of the resource compiler.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Overview}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Overview\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Resource Compiler compiles a text file (or files) called a resource description file and produces a resource file as output.  The resource decompiler, DeRez, decompiles an existing resource, producing a new resource description file that can be understood by the resource compiler.\par Resource description files have a language type of REZ.  By convention, the name of a resource description file ends with .rez.  The REZ shell command enables you to set the language type to the rez language.\par The resource compiler can combine resources or resource descriptions from a number of files into a single resource file.  The resource compiler supports preprocessor directives that allow you to substitute macros, include other files, and use if-then-else constructs.  (These are described under "Preprocessor Directives" later in this chapter.)\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Resource Decompiler}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Resource Decompiler\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }{\fs20 The DeRez utility creates a textual representation of a resource file based on resource type declarations identical to those used by the resource compiler.  (If you don't specify any type declarations, the output of DeRez takes the form of raw data statements.)  The output of DeRez is a resource description file that may be used as input to the resource compiler.  This file can be edited using the ORCA editor, allowing you to add comments, translate resource data to a foreign language, or specify conditional resource compilation by using the if-then-else structures of the preprocessor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Type Declaration Files}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Type Declaration Files\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler and DeRez automatically look in the 13:RInclude directory, as well as the current directory, for files that are specified by file name on the command line.  They also look in these directories for any files specified by a #include preprocessor directive in the resource description file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Using the Resource Compiler and DeRez}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Using the Resource Compiler and DeRez\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler and DeRez are primarily used to create and modify resource files.  The resource compiler can also form an integral part of the process of building a program.  For instance, when putting together a desk accessory or driver, you could use the resource compiler to combine the linker's output with other resources, creating an executable program file.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Structure of a Resource Description File}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Structure of a Resource Description File\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource description file}}}{\v\fs20 \par }{\fs20 The resource description file consists of resource type declarations (which can be included from another file) followed by resource data for the declared types.  Note that the resource compiler and resource decompiler have no built-in resource types.  You need to define your own types or include the appropriate .rez files.\par A resource description file may contain any number of these statements:\par \par }\pard \qj\fi-1080\li1440\widctlpar\adjustright {\fs20 include\tab Include resources from another file.\par read\tab Read the data fork of a file and include it as a resource.\par data\tab Specify raw data.\par type\tab Type declaration \endash  declare resource type descriptions for subsequent }{\i\fs20 resource}{\fs20  statements.\par resource\tab Data specification \endash  specify data for a resource type declared in previous }{\i\fs20 type}{\fs20  statements.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Each of these statements is described in the sections that follow.\par A type declaration provides the pattern for any associated resource data specifications by indicating data types, alignment, size and placement of strings, and so on.  You can intersperse type declarations and data in the resource description file so long as the declaration for a given resource precedes any resource statements that refer to it.  An error is returned if data (that is, a }{\i\fs20 resource}{\fs20  statement) is given for a type that has not been previously defined.  Whether a type was declared in a resource description file or in a #include file, you can redeclare it by providing a new declaration later in a resource description file.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:comments}}}{\v\fs20 \par }{\fs20 A resource description file can also include comments and preprocessor directives.  Comments can be included any place white space is allowed in a resource description file by putting them within the comment delimiters /* and */.  Note that comments do not nest.  For example, this is one comment:\par \par }{\f6\fs18 /* Hello /* there */\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 The resource compiler also supports the use of // as a comment delimiter.  And characters that follow // are ignored, up to the end of the current line.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 type 0x8001 \{ // the rest of this line is ignored\par }{\fs20 \par Preprocessor directives substitute macro definitions and include files, and provide if-then-else processing before other resource compiling takes place.  The syntax of the preprocessor is very similar to that of the C-language preprocessor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Sample Resource Description File}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Sample Resource Description File\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An easy way to learn about the resource description format is to decompile some existing resources.  For example, the following command decompiles only the rIcon resources in an application called Sample, according to the declaration in 13:RInclude:Types.rez.\par \par }{\f6\fs18 derez sample -only 0x8001 types.rez >derez.out\par }{\fs20 \par Note that DeRez automatically finds the file types.rez in 13:RInclude.  After executing this command, the file derez.out would contain the following decompiled resource:\par \par }{\f6\fs18 resource 0x8001  (0x1)  \{\par       0x8000,\par       20,\par       28\par       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par       $"FFFF FF00 0000 0000 0000 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FF00 FFFF FFFF FF00 FFFF FFFF FFFF"\par       $"FFFF FFFF FFFF FFFF FFFF FFFF FFFF FFFF"\par       $"0000 0000 0000 0000 0000 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0FFF FFFF FFFF FFF0 0000 0000 0000"\par       $"0000 0000 0000 0000 0000 0000 0000 0000"\par \};\par }{\fs20 \par Note that this statement would be identical to the resource description in the original resource description file, with the possible exception of minor differences in formatting.  The resource data corresponds to the following type declaration, contained in types.rez:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs18 /*-------------------------- rIcon -----------------------*/\par type rIcon \{\par         hex integer;                /* Icon Type bit 15  1 = color, 0 = mono */\par image:\par }\pard \widctlpar\adjustright {\f6\fs18         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par         integer;                    /* height of icon in pixels */\par         integer;                    /* width of icon in pixels */\par         hex string [$$Word(image)]; /* icon image */\par mask:\par         hex string;                 /* icon mask */\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Type and resource statements are explained in detail in the reference section that follows.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Resource Description Statements}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Resource Description Statements\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section describes the syntax and use of the five types of resource description statements available for the resource compiler:  include, read, data, type and resource.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Syntax Notation}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Syntax Notation\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The syntax notation in this chapter follows the conventions used earlier in the book.  In addition, the following conventions are used:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Words that are part of the resource description language are shown in the Courier font to distinguish them from surrounding text.  The resource compiler is not sensitive to the case of these words.\par \par \bullet \tab Punctuation characters such as commas (,), semicolons (;), and quotation marks (' and ") are to be written as shown.  If one of the syntax notation characters (for example, [ or ]) must be written as a literal, it is shown enclosed by "curly" single quotation marks (\lquote ...\rquote ); for example,\par \par }{\f6\fs18 \tab bitstring}{\fs20  \lquote [\rquote  }{\i\fs20 length}{\fs20  \lquote ]\rquote \par \par \tab In this case, the brackets would be typed literally \endash  they do }{\i\fs20 not}{\fs20  mean that the enclosed element is optional.\par \par \bullet \tab Spaces between syntax elements, constants, and punctuation are optional they are shown for readability only.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Tokens in resource description statements may be separated by spaces, tabs, returns, or comments.\par There are three terms used in the syntax of the resource description language that have not been used earlier to describe the shell.  The are:\par \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\i\fs20 resource-ID}{\fs20 \tab A long expression.  (Expressions are defined later.)\par }{\i\fs20 resource-type}{\fs20 \tab A word expression.\par }{\i\fs20 ID-range}{\fs20 \tab A range of }{\i\fs20 resource-ID}{\fs20 s, as in }{\i\fs20 ID}{\fs20 [:}{\i\fs20 ID}{\fs20 ].\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Include \endash  Include Resources from Another File}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Include \endash  Include Resources from Another File\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource description file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:include statement}}}{\v\fs20 \par }{\fs20 The include statement lets you read resources from an existing file and include all or some of them.\par An }{\f6\fs18 include}{\fs20  statement can take the following forms:\par \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\fs20 \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20  [ }{\i\fs20 resource-type}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote }{\i\fs20 ID}{\fs20 [:}{\i\fs20 ID}{\fs20 ]\lquote }{\f6\fs18 )}{\fs20 \rquote ]]}{\f6\fs18 ;}{\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \par \tab Read the resource of type }{\i\fs20 resource-type}{\fs20  with the specified resource ID range in }{\i\fs20 file}{\fs20 .  If the resource ID is omitted, read all resources of the type }{\i\fs20 resource-type}{\fs20  in }{\i\fs20 file}{\fs20 .  If }{\i\fs20 resource-type}{\fs20  is omitted, read all the resources in }{\i\fs20 file}{\fs20 .\par \par \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20   }{\f6\fs18 not}{\fs20  }{\i\fs20 resource-type}{\fs20  }{\f6\fs18 ;}{\fs20 \par \par \tab Read all resources in }{\i\fs20 file}{\fs20  that are not of the type }{\i\fs20 resource-type}{\fs20 .\par \par \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20  }{\i\fs20 resource-type1}{\fs20  }{\f6\fs18 as}{\fs20  }{\i\fs20 resource-type2}{\f6\fs18 ;}{\fs20 \par \par \tab Read all resources of type }{\i\fs20 resource-type1}{\fs20  and include them as resources of }{\i\fs20 resource-type2}{\fs20 .\par \par \bullet \tab }{\f6\fs18 include}{\fs20  }{\i\fs20 file}{\fs20  }{\i\fs20 resource-type1}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote }{\i\fs20 ID}{\fs20 [:}{\i\fs20 ID}{\fs20 ]\lquote }{\f6\fs18 )}{\fs20 \rquote \par \tab \tab }{\f6\fs18 as}{\fs20  }{\i\fs20 resource-type2 }{\fs20 \lquote }{\f6\fs18 (}{\fs20 \rquote }{\i\fs20 ID}{\fs20 [}{\f6\fs18 ,}{\i\fs20 attributes...}{\fs20 ]\lquote }{\f6\fs18 )}{\fs20 \rquote }{\f6\fs18 ;}{\fs20 \par \par \tab Read the resource in }{\i\fs20 file}{\fs20  of type }{\i\fs20 resource-type1}{\fs20  with the specified ID range, and include it as a resource of }{\i\fs20 resource-type2}{\fs20  with the specified ID.  You can optionally specify resource attributes.  (See "Resource Attributes," later in this section.)\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Examples:\par \par }\pard \qj\fi720\widctlpar\tx3780\adjustright {\f6\fs18 include "otherfile";\tab /* include all resources from the file */\par include "otherfile" rIcon;\tab /* read only the rIcon resources */\par include "otherfile" rIcon (128);\tab /* read only rIcon resource 128 */\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 AS Resource Description Syntax\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The following string variables can be used in the as resource description to modify the resource information in }{\f6\fs18 include}{\fs20  statements:\par \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 $$Type}{\fs20 \tab Type of resource from include file.\par }{\f6\fs18 $$ID}{\fs20 \tab ID of resource from include file.\par }{\f6\fs18 $$Attributes}{\fs20 \tab Attributes of resource from include file.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par For example, to include all }{\f6\fs18 rIcon}{\fs20  resources from one file and keep the same information but also set the preload attribute (64 sets it):\par \par }{\f6\fs18 INCLUDE "file" rIcon (0:40) AS rIcon ($$ID, $$Attributes | 64);\par }{\fs20 \par The }{\f6\fs18 $$Type}{\fs20 , }{\f6\fs18 $$ID}{\fs20 , and }{\f6\fs18 $$Attributes}{\fs20  variables are also set and legal within a normal resource statement.  At any other time the values of these variables are undefined.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Resource Attributes\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource attributes}}}{\v\fs20 \par }{\fs20 You can specify attributes as a numeric expression (as described in the }{\i\fs20 Apple\~II}{\i\fs18 GS}{\i\fs20  Toolbox Reference}{\fs20 , Volume 3) or you can set them individually by specifying one of the keywords from any of the sets in Table 10.1.  You can specify more than one attribute by separating the keywords with a comma (,).\par \par }\pard \fi-3420\li3780\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1980\adjustright {\fs20 Default\tab Alternative\tab Meaning\par }\pard \fi-3420\li3780\keepn\widctlpar\tx1980\adjustright {\f6\fs18 unlocked}{\fs20 \tab }{\f6\fs18 locked}{\fs20 \tab Locked resources cannot be moved by the Memory Manager.\par }{\f6\fs18 moveable}{\fs20 \tab }{\f6\fs18 fixed}{\fs20 \tab Specifies whether the Memory Manager can move the block when it is unlocked.\par }{\f6\fs18 nonconvert}{\fs20 \tab }{\f6\fs18 convert}{\fs20 \tab Convert resources require a resource converter.\par }{\f6\fs18 handleload}{\fs20 \tab }{\f6\fs18 absoluteload}{\fs20 \tab Absolute forces the resource to be loaded at an absolute address.\par }{\f6\fs18 nonpurgeable}{\fs20 \tab }{\f6\fs18 purgeable1}{\fs20 \tab Purgeable resources can be automatically purged by \par \tab }{\f6\fs18 purgeable2}{\fs20 \tab the Memory Manager.  Purgeable3 are purged\par \tab }{\f6\fs18 purgeable3}{\fs20 \tab before purgeable2, which are purged before purgeable1.\par }{\f6\fs18 unprotected}{\fs20 \tab }{\f6\fs18 protected}{\fs20 \tab Protected resources cannot be modified by the Resource Manager.\par }{\f6\fs18 nonpreload}{\fs20 \tab }{\f6\fs18 preload}{\fs20 \tab Preloaded resources are placed in memory as soon as the Resource Manager opens the resource file.\par }{\f6\fs18 crossbank}{\fs20 \tab }{\f6\fs18 nocrossbank}{\fs20 \tab A crossbank resource can cross memory bank boundaries.  Only data, not code, can cross bank boundaries.\par }{\f6\fs18 specialmemory}{\fs20 \tab }{\f6\fs18 nospecialmemory}{\fs20 \tab A special memory resource can be loaded in banks $00, $01, $E0 and $E1.\par }{\f6\fs18 notpagealigned}{\fs20 \tab }{\f6\fs18 pagealigned}{\fs20 \tab A page-aligned resource must be loaded with a starting address that is an even multiple of 256.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Table 10.1  Resource Attribute Keywords\par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Read \endash  Read Data as a Resource}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Read \endash  Read Data as a Resource\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 read}{\fs20  }{\i\fs20 resource-type}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 ,}{\fs20  }{\i\fs20 attributes}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  }{\i\fs20 file}{\fs20  }{\f6\fs18 ;}{\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:read statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\f6\fs18 read}{\fs20  statement lets you read a file's data fork as a resource.  It reads the data fork from }{\i\fs20 file}{\fs20  and writes it as a resource with the type }{\i\fs20 resource-type}{\fs20  and the resource ID }{\i\fs20 ID}{\fs20 , with the optional resource attributes.\par Example:\par \par }{\f6\fs18 read rText (0x1234, Purgeable3) "filename";\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Data \endash  Specify Raw Data}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Data \endash  Specify Raw Data\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 data}{\fs20  }{\i\fs20 resource-type}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 ,}{\fs20  }{\i\fs20 attributes}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote   \lquote }{\f6\fs18 \{}{\fs20 \rquote  \par \tab }{\i\fs20 data-string}{\fs20 \par \tab \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;}{\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:data statement}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use the }{\f6\fs18 data}{\fs20  statement to specify raw data as a sequence of bits, without any formatting.\par The data found in }{\i\fs20 data-string}{\fs20  is read and written as a resource with the type }{\i\fs20 resource-type}{\fs20  and the ID }{\i\fs20 ID}{\fs20 .  You can specify resource attributes.\par When DeRez generates a resource description, it used the data statement to represent any resource type that doesn't have a corresponding type declaration or cannot be decompiled for some other reason.\par Example:\par \par }{\f6\fs18 data rPString (0xABCD) \{\par \tab $"03414243"\par \tab \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Type \endash  Declare Resource Type}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Type \endash  Declare Resource Type\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 type}{\fs20  }{\i\fs20 resource-type}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID-range}{\fs20  \lquote }{\f6\fs18 )}{\fs20 \rquote  ]  \lquote }{\f6\fs18 \{}{\fs20 \rquote  \par \tab }{\i\fs20 type-specification...}{\fs20 \par \tab \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;}{\fs20 \par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:type statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource types}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resources\:see Rez}{\txe }}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A type declaration provides a template that defines the structure of the resource date for a single resource type or for individual resources.  If more than one type declaration is given for a resource type the last one read before the data definition is the one that's used.  This lets you override declarations from include files of previous resource description files.\par After the type declaration, any resource statement for the type }{\i\fs20 resource-type}{\fs20  uses the declaration }{\f6\fs18 \{}{\i\fs20 type-specification...}{\f6\fs14 \}}{\fs20 .  The optional }{\i\fs20 ID-range}{\fs20  specification causes the declaration to apply only to a given resource ID or range of IDs.\par }{\i\fs20 Type-specification}{\fs20  is one or more of the following kinds of type specifier:\par \par }\pard \qj\fi360\widctlpar\tx1800\tx3240\tx4680\tx6120\adjustright {\f6\fs18 array\tab bitstring\tab boolean\tab byte\tab char\par cstring\tab fill\tab integer\tab longint\tab point\par pstring\tab rect\tab string\tab switch\tab wstring\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You can also declare a resource type that uses another resource's type declaration by using the following variant of the type statement:\par \par }{\f6\fs18 type}{\fs20  }{\i\fs20 resource-type1}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID-range}{\fs20  \lquote }{\f6\fs18 )}{\fs20 \rquote  ]  as }{\i\fs20 resource-type2}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID }{\fs20 \lquote }{\f6\fs18 )}{\fs20 \rquote  ] }{\f6\fs18 ;}{\fs20 \par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Integer, Longint, Byte and Bitstring\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 integer}{\fs20  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 longint}{\fs20  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 byte}{\fs20  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 [ }{\f6\fs18 unsigned}{\fs20  ] [ }{\i\fs20 radix}{\fs20  ] }{\f6\fs18 bitstring}{\fs20  \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 ]}{\fs20 \rquote  [ = }{\i\fs20 expression}{\fs20  | }{\i\fs20 symbol-definition}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In each case, space is reserved in the resource for an integer or a long integer.\par If the type appears alone, with no other parameters, the resource compiler sets aside space for a value that must be given later when the resource type is used to define an actual resource.\par A type followed by a equal sign and an expression defines a value that will be preset to some specific integer.  Since the value is already given, you do not need to code the value again when the resource type is used to define a resource.\par A symbol-definition is an identifier, an equal sign, and an expression, optionally followed by a comma and another symbol definition.  It sets up predefined identifier that can be used to fill in the value.  You still have the option of coding a numeric value, or you can use one of the constants.  This is not a default value, though: you still must code either one of the constants or a numeric value when you use the resource type to define a resource.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\f6\fs18 unsigned}{\fs20  prefix signals DeRez that the number should be displayed without a sign \endash  that the high-order bit can be used for data and the value of the integer cannot be negative.  The }{\f6\fs18 unsigned}{\fs20  prefix is ignored by the resource compiler but is needed by DeRez to correctly represent a decompiled number.  The resource compiler uses a sign if it is specified in the data.  For example, $FFFFFF85 and -$7B are equivalent.\par Radix is one of the following constants:\par \par hex\tab decimal\tab octal\tab binary\tab literal\par \par }\pard \qj\widctlpar\adjustright {\fs20 The radix is used by DeRez to decide what number format to use for the output.  The radix field is ignored by the resource compiler.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each of the numeric types generates a different format of integer.  In each case, the value is in two's complement form, least significant byte first.  The various formats are:\par \par }\pard \qj\li720\ri1980\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\tx3680\adjustright {\fs20 type\tab size\tab range\par }\pard \qj\li720\keepn\widctlpar\tx2520\tx3680\adjustright {\fs20 byte\tab 1\tab -128..255\par integer\tab 2\tab -32768..65535\par longint\tab 4\tab -2147483648..4294967295\par }\pard \qj\li720\widctlpar\tx2520\tx3680\adjustright {\fs20 bitstring[length]\tab varies\tab varies\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Sizes are in bytes.  The range may seem a little odd at first; the resource compiler accepts either negative or positive values, treating positive values that would normally be too large for a signed value of the given length as if the value were unsigned.\par The bitstring type is different from most types in other languages.  It is a variable-length integer field, where you specify the number of bits you want as the length field.  If you specify a value that only fills part of a byte, then the next field will pick up where the bitstring field stopped.  For example, two bitstring[4] values, placed back to back, would require only one byte of storage in the resource file.  In general, you should be sure that bitstring fields end on even byte values so the following fields don't get bit aligned to the end of the partially filled byte.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \widctlpar\adjustright {\f6\fs18 /*---------------------- rToolStartup ---------------------*/\par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rToolStartup \{\par     integer = 0;                        /* flags must be zero */\par     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par     Integer = 0;\par     Longint = 0;\par     integer = $$Countof(TOOLRECS);      /* number of tools */\par         array TOOLRECS \{\par             Integer;                    /* ToolNumber */\par             Integer;                    /* version */\par         \};\par \};\par \par \par resource rToolStartup (1) \{\par     mode640,\par     \{\par         1,1,\tab /* Tool Locator */\par         2,1,\tab /* Memory Manager */\par         3,1,\tab /* Miscellaneous Tool Set */\par         4,1,\tab /* QuickDraw II */\par         5,1,\tab /* Desk Manager */\par         6,1,\tab /* Event Manager */\par         11,1,\tab /* Integer Math Tool Set */\par         14,1,\tab /* Window Manager */\par         15,1,\tab /* Menu Manager */\par         16,1,\tab /* Control Manager */\par         18,1,\tab /* QuickDraw II Auxiliary */\par         20,1,\tab /* LineEdit Tool Set */\par         21,1,\tab /* Dialog Manager */\par         22,1,\tab /* Scrap Manager */\par         27,1,\tab /* Font Manager */\par         28,1,\tab /* List Manager */\par         30,1,\tab /* Resource Manager */\par     \}\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Boolean\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 boolean}{\fs20  [ = }{\i\fs20 constant}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A boolean value is a one-bit value, set to either false (0) or true (1).  You can also use the numeric values.\par True and false are actually predefined constants.\par The type boolean is equivalent to\par \par }{\f6\fs18 unsigned bitstring[1]\par }{\fs20 \par Example:\par \par }{\f6\fs18 type 0x001 \{\par    boolean;\par    boolean;\par    boolean;\par    boolean;\par    bitstring[4] = 0;\par    \};\par \par resource 0x001 (1) \{\par    true, false, 0, 1\par    \};\par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Character\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 char}{\fs20  [ = }{\i\fs20 string}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A character value is an 8-bit value which holds a one-character string.  It is equivalent to }{\f6\fs18 string[1]}{\fs20 .\par \par Example:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 /*------------------------ rMenuItem ------------------------------*/\par type rMenuItem \{\par     integer = 0;                    /* version must be zero */\par     integer;                        /* item ID */\par     char;                           /* item char */\par     char;                           /* alt char */\par     integer;                        /* item check */\par     integer;                        /* flags */\par     longint;                        /* item titleref */\par \};\par \par resource rMenuItem (1) \{\par     256,\par     "Q","q",\par     0,\par     0,\par     1\par     \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 String, PString, WString and CString\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\i\fs20 string-type}{\fs20  [ \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 ]}{\fs20 \rquote  ] [ }{\f6\fs18 =}{\fs20  }{\i\fs20 string}{\fs20  | }{\i\fs20 symbol-value...}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:strings}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 String types are used to define a string in one of four formats.  The format of the string is determined by selecting one of the following for }{\i\fs20 string-type}{\fs20 :\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 [}{\f6\fs18 hex}{\fs20 ] }{\f6\fs18 string}{\fs20 \tab Plain string; no length indicator or terminal character is generated.  The optional }{\f6\fs18 hex}{\fs20  prefix tells DeRez to display it as a hexadecimal string.  }{\f6\fs18 String[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains n characters and is }{\i\fs20 n}{\fs20  bytes long.  The type }{\f6\fs18 char}{\fs20  is a shorthand for }{\f6\fs18 string[1]}{\fs20 .\par }{\f6\fs18 pstring}{\fs20 \tab Modula-2 string; a leading byte containing the number of characters in the string is generated.  }{\f6\fs18 Pstring[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains }{\i\fs20 n}{\fs20  characters and is }{\i\fs20 n}{\fs20 +1 bytes long.  Since the length must fit in a byte value, the maximum length of a pstring is 255 characters.  If the string is too long, a warning is given and the string is truncated.\par }{\f6\fs18 wstring}{\fs20 \tab Word string; this is a very large pstring.  The length of a wstring is stored in a two-byte field, giving a maximum length of 65535 characters.  }{\f6\fs18 Pstring[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains }{\i\fs20 n}{\fs20  characters and is }{\i\fs20 n}{\fs20 +2 bytes long.  The order of the bytes in the length word is least significant byte first; this is the normal order for bytes on the Apple\~II}{\fs18 GS}{\fs20 .\par }{\f6\fs18 cstring}{\fs20 \tab C string; a trailing null byte is added to the end of the characters.  }{\f6\fs18 Cstring[}{\i\fs20 n}{\f6\fs18 ]}{\fs20  contains }{\i\fs20 n}{\fs20 -1 characters and is }{\i\fs20 n}{\fs20  bytes long.  A C string of length 1 can be assigned only the value "", since }{\f6\fs18 cstring[1]}{\fs20  only has room for the terminating null.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Each string type can be followed by an optional }{\i\fs20 length}{\fs20  indicator in brackets.  }{\i\fs20 length}{\fs20  is an expression indicating the string length in bytes.  }{\i\fs20 length}{\fs20  is a positive number in the range 1..2147483647 for string and cstring, in the range 1..255 for pstring, and in the range 1..65535 for wstring.\par If no length indicator is given, a pstring, wstring or cstring stores the number of characters in the corresponding data definition.  If a length indicator is given, the data may be truncated on the right or padded on the right.  The padding characters for all strings are nulls.  If the data contains more characters than the length indicator provides for, the string is truncated and a warning message is given.\par \par Examples:\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 /*---------------------- rPString ----------------------*/\par type rPString \{\par         pstring;                    /* String */\par \};\par \par /*---------------------- rCString ----------------------*/\par type rCString \{\par         cstring;                    /* String */\par \};\par \par /*---------------------- rWString ----------------------*/\par type rWString \{\par         wstring;                    /* String */\par \};\par \par /*------------------------ rErrorString ----------------*/\par type rErrorString \{\par         string;\par \};\par \par resource rPString (1) \{\par     "p-string",\par     \};\par \par resource rCString (1) \{\par     "c-string",\par     \};\par \par resource rWString (1) \{\par     "GS/OS input string",\par     \};\par \par resource rErrorString (1) \{\par     "Oops",\par     \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Point and Rectangle\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 point}{\fs20  [ }{\f6\fs18 =}{\fs20  }{\i\fs20 point-constant}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par rect}{\fs20  [ }{\f6\fs18 =}{\fs20  }{\i\fs20 rect-constant}{\fs20  | }{\i\fs20 symbolic-value...}{\fs20  ] }{\f6\fs18 ;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Because points and rectangles appear so frequently in resource files, they have their own simplified syntax.  In the syntax shown, a point-constant is defined like this:\par \par \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 x-integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 y-integer-expression}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote \par \par }\pard \qj\widctlpar\adjustright {\fs20 while a rect-constant looks like this:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 ,}{\fs20 \rquote  }{\i\fs20 integer-expression}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote \par \par A point type creates a pair of integer values, with the first value corresponding to the horizontal point value and the second to the vertical point value.  A rect type is a pair of points, with the top left corner of the rectangle specified first, followed by the bottom right corner.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \widctlpar\adjustright {\f6\fs18 /*--------------------- rWindParam1 --------------------*/\par type rWindParam1 \{\par         integer = $50;              /*length of parameter list, should be $50*/\par         integer;                    /* wFrameBits */\par         longint;                    /* wTitle */\par         longint;                    /* wRefCon */\par         rect;                       /* ZoomRect */\par         longint;                    /* wColor ID */\par         point;                      /* Origin */\par         point;                      /* data size */\par         point;                      /* max height-width */\par         point;                      /* scroll ver hors */\par         point;                      /* page vers horiz */\par         longint;                    /* winfoRefcon */\par         integer;                    /* wInfoHeight */\par         fill long[3];               /* wFrameDefProc,wInfoDefProc,wContDefProc */\par         rect;                       /* wposition */\par         longint behind=0,infront=-1;/* wPlane */\par         longint;                    /* wStorage */\par         integer;                    /* wInVerb */\par \};\par \par resource rWindParam1 (1) \{\par         0x80E4,                     /* wFrameBits */\par         1,                          /* wTitle */\par         0,                          /* wRefCon */\par         \{0,0,0,0\},                  /* ZoomRect */\par         0,                          /* wColor ID */\par         \{0,0\},                      /* Origin */\par         \{416,160\},                  /* data size */\par         \{416,160\},                  /* max height-width */\par         \{0,0\},                      /* scroll ver hors */\par         \{0,0\},                      /* page vers horiz */\par         0,                          /* winfoRefcon */\par         0,                          /* wInfoHeight */\par         \{32,32,448,192\},            /* wposition */\par         infront,                    /* wPlane */\par         0,                          /* wStorage */\par         0x0200                      /* wInVerb */\par         \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Fill\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 fill}{\fs20  }{\i\fs20 fill-size}{\fs20  [ \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 [}{\fs20 \rquote  ] }{\f6\fs18 ;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource created by a resource definition has no implicit alignment.  It's treated as a bit stream, and integers and strings can start at any bit.  The fill specifier is a way of padding fields so that they begin on a boundary that corresponds to the field type.\par The fill statement causes the resource compiler to add the specified number of bits to the data stream.  The bits added are always set to 0.  }{\i\fs20 fill-size}{\fs20  is one of the following:\par \par }\pard \qj\fi360\widctlpar\tx1080\tx1800\tx2520\tx3240\adjustright {\f6\fs18 bit\tab nibble\tab byte\tab word\tab long\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par These declare a fill of 1, 4, 8, 16 or 32 bits, respectively.  Any of these can be followed by a }{\i\fs20 length}{\fs20  modifier.  }{\i\fs20 length}{\fs20  can be any value up to 2147483647; it specifies the number of these bit fields to insert.  For example, all of the following are equivalent:\par \par }{\f6\fs18 fill word[2];\par fill long;\par fill bit[32];\par }{\fs20 \par Fill statements are sometimes used as place holders, filling in constant values of zero.  You can see an example of the fill statement used for this purpose in the rWindParam1 resource type defined in types.rez.  The example in the last section shows this resource type in use.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Array\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par [ }{\f6\fs18 wide}{\fs20  ] }{\f6\fs18 array}{\fs20  [ }{\i\fs20 array-name}{\fs20  | \lquote }{\f6\fs18 [}{\fs20 \rquote  }{\i\fs20 length}{\fs20  \lquote }{\f6\fs18 ]}{\fs20 \rquote  ] \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 array-list}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:arrays}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\i\fs20 array-list}{\fs20  is a list of type specifications.  It can be repeated zero or more times.  The }{\f6\fs18 wide}{\fs20  option outputs the array data in a wide display format when the resource is decompiled with DeRez; this causes the elements that make up the }{\i\fs20 array-list}{\fs20  to be separated by a comma and space instead of a comma, return, and tab.\par Either }{\i\fs20 array-name}{\fs20  or [}{\i\fs20 length}{\fs20 ] may be specified.  }{\i\fs20 Array-name}{\fs20  is an identifier.  If the array is named, then a preceding statement should refer to that array in a constant expression with the }{\f6\fs18 $$countof(}{\i\fs20 array-name}{\f6\fs18 )}{\fs20  function, otherwise DeRez will treat the array as an open-ended array.  For example,\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rToolStartup \{\par     integer = 0;                        /* flags must be zero */\par     Integer mode320 = 0,mode640 = $80;  /* mode to start quickdraw */\par     Integer = 0;\par     Longint = 0;\par     integer = $$Countof(TOOLRECS);      /* number of tools */\par         array TOOLRECS \{\par             Integer;                    /* ToolNumber */\par             Integer;                    /* version */\par         \};\par \};\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The }{\f6\fs18 $$countof(}{\i\fs20 array-name}{\f6\fs18 )}{\fs20  function returns the number of array elements ( in this case, the number of tool number, version pairs) from the resource data.\par If length is specified, there must be exactly }{\i\fs20 length}{\fs20  elements.\par Array elements are generated by commas.  Commas are element separators.  Semicolons are element terminators.\par For an example of an rToolStartup resource, see "Integer, Longint, Byte and Bitstream," earlier in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Switch\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 switch}{\fs20  \lquote }{\f6\fs18 \{}{\fs20 \rquote  }{\i\fs20 case-statement...}{\fs20  \lquote }{\f6\fs18 \}}{\fs20 \rquote  }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:switch statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The switch statement lets you select one of a variety of types when you create your resource.  Each of the types within the switch statement are placed on a case label, which has this format:\par \par }{\f6\fs18 case}{\fs20  }{\i\fs20 case-name}{\fs20  }{\f6\fs18 :}{\fs20  }{\i\fs20 [case-body}{\fs20  }{\f6\fs18 ;}{\fs20  ] ...\par \par }{\i\fs20 Case-name}{\fs20  is an identifier.  }{\i\fs20 Case-body}{\fs20  may contain any number of type specifications and must include a single constant declaration per case, in this form:\par \par }{\f6\fs18 key}{\fs20  }{\i\fs20 data-type}{\fs20  }{\f6\fs18 =}{\fs20  }{\i\fs20 constant}{\fs20 \par \par The key value determines which case applies.  For example,\par \par }\pard \li180\widctlpar\adjustright {\f6\fs18 /*------------------------ rControlTemplate ------------------------*/\par type rControlTemplate \{\par         integer = 3+$$optionalcount (Fields); /* pCount must be at least 6 */\par         longint;                                 /* Application defined ID */\par         rect;                               /* controls bounding rectangle */\par         switch \{\par         \par         case SimpleButtonControl:\par             key longint = 0x80000000;   /* procRef */\par             optional Fields \{\par                 integer;                    /* flags */\par                 integer;                    /* more flags */\par                 longint;                    /* refcon */\par                 longint;                    /* Title Ref */\par                 longint;                    /* color table ref */\par                 KeyEquiv;\par             \};\par \par         case CheckControl:\par             key longint = 0x82000000;       /* procRef */\par             optional Fields \{\par                 integer;                    /* flags */\par                 integer;                    /* more flags */\par                 longint;                    /* refcon */\par                 longint;                    /* Title Ref */\par                 integer;                    /* initial value */\par                 longint;                    /* color table ref */\par                 KeyEquiv;\par             \};\par }{\i\f6\fs18         ...and so on.\par }{\f6\fs18     \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Symbol Definitions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Symbol Definitions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:symbols}}}{\v\fs20 \par }\pard\plain \s38\qj\fi360\widctlpar\adjustright \f12\cgrid {\fs20 Symbolic names for data type fields simplify the reading and writing of resource definitions.  Symbol definitions have the form\par \par }\pard\plain \qj\fi360\widctlpar\tx500\tx1280\tx1660\adjustright \f4\cgrid {\i\f6\fs20 name}{\f6\fs20  = }{\i\f6\fs20 value }{\f6\fs20  [, }{\i\f6\fs20 name}{\f6\fs20  = }{\i\f6\fs20 value }{\f6\fs20  ]\u8230\'c9\par }\pard\plain \s38\qj\fi360\widctlpar\adjustright \f12\cgrid {\fs20 \par The \ldblquote = }{\i\fs20 value }{\fs20 \rdblquote  part of the statement can be omitted for numeric data.  If a sequence of values consists of consecutive numbers, the explicit assignment can be left out; if }{\i\fs20 value}{\fs20  is omitted,}{\i\fs20  }{\fs20 it is assumed to be 1 greater than the previous value.  (The value is assumed to be 0 if it is the first value in the list.)  This is true for bitstrings (and their derivatives, byte, integer, and longint). For example,\par \par }\pard\plain \s39\li360\widctlpar\adjustright \f6\fs20\cgrid {\fs18 integer Emily, Kelly, Taylor, Evan, Trevor, Sparkle=8;\par }\pard\plain \s38\qj\fi360\widctlpar\adjustright \f12\cgrid {\fs20 \par In this example, the symbolic names Emily, Kelly, Taylor, Evan, and Trevor are automatically assigned the numeric values 0, 1, 2, 3, and 4.\par Memory is the only limit to the number of symbolic values that can be declared for a single field.  There is also no limit to the number of names you can assign to a given value; for example,\par \par }\pard\plain \s39\qj\fi360\keepn\widctlpar\adjustright \f6\fs20\cgrid {\fs18 integer\tab Emily=0, Kelly=1, Taylor=2, Evan=3,\par \tab \tab Trevor=16, Sparkle=0, Twinkle=1, Raphael=2,\par }\pard \s39\qj\fi360\widctlpar\adjustright {\fs18 \tab \tab Michaelangelo=3, Nagel=16;\par }\pard\plain \qj\widctlpar\adjustright \f4\cgrid {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Delete \endash  Delete a Resource}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Delete \endash  Delete a Resource\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 delete }{\i\fs20 resource-type}{\f6\fs18  }{\fs20 [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 :}{\fs20  }{\i\fs20 ID}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  ] }{\f6\fs18 ;\par }{\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:delete statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This statement deletes the resource of resource-type with the specified ID or ID range from the resource compiler output file.  If ID or ID range is omitted, all resources of }{\i\fs20 resource-type}{\fs20  are deleted.\par The delete function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to delete a resource while creating a new resource file from scratch.) \par You can delete resources that have their protected bit set only if you use the \endash ov option on the resource compiler command line.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Change \endash  Change a Resource's Vital Information}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Change \endash  Change a Resource's Vital Information\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\keepn\widctlpar\adjustright {\f6\fs18 change}{\fs20  }{\i\fs20 resource-type1}{\fs20  [ \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ }{\f6\fs18 :}{\fs20  }{\i\fs20 ID}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  ]\par \tab }{\i\fs20 resource-type2}{\fs20  \lquote (\rquote  }{\i\fs20 ID}{\fs20  [ , }{\i\fs20 attributes... }{\fs20 ] \lquote }{\f6\fs18 )}{\fs20 \rquote  }{\f6\fs18 ;}{\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:change statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This statement changes the resource of }{\i\fs20 resource-type1}{\fs20  with the specified ID or ID range in the resource compiler output file to a resource of }{\i\fs20 resource-type2}{\fs20  and the specified ID.  If ID or ID range is omitted, all resources of }{\i\fs20 resource-type1}{\fs20  are changed.\par The change function is valid only if you specify the \endash a (append) option on the resource compiler command line.  (It wouldn\rquote t make sense to change resources while creating a new resource file from scratch.) \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Resource \endash  Specify Resource Data}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Resource \endash  Specify Resource Data\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\f6\fs18 resource}{\fs20   }{\i\fs20 resource-type}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 ID}{\fs20  [ , }{\i\fs20 attributes}{\fs20  ] \lquote }{\f6\fs18 )}{\fs20 \rquote  \lquote }{\f6\fs18 \{}{\fs20 \rquote \par \tab [ }{\i\fs20 data-statement}{\fs20   [ , }{\i\fs20 data-statement}{\fs20   ]\u8230\'c9 ]\par \tab \lquote }{\f6\fs18 \}}{\fs20 \rquote ;\par \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Resource statements specify actual resources, based on previous type declarations.\par This statement specifies the data for a resource of type }{\i\fs20 resource-type}{\fs20  and ID }{\i\fs20 ID}{\fs20 .  The latest type declaration declared for resource-type is used to parse the data specification.\par Data statements specify the actual data; data-statements appropriate to each resource type are defined in the next section.\par The resource definition generates an actual resource.  A resource statement can appear anywhere in the resource description file, or even in a separate file specified on the command line or as an #include file, as long as it comes after the relevant type declaration.\par For examples of resource statements, see the examples following the various data statement types, earlier in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Data Statements\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The body of the data specification contains one data statement for each declaration in the corresponding type declaration.  The base type must match the declaration.\par \par }\pard \qj\li720\ri2520\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 Base type\tab Instance types\par }\pard \qj\li720\widctlpar\tx2160\adjustright {\fs20 string\tab string, cstring, pstring, wstring, char\par bitstring\tab boolean, byte, integer, longint, bitstring\par rect\tab rect\par point\tab point\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Switch data\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:switch statement}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Switch data statements are specified by using this format:\par \par }{\i\fs20 switch-name  data-body\par }{\fs20 \par For example, the following could be specified for the rControlTemplate type used in an earlier example:\par \par }{\f6\fs18 CheckControl \{ enabled, "Check here" \},\par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Array data\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:arrays}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Array data statements have this format:\par \par \lquote }{\f6\fs18 \{}{\fs20 \rquote  [ }{\i\fs20 array-element}{\fs20  [ , }{\i\fs20 array-element}{\fs20  ]\u8230\'c9 ] \lquote }{\f6\fs18 \}}{\fs20 \rquote \par \par }\pard \qj\widctlpar\adjustright {\fs20 where an }{\i\fs20 array-element}{\fs20  consists of any number of data statements separated by commas.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For example, the following data might be given for the rStringList resource (the type is shown so you won't have to refer to types.rez, where it is defined):\par \par }\pard \li360\widctlpar\adjustright {\f6\fs18 type rStringList \{\par         integer = $$Countof(StringArray);\par         array StringArray \{\par                 pstring;            /* String           */\par         \};\par \};\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 resource rStringList (280) \{\par     \{\par         "this",\par         "is",\par         "a",\par         "test"\par     \}\par \};\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Sample resource definition\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section describes a sample resource description file for an icon. (See the Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference, Volume 3 for information about resource icons.)  The type statement is included for clarity, but would normally be included using an include statement.\par \par }{\f6\fs18 type rIcon \{\par         hex integer;            /* icon type bit 15  1 = color, \par                                    0 = mono */\par image:\par         integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par         integer;                    /* height of icon in pixels */\par         integer;                    /* width of icon in pixels */\par         hex string [$$Word(image)]; /* icon image */\par mask:\par         hex string;                 /* icon mask */\par \};\par \par resource rIcon (1) \{\par         0x8000,                                /* Kind */\par         9,                                     /* Height */\par         32                                     /* Width */\par         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par         $"FFFFFF00000000000000FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par         $"FFFFFF00000000000000FFFFFFFFFFFF"\par         $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par         $"00000000000000000000000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000FFFFFFFFFFFFFF0000000000000"\par         $"00000000000000000000000000000000"\par \};\par }{\fs20 \par This data definition declares a resource of type rIcon, using whatever type declaration was previously specified for rIcon.  The 8 in the resource type specification (0x8000) identifies this as a color icon.  \par The icon is 9 pixels high by 32 pixels wide.\par The specification of the icon includes a pixel image and a pixel mask.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Labels}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Labels\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Labels support the more complicated resources.  Use labels within a resource type declaration to calculate offsets and permit accessing of data at the labels.  The rIcon resource, for example, uses labels to specify the pixel image and mask of the icon.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 The syntax for a label is:\par \par }\pard \qj\fi360\keepn\widctlpar\tx2160\adjustright {\f6\fs18 label ::=\tab character \{alphanum\}* ':'\par character ::=\tab '_' | A | B | C \u8230\'c9\par alphanum ::=\tab character | number \par }\pard \qj\fi360\widctlpar\tx2160\adjustright {\f6\fs18 number ::=\tab 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Labeled statements are valid only within a resource type declaration.  Labels are local to each type declaration.  More than one label can appear on a statement.\par Labels may be used in expressions.  In expressions, use only the identifier portion of the label (that is, everything up to, but excluding, the colon).  See \ldblquote Declaring Labels Within Arrays\rdblquote  later in this chapter for more information.\par The value of a label is always the offset, in bits, between the beginning of the resource and the position where the label occurs when mapped to the resource data.  In this example,\par \par }{\f6\fs18 type 0xCCCC \{\par     cstring;\par endOfString:\par     integer = endOfString;\par \};\par \par resource 0xCCCC (8) \{\par   "Neato"\par \}\par }\pard \qj\widctlpar\adjustright {\fs20 \par the integer following the cstring would contain:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 ( len("Neato") [5] + null byte [1] ) * 8 [bits per byte] = 48.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Built-in Functions to Access Resource Data}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Built-in Functions to Access Resource Data\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:built-in functions}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In some cases, it is desirable to access the actual resource data to which a label points.  Several built-in functions allow access to that data:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab }{\f6\fs18 $$BitField (label, startingPosition, numberOfBits)}{\fs20 \par \par \tab Returns the }{\i\fs20 numberOfBits}{\fs20  (maximum of 32) bitstring found }{\i\fs20 startingPosition}{\fs20  bits from }{\i\fs20 label}{\fs20 .\par \par \bullet \tab }{\f6\fs18 $$Byte (label)}{\fs20 \par \par \tab Returns the byte found at }{\i\fs20 label}{\fs20 .\par \par \bullet \tab }{\f6\fs18 $$Word (label)}{\fs20 \par \par \tab Returns the word found at }{\i\fs20 label}{\fs20 .\par \par \bullet \tab }{\f6\fs18 $$Long (label)}{\fs20 \par \par \tab Returns the long word found at }{\i\fs20 label}{\fs20 .\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par For example, the resource type rPString could be redefined without using a pstring.  Here is the definition of rPString from Types.rez:\par \par }{\f6\fs18 type rPString \{\par     pstring;\par \};\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Here is a redefinition of rPString using labels:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 type rPString \{\par len:  byte = (stop - len) / 8 - 1;\par       string[$$Byte(len)];\par stop: ;\par \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Declaring Labels Within Arrays}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Declaring Labels Within Arrays\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:arrays}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Labels declared within arrays may have many values.  For every element in the array there is a corresponding value for each label defined within the array.  Use array subscripts to access the individual values of these labels.  The subscript values range from 1 to n where n is the number of elements in the array.  Labels within arrays that are nested in other arrays require multidimensional subscripts.  Each level of nesting adds another subscript.  The rightmost subscript varies most quickly.  Here is an example:\par \par }{\f6\fs18 type 0xFF01 \{\par \tab integer = $$CountOf(array1);\par \tab array array1 \{\par \tab \tab integer = $$CountOf(array2);\par \tab \tab array array2 \{\par foo:\tab \tab \tab integer;\par \tab \tab \};\par \tab \};\par \};\par resource 0xFF01 (128) \{\par \tab \{\par \tab \tab \{1,2,3\},\par \tab \tab \{4,5\}\par \tab \}\par \};\par }{\fs20 \par In the example just given, the label foo takes on these values:\par \par }\pard \qj\fi360\widctlpar\tx2520\adjustright {\f6\fs18 foo[1,1] = 32\tab $$Word(foo[1,1]) = 1\par foo[1,2] = 48\tab $$Word(foo[1,2]) = 2\par foo[1,3] = 64\tab $$Word(foo[1,3]) = 3\par foo[2,1] = 96\tab $$Word(foo[2,1]) = 4\par foo[2,2] = 112\tab $$Word(foo[2,2]) = 5\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Another built-in function may be helpful in using labels within arrays:\par \par }{\f6\fs18 $$ArrayIndex(}{\i\fs20 arrayname}{\f6\fs18 )\par }{\fs20 \par This function returns the current array index of the array }{\i\fs20 arrayname}{\fs20 .  An error occurs if this function is used anywhere outside the scope of the array }{\i\fs20 arrayname}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Label Limitations}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Label Limitations\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\v\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Keep in mind the fact that the resource compiler and DeRez are basically one-pass compilers.  This will help you understand some of the limitations of labels.\par To decompile a given type, that type must not contain any expressions with more than one undefined label.  An undefined label is a label that occurs lexically after the expression.  To define a label, use it in an expression before the label is defined.\par This example demonstrates how expressions can have only one undefined label:\par \par }{\f6\fs18 type 0xFF01 \{\par \tab /* In the expression below, start is defined, next is undefined. */\par start:\tab integer = next - start;\tab \par \tab /* In the expression below, next is defined because it was used\par \tab    in a previous expression, but final is undefined. */\par middle:\tab integer = final - next;\par next:\tab integer;\par final:\par \};\par }{\fs20 \par Actually, the resource compiler can compile types that have expressions containing more than one undefined label, but the DeRez cannot decompile those resources and simply generates data resource statements.\par The label specified in }{\f6\fs18 $$BitField()}{\fs20 , }{\f6\fs18 $$Byte()}{\fs20 , }{\f6\fs18 $$Word()}{\fs20 , and }{\f6\fs18 $$Long()}{\fs20  must occur lexically before the expression; otherwise, an error is generated.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b An Example Using Labels}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v An Example Using Labels\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:labels}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the following example, the definition for the rIcon resource uses the labels image and mask.\par \par }{\f6\fs18 \tab type rIcon \{\par \tab      hex integer;      /* Icon Type bit 15  1 = color, 0 = mono */\par \tab image:\par \tab      integer = (Mask-Image)/8 - 6;/* size of icon data in bytes */\par \tab      integer;                    /* height of icon in pixels */\par \tab      integer;                    /* width of icon in pixels */\par \tab      hex string [$$Word(image)]; /* icon image */\par \tab mask:\par \tab      hex string;                 /* icon mask */\par \tab \};\par }{\fs20 \par In the data corresponding to that definition, pixel images are provided for the image and mask.\par \par }{\f6\fs18 resource rIcon (1) \{\par \tab \tab 0x8000,\tab \tab \tab \tab /* Kind */\par \tab \tab 9,\tab \tab \tab \tab \tab /* Height */\par \tab \tab 32\tab \tab \tab \tab \tab /* Width */\par \tab \tab $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \tab \tab $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00FFFFFFFFFF00FFFFFFFFFFFF"\par \tab \tab $"FFFFFF00000000000000FFFFFFFFFFFF"\par \tab \tab $"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"\par \par \tab \tab $"00000000000000000000000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000FFFFFFFFFFFFFF0000000000000"\par \tab \tab $"00000000000000000000000000000000"\par \};\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Preprocessor Directives}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Preprocessor Directives\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Preprocessor directives substitute macro definitions and include files and provide if-then-else processing before other resource compiler processing takes place.\par The syntax of the preprocessor is very similar to that of the C-language preprocessor.  Preprocessor directives must observe these rules and restrictions:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 \bullet \tab Each preprocessor statement must begin on a new line, be expressed on a single line, and be terminated by a return character.\par \bullet \tab The pound sign (#) must be the first character on the line of a preprocessor statement (except for spaces and tabs).\par \bullet \tab Identifiers (used in macro names) may be letters (A\endash Z, a\endash z), digits (0\endash 9), or the underscore character ( _ ).\par \bullet \tab Identifiers may be any length.\par \bullet \tab Identifiers may not start with a digit.\par \bullet \tab Identifiers are not case sensitive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Variable Definitions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Variable Definitions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:define statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:undef statement}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:macros}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The #define and #undef directives let you assign values to identifiers:\par \par }{\f6\fs18 #define }{\i\fs20 macro data}{\f6\fs18 \par #undef }{\i\fs20 macro}{\f6\fs18 \par }{\fs20 \par The #define directive causes any occurrence of the identifier }{\i\fs20 macro}{\fs20  to be replaced with the text }{\i\fs20 data}{\fs20 .  You can extend a macro over several lines by ending the line with the backslash character (\\), which functions as the resource compiler\rquote s escape character.  Here is an example:\par \par }{\f6\fs18 #define poem "I wander \\\par thro\\' each \\\par charter\\'d street"\par }{\fs20 \par Quotation marks within strings must also be escaped.  See "Escape Characters: later in this chapter for more information about escape characters.\par The #undef directive removes the previously defined identifier macro.  Macro definitions can also be removed with the \endash undef option on the resource compiler command line.\par The following predefined macros are provided:\par \par }\pard \qj\li360\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\adjustright {\fs20 Variable\tab Value\par }\pard \qj\li360\widctlpar\tx1440\adjustright {\fs20 true\tab 1\par false\tab 0\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\li360\widctlpar\tx1440\adjustright {\fs20 rez\tab 1 or 0 (1 if the resource compiler is running, 0 if DeRez is running)\par derez\tab 1 or 0 (0 if the resource compiler is running, 1 if DeRez is running)\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b If-Then-Else Processing}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v If-Then-Else Processing\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:conditional compilation}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:if statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 These directives provide conditional processing:\par \par }{\f6\fs18 #if }{\i\fs20 expression}{\f6\fs18 \par }{\fs20 [ }{\f6\fs18 #elif }{\i\fs20 expression }{\fs20  ]}{\f6\fs18 \par }{\fs20 [ }{\f6\fs18 #else}{\fs20  ]}{\f6\fs18 \par #endif\par }{\fs20 \par }{\i\fs20 Expression}{\fs20  is defined later in this chapter.\par When used with the #if and #elif directives, }{\i\fs20 expression}{\fs20  may also include one of these terms:\par \par }{\f6\fs18 defined}{\fs20  }{\i\fs20 identifier}{\fs20 \par }{\f6\fs18 defined}{\fs20  \lquote }{\f6\fs18 (}{\fs20 \rquote  }{\i\fs20 identifier}{\fs20  \lquote }{\f6\fs18 )}{\fs20 \rquote \par \par The following may also be used in place of #if:\par \par }{\f6\fs18 #ifdef}{\fs20  }{\i\fs20 macro}{\fs20 \par }{\f6\fs18 #ifndef}{\fs20  }{\i\fs20 macro}{\fs20 \par \par For example,\par \par }{\f6\fs18 #define Thai\par Resource  rPstring  (199)  \{\par #ifdef English\par \tab "Hello"\par #elif defined (French)\par \tab "Bonjour"\par #elif defined (Thai)\par \tab "Sawati"\par #elif defined (Japanese)\par \tab "Konnichiwa"\par #endif\par \};\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Printf Directive}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Printf Directive\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:printf statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The #printf directive is provided to aid in debugging resource description files.  It has the form\par \par }{\f6\fs18 #printf(}{\i\fs20 formatString}{\f6\fs18 , }{\i\fs20 arguments\u8230\'c9}{\f6\fs18 )\par }{\fs20 \par The format of the #printf statement is exactly the same as that of the printf statement in the C language, with one exception: There can be no more than 20 arguments.  This is the same restriction that applies to the }{\f6\fs18 $$format}{\fs20  function.  The #printf directive writes its output to diagnostic output.  Note that the #printf directive does not end with a semicolon.\par Here\rquote s an example:\par \par }{\f6\fs18 #define\tab \tab Tuesday\tab \tab 3\par #ifdef Monday\par #printf("The day is Monday, day #%d\\n", Monday)\par #elif defined(Tuesday)\par #printf("The day is Tuesday, day #%d\\n", Tuesday)\par #elif defined(Wednesday)\par #printf("The day is Wednesday, day #%d\\n", Wednesday)\par #elif defined(Thursday)\par #printf("The day is Thursday, day #%d\\n", Thursday)\par #else\par #printf("DON'T KNOW WHAT DAY IT IS!\\n")\par #endif\par }{\fs20 \par The file just listed generates this text:\par \par }{\f6\fs18 The day is Tuesday, day #3\par }{\fs20 \par }{\i\fs20 Formatstring}{\fs20  is a text string which is written more or less as is to error out.  There are two cases when the string is not written exactly as typed: escape characters and conversion specifiers.\par Escape sequences are used to encode characters that would not normally be allowed in a string.  The examples show the most commonly used escape sequence, \\n.  The \\ character marks the beginning of an escape sequence, telling the resource compiler that the next character is special.  In this case, the next character is n, which indicates a newline character.  Printing \\n is equivalent to a WriteLn in Modula-2 or a PutCR macro from assembly language.  For a complete description of escape sequences, see "Escape Characters," later in this chapter.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Conversion Specifiers\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Conversion specifiers are special sequences of characters that define how a particular value is to be printed.  While the resource compiler actually accepts all of the conversion specifiers allowed by the C language (it is written in C, and uses C's sprintf function to format the string for this statement), many of the conversion specifiers that are used by C are not useful in the resource compiler, and some of the others are not commonly used.  For example, technically the resource compiler supports floating-point output, but it does not have a floating point variable type, so the conversion specifiers for floating point values are not of much use.  Only those conversion specifiers that are generally used in the resource compiler will be covered here.\par Each conversion specifier starts with a % character; to write a % character, code it twice, like this:\par \par }{\f6\fs18 printf("100%%\\n");\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Conversion specifiers are generally used to write string or numeric arguments.  For example, the %n conversion specifier is used to write a two-byte integer.  You can put one of several characters between the % characters that starts a conversion specifier and the letter character that indicates the type of the argument; each of these additional characters modifies the format specifier in some way.  The complete syntax for a format specifier is\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 % }{\i\fs20 flag}{\f6\fs18  }{\fs20 [}{\f6\fs18  }{\i\fs20 field-width}{\f6\fs18  }{\fs20 ]}{\f6\fs18  }{\fs20 [}{\f6\fs18  }{\i\fs20 size-specifier}{\f6\fs18  }{\fs20 ]}{\f6\fs18  }{\i\fs20 conversion}{\fs20 \par \par }{\i\fs20 Flag}{\fs20  is one or more of the characters -, 0, + or a space.  The entire field is optional.  These flags effect the way the output is formatted:\par \par }\pard \qj\fi-720\li1080\widctlpar\adjustright {\fs20 -\tab If a formatted value is shorter than the minimum field width, it is normally right-justified in the field by adding characters to the left of the formatted value.  If the - flag is used, the value is left-justified.\par 0\tab If a formatted value is shorter than the minimum field width, it is normally padded with space characters.  If the 0 flag is used, the field is padded with zeros instead of spaces.  The 0 pad character is not used if the value is left-justified.\par +\tab Forces signed output, adding a + character before positive integers.\par space\tab Adds a space before positive numbers (instead of a +) so they line up with collimated negative numbers.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\i\fs20 Field-width}{\fs20  gives the number of characters to use for the output field.  If the number of characters needed to represent a value is less than the field width, spaces are added on the left to fill out the field.  For example, the statement\par \par }{\f6\fs18 printf("%10n%10n\\n", a, b);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 could be used to print two columns of numbers, where each column  is ten characters wide and the numbers are right-justified.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\i\fs20 size-specifier}{\fs20  gives the size of the operand.  If the }{\i\fs20 size-specifier}{\fs20  is omitted, the resource compiler expects to find an integer parameter in the parameter list when it processes any of the numeric conversion specifiers.  If the size specifier is h, a byte is expected, while l indicates that the resource compiler should look for a longint value.\par }{\i\fs20 Conversion}{\fs20  tells what size and type of operand to expect and how to format the operand:\par \par }\pard \qj\li720\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\adjustright {\fs20 Conversion\tab Format\par }\pard \qj\li720\keepn\widctlpar\tx2160\tx3600\adjustright {\f6\fs18 d}{\fs20 \tab signed integer\par }{\f6\fs18 u}{\fs20 \tab unsigned integer\par }{\f6\fs18 o}{\fs20 \tab unsigned octal}{\pard\plain \qj\li720\keepn\widctlpar\tx2160\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 octal}}}{\fs20  integer\par }{\f6\fs18 x}{\fs20 \tab unsigned hexadecimal}{\pard\plain \qj\li720\keepn\widctlpar\tx2160\tx3600\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  number; lowercase letters are used\par }{\f6\fs18 X}{\fs20 \tab unsigned hexadecimal number; uppercase letters are used\par }{\f6\fs18 c}{\fs20 \tab character\par }{\f6\fs18 s}{\fs20 \tab c-string\par }{\f6\fs18 p}{\fs20 \tab p-string\par }\pard \qj\li720\widctlpar\tx2160\tx3600\adjustright {\f6\fs18 %}{\fs20 \tab write a single % character\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par You must include exactly one parameter after the format string for each conversion specifier in the format string, and the types of the parameters must agree exactly with the types indicated by the conversion specifiers.  Parameters are matched with conversion specifiers on a left-to-right basis.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Include Directive}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Include Directive\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:include statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The #include directive reads a text file:\par \par }{\f6\fs18 #include "}{\i\fs20 filename}{\f6\fs18 "\par }{\fs20 \par The directive behaves as if all of the lines in }{\i\fs20 file}{\fs20  were placed in the current source file, replacing the line with the directive.  The maximum nesting is to ten levels.  For example,\par \par }{\f6\fs18 #include ($$Shell("ORCA")) "MyProject MyTypes.rez"\par }{\fs20 \par Note that the #include preprocessor directive (which includes a file) is different from the previously described include statement, which copies resources from another file.\par The #include directive will look up to three places for the file, in order:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The current directory.\par 2.\tab The directory where the source file is located (generally the current directory, but not always).\par 3.\tab The directory 13:RInclude.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Append Directive}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Append Directive\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:append statement}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This directive allows you to specify additional files to be compiled by the resource compiler.  The format is:\par \par }{\f6\fs18 #append "}{\i\fs20 filename}{\f6\fs18 "}{\fs20 \par \par This directive must appear between resource or type statements.  The }{\i\fs20 filename}{\fs20  variable is the name of the next file to be compiled.  The same search rules apply here that apply to the #include directive.  Normally you should place this directive at the end of a file because everything after it is ignored.  Do not place a #append directive in an include file.\par If you use more than one #append directive, the order in which you put them is important.  When the resource compiler sees an #append directive, it checks the language type of the appended file.  If it is the same language, that is, REZ, the effect is the same as if the files had been concatenated into a single file.  If they are in different languages, the shell quits the resource compiler and begins a new assembly or compilation.  Two examples will illustrate why the order is important.\par In the first example, suppose you have the following three files, each appended to the preceding file.\par \par }{\f6\fs18 file1.rez\par file2.rez\par file3.asm\par }{\fs20 \par The Compile command calls the resource compiler to process file1.rez because the language is REZ.  When the resource compiler encounters the #append directive for file2.rez it continues processing as if file.rez and file2.rez had been concatenated into a single file.  When it encounters the #append directive for file3.asm, the resource compiler finishes processing and returns control to the shell which calls the assembler to assemble file3.asm.\par The result is different if the order of the files is changed, as follows:\par \par }{\f6\fs18 file1.rez\par file3.asm\par file2.rez\par }{\fs20 \par The resource compiler processes file1.rez.  When it encounters the #append directive for file3.asm, the resource compiler finishes processing and returns control to the ORCA shell because the language stamp is different.  The shell calls the assembler to processes file3.asm.  When the assembler is finished processing, it returns control to the shell which calls the resource compiler to process file2.rez.  However, since this is a separate compilation from that of file1.rez, the resource compiler knows nothing about symbols from file1.rez when compiling file2.rez.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 DeRez handles #append directives differently from the resource compiler.  For DeRez the file being appended must have a language stamp of REZ or DeRez will treat the #append directive as an end-of-file marker.  DeRez will not return control to the shell after finishing processing.  Therefore, in the previous example, DeRez would process file1.rez only and then finish processing.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Resource Description Syntax}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Resource Description Syntax\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk17}This section describes the details of the resource description syntax.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Numbers and Literals}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Numbers and Literals\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 All arithmetic is performed as 32-bit signed arithmetic.  The basic formats are shown in Table 10.2.\par \par }\pard \qj\fi-2340\li2700\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\adjustright {\fs20 Numeric Type\tab Form\tab Meaning\par }\pard \qj\fi-2340\li2700\widctlpar\tx1800\adjustright {\fs20 Decimal\tab nnn\u8230\'c9\tab Signed decimal constant between 2,147,483,647 and \endash 2,147,483,648.  Do not use a leading zero.  (See octal.)\par Hexadecimal}{\pard\plain \qj\fi-2340\li2700\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Hexadecimal}}}{\fs20 \tab 0Xhhh\u8230\'c9\tab Signed hexadecimal constant between 0X7FFFFFFF and 0X80000000.\par \tab $hhh\u8230\'c9\tab Alternate form for hexadecimal constants.\par Octal\tab 0ooo\u8230\'c9\tab Signed octal}{\pard\plain \qj\fi-2340\li2700\widctlpar\tx1800\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 octal}}}{\fs20  constant between 017777777777 and 020000000000.  A leading zero indicates that the number is octal.\par Binary\tab 0Bbbb\u8230\'c9\tab Signed binary constant between 0B11111111111111111111111111111111 and 0B10000000000000000000000000000000.\par Literal\tab 'aaaa'\tab One to four printable ASCII characters or escape characters.  If there are fewer than four characters in the literal, the characters to the left (high bits) are assumed to be $00.  Characters that are not in the printable character set, and are not the characters \\' and \\\\ (which have special meanings), can be escaped according to the character escape rules.  (See \ldblquote Strings\rdblquote  later in this section.)\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Table 10.2: Numeric Constants\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Literals and numbers are treated in the same way by the resource compiler.  A literal is a value within single quotation marks; for instance, 'A' is a number with the value 65; on the other hand, "A" is the character A expressed as a string.  Both are represented in memory by the bitstring 01000001.  (Note, however, that "A" is not a valid number and 'A' is not a valid string.) The following numeric expressions are all equivalent:\par \par }\pard \qj\fi360\widctlpar\tx1800\tx3240\adjustright {\f6\fs18 'B'\tab 66\tab 'A'+1\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Literals are padded with nulls on the left side so that the literal 'ABC' is stored as shown in Figure 10.3.\par \par }\pard \qc\fi360\keepn\widctlpar\adjustright {{\pict{\*\picprop\shplid1059{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw125\pich26\picwgoal2500\pichgoal520\macpict\bliptag-1142544067\blipupi72{\*\blipuid bbe6293d761fe5ac1c2897935ea6b8f0}015300070007002100841101a00082a0008c01000a000700070021008434000c0039001f008238a10096000605000000023da1009a0008fffe000000160000a000982c000a001607436f75726965720300160d00092b0b16082741424327203d20a00099a00097a0008ca0008c0a000000000000000034000a0037001d004a38a10096000606000000023da1009a0008fffe000000070000a00098292e03243030a00099a00097a0008da0008c34000a0049001d005c38a10096000606000000023da1009a0008fffe000000030000a0009829170141a00099a00097a0008da0008c34000a005b001d006e38a10096000606000000023da1009a0008fffe000000030000a0009829120142a00099a00097a0008da0008c34000a006d001d008038a10096000606000000023da1009a0008fffe000000030000a0009829120143a00099a00097a0008da0008da0008da00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 10.3: Padding of Literals\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Expressions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Expressions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:expressions}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An expression may consist of simply a number or a literal.  Expressions may also include numeric variables, labels, and system functions.\par Table 10.3 lists the operators in order of precedence with highest precedence first \endash  groupings indicate equal precedence.  Evaluation is always left to right when the priority is the same.\par \par }\pard \qj\fi-2520\li2880\ri1080\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\adjustright {\fs20 Precedence\tab Operator\tab Meaning\par }\pard \qj\fi-2520\li2880\widctlpar\tx1440\adjustright {\fs20 1.\tab ( expr )\tab Forced precedence in expression calculation\par 2.\tab -expr\tab Arithmetic (two\rquote s complement) negation of expr\par \tab ~expr\tab Bitwise (one\rquote s complement) negation of expr\par \tab !expr\tab Logical negation of expr\par 3.\tab expr1 * expr2\tab Multiplication\par \tab expr1 / expr2\tab Integer division\par \tab expr1 % expr2\tab Remainder from dividing expr1 by expr2\par 4.  \tab expr1 + expr2\tab Addition\par \tab expr1 - expr2\tab Subtraction\par 5.\tab expr1 << expr2\tab Shift left; shift expr1 left by expr2 bits\par \tab expr1 >> expr2\tab Shift right; shift expr1 right by expr2 bits \par 6.\tab expr1 > expr2\tab Greater than\par \tab expr1 >= expr2\tab Greater than or equal to\par \tab expr1 < expr2\tab Less than\par \tab expr1 <= expr2\tab Less than or equal to\par 7.\tab expr1 == expr2\tab Equal\par \tab expr1 != expr2\tab Not equal\par 8.\tab expr1 & expr2\tab Bitwise AND\par 9.\tab expr1 ^ expr2\tab Bitwise XOR\par 10.\tab expr1 | expr2\tab Bitwise OR\par 11.\tab expr1 && expr2\tab Logical AND\par }\pard \qj\fi-2520\li2880\keepn\widctlpar\tx1440\adjustright {\fs20 12.\tab expr1 || expr2\tab Logical OR\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Table 10.3: Resource Description Operators\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The logical operators !, >, >=, <, <=, ==, !=, &&, and || evaluate to 1 (true) or 0 (false).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Variables and Functions}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Variables and Functions\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:variables}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:built-in functions}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are several predefined variables that are preset by the resource compiler, or that take on specific meaning based on how they are used in your resource description file.  Some of these resource compiler variables also contain commonly used values.  All Rez variables start with $$ followed by an alphanumeric identifier.\par The following variables and functions have string values:\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs18 $$Date}{\fs20 \tab Current date.  It is useful for putting time-stamps into the resource file.  The format of the string is: weekday, month dd, yyyy.  For example, August 10, 1989.\par \par }{\f6\fs18 $$Format("}{\i\fs20 formatString}{\f6\fs18 ", }{\i\fs20 arguments}{\f6\fs18 )}{\fs20 \par \tab Works just like the #printf directive except that }{\f6\fs18 $$Format}{\fs20  returns a string rather than printing to standard output.  (See \ldblquote Print Directive\rdblquote  earlier in this chapter.)\par \par }{\f6\fs18 $$Resource("}{\i\fs20 filename}{\f6\fs18 ",'}{\i\fs20 type}{\f6\fs18 ',}{\i\fs20 ID}{\f6\fs18 )}{\fs20 \par \tab Reads the resource }{\f6\fs18 '}{\i\fs20 type}{\f6\fs18 '}{\fs20  with the ID }{\i\fs20 ID}{\fs20  from the resource file }{\i\fs20 filename}{\fs20 , and returns a string.\par \par }{\f6\fs18 $$Shell("}{\i\fs20 stringExpr}{\fs20  }{\f6\fs18 ")}{\fs20 \tab Current value of the exported shell variable \{stringExpr \}.  Note that the braces must be omitted, and the double quotation marks must be present.\par \par }{\f6\fs18 $$Time}{\fs20 \tab Current time.  It is useful for time-stamping the resource file.  The format is: "hh:mm:ss".\par \par }{\f6\fs18 $$Version}{\fs20 \tab Version number of the resource compiler.  (\ldblquote V1.0\rdblquote )\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par These variables and functions have numeric values:\par \par }\pard \qj\fi-2520\li2880\widctlpar\adjustright {\f6\fs18 $$Attributes}{\fs20 \tab Attributes of resource from the current resource.\par \par }{\f6\fs18 $$BitField(}{\i\fs20 label}{\f6\fs18 , }{\i\fs20 startingPosition}{\f6\fs18 , }{\i\fs20 numberOfBits}{\f6\fs18 )}{\fs20 \par \tab Returns the }{\i\fs20 numberOfBits}{\fs20  (maximum of 32) bitstring found }{\i\fs20 startingPosition}{\fs20  bits from }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$Byte(}{\i\fs20 label}{\f6\fs18 )}{\fs20 \tab Returns the byte found at }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$CountOf (}{\i\fs20 arrayName}{\f6\fs18 )}{\fs20 \tab Returns the number of elements in the array }{\i\fs20 arrayName}{\fs20 .\par \par }{\f6\fs18 $$Day}{\fs20 \tab Current day (range 1\endash 31).\par \par }{\f6\fs18 $$Hour}{\fs20 \tab Current hour (range 0\endash 23).\par \par }{\f6\fs18 $$ID}{\fs20 \tab ID of resource from the current resource.\par \par }{\f6\fs18 $$Long(}{\i\fs20 label}{\f6\fs18 )}{\fs20 \tab Returns the long word found at }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$Minute}{\fs20 \tab Current minute (range 0\endash 59).\par \par }{\f6\fs18 $$Month}{\fs20 \tab Current month (range 1\endash 12).\par \par }{\f6\fs18 $$OptionalCount (}{\i\fs20 OptionalName}{\f6\fs18 )}{\fs20 \par \tab Returns the number of items explicitly specified in the block }{\i\fs20 OptionalName}{\fs20 .\par \par }{\f6\fs18 $$PackedSize(}{\i\fs20 Start}{\f6\fs18 , }{\i\fs20 RowBytes}{\f6\fs18 , }{\i\fs20 RowCount}{\f6\fs18 )}{\fs20 \par \tab Given an offset (}{\i\fs20 Start}{\fs20 ) into the current resource and two integers, }{\i\fs20 RowBytes}{\fs20  and }{\i\fs20 RowCount}{\fs20 , this function calls the toolbox routine UnpackBytes }{\i\fs20 RowCount}{\fs20  times.  }{\f6\fs18 $$PackedSize( )}{\fs20  returns the unpacked size of the data found at }{\i\fs20 Start}{\fs20 .  Use this function only for decompiling resource files.  An example of this function is found in Pict.rez.\par \par }{\f6\fs18 $$ResourceSize}{\fs20 \tab Current size of resource in bytes.  When decompiling, }{\f6\fs18 $$ResourceSize}{\fs20  is the actual size of the resource being decompiled.  When compiling, }{\f6\fs18 $$ResourceSize}{\fs20  returns the number of bytes that have been compiled so far for the current resource.\par \par }{\f6\fs18 $$Second}{\fs20 \tab Current second (range 0\endash 59).\par \par }{\f6\fs18 $$Type}{\fs20 \tab Type of resource from the current resource.\par \par }{\f6\fs18 $$Weekday}{\fs20 \tab Current day of the week (range 1\endash 7, that is, Sunday\endash Saturday).\par \par }{\f6\fs18 $$Word(}{\i\fs20 label}{\f6\fs18 )}{\fs20 \tab Returns the word found at }{\i\fs20 label}{\fs20 .\par \par }{\f6\fs18 $$Year}{\fs20 \tab Current year.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Strings}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Strings\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:strings}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are two basic types of strings:\par \par }\pard \qj\fi-2880\li3240\widctlpar\tx2160\adjustright {\fs20 Text string\tab }{\f6\fs18 "a\u8230\'c9"}{\fs20 \tab The string can contain any printable character except \lquote  " \rquote  and \lquote \\\rquote .  These and other characters can be created through escape sequences.  (See Table\~10-4.)  The string "" is a valid string of length 0.\par Hexadecimal string\tab }{\f6\fs18 $"hh\u8230\'c9"}{\fs20 \tab Spaces and tabs inside a hexadecimal}{\pard\plain \qj\fi-2880\li3240\widctlpar\tx2160\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  string are ignored.  There must be an even number of hexadecimal digits.  The string $"" is a valid hexadecimal string of length\~0.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Any two strings (hexadecimal or text) will be concatenated if they are placed next to each other with only white space in between.  (In this case, returns and comments are considered white space.)\par Figure 10.4 shows a p-string declared as\par \par }{\f6\fs18 pstring [10];\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 whose data definition is\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 "Hello"\par }{\fs20 \par }\pard \qc\fi360\keepn\widctlpar\adjustright {\fs20 {\pict{\*\picprop\shplid1060{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex100\picscaley100\piccropl0\piccropr0\piccropt0\piccropb0\picw347\pich37\picwgoal6940\pichgoal740\macpict\bliptag-681597899\blipupi72{\*\blipuid d75fa435775d57667f6a6b69c5828a3e}025100070007002c01621101a00082a0008ca0008c01000a00070007002c01620a000000000000000034000a000a002a002a3834000a0048002a00683834000a0067002a00873834000a0029002a004938a0008da100960006060000000202a1009a0008fffd000000070000a000980300210d00092b121e03243035a00099a00097a100960006060000000202a1009a0008fffd000000030000a0009829230148a00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291f0165a00099a00097a100960006060000000202a1009a0008fffd000000010000a000982921016ca00099a00097a0008c34000a0086002a00a63834000a00c4002a00e43834000a00e3002a01033834000a00a5002a00c538a0008da100960006060000000202a1009a0008fffd000000010000a00098291f016ca00099a00097a100960006060000000202a1009a0008fffd000000030000a00098291d016fa00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291b03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a0009734000a0102002a01223834000a0140002a01603834000a0121002a014138a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a100960006060000000202a1009a0008fffd000000070000a00098291f03243030a00099a00097a0008da00083ff}}{\fs20 \par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Figure 10.4: Internal Representation of a P-string\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par In the input file, string data is surrounded by double quotation marks (").  You can continue a string on the next line.  A separating token (for example, a comma) or brace signifies the end of the string data.  A side effect of string continuation is that a sequence of two quotation marks ("") is simply ignored.  For example,\par \par }{\f6\fs18 "Hello ""out "\par "there."\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 is the same string as\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 "Hello out there.";\par }{\fs20 \par To place a quotation mark character within a string, precede the quotation mark with a backslash, like this:\par \par }{\f6\fs18 \\"\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Escape Characters}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Escape Characters\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:strings}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:escape characters}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The backslash character (\\) is provided as an escape character to allow you to insert nonprintable characters in a string.  For example, to include a newline character in a string, use the escape sequence\par \par }{\f6\fs18 \\n\par }{\fs20 \par Valid escape sequences are shown in Table 10.4.\par \par }\pard \qj\li1440\ri1080\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2700\tx4680\tx5940\adjustright {\fs20 Escape \tab \tab Hexadecimal\tab Printable \par Sequence\tab Name\tab Value\tab Equivalent\par }\pard \qj\li1440\keepn\widctlpar\tx2700\tx4680\tx5940\adjustright {\fs20 \\t\tab Tab\tab $09\tab None\par \\b\tab Backspace\tab $08\tab None\par \\r\tab Return\tab $0A\tab None\par \\n\tab Newline\tab $0D\tab None\par \\f\tab Form feed\tab $0C\tab None\par \\v\tab Vertical tab\tab $0B\tab None\par \\?\tab Rub out\tab $7F\tab None\par \\\\\tab Backslash\tab $5C\tab \\\par \\'\tab Single quotation mark\tab $27\tab '\par \\"\tab Double quotation mark\tab $22\tab "\par \par }\pard \qc\fi360\widctlpar\adjustright {\fs20 Table 10.4: Resource Compiler Escape Sequences\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Note to C programmers:  The escape sequence \\n produces an ASCII code of 13 in the output stream, while the \\r sequence produces an ASCII code of 10.  This is backwards from the way the C language uses these two characters, so if you are creating string resources that will be used with stdio functions from the standard C library, be sure and use \\r in your resource file any time you would use \\n in C, and use \\n in your resource file any time you would use \\r in C.\par You can also use octal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 octal}}}{\fs20  escape sequences, hexadecimal escape sequences, decimal escape sequences and binary escape sequences to specify characters that do not have predefined escape equivalents.  The forms are:\par \par }\pard \qj\li360\ri2880\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\tx2880\tx3780\adjustright {\fs18 \tab Number\par Base\tab Form\tab Digits\tab Example\par }\pard \qj\li360\ri2880\keepn\widctlpar\tx1440\tx2880\tx3780\adjustright {\fs20 2}{\fs18 \tab \\0Bbbbbbbbb\tab }{\fs20 8}{\fs18 \tab \\0B01000001\par }{\fs20 8}{\fs18 \tab \\ooo\tab }{\fs20 3}{\fs18 \tab \\101\par }{\fs20 10}{\fs18 \tab \\0Dddd\tab }{\fs20 3}{\fs18 \tab \\0D065\par }{\fs20 16}{\fs18 \tab \\0Xhh\tab }{\fs20 2}{\fs18 \tab \\0X41\par }\pard \qj\li360\ri2880\widctlpar\tx1440\tx2880\tx3780\adjustright {\fs20 16\tab \\$hh\tab 2\tab \\$41\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Since escape sequences are imbedded in strings, and since these sequences can contain more than one character after the \\ character, the number of digits given for each form is an important consideration.  You must always code exactly the number of digits shown, using leading zeros if necessary.  For example, instead of }{\f6\fs18 "\\0x4"}{\fs20 , which only shows a single hexadecimal}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hexadecimal}}}{\fs20  digit, you must use }{\f6\fs18 "0x04"}{\fs20 .  This rule avoids confusion between the numeric escape sequence and any characters that might follow it in the string.\par Here are some examples:\par \par }\pard \qj\fi360\widctlpar\tx2880\adjustright {\f6\fs18 \\077\tab /* 3 octal digits */\par \\0xFF\tab /* \lquote 0x\rquote  plus 2 hex digits */\par \\$F1\\$F2\\$F3\tab /* \lquote $\rquote  plus 2 hex digits */\par \\0d099\tab /* \lquote 0d\rquote  plus 3 decimal digits */\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DeRez}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You can use the DeRez command-line option \endash e to print characters that would otherwise be escaped (characters preceded by a backslash, for example).  Normally, only characters with values between $20 and $7E are printed as Apple\~II}{\fs18 GS}{\fs20  characters.  With this option, however, all characters (except null, newline, tab, backspace, form-feed, vertical tab, and rub out) will be printed as characters, not as escape sequences.\par {\*\bkmkend bk17}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:resource statement}{\rxe bk17}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Using the Resource Compiler}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Using the Resource Compiler\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Resource Compiler is a one-pass compiler; that is, in one pass it resolves preprocessor macros, scans the resource description file, and generates code into a code buffer.  It then writes the code to a resource file.\par The resource compiler is invoked by the shell's compile (or assemble) command, just as you would assemble a program.  This command checks the language type of the source file (in this case, rez) and calls the appropriate compiler or assembler (in this case, the resource compiler).  In short, with the exception of a few resource compiler specific options, you use the same commands to create a resource fork from a resource description file that you would use to assemble a program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Resource Forks and Data Forks}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Resource Forks and Data Forks\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 resource fork}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 data fork}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Files on the Apple\~II}{\fs18 GS}{\fs20  actually have two distinct parts, known as the data fork and the resource fork.  The data fork is what is traditionally a file on other computers; this is where the executable program is stored, where ASCII text is placed for a text file, and so forth.  When the resource compiler writes resources, it writes them to the resource fork of the file.  Writing to the resource fork of an existing file does not change the data fork in any way, and writing to the data fork does not change the resource fork.  The implications of this can speed up the development cycle for your programs.  When you compile a resource description file to create a resource fork for your program, you can and should have the resource compiler save the resource fork to the same file in which the linker places the executable code.  When you make a change to your assembly language source code, you will normally assemble and link the changed program, creating an updated data fork for your program.  If the resource description file has not changed, you do not need to recompile the resource description file.  The same is true in reverse:  if you make a change to the resource description file, you need to recompile it, but you do not need to reassemble or relink your assembly language source file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Rez Options}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Rez Options\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Rez\:options}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The resource compiler supports the e, s, and t flags from the assemble or compile command.  It ignores all other flags.\par The resource compiler supports a number of language dependent options.  These are coded as the name of the language, an equal sign, and the option list, enclosed in parenthesis.  Like the other parameters for the compile command, no spaces are allowed outside of the parenthesis.\par For example, the following compile command uses the options list to specify the -p flag, which turns on progress information.\par \par }{\f6\fs18 compile resources keep=program rez=(-p)\par }{\fs20 \par The resource compiler will accept up to 31 options in the options list.  Any others are ignored.\par Here's a complete list of the options that can be used in this options field:\par \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\f6\fs18 \endash a[ppend]}{\fs20 \tab This option appends the resource compiler\rquote s output to the output file's resource fork, rather than replacing the output file's resource fork.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\adjustright {\f6\fs18 \endash d[efine] }{\i\fs20 macro}{\f6\fs18  [=}{\i\fs20 data }{\f6\fs18 ]}{\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 \tab This option defines the macro variable }{\i\fs20 macro}{\fs20  to have the value }{\i\fs20 data}{\fs20 .  If data is omitted, macro is set to the null string \endash  note that this still means that macro is defined.  Using the \endash d option is the same as writing \par \par }{\f6\fs18 \tab #define macro [ data ]\par }{\fs20 \par \tab at the beginning of the input.\par \par }{\f6\fs18 \endash flag SYSTEM}{\fs20 \tab This option sets the resource file flag for the system.\par \par }{\f6\fs18 \endash flag ROM}{\fs20 \tab This option sets the resource file flag for ROM.\par \par }{\f6\fs18 \endash i }{\i\fs20 pathname(s)}{\fs20 \tab This option searches the following path names for #include files.  It can be specified more than once.  The paths are searched in the order they appear on the command line.  For example,\par \par }\pard \fi-1800\li2160\widctlpar\adjustright {\f6\fs18 \tab \u8230\'c9rez=(\endash i 13:rinclude:stuff.rez\par \tab       \endash i 13:rinclude:newstuff.rez)\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \endash m[odification]}{\fs20 \tab Don\rquote t change the output file\rquote s modification date.  If an error occurs, the output file\rquote s modification date is set, even if you use this option.\par \par }{\f6\fs18 \endash ov}{\fs20 \tab This option overrides the protected bit when replacing resources with the \endash a option.\par \par }{\f6\fs18 \endash p[rogress]}{\fs20 \tab This option writes version and progress information to diagnostic output.\par \par }{\f6\fs18 \endash rd}{\fs20 \tab This option suppresses warning messages if a resource type is redeclared.\par \par }{\f6\fs18 \endash s }{\i\fs20 pathname(s)}{\fs20 \tab This option searches the following path names for resource include files.\par \par }{\f6\fs18 \endash t[ype] }{\i\fs20 typeExpr}{\fs20 \tab This option sets the type of the output load file to }{\i\fs20 filetype}{\fs20 .  You can specify a hexadecimal number, a decimal number, or a mnemonic for the file type.  If the \endash t option is not specified, the file type of the load file is $B3.\par \par }{\f6\fs18 \endash u[ndef] }{\i\fs20 macro}{\fs20 \tab This option undefines the macro variable }{\i\fs20 macro}{\fs20 .  It is the same as writing \par \par }{\f6\fs18 \tab #undef macro \par }{\fs20 \par \tab at the beginning of the input.  It is meaningful to undefine only the preset macro variables.\par \par \tab Note: A space is required between an option and its parameters.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Language Reference Manual\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 11 - Program Symbols\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 11 - Program Symbols\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 11 \endash  }{\v\fs20 Program Symbols}{\v \tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tokens}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 identifiers}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants}}}{\fs20 Modula-2 programs are made up of a series of program symbols called tokens.  Tokens are the words used to write a program.  They consist of identifiers, symbols, and constants.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Identifiers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Identifiers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 identifiers\bxe }}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 functions}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case-sensitivity}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 identifier = letter \{letter | digit \}\par }{\fs20 \par Identifiers are the names that you create to represent variables, types, procedures, and so on.  Identifiers always begin with an alphabetic character.  They are followed by zero or more alphabetic characters and numeric characters.  Modula-2 is a case-sensitive language, which means that the identifiers }{\f6\fs20 Name}{\fs20  and }{\f6\fs20 name}{\fs20  represent different items.\par Identifiers can be any length up to about 200 characters in Modula-2, and all characters are significant.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Reserved Words}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Reserved Words\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 reserved words\bxe }}}{\fs20 Forty-three identifiers are reserved in ORCA/Modula-2.  They can only be used in the context specified by the Modula-2 language.  They can never be redefined.\par A reserved word can be used as a part of another identifier, so long as it is not used alone.  For example, MYPROCEDURE is a legal Modula-2 identifier.\par The reserved words are:\par \par }\pard \qj\widctlpar\tx720\tx2340\tx3960\tx5580\adjustright {\f6\fs18 \tab AND\tab ARRAY\tab BEGIN\tab BY\par \tab CASE\tab CONST\tab DEFINITION\tab DIV\par \tab DO\tab END\tab ELSE\tab ELSIF\par \tab EXIT\tab EXPORT\tab FOR\tab FORWARD\par \tab FROM\tab GSOS\tab IF\tab IMPLEMENTATION\par \tab IMPORT\tab IN\tab LOOP\tab MOD\par \tab MODULE\tab NOT\tab OF\tab OR\par \tab POINTER\tab PROCEDURE\tab QUALIFIED\tab RECORD\par \tab REPEAT\tab RETURN\tab SET\tab THEN\par \tab TO\tab TOOL\tab TYPE\tab UNTIL\par \tab VAR\tab WHILE\tab WITH\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab ORCA/Modula-2 contains three reserved words that are non-standard to the Modula-2 language.  These are }{\f6\fs18 FORWARD}{\fs20 , }{\f6\fs18 TOOL and}{\fs20  }{\f6\fs18 GSOS}{\fs20 .  These should not be used if portability is an issue.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Reserved Symbols}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Reserved Symbols\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 reserved symbols\bxe }}}{\fs20 The reserved symbols are the punctuation marks and mathematical symbols used in Modula-2.  Each reserved symbol must be typed without intervening spaces.  The reserved symbols are:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\tx1440\adjustright {\f6\fs18 \tab +\tab -\tab *\tab /\tab :=\tab &\tab ~\tab =\par \tab #\tab <>\tab <\tab >\tab <=\tab >=\tab (\tab )\par \tab [\tab ]\tab \{\tab \}\tab (*\tab *)\tab ^\tab ,\par \tab .\tab ;\tab :\tab ..\tab |\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Comments are not normally considered reserved symbols, nor are the characters that delimit comments.  See the section on separators, below, for a discussion of comment characters.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Constants}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Constants\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\bxe }}}{\fs20 The last class of token is the constant.  There are two kinds of constants that can be entered in a Modula-2 program:  numbers and strings.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \fi-1800\li2160\widctlpar\tx1800\adjustright {\f6\fs18 number\tab =\tab integer | real\par integer\tab =\tab digit \{digit\} ["D"] | octalDigit \{octalDigit\} ("B"|"C") | digit \{hexDigit\} "H"\par real\tab =\tab digit \{digit\} "." \{digit\} [ScaleFactor | "E" | "D"]\par ScaleFactor\tab =\tab ("E"|"D") ["+"|"-"] digit \{digit\}\par hexDigit\tab =\tab digit | "A" | "B" | "C" | "D" | "E" | "F"\par digit\tab =\tab octalDigit | "8" | "9"\par octalDigit\tab =\tab "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"\par }\pard \qj\keep\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keep\widctlpar\adjustright {\fs20 Numbers come in several forms, those being Integers, Cardinals and Reals:\par }\pard \qj\widctlpar\adjustright {\fs18 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Integers}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Integers\tcl3}}}{\b \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: integer\bxe }}}{\fs20 Integer numbers are signed numbers, and come in two sizes:  two-byte integers and four-byte integers.  A complete discussion of integers and their sizes can be found in Chapter 12.  The important point here is that two-byte integers must be in the range -32767..32767, while four-byte integers must be in the range: -2147483647..2147483647.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: hexadecimal\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: octal\bxe }}}{\fs20 Integers may be given in either decimal (base 10), octal (base 8), or hexadecimal (base 16).  Hexadecimal numbers use the letters A through F for the hexadecimal digits equivalent to the decimal numbers 10 through 15.  Integers must start with a numeric digit, so hexadecimal constants that would normal start with an alphanumeric digit must start with a leading 0, instead.  Hexadecimal numbers are followed by the letter H, as in\par \par }{\f6\fs18 CONST\par    return = 0DH;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 Octal numbers are followed by the letter B, as in\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\f6\fs18 CONST\par    return = 13H;\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: character\bxe }}}{\fs20 An integer can also be followed by the letter C.  In this case, it is taken to be a character constant, rather than an integer type.  The character value must be specified in octal, as in\par \par }{\f6\fs18 CONST\par    return = 13C;\par }{\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab Four-byte integers are an extension to standard Modula-2.  If you wish to specify a constant as being a four byte integer, you should use the suffix "L".\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Cardinals}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Cardinals\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: cardinal}}}{\fs20 Cardinal numbers are unsigned numbers, and come in two sizes:  two-byte cardinals and four-byte cardinals.  A complete discussion of cardinals and their sizes can be found in Chapter 12.  The important point here is that two-byte cardinals must be in the range 0..65535, while four-byte cardinals can be in the range 0..4294967295.\par \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab Four-byte cardinals are an extension to standard Modula-2.  If you wish to specify a constant as being a four byte cardinal, you should use the suffix "L".\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Reals}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Reals\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Real numbers consist of an integer followed by a decimal point, a fraction part, a L or E, and a signed integer.  The decimal point and fraction part can be left out if the exponent is coded, or the exponent can be left out if there is a fractional part.  One of the two must appear to distinguish the real constant from a non-real.\par These rules mean that the following real constants are not legal.\par \par }\pard \qj\widctlpar\adjustright {\f6\fs18 \tab 1.\tab (*fraction part is missing*)\par \tab .3\tab (*integer part is missing*)\par \tab 8.4E\tab (*missing exponent*)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 \par }{\fs20 Some legal real constants are:\par \par }\pard \qj\widctlpar\tx720\tx2160\tx3600\adjustright {\f6\fs18 \tab 3276.8E10\tab 1.0\tab 0.3\par \tab 3.14159\tab 1E-10\tab 14.5L+16\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Strings}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Strings\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 string = "'" \{character\} "'" | '"' \{character\} '"'\par }{\fs20 \par String constants are sequences of any keyboard characters surrounded by either single quote marks or double quote marks.  The string may not contain a quote mark the same as that used to delimit the string.  If you want a string to contain a single quote, then enclose the string in double quotes.\par The following are all legal string constants:\par \par }\pard \qj\li360\ri1440\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3600\adjustright {\fs20 String constant\tab String value\par }\pard \qj\li360\ri1440\widctlpar\tx3600\adjustright {\f6\fs18 ' '\tab }{\fs20 < blank >}{\f6\fs18 \par "'"\tab '\par 'nothing much'\tab nothing much\par "doesn't matter"\tab doesn't matter\par 'John said "hi" to Jill'\tab John said "hi" to Jill\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Separators}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Separators\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 separators\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 comments}}}{\fs20 Separators consist of blanks, the end of a line, and comments.  Separators can be used between any two tokens, or before the first token of a program.  All separators are completely interchangeable.  You can type a Modula-2 program on one line (if it is short enough), or place every token on a new line.  The program will execute the same way.\par Separators must be used between any two adjacent labels, numbers, reserved words or identifiers.\par Comments begin with a (* symbol and end with a *) symbol.  The characters between the comment characters can be any keyboard characters except *).  Comments are for your convenience only - replacing a comment with a space will have no effect on the finished program.\par Unlike any token in the Modula-2 language, comments can be spread over more than one source line.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 12 - Basic Data Types\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 12 - Basic Data Types\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 12 \endash  Basic Data Types\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\fs20 Modula-2 has a rich variety of data types, many of which are defined when a program is written.  This chapter describes those Modula-2 data types which are built into the language.  The next chapter covers derived and defined data types.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 data formats}}}{\fs20 Some of the information in this chapter deals with the way that information is stored internally in the program.  This information is provided for very advanced programmers who need to write assembly language subroutines that will deal with Modula-2 data, or who need to do strange and dangerous tricks with the data to work with the machine at the hardware level.  You do not need to understand this information to use ORCA/Modula-2 for normal Modula-2 programming.  If it does not make sense to you, or if you will not be using the information, simply ignore it.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Integers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Integers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Modula-2 supports two kinds of integer; signed integers and unsigned integers.  ORCA/Modula-2 supports two sizes for each kind of integer.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 integers}}}{\fs20 Integers are whole numbers.  Valid values for signed integers range from -32767 to 32767.  Each integer variable requires two bytes of storage.  In this implementation of ORCA/Modula-2, integers are stored in two's complement form with the least significant byte first.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 cardinals}}}{\fs20 Cardinals are unsigned positive integers.  The valid range for cardinals is 0 to 65535.  Each cardinal requires two bytes of storage.  In ORCA/Modula-2, cardinals are stored as binary numbers with the least significant byte first.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 longint\:see long integers}{\txe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 long integers}}}{\fs20 ORCA/Modula-2 supports an extended integer data type, called LONGINT.  Long integer values require four bytes of storage.  The can range from -2147483647 to 2147483647.  Long integer values can generally be used anywhere that an integer value is allowed.\par ORCA/Modula-2 also supports a long cardinal data type, LONGCARD.  The range for long cardinal integers is 0 to 4294967295.  Like long integers, long cardinals require four bytes of memory.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Reals}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Reals\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 real numbers\bxe }}}{\fs20 Real numbers are a limited precision, limited range subset of real numbers from mathematics.  Real numbers range in absolute value from 1.2e-38 to 3.4e+38.  They can, of course, have either a positive or a negative sign.  Real numbers are accurate to seven significant figures.\par Internally, real numbers are represented using the format specified by the IEEE floating-point standard}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IEEE floating-point standard}}}{\fs20 .  Each real number requires four bytes of storage.  The exact format will not be specified here, since it has no real bearing on programs written entirely in Modula-2 - for details, see the IEEE floating-point standard, the SANE reference manual, or the ORCA/M assembly language reference manual.\par ORCA/Modula-2 also provides double-precision reals, called LONGREAL, which is represented internally using the IEEE floating-point format.  Each double-precision}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 double-precision}}}{\fs20  number requires eight bytes of storage.  Double-precision numbers range in absolute value from 2.3e-308 to 1.7e+308, and can be either positive or negative.  Double values are accurate to fifteen significant digits.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Sets}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Sets\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets\bxe }}}{\fs20 A set is essentially a list of the items from a given base type that are contained in a given set variable.  For example, a set can be defined as a }{\f6\fs18 set of 1..10}{\fs20 , in which case the set variable can hold integers in [1..10].  Sets can then be manipulated using a special group of set operations.\par The base type of a set must be a }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 scalar.  Sets in ORCA/Modula-2 can hold up to 2048 elements.  The apparent range of the scalar variables must be in [0..2047].\par Internally, sets are actually variable length.  When the set is declared, the largest value that can be an element of the set determines the size of the set variable.  Eight set elements are held in each byte, counting from zero, so if }{\f6\fs18 large}{\fs20  is the value of the largest set element, then the set is\par }\pard \qj\widctlpar\adjustright {\fs20 \par }{\f6\fs18 \tab large mod 8 + 1\par }{\fs20 \par bytes long.  Within each byte, the sets are assigned to bits counting from the least significant bit position, so that set element number 0 will be the least significant bit of the first byte of a set variable, and set element number 7 will be the most significant bit of the same byte.  A bit is set to one if the value that it corresponds to is in the set, and zero if it is not.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 For example, the set constant [0,3..6,10] would require two bytes of storage.  Recalling that two-byte values on the Apple\~II}{\scaps\fs20 gs}{\fs20  are stored least significant byte first, the set's binary representation is\par \par }\pard \qj\widctlpar\adjustright {\fs20 \tab 01111001  00000100\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Booleans}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Booleans\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 booleans}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 true}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 false}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: boolean}}}{\fs20 Boolean variables take on the value of true or false.  }{\f6\fs18 TRUE}{\fs20  and }{\f6\fs18 FALSE}{\fs20  are, in fact, predefined boolean constants.\par Boolean variables require two bytes of storage each.  The ordinal value of a true boolean variable is one, while the ordinal value of a false boolean variable is zero.\par Boolean values which are stored in a packed array}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 packed arrays}}}{\fs20  only require one byte of storage each.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Characters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Characters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: characters}}}{\fs20 Characters are members of the ASCII character set.  Their ordinal values range from 0 to 127.\par Modula-2 requires that the ordinal values of the digits be sequential.  That is, for every character in ['0','1','2','3','4','5','6','7','8','9'], adding one to the ordinal value of the digit must give the ordinal value of the next higher digit, and subtracting one must give the ordinal value of the next lower digit.  Modula-2 does not require the same to be true for the alphabetic characters, although it is in fact true in this implementation.  If portability to computers that do not use the ASCII character set is an issue, your program should not depend on the ordinal values of the alphabetic characters being sequential.  They are, however, required to be properly ordered, }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ord function}}}{\fs20 so }{\f6\fs18 ord('z') > ord('a')}{\fs20 .\par A character variable requires one byte of storage.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pointers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Pointers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers\bxe }}}{\fs20 Each pointer requires four bytes of storage.  It points to a memory location in the heap.  The value that the pointer points to is stored in the byte whose address is given by the pointer, and in the bytes that follow if the value requires more that one byte of storage.  Pointers are stored least significant byte first.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constants\: pointers}}}{\fs20 Modula-2 has a predefined pointer constant called NIL}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NIL}}}{\fs20 .  The ordinal value for NIL is 0 in ORCA/Modula-2.  This fact is especially useful when dealing with the toolbox, which frequently allows a pointer value of zero when passing a pointer value.  In all such cases, NIL may be used.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 13 - Derived Data Types\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 13 - Derived Data Types\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 13 \endash  Derived Data Types\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter deals with data types that are derived from those discussed in the last chapter.  All of the data types discussed here are represented internally as one or more of the types from Chapter 12.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Enumerations}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Enumerations\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 enumerations\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20 Modula-2 allows the declaration of a list of constants that become ordered members of a new data type.  For example, you could define a new type\par \par }{\f6\fs18 color = (red,orange,yellow,green,blue,violet)\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 as the colors of a rainbow.  Variables can be defined which have the type }{\f6\fs20 color}{\fs20 .  Certain operations can also be performed.  The operations are limited to comparisons, assignment, and using the variable (or one of the constants, such as }{\f6\fs20 red}{\fs20 ) as the argument to the }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INC}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DEC}}}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORD}}}{\fs20 INC, DEC, or ORD function procedures.  Enumerated variables can also be passed as arguments to user-defined procedures, and can be the return type of a user-defined function procedure.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Enumerations are ordered.  In the above list, }{\f6\fs20 red}{\fs20  < }{\f6\fs20 orange}{\fs20 , for example.  The ordinal value of the first name in the list is zero, with the ordinal value for each succeeding item increasing by one.  Thus, }{\f6\fs20 ORD(violet) = 5}{\fs20 .  Variables are represented internally as integers.  This means that an enumeration can have up to 32768 entries.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Subranges}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Subranges\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 subranges\bxe }}}{\fs20 Subranges specify a limited, sequential range of a scalar data type.  The scalar data types include integers, cardinals, characters, booleans, enumerations, and other subranges.  Whenever a value is assigned to a variable that is declared as a subrange, the value is checked to ensure that it is in the range specified.  If it is not, an error will be flagged.\par The error is occasionally caught during the compile or code generation phase, but in general results in a run-time error.  The internal representation and storage requirements for a subrange match those of the base type that the variable is a subrange of.\par \par }{\f6\fs18 warmcolors = [red..yellow];\par }{\fs20 \par Checking for subrange exceeded errors takes a substantial amount of code and time.  For that reason, checking for this type of error is optional at run-time.  The }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RangeCheck directive}}}{\fs20 (*}{\f6\fs20 $RangeCheck*)}{\fs20  directive is used to turn this checking on or off.  Range checking defaults to off.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Arrays}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Arrays\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays\: size limits}}}{\fs20 Arrays are numbered groupings of similar data elements.  You can define an array of any data type, including a derived data type.  Each array has a subscript type, which is the type of variable used as the index to select from the various array elements.  The subscript type can be any scalar type.  The array also has a data type, which is the type of each element of the array.  This type can be another array, which is how Modula-2 deals with multiply subscripted arrays.  Arrays are indexed using integers or cardinals, so the largest number of elements an array can have is 65535 (with subscripts ranging from -32767 to 32767, or 0 to 65535).  The only limit on the total amount of space occupied by all arrays is the amount of memory you have in your computer.\par Note that no single array may exceed 64K bytes in size.\par Arrays are stored in memory with the rightmost index incrementing the fastest.  For example, for the array\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 matrix: ARRAY [1..3],[1..3] }{\caps\f6\fs18 of}{\f6\fs18  REAL;\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the elements would appear in memory in this order:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\li720\widctlpar\adjustright {\f6\fs18 matrix[1,1]\par matrix[1,2]\par matrix[1,3]\par matrix[2,1]\par matrix[2,2]\par matrix[2,3]\par matrix[3,1]\par matrix[3,2]\par matrix[3,3]\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The memory requirement for an array is the product of the number of elements in the subscript and the size of an array element.  In the above example, matrix would require 3*3*4 bytes of memory. \par Array elements are byte aligned.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Strings}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Strings\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings\bxe }}}{\fs20 In Modula-2, strings are a particular kind of array that gets special handling.  The general form for a string variable is\par \par }{\f6\fs20 ARRAY [0..n] OF CHAR\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 where }{\f6\fs20 n}{\fs20  is the number of characters minus 1.  Strings are terminated by either a null character (0C), or by the physical length of the string.  String constants are always terminated by a null character.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Records}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Records\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records\bxe }}}{\fs20 Records are collections of unlike data elements.  Like arrays, records appear in memory as a series of primitive data types.\par For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 aItem =\par   RECORD\par     itemType:   (car, house, land, cow);\par     name:       aName;\par     price:      REAL;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   END;\par }{\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records\: variant}}}{\fs20 Modula-2 allows the definition of a variant record.  A variant record is a record that can contain different kinds of data at different points during the program's execution.  In declaring a variant record, it is possible to declare a "tag" variable which may be used at run time to determine which variant of the type is in use.  This tag variable, and thus the variant type, maybe any scalar or enumerated type.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 v:  RECORD\par       CASE realvar: BOOLEAN OF\par         TRUE:  r: REAL;\par       | FALSE: i: INTEGER;\par       END;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18     END;\par }{\f6\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tag fields}}}{\fs20 When a variant record is defined, it is legal to omit the tag variable.  For example, if you will not be setting or reading the variable }{\f6\fs18 realvar}{\fs20  from the record shown earlier, the variable can be left out.  This changes the internal format of the record:  since the variable is not set or used, no space is reserved for it.  Without a tag variable, the variant record looks like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 v:  RECORD\par       CASE :BOOLEAN OF\par         TRUE:  r: REAL;\par       | FALSE: i: INTEGER;\par       END;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18     END;\par }{\f6\fs20 \par }{\fs20 Instead of six bytes of storage, this record will require four bytes.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records\: size limits}}}{\fs20 Under ORCA/Modula-2, each record must use less than 65536 bytes of memory.  The only limit on the total amount of memory used by all records is the available memory in your computer.\par \par \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 14 - The Module\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 14 - The Module\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 14 \endash  The Module\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modules\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program modules}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 definition modules}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 implementation modules}}}{\fs20 As the name suggests, a Modula-2 program is broken down into one or more modules.  There are three types of modules: program, definition, and implementation modules.  Program modules contain the source for the main program.  External modules are formed by matched pairs of definition and implementation modules.\par By convention, program and implementation modules use the extension .MOD.  Definition modules use the extension .DEF.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Program Modules}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Program Modules\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 program modules\bxe }}}{\fs20 A program module is the main module of a program.  A program consists of all the modules that are referred to (directly or indirectly) by the program module.  Execution of a program begins at the first statement of the module body of the program module.  This, however, doesn't commence until all imported modules are initialized by calls to their module bodies.\par A program module takes the form:\par \par }\pard \fi-2160\li2520\keepn\widctlpar\tx2160\adjustright {\f6\fs18 ProgramModule\tab =\tab MODULE identifier [priority] ";" \{import\} block identifier "."\par }\pard \fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs18 priority\tab =\tab "[" ConstExpression "]"\par import\tab =\tab [FROM identifier] IMPORT IdentList ";"\par IdentList\tab =\tab identifier \{"," identifier\}\par block\tab =\tab \{declaration\} [BEGIN StatementSequence] END\par }\pard \fi-2160\li2520\keepn\widctlpar\tx2160\adjustright {\f6\fs18 declaration\tab =\tab CONST \{ConstantDeclaration ";"\}\par \tab \tab | TYPE \{TypeDeclaration ";"\}\par \tab \tab | VAR \{VariableDeclaration ";"\}\par \tab \tab | ProcedureDeclaration ";"\par }\pard \fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs18 \tab \tab | ModuleDeclaration ";"\par }\pard \qj\fi360\li2520\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab ORCA/Modula-2 does not implement the priority assignment, however it does recognize the use of it for compatibility reasons.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Definition Modules}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Definition Modules\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 definition modules\bxe }}}{\fs20 A Definition module provides an external interface to an implementation module.  This enables the programmer to hide all those details of the actual implementation in the implementation module, making public in the definition module only those details that are necessary.  It also means that the implementation of a module may be changed without affecting the rest of the program.\par A definition module takes the form:\par \par }\pard \qj\fi-2160\li2520\keepn\widctlpar\tx2160\adjustright {\f6\fs18 DefinitionModule\tab =\tab DEFINITION MODULE identifier ";" \{import\} [export] \{definition\}  END identifier "."\par }\pard \qj\fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs18 import\tab =\tab [FROM identifier] IMPORT IdentList ";"\par export\tab =\tab EXPORT [QUALIFIED] IdentList ";"\par IdentList\tab =\tab identifier \{"," identifier\}\par }\pard \qj\fi-2160\li2520\keepn\widctlpar\tx2160\adjustright {\f6\fs18 definition\tab =\tab CONST \{ConstantDeclaration ";"\}\par \tab \tab | TYPE \{identifier ["=" type] ";"\}\par \tab \tab | VAR \{VariableDeclaration ";"\}\par }\pard \qj\fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs18 \tab \tab | ProcedureHeading ";"\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Implementation Modules}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Implementation Modules\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 implementation modules\bxe }}}{\fs20 The implementation module provides the actual implementation of a module that is specified in a definition module.  They are similar in structure to a program module excepting that the module body does not form the mainline of the program.\par It is an error to repeat the declaration of any constants, types, or variables declared in the definition module in the implementation module.  Every procedure that was declared in the definition module must, however, be declared and completed in the implementation module.\par An implementation module takes the form:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs18 ModuleDeclaration\tab =\tab IMPLEMENTATION MODULE identifier [priority] ";" \{import\} [export] block identifier "."\par priority\tab =\tab "[" ConstExpression "]"\par import\tab =\tab [FROM identifier] IMPORT IdentList ";"\par export\tab =\tab EXPORT [QUALIFIED] IdentList ";"\par IdentList\tab =\tab identifier \{"," identifier\}\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Like program modules, implementation modules consist of declarations of constants, types, variables and procedures, but unlike programs, an implementation module cannot be executed.  Instead, they are used to create libraries, or to break large programs up into smaller, modular collections of similar procedures.  While an implementation module cannot be executed, it is certainly possible to create a program which executes procedures from the module.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Example Modules}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Example Modules\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (* The smallest legal Modula-2 program*)\par MODULE s; BEGIN END s.\par \par (*the classic first program*)\par MODULE HelloEarth;\par FROM InOut IMPORT WriteString, WriteLn;\par BEGIN\par   WriteString('Hello, Earth...');\par   WriteLn;\par END HelloEarth.\par \par DEFINITION MODULE MyLibrary;\par PROCEDURE Add2(x,y: CARDINAL): CARDINAL;\par END MyLibrary.\par \par IMPLEMENTATION MODULE MyLibrary;\par PROCEDURE Add2(x,y: CARDINAL): CARDINAL;\par BEGIN\par   RETURN x + y;\par END Add2;\par END MyLibrary.\par \par MODULE MyProgram;\par FROM InOut IMPORT WriteCard, WriteLn;\par FROM MyLibrary IMPORT Add2;\par BEGIN\par   WriteCard(Add2(5, 4), 5);\par   WriteLn;\par END MyProgram.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 15 - Local Modules\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 15 - Local Modules\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 15 \endash  Local Modules\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 modules}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 local modules}}}{\fs20 Modula-2 provides the ability to "nest" modules in a manner similar to that of procedure nesting.  Like individual procedures within a module, Local modules are not separately compileable.\par Since each module introduces a new scope of visibility, unless it explicitly exports its objects, they remain hidden from any external modules.  This is the only purpose of the local module.\par A local module takes the form:\par \par }\pard \fi-2340\li2700\widctlpar\tx2340\adjustright {\f6\fs18 ModuleDeclaration\tab =\tab MODULE identifier [priority] ";" \{import\} [export] block identifier "."\par priority\tab =\tab "[" ConstExpression "]"\par import\tab =\tab IMPORT IdentList ";"\par export\tab =\tab EXPORT [QUALIFIED] IdentList ";"\par IdentList\tab =\tab identifier \{"," identifier\}\par }\pard \qj\fi-2340\li2700\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A local module may "see" objects that are declared externally to it, and may declare its own objects in a similar manner to a procedure; however, two new rules apply:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab For modules, an object may be made externally visible by placing it in the local module's export list.  This is not possible with procedures.\par 2.\tab An object visible in the surrounding scope may be made visible within the local module by placing it in the local modules import list.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par To illustrate this:\par \par }\pard \qj\li360\widctlpar\adjustright {\f6\fs18 MODULE Top;\par FROM InOut IMPORT WriteLn;\par VAR\par   a: INTEGER;\par (*\par   Visible:\par     a, b, c, WriteLn\par *)\par   MODULE Middle;\par   IMPORT a, WriteLn;\par   EXPORT b, c;\par   VAR\par     b: CARDINAL;\par   (*\par     Visible:\par       a, b, c, WriteLn\par   *)\par     MODULE Bottom;\par     IMPORT a, WriteLn;\par     EXPORT c;\par     VAR\par       c: LONGINT;\par     (*\par       Visible:\par         a, c, WriteLn\par     *)\par     BEGIN\par     END Bottom;\par   BEGIN\par   END Middle;\par BEGIN\par END Top.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 16 - The Declaration Section\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 16 - The Declaration Section\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 16 \endash  The Declaration Section\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 declaration section}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 block}}}{\v\fs20 \par }{\fs20 The first part of a block is the declaration section.  It is here that the variables, constants, types and procedures that are used by the block are defined.  This chapter discusses all of these except for the declaration of procedures, which is discussed in the next chapter.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Constants}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Constants\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-2520\li2880\widctlpar\tx2520\adjustright {\pard\plain \qj\fi-2520\li2880\widctlpar\tx2520\adjustright \v\f6\fs18\cgrid {\xe {\v\f6\fs18 }{\v\f6\fs18 constants\bxe }}}{\v\f6\fs18 \par }\pard \fi-2520\li2880\widctlpar\tx2520\adjustright {\f6\fs18 ConstantDeclaration\tab =\tab identifier "=" ConstExpression\par ConstExpression\tab =\tab expression\par expression\tab =\tab SimpleExpression [relation SimpleExpression]\par SimpleExpression\tab =\tab ["+" | "-"] term \{AddOperator term\}\par AddOperator\tab =\tab "+" | "-" | OR\par term\tab =\tab factor \{MulOperator factor\}\par MulOperator\tab =\tab "*" | "/" | DIV | MOD | AND | "&"\par }\pard \fi-2520\li2880\keepn\widctlpar\tx2520\adjustright {\f6\fs18 factor\tab =\tab number\par \tab \tab | string\par \tab \tab | set\par \tab \tab | designator [ActualParameters]\par \tab \tab | "(" expression ")"\par \tab \tab | NOT factor\par }\pard \fi-2520\li2880\widctlpar\tx2520\adjustright {\f6\fs18 \tab \tab | "~" factor\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The constant part of the declaration is used to assign names to values used in the statement part of the block.  Constants can be defined for any scalar}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scalars}}}{\fs20  type, including reals, integers, cardinals, characters, booleans, subranges, enumerations and strings.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 constant expressions}}}{\fs20 With numerical constants, it is also possible to define their value as a constant expression.  As long as each of the components of the expression is a constant, the expression can be assigned to the constant.  Legal constants are:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 five = 5;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 six  = five+1;\par }\pard \qj\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When defining numerical constants that you wish to be LONGINT, LONGCARD or LONGREAL, be sure to use the "D" suffix to force the compiler to treat the constant as such.\par Internally, integer constants are stored in two bytes if the specified value is within the range -maxint to +maxint.  An integer constant which is less than -maxint or greater than +maxint will be stored in four bytes.  An integer constant which is not within the range -maxint4 to +maxint4 will be flagged as an error by the compiler.  All real constants are represented internally as either REAL or LONGREAL values depending upon the value.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 CONST\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   one            = 1;\par   minusone       = -one;\par   pi             = +3.141593;\par   filename       = 'myfile';\par   failing        = 'F';\par   skyIsFalling   = }{\caps\f6\fs18 false}{\f6\fs18 ;\par   bestColor      = red;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Types}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Types\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types\bxe }}}{\v\fs20 \par }\pard \fi-1880\li2240\widctlpar\tx1980\adjustright {\f6\fs18 TypeDeclaration\tab =\tab identifier "=" type\par }\pard \fi-1880\li2240\keepn\widctlpar\tx1980\adjustright {\f6\fs18 type\tab =\tab SimpleType\par \tab \tab | ArrayType\par \tab \tab | RecordType\par \tab \tab | SetType\par \tab \tab | PointerType\par }\pard \fi-1880\li2240\widctlpar\tx1980\adjustright {\f6\fs18 \tab \tab | ProcedureType\par }\pard \fi-1880\li2240\keepn\widctlpar\tx1980\adjustright {\f6\fs18 SimpleType\tab =\tab qualident\par \tab \tab | enumeration\par }\pard \fi-1880\li2240\widctlpar\tx1980\adjustright {\f6\fs18 \tab \tab | SubrangeType\par qualident\tab =\tab identifier \{"." identifier\}\par enumeration\tab =\tab "(" IdentList ")"\par SubrangeType\tab =\tab [qualident] "[" ConstExpression ".." ConstExpression "]"\par ArrayType\tab =\tab ARRAY SimpleType \{"," SimpleType\} OF type\par RecordType\tab =\tab RECORD FieldListSequence END\par SetType\tab =\tab SET OF SimpleType\par PointerType\tab =\tab POINTER TO type\par ProcedureType\tab =\tab PROCEDURE [FormalTypeList]\par FormalTypeList\tab =\tab "(" [[VAR] FormalType \{"," [VAR] FormalType\}] ")"\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi260\widctlpar\adjustright {\fs20 The type section allows you to define a type that can be used later to declare variables or other types.   An identifier used as a type can be any of the types provided by ORCA/Modula-2, or it can be a user-defined type.  The predefined basic types in ORCA/Modula-2 include }{\caps\fs20 integer, longint}{\fs20 , CARDINAL, LONGCARD, }{\caps\fs20 char, real}{\fs20 , LONGREAL, and }{\caps\fs20 bitset}{\fs20 .  The predefined derived types in ORCA/Modula-2 are enumerations, subranges, sets, arrays, and records.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }{\caps\f6\fs18 type}{\f6\fs18 \par }\pard \qj\widctlpar\adjustright {\f6\fs18   name = ARRAY [0..19] OF CHAR;\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18   House =\par     RECORD\par       bedrooms:     }{\caps\f6\fs18 integer}{\f6\fs18 ;\par       baths:        }{\caps\f6\fs18 integer}{\f6\fs18 ;\par       den:          BOOLEAN;\par       kitchen:      BOOLEAN;\par       diningRoom:   }{\caps\f6\fs18 boolean}{\f6\fs18 ;\par       price: \tab   }{\caps\f6\fs18 real}{\f6\fs18 ;\par }\pard \qj\widctlpar\adjustright {\f6\fs18     }{\caps\f6\fs18 end}{\f6\fs18 ;\par \par   matrix          = }{\caps\f6\fs18 array }{\f6\fs18 [1..10],[1..10] }{\caps\f6\fs18 of real}{\f6\fs18 ;\par   address         = }{\caps\f6\fs18 integer}{\f6\fs18 ;\par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs18   phoneNumber     =\par     RECORD\par       areaCode:     [0..999];\par       prefix:       [0..999];\par       number:       [0..9999];\par }\pard \qj\widctlpar\adjustright {\f6\fs18     }{\caps\f6\fs18 end}{\f6\fs18 ;\par   car             = (Ford, GM, Iococa);\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Variables}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Variables\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 variables\bxe }}}{\v\fs20 \par }\pard \qj\fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs18 VariableDeclaration\tab =\tab IdentList ":" type\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The variable part is used to declare the variables which are used in a block.  The variables are not initialized in any way - to be sure of the value they contain, you must assign them a value.  Variables exist for the length of the activation of the block.  This means that if you call a procedure once and assign values to variables declared within that procedure, the variables will not have the same values originally assigned when the procedure is called a second time.\par \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\caps\f6\fs18 var}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   i,j,k:        }{\caps\f6\fs18 integer}{\f6\fs18 ;\par   myCar:        car;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18   myResidence:\par     }{\caps\f6\fs18 record}{\f6\fs18 \par       myhouse:  House;\par       myphone:  phoneNumber;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18     END;\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 17 - Procedures\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 17 - Procedures\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 17 \endash  Procedures\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \fi-2520\li2880\keepn\widctlpar\tx2520\adjustright {\f6\fs18 ProcedureDeclaration\tab =\tab ProcedureHeading ";" (block identifier\par \tab \tab | FORWARD\par \tab \tab | TOOL integer\par }\pard \fi-2520\li2880\widctlpar\tx2520\adjustright {\f6\fs18 \tab \tab | GSOS integer)\par ProcedureHeading\tab =\tab PROCEDURE identifier [FormalParameters]\par FormalParameters\tab =\tab "(" [FPSection \{";" FPSection\}] ")" [":" qualident]\par FPSection\tab =\tab [VAR] IdentList ":" FormalType\par FormalType\tab =\tab [ARRAY OF] qualident\par block\tab =\tab \{declaration\} [BEGIN StatementSequence] END\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures\bxe }}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scope}}}{\fs20 Procedures are defined in the header part of a block, right after variables.  Procedure declarations can be mixed in any order you choose.  As seen from the EBNF chart above, each procedure has a name, an optional parameter list, and its own declaration and statement part.  The declaration part can contain more variables, constants, types, labels and procedures.  Any identifiers declared here are available only within the local block}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 block}}}{\fs20 .  Identifiers declared before the procedure are available within the procedure, so long as the identifier is not redeclared.  In that case, the local definition has precedence.\par For example, consider this procedure:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\caps\f6\fs18 procedure}{\f6\fs18  nest;\par }{\caps\f6\fs18 var}{\f6\fs18 \par   a,b: }{\caps\f6\fs18 integer}{\f6\fs18 ;\par \par }{\caps\f6\fs18   procedure}{\f6\fs18  inside;\par }{\caps\f6\fs18   var}{\f6\fs18 \par     b,c: }{\caps\f6\fs18 integer}{\f6\fs18 ;\par   B}{\caps\f6\fs18 egin}{\f6\fs18 \par     (*code*)\par }{\caps\f6\fs18   end }{\f6\fs18 inside;\par }{\caps\f6\fs18 begin}{\f6\fs18 \par   (*code*)\par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 end }{\f6\fs18 nest;\par }{\f6\fs20 \par }{\fs20 The variable }{\f6\fs18 a}{\fs20  can be accessed from the statement part of both procedures.  Since }{\f6\fs18 c}{\fs20  is declared in }{\f6\fs18 inside}{\fs20 , it can only be accessed from there - it is not available from the procedure }{\f6\fs18 nest}{\fs20 .  Finally, }{\f6\fs18 b}{\fs20  is declared in both procedures, so both procedures can use a variable called}{\f6\fs20  }{\f6\fs18 b}{\fs20 , but it will not be the same variable - the variable defined in }{\f6\fs18 nest}{\fs20  is different from the one defined in }{\f6\fs18 inside}{\fs20 .\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Value Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Value Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk18}Modula-2 is capable of passing variables by value or by reference.  When a variable is passed by value, the parameter is declared as if it were in a VAR declaration part of a header.  The variable is then available within the procedure as if it were declared locally to that procedure.  Any changes made to the variable in the procedure have no effect on the value passed when the procedure was called.\par For example, the following function procedure can be used to make sure a character is uppercase only.  Note that this function procedure assumes that we are using the ASCII character set.  This is true for ORCA/Modula-2, but may not be true for Modula-2 compilers on other computers.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Upper(ch: }{\caps\f6\fs18 char}{\f6\fs18 ): CHAR;\par }{\caps\f6\fs18 begin}{\f6\fs18 \par }{\caps\f6\fs18   if}{\f6\fs18  (ch >= 'a') }{\caps\f6\fs18 and}{\f6\fs18  (ch <= 'z') }{\caps\f6\fs18 then}{\f6\fs18 \par     ch := }{\caps\f6\fs18 chr}{\f6\fs18 (}{\caps\f6\fs18 ord}{\f6\fs18 (ch) - }{\caps\f6\fs18 ord}{\f6\fs18 ('a') + }{\caps\f6\fs18 ord}{\f6\fs18 ('A'));\par   END;\par \par   RETURN ch;\par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 end }{\f6\fs18 Upper;\par }{\f6\fs20 \par }{\fs20 Despite the fact that the variable }{\f6\fs18 ch}{\fs20  is changed within the function procedure, it does not change the value of the variable which corresponds to }{\f6\fs18 ch}{\fs20  in the calling procedure.  If the above function is called like this:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\caps\f6\fs18 for}{\f6\fs18  i := 1 }{\caps\f6\fs18 to}{\f6\fs18  linelen }{\caps\f6\fs18 do}{\f6\fs18 \par   Write(upper(line[i]));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 then the values of the characters in }{\f6\fs20 line}{\fs20  remain unchanged.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Variable Parameters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Variable Parameters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The only difference between the definition of a value parameter and a VAR parameter is that the VAR parameter is prefixed by the reserved word VAR. Rewriting our function procedure from above by using a VAR parameter: \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Upper(VAR ch: CHAR): CHAR;\par }{\caps\f6\fs18 begin}{\f6\fs18 \par   }{\caps\f6\fs18 if}{\f6\fs18  (ch >= 'a') }{\caps\f6\fs18 and}{\f6\fs18  (ch <= 'z') }{\caps\f6\fs18 then}{\f6\fs18 \par     ch := C}{\caps\f6\fs18 hr(ord}{\f6\fs18 (ch) - }{\caps\f6\fs18 ord}{\f6\fs18 ('a') + }{\caps\f6\fs18 ord}{\f6\fs18 ('A')); \par   END;\par \par   RETURN ch;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Upper;\par }{\f6\fs20 \par }{\fs20 If we called }{\f6\fs18 Upper}{\fs20  the same way we did before, the characters in }{\f6\fs18 line}{\fs20  would be shifted to uppercase.  Since VAR parameters must be objects whose values can be changed, you must pass a variable, not the result of an expression, or a constant, when using a VAR parameter.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Procedure Types}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Procedure Types\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 types}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedure types}}}{\fs20 Modula-2 allows procedures to be declared as types.  This in turn allows them to be declared as variables and manipulated as such.  This also leads to the possibility of passing procedures as parameters.\par A procedure type declaration specifies the number and type of parameters.  For function procedures, the type declaration also includes the return type.\par For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 TYPE\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   aMathProc = PROCEDURE(REAL): REAL;\par }{\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 defines a type of procedure that is passed one REAL number, and returns another.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When assigning a procedure to a procedure variable, or passing a procedure as a parameter, there are some restrictions that must be observed:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The procedure being assigned must not be a nested procedure.  It may only be a top level procedure within a module or local module.\par 2.\tab Predefined procedures cannot be passed as parameters.  These include standard Modula-2 procedures, as well as those provided with ORCA/Modula-2.\par 3.\tab Tool calls and GSOS calls cannot be passed as parameters.\par 4.\tab The types of the parameters for the procedure must match those in the declared parameter list exactly.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par As an example of a practical application of this capability, here is a program that uses a Modula-2 procedure to integrate a mathematical function.  Rather than writing the integration procedure twice, we write it once and pass the function procedure to integrate as a parameter.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*$Keep 'stuff'*)\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 MODULE demo;\par \par FROM MathLib0 IMPORT sqrt, exp;\par FROM RealInOut IMPORT WriteReal;\par \par TYPE\par }\pard \fi360\widctlpar\adjustright {\f6\fs18   amathproc = PROCEDURE(REAL): REAL;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE f1(x: REAL): REAL;\par BEGIN\par   RETURN sqrt(ABS(x));\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END f1;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE f2(x: REAL): REAL;\par BEGIN\par   RETURN exp(x/2.0);\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END f2;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE integrate(a,b:    REAL;\par                     steps:  INTEGER;\par                     f:      amathproc): REAL;\par (*Trapezoidal integration*)\par VAR\par   i: INTEGER;       (*loop variable*)\par   sum,              (*area under curve so far*)\par   x,                (*center of current trapezoid*)\par }\pard \fi360\widctlpar\adjustright {\f6\fs18   dx: REAL;         (*width of a trapezoid*)\par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 BEGIN\par   sum := 0.0;\par   dx := (b-a)/FLOAT(steps);\par   x := a + dx/2.0;\par   FOR i := 1 TO steps DO\par     sum := sum + f(x)*dx;\par     x := x + dx;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18   END;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18   RETURN sum;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END integrate;\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 BEGIN (*demo*)\par   WriteReal(integrate(0.0, 1.0, 50, f1), 10);\par   WriteReal(integrate(0.0, 10.0, 100, f2), 10);\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END demo.\par }\pard \qj\fi360\widctlpar\adjustright {\*\bkmkend bk18}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 parameters}{\rxe bk18}}}{\v\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Forward}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Forward\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 forward\bxe }}}{\fs20 Occasionally, it is necessary to deal with procedures that cannot be specified so that they are defined before use, or that are not actually defined in the Modula-2 program itself.  These problems are overcome by the use of special directives. \par Although standard Modula-2 does not require the use of a construct such as FORWARD, ORCA/Modula-2 is a single pass compiler, and as such requires the }{\caps\fs20 FORward}{\fs20  directive.  When you declare a procedure as }{\caps\fs20 FORward}{\fs20 , you write the declaration the same way that you normally would and follow this with the reserved word FORWARD.  Later in the declaration part, the procedure must be declared again, but with a declaration and statement part.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\caps\f6\fs18 procedure}{\f6\fs18  used(a: }{\caps\f6\fs18 INTEGER}{\f6\fs18 ); }{\caps\f6\fs18 FORward}{\f6\fs18 ;\par \par }{\caps\f6\fs18 procedure}{\f6\fs18  callit(a: }{\caps\f6\fs18 INTEGER}{\f6\fs18 );\par }{\caps\f6\fs18 BEGIN}{\f6\fs18 \par   IF a < 0 THEN\par     used(a);\par   END;\par END callit;\par \par }{\caps\f6\fs18 procedure}{\f6\fs18  used(a: }{\caps\f6\fs18 INTEGER}{\f6\fs18 );\par }{\caps\f6\fs18 BEGIN}{\f6\fs18 \par   callit(-a);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END used;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Tool, UserTool, Vector and ProDOS}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Tool, UserTool, Vector and ProDOS\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ProDOS\: interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 GS/OS\: interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell calls}}}{\v\fs20 \par }{\fs20 ORCA/Modula-2 provides two other directives: GSOS and TOOL.  GSOS is placed immediately after a procedure heading, and requires an CARDINAL-valued parameter.  It is used to tell the compiler that the procedure just declared is a GS/OS system call.  The CARDINAL value is the number of the system call.  The call numbers are given in the GSOS Technical Reference Manual.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 aBuffer     = }{\caps\f6\fs18 char}{\f6\fs18 ;                (*call GSOS to read from a file*)\par aReadDCB     =\par   }{\caps\f6\fs18 record}{\f6\fs18 \par     rdRef:    }{\caps\f6\fs18 INTEGER}{\f6\fs18 ;\par     rdBuff:   POINTER TO aBuffer;\par     rdCount:  }{\caps\f6\fs18 longint}{\f6\fs18 ;\par     rdReq:    }{\caps\f6\fs18 longint}{\f6\fs18 \par   }{\caps\f6\fs18 END}{\f6\fs18 ;\par \par }\pard \fi360\widctlpar\adjustright {\caps\f6\fs18 procedure}{\f6\fs18  read(}{\caps\f6\fs18 var}{\f6\fs18  dcb: aReadDCB); GSOS 47;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab The interface for the ORCA shell works just like the interface to GS/OS, so this directive is also used for ORCA shell headers.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Apple\~II}{\v\fs18 GS}{\v\fs20  Toolbox\:interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\caps\v\fs20 Tool}{\v\fs20  directive}{\caps\v\fs20 }}}{\f6\fs18 \par }{\caps\fs20 Tool}{\fs20  is placed immediately after a procedure heading, and requires an CARDINAL-valued parameter.  It is used to tell the compiler that the procedure just declared is a tool call.  The CARDINAL parameter is the tool call number.  The tool call numbers are given in the Apple II}{\fs18 GS}{\fs20  Toolbox Reference manuals.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }{\f6\fs18 PROCEDURE IMVersion(): versionNumber; TOOL 0B04H;\par (* INTEGER math tool call to determine version number of INTEGER *)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (* math tool set                                                 *)\par }{\f6\fs20 \par }{\fs20 TOOL and GSOS calls are designed to be used with the interface files provided with ORCA/Modula-2.  These files are described in Chapter 4.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 18 - The Block\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 18 - The Block\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 18 \endash  The Block\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \fi-1800\li2160\widctlpar\tx1800\adjustright {\f6\fs18 block\tab =\tab \{declaration\} [BEGIN StatementSequence] END\par declaration\tab =\tab CONST \{ConstantDeclaration ";"\}\par \tab \tab | TYPE \{TypeDeclaration ";"\}\par \tab \tab | VAR \{VariableDeclaration ";"\}\par \tab \tab | ProcedureDeclaration ";"\par \tab \tab | ModuleDeclaration ";"\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 block\bxe }}}{\fs20 A block is the part of a procedure or program that contains local declarations and the statements to execute.  It consists of a declaration part, the keyword BEGIN, zero or more program statements separated by semicolons, and the keyword END.  The statements are executed one after another until the end of the block is reached.  When the end of the block is reached, all local declarations cease to exist and control returns to the calling program or procedure.  If the block is the program block, control returns to the shell or program launcher.\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 19 - Statements\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 19 - Statements\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 19 \endash  Statements\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \fi-2340\li2520\keepn\widctlpar\tx2160\adjustright {\f6\fs18 StatementSequence\tab =\tab statement \{";" statement\}\par statement\tab =\tab assignment\par \tab \tab | ProcedureCall\par \tab \tab | IfStatement\par \tab \tab | CaseStatement\par \tab \tab | WhileStatement\par \tab \tab | RepeatStatement\par \tab \tab | LoopStatement\par \tab \tab | ForStatement\par \tab \tab | WithStatement\par \tab \tab | EXIT\par }\pard \fi-2340\li2520\widctlpar\tx2160\adjustright {\f6\fs18 \tab \tab | RETURN [expression]\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 The Assignment Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 The Assignment Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assignment statement\bxe }}}{\v\fs20 \par }\pard \qj\fi-1800\li2160\widctlpar\tx1800\adjustright {\f6\fs18 assignment\tab =\tab designator ":=" expression\par designator\tab =\tab qualident \{"." identifier | "[" ExpList "]" | "^"\}\par ExpList\tab =\tab expression \{"," expression\}\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The assignment statement allows a value to be assigned to a variable.  The value can be a constant, another variable, or a more complicated expression.  General rules for coding the expression part are covered in the next chapter.  The variable can be a simple variable, a dynamic variable pointed to by a pointer, an array, an array element, a record, an element of a record, a procedure name (for procedure variables), or the name of a user-defined function procedure.\par The assignment statement is coded as a variable followed by the assignment operator and an expression.  The value of the expression is calculated and the result replaces the value of the variable.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 type compatibility}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assignment statement\: type compatibility}}}{\fs20 Modula-2 is a strongly typed language.  The type of the expression must be assignment compatible with the type of the variable or the compiler will flag an error.  An expression V2 is type compatible with a variable V1 if any of the following conditions are met:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab They are the same type.\par 2.\tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 subranges}}}{\fs20 One is a subrange of the other, or they are both subranges of the same host type.\par 3.\tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 V2 is a string constant of length n2 where the length of the variable V1 is greater than or equal to n2.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The second type of compatibility is assignment compatibility.  V1 is assignment compatible with V2 if one of the conditions stated below is met.  If V1 is assignment compatible with V2, then you can assign V2 to V1, as in V1 := V2.\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab V1 and V2 are the same type.\par 2.\tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 subranges}}}{\fs20 V1 and V2 are type compatible ordinal types, and the value of V2 falls in the range of values valid for V1.\par 3.\tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 V1 and V2 are type compatible sets, and the members of the set V2 fall in the range of legal members for set V1.\par 4.\tab }{\pard\plain \qj\fi-360\li720\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 strings}}}{\fs20 V1 and V2 are type compatible string types.\par 5.\tab V1 and V2 are one of INTEGER, CARDINAL, LONGINT, LONGCARD.\par 6.\tab V1 and V2 are one of  REAL, LONGREAL.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Two results derived from this definition of assignment compatibility differ from some other common languages, and so deserve special mention.  First, very little automatic type conversion takes place.  In fact, the only time types are converted during assignment is when the types involved fall into one of the groups defined by 5 and 6 above.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 arrays}}}{\fs20 Secondly, Modula-2 allows the assignment of structured types.  So long as two structured types are compatible, the assignment takes place as a single statement, often replacing a loop in other languages.  For example, with the declaration\par \par }{\f6\fs18 a,b: ARRAY [1..10],[1..10] OF REAL;\par }\pard \qj\widctlpar\adjustright {\f6\fs20 \par }{\fs20 the assignments\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 a := b;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 a[3] := a[10];\par }\pard \qj\widctlpar\adjustright {\fs20 \par are legal.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 CASE Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 CASE Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \fi-1800\li2160\widctlpar\tx1800\adjustright {\f6\fs18 CaseStatement\tab =\tab CASE expression OF case \{"|" case\} [ELSE StatementSequence] END\par case\tab =\tab [CaseLabelList ":" StatementSequence]\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CASE statement\bxe }}}{\fs20 The }{\caps\fs20 case}{\fs20  statement allows you to choose one item from a list of possible alternatives.  The type of the expression must be compatible with the type of the case constants.  The expression is evaluated first.  Control is then passed to the statement after the corresponding case constant.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case statement\:ELSE clause}}}{\fs20 It is an error if there is no corresponding case constant.  You can avoid this error by using the ELSE clause.  If none of the case constants matches the expression, the ELSE clause is executed.  After the appropriate statement has been executed, the statement after the case statement is executed.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }{\f6\fs18 CASE i OF\par   1,3,5: WriteString('odd');\tab \par | 2,4,6: WriteString('even');\par   ELSE   WriteString('neither');\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 EXIT Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 EXIT Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXIT statement\bxe }}}{\fs20 An EXIT statement is legal only within the Statement Sequence of a LOOP statement (see below), and is used to terminate the enclosing LOOP statement.  It consists entirely of the reserved word EXIT.}{\b \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 FOR Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 FOR Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FOR statement\bxe }}}{\v\fs20 \par }\pard \fi-1800\li2160\widctlpar\tx1800\adjustright {\f6\fs18 ForStatement\tab =\tab FOR identifier ":=" expression TO expression [BY ConstExpression] DO StatementSequence END\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The FOR loop allows for repetitive looping when the exact number of times to execute the loop can be computed before the loop starts.  At execution time, the loop control variable is assigned the starting value specified by the expression.  The second expression is then evaluated, and the result saved.  Next, the looping process starts.  Each loop begins by testing to see if the value of the loop variable is less than or equal to the termination value specified by the second expression (or greater than or equal where the BY clause is used with a negative expression).  If it is, the statement sequence is executed, the loop control variable is incremented (or adjusted by the value of the constant expression supplied with the BY clause) and the process repeats.\par It is possible for a loop to not be executed.  This happens when the loop control variable starts out larger than the termination value.\par Modula-2 also requires that the loop control variable be defined locally, hence it may not be: part of a structured variable; imported; a parameter.\par The value of the loop variable is not defined after the loop terminates.\par Some examples of FOR loops are:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 FOR i := 0 TO 100 DO\par   WriteInt(i);\par   WriteLn;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 FOR i := 1 TO 10 DO\par   FOR j := 1 TO 10 DO\par     matrix[i,j] := 0.0;\par   END;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 FOR time := 10 TO 0 BY -1 DO\par   WriteString('T minus ');\par   WriteInt(time, 1);\par   WriteString(' seconds, and counting.');\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 IF-THEN/ELSIF-THEN-ELSE Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 IF-THEN/ELSIF-THEN-ELSE Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 IF statement\bxe }}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSE clause}}}{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ELSIF clause}}}{\v\fs20 \par }\pard \fi-1800\li2160\keepn\widctlpar\tx1800\adjustright {\f6\fs18 IfStatement\tab =\tab IF expression THEN StatementSequence \{ELSIF expression THEN StatementSequence\} [ELSE StatementSequence] END\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The IF statement allows a statement to be executed only if a condition is met.  The result of the expressions following the keywords IF and ELSIF must be of type BOOLEAN.  When one of those expressions returns a TRUE result, the statement sequence following the next THEN keyword is executed.\par If none of the conditions described by the expressions are met, and an ELSE clause is used, then the statement sequence following the ELSE clause is executed.\par Examples of }{\caps\fs20 if}{\fs20  statements are:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 IF a = 10 THEN\par   a := 1;\par ELSE\par   INC(a);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 IF today = Monday THEN\par   letItRain;\par ELSIF today = Tuesday THEN\par   letItHail;\par ELSE\par   letItShine;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }{\f6\fs20 \par }{\fs20 Finally, a useful construct is the nested }{\caps\fs20 if}{\fs20  statement, which is often used when all values of a variable cannot be listed for a }{\caps\fs20 case}{\fs20  statement.\par \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs18 IF month IN aMonthSet\{Jan,Mar,May,Jul,Aug,Oct,Dec\} THEN\par   days := 31;\par ELSIF month }{\caps\f6\fs18 in}{\f6\fs18  aMonthSet\{Apr,Jun,Sep,Nov\} THEN\par   days := 30;\par ELSE\par   IF leapYear THEN\par     days := 29;\par   ELSE\par     days := 28;\par   END;\par }\pard \fi360\widctlpar\adjustright {\f6\fs18 END;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 LOOP Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 LOOP Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\tx1800\adjustright {\f6\fs18 LoopStatement\tab =\tab LOOP StatementSequence END\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOOP statement\bxe }}}{\fs20 The LOOP statement is used when a loop must be executed indefinitely, or until such time as an EXIT statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXIT statement}}}{\fs20  is reached.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }{\f6\fs18 LOOP\par \tab (* Mainline of application *)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 LOOP\par   IF OKToContinue THEN\par     CallSubProcedure;\par   ELSE\par     EXIT;\par   END;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Procedure Calls}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Procedure Calls\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-2160\li2520\keepn\widctlpar\tx2160\adjustright {\f6\fs18 ProcedureCall\tab =\tab designator [ActualParameters]\par ActualParameters\tab =\tab "(" ExpList ")"\par ExpList\tab =\tab expression \{"," expression\}\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 procedures\:calls}}}{\fs20 A procedure call causes a jump to the named procedure.  The procedure call may contain a list of actual parameters which must match each of the defined formal parameters.  For a complete description on parameter types, see Chapter 17.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 REPEAT Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 REPEAT Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1980\li2340\keepn\widctlpar\tx1980\adjustright {\f6\fs18 RepeatStatement\tab =\tab REPEAT StatementSequence UNTIL expression\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\caps\fs20 repeat}{\fs20  statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\caps\v\fs20 repeat}{\v\fs20  statement}{\caps\v\fs20 \bxe }}}{\fs20  is used when a loop must be executed at least one time, but the number of times to loop cannot be computed when the loop starts.  First, the body of the }{\caps\fs20 repeat}{\fs20  statement sequence is executed.  The expression is then evaluated.  The expression must be BOOLEAN.  If its value is FALSE, the loop is executed again; otherwise, the statement after the }{\caps\fs20 repeat}{\fs20  statement is executed.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }{\caps\f6\fs18 repeat}{\f6\fs18 \par   ReadChar(myfile, ch);\par   Process(ch);\par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 until}{\f6\fs18  myfile.eof;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\caps\f6\fs18 repeat}{\f6\fs18 \par   GetMove;\par   MakeMove;\par   UpdateBoard;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 UNTIL gameDone;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RETURN Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 RETURN Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1980\li2340\keepn\widctlpar\tx1980\adjustright {\f6\fs18 ReturnStatement\tab =\tab RETURN [ expression ]\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The RETURN statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RETURN statement\bxe }}}{\fs20  indicates the termination of the current procedure (or module body).  The expression is used to express the result of a function procedure.  Its type must be assignment compatible with the result type of the function procedure.\par Function procedures require the use of a RETURN statement to supply the result.  A run-time error will occur where one is not used.\par It is possible to have more than one RETURN statement within a procedure; however, only one will be executed for a specific instance of a procedures execution.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 WHILE Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 WHILE Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\tx1800\adjustright {\f6\fs14 WhileStatement\tab =\tab WHILE expression DO StatementSequence END\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\caps\fs20 while}{\fs20  statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\caps\v\fs20 while}{\v\fs20  statement}{\caps\v\fs20 \bxe }}}{\fs20  is used when the body of a loop may not need to be executed at all.  The boolean expression is evaluated.  If its result is }{\caps\fs20 true}{\fs20 , the statement sequence is executed and the process repeats.  If it is }{\caps\fs20 false}{\fs20 , the statement after the }{\caps\fs20 while}{\fs20  statement is executed.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }{\f6\fs18 ReadChar(myFile, ch);\par \par }{\caps\f6\fs18 while}{\f6\fs18  ch <> eol }{\caps\f6\fs18 do}{\f6\fs18 \par   process(ch);\par   ReadChar(myfile, ch);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*draw a circle*)\par a := delta;\par MoveTo(TRUNC(midX + length), midY);\par \par WHILE a <= twopi DO\par   x := TRUNC(midX + cos(a) * length);\par   y := TRUNC(midY + sin(a) * length);\par   LineTo(x, y);\par   INC(a, delta)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 WITH Statement}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 WITH Statement\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\tx1800\adjustright {\f6\fs14 WithStatement\tab =\tab WITH designator DO StatementSequence END\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 records}}}{\fs20 The }{\caps\fs20 with}{\fs20  statement}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\caps\v\fs20 with}{\v\fs20  statement}{\caps\v\fs20 \bxe }}}{\fs20  provides a shorthand method for accessing the fields within a record.  The variable specified in the }{\caps\fs20 with}{\fs20  statement is the name of a variable of type }{\caps\fs20 record}{\fs20 , and this name is implied to be prefixed to any field names occurring within the statement sequence portion of the }{\caps\fs20 with}{\fs20 .\par For example, consider the following declarations and assignments:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 TYPE\par   outfit =\par     RECORD\par       shirtSize: }{\caps\f6\fs18 integer}{\f6\fs18 ;\par       pantSize:  }{\caps\f6\fs18 integer;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18     END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 VAR\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   man1, man2:    outfit;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 BEGIN\par   WITH man1 DO\par     WITH man2 DO\par       shirtSize := 15;\par     END;\par   END;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }{\fs20 \par The field }{\f6\fs18 shirtSize}{\fs20  refers to the variable }{\f6\fs18 man2}{\fs20 .  To set the }{\f6\fs18 shirtSize}{\fs20  field for }{\f6\fs18 man1}{\fs20 , the following code would have to be used:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 WITH man1 DO\par   WITH man2 DO\par     shirtSize := 15;\par     man1.shirtSize := 15;\par   END;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }{\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 or more correctly:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 WITH man1 DO\par   WITH man2 DO\par     shirtSize := 15;\par   END;\par \par   shirtSize := 15;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }{\f6\fs20 \par }{\fs20 This structure more clearly shows the scope rules applied to with variables, and thus how }{\f6\fs18 shirtSize}{\fs20  is "local" to }{\f6\fs18 man2}{\fs20 .\par }\pard \widctlpar\adjustright {\b\fs36 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 20 - Expressions\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 20 - Expressions\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 20 \endash  Expressions\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 {\*\bkmkstart bk19}\par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operators}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Operators\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-2160\li2520\widctlpar\tx2160\adjustright {\f6\fs14 expression\tab =\tab SimpleExpression [relation SimpleExpression]\par relation\tab =\tab "=" | "#" | "<>" | "<" | "<=" | ">" | ">=" | IN\par SimpleExpression\tab =\tab ["+" | "-"] term \{AddOperator term\}\par AddOperator\tab =\tab "+" | "-" | OR\par term\tab =\tab factor \{MulOperator factor\}\par MulOperator\tab =\tab "*" | "/" | DIV | MOD | AND | "&"\par factor\tab =\tab number | string | set | designator [ActualParameters] | "(" expression ")" | NOT factor | "~" factor\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are a variety of operators which can be used to manipulate data.  For ease of understanding, they are broken down into groups.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Arithmetic Operators}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Arithmetic Operators\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\ri3420\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\tx3240\tx4140\adjustright {\fs20 Operator\tab Operation\tab Integer\tab Real\par }\pard \qj\li360\ri3420\keepn\widctlpar\tx1440\tx3240\tx4140\adjustright {\fs20 +\tab addition\tab }{\f20\fs18 \u18\'12}{\fs20 \tab }{\f20\fs18 \u18\'12}{\fs20 \par -\tab subtraction\tab }{\f20\fs18 \u18\'12}{\fs20 \tab }{\f20\fs18 \u18\'12}{\fs20 \par *\tab multiplication\tab }{\f20\fs18 \u18\'12}{\fs20 \tab }{\f20\fs18 \u18\'12}{\fs20 \par /\tab real division\tab \tab }{\f20\fs18 \u18\'12}{\fs20 \par DIV\tab integer division\tab }{\f20\fs18 \u18\'12}{\fs20 \par }\pard \qj\li360\ri3420\widctlpar\tx1440\tx3240\tx4140\adjustright {\fs20 MOD\tab modulus\tab }{\f20\fs18 \u18\'12}{\fs20 \tab }{\f20\fs18 \u18\'12}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par With the exception of the / operator, all of these operators may be used for both signed and unsigned integer arithmetic.  Both operands must be either signed or unsigned, with the result being the same as that of the two operands.\par For real arithmetic, the DIV operation is replaced with /.  In the case of real arithmetic, both operands must be REAL or LONGREAL, with the result being the same as that of the operands.\par When used as unary operators, + does nothing, and - denotes sign inversion.  Sign inversion is only legal for signed operands (INTEGER, LONGINT, REAL or LONGREAL).\par The following restrictions must be observed, or a run-time error will result.\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab The result of any operation involving at least one LONGINT value must be in the range [-maxint4-1 .. maxint4].  The result for only INTEGER operands must be in the range [-maxint -1 .. maxint].  Maxint is defined as 32767; maxint4 is defined as 2147483647.\par 2.\tab The result of any operation involving at least one LONGCARD value must be in the range [0 .. maxcard4].  The result for only CARDINAL operands must be in the range [0 .. maxcard].  Maxcard is defined as 65535; maxcard4 is defined as 4294967295.\par 3.\tab The second operand of the }{\caps\fs20 div}{\fs20  or / operator must not be zero.\par 4.\tab The second operand of the }{\caps\fs20 mod}{\fs20  operator must be greater than zero.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Logical Operators}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Logical Operators\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\ri5320\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\adjustright {\fs20 Operator\tab Operation\par }\pard \qj\li360\ri5320\keepn\widctlpar\tx1440\adjustright {\fs20 OR\tab logical OR\par AND\tab logical AND\par &\tab logical AND\par NOT\tab logical NOT\par }\pard \qj\li360\ri5320\widctlpar\tx1440\adjustright {\fs20 ~\tab logical NOT\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Logical operators may only be used with BOOLEAN operands, and always produce a BOOLEAN result.\par NOT and ~ are treated as synonyms, as are AND and &.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Set Operators}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Set Operators\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\ri4320\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\adjustright {\fs20 Operator\tab Operation\par }\pard \qj\li360\ri4320\keepn\widctlpar\tx1440\adjustright {\fs20 +\tab set union\par -\tab set difference\par *\tab set intersection\par }\pard \qj\li360\ri4320\widctlpar\tx1440\adjustright {\fs20 /\tab symmetric set difference\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par When used with sets, these operators perform bitwise operations on the set operands, which must be of the same set type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Relations}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Relations\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\ri2880\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1440\tx4680\adjustright {\fs20 Operator\tab Relation\tab Sets\par }\pard \qj\li360\ri2880\keepn\widctlpar\tx1440\tx4680\adjustright {\fs20 =\tab equal to\tab }{\f20\fs18 \u18\'12}{\fs20 \par #\tab not equal to\tab }{\f20\fs18 \u18\'12}{\fs20 \par <>\tab not equal to\tab }{\f20\fs18 \u18\'12}{\fs20 \par <\tab less than\par <=\tab less than or equal to (set inclusion)\tab }{\f20\fs18 \u18\'12}{\fs20 \par >\tab greater than\par >=\tab greater than or equal to (set inclusion)\tab }{\f20\fs18 \u18\'12}{\fs20 \par }\pard \qj\li360\ri2880\widctlpar\tx1440\tx4680\adjustright {\fs20 IN\tab contained within (set membership)\tab }{\f20\fs18 \u18\'12}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par When used with sets, the operators <= and >= represent set inclusion.  The IN operator provides a method of determining set membership.\par \par For example:\par \par }\pard \qj\fi360\widctlpar\tx2160\tx3600\tx5760\adjustright {\f6\fs18 \{1\} <= \{1, 3\}\tab = TRUE\tab \{1, 3\} = \{1, 3\}\tab = TRUE\par \{3\} <= \{3, 1\}\tab = TRUE\tab \{1, 3\} = \{3, 1\}\tab = TRUE\par 3 IN \{3, 1\}\tab = TRUE\tab \{1, 3\} = \{3, 2, 1\}\tab = FALSE\par 1 IN \{2, 3\}\tab = FALSE\tab \{\} # \{3, 4, 5\}\tab = TRUE\par \{\} <= \{1, 5\}\tab = TRUE\tab \{3, 1\} # \{1, 3\}\tab = FALSE\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The # and <> operators are treated as synonyms.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operations on Characters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operations on Characters\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 characters}}}{\fs20 The only operations valid on characters are comparisons.  Testing for equality or inequality is straight forward.  Testing for greater than or less than implies some ordering of the character set.  The ordering used in ORCA/Modula-2 is the same as for the ASCII character set.  In all cases, comparing two characters c1 and c2 will give the same result as comparing ORD(c1) and ORD(c2).\par ORCA/Modula-2 uses the ASCII character set, so alphabetic characters are both ordered and sequential.  Uppercase characters are less than lowercase characters, so that 'A' < 'a'.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operations on Addresses and Pointers}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Operations on Addresses and Pointers\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pointers}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The example below shows how address arithmetic can be performed to randomly access the elements of an array.  Other than addition and subtraction of integers, it is not recommended that you apply mathematical functions to addresses.  For instance, the addition of two addresses is somewhat meaningless; the square root of a address value is truly nonsense.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE PointerMath(VAR num: ARRAY [0..99] }{\caps\f6\fs18 of}{\f6\fs18  }{\caps\f6\fs18 integer}{\f6\fs18 );\par VAR \par   p:    POINTER TO }{\caps\f6\fs18 integer}{\f6\fs18 ;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   x, i: }{\caps\f6\fs18 integer;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\caps\f6\fs18 begin\par }{\f6\fs18   p := ADR(num[0]);\par   x := 1;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   offset := 5;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18   (* Loop to place a value in every 5th position of the array num. *)\par \par   FOR i := 0 TO 19 DO\par     p^ := x;\par     x := x * 3;\par     INC(p, VAL(ADDRESS, 2 * offset));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   END;\par END PointerMath;\par }{\f6\fs20 \par }{\fs20 There are two items in this example that bear some explanation.  The ADR() function is a SYSTEM function that must be imported from the SYSTEM module.  This simply returns the address of the variable passed to it.  The other, VAL, is a standard function used for type transfers.  It causes the result of }{\f6\fs18 2 * offset}{\fs20  to be of type ADDRESS, which is type compatible with any pointer, and thus can be added to }{\f6\fs18 p}{\fs20 .\par Adding }{\f6\fs18 2 * offset}{\fs20  to }{\f6\fs18 p}{\fs20  moves }{\f6\fs18 p}{\fs20  forward in the array to access the next integer (each integer is two bytes long) that is }{\f6\fs18 offset}{\fs20  elements away.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Operator Precedence}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Operator Precedence\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }{\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 operator precedence}}}{\v\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Operator precedence is what causes 1 + 2 * 3 to be 7 instead of 9.  In Modula-2, expressions that have several operators in a row, with each operator of equal precedence, are evaluated from left to right.  For example, the integer math operation 100 DIV 3*2 gives 66 if the DIV operation is performed first, and 16 if the multiplication comes first.  In Modula-2, the DIV is performed first.\par The operators are shown below, with the highest precedence shown first.  Operators with the same precedence are shown on the same line.\par \par }\pard \qj\fi360\widctlpar\tx1080\tx1800\tx2520\tx3240\tx3960\tx4680\tx5400\adjustright {\caps\f6\fs18 not}{\f6\fs18 \tab ~ \par *\tab /\tab }{\caps\f6\fs18 div\tab Mod\tab and\tab }{\f6\fs18 &\par +\tab -\tab OR\par =\tab #\tab <>\tab <\tab <=\tab >\tab >=\tab IN\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The order in which the operands of a binary operator are evaluated is implementation dependent.  For example, consider the procedure function changeit:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE changeit(}{\caps\f6\fs18 var}{\f6\fs18  x: }{\caps\f6\fs18 integer}{\f6\fs18 ): }{\caps\f6\fs18 integer}{\f6\fs18 ;\par VAR\par   y:  INTEGER;\par }{\caps\f6\fs18 begin}{\f6\fs18 \par   y := x }{\caps\f6\fs18 div}{\f6\fs18  2;\par   x := x DIV 3;\par   RETURN y;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END changeit;\par }{\f6\fs20 \par }{\fs20 Now consider how it is used in this expression:\par \par }{\f6\fs18 x * changeit(x)\par }{\fs20 \par If }{\f6\fs20 x}{\fs20  is 5, and the left term is evaluated first, then the value of the expression is 10.  If, however, the function procedure is called first, the value of the expression is 2.  In ORCA/Modula-2, the left term is always evaluated first.  If you plan to move your programs to other compilers, you should not write expressions that depend on the implementation-defined order of evaluation, like the one above.\par Something else about this example should be highlighted.  The effect of }{\f6\fs20 x}{\fs20  being changed by the call to changeit is called a side effect.  This sort of programming should be avoided as much as possible as it can make debugging very difficult.  It is actually a stated rule that you should not pass a VAR parameter to a procedure function, as this actually encourages the use of side effects.  In these days of modern programming styles and techniques, such things are actively discouraged.\par }\pard \qj\widctlpar\adjustright {\*\bkmkend bk19}{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\xe {\v }{\v expressions}{\rxe bk19}}}{\v \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 21 - Compiler Directives\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 21 - Compiler Directives\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 21 \endash  Compiler Directives\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 {\*\bkmkstart bk20}Compiler directives are used to control the output of the compiler.  They are coded much like a comment, with the opening token being (*$.  No spaces are allowed between the opening comment character, (* , and the dollar sign character, $, nor are any allowed between the dollar sign character, $, and the directive name.  What follows the name of the directive depends on which directive is used.  Some directives must appear before the beginning of the program, while others are allowed to appear anywhere in the source file.\par While most compilers will provide some method of doing the things these directives do, they are not likely to match in syntax.  For that reason, the directives will need to be changed if you port the program to another compiler.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case sensitivity}}}{\fs20 It is important to note that, like the rest of Modula-2, compiler directives are case-sensitive.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 CDEV}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 CDEV\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CDEV directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 control panel device}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$CDEV entry*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This directive, when used before the module header, tells ORCA/Modula-2 that the program is a CDEV (Control panel DEVice).  CDEVs, like desk accessories, require special code to be generated, and special handling of the calls that the system makes to it.  This directive causes that code to be generated.\par }{\f6\fs20 Entry}{\fs20  is the name of the procedure called by GSOS to handle each of the CDEV messages.}{\b \par }{\fs20 For an example of the use of the CDEV directive look for the WorldCDEV program on the sample programs disk.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ChainTo}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 ChainTo\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ChainTo directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 assembly language}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$ChainTo "file.name"*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ChainTo directive tells the compiler to stop processing the current source file, and to move to the source file given as a string parameter.\par The primary reason for using the ChainTo directive is to attach several source files written in different languages.  For example, in a short program that uses a few assembly language subroutines, you can use ChainTo to attach the assembly language subroutines.  In programs that consist of a single module, this lets you avoid linking multiple object files.  In programs that consist of several modules, this lets the assembly language subroutines access to private variables declared within the Modula-2 module.\par It is also possible to chain to another Modula-2 source file.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 DataBank}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 DataBank\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DataBank directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 tools}}}{\v\fs20 \par }\pard \fi360\keepn\widctlpar\adjustright {\f6\fs20 (*$DataBank+*)\par (*$DataBank-*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Modula-2 assumes that the data bank register is correct - that is, that it points to the bank where the global variables are located.  There are occasions where a Modula-2 procedure will be called by some other language, and this assumption may not be a good one.  The most common case is when a procedure is called from an Apple\~II}{\fs18 GS}{\fs20  tool.  This directive tells the compiler to generate code at the start of each procedure to set the data bank to the global variable bank upon entering the procedure.  The original data bank value is restored before returning to the caller.\par Using this directive does not prevent a procedure from being called directly from Modula-2.  It does, however, increase the size of code and decrease execution speed a little.\par For example:\par \par }\pard \fi360\widctlpar\adjustright {\f6\fs18 (*$DataBank+*)\par PROCEDURE myDrawMenu(message: CARDINAL;\par                      mhandle: aMenuHandle;\par                      r:       aRect;\par                      x, y:    CARDINAL; menuParam: CARDINAL): CARDINAL;\par BEGIN\par (*your code*)\par END myDrawMenu;\par (*$DataBank-*)\par }{\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The first use of the directive tells the compiler to save the data bank register upon entry, and set it correctly for use by the procedure.  The procedure code itself then follows.  Just before the procedure exit code, the compiler generates code to restore the data bank register back to the value it had at entry.  The second use of the directive, after the procedure has ended, prevents following procedures from containing this extra, and often unnecessary, code.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Dynamic}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Dynamic\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Dynamic directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 segments}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$Dynamic 'name'*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The dynamic directive allows you to place procedures in different dynamic load segments.  A dynamic load segment is a block of executable code that is placed into memory by the loader.  The difference between a static load segment and a dynamic load segment is that static load segments are always loaded when the program is first executed, and dynamic segments are only loaded when a piece of code within the segment is referenced.\par The directive accepts a string as an operand, which gives the name of the segment.  The string can contain from one to ten characters, and the characters can be any printing characters.  Note that segment names are case sensitive!  That is, Seg1 is not be the same segment name as seg1.\par The dynamic directive is designed for use with programs that exceed 64K bytes in size, exclusive of the variables required by the program.  All procedures following a dynamic directive are placed into the named load segment.  The same name can be reused in different parts of the program.  The last segment named before the main program body causes the main program to be placed in that segment.\par For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 MODULE k;\par \par }{\caps\f6\fs18 procedure}{\f6\fs18  x;\par }{\caps\f6\fs18 begin\par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 end }{\f6\fs18 x}{\caps\f6\fs18 ;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*$Dynamic 'x'*)\par }{\caps\f6\fs18 procedure}{\f6\fs18  z;\par }{\caps\f6\fs18 begin}{\f6\fs18 \par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 end }{\f6\fs18 z;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*$Dynamic '33'*)\par }{\caps\f6\fs18 begin\par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 end }{\f6\fs18 k}{\caps\f6\fs18 .\par }{\caps\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 causes procedure }{\f6\fs20 x}{\fs20  to be placed in the blank segment.  This is the default name used by the loader if no segment directive has been used in the program, or if some parts of the program are not placed in a named segment with the dynamic directive.  Procedure }{\f6\fs20 z}{\fs20  would be placed in segment x, and the main program would be placed in segment 33.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Note that this directive is not legal within the scope of a procedure.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 INIT}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 INIT\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INIT directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RTL directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PIFs}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TIFs}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Inits}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 (*$INIT*)\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Using this directive before the module header tells ORCA/Modula-2 not to generate the normal program entry/exit code.  Instead of the normal startup and GS/OS quit call, ORCA/Modula-2 generates special entry code, and exit code that exits using an RTL instruction.\par With release v1.0 of ORCA/Modula-2, the RTL and INIT compiler directives have the same function.}{\b \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Keep}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Keep\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 keep directive\bxe }}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 (*$Keep 'name'*)\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The keep directive is followed by a string.  The string contains the path name to use as the output file for the intermediate code produced by the compiler.  The object module will be written to the keep file name.  The path name can contain device numbers, prefix numbers, and "..".  If the path name contains only a file name, then the current prefix is assumed.\par This directive must appear before the module header.  Only one keep directive is allowed in a source file.  The keep directive is not normally used from the desktop environment.\par From the text environment, if the keep directive is not used, you should use a keep parameter when compiling the program or set the shell keep variable to some default file name in order to cause the object file to be saved.  If no keep file name is established by any of the three methods mentioned, no object module is created, and the link and execute steps cannot be performed.  The keep parameter, keep variable, and the compilation process are discussed in Chapter 7 and Chapter 8.\par Examples:\par \par }{\f6\fs18 (*$Keep '../myprog'*)\par (*$Keep '1/file3.exe'*)\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 NDA}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 NDA\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NDA directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 desk accessories}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\f6\fs20 (*$NDA open close action period eventMask menuLine*)\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par The NDA directive tells ORCA/Modula-2 that your program is a new desk accessory, and that  the compiler needs to generate some special code.  This directive must appear before the module header.  The directive has six parameters.  The first three are the names of three procedures in your program that have special meaning in a desk accessory.  The next two are the update period and event mask.  The last is the name of your desk accessory, as it will appear in the Apple menu.  The format is:\par }{\f6\fs20 \par }\pard \qj\fi-1440\li1800\widctlpar\adjustright {\f6\fs20 open}{\fs20 \tab This parameter is an identifier that specifies the name of the function procedure that is called when someone selects your desk accessory from the Apple Menu.  It must return a pointer to the window that it opens.\par }{\f6\fs20 close}{\fs20 \tab This parameter is an identifier that specifies the name of the procedure to call when the user wants to close your desk accessory.  It must be possible to call this procedure even if }{\f6\fs20 open}{\fs20  has not been called.\par }{\f6\fs20 action}{\fs20 \tab The }{\f6\fs20 action}{\fs20  parameter is the name of a procedure that is called whenever the desk accessory must perform some action.  It must declare a single integer parameter, which defines the action that the procedure should take.  See the Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference Manual for a list of the actions that will result in a call to this procedure.\par }{\f6\fs20 period}{\fs20 \tab This parameter tells the desk manager how often it should call your desk accessory for routine updates, such as changing the time on a clock desk accessory.  A value of 0FFFFH tells the desk manager to call you only if there is a reason; 0 indicates that you should be called as often as possible; and any other value tells how many 60ths of a second to wait between calls.  This parameter is treated as a CARDINAL.\par }{\f6\fs20 eventMask}{\fs20 \tab This value tells the desk manager what events to call you for.  See the Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference Manual for details.  ORCA/Modula-2 expects a CARDINAL value for this parameter.\par }{\f6\fs20 menuLine}{\fs20 \tab The last parameter is a string.  It tells the desk manager the name of your desk accessory.  The name must be preceded by two spaces.  After the name, you should always include the characters }{\f6\fs20 \\H**}{\fs20 .\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par New Desk Accessories require a fourth procedure called the Init procedure.  In ORCA/Modula-2 this is supplied by the body of the program module for your desk accessory program.  In other compilers, such as ORCA/Pascal, the init procedure is written as a separate procedure taking a single INTEGER parameter.  This parameter, if zero, means that the desk accessory is shutting down.  A non-zero value means that it is starting up.  Since the module body can take no parameters, ORCA/Modula-2 stores this parameter in the variable }{\f6\fs20 M2Lib.NDACode}{\fs20 .\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 NILCheck}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 NILCheck\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NILCheck directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 range checking}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$NILCheck+*)\par (*$NILCheck-*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Generates code that, whenever a pointer type variable is de-referenced, the pointer is checked for a NIL value.  It may be turned on (NILCheck+) or off (NILCheck-).  If a NIL pointer dereference occurs, the program will terminate with status }{\f6\fs20 M2Lib.tsAddressOverflow}{\fs20 .\par Note that this directive may not be used within the scope of a procedure.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 NoImp}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 NoImp\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 NoImp directive\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$NoImp*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Sometimes it is necessary to write some of your program in a language other than Modula-2. For example, you may need to write a low-level speed critical driver in assembly language.  In order to make the foreign code available to Modula-2, there are a number of conventions that must be adhered to, the main one being that a definition file for the foreign module is required.\par In the normal course of execution, a Modula-2 program initializes all of its modules at program start, just before your mainline code gets executed (exceptions to this are programs like CDAs, NDAs, and CDEVs).  ORCA/Modula-2 will automatically generate a call to the initialization procedure of any modules that are imported, even those not written in Modula-2.  This poses a problem when it is often not necessary, and sometimes impossible to implement this initialization procedure in the foreign language.\par The NoImp directive tells the compiler not to generate an initialization call.  By using this directive before the module definition in the definition file for the foreign module, the compiler is told that there may be no implementation for the module Most of the toolbox definition files are declared in this way.\par For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*$NoImp*)\par DEFINITION MODULE PascalInterface;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END PascalInterface.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 OverflowCheck}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 OverflowCheck\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 OverflowCheck directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 range checking}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$OverflowCheck+*)\par (*$OverflowCheck-*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Causes the compiler to generate code that ensures that the result of an expression does not overflow (meaning: go outside the legal bounds) the base type of the expression.  It may be turned on (OverflowCheck+) or off (OverflowCheck-).\par This type of checking requires a great deal of extra time and space during compilation; hence, the default is for range checking to be off.  You will typically want to enable range checking during the debugging phases of program development, and then disable the feature after the program is running.\par Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 VAR\par   a: CARDINAL;\par BEGIN\par   a := 40000;\par \par   (*$OverflowCheck-*)\tab (*Turn range checking off *)\par   a := a * 2;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   (*$Overflowcheck+*)\tab (*Set range checking on *)\par }{\fs20 \par By turning overflow checking off, no error will be detected in this example, whereas the program would normally terminate (with status }{\f6\fs20 M2Lib.tsOverflow}{\fs20 ) when the result of the multiplication overflows the CARDINAL variable }{\f6\fs20 a}{\fs20 .\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Pascal}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Pascal\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Pascal}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 C}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Pascal}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/C}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$Pascal+*)\par (*$Pascal-*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ORCA/Pascal and ORCA/C compilers use parameter passing mechanisms that are incompatible with ORCA/Modula-2, so the act of calling a procedure or function written in one of these languages requires a little extra work.\par In order to make the procedure or function visible to ORCA/Modula-2, you must precede the definition of the procedure or function with an instance of the Pascal compiler directive.\par For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 (*$Pascal+*)\par PROCEDURE PascalProcedure (par1: INTEGER);\par PROCEDURE PascalFunction (par1: INTEGER): LONGINT;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$Pascal-*)\par }{\f6\fs20 \par }{\fs20 As seen in the example, the directive can be turned on or off using the plus and minus signs.  When the directive is on, procedure definitions are flagged as using the ORCA/Pascal parameter passing mechanism.  This compiler directive may not be used legally within the scope of a procedure.\par Note that when a Pascal or C procedure or function is called, ORCA/Modula-2 converts the procedure name to all uppercase letters.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RangeCheck}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 RangeCheck\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RangeCheck directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 range checking}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$RangeCheck+*)\par (*$RangeCheck-*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Causes the compiler to generate code that ensures that it is not possible to assign a value to a variable that is outside its legal range.  This range is determined by the base type of the variable.  See the chapters on data types for a specification of the legal range of each data type.  Range checking may be turned on (RangeCheck+) or off (RangeCheck-).\par This type of checking requires a great deal of extra time and space during compilation; hence, the default is for range checking to be off.  You will typically want to enable range checking during the debugging phases of program development, and then disable the feature after the program is running.\par Examples:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 VAR\par   a: CARDINAL;\par BEGIN\par   a := MAX(CARDINAL);\par \par   (*$RangeCheck-*)\tab (*Turn range checking off *)\par   INC(a);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   (*$Rangecheck+*)\tab (*Set range checking on *)\par }{\fs20 \par In this example, the program would normally terminate (with status }{\f6\fs20 M2Lib.tsRangeError}{\fs20 ) when the INC procedure causes }{\f6\fs20 a}{\fs20  to exceed the range of the CARDINAL type.  By turning off range checking, this is prevented.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RTL}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 RTL\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RTL directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INIT directive}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PIFs}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TIFs}}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Inits}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$RTL*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Using this directive before the module header tells ORCA/Modula-2 not to generate the normal program entry/exit code.  Instead of the normal startup and GS/OS quit call, ORCA/Modula-2 generates special entry code, and exit code that exits using an RTL instruction.\par With release 1.0 of ORCA/Modula-2, the RTL and INIT compiler directives have the same function.}{\b \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Segment}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Segment\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Segment directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 segments}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$Segment 'name'*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The segment directive allows you to place procedures in different load segments.  A load segment is a block of executable code that is placed into memory by the loader.  The directive accepts a string as an operand, which gives the name of the segment.  The string can contain from one to ten characters, and the characters can be any printing characters.  Note that segment names are case sensitive.  That is, Seg1 is not be the same segment name as seg1.\par The segment directive is designed for use with programs that exceed 64K bytes in size, exclusive of the variables required by the program.  All procedures following a segment directive are placed into the named load segment.  The same name can be reused in different parts of the program.  The last segment named before the main program body causes the main program to be placed in that segment.\par For example\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 MODULE k;\par \par }{\caps\f6\fs18 procedure}{\f6\fs18  x;\par }{\caps\f6\fs18 begin\par end }{\f6\fs18 x}{\caps\f6\fs18 ;\par \par }{\f6\fs18 (*$Segment 'x'*)\par }{\caps\f6\fs18 procedure}{\f6\fs18  z;\par }{\caps\f6\fs18 begin}{\f6\fs18 \par }{\caps\f6\fs18 end }{\f6\fs18 z;\par \par (*$Segment '33'*)\par }{\caps\f6\fs18 begin\par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 end }{\f6\fs18 k}{\caps\f6\fs18 .\par }{\caps\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would cause procedure }{\f6\fs20 x}{\fs20  to be placed in the blank segment.  This is the default name used by the loader if no segment directive has been used in the program, or if some parts of the program are not placed in a named segment with the segment directive.  Procedure }{\f6\fs20 z}{\fs20  would be placed in segment x, and the main program would be placed in segment 33.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Note that this directive is not legal within the scope of a procedure.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 StackCheck}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 StackCheck\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 StackCheck directive\bxe }}}{\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 range checking}}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$StackCheck+*)\par (*$StackCheck-*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When turned on, the compiler generates code immediately after the procedure entry code to ensure that the programs stack has not been exceeded.  If it detects that the stack has been compromised then the program is terminated with the termination code, }{\f6\fs20 M2Lib.tsStackOverflow}{\fs20 .\par Stack checking may be turned on (StackCheck+) or off (StackCheck-).\par Note that this directive may not be used within the scope of a procedure, and is not valid within a CDEV or NDA.\par For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 MODULE Crash;\par \par (*$StackCheck+*)\par PROCEDURE Recursive;\par BEGIN\par   Recursive;\par END Recursive;\par \par BEGIN\par   Recursive;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Crash.\par }{\f6\fs20 \par }{\fs20 This program would terminate eventually since there is no way for the recursive procedure to end the recursion.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Stacksize}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Stacksize\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\pard\plain \keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Stacksize directive\bxe }}}{\v\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 (*$Stacksize size*)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Stacksize directive is used to request that the compiler allot a specific size of stack.  It accepts a single operand, the number of bytes that the stack may use, given as a CARDINAL.  One of the first things that the compiler looks for is a Stacksize directive, which must appear before the module header.\par Local variables, parameters, and temporary variables allocated by the compiler are allocated from the stack.  By default, the stack is 4K long.  If you run out of stack space, you will get "Stack overflow" errors at run-time if stack checking is on, or the program will crash if stack checking is off.\par Stack space is allocated from a special area of memory known as bank zero.  The amount of memory actually available varies, depending on the version of GS/OS and tools in use, what program launcher was used, and so on.  In general, you can get about 32K (32768 bytes) in any environment except PRIZM, and about 8K (8192 bytes) from PRIZM.  During execution, one of the first steps taken by the system is to allocate the bank zero areas for your program.  If you have specified a stack size that is larger than available memory, an error message is issued and your program is terminated.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }{\f6\fs18 (*$Stacksize 4096*)              (* Default stack size *)\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 (*$Stacksize 10000*)\par {\*\bkmkend bk20}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compiler directives}{\rxe bk20}}}{\v\fs20 \par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 22 - Standard Procedures and Functions\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 22 - Standard Procedures and Functions\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 22 \endash  Standard Procedures and Functions\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter covers the procedures and functions that are built into the compiler, and do not need to be imported to be available.\par The standard procedures and functions are:\par \par }\pard \qj\fi-1800\li2520\ri1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Procedure\tab Use\par }\pard \qj\fi-1800\li2520\ri1440\widctlpar\adjustright {\fs20 ABS(x)\tab absolute value of x\par CAP(x)\tab return uppercase if x is a lowercase letter\par }{\caps\fs20 chr(}{\fs20 x}{\caps\fs20 )}{\fs20 \tab convert ordinal value x to character equivalent\par DEC(x)\tab decrement x by 1\par DEC(x, n)\tab decrement x by n\par EXCL(s, i)\tab exclude set element i from set s\par FLOAT(x)\tab convert integer value to REAL\par FLOATD(x)\tab convert integer value to LONGREAL\par HALT\tab terminate program execution\par HIGH(x)\tab return high bound of array x\par INC(x)\tab increment x by 1\par INC(x, n)\tab increment x by n\par INCL(s, i)\tab include set element i in set s\par LONG(x)\tab convert from short x to long equivalent\par MAX(t)\tab return the maximum possible value of type t\par MIN(t)\tab return the minimum possible value of type t\par ODD(x)\tab return true if argument is an odd number\par ORD(x)\tab return ordinal value of x\par SHORT(x)\tab convert from long x to short equivalent\par SIZE(x)\tab return the number of bytes required by x\par }{\caps\fs20 trunc(}{\fs20 x}{\caps\fs20 )}{\fs20 \tab truncate whole part of REAL number\par TRUNCD(x)\tab truncate whole part of LONGREAL number\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ABS}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 ABS\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ABS\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE ABS(x: t): t;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The absolute value function takes a single argument.  It returns the absolute value of the argument.  The argument must be one of: INTEGER, LONGINT, REAL or LONGREAL.  The result type is the same as that of the argument.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 a := }{\caps\f6\fs18 abs}{\f6\fs18 (a);\par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 CAP}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 CAP\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CAP\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\caps\f6\fs20 PROCEDURE CAP(}{\f6\fs20 x}{\caps\f6\fs20 : CHAR): CHAR;}{\f6\fs20 \par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This function procedure examines the character passed to it, and if it lies within the range of lowercase letters ['a'..'z'], it is altered and returned as an uppercase letter.  Otherwise, the character is returned unchanged.}{\b\caps \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 CHR}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 CHR\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 CHR\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE }{\caps\f6\fs20 chr}{\f6\fs20 (x: t): }{\caps\f6\fs20 char}{\f6\fs20 ;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\caps\fs20 chr}{\fs20  function converts argument }{\f6\fs18 x}{\fs20 , of ordinal type }{\f6\fs18 t,}{\fs20  into a character.  The argument must be in the valid range for a character, which is 0 to 255.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }{\f6\fs18 PROCEDURE upper(ch: }{\caps\f6\fs18 char}{\f6\fs18 ): }{\caps\f6\fs18 char}{\f6\fs18 ;\par (* return an uppercase character - does the same as CAP(ch) *)\par }{\caps\f6\fs18 begin}{\f6\fs18 \par }{\caps\f6\fs18   if}{\f6\fs18  ch }{\caps\f6\fs18 in}{\f6\fs18  ['a'..'z'] }{\caps\f6\fs18 then}{\f6\fs18 \par     ch := }{\caps\f6\fs18 chr}{\f6\fs18 (}{\caps\f6\fs18 ord}{\f6\fs18 (ch) - }{\caps\f6\fs18 ord}{\f6\fs18 ('a') + }{\caps\f6\fs18 ord}{\f6\fs18 ('A'));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18   RETURN ch;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END upper;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 DEC}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 DEC\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 DEC\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE DEC(VAR x: t);\par PROCEDURE DEC(VAR x: t1; n: t2);\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The DEC procedure is used to decrease the value of variable }{\f6\fs18 x}{\fs20 .  In its first form, the value of }{\f6\fs18 x}{\fs20  is decremented by 1:\par \par }{\f6\fs18 x := x - VAL(t, 1);\par \par }{\fs20 In its second form, the value of }{\f6\fs18 x}{\fs20  is decreased by the value of }{\f6\fs18 n}{\fs20 .  The types }{\f6\fs18 t1}{\fs20  and }{\f6\fs18 t2}{\fs20  must be assignment compatible.  This form is equivalent to the statement:\par \par }{\f6\fs18 x := x - n;\par }{\fs20 \par The variable }{\f6\fs18 x}{\fs20  may be of any scalar type, including enumerations.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 EXCL}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 EXCL\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EXCL\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE EXCL(VAR s: t1; i: t2);\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure removes the element }{\f6\fs18 i}{\fs20  from the set }{\f6\fs18 s}{\fs20 .  This is equivalent to the statement:\par \par }{\f6\fs18 s := s - t1\{i\}\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 FLOAT}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 FLOAT\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FLOAT\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE FLOAT(x: t): REAL;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The function procedure FLOAT converts the integer number represented by }{\f6\fs18 x,}{\fs20  which is of type INTEGER, LONGINT, CARDINAL or LONGCARD, to a single-precision floating-point number.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 HALT}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 HALT\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HALT\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\caps\f6\fs20 procedure halt;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\caps\fs20 halt}{\fs20  procedure is used to abort execution of a program.\par If you wish to terminate your program, and specify your own termination status, then call the procedure }{\f6\fs18 M2Lib.Terminate}{\fs20 , passing it your termination status.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Example:\par \par }{\caps\f6\fs18 if}{\f6\fs18  x < maxint }{\caps\f6\fs18 then}{\f6\fs18 \par   z := x * 2;\par ELSE\par   HALT;\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 HIGH}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 HIGH\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HIGH\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE HIGH(x: t): t2;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The function procedure HIGH takes the argument }{\f6\fs18 x}{\fs20 , which is an array of type }{\f6\fs18 t}{\fs20 , and returns a value that represents the upper bound of the array.  The result is type compatible with an INTEGER or CARDINAL.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 INC}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 INC\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INC\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE INC(VAR x: t);\par PROCEDURE INC(VAR x: t1; n: t2);\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The INC procedure is used to increase the value of variable }{\f6\fs18 x}{\fs20 .  In its first form, the value of }{\f6\fs18 x}{\fs20  is incremented by 1:\par \par }{\f6\fs18 x := x + VAL(t, 1);\par }{\fs20 \par In its second form, the value of }{\f6\fs18 x}{\fs20  is increased by the value of }{\f6\fs18 n}{\fs20 .  The types }{\f6\fs18 t1}{\fs20  and }{\f6\fs18 t2}{\fs20  must be assignment compatible.\par \par }{\f6\fs18 x := x + n;\par }{\fs20 \par The variable }{\f6\fs18 x}{\fs20  may be of any scalar type, including an enumeration.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 INCL}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 INCL\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 INCL\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE INCL(VAR s: t1; i: t2);\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure adds the element }{\f6\fs18 i}{\fs20  to the set }{\f6\fs18 s}{\fs20 .  It is equivalent to:\par \par }{\f6\fs18 s := s + t1\{i\};\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 LONG}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 LONG\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LONG\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE LONG(x: t): t2;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The procedure LONG converts the value of }{\f6\fs18 x}{\fs20 , which is scalar or REAL, to the long value of type LONGINT, LONGCARD or LONGREAL, respectively.\par \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab LONG is an ORCA/Modula-2 extension.  It should not be used if portability is an issue.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 MAX}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 MAX\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MAX\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE MAX(t): t;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The function procedure MAX takes as its only argument the type }{\f6\fs18 t}{\fs20 , and returns the maximum possible value for that type.  The type }{\f6\fs18 t}{\fs20  must be a scalar, REAL or LONGREAL.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 MIN}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 MIN\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MIN\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE MIN(t): t;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The function procedure MIN takes as its only argument the type }{\f6\fs18 t}{\fs20 , and returns the minimum possible value for that type.  The type }{\f6\fs18 t}{\fs20  must be a scalar, REAL or LONGREAL.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ODD}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 ODD\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ODD\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE }{\caps\f6\fs20 odd}{\f6\fs20 (x: t): BOOLEAN;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\caps\fs20 odd}{\fs20  function takes an argument of any scalar type and returns a boolean result.  The result is }{\caps\fs20 true}{\fs20  if the argument is odd, and }{\caps\fs20 false}{\fs20  if it is even.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 For example:\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\caps\f6\fs18 procedure}{\f6\fs18  BinOut(i: }{\caps\f6\fs18 integer}{\f6\fs18 );\par (*\par   OPERATION:\par     Recursively write an integer as a binary number\par \par   Parameters:\par     i - integer to write\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 *)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18   }{\caps\f6\fs18 procedure}{\f6\fs18  BitOut(i, c: }{\caps\f6\fs18 integer}{\f6\fs18 );\par   (*\par     OPERATION:\par       Write the bits\par \par     Parameters:\par       i - integer containing bits\par       c - number of bits left to write\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   *)\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18   }{\caps\f6\fs18 begin}{\f6\fs18  (*BitOut*)\par     IF c > 1 THEN\par       BitOut(i DIV 2, c - 1);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18     END;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18     Write(CHR(ORD('0') + ORD(ODD(i))));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18   END BitOut;\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 BEGIN (*BinOut*)\par   BitOut(i, 16);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END BinOut;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 ORD}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 ORD\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORD\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE }{\caps\f6\fs20 ord}{\f6\fs20 (x: t1): t2;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The }{\caps\fs20 ord}{\fs20  function converts any ordinal type into an integer, and returns that integer as a value that is type compatible with }{\caps\fs20 integer}{\fs20  and CARDINAL.  The ordinal types include integers, enumerations, characters, and booleans.  For enumerations, the value will be the number you get when you count the enumeration constants, starting from zero.  For example, for the definition:\par \par }{\f6\fs18 color = (red,orange,yellow,green,blue,violet);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the ordinal values of each of the enumeration constants are:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\widctlpar\tx2160\adjustright {\f6\fs18 red\tab 0\par orange\tab 1\par yellow\tab 2\par green\tab 3\par blue\tab 4\par violet\tab 5\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 \par }{\fs20 The ordinal values for characters are given by the ASCII character set.\par For boolean values, }{\caps\fs20 ord(true)}{\fs20  = 1 and }{\caps\fs20 ord(false}{\fs20 ) = 0.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 SHORT}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 SHORT\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SHORT\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE SHORT(x: t): t2;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The procedure SHORT converts the value of }{\f6\fs18 x,}{\fs20  which is LONGINT, LONGCARD or LONGREAL, to the short value of type INTEGER, CARDINAL or REAL, respectively.  The result must fall within the legal range of the result type.\par \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab SHORT is an ORCA/Modula-2 extension.  It should not be used if portability is an issue.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 SIZE}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 SIZE\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SIZE\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE SIZE(x): t2;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The procedure function SIZE returns the number of bytes of storage that are required by the argument }{\f6\fs18 x}{\fs20 .  }{\f6\fs18 x}{\fs20  may be a variable or a type.  The result type }{\f6\fs18 t2}{\fs20  is type compatible with INTEGER and CARDINAL.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 TRUNC}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 TRUNC\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TRUNC\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE }{\caps\f6\fs20 trunc}{\f6\fs20 (x: REAL): }{\caps\f6\fs20 integer}{\f6\fs20 ;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Truncates the real argument, returning an integer result.  The result is the largest integer that is less than or equal to the argument for positive arguments, and the smallest integer greater than or equal to the argument for negative arguments.  The result must be in the valid range for integers or an error will result.\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 Examples:\par \par }\pard \qj\fi360\widctlpar\adjustright {\caps\f6\fs18 trunc(1.9) = 1\par trunc(-1.9) = -1\par trunc(0) = 0\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 TRUNCD}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 TRUNCD\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 TRUNCD\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE }{\caps\f6\fs20 truncD}{\f6\fs20 (x: LONGREAL): }{\caps\f6\fs20 LONGINT}{\f6\fs20 ;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Truncates the double precision argument, returning an long integer result.  The result is the largest integer that is less than or equal to the argument for positive arguments, and the smallest integer greater than or equal to the argument for negative arguments.  The result must be in the valid range for long integers or an error will result.\par \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab TRUNCD is an ORCA/Modula-2 extension.  It should not be used if portability is an issue.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 VAL}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 VAL\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 VAL\bxe }}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE VAL(t, x): t;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Although Modula-2 as a language does support Pascal-like type casting, it is not recommended, as no checking is done, and it defeats the strong typing that Modula-2 (and Pascal) encourages.  Using the Pascal-like method of type casting can also be difficult to locate in code when debugging.\par An example of Pascal-like type casting is:\par \par }{\f6\fs18 x := CARDINAL(y);\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 where }{\f6\fs18 x}{\fs20  is a variable of type CARDINAL, and }{\f6\fs18 y}{\fs20  is a variable of some type two bytes in size.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 To make type casting "cleaner", the procedure function VAL is provided.  It transfers (note that it does no conversion or checks on the result) the value of the expression }{\f6\fs18 x}{\fs20  to the type }{\f6\fs18 t}{\fs20 .\par Actual support for the older method of type casting is scheduled to be removed from the language, and the use of VAL is seen as a replacement for it.  VAL is implemented almost universally in Modula-2 compilers, where Pascal-like type casting is not, making VAL more portable.\par The equivalent statement to that above using VAL is:\par \par }{\f6\fs18 x := VAL(CARDINAL, y);\par }{\fs20 \par Note that the type }{\f6\fs18 t}{\fs20  should use the same number of bytes as the type of }{\f6\fs18 y}{\fs20 .\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Chapter 23 - Libraries\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Chapter 23 - Libraries\par }\pard \qj\widctlpar\adjustright {\*\bkmkstart bk21}{\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Chapter 23 \endash  Libraries\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This chapter lists all of the Library modules supplied with ORCA/Modula-2.  These library modules may be broken down into three categories: Tool Interfaces, Standard Libraries, and Extra Libraries.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Tool Interfaces}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Tool Interfaces\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 These modules provide a comprehensive and up-to-date definition of each Apple\~II}{\fs18 GS}{\fs20  tool call.  Where Apple has supplied a data structure, this is also supplied.  This manual does not give any detail as to the actual content of these modules, or how to use them.  For information on how to use the Apple\~II}{\fs18 GS}{\fs20  toolbox, refer to the Apple\~II}{\fs18 GS}{\fs20  Toolbox Reference Manuals, volumes 1-3, and Programmer's Reference for System 6.0..\par While GS/OS is not technically a tool on the Apple\~II}{\fs18 GS}{\fs20  , the interface files used with GS/OS work the same way as a tool.  In addition, the GS/OS module provides a number of utility procedures to allow the conversion of GS/OS pathnames to and from normal Modula-2 strings.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Standard Libraries}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Standard Libraries\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This section lists all of the standard Modula-2 library modules.  These are grouped first by module, then by procedure name.\par The standard libraries are:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1440\li2160\ri1080\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Module\tab Function\par }\pard \qj\fi-1440\li2160\ri1080\keepn\widctlpar\adjustright {\fs20 FileSystem\tab Simplified interface to GS/OS\par InOut\tab Comprehensive text IO interface\par LongMath\tab Interface to SANE for LONGREAL operations\par M2Lib\tab Useful low-level utilities\par MathLib0\tab Interface to SANE for REAL operations\par Storage\tab Simple, but standard, mechanism for heap management\par Strings\tab A suite of standard string operations\par }\pard \qj\fi-1440\li2160\ri1080\widctlpar\adjustright {\fs20 Terminal\tab Simple terminal I/O\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b FileSystem}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v FileSystem\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 File I/O on the Apple\~II}{\fs18 GS}{\fs20  is done using the GS/OS system calls.  While the call level interface for  GS/OS is very flexible, for many operations, it is far more complex than is desired.  This module provides a simple, standard mechanism for reading and writing files on the Apple\~II}{\fs18 GS}{\fs20  .\par All operations on a file are carried out via the type }{\f6\fs20 File}{\fs20 .  This type is used by all of the procedures in this module both as a source for the file reference number, and to indicate to the caller the status of the call.\par The call status is reflected by the field }{\f6\fs20 res}{\fs20 , which will contain a value of }{\f6\fs20 done}{\fs20  if the call was successful, or }{\f6\fs20 notdone}{\fs20  if the call failed for any reason.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Close}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Close\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Close(VAR f: File);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file described by }{\f6\fs20 f}{\fs20  is closed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Delete}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Delete\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Delete(VAR f: File);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file described by }{\f6\fs20 f}{\fs20  must be open for this call to succeed.  If the file is open, it is first closed, and then deleted.}{\par }\pard \qj\widctlpar\adjustright {\par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 GetPos}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 GetPos\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE GetPos(VAR f: File; highpos, lowpos: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file mark for the file described by }{\f6\fs20 f}{\fs20  is returned to the caller in the }{\f6\fs20 highpos}{\fs20  and }{\f6\fs20 lowpos}{\fs20  parameters.  }{\f6\fs20 highpos}{\fs20  is the high word, and }{\f6\fs20 lowpos}{\fs20  is the low word of the file mark.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Length}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Length\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Length(VAR f: File; highpos, lowpos: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file length for the file described by }{\f6\fs20 f}{\fs20  is returned to the caller in the }{\f6\fs20 highpos}{\fs20  and }{\f6\fs20 lowpos}{\fs20  parameters.  }{\f6\fs20 highpos}{\fs20  is the high word, and }{\f6\fs20 lowpos}{\fs20  is the low word of the file length.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Lookup}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Lookup\bxe }}}{\b\fs20 \par }{\f6\fs20 \par PROCEDURE Lookup(VAR f: File; filename: ARRAY OF CHAR;\par    new: BOOLEAN);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\b \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure opens the file specified by the }{\f6\fs20 filename}{\fs20  parameter.  If the file is not found, and the }{\f6\fs20 new}{\fs20  parameter is TRUE, then the file is created.  If the file is not found, and the }{\f6\fs20 new}{\fs20  parameter is FALSE, then no file is opened, and the status of the call is }{\f6\fs20 notdone}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadChar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadChar\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadChar(VAR f: File; VAR ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A character is read from the file described by }{\f6\fs20 f}{\fs20  and placed in }{\f6\fs20 ch}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadWord}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadWord\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadWord(VAR f: File; VAR w: WORD);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A word is read from the file described by }{\f6\fs20 f}{\fs20  and placed in }{\f6\fs20 w}{\fs20 .  Note that }{\f6\fs20 w}{\fs20  can be any word sized simple type (for example, CARDINAL or INTEGER).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Rename}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Rename\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Rename(VAR f: File; filename: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file described by }{\f6\fs20 f}{\fs20  must be open for this call to succeed.  If open, the file is closed, renamed and re-opened, with the file mark as it was before the operation.  The requirement for the file to be open may seem strange, but  this module, being a standard module, must behave in the same way as other implementations of Modula-2.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 SetPos}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 SetPos\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE SetPos(VAR f: File; highpos, lowpos: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file mark for the file described by }{\f6\fs20 f}{\fs20  is changed to the one specified by the }{\f6\fs20 highpos}{\fs20  and }{\f6\fs20 lowpos}{\fs20  parameters.  }{\f6\fs20 highpos}{\fs20  is the high word, and }{\f6\fs20 lowpos}{\fs20  is the low word of the file mark.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteChar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteChar\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteChar(VAR f: File; ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The character }{\f6\fs20 ch}{\fs20  is written to the file described by }{\f6\fs20 f}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteWord}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteWord\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteWord(VAR f: File; w: WORD);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The word value of }{\f6\fs20 w}{\fs20  is written to the file described by }{\f6\fs20 f}{\fs20 .  Note that }{\f6\fs20 w}{\fs20  can be any word sized simple type (for example, CARDINAL or INTEGER).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b InOut}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v InOut\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This module provides a comprehensive suite of procedures that manipulate the text I/O stream.  They allow the writing of numbers and strings to the stream and provide the ability to redirect the text I/O stream to or from a file and error output.\par All procedures in this module set the public variable }{\f6\fs20 Done}{\fs20  based upon the success of the operation.  If it is TRUE upon return from the procedure the operation was successful.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CloseErrorOutput}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CloseErrorOutput\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CloseErrorOutput;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This call reverses the effect of the last call to }{\f6\fs20 OpenErrorOutput}{\fs20 .  Subsequent text is written to the text output stream in use right before the last call to }{\f6\fs20 OpenErrorOutput}{\fs20 .  If }{\f6\fs20 OpenErrorOutput}{\fs20  was not called, subsequent text output is sent to standard out.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CloseInput}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CloseInput\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CloseInput;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This call closes the current input file described by }{\f6\fs20 in}{\fs20 . Subsequent text input comes from standard input.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CloseOutput}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CloseOutput\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CloseOutput;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This call closes the current output file described by }{\f6\fs20 out}{\fs20 . Subsequent text output goes to standard output.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 OpenErrorOutput}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 OpenErrorOutput\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE OpenErrorOutput;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 After calling this procedure all further text output is sent to the error output device.  Before redirecting output to error output, the current text output stream is saved.  You can use }{\f6\fs20 CloseErrorOutput}{\fs20  to stop redirecting text to error output.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 OpenInput}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 OpenInput\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE OpenInput(defext: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\widctlpar\tqr\tx7920\adjustright {\fs20 Use this procedure to prompt the user for a filename, giving it the extension provided in the }{\f6\fs20 defext}{\fs20  parameter.  Once the filename has been obtained, it is opened for input using the publicly declared file variable }{\f6\fs20 in}{\fs20 .\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab If the Standard File tool set is active, the filename is obtained by using the }{\f6\fs20 SFGetFile2}{\fs20  Tool call.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 OpenOutput}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 OpenOutput\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE OpenOutput(defext: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use this procedure to prompt the user for a filename, giving it the extension provided in the }{\f6\fs20 defext}{\fs20  parameter.  Once the filename has been obtained, it is opened for output using the publicly declared file variable }{\f6\fs20 out}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\f20\fs20 }{\b\fs20 \tab Note}{\fs20 \tab If the Standard File tool set is active, the filename is obtained by using the }{\f6\fs20 SFGetFile2}{\fs20  Tool call.\~\~}{\f20\fs18 }{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Read}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Read\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Read(VAR ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a single character from the input stream.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadCard}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadCard\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadCard(VAR x: CARDINAL);\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a string from the input stream, and converts it to a CARDINAL.  If the number entered is outside the legal range of a CARDINAL }{\f6\fs20 Done}{\fs20  is set to FALSE.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadInt}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadInt\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadInt(VAR x: INTEGER);\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a string from the input stream, and converts it to an INTEGER.  If the number entered is outside the legal range of an INTEGER }{\f6\fs20 Done}{\fs20  is set to FALSE.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadLongInt}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadLongInt\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadLongInt(VAR x : LONGINT);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a string from the input stream and converts it to a LONGINT.  If the number entered is outside the legal range of a LONGINT }{\f6\fs20 Done}{\fs20  is set to FALSE.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadLongReal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadLongReal\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadLongReal(VAR x: LONGREAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a string from the input stream and converts it to a LONGREAL.  If the number entered is outside the legal range of a LONGREAL }{\f6\fs20 Done}{\fs20  is set to FALSE.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadReal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadReal\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadReal(VAR x: REAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a string from the input stream and converts it to a REAL.  If the number entered is outside the legal range of a REAL }{\f6\fs20 Done}{\fs20  is set to FALSE.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadString}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadString\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadString(VAR s: ARRAY OF CHAR);\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a sequence of characters not containing blanks or control characters.  Leading spaces are ignored.  Input is terminated by any character less than or equal to a space.  The terminating character is placed in the public variable }{\f6\fs20 termCH}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ReadWrd}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ReadWrd\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ReadWrd(VAR w: WORD);\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure reads a word of data from the input file if one is open.  This procedure should not be used for normal text input operations.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Write}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Write\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Write(ch: CHAR);\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure writes a single character out to the output stream.  The character is not interpreted in any way.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteCard}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteCard\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteCard(x,n: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write CARDINAL }{\f6\fs20 x}{\fs20  with at least }{\f6\fs20 n}{\fs20  characters.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteFixPat}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteFixPat\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteFixPt(x: REAL; n, k: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write REAL }{\f6\fs20 x}{\fs20  using n characters with k digits after the decimal point.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par If k is zero the number is written in exponential format.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteHex}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteHex\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteHex(x,n: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write CARDINAL }{\f6\fs20 x}{\fs20  as a hexadecimal number with four digits.  If }{\f6\fs20 n}{\fs20  is greater than 4, n-4 blanks are added preceding the number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteInt}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteInt\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteInt(x: INTEGER; n: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write INTEGER }{\f6\fs20 x}{\fs20  with at least }{\f6\fs20 n}{\fs20  characters.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteLn}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteLn\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteLn;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Because the carriage return is a non-printing character, it is not normal (and in some cases illegal) to have embedded carriage returns in a string.  This procedure supplies a simple method of writing a carriage return to the output stream.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteLongFixPat}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteLongFixPat\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteLongFixPt(x: LONGREAL; n, k: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write LONGREAL }{\f6\fs20 x}{\fs20  using n characters with k digits after the decimal point.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par If k is zero the number is written in exponential format.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteLongInt}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteLongInt\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteLongInt(x : LONGINT; n: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write LONGINT }{\f6\fs20 x}{\fs20  with at least }{\f6\fs20 n}{\fs20  characters.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteLongReal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteLongReal\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteLongReal(x: REAL; n: CARDINAL);\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write LONGREAL }{\f6\fs20 x}{\fs20  with 4 digits following the decimal point and a total length of at least }{\f6\fs20 n}{\fs20  characters.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteOct}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteOct\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteOct(x,n: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write CARDINAL }{\f6\fs20 x}{\fs20  with at least }{\f6\fs20 n}{\fs20  characters as an octal number.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteReal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteReal\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteReal(x: REAL; n: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write REAL }{\f6\fs20 x}{\fs20  with 2 digits following the decimal point and a total length of at least }{\f6\fs20 n}{\fs20  characters.  If }{\f6\fs20 n}{\fs20  is greater than the number of digits required blanks are added preceding the number.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteString}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteString\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteString(s: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use this procedure to send an entire Modula-2 string to the output stream.  This procedure is capable of detecting end of string correctly, looking for both ASCII.nul and end of physical string.  All characters are output using the current write procedure.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteWrd}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteWrd\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteWrd(w: WORD);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Write a word of data to the current output file, if one is open. This procedure should not be used for normal text output operations.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b LongMath and MathLib0}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v LongMath and MathLib0\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Both of these modules provide the same set of function procedures.  The only difference between the two libraries is that LongMath deals with LONGREAL numbers, while MathLib0 deals with REAL numbers.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 arctan}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 arctan\bxe }}}{\b\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE arctan(x: LONGREAL): LONGREAL;\par PROCEDURE arctan(x: REAL): REAL;\par \par }\pard \fi360\widctlpar\adjustright {\fs20 Returns the arc tangent of the parameter }{\f6\fs20 x}{\fs20 . The result is expressed in radians, and will be in the range -\u960\'b9/2..\u960\'b9/2.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 cos}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 cos\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE cos(x: LONGREAL): LONGREAL;\par PROCEDURE cos(x: REAL): REAL;\par \par }\pard \fi360\widctlpar\adjustright {\fs20 Returns the cosine of the parameter }{\f6\fs20 x}{\fs20 , expressed in radians.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 entier}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 entier\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE entier(x: LONGREAL): LONGINT;\par PROCEDURE entier(x: REAL): INTEGER;\par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The parameter x is converted to the nearest integer and returned.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 exp}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 exp\bxe }}}{\b\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE exp(x: LONGREAL): LONGREAL;\par PROCEDURE exp(x: REAL): REAL;\par \par }\pard \fi360\widctlpar\adjustright {\fs20 Returns the exponent of the parameter }{\f6\fs20 x}{\fs20 .\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 ln}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ln\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ln(x: LONGREAL): LONGREAL;\par PROCEDURE ln(x: REAL): REAL;\par \par }\pard \fi360\widctlpar\adjustright {\fs20 Returns the natural logarithm of the parameter }{\f6\fs20 x}{\fs20 .  It is an error if }{\f6\fs20 x}{\fs20  is less than or equal to zero.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 sin}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 sin\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE sin(x: LONGREAL): LONGREAL;\par PROCEDURE sin(x: REAL): REAL;\par \par }\pard \fi360\widctlpar\adjustright {\fs20 Returns the sine of the parameter }{\f6\fs20 x}{\fs20 , expressed in radians.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 sqrt}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 sqrt\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE sqrt(x: LONGREAL): LONGREAL;\par PROCEDURE sqrt(x: REAL): REAL;\par \par }\pard \fi360\widctlpar\adjustright {\fs20 Returns the square root of the parameter }{\f6\fs20 x}{\fs20 .\par }\pard \widctlpar\adjustright {\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b L2Lib}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v L2Lib\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This module contains a number of lower level and support procedures that allow the compiler to run.  For instance, it contains the Co-Routine support procedures and data structures.\par This module also contains a number of public data structures that are set up at program initialization.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CommandLine}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CommandLine\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 CommandLine\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This is actually the address of a data structure containing the command line passed to your program at program startup.\par If the address is NIL, there is no command line.\par If the address is not NIL, it points to a null terminated string.  The first 8 characters are a shell identifier; for the ORCA shell, this identifier is BYTEWRKS.  The remaining characters are the characters from the command line itself.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CompareBytes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CompareBytes\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CompareBytes(first, second: ADDRESS; len: CARDINAL):\par    INTEGER;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure compares two byte ranges for equality.  It returns a signed INTEGER value indicating the result of the comparison.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\ri3960\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\adjustright {\fs20 result\tab meaning\par }\pard \qj\li720\ri3960\keepn\widctlpar\tx1800\adjustright {\fs20 -1\tab first is less than second\par  0\tab first is the same as second\par }\pard \qj\li720\ri3960\widctlpar\tx1800\adjustright {\fs20  1\tab first is greater than second\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CompareStr}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CompareStr\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CompareStr(first, second: ADDRESS; len: CARDINAL):\par    INTEGER;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure compares two Modula-2 strings for equality.  It returns a signed INTEGER value indicating the result of the comparison.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\ri3960\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\adjustright {\fs20 result\tab meaning\par }\pard \qj\li720\ri3960\keepn\widctlpar\tx1800\adjustright {\fs20 -1\tab first is less than second\par  0\tab first is the same as second\par }\pard \qj\li720\ri3960\widctlpar\tx1800\adjustright {\fs20  1\tab first is greater than second\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CopyBytes}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CopyBytes\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CopyBytes(source, destination: ADDRESS;\par    length: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure copies }{\f6\fs20 length}{\fs20  bytes from the }{\f6\fs20 source}{\fs20  address to the }{\f6\fs20 destination}{\fs20  address.  In doing this, it does checks to handle the possibility of an overlap of memory blocks, but it does not check or handle a situation where either block of memory crosses a bank boundary.  This is supplied as a quick, efficient block memory copy, but if you don't want to worry about things like bank boundaries, then use the }{\f6\fs20 MemoryManager.BlockMove}{\fs20  tool call.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CopyString}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CopyString\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CopyString(srcLen: CARDINAL; source: ADDRESS;\par    length: CARDINAL; destination: ADDRESS);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure copies a range of bytes from }{\f6\fs20 source}{\fs20  to }{\f6\fs20 destination}{\fs20 .  The maximum number of bytes is specified by }{\f6\fs20 length}{\fs20  .  If an }{\f6\fs20 ASCII.nul}{\fs20  character is detected, or the end of the source string is reached during the copy, the copy is terminated.\par These termination conditions allow this procedure to be used for copying any Modula-2 string with a maximum length as specified by the }{\f6\fs20 length}{\fs20  parameter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 FormatLongReal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 FormatLongReal\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE FormatLongReal(x: LONGREAL; n, k:  CARDINAL;\par    VAR str: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Convert the LONGREAL number }{\f6\fs20 x}{\fs20  into a string with max characters }{\f6\fs20 n}{\fs20  and }{\f6\fs20 k}{\fs20  digits after the decimal point.  If }{\f6\fs20 n}{\fs20  is zero the number is converted to exponential format.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 FormatReal}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 FormatReal\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE FormatReal(x: REAL; n, k:  CARDINAL;\par    VAR str: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Convert the REAL number }{\f6\fs20 x}{\fs20  into a string with max characters }{\f6\fs20 n}{\fs20  and }{\f6\fs20 k}{\fs20  digits after the decimal point.  If }{\f6\fs20 n}{\fs20  is zero the number is converted to exponential format.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 GetChar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 GetChar\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE GetChar(VAR ch: CHAR; VAR done: BOOLEAN);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure acts as glue to the ORCA GetC routine for obtaining a character from the standard input device.  The procedure does not return until a character is typed.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 HighWORD}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 HighWORD\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE HighWORD(long: LONGINT): CARDINAL;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This function procedure returns the high word of the LONGINT parameter }{\f6\fs20 long}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 LongWORD}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 LongWORD\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE LongWORD(loword, highword: WORD): LONGINT;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This function procedure combines the }{\f6\fs20 loword}{\fs20  and }{\f6\fs20 highword}{\fs20  parameters, forming a single LONGINT, and returns that LONGINT value.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 LoWORD}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 LoWORD\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE LoWORD(long: LONGINT): CARDINAL;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This function procedure returns the low word of the LONGINT parameter }{\f6\fs20 long}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 PutChar}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 PutChar\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE PutChar(ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure acts as glue to the ORCA }{\f6\fs20 SysCharOut}{\fs20  routine.  It writes a single character to standard output.  This procedure is used by the Terminal module (discussed below) as its default write character procedure.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 PutCharToError}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 PutCharToError\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE PutCharToError(ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure simply acts as glue to the ORCA }{\f6\fs20 SysCharErrOut}{\fs20  routine.  It writes a single character to error output.  This procedure is used by the InOut module when output is directed to the error device by a call to }{\f6\fs20 InOut.OpenErrorOutput}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Terminate}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Terminate\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Terminate(reason: aTerminateStatus);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Calling this procedure causes the running application to terminate.  reason is returned in the accumulator.  Most shells will report this error code in some way.  In the ORCA shell, this result code is placed in the \{Status\} variable.  If it is non-zero, it will stop execution of commands entered on a single command line, and, depending on the setting of the \{Exit\} shell variable, may cause scripts to terminate.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ToolError}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ToolError\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE ToolError(): CARDINAL;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Whenever a call to a tool or GS/OS procedure is made, the status of that call is returned in the accumulator.  After the generated call, the accumulator is saved in a special static variable.  This function procedure returns its value.\par Note that the value returned is the status of the most recent tool or GS/OS call.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 UserID}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 UserID\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE UserID(): CARDINAL;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This function procedure returns the user ID of the currently running application.  This is set up at application initialization, and is the actual user ID supplied by the }{\f6\fs20 MMStartup}{\fs20  call, ORed with 0100H.  Use this function procedure when you are allocating dynamic memory using the Memory Manager tool set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Storage}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Storage\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This module supplies storage management for dynamic variables.  Calls to the Modula-2 standard procedures NEW and DISPOSE are translated into calls to ALLOCATE and DEALLOCATE.  The standard way to provide these two procedures is to import them from this module.\par If you want to bypass the ORCA Memory Manager, and use the Apple\~II}{\fs18 GS}{\fs20  Memory Manager, see the module EZStorage, which deals directly with the toolbox, using the same interface as defined in this module, but also allowing you to do things like allocate stack memory.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ALLOCATE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ALLOCATE\bxe }}}{\b\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE ALLOCATE(VAR a: ADDRESS; size: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Allocate }{\f6\fs20 size}{\fs20  bytes of dynamic memory, placing the starting address of that space in the parameter }{\f6\fs20 a}{\fs20 .\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 Available}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Available\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Available(size: CARDINAL): BOOLEAN;\par }{\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 Returns TRUE if there exists a block of memory at lease }{\f6\fs20 size}{\fs20  bytes in size.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 DEALLOCATE}{\pard\plain \keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 DEALLOCATE\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE DEALLOCATE (VAR a: ADDRESS; size: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Release }{\f6\fs20 size}{\fs20  bytes of dynamic memory back into the free memory pool.  The value of }{\f6\fs20 a}{\fs20  should be the address of the first byte of the block of memory to be released.\par }\pard \fi360\widctlpar\adjustright {\f6\fs20 a}{\fs20  is set to NIL as a result of the deallocation.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Strings}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Strings\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This module provides a suite of procedures for manipulating variable-length character strings.  A string has these characteristics:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\bullet }{\fs20 \tab It is of type ARRAY OF CHAR.\par }{\bullet }{\fs20 \tab The lower bound of the array is zero.\par }{\bullet }{\fs20 \tab The length of the string is the size of the string variable, unless a null character (0C) occurs in the string to indicate end of string.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\outl\f21\fs20 \u-3981\'73}{\b\fs20 \tab Important}{\fs20 \tab Some of these string operations can increase the length of a string.  If the string variable doesn't have enough room to store the result, the output string is truncated to fit in the available space.  There is no warning or error when this happens.\~\~}{\outl\f21\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Assign}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Assign\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Assign(source: ARRAY OF CHAR;\par    VAR destination: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Assign the contents of string variable }{\f6\fs20 source}{\fs20  into string variable }{\f6\fs20 destination}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 CompareStr}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 CompareStr\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE CompareStr(s1, s2: ARRAY F CHAR): INTEGER;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure compares the two Modula-2 strings }{\f6\fs20 s1}{\fs20  and }{\f6\fs20 s2}{\fs20  for equality.  It returns a signed INTEGER value indicating the result of the comparison.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li720\ri3960\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1800\adjustright {\fs20 result\tab meaning\par }\pard \qj\li720\ri3960\keepn\widctlpar\tx1800\adjustright {\fs20 -1\tab first is less than second\par  0\tab first is the same as second\par }\pard \qj\li720\ri3960\widctlpar\tx1800\adjustright {\fs20  1\tab first is greater than second\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Concat}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Concat\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Concat(s1, s2: ARRAY OF CHAR;\par    VAR result: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Concatenate two strings }{\f6\fs20 s1}{\fs20  and }{\f6\fs20 s2}{\fs20 , placing the result in }{\f6\fs20 result}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Copy}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Copy\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Copy(str: ARRAY OF CHAR; inx: CARDINAL; len: CARDINAL;\par    VAR result: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Copy at most }{\f6\fs20 len}{\fs20  characters from }{\f6\fs20 str}{\fs20  into }{\f6\fs20 result}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Delete}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Delete\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Delete(VAR str: ARRAY OF CHAR; inx: CARDINAL;\par    len: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Delete }{\f6\fs20 len}{\fs20  characters from }{\f6\fs20 str}{\fs20 , starting at }{\f6\fs20 str[inx]}{\fs20 .\par Nothing happens if }{\f6\fs20 inx}{\fs20  is equal or greater than }{\f6\fs20 Length(str)}{\fs20 .  If there are not }{\f6\fs20 len}{\fs20  characters to delete, all characters to the end of string are deleted.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Insert}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Insert\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Insert(substr: ARRAY OF CHAR; VAR str: ARRAY OF CHAR;\par    inx: CARDINAL);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Insert the string }{\f6\fs20 substr}{\fs20  into }{\f6\fs20 str}{\fs20 , starting at }{\f6\fs20 str[inx]}{\fs20 .\par If }{\f6\fs20 inx}{\fs20  is equal or greater than }{\f6\fs20 Length(str)}{\fs20  then }{\f6\fs20 substr}{\fs20  is appended to the end of str.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Length}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Length\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Length(str: ARRAY OF CHAR): CARDINAL;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Return the number of characters in a string.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Pos}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Pos\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Pos(substr, str: ARRAY OF CHAR): CARDINAL;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Return the index into }{\f6\fs20 str}{\fs20  of the first occurrence of the }{\f6\fs20 substr}{\fs20 .  If no occurrence of the substring is found, Pos returns a value greater than HIGH(str).\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b System}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v System\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Modula-2 as a language tries to prod the programmer towards writing generic code where possible, but realizes that there are times where you must delve lower into the heart of the machine you are working on.\par To support this, Modula-2 supplies the standard module SYSTEM, in which a number of system like procedures and types exist.\par Some of the procedures in this module are common to most Modula-2 compilers, and may be used across platforms.  Others (Marked with }{\f21\fs20 \u-4000\'60}{\fs20 ) are specific to this implementation of Modula-2, and should not be used at all if portability is an issue.\par The types ADDRESS, BYTE, PROC and WORD are discussed in Chapter 12.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 ADR}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 ADR\bxe }}}{\b\fs20 \par \par }{\f6\fs20 PROCEDURE ADR(x: t): ADDRESS;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ADR procedure returns the address of the argument }{\f6\fs18 x}{\fs20 , where }{\f6\fs18 x}{\fs20  is a variable, string constant or procedure.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 DISPOSE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 DISPOSE\bxe }}}{\b\fs20 \par \par }{\f6\fs20 PROCEDURE DISPOSE(x);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Deallocates the memory block pointed to by }{\f6\fs18 x}{\fs20 , which is }{\f6\fs18 TSIZE(x)}{\fs20  bytes in length.  }{\f6\fs18 x}{\fs20  must be a pointer type.  DISPOSE calls a procedure with the definition:\par \par }{\f6\fs18 PROCEDURE DEALLOCATE(VAR x: ADDRESS; n: CARDINAL);\par }{\fs20 \par You must import a procedure with this definition to use DISPOSE.  This is normally done by importing }{\f6\fs18 Storage.DEALLOCATE}{\fs20 ; however, it is possible to import your own memory deallocation procedure, so long as it has the same definition.\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20 GETREG\tab }{\f21\fs20 \u-4000\'60}{\field{\*\fldinst {\f21\fs20 \u-4064\'20\u-4008\'58\u-4027\'45\u-4064\'20}{\b\fs20  "GETREG\tab }{\f21\fs20 \u-4000\'60}{\b\fs20 " \\b }}{\fldrslt }}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }{\f6\fs20 PROCEDURE GETREG(r: CARDINAL; x: CARDINAL); \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The GETREG procedure places the value of the specified register in the variable }{\f6\fs18 x}{\fs20 .  }{\f6\fs18 r}{\fs20  specifies the register to return.  The module W65C816 defines the various registers available through this procedure.  They are:\par \par }\pard \qj\li720\ri1260\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\tx4320\tx5760\adjustright {\fs20 Register name\tab Which 65816 Register(s)\tab Size\tab Value for }{\f6\fs18 r}{\fs20 \par }\pard \qj\li720\ri1260\keepn\widctlpar\tx2160\tx4320\tx5760\adjustright {\fs20 CPU\tab A & X Combination\tab Longword\tab 0\par Accumulator\tab A\tab Word\tab 1\par X Register\tab X\tab Word\tab 2\par }\pard \qj\li720\ri1260\widctlpar\tx2160\tx4320\tx5760\adjustright {\fs20 Y Register\tab Y\tab Word\tab 3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1800\li1800\ri1080\widctlpar\tx440\adjustright {\outl\f21\fs20 \u-3981\'73}{\b\fs20 \tab Important}{\fs20 \tab The variable }{\f6\fs18 x}{\fs20  should not be an array element, parameter, field within a record or any other complex structure, since the value of the register may be destroyed in the act of determining the variables address.\~\~}{\outl\f21\fs14 \u-3981\'73}{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20 INLINE\tab }{\f21\fs20 \u-4000\'60}{\field{\*\fldinst {\f21\fs20 \u-4064\'20\u-4008\'58\u-4027\'45\u-4064\'20}{\b\fs20  "INLINE\tab }{\f21\fs20 \u-4000\'60}{\b\fs20 " \\b }}{\fldrslt }}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }{\f6\fs20 PROCEDURE INLINE(x);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure is used to insert one or more bytes of code into the object file.  The argument }{\f6\fs18 x}{\fs20  must be a constant.  INLINE is capable of accepting a stream of arguments.\par For example:\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 MODULE Urk;\par FROM W65C816 IMPORT PHA, JSL, PLA;\par BEGIN\par   INLINE(PHA);\par   INLINE(JSL);\par   INLINE(0);\par   INLINE(0);\par   INLINE(0);\par   INLINE(PLA);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Urk.\par \par }\pard \qj\widctlpar\adjustright {\fs20 Can just as easily be coded as:\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 MODULE Urk;\par FROM W65C816 IMPORT PHA, JSL, PLA;\par BEGIN\par   INLINE(PHA);\par   INLINE(JSL, 0, 0, 0);\par   INLINE(PLA);\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Urk.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 IOTRANSFER}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 IOTRANSFER\bxe }}}{\b\fs20 \par \par }{\f6\fs20 PROCEDURE IOTRANSFER(VAR p1, p2: ADDRESS; I: aVRN);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Calling this procedure causes a switch from one process to another.  }{\f6\fs18 p1}{\fs20  is the address of the current process descriptor, and }{\f6\fs18 p2}{\fs20  is the address of the process descriptor that is being switched to.  The third parameter, }{\f6\fs18 I}{\fs20 , specifies the interrupt vector to which the interrupt process is tied.\par Note that while IOTRANSFER is supplied, and is implemented to match the definition found in the standard, this is not an efficient mechanism for interrupt handling.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 NEW}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 NEW\bxe }}}{\b\fs20 \par \par }{\f6\fs20 PROCEDURE NEW(x);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Allocates a block of memory }{\f6\fs18 TSIZE(x)}{\fs20  bytes in length, placing its address in the pointer variable }{\f6\fs18 x.}{\fs20   NEW calls a procedure with the definition:\par \par }{\f6\fs18 PROCEDURE ALLOCATE(VAR x: ADDRESS; n: CARDINAL);\par }{\fs20 \par You must import a procedure with this definition.  This is normally done by importing }{\f6\fs18 Storage.ALLOCATE}{\fs20 ; however, it is possible to import your own memory allocation procedure, so long as it has the same definition.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 NEWPROCESS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 NEWPROCESS\bxe }}}{\b\fs20 \par \par }{\f6\fs20 PROCEDURE NEWPROCESS(P: PROC; A: ADDRESS; N: CARDINAL;\par    VAR P1: ADDRESS);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure creates a new process descriptor, and stores the relevant information for a TRANSFER call.\par The parameters are as follows:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 P\tab This is the name of the procedure used to form the mainline of the process being created.\par A\tab Each process requires its own stack so that it can run independently of the others.  Before calling NEWPROCESS, you should allocate some bank zero memory for this purpose.  This parameter is the address of that stack space.\par N\tab This parameter indicates the size of the stack.\par P1\tab This result parameter should be of type ADDRESS, and upon return, it contains the address of the newly formed process descriptor.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par Note that the definition of a process descriptor is found in the module M2Lib, and that calling NEWPROCESS actually generates a call to }{\f6\fs18 M2Lib.NEWPROCESS}{\fs20 .\par \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20 SETREG}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 SETREG\bxe }}}{\b\fs20 \tab }{\f21\fs20 \u-4000\'60}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }{\f6\fs20 PROCEDURE SETREG(r: CARDINAL; x: CARDINAL); \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The SETREG procedure places the value of }{\f6\fs18 x}{\fs20  into the specified register.  }{\f6\fs18 r}{\fs20  specifies which register to alter.  The module W65C816 defines the various registers available through this procedure.  They are:\par \par }\pard \qj\li720\ri1260\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\tx4320\tx5760\adjustright {\fs20 Register name\tab Which 65816 Register(s)\tab Size\tab Value for }{\f6\fs18 r}{\fs20 \par }\pard \qj\li720\ri1260\keepn\widctlpar\tx2160\tx4320\tx5760\adjustright {\fs20 CPU\tab A & X Combination\tab Longword\tab 0\par Accumulator\tab A\tab Word\tab 1\par X Register\tab X\tab Word\tab 2\par }\pard \qj\li720\ri1260\widctlpar\tx2160\tx4320\tx5760\adjustright {\fs20 Y Register\tab Y\tab Word\tab 3\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7920\adjustright {\b\fs20 SHIFT}{\pard\plain \qj\keepn\widctlpar\tqr\tx7920\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 }{\b\v\fs20 SHIFT\bxe }}}{\b\fs20 \tab }{\f21\fs20 \u-4000\'60}{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 \par }{\f6\fs20 PROCEDURE SHIFT(x: t1; n: INTEGER): t1;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure takes the value of }{\f6\fs18 x}{\fs20  and shifts it left or right by }{\f6\fs18 n}{\fs20  bits.  If }{\f6\fs18 n < 0}{\fs20  then it is shifted right.  If }{\f6\fs18 n > 0}{\fs20  then it is shifted left.  The result is the same type as that of }{\f6\fs18 x}{\fs20 .  Note that }{\f6\fs18 x}{\fs20  may only be a basic type four bytes or less in size.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 TRANSFER}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 TRANSFER\bxe }}}{\b\fs20 \par \par }{\f6\fs20 PROCEDURE TRANSFER(VAR p1, p2: ADDRESS);\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Calling this procedure causes a switch from one process to another.  }{\f6\fs18 p1}{\fs20  is the address of the current process descriptor and }{\f6\fs18 p2}{\fs20  is the address of the process descriptor that is being switched to.\par Calling TRANSFER actually generates a call to }{\f6\fs18 M2Lib.TRANSFER}{\fs20 .\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 TSIZE}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 TSIZE\bxe }}}{\b\fs20 \par \par }{\f6\fs20 PROCEDURE TSIZE(t): t2;\par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The procedure function TSIZE returns the number of bytes that are required by the type }{\f6\fs18 t}{\fs20 .  The result type }{\f6\fs18 t2}{\fs20  is type compatible with INTEGER and CARDINAL.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Terminal}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Terminal\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This module provides simple low level terminal I/O in the form of two procedures that read or write a character.  To add flexibility to the module, all of the character I/O is done via two procedure variables, so that you may assign your own character I/O procedures.  This gives a simple way to read or write from some other source.\par When it hasn't specifically been asked to access a file, the InOut module uses this module for all of its character I/O.  You can change the input or output locations using this module, then perform the input or output with InOut.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 AssignRead}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 AssignRead\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE AssignRead(readProc: aReadProc);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use this procedure when you wish to replace the standard character read routine with one of your own.  Remember that the definition of your procedure must be compatible with the type }{\f6\fs20 aReadProc}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 AssignWrite}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 AssignWrite\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE AssignWrite(writeProc: aWriteProc);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use this procedure when you wish to replace the standard character write routine with one of your own.  Remember that the definition of your procedure must be compatible with the type }{\f6\fs20 aWriteProc}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 BusyRead}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 BusyRead\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE BusyRead(VAR ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Normally, when you read a character, and none is entered, the read procedure will wait around until one is supplied.  This procedure looks first to see if a character is pending, and if not, it returns, with }{\f6\fs20 ch}{\fs20  containing a value of }{\f6\fs20 ASCII.nul}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 DeassignRead}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 DeassignRead\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE DeassignRead;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use this procedure when you wish to revert to the standard character read routine.  Nothing happens if you have not used }{\f6\fs20 AssignRead}{\fs20  to change the read procedure.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 DeassignWrite}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 DeassignWrite\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE DeassignWrite;\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use this procedure when you wish to revert to the standard character write routine.  Nothing happens if you have not used }{\f6\fs20 AssignWrite}{\fs20  to change the write procedure.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Read}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Read\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Read(VAR ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure will read a character from the terminal.  If none is pending, it will wait until one is supplied before returning.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 Write}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 Write\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE Write(ch: CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure writes a single character out to the output stream.  The character is not interpreted in any way.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteLn}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteLn\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteLn;\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Because the carriage return is a non-printing character, it is not normal (and in some cases illegal) to have embedded carriage returns in a string.  This procedure supplies a simple method of writing a carriage return to the output stream.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 WriteString}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 WriteString\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE WriteString(string: ARRAY OF CHAR);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Use this procedure to send an entire Modula-2 string to the output stream.  Note that this procedure is capable of detecting end of string correctly, looking for both ASCII.nul and end of physical string.  All characters are output using the current write procedure.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b TermProc}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v TermProc\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When a program terminates, this procedure variable is examined.  If it has been assigned to be the address of a termination procedure, that procedure is called.  This gives the application a chance to carry out some actions before returning control to the shell or finder.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 IOTRANSFER}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 IOTRANSFER\bxe }}}{\b\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE IOTRANSFER(VAR p1, p2: ADDRESS; I: aVRN);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure provides the Modula-2 standard IOTRANSFER call.  A brief lineup of the actions taken by this call are:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\bullet }{\fs20 \tab Save current environment in }{\f6\fs20 p1}{\fs20 \par }{\bullet }{\fs20 \tab Bind Interrupt to the specified vector\par }{\bullet }{\fs20 \tab Resume the process described by }{\f6\fs20 p2}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When an interrupt occurs, the system will return control to a run-time interrupt handler which:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\bullet \tab }{\fs20 Saves the current environment in }{\f6\fs20 p2}{\fs20 \par }{\bullet \tab }{\fs20 Resumes the process described by }{\f6\fs20 p1}{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par That process should handle the interrupt, and execute another IOTRANSFER as quickly as possible.  When it does, the actions are slightly  different:\par \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\bullet \tab }{\fs20 Save the current environment in }{\f6\fs20 p1}{\fs20 \par }{\bullet \tab }{\fs20 Unbind Interrupt that was previously bound\par }{\bullet \tab }{\fs20 Bind interrupt to the specified vector\par }{\bullet \tab }{\fs20 Restore the environment saved in }{\f6\fs20 p2}{\fs20 \par }{\bullet \tab }{\fs20 RTL back to GS/OS (in effect, this resumes }{\f6\fs20 p2}{\fs20 )\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par By definition, an interrupt that is bound by IOTRANSFER is good for one instance of the interrupt only.  Also, because of the definition of the procedure IOTRANSFER, "I" could well be a variable.  This would allow the programmer to be sneaky and change from one interrupt to another midstream by changing the vector in each execution of IOTRANSFER.\par Because of the complications listed in the previous paragraph, it is necessary to unbind the interrupt each successive time we call IOTRANSFER, then re-bind it.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 NEWPROCESS}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 NEWPROCESS\bxe }}}{\b\fs20 \par }{\fs20 \par }{\f6\fs20 PROCEDURE NEWPROCESS(P: PROC; A: ADDRESS; n: CARDINAL;\par    VAR p1: ADDRESS);\par }\pard \keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure provides the Modula-2 standard NEWPROCESS call.  It creates a new process descriptor and stores the relevant information within it, in preparation for a TRANSFER call (see M2Lib.TRANSFER).\par Note that the process descriptor that is created is the same as the format described in M2Lib.DEF as "aProcessDescriptor".\par }\pard \widctlpar\adjustright {\fs20 \par Parameters:\par \par }\pard \fi-360\li720\widctlpar\adjustright {\fs20 P\tab The address of the co-routine entry point.\par A\tab The base address of the work space (stack).\par n\tab The size in bytes of the work space (stack).\par p1\tab The result parameter (address of actual).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\fs20 TRANSFER}{\pard\plain \qj\keepn\widctlpar\adjustright \b\v\f4\fs20\cgrid {\xe {\b\v\fs20 TRANSFER\bxe }}}{\b\fs20 \par }{\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs20 PROCEDURE TRANSFER(VAR p1, p2: ADDRESS);\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This procedure provides the Modula-2 standard TRANSFER call.  Its effect is to suspend the current process or co-routine, saving its state in }{\f6\fs20 p1}{\fs20 , and resume the process or co-routine described by }{\f6\fs20 p2}{\fs20 .\par It saves the following run-time items in the process descriptor whose address is }{\f6\fs20 p1}{\fs20 :\par }\pard \fi360\widctlpar\adjustright {\fs20 \par }\pard \li720\widctlpar\adjustright {\fs20 Top of Stack\par Bottom of Stack\par StackFramePointer\par Display\par Stack register\par Direct page register\par 24 Bit program counter\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \fi360\widctlpar\adjustright {\fs20 The Data Bank register is not currently saved.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 After saving this information, these same items are loaded from the process descriptor whose address is }{\f6\fs20 p2}{\fs20 .\par Note that although this describes the resulting affect, the actual order may be different.  It may be that both }{\f6\fs20 p1}{\fs20  and }{\f6\fs20 p2}{\fs20  point to the same descriptor.  As such, the actual code must preserve the original descriptor before overwriting it with the current run-time variables.\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Other Libraries}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Other Libraries\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In addition to these standard libraries, there are several other libraries that come with Modula-2.  These are provided on an as-is basis, without further documentation.  We may add, delete, or change routines in these nonstandard libraries over a period of time.\par \par }\pard \qj\fi-1800\li2160\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Library Module\tab Function\par }\pard \qj\fi-1800\li2160\widctlpar\adjustright {\fs20 ConsoleIO\tab Interface to the GS/OS Console Driver\par Common\tab Contains universally used types and structures\par EZCommandLine\tab Utility procedures for manipulating the command line\par EZDump\tab Code used for reading and writing PMD files\par EZFileSystem\tab A suite of procedures to make File I/O easier\par GSBug\tab Interface to the GSBug developer utility\par FastFileSystem\tab File system like interface to the ORCA FastFile system\par NumberConversion\tab Utility procedures for converting numbers to/from strings\par OrcaShell\tab Interface to the ORCA Shell Calls\par RealConversions\tab Utility procedures for converting real numbers to and from strings\par W65C816\tab Constants for use with the INLINE Statement\par ASCII\tab Standard ASCII constants\par EZTools\tab Utility procedures to simplify the starting up of the desktop\par EZPaths\tab Utility module for manipulating Unix like path variables\par EZStorage\tab A storage module that deals directly with the Apple\~II}{\fs18 GS}{\fs20  Memory Manager\par CharSet\tab Provides a type called aCHARSet.\par Lists\tab Suite of procedures for the manipulation of Linked Lists\par ListUtility\tab Complementary module to Lists\par EZStrings\tab A number of procedures to complement the standard Strings module\par SuperRead\tab A generic token based reader\par }\pard \widctlpar\adjustright {\*\bkmkend bk21}{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}{\rxe bk21}}}{\v\fs20 \par }\pard \qj\widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendices\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix A - Error Messages\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Appendix A - Error Messages\par }\pard \qj\widctlpar\adjustright {\pard\plain \qj\widctlpar\adjustright \v\f4\cgrid {\tc {\v }{\v Appendix A \endash  Error Messages\tcl1}}}{\v \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compilation errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 The errors flagged during the development of a program are of three basic types:  compilation errors, linking errors, and execution errors.  Compilation errors are those that are flagged by the compiler when it is compiling your program.  These are generally caused by mistakes in typing or simple omissions in the source code.  Compilation errors are divided into three categories:  terminal errors, non-terminal errors, and internal errors.  Terminal errors are serious enough to stop compilation.  Frequently, there is nothing at all wrong with your program.  An example is an out of memory error:  on a computer with more memory, the program might compile and work correctly, but the compiler can't continue.  Non-terminal errors are generally caused by an error in programming.  The compiler continues on, reporting any other errors it finds, but it does not create a program that can be linked or executed.  These errors sometimes cause other spurious errors later in the compile.  If the second or subsequent errors don't make sense, fix the errors that do make sense \endash  the rest will often vanish, or the compiler might make more sense of the program, and be able to diagnose the real problem better.  The last category of compiler error is the internal error.  These are checks within the compiler, and should not normally be seen.  If one of these errors occurs without first seeing a non-terminal error, please report it to the publisher.  In that situation, the error generally indicates a bug in the compiler.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link errors}}}{\fs20 Linking errors are those that are reported by the linker when it is processing the object modules produced by the compiler.  These are typically caused by lack of memory for the object code or  data, or by incorrectly linking files from different modules.  If you receive "Out of memory" messages from the linker, try using the large memory model available with the compiler, or you can break up your program into different load segments.  When the linker issues "Unresolved reference" or "Duplicate reference" errors, you have probably made a mistake in your external declarations.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 run-time errors}}}{\fs20 Execution errors occur when your program is running.  These can be detectable mistakes, such as division by zero, or can be severe enough to cause the computer to crash, such as accessing memory in unexpected ways, as with pointer variables containing invalid addresses. \par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Terminal Compilation Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Terminal Compilation Errors\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\pard\plain \qj\fi360\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 compilation errors}}}{\v\fs20 \par }{\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 The CDA, NDA, RTL, CDEV, INIT directives are mutually exclusive\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler does not allow any combination of these directives, and this error is generated when one is detected.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 compiler directive must occur before the module declaration\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Some compiler directives are only legal before the module header of an implementation or program module.  This error is generated when one of these directives is used illegally.}{\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 compiler directive not legal inside procedure scope\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Some compiler  directives are not legal within the scope of a procedure. This error is generated when such a directive is so located.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 error in format of symbol file\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The symbol file is corrupt.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 identifier buffer overflow\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has run out of identifier space.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 output file not created on disk (directory/volume full?)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has received an error when trying to write the object or reference file to disk.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Symbol file has wrong file/aux type\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Symbol files must have the correct filetype (Developer Utility, 53H) and auxtype (8006H).}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 symbol file not successfully opened\par }{\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler was unable to find or open the symbol file.  Insure that the symbol file is located in 13:M2Defs, 8:, or within a directory specified in the M2SYM environment variable.\par }\pard \qj\widctlpar\adjustright {\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Symbol file was generated by another version of the compiler\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has tried to read a symbol file that was generated by an old version of the compiler.  If this error is detected, then you can assume that the version of the symbol file is incompatible with that of the compiler you are using.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unable to create reference/symbol file.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has detected an error when trying to write the reference or symbol file to disk.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unable to extend file (out of memory?)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler creates all of its output files in memory.  If it runs out of memory when doing so, this error is generated.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 writing of symbol file failed\par }{\f6\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has detected an error while trying to write the symbol file to disk.}{\f6\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Non-Terminal Compilation Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Non-Terminal Compilation Errors\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 '(' left parenthesis expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a left parenthesis, but did not see one.  Compilation continued as though a '(' had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 ')' right parenthesis expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a right parenthesis, but did not see one.  Compilation continued as though a ')' had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 ',' comma expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a comma, but did not see one.  Compilation continued as though a comma had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 '.' period expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a period, but did not see one.  Compilation continued as though a period had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6 '..' ellipsis expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an ellipsis, but did not see one.  Compilation continued as though one had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 ':' colon expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a colon, but did not see one.  Compilation continued as though a colon had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 ':=' assignment expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an assignment symbol, but did not see one.  Compilation continued as though a ':=' had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 ';' semicolon expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a semicolon, but did not see one.  Compilation continued as though a semicolon had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 '=' equal sign expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an equal sign, but did not see one.  Compilation continued as though a '=' had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 ']' right bracket expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a right bracket, but did not see one.  Compilation continued as though a ']' had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 '\}' right brace expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find a right brace, but did not see one.  Compilation continued as though a '\}' had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 'Pascal' procedures must not be nested\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to nest a procedure while the "Pascal" compiler directive was turned on.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 \{a..b\}: type of either 'a' or 'b' is not equal to the base type of the set\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a set constant where one of the bounds was of a type not the same as the base type of the set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 address too large (compiler error)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a record type greater than 32K in length, or a procedure with more than 32K of parameters and local variables.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 array has too many (> 65536) elements\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has tried to generate an index for an array that has more than 65536 elements. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 array has too many elements (> 65536)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an array with more than 65536 elements.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 array size too large\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the declaration of an array that was greater than 64K in physical length.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 assignment of a negative integer to a cardinal variable\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the assignment of a negative integer constant to a variable of type CARDINAL.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 assignment of a negative integer to a long cardinal variable\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the assignment of a negative integer constant to a variable of type LONGCARD.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 assignment to non-variable\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to assign a value to a constant, type or procedure\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 call of an object which is not a procedure\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt was made to call a type, constant, or non-procedure variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 cardinal value assigned to integer variable too large\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an assignment of a CARDINAL constant to an INTEGER variable where the constant value was outside the legal bounds for an INTEGER.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 comment without closing *)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the end of the source file without finding a closing comment symbol.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 constant index out of range\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has tried to calculate a constant index, and found that it exceeds the bounds of the array.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 constant out of legal range\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an assignment of a constant that was outside the legal range of the type to which it was being assigned.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 control character within string\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a non-printing character within a string.  Compilation continued as though the illegal character was the end of string.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 declaration followed by illegal symbol\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler was expecting either }{\f6\fs20 BEGIN}{\fs20  or }{\f6\fs20 END}{\fs20  after a declaration section, but did not find one.  Compilation continued after the next }{\f6\fs20 BEGIN}{\fs20  or }{\f6\fs20 END}{\fs20  symbol.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 dereferenced variable is not a pointer\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the dereferencing of a variable that was not declared as a pointer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 division by zero, or modulus with negative value\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to carry out a divide or modulus by zero when evaluating a constant expression.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 DO expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 DO}{\fs20 , but did not.  Compilation continued as though }{\f6\fs20 DO}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 END expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 END}{\fs20 , but did not.  Compilation continued as though }{\f6\fs20 END}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 EXIT not inside a LOOP statement\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an }{\f6\fs20 EXIT}{\fs20  statement outside the scope of a }{\f6\fs20 LOOP}{\fs20  statement.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 export list not allowed in program module\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an export list within an IMPLEMENTATION or PROGRAM module.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 expression must contain constant operands only\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 While evaluating a constant expression, the compiler detected a symbol that was not  a constant.  Compilation continued as though the symbol was a constant of value one (1).}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 expression not addressable (implementation restriction)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to pass a constant, type, or procedure as a parameter, where the parameter is an }{\f6\fs20 ARRAY OF BYTE}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 factor starts with illegal symbol\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The indicated factor within an expression begins with an illegal symbol.  Compilation continued after the estimated end of expression.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 fewer actual than formal parameters\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a procedure call that lacked at least one parameter, based upon the formal procedure definition.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 function in DEFINITION, pure procedure in IMPLEMENTATION\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling the implementation of a procedure declared within the definition module, the compiler detected a procedure without a result specification that was defined as having one in the definition module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 identifier, (, or [ expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An identifier, a left parenthesis or left bracket was expected, but not found when looking for a simple type.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 identifier, ARRAY, RECORD, SET, POINTER, PROCEDURE, (, or [ expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler was expecting one of the specified symbols when looking for a type, and one was not found.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 identifier expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find an identifier, but found some other symbol.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 identifier not declared or not visible\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found an identifier that has not been declared within the current scope.  This error is also reported when an identifier is found within an import list that could not be found in the imported modules definition.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 identifiers in heading and at end do not match\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The procedure or module name found after the }{\f6\fs20 END}{\fs20  symbol does not match the one found at the beginning of the procedure or module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal base type of set\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 ORCA/Modula-2 supports sets with a maximum of 256 elements.  The compiler detected a set declaration with more than 256 elements.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal base type of subrange\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a subrange that did not have as its base type a simple-type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal character in number\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an illegal digit when evaluating a real or floating point number.  Compilation continued as though the illegal digit was deleted from the source.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal digit, or number too large\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When reading a numerical symbol, the compiler detected an illegal digit (not in the set \{'0'..'9', 'A'..'F', L, E\}), or the number was too large to fit within  a LONGCARD variable.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal selector for constant index / field\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to index an object that was not an array.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal type for floating point operation\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a floating point operation on a non-real type.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal type of CASE expression\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The expression following the CASE symbol was not of type: BOOLEAN, CHAR, CARDINAL, INTEGER, or an enumerated type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal type of control variable\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The control variable used within the FOR statement was not of type: BOOLEAN, CHAR, CARDINAL, INTEGER, or an enumerated type.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal type of control variable in FOR statement\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the use of a }{\f6\fs20 VAR}{\fs20  parameter, or a non-local variable as a control variable in a }{\f6\fs20 FOR}{\fs20  statement.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal type of case expression\par \par }\pard \qj\fi260\widctlpar\adjustright {\fs20 The compiler detected a CASE expression that was not a simple type.\par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal type of procedure result\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to cast to a non-simple type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal use of module\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has detected the use of a module name in an illegal position.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 illegal use of register (locked) (compiler error)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler tried to use a register that was already locked by the code generator.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 IMPORT expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 IMPORT}{\fs20 , but did not.  Compilation continued as though I}{\f6\fs20 MPORT}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 incompatible assignment\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found that the result of an expression was not assignment compatible with the destination variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 incompatible operand types\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The two operands on either side of the operator have incompatible types.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 incompatible type of label or of subrange bound\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The type of a }{\f6\fs20 CASE}{\fs20  label is incompatible with the CASE expression, or the type of the subrange bound is incompatible  with that of the type it is a subrange of.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 incorrect priority specification\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an illegal priority value (i.e. > 15).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 incorrect type of parameter of standard procedure\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a parameter being passed to a standard procedure that had the wrong type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 index type of array must be a subrange\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an array declaration with an index type that was not a subrange or enumerated type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 indexed variable is not an array, or the index has the wrong type\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has tried to index a variable that is not an array, or the index variable is not a legal type for the operation.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 integer too small for sign inversion\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to sign invert the value of an integer or longint constant that was too small to be legally inverted.  For example -32768 sign inverted would be 32768, which is outside the legal bounds of an integer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Invalid Directive syntax\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a compiler directive with an invalid syntax.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 keys of imported symbol files do not match\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When a definition module is compiled, each of the imported modules are referenced in the symbol file, along with a "key" that identifies the specific compilation time for each.  When that symbol file is then read later by the compiler, and the compiler has also imported one of the modules referenced within the symbol file, the "key" reference is checked against that of the key that was read in earlier.  If they do no match, then this error is generated.\par This is done to ensure that your definition modules are all compatible, and prevents you from using old definitions in a symbol file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 literal string is greater then max string length (255 characters)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a string constant that exceeded the maximum length.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 long cardinal value assigned to long integer variable too large\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an assignment of a LONGCARD constant to an LONGINT variable where the constant value was outside the legal bounds for an LONGINT.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 low bound > high bound\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a low bound of a subrange that was greater in value than that of the high bound.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Maximum procedure nesting exceeded (max = 10)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a procedure nested more then 10 levels deep.\par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 mismatch between result type specifications\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling the implementation of a procedure declared within the definition module, the compiler detected a result type that differed from the one in the definition module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 mismatch between type specifications\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling the implementation of a procedure declared within the definition module, the compiler detected one or more parameters that had different type declarations to those in the  definition module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 mismatch between VAR specifications\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling the implementation of a procedure declared within the definition module, the compiler detected one or more parameters that differed in their "VAR" status from the definition module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 mismatch of a parameter of P with the formal type list of T\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a mismatch between an actual parameter of a procedure and a formal parameter of a procedure variable, to which the procedure was being assigned.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 MODULE expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 MODULE}{\fs20 , but did not.  Compilation continued as though }{\f6\fs20 MODULE}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 more actual than formal parameters\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a procedure call that contained more parameters than were defined for the procedure.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 more parameters in DEFINITION than in IMPLEMENTATION\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling the implementation of a procedure declared within the definition module, the compiler detected fewer parameters than were specified in the definition module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 more parameters in IMPLEMENTATION than in DEFINITION\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling the implementation of a procedure declared within the definition module, the compiler detected more parameters than were specified in the definition module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 multiple definition within the same scope\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has detected a procedure, type, or variable that has already been declared within the current scope.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 multiply defined case (label)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected two }{\f6\fs20 CASE}{\fs20  labels that were identical.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 no long registers available (compiler error)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has run out of LONGINT sized registers.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 no quad registers available (compiler error)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has run out of quad-word sized registers.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 No procedure available for substitution\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In detecting the use of the }{\f6\fs20 NEW}{\fs20  or }{\f6\fs20 DISPOSE}{\fs20  standard procedures, the compiler was unable to locate a }{\f6\fs20 ALLOCATE}{\fs20  or }{\f6\fs20 DEALLOCATE}{\fs20  (respectively) procedure to call.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 no word registers available (compiler error)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has run out of WORD sized registers.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Non Modula2 procedures may not use open arrays\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a procedure with an open array parameter that was declared while the "Pascal" compiler directive was turned on.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 not implemented\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler will generate this error for one of the following conditions:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab You attempt to call a function procedure that has a result type that is not a simple type, or is not of size 1, 2, 4, or 8 bytes.\par 2.\tab The MOD statement  is used with either REAL or LONGREAL operands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 number too large\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A real number was determined to be outside the legal bounds of the REAL or LONGREAL types.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 object should be a module\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When processing an import list, the compiler expected the module name to refer to an object that was a module, and it was not. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 object should be a type\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected a reference to a type, but did not find one. This can occur during the declaration of variables, structured types, type casting, and parameter declaration.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 OF expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 OF}{\fs20 , but did not.  Compilation continued as though }{\f6\fs20 OF}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with *\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be multiplied, either because it has the wrong type, or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with +\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in an addition operation, either because it has the wrong type, or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with -\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in a subtraction operation, either because it has the wrong type, or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with /\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in a division operation, either because it has the wrong type, or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with AND\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in a logical AND operation, either because it has the wrong type (i.e. not boolean), or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with DIV\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in a division operation, either because it has the wrong type, or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with MOD\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in a modulus operation, either because it has the wrong type, or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with NOT\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the use of the symbol }{\f6\fs20 NOT}{\fs20  with a variable or constant that was not compatible with the logical NOT operation.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with OR\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in a logical OR operation, either because it has the wrong type (i.e. not boolean), or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with relation\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an operand that cannot be used in a relational expression, either because it has the wrong type (i.e. not boolean), or because it is not a variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 operand type incompatible with sign inversion\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The factor of an expression was found to be incompatible with the sign inversion operation.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 overflow in addition\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an overflow in addition when evaluating a constant expression.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 overflow in division\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an overflow in division when evaluating a constant expression.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 overflow in multiplication\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an overflow in multiplication when evaluating a constant expression.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 overflow in subtraction\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an overflow in subtraction when evaluating a constant expression.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 procedure call of a function\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the call of a function procedure with no preceding assignment of the result.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 procedure has fewer parameters than the formal type list\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found that a procedure being assigned to a procedure variable had fewer parameters than that of the procedure variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 procedure has more parameters than the formal type list\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found that a procedure being assigned to a procedure variable had more parameters than that of the procedure variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 procedure in DEFINITION has parameters, but not in IMPLEMENTATION\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling the implementation of a procedure declared within the definition module, the compiler detected a procedure without parameters that was defined with one or more parameters in the definition module.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Procedure must be level 0\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In detecting the use of the }{\f6\fs20 NEW}{\fs20  or }{\f6\fs20 DISPOSE}{\fs20  standard procedures, the compiler found that the procedure to substitute was not a level-0 procedure\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 procedure must have level 0\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the assignment of a nested or local procedure to a procedure variable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 procedure too long, must be < 64K\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler tried to compile a procedure that exceeded 64K in length.  To avoid this, break the procedure up into smaller chunks.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 record selector is not a field identifier\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected the use of a "field" that does not exist in the specified record.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 result type of P does not match that of T\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected, when processing the assignment of a procedure to a procedure variable, that the result type of the actual procedure was not the same as that of the procedure variable. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 set element outside valid range\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a set element that was outside the legal range for the base type of the set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 set size too large\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to declare a set containing more than 256 elements.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 statement part is not allowed in definition module\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling a DEFINITION module, the compiler detected a }{\f6\fs20 BEGIN}{\fs20  symbol (which indicates a statement sequence to follow).}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 statement starts with illegal symbol\par \par }\pard \qj\fi260\widctlpar\adjustright {\fs20 The compiler detected an illegal symbol at the beginning of a statement.  Compilation continued as though the illegal symbol was deleted from the source.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 step in FOR clause cannot be 0\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an (illegal) stepping value of zero (0).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 string is too long\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to assign a string constant to a variable that was not long enough to accept it.  String constants also have a maximum length of 255 characters, and this error is also generated if a string constant exceeding 255 characters is detected. \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Substitution item not a compatible procedure\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In detecting the use of the }{\f6\fs20 NEW}{\fs20  or }{\f6\fs20 DISPOSE}{\fs20  standard procedures, the compiler found that the procedure to substitute was not compatible.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 symbol is longer than is valid (255 characters)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an identifier that was greater than 128 characters in length.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 THEN expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 THEN}{\fs20 , but did not.  Compilation continued as though }{\f6\fs20 THEN}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 there are procedures without bodies\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler has detected declarations of procedures either as FORWARD, or within a definition module, but has not found the implementation of those procedures.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 this parameter should be a type identifier\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a parameter being passed to one of MAX(), MIN(), or TSIZE() that was not a type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 TO expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 TO}{\fs20 , but did not.  Compilation continued as though }{\f6\fs20 TO}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 too many cases\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected more than 128 CASE labels.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 too many digits (> 30)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 While evaluating a number in the source file, the compiler detected a number in excess of 30 digits.  Compilation continued as though the illegal symbol was deleted from the source.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 too many global modules\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler can only keep track of up to 64 global modules for any one compilation.  This error is generated when the import of a module causes that limit to be exceeded.  The only thing that can be done in such a case is to break down the module you are compiling into two or more modules.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 too many structure elements in definition module\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When reading in a symbol file, the compiler can only handle up to 1024 structures.  This error is generated when that limit is exceeded.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 too many WITH nested (> 4)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to nest more than four }{\f6\fs20 WITH}{\fs20  statements.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 tool, gsos or forward procedure cannot be declared in definition module\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When compiling a definition module, the compiler detected a procedure defined as one of: }{\f6\fs20 TOOL}{\fs20 , }{\f6\fs20 GSOS}{\fs20  or }{\f6\fs20 FORWARD}{\fs20 , which is illegal within a definition file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 TOOL procedures declared as 'Pascal' are invalid\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a procedure declared as a }{\f6\fs20 TOOL}{\fs20  or }{\f6\fs20 GSOS}{\fs20  procedure while the "Pascal" compiler directive was turned on.\par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 type followed by illegal symbol\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an illegal symbol after a type instance.  Compilation continued as though the illegal symbol was deleted from the source.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 type of expression in IF, WHILE, UNTIL clause must be BOOLEAN\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found that the result of the expression was not of type BOOLEAN.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 type of RETURN expression differs from procedure type\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The expression following the }{\f6\fs20 RETURN}{\fs20  symbol was not of the same type as the function procedures result.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 type of VAR parameter is not identical to that of actual parameter\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to pass a variable as a VAR parameter that does not have as its type the same type as that of the VAR parameter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 type of x cannot be the basetype of a set, or y is not a set\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the statement "x IN y", the compiler found that the type of "x" was not a legal base type for a set, or that "y" was not a set.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 type should be a record\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When either qualifying an object or processing a WITH statement, the compiler expected an object that is a record type, but found an object that is not a record type.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unable to determine address of TOOL or GSOS procedure.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an attempt to obtain the address of a }{\f6\fs20 TOOL}{\fs20  or }{\f6\fs20 GSOS}{\fs20  procedure.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unknown compiler directive\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found an unknown compiler directive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 unsatisfied export list entry\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler found an item in the export list that was not declared.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 UNTIL expected\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler expected to find the symbol }{\f6\fs20 UNTIL}{\fs20 , but did not.  Compilation continued as though }{\f6\fs20 UNTIL}{\fs20  had been inserted into the source file.}{\b\f6\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 VAR parameter may not be a constant\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected a constant being passed as a VAR parameter.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 x IN y: type(x) # basetype(y)\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The compiler detected an instance of the use of IN, where the type of the set element "x" was not the same as the base type of the set "y".\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Internal Compiler Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Internal Compiler Errors\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This type of error indicates a bug in the compiler that has been highlighted by something in your program.  When one of the following errors occur, please contact customer support, and if possible supply a small program that will demonstrate the problem.\par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 \par compiler error, report to customer support\par \par dynamic array parameter expected\par \par illegal offset or range distance too big\par \par illegal size of operand (implementation restriction)\par \par implementation restriction, compiler assertion\par }\pard \widctlpar\adjustright {\fs20 \par }\pard \qj\widctlpar\adjustright {\b\f6\fs20 Label fixed already (compiler error)\par \par object not in correct mode\par \par unknown label referenced (compiler error)\par \par }\pard \widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Linking Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Linking Errors\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Linker Error Levels}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Linker Error Levels\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 link errors}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 error levels}}}{\fs20 For each error that the linker can recover from, there is an error level which gives an indication of the gravity of the error.  The table below lists the error levels and their meaning.  Each error description shows the error level in brackets, immediately following the message.  The highest error level found is printed at the end of the link edit.  Many of these errors can only result if your program is written in more than one language, such as a combination of Modula-2 and assembly language.  All linker errors are included here for completeness.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-1080\li1440\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 Severity\tab Meaning\par }\pard \qj\fi-1080\li1440\keepn\widctlpar\adjustright {\fs20 \par 2\tab Warning - things may be OK.\par 4\tab Error - an error was made, but the linker thinks it knows the programmer's intent and has corrected the mistake.  Check the result carefully!\par 8\tab Error - no correction is possible, but the linker knew how much space to leave.  A debugger can be used to fix the problem without recompiling.\par 16\tab Serious Error - it was not even possible to tell how much space to leave.  Recompiling and linking will be required to fix the problem.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Recoverable Linker Errors}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v Recoverable Linker Errors\tcl3}}}{\b \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When the linker detects a non-fatal error, it prints\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 1.\tab The name of the segment that contained the error.\par 2.\tab How far into the segment (in bytes) the error point lies.\par 3.\tab A text error message, with the error-level number in brackets immediately to the right of the message.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Addressing Error [16]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A label could not be placed at the same location on pass 2 as it was on pass 1.\par This error is almost always accompanied by another error, which caused this one to occur; correcting the other error will correct this one.  If there is no accompanying error, check for disk errors by doing a full assembly and link.  If the error still occurs, report the problem as a bug.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Address Is Not In Current Bank [8]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The (most-significant-truncated) bytes of an expression did not evaluate to the value of the current location counter.\par For short-address forms (6502-compatible), the truncated address bytes must match the current location counter.  This restriction does not apply to long-form addresses (65816 native-mode addressing).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Address Is Not Zero Page [8]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The most significant bytes of the evaluated expression were not zero, but were required to be zero by the particular statement in which the expression was used.\par This error occurs only when the statement requires a direct page address operand (range = 0 to 255).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Alignment Factor Must Be A Power Of Two [8]}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An alignment factor that was not a power of 2 was used in the source code.  In ORCA Assembly language, the ALIGN directive is used to set an alignment factor.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 Alignment Factor Must Not Exceed Segment Align Factor [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 An alignment factor specified inside the body of an object segment is greater than the alignment factor specified before the start of the segment.  For example, if the segment is aligned to a page boundary (ALIGN = 256), you cannot align a portion of the segment to a larger boundary (such as ALIGN = 1024).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Code Exceeds Code Bank Size [4]}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The load segment is larger than one memory bank (64K bytes).  You have to divide your program into smaller load segments.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Data Area Not Found [2]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A USING directive was issued in a segment from the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  assembler, and the linker could not find a DATA segment with the given name.  Ensure that the proper libraries are included, or change the USING directive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Duplicate Label [8]}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A label was defined twice in the program.  Remove one of the definitions.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Expression Operand Is Not In Same Segment [8]}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An expression in the operand of an instruction or directive includes labels that are defined in two different relocatable segments.  The linker cannot resolve the value of such an expression.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Evaluation Stack Overflow [8]\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 1.  There may be a syntax error in the expression being evaluated.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Check to see if a syntax error has also occurred; if so, correct the problem that caused that error.\par }\pard \qj\widctlpar\adjustright {\fs20 \par 2.  The expression may be too complex for the linker to evaluate.\par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Simplify the expression.  An expression would have to be extremely complex to overflow the linker\rquote s evaluation stack, particularly if the expression passed the assembler or compiler without error.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Expression Syntax Error [16]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The format of an expression in the object module being linked was incorrect.\par This error should occur only in the company of another error; correct that error and this one should be fixed automatically.  If there are no accompanying errors, check for disk errors by doing a full assembly and link.  If the error still occurs, report the problem as a bug.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Invalid Operation On Relocatable Expression [8]}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The ORCA linker can resolve only certain expressions that contain labels that refer to relocatable segments.  The following types of expressions }{\i\fs20 cannot}{\fs20  be used in an assembly-language operand involving one or more relocatable labels:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\li360\widctlpar\adjustright {\fs20 A bit-by-bit NOT\par A bit-by-bit OR\par A bit-by-bit EOR\par A bit-by-bit AND \par A logical NOT, OR, EOR, or AND \par Any comparison (<, >, <>, <=, >=, ==)\par Multiplication\par Division\par Integer remainder (MOD)\par }\pard \qj\widctlpar\adjustright {\fs20 \par The following types of expressions involving a bit-shift operation }{\i\fs20 cannot}{\fs20  be used:\par \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 The number of bytes by which to shift a value is a relocatable label.\par A relocatable label is shifted more than once.\par A relocatable label is shifted and then added to another value.\par You cannot use addition where both values being added are relocatable (you }{\i\fs20 can}{\fs20  add a constant to a relocatable value).\par You cannot subtract a relocatable value from a constant (you }{\i\fs20 can}{\fs20  subtract a constant from a relocatable value).\par You cannot subtract one relocatable value from another defined in a different segment (you }{\i\fs20 can}{\fs20  subtract two relocatable values defined in the same segment).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Only JSL Can Reference Dynamic Segment [8]}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 You referenced a dynamic segment in an instruction other than a JSL.  Only a JSL can be used to reference a dynamic segment.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 ORG Location Has Been Passed [16]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker encountered an ORG directive (created using the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  macro assembler) for a location it had already passed.\par Move the segment to an earlier position in the program.  This error applies only to absolute code, and should therefore be rarely encountered when writing for the Apple\~II}{\scaps\fs20 gs}{\fs20 .\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Relative Address Out Of Range [8]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The given destination address is too far from the current location.\par Change the addressing mode or move the destination code closer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Segment Header MEM Directive Not Allowed [16]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker does not support the MEM directive.  If you are trying to use the MEM directive, you have probably made a mistake.  MEM does not make sense in a relocatable load file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Segment Header ORG Not Allowed [16]}{\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If there is no ORG (created using the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  macro assembler) specified at the beginning of the source code, you cannot include an ORG within the program.  The linker generates relocatable code unless it finds an ORG before the start of the first segment.  Once some relocatable code has been generated, the linker cannot accept an ORG. \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs20 Shift Operator Is Not Allowed On JSL To Dynamic Segment [8]}{\f6\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The operand to a JSL includes the label of a dynamic segment that is acted on by a bit-shift operator.  You probably typed the wrong character, or used the wrong label by mistake.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Undefined Opcode [16]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 object files}}}{\fs20 The linker encountered an instruction that it does not understand.  There are four possible reasons:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-370\li720\widctlpar\adjustright {\fs20 1.\tab The linker is an older version than that required by the assembler or compiler; in this case, a Linker Version Mismatch error should have occurred also.  Update the linker.\par 2.\tab An assembly or compilation error caused the generation of a bad object module.  Check and remove all assembly/compilation errors.\par 3.\tab The object module file has been physically damaged.  Recompile to a fresh disk.\par 4.\tab There is a bug in the assembler, compiler or linker.  Please report the problem for correction.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Unresolved Reference [8]\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker could not find a segment referenced by a label in the program.\par If the label is listed in the global symbol table after the link, make sure the segment that references the label has issued a USING directive for the segment that contains the label.  Otherwise, correct the problem by: (1) removing the label reference, (2) defining it as a global label, or (3) defining it in a data segment.\par Multiple unresolved reference errors are generally caused by the libraries not being in the correct order.  Use the command\par \par }{\f6\fs18 COMPRESS A C 2/\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 to properly order the libraries.  Commercial libraries supplied with compilers not developed by the Byte Works should not be included in the same library directory used by an ORCA language product.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Terminal Linker Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Terminal Linker Errors\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 terminal errors}}}{\fs20 \par }{\b\f6\fs20 Could Not Open File }{\b\i\f6\fs20 filename}{\b\f6\fs20 \par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 GS/OS could not open the file }{\i\fs20 filename}{\fs20 , which you specified in the command line.\par Check the spelling of the file name you specified.  Make sure the file is present on the disk and that the disk is not write-protected.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Could Not Overwrite Existing File }{\b\i\f6\fs20 filename}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker is only allowed to replace an existing output file if the file type of the output file is one of the executable types.  It is not allowed to overwrite a TXT, SRC, or OBJ file, thus protecting the unaware user.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Could Not Write The Keep File }{\b\i\f6\fs20 filename}{\b\f6\fs20 \par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A GS/OS error occurred while the linker was trying to write the output file }{\i\fs20 filename}{\fs20 .\par This error is usually caused by a full disk.  Otherwise, there may be a bad disk or disk drive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Dictionary File Could Not Be Opened\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The dictionary file is a temporary file on the work prefix that holds information destined for the load file\rquote s relocation dictionary.  For some reason, this file could not be opened.\par Use the SHOW PREFIX command to find out what the work prefix is.  Perhaps you have assigned the work prefix to a RAM disk, but do not have a RAM disk on line.  Have you removed the volume containing the work prefix from the disk drive?  Is the disk write-protected?\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Expression Recursion Level Exceeded\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 It is possible for an expression to be an expression itself; therefore, the expression evaluator in the linker is recursive.  Generally, this error occurs when the recursion nest level exceeds ten.  This should not happen very frequently.  If it does, check for expressions with circular definitions, or reduce the nesting of expressions.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 File Read Error\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An I/O error occurred when the linker tried to read a file that was already open.  This error should never occur.  There may be a problem with the disk drive or with the file.  You might have removed the disk before the link was complete.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 File Not Found }{\b\i\f6\fs20 filename}{\b\f6\fs20 \par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file }{\i\fs20 filename}{\fs20  could not be found.\par Check the spelling of the file name in both the KEEP directive and the LINK command.  Make sure the .ROOT or .A file has the same prefix as the file specified in those commands.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Illegal Header Value\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker checks the segment headers in object files to make sure they make sense.  This error means that the linker has found a problem with a segment header.\par This error should not occur.  Your file may have been corrupted, or the assembler or compiler may have made an error.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Illegal Segment Structure\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There is something wrong with an object segment.\par This error should not occur.  Your file may have been corrupted, or the assembler or compiler may have made an error.  This can also be caused by a bad disk or bad memory chip.  Try changing to a different disk and recompiling.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Invalid File Name }{\b\i\f6\fs20 filename}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file }{\i\fs20 filename}{\fs20  does not adhere to GS/OS file naming conventions.\par Make sure the file name you supply on the command line is a valid one.\par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Invalid file type }{\b\i\f6\fs20 filename}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file }{\i\fs20 filename}{\fs20  is not an object file or library file.\par Check the shell command line to make sure you didn't list any files that are not object files or library files.  Check your disk directory to make sure there isn\rquote t a non-object file with the same root name as a file you are linking.  For example, if you are linking object files name MYFILE.ROOT and MYFILE.A, make sure there is no (unrelated) file on the disk with the name MYFILE.B.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Invalid Keep Type\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The linker can generate several kinds of output files.  The type of the output file must be one of the executable types.  Since it is possible to set the keep type with a shell variable, this error can occur from a command line call.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Linker Version Mismatch\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The object module format version of the object segment is more recent than the version of the linker you are using.\par Check with the Byte Works to get the latest version of ORCA.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Must Be An Object File }{\b\i\f6\fs20 filename}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\i\fs20 Filename}{\fs20  is not an object file or a library file.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Object Module Read Error\par }{\b\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A GS/OS error occurred while the linker was trying to read from the currently opened object module.\par This error may occur after a non-fatal error; correcting the non-fatal errors may correct this one.  Otherwise, it may be caused by a bad disk or disk drive.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Out Of Memory\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 All free memory has been used; the memory needed by the linker is not available.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Execution Errors}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Execution Errors\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Each of the following errors can be trapped by the built-in procedure SystemError.  The error numbers returned by SystemError are printed after the error message in the descriptions below.  Each error description explains the action that will be taken by the system.  You can use this to decide how to handle a particular error.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Subrange Exceeded  }{\b\fs20 [1]}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A value has been assigned to a variable, and the value exceeds the bounds defined for the variable.  This error can generally be detected during compilation by enabling the }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RangeCheck directive}}}{\fs20 RangeCheck directive.  For variables of type byte, the value was not within the range 0..255.  For boolean variables, the value was neither a 0 nor a 1.  For char variables, the value was not within 0..127.  This sort of error occurring for other types of variables will be flagged by different error messages.\par The results of the assignment, and thus whether execution should continue, depend upon the variable type.  If the variable is an element of a char or boolean array that is being indirectly accessed, as by assignment to a var parameter, the value will be stored into the least significant byte of the element.  If the array is being accessed directly, then an entire word will be stored into the element.\par Use of char or boolean values beyond their defined range will produce unpredictable results.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 File Is Not Open  [2]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A file operation has been coded, such as a }{\f6\fs20 read(filePointer)}{\fs20  or }{\f6\fs20 write(filePointer),}{\fs20  but the requested file has not been opened with an open, reset, or rewrite call, or has been closed with a }{\f6\fs20 close}{\fs20  call.  The action taken by the system is to not perform the operation; the file variable value is undefined.  \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Read While At End Of File  }{\b\fs20 [3]}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The file pointer attached to a particular file is pointing to the end-of-file marker.  The area pointed to by the input buffer pointer is unpredictable.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 files}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 I/O Error  }{\b\fs20 [4]}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A ProDOS I/O error has been detected, such as disk full, write error, etc., or an illegal file operation has been coded.  The system ignores the operation.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Out Of Memory  }{\b\fs20 [5]}{\b\f6\fs20 \par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An allocation of memory using the built-in procedure new was attempted, but no free memory is available.  The system will set the pointer to the memory to NIL.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory management}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 new procedure}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 EOLN While At End Of File}{\fs20   }{\b\fs20 [6]}{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In Modula-2, input files always have an end-of-line marker preceding the end-of-file marker.  The program failed to check for EOF after detecting an EOLN.  If input is coming from a file, EOF will remain true.  If input is coming from the keyboard, EOF will be set to false.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Set Overflow}{\fs20   }{\b\fs20 [7]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An operation on a set caused the set to exceed the size allocated to it.  All set overflows will be detected if range checking is enabled.  You should be aware that some set overflows will not be caught when range checking is off, however.  If a set occupies an exact amount of bytes, then an element out of range will always be detected.  If a set does not occupy an exact number of bytes, then the compiler may fail to find an illegal assignment with range checking off.  This could occur, for example, if the set had been defined as }{\f6\fs20 var s1: set of 0..10;}{\fs20  and then }{\f6\fs20 s1}{\fs20  was assigned an 11.  }{\f6\fs20 S1}{\fs20  occupies two bytes, and 11 falls within the bits marked for assignment to }{\f6\fs20 s1}{\fs20 .\par If you trap this error and return control to the executing program, the extra bytes in the set value are truncated.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 sets}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Jump To Undefined Case Statement Label}{\fs20   }{\b\fs20 [8]}{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This error cannot be recovered from.  Your program can avoid this error by including an otherwise clause in the case statement.}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 case statement}}}{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Integer Math Error}{\fs20  }{\b\fs20  [9]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An overflow has occurred as a result of an addition, subtraction, or multiplication, or an attempt has been made to divide by zero, in either a division or div operation.  The action taken by the system depends upon the operation, but the result is neither valid nor predictable.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Real Math Error}{\fs20  }{\b\fs20  [10]}{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An exception has been raised due to one of the following invalid conditions:\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi-360\li720\widctlpar\adjustright {\fs20 1.\tab Addition or subtraction of values whose magnitudes are considered infinities.\par 2.\tab Multiplication by infinity.\par 3.\tab Division by zero, or division of infinity by infinity.\par 4.\tab Taking the square root of a negative value.\par 5.\tab Conversion of a real number to an integer value such that the real number is of a magnitude considered to be infinity.\par 6.\tab Comparison of two values, using the operators < or >, where one of the values is considered to be NaN (not a number).\par 7.\tab Any operation involving an NaN.\par }\pard \qj\widctlpar\adjustright {\fs20 \par The system returns NaN as the result of the operation.\par \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Underflow}{\fs20   }{\b\fs20 [11]}{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A value is too close to zero to be represented in the accuracy of the underlying format.  The system returns a value of zero.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Overflow}{\fs20   }{\b\fs20 [12]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 A value is too large to be represented in the accuracy of the underlying format.  The system returns a value of infinity (INF).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Divide By Zero}{\fs20   }{\b\fs20 [13]}{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to divide by zero.  The system returns NaN (not a number).\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Inexact}{\fs20  }{\b\fs20  [14]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 An attempt has been made to perform an otherwise legitimate trigonometric function, such as sin(x), with numbers of excessive magnitude.  The system returns its best guess at the true answer.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Stack Overflow}{\fs20  }{\b\fs20  [15]\par }{\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 When range checking is enabled, code is generated to check to see if there is enough room on the stack to form a new stack frame when a procedure or function is called.  This error is flagged if there is not enough room.  The stack has not yet been damaged, so it is safe to simply exit the program.\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\keepn\widctlpar\adjustright {\b\f6\fs20 Stack Error}{\fs20  }{\b\fs20  [16]\par }{\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\fs20 The stack has overflowed, overwriting memory that does not belong to your program.  This could cause crashes or other odd behavior.  The best course of action upon detecting this error is to call SysFailMgr in the Miscellaneous Tool Set to force a reboot.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix B - Custom Installations\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Appendix B \endash  Custom Installations\par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Appendix B \endash  Custom Installations\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 system configuration}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 installing ORCA/Modula-2}}}{\fs20 This appendix describes the various installer options available with ORCA/Modula-2.  These include two different ways to install ORCA/Modula-2 on your hard disk, as well as several other specialized installer options, like installing the libraries for all of the ORCA languages, so you can switch between them.  Finally, this appendix describes the principal files that make up the ORCA development environment and the Modula-2 compiler; by studying this section, you can learn why we configured ORCA/Modula-2 the way we did, and adjust the installation to suite your needs.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Installer Scripts}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Installer Scripts\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Apple's Installer is used to install ORCA/Modula-2.  To run the installer, execute the Installer file from the ORCA/Modula-2 Extras disk.  There are several installer scripts listed in the window that appears; these are described below.  Select the one you want, select the disk that you want to install the program on from the right-hand list, and click on the Install button.\par Please note that with the current version of Apple's Installer, you will have to select the installation script before you can pick a folder from the right-hand list.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b New System}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v New System\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This is the basic, all-purpose installation script.  It installs the full ORCA/Modula-2 system, including the desktop development system, the text based editor, samples, and all of the interface files and help files.\par If you run a lot of software, you probably boot into the Finder or some other program launcher.  In that case, you should probably install ORCA/Modula-2 in a folder that is not at the root level of your hard disk.\par If you plan to use your computer primarily for programming, you can set things up so you boot directly into ORCA/Modula-2.  To do that, start by installing Apple's system disk without a Finder.  (Apple's installer, shipped on their system disk and available free from your local Apple dealer, has an installation option to install the system with no Finder.)  Next, install ORCA/Modula-2 at the root level of your boot volume, making sure that ORCA.Sys16 is the first system file on the boot disk.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SYS}}}{\fs20 System files are those files with a file type of S16 that end with the characters ".Sys16", as well as the files with a file type of SYS that end in the characters ".SYSTEM".\par See also "ORCA Icons" and "Modula-2, Pascal, C, Asm Libraries," below.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b New Text System}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v }{\b\v New Text System\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 This script is ideal if you plan to do "standard" Modula-2 programming, and prefer a UNIX-like text environment.  The desktop development system is not installed.  Tool header files and samples are not installed, but you can copy any you plan to use manually.  You can use any copy program to copy the various sample files and header files.  Copy any of them that you want to the same folder wherever you installed ORCA/Modula-2.\par If you run a lot of software, you probably boot into the Finder or some other program launcher.  In that case, you should probably install ORCA/Modula-2 in a folder that is not at the root level of your hard disk.\par If you plan to use your computer primarily for programming, you can set things up so you boot directly into ORCA/Modula-2.  To do that, start by installing Apple's system disk without a Finder.  (Apple's installer, shipped on their system disk and available free from your local Apple dealer, has an installation option to install the system with no Finder.)  Next, install ORCA/Modula-2 at the root level of your boot volume, making sure that ORCA.Sys16 is the first system file on the boot disk.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SYS}}}{\fs20 System files are those files with a file type of S16 that end with the characters ".Sys16", as well as the files with a file type of SYS that end in the characters ".SYSTEM".\par See also "ORCA Icons" and "Modula-2, Pascal, C, Asm Libraries," below.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b ORCA Icons}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v ORCA Icons\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you use Apple's Finder as a program launcher, be sure and install the ORCA Icons.  ORCA itself will show up as a whale, while the various source files, object files, and utilities will be displayed with distinctive icons.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b PRINTER Driver}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v PRINTER Driver\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Apple\~II}{\fs18 GS}{\fs20  operating system does not have a text printer driver.  This script installs one.  Once this printer driver is installed, you can open a file called .PRINTER and write text to that file.  All of the text will be written to your printer.\par This driver does not work with all printers.  In general, it will work with any printer that works from AppleSoft BASIC.  For details about the printer driver itself, especially how it is configured, see Chapter 8.\par }\pard \qj\widctlpar\adjustright {\fs20 \par \par }\pard \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright {\b Modula-2, Pascal, C, Asm Libraries}{\pard\plain \qj\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\cgrid {\tc {\b\v Modula-2, Pascal, C, Asm Libraries\tcl3}}}{\b \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 If you are using ORCA/Modula-2 with the ORCA/M}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/M}}}{\fs20  macro assembler, installing ORCA/Modula-2 gives you all of the libraries you need.\par If you are using ORCA/Pascal or ORCA/C with ORCA/Modula-2}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/Modula-2}}}{\fs20 , you must have libraries for each of the languages, and they must appear in the correct order.  If you are missing any of the libraries, or if they are in the wrong order, you will get linker errors with either C, Pascal, Modula-2, or possibly with more than one language.  This installer script installs the libraries for C, Pascal, Modula-2, and assembly language in the correct order.  You can use this installer script before or after any of the other scripts.\par You should not use this script unless you are installing either Pascal or C with Modula-2.  Installing the C and Pascal libraries takes up a little more room on your disk; slows link times a little, since the linker has to scan an extra library; and uses up a little extra memory, since the library header is loaded by the linker.\par If you have C or Pascal, but not both, you will end up with an extra library in the libraries folder.  Deleting the extra library is a good idea.  Here is a complete list of the libraries installed, as well as which languages use the libraries.  You can delete any libraries that are not used by a language you have installed.  In addition, the libraries are listed in the order in which they must appear in the Libraries folder.\par \par }\pard \qj\li360\ri1980\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 library\tab used by...\par }\pard \qj\fi360\ri1980\keepn\widctlpar\adjustright {\fs20 M2Lib\tab ORCA/Modula-2\par ORCALib\tab ORCA/C\par PasLib\tab ORCA/Pascal\par SysFloat\tab ORCA/Modula-2, ORCA/C, ORCA/Pascal\par }\pard \qj\fi360\ri1980\widctlpar\adjustright {\fs20 SysLib\tab ORCA/Modula-2, ORCA/C, ORCA/Pascal, ORCA/M\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par While the order of the libraries is important, it does not matter if other files are folders appear in the library folder, too, or what order the other files happen to appear in.  The libraries folder normally contains several other folders, holding, among other things, interface files for the compilers, the source code for the interface files, and macros for the assembler.\par \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 RAM Disks}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 RAM Disks\tcl2}}}{\b\fs28 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 RAM disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 RAM disks}}}{\fs20  come in a variety of sizes and flavors.  One of the most common is a RAM disk allocated from the control panel of your computer.  These RAM disks are allocated from the memory of your computer.  ORCA/Modula-2 can make very effective use of that memory if you let it \endash  the system will perform better than if you try to copy parts of ORCA to your RAM disk.  In addition, RAM disks allocated from main memory are easy to destroy from a program that is accidentally writing to memory that it has not allocated.  While this is unusual in commercial programs, you may find that your own programs do this frequently during the development cycle.  RAM disks that are not allocated from main memory, like Apple's "Slinky" RAM disk, are good for work space and even source code.  The so-called ROM disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ROM disks}}}{\fs20 , or battery-backed RAM disks, should be treated as small hard disks}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 hard disks}}}{\fs20 .  See the sections on installing ORCA/Modula-2 on a hard disk for effective ways of using ROM disks.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Details About Configuration}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Details About Configuration\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 system configuration}}}{\fs20 In this section, we will explore why ORCA/Modula-2 is configured the way it is by looking at what happens when you run ORCA/Modula-2, when ORCA looks for files, and where it looks for files.  The material in this section is advanced information for experienced programmers.  You do not need to understand this material for beginning and intermediate programming, and the entire section can safely be skipped.\par }{\v\fs20 .Sys16;}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA.Sys16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell}}}{\fs20 Whether you are using the text or desktop programming system, you always start ORCA/Modula-2 by running the ORCA.Sys16 file.  This file contains the UNIX-like text based shell.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSCMND file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 shell\:command table}}}{\fs20 The first thing the shell does after starting is to look for a folder called Shell; this folder must be in the same location as the ORCA.Sys16 file.  Inside this folder, the shell looks for an ASCII file (it can be stamped as a ProDOS TXT file or an ORCA SRC file) with the name SYSCMND; this is the command table.  It is loaded one time, and never examined again.  The shell must get at least this far, successfully loading the SYSCMND table, or it will stop with a system error.\par The next step taken by the shell is to set up the default prefixes.  Prefix 8 is not changed if it has already been set by the program launcher, but the shell will set it to the same prefix as prefix 9 if prefix 8 is initially empty.  The remaining prefixes default to prefix 9 plus some subdirectory, as show in the table below.\par \par }\pard \qj\li1260\ri4320\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \adjustright {\fs20 prefix\tab set to\par }\pard \qj\li1260\ri4320\keepn\widctlpar\adjustright {\f6\fs18 13\tab 9:libraries\par 14\tab 9\par 15\tab 9:system\par 16\tab 9:languages\par }\pard \qj\li1260\ri4320\widctlpar\adjustright {\f6\fs18 17\tab 9:utilities\par }\pard \qj\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 LOGIN file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 scripts}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 alias command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 PRIZM}}}{\fs20 The last step taken by the shell is to look in prefix 15 for a script file named LOGIN.  To qualify, this file must have a file type of SRC, and a language stamp of EXEC.  If the shell does not find a valid LOGIN file, it simply moves on; in other words, you can leave out the LOGIN file if you choose.  Typically, this script file is used to set up custom aliases, set up shell variables, change the default prefixes listed above to other locations, and to execute PRIZM, the desktop development system.  One thing this shows is that, as far as ORCA is concerned, the PRIZM desktop development system is actually nothing more than an application that you run from within the shell.  Systems that default to the desktop programming environment do so by running PRIZM from within the LOGIN script, so PRIZM is executed as part of the boot process.\par After executing the LOGIN script, the shell writes a # character to the screen and waits for further commands.  If course, if PRIZM is executed from the LOGIN file, the shell never gets a chance to do this until you quit from PRIZM.\par Prefixes 13 to 17 are initialized by the shell, but you can change them to point to other folders if you prefer.  To understand how these prefixes are used, we'll look at the programs that currently use them.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 EDIT command}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSEMAC file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSHELP file}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 SYSTABS file}}}{\fs20 When you use the EDIT command, the shell attempts to run a program named EDITOR; it expects to find an EXE file with this name in prefix 15 (the "Shell" prefix).  If the shell does not find an EXE file with the name EDITOR in prefix 15, it writes the message "ProDOS: File not found" and returns to the # prompt.  The ORCA editor uses prefix 15 to locate the SYSTABS file (to set up the tab line), the SYSEMAC file (to set up the default editor macros), and the SYSHELP file (to write the editor help screen).  The editor can function perfectly well without any of these files, although you will get a warning message each time you load a file if there is no SYSTABS file.  When you cut, copy or paste text, the editor reads or writes a file called SYSTEMP to prefix 14; obviously, the editor will perform a lot faster on these operations if prefix 14 is set to point to a RAM disk.\par A few other programs look at the SYSTABS file in prefix 15; PRIZM is another good example.  No other use is currently made of prefix 15.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 pipes}}}{\fs20 Prefix 14, which the editor uses as a work prefix, is also used by the shell when you pipe output from one program to become input to another program.  The shell handles piping by creating a temporary file to hold the output of one program, reading this file as standard input for the next program.  These pipe files are called SYSPIPE0, SYSPIPE1, and so forth, depending on how many pipes were used on a single command line.\par When you use any of the commands to compile or link a program, the shell looks in prefix 16 for the compiler, assembler, or linker.  For example, if you compile a Modula-2 source file, the shall takes a look at the auxtype field for the file, which will have a value of 272.  The shell then scans its internal copy of the SYSCMND file looking for a language with a number of 272, and finds one with a name of MODULA2.  The shell then loads and executes the file 16:MODULA2; if it does not find such a file, it flags a language not available error.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 interface files}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 library prefix}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 FROM statement}}}{\fs20 Compilers and linkers make heavy use of prefix 13, which is not actually used by the shell.  Prefix 13, the library prefix, is where the Modula-2 compiler looks for interface files.  When you code a FROM statement like this one:\par \par }{\f6\fs18 FROM QuickDrawII IMPORT LineTo;\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the Modula-2 compiler appends this file name to the prefix 13:M2Defs, giving a full path name for the file of 13:M2Defs:QuickDrawII.sym.  The ORCA/C}{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 ORCA/C}}}{\fs20  compiler does something similar, but it uses 13:ORCACDefs.  A convention has also gradually developed to put assembler macros and equate files in a folder called AInclude or ORCAInclude inside the library folder, although the assembler and MACGEN utility don't automatically scan this folder.\par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 linker}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 libraries}}}{\fs20 The linker also uses the library folder.  When you link a program, especially one written in a high-level language, the program almost always needs a few subroutines from a standard library.  The linker recognizes this automatically, and scans prefix 13 looking for library files.  The linker ignores any folders or other non-library files it might find.  When the linker finds a library file, it opens it, scans the files in the library to resolve any subroutines, closes the file, and moves on.  The linker never goes back to rescan a library, which is why it is important for the libraries to be in the correct order.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 utilities}}}{\fs20 Prefix 17 is the utility prefix.  When you type a command from the shell, the shell checks to see if it is in the command table.  If so, and if the file is a utility, the shell appends the name to 17: and executes the resulting file.  For example, when you run the MAKELIB utility to create your own Modula-2 library, the shell actually executes the file 17:MAKELIB, giving a file not found error if there is no such file.  }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:S16}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 file types\:SYS}}}{\fs20 Utilities are not limited to EXE type files; you can make an SYS file, S16 file, or script file a utility, too.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 HELP command}}}{\fs20 Prefix 17 is also used by the help command.  When you type HELP with no parameters, the help command dumps the command names from the SYSCMND table.  When you type HELP with some parameter, like\par \par }{\f6\fs18 help catalog\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 the help command looks for a text (TXT) or source (SRC) file named 17:HELP:CATALOG, typing the file if it is found.  In other words, you can use the help command to type any standard file, as long as you put that file in the HELP folder inside of the utilities folder.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 All of the files that were not mentioned in this section can be placed absolutely anywhere you want to put them \endash  since none of the ORCA software looks for the files in a specific location, you have to tell the system where they are anyway.  It might as well be a location you can remember, so pick one that makes sense to you.\par }{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 Finder}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 memory model}}}{\fs20 All of this information can be put to use for a variety of purposes.  For example, by installing the Finder, BASIC.SYSTEM, and any other programs you use regularly as utilities under ORCA, you can boot directly into ORCA's text environment (which takes less time than booting into the Finder) and use ORCA as a program launcher.  You can also split the ORCA system across several 3.5" floppy disks by moving, say, the libraries folder to the second disk, setting prefix 13 to point to the new disk from within your LOGIN file.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix C - Run-Time License\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Appendix C \endash  Run-Time License \par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Appendix C \endash  Run-Time License\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Any program written with ORCA/Modula-2 has some of Modula-2's run-time libraries linked into the executable program.  These libraries are copyrighted by the Byte Works.  While we feel you should be able to use these libraries free of charge for any program you write, commercial or not, there are also a few legal requirements that must be met so we can protect our copyright.\par On any program written with ORCA/Modula-2, you must include a copyright statement stating that the program contains copyrighted libraries from the ORCA/Modula-2 run-time library.  This copyright must appear in a prominent place.  If the program has any other copyright statement, the ORCA/Modula-2 copyright statement must appear in the same location.  The text that must be included is:\par \par }\pard \widctlpar\adjustright {\fs20 \tab This program contains material from the ORCA/Modula-2\par \tab Run-Time Libraries, Copyright 1993\par \tab by Byte Works, Inc.  Used with permission.\par }\pard \qc\widctlpar\adjustright {\f12 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Appendix D - Console Control Codes\par }}\pard\plain \widctlpar\adjustright \f4\cgrid {\b\fs36 Appendix D \endash  Console Control Codes \par }{\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Appendix D \endash  Console Control Codes\tcl1}}}{\v\fs20 \par }{\fs20 \par \par }\pard \qj\fi360\widctlpar\adjustright {\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text programming}}}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 text screen}}}{\fs20 When you are writing programs that will be executed in a text environment, you can use a number of special console control codes.  These are special characters which cause the console to take some action, like moving the cursor or turning the cursor off.  This appendix gives a list of the most commonly used console control codes for the GS/OS .CONSOLE driver; this is the default text output device used by ORCA/Modula-2 for stand-alone text programs and for programs executed under the text shell.\par If you send output to some output device other than the GS/OS .CONSOLE driver that ORCA/Modula-2 uses as the default output device, some of these control codes may not be respected, and others may be available.  In general, very few console control codes are recognized when output is sent to a graphics device or printer.\par For a complete list of the console control codes supported by the GS/OS .CONSOLE driver, see }{\fs20\ul Apple\~II}{\fs18\ul GS}{\fs20\ul  GS/OS Reference}{\fs20 , pages 242-245.\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Beep the Speaker}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Beep the Speaker\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Writing CHR(7) to the screen beeps the speaker.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Beep;\par \par (* Beep the speaker                                           *)\par \par BEGIN\par Write(CHR(7));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Beep;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Cursor Control}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 Cursor Control\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 There are several control codes that move the cursor.  CHR(8) moves the cursor one column to the left.  If the cursor starts in column 0 (the leftmost column), it is moved to column 79 (the rightmost column) of the line above.  If the cursor starts in column 0 of row 0 (the top row), it is moved to column 79 of row 0.\par CHR(10) moves the cursor down one line.  If the cursor starts on line 23 (the bottom line on the screen), the screen scrolls up one line and the cursor stays in the same relative position.\par CHR(28) moves the cursor right one column.  If the cursor starts in column 79, it is moved to column 0 of the same line.  This curious behavior is worth noting:  you would normally expect that the cursor would move to column 0 of the }{\i\fs20 next}{\fs20  line, not the current line, especially when the action of CHR(8) is taken into account.\par CHR(31) moves the cursor up one line.  If the cursor starts on line 0, nothing happens.\par CHR(25) moves the cursor to line 0, column 0, which is the top left character on the screen.  It does not clear the screen; it simply moves the cursor.  CHR(12) also moves the cursor to the top left of the screen, but is also clears the screen to all blanks.\par CHR(13) moves the cursor to the start of the current line.\par CHR(30) is the only control code that requires more than one character.  This character starts a cursor movement sequence which depends on the two characters that follow.  Using this character code, the cursor can be positioned to any column and row on the screen.  The first character after the CHR(30) is used to position the cursor in a particular column.  The column number is computed by subtracting 32 from the ordinal value of the character written.  The next character determines the row, also by subtracting 32 from the ordinal value of the character.  For example, \par \par }{\f6\fs18 Write(CHR(30)); Write(CHR(10+32)); Write(CHR(5+32));\par }{\fs20 \par }\pard \qj\widctlpar\adjustright {\fs20 would move the cursor to column 10, row 5.  Columns and rows both start with number 0, so that the upper-left screen position is at row 0, column 0, and the lower-right screen position is at row 23, column 79.  See the GotoXY procedure, below, for a convenient way of using this feature.\par }\pard \qj\fi360\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE FormFeed;\par \par (* Move the cursor to the top left of the screen and clear the*)\par (* screen                                                     *)\par \par BEGIN\par Write(CHR(12));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END FormFeed;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE GotoXY (x, y: INTEGER);\par \par (* Move the cursor to column x, row y                         *)\par \par BEGIN\par Write(CHR(30));\par Write(CHR(x+32));\par Write(CHR(y+32));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END GotoXY;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Home;\par \par (* Move the cursor to the top left of the screen              *)\par \par BEGIN\par Write(CHR(25));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Home;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE MoveDown;\par \par (* Move the cursor down                                       *)\par \par BEGIN\par Write(CHR(10));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MoveDown;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE MoveLeft;\par \par (* Move the cursor to the left                                *)\par \par BEGIN\par Write(CHR(8));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MoveLeft;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE MoveRight;\par \par (* Move the cursor to the right                               *)\par \par BEGIN\par Write(CHR(28));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MoveRight;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE MoveUp;\par \par (* Move the cursor up one line                                *)\par \par BEGIN\par Write(CHR(31));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MoveUp;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Return;\par \par (* Move the cursor to the start of the current line           *)\par \par BEGIN\par Write(CHR(13));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Return;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Clearing the Screen}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Clearing the Screen\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 In the last section, we looked at CHR(12), which clears the screen and moves the cursor to the top-left of the screen.  There are two other control codes that can clear parts of the screen.  CHR(11) clears the screen from the cursor position to the end of the screen, filling the cleared area with blanks.  CHR(29) is still more selective.  It clears the screen from the current character position to the end of the line.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE ClearToEOL;\par \par (* Clear to the end of the current line                       *)\par \par BEGIN\par Write(CHR(29));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END ClearToEOL;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE ClearToEOS;\par \par (* Clear to the end of the screen                             *)\par \par BEGIN\par Write(CHR(11));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END ClearToEOS;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 Inverse Characters}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 }{\b\v\fs28 Inverse Characters\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 Text normally shows up on the text screen as white characters on a black background.  Writing CHR(15) causes any future characters to be written as black characters on a white background.  CHR(14) reverses the effect, writing white characters on a black background.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Inverse;\par \par (* Write all future characters in inverse                     *)\par \par BEGIN\par Write(CHR(15));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Inverse;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE Normal;\par \par (* Write future characters in normal mode (white on black)    *)\par \par BEGIN\par Write(CHR(14));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END Normal;\par }\pard \widctlpar\adjustright {\fs20 \par \par }\pard \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright {\b\fs28 MouseText}{\pard\plain \keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\fs28\cgrid {\tc {\b\v\fs28 MouseText\tcl2}}}{\b\fs28 \par }\pard \qj\keepn\widctlpar\adjustright {\fs20 \par }\pard \qj\fi360\widctlpar\adjustright {\fs20 The Apple\~II}{\fs18 GS}{\fs20  text screen has a set of graphics characters called MouseText}{\pard\plain \qj\fi360\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\fs20 }{\v\fs20 MouseText}}}{\fs20  characters.  The name comes from the primary purpose for the characters, which is to implement text-based desktop environments for use with a mouse, like the text version of Apple Works.  You need to do two things to enable MouseText characters: enable MouseText, and switch to inverse characters.  After taking these steps, any of the characters from '@' to '_' in the ASCII character set will show up as one of the graphics characters from the MouseText character set.  CHR(27) turns MouseText on, while CHR(24) turns it off.\par You need to be sure and turn MouseText off if you turn it on \endash  the ORCA shell expects to me in normal mode when your program is finished.\par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE MouseTextOn;\par \par (* Turn mousetext on                                          *)\par \par BEGIN\par Write(CHR(27));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MouseTextOn;\par \par \par }\pard \qj\fi360\keepn\widctlpar\adjustright {\f6\fs18 PROCEDURE MouseTextOff;\par \par (* Turn mousetext off                                         *)\par \par BEGIN\par Write(CHR(24));\par }\pard \qj\fi360\widctlpar\adjustright {\f6\fs18 END MouseTextOff;\par }\pard \widctlpar\adjustright {\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\cols2\colsx140\endnhere\titlepg\sectdefaultcl {\headerl \pard\plain \widctlpar\adjustright \f4\cgrid {\f5\fs20 Index\par }}{\headerr \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Index\par }}{\headerf \pard\plain \qr\widctlpar\adjustright \f4\cgrid {\f5\fs20 Index\par }}\pard\plain \qj\keepn\widctlpar\adjustright \f4\cgrid {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\fs20 }{\v\fs20 Index\tcl1}}}{\v\fs20 \par }\pard \fi-360\li360\keepn\widctlpar\adjustright {\b\fs20 Special Characters\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX \\r  }}{\fldrslt {\fs20 \{0\} shell variable }{\b\fs20 104}{\fs20 \par \{1\}, \{2\}, ... shell variables }{\b\fs20 104}{\fs20 \par \{AuxType\} shell variable }{\b\fs20 105}{\fs20 , 143\par \{CaseSensitive\} shell variable }{\b\fs20 104}{\fs20 \par \{Command\} shell variable }{\b\fs20 104}{\fs20 \par \{Echo\} shell variable }{\b\fs20 104}{\fs20 \par \{Exit\} shell variable }{\b\fs20 105}{\fs20 , 149\par \{Exit\} variable 153\par \{Insert\} shell variable }{\b\fs20 105}{\fs20 \par \{KeepName\} shell variable }{\b\fs20 105}{\fs20 , 120\par \{KeepType\} shell variable }{\b\fs20 106}{\fs20 , 143\par \{Libraries\} shell variable }{\b\fs20 106}{\fs20 \par \{LinkName\} shell variable }{\b\fs20 106}{\fs20 , 149\par \{Parameters\} shell variable }{\b\fs20 106}{\fs20 \par \{Prompt\} shell variable }{\b\fs20 106}{\fs20 \par \{Separator\} shell variable }{\b\fs20 106}{\fs20 \par \{Status\} shell variable }{\b\fs20 107}{\fs20 , 141, 149\par \{Status\} variable 153\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 A\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 abort command 119\par ABS }{\b\fs20 275}{\fs20 \par ADR }{\b\fs20 298}{\fs20 \par ALIAS command 113, }{\b\fs20 116}{\fs20 , 161, 340\par ALLOCATE }{\b\fs20 296}{\fs20 \par alphabetizing directories 128\par APPEND directive 118\par appending to the end of a file }{\b\fs20 108}{\fs20 \par Apple\~II}{\fs18 GS}{\fs20  Toolbox 5, 20, 29\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 interface files }{\b\fs20 33}{\fs20 , 249\par learning 3, }{\b\fs20 32}{\fs20 \par reference manuals 4\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 apple menu 35\par AppleShare 147\par APW 1, 57\par APW C 127\par arctan }{\b\fs20 291}{\fs20 \par arrays }{\b\fs20 232}{\fs20 , 254\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 size limits 232\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 arrow keys }{\b\fs20 63}{\fs20 \par ASCII character set 102, 104, 154\par ASM6502 language 97\par ASM65816 command }{\b\fs20 117}{\fs20 \par ASM65816 language 96\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 ASML command 102, 105, 106, }{\b\fs20 118}{\fs20 , 121, 149, 156\par }\pard \s29\widctlpar\adjustright {\fs20 ASMLG command 105, 106, 118, 149, 156\par ASSEMBLE command 118\par assembly language 4, 39-46, 47, 227, 265\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 accessing global variables 45\par }\pard \s28\fi-180\li540\widctlpar\adjustright {\fs20 calling Modula-2 procedures and functions 46\par }\pard \s28\li360\widctlpar\adjustright {\fs20 direct page 43, 45\par passing parameters 42\par returning function values 41\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 Assign }{\b\fs20 297}{\fs20 \par assignment statement }{\b\fs20 253}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 type compatibility 253\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 AssignRead }{\b\fs20 302}{\fs20 \par AssignWrite }{\b\fs20 302}{\fs20 \par auto indent command }{\b\fs20 77}{\fs20 \par auto save command }{\b\fs20 78}{\fs20 \par auto-go command 13, }{\b\fs20 88}{\fs20 \par auxiliary file type 105, 124, 142\par Available }{\b\fs20 296}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 B\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 backing up the disks 7\par bank relative programs 148\par BASIC 80\par block 124, 125, 241, 245, }{\b\fs20 251}{\fs20 \par booleans }{\b\fs20 228}{\fs20 \par boot prefix 98\par branching\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 EXEC files 103\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 BREAK command }{\b\fs20 121}{\fs20 , 149\par break points 10, 13, 87\par BusyRead }{\b\fs20 303}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 C\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 C 75, 80, 97, 270\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also ORCA/C \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 cancel button 84\par CAP }{\b\fs20 276}{\fs20 \par cardinals 227\par case sensitivity 176, 265\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 shell 104, 105, 107\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 CASE statement }{\b\fs20 254}{\fs20 , 334\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 ELSE clause 254\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 case-sensitivity 223\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 CATALOG command 96, 107, 113, }{\b\fs20 122}{\fs20 , 128, 136, 143, 158\par }\pard \s29\widctlpar\adjustright {\fs20 CC command }{\b\fs20 125}{\fs20 \par CDEV directive 38, }{\b\fs20 265}{\fs20 \par ChainTo directive }{\b\fs20 265}{\fs20 \par CHANGE command }{\b\fs20 125}{\fs20 , 137\par characters }{\b\fs20 228}{\fs20 , 263\par check for errors command 80\par CHR }{\b\fs20 276}{\fs20 \par classic desk accessories 83\par clear command 60, 63, }{\b\fs20 69}{\fs20 \par Close }{\b\fs20 284}{\fs20 \par close command }{\b\fs20 66}{\fs20 \par CloseErrorOutput }{\b\fs20 286}{\fs20 \par CloseInput }{\b\fs20 286}{\fs20 \par CloseOutput }{\b\fs20 286}{\fs20 \par CMPL command 102, 118, }{\b\fs20 126}{\fs20 , 149\par CMPLG command 102, 118, }{\b\fs20 126}{\fs20 , 149\par code segment 120, 151\par command line 96, 103, 105, 108, 140, 156\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 prompt 106\par reading 57\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 command list 145\par command table }{\b\fs20 113}{\fs20 , 127, 144\par CommandLine }{\b\fs20 292}{\fs20 \par COMMANDS command 93, 113, }{\b\fs20 127}{\fs20 \par COMMENT command 107, }{\b\fs20 161}{\fs20 \par comments 226\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 EXEC files 107\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 COMPACT command }{\b\fs20 127}{\fs20 \par compaction 148\par CompareBytes }{\b\fs20 292}{\fs20 \par CompareStr }{\b\fs20 293}{\fs20 , }{\b\fs20 297}{\fs20 \par compilation errors 9, 307\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 compile command 11, 54, 80, 102, 118, 128, 151\par }\pard \s29\widctlpar\adjustright {\fs20 compile to disk command }{\b\fs20 79}{\fs20 \par compile to memory command 8, 25, }{\b\fs20 79}{\fs20 \par compiler 113\par compiler directives 19-21, 265-274\par compiler listings 118\par compiling a program 118, 121, 126, 128\par COMPRESS command }{\b\fs20 128}{\fs20 , 159\par Concat }{\b\fs20 297}{\fs20 \par console device 28\par constant expressions 241\par constants 223, }{\b\fs20 224}{\fs20 , }{\b\fs20 241}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 boolean 228\par cardinal 225\par character }{\b\fs20 225}{\fs20 \par characters 228\par hexadecimal }{\b\fs20 224}{\fs20 \par integer }{\b\fs20 224}{\fs20 \par octal }{\b\fs20 224}{\fs20 \par pointers 229\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 CONTINUE command }{\b\fs20 129}{\fs20 \par Control Panel 38\par control panel device 265\par Copy }{\b\fs20 297}{\fs20 \par copy command }{\b\fs20 68}{\fs20 , 102, }{\b\fs20 129}{\fs20 \par CopyBytes }{\b\fs20 293}{\fs20 \par copying disks 7\par CopyString }{\b\fs20 293}{\fs20 \par cos }{\b\fs20 291}{\fs20 \par CPM 147\par CREATE command }{\b\fs20 131}{\fs20 \par creation time 124\par CRUNCH utility 96, 99, }{\b\fs20 131}{\fs20 \par current prefix 98, 122, 128\par cut command }{\b\fs20 68}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 D\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 data fork 129, 219\par data formats 227\par DataBank directive }{\b\fs20 266}{\fs20 \par date 124\par DEALLOCATE }{\b\fs20 296}{\fs20 \par DeassignRead }{\b\fs20 303}{\fs20 \par DeassignWrite }{\b\fs20 303}{\fs20 \par debug code 10, 11, 37, 82, 85, 91\par debug menu , }{\b\fs20 85}{\fs20 \par debugger 11, 12, 16, 34, 71, 82, 83, 85\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 case sensitivity 17\par menu bar while debugging 31\par new desk accessories 37\par variables 16\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 DEC 231, }{\b\fs20 276}{\fs20 \par declaration section 241\par defaults for PRIZM 90\par definition modules 235\par Delete }{\b\fs20 284}{\fs20 , }{\b\fs20 297}{\fs20 \par DELETE command 101, 129, }{\b\fs20 132}{\fs20 \par delete key 60, }{\b\fs20 63}{\fs20 , 68, 69\par delete line command }{\b\fs20 77}{\fs20 \par delete to end of line command }{\b\fs20 76}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 DeRez 185-187, 191, 192, 195, 198, 206, 208, 213, 219\par }\pard \s29\widctlpar\adjustright {\fs20 DEREZ command }{\b\fs20 132}{\fs20 \par desk accessories 83, 268\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 desktop development environment 1, 7-17, 59-91\par }\pard \s29\widctlpar\adjustright {\fs20 desktop environment 31-38\par desktop programs 34\par DETAB 160\par device names 50, }{\b\fs20 100}{\fs20 , 129, 157\par device numbers 100\par devices 134, 157\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 .CONSOLE 101, 108\par .NULL 112\par .PRINTER 101, 108, 109\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 DEVICES command }{\b\fs20 134}{\fs20 \par directives 19\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see compiler directives \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 directories 49, 50, 81, 83\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also folders \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 directory walking }{\b\fs20 101}{\fs20 \par DISABLE command }{\b\fs20 135}{\fs20 , 138\par disassembler 124\par disk copying 129\par disk size 124\par DISKCHECK command }{\b\fs20 136}{\fs20 \par disks\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 requirements 1\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 display selection command }{\b\fs20 74}{\fs20 \par DISPOSE }{\b\fs20 299}{\fs20 \par DOS 128, 147, 159\par double-precision 228\par DUMPOBJ utility 116\par Dynamic directive }{\b\fs20 266}{\fs20 \par }\pard\plain \keepn\widctlpar\adjustright \f4\cgrid }}\pard\plain \keepn\widctlpar\adjustright \f4\cgrid {\b\fs20 E\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 ECHO command 121, }{\b\fs20 137}{\fs20 , 144\par edit command 54, 55, 98, }{\b\fs20 137}{\fs20 , 340\par edit menu }{\b\fs20 68}{\fs20 -}{\b\fs20 69}{\fs20 \par editor 113\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 about command }{\b\fs20 169}{\fs20 \par arrow keys 166\par auto-indent mode }{\b\fs20 164}{\fs20 , 175, 182\par beep the speaker command }{\b\fs20 169}{\fs20 \par beginning of line command }{\b\fs20 170}{\fs20 \par bottom of screen command 165, }{\b\fs20 170}{\fs20 \par buttons 168\par check boxes 168\par close command }{\b\fs20 170}{\fs20 \par control underscore key }{\b\fs20 164}{\fs20 \par copy command }{\b\fs20 170}{\fs20 \par create macros command 166\par cursor down command 165, }{\b\fs20 170}{\fs20 \par cursor left command 165, }{\b\fs20 170}{\fs20 \par cursor right command 165, }{\b\fs20 170}{\fs20 \par cursor up command 165, }{\b\fs20 171}{\fs20 \par customizing }{\b\fs20 182}{\fs20 \par cut command }{\b\fs20 171}{\fs20 \par define macros command }{\b\fs20 171}{\fs20 \par delete character command }{\b\fs20 171}{\fs20 , 182\par delete character left command }{\b\fs20 171}{\fs20 , 182\par delete command }{\b\fs20 171}{\fs20 \par delete line command }{\b\fs20 172}{\fs20 , 182\par delete to end of line command }{\b\fs20 172}{\fs20 , 182\par delete word command }{\b\fs20 172}{\fs20 , 182\par deleting characters in macros 166\par dialogs 167\par editline controls 167\par editline items 167\par end macro definition command 166\par end of line command }{\b\fs20 172}{\fs20 \par ESCAPE key 165\par escape mode }{\b\fs20 164}{\fs20 \par executing macros }{\b\fs20 166}{\fs20 \par exit macro creation command 166\par help command }{\b\fs20 172}{\fs20 \par hidden characters 165\par insert blank lines command 164\par insert line command }{\b\fs20 172}{\fs20 \par insert mode }{\b\fs20 163}{\fs20 \par insert space command }{\b\fs20 172}{\fs20 \par line length }{\b\fs20 163}{\fs20 \par list controls 168\par macro keystrokes }{\b\fs20 166}{\fs20 \par macros }{\b\fs20 166}{\fs20 \par modes 182\par mouse 169\par moving through a file }{\b\fs20 176}{\fs20 \par multiple files 173, 180\par multiple files. 179\par new command }{\b\fs20 173}{\fs20 \par open Apple key 164\par open command }{\b\fs20 173}{\fs20 \par over strike mode }{\b\fs20 163}{\fs20 , 183\par paste command 170, }{\b\fs20 174}{\fs20 \par quit command }{\b\fs20 174}{\fs20 \par remove blanks command }{\b\fs20 174}{\fs20 \par repeat counts }{\b\fs20 164}{\fs20 , }{\b\fs20 174}{\fs20 \par RETURN key 165, }{\b\fs20 175}{\fs20 \par save as command }{\b\fs20 175}{\fs20 \par save command }{\b\fs20 176}{\fs20 \par screen move commands 165\par scroll down one line command }{\b\fs20 176}{\fs20 \par scroll down one page command }{\b\fs20 176}{\fs20 \par scroll up one line }{\b\fs20 176}{\fs20 \par scroll up one page command }{\b\fs20 176}{\fs20 \par search and replace down command }{\b\fs20 178}{\fs20 \par search and replace up command }{\b\fs20 179}{\fs20 \par search down command }{\b\fs20 176}{\fs20 \par search up command }{\b\fs20 178}{\fs20 \par select file command }{\b\fs20 179}{\fs20 \par select mode 183\par }\pard\plain \s27\li720\widctlpar\adjustright \f4\cgrid {\fs20 by character }{\b\fs20 164}{\fs20 , 165, 174\par by line }{\b\fs20 164}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 set/clear auto-indent mode command }{\b\fs20 181}{\fs20 \par set/clear escape mode command }{\b\fs20 181}{\fs20 \par set/clear insert mode command }{\b\fs20 181}{\fs20 \par set/clear select mode command }{\b\fs20 181}{\fs20 \par set/clear tab stops command }{\b\fs20 179}{\fs20 \par setting defaults }{\b\fs20 182}{\fs20 \par shift left command }{\b\fs20 179}{\fs20 \par shift right command }{\b\fs20 180}{\fs20 \par start of line command 165\par status banner 119\par switch files command }{\b\fs20 180}{\fs20 \par tab command 165, }{\b\fs20 180}{\fs20 \par tab left command 165, }{\b\fs20 181}{\fs20 \par tab mode 183\par tabs 165, 168\par top of screen command 165, }{\b\fs20 181}{\fs20 \par undo command 171\par undo delete buffer 171, 182\par undo delete command }{\b\fs20 182}{\fs20 \par version }{\b\fs20 169}{\fs20 \par word left command 165, }{\b\fs20 182}{\fs20 \par word right command 165, }{\b\fs20 182}{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 EDITOR file 99\par ELSE clause }{\b\fs20 138}{\fs20 , 145, 256\par ELSE IF clause 145\par ELSE IF clause of IF command 149\par ELSIF clause 256\par ENABLE command 136, }{\b\fs20 138}{\fs20 , 143\par END command 121, 129, }{\b\fs20 139}{\fs20 , 144, 145, 149\par END directive 119\par ENTAB utility }{\b\fs20 138}{\fs20 \par enter key 60\par entier }{\b\fs20 291}{\fs20 \par enumerations }{\b\fs20 231}{\fs20 \par EOF 125\par ERASE command }{\b\fs20 139}{\fs20 \par error levels 326\par error output 55, 98, 108\par error reporting\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 compiler 118\par shell 105, 107, 108, 141\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 EXCL }{\b\fs20 277}{\fs20 \par EXEC command }{\b\fs20 140}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 exec files 47, 97, }{\b\fs20 102}{\fs20 , 121, 129, 137, 140, 145, 149, 156\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 parameter passing 103, 144, 157\par redirection 108\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 EXEC language 102, 140\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 executable files 28, 81, 82, 96, 97, 105, 113, 147\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see individual file types \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 execute command }{\b\fs20 84}{\fs20 , 104, 106, }{\b\fs20 140}{\fs20 , 157\par execute options command }{\b\fs20 84}{\fs20 \par executing a program 121, 126\par EXISTS command }{\b\fs20 140}{\fs20 \par EXIT command }{\b\fs20 141}{\fs20 \par EXIT statement }{\b\fs20 255}{\fs20 , 257\par exp }{\b\fs20 291}{\fs20 \par EXPORT command 104, }{\b\fs20 141}{\fs20 , 157\par EXPRESS command }{\b\fs20 141}{\fs20 \par expressed files 148\par expressions 261-264\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 shell }{\b\fs20 107}{\fs20 , 145\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ExpressLoad 141\par extended files\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see resources \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 extending a selection 61\par extras menu 59, 63, }{\b\fs20 75}{\fs20 -}{\b\fs20 78}{\fs20 \par EZEndGraph procedure 30\par EZStartGraph procedure 30\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 F\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 false 228\par file access flags 124, 135, 138, 143\par file length 125\par file menu }{\b\fs20 66}{\fs20 -}{\b\fs20 67}{\fs20 , 79\par file names 49, }{\b\fs20 100}{\fs20 , 124\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also path names \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 file system translator 146, 147\par file types 102, 105, 106, 142, 150, 159\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 auxtype\par }\pard\plain \s27\li720\widctlpar\adjustright \f4\cgrid {\fs20 see auxiliary file type \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 CDA 83\par CDV 38\par EXE 28, 35, 56, 83, 84\par NDA 35, 37, 83\par PIF 38\par }\pard \s28\fi-180\li540\widctlpar\adjustright {\fs20 S16 28, 31, 57, 83, 90, 97, 124, 337, 338, 341\par }\pard \s28\li360\widctlpar\adjustright {\fs20 SRC 102, 123, 159, 173\par SYS 337, 338, 341\par TIF 38\par TXT 96, 102, 159, 173\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 files 333\par FILETYPE command }{\b\fs20 142}{\fs20 \par find command }{\b\fs20 72}{\fs20 -73, 74\par find menu }{\b\fs20 72}{\fs20 -}{\b\fs20 75}{\fs20 \par find same command }{\b\fs20 74}{\fs20 \par Finder 342\par FLOAT }{\b\fs20 277}{\fs20 \par folders 49\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also directories \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 FOR command 104, 121, 129, 139, }{\b\fs20 144}{\fs20 \par FOR statement }{\b\fs20 255}{\fs20 \par FormatLongReal }{\b\fs20 293}{\fs20 \par FormatReal }{\b\fs20 294}{\fs20 \par formatting disks }{\b\fs20 139}{\fs20 , }{\b\fs20 146}{\fs20 \par forward }{\b\fs20 248}{\fs20 \par FROM statement 29, 30, 33, 53, 99, 151, 341\par FST 146, 147\par functions 223\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 G\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 GetChar }{\b\fs20 294}{\fs20 \par getCommandLine procedure 57\par GetPos }{\b\fs20 284}{\fs20 \par GETREG\tab ` }{\b\fs20 299}{\fs20 \par go command 12, }{\b\fs20 86}{\fs20 \par goto command 61, }{\b\fs20 75}{\fs20 \par goto next return command 15, }{\b\fs20 87}{\fs20 \par graphics environment 29\par graphics programs 70\par graphics window 8, 9, 11, 12, 29, }{\b\fs20 70}{\fs20 , 83\par GS/OS 4, 106\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 interface files 249\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 GS/OS aware 99\par HALT }{\b\fs20 277}{\fs20 \par hard disks 339\par help command 57, 96, 99, }{\b\fs20 144}{\fs20 , 342\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 hexadecimal 71, 123, 124, 125, 134, 211, 213, 217, 219\par }\pard \s29\widctlpar\adjustright {\fs20 hidden characters 165\par HIGH }{\b\fs20 277}{\fs20 \par high level language debugger 34\par High Sierra 147\par HighWORD }{\b\fs20 294}{\fs20 \par HISTORY commands }{\b\fs20 145}{\fs20 \par HOME commands }{\b\fs20 145}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 I\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 identifiers 223\par IEEE floating-point standard 227\par IF command 139, }{\b\fs20 145}{\fs20 , 149\par IF statement }{\b\fs20 256}{\fs20 \par implementation modules 235, }{\b\fs20 236}{\fs20 \par IMPORT\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see FROM \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 IN clause of FOR command 144\par INC 231, }{\b\fs20 278}{\fs20 \par INCL }{\b\fs20 278}{\fs20 \par indenting 63\par INIT command 99, }{\b\fs20 146}{\fs20 \par INIT directive 38, }{\b\fs20 267}{\fs20 , 272\par initialization procedure 120\par Inits 38, 267, 272\par INLINE\tab ` }{\b\fs20 299}{\fs20 \par InOut module 28\par INPUT command }{\b\fs20 147}{\fs20 \par input redirection 55\par Insert }{\b\fs20 298}{\fs20 \par insert line command }{\b\fs20 76}{\fs20 \par insert mode 59, 62, 63, 77, 90\par insertion point 59-63, 65, 74, 75, 77\par installation 1\par installing ORCA/Modula-2 337\par integers 227\par interface files 341\par IOTRANSFER }{\b\fs20 300}{\fs20 , }{\b\fs20 304}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 J\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 join lines command }{\b\fs20 76}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 K\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 KEEP directive 105, 119, }{\b\fs20 267}{\fs20 \par KEEP parameter 105, 119, 149, 151\par key 120\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 L\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 labels\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 global 119\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 language names 108, 124, 140, 154, 157, 159\par language numbers }{\b\fs20 97}{\fs20 , 157, 182\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 language stamp 96, 102, 118, 124, 126, 137, 140\par }\pard \s29\widctlpar\adjustright {\fs20 languages menu 10, 79, 89\par Languages prefix 98, 99, 113\par learning Modula-2 3\par Length }{\b\fs20 284}{\fs20 , }{\b\fs20 298}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 libraries 23, 47, 53, 83, 98, 106, 149, 150, 152, 283-306, 341\par }\pard \s29\widctlpar\adjustright {\fs20 library prefix 53, 83, 98, 99, 341\par line editor }{\b\fs20 93}{\fs20 -}{\b\fs20 95}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 clear-line command 94\par cursor-left command 94\par cursor-right command 94\par delete-character-left command 94\par delete-to-end-of-line command 94\par end-of-line command 94\par execute command 95\par insert mode 94\par start-of-line command 94\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 line numbers 75\par link command 54, }{\b\fs20 82}{\fs20 , 103, 106, 121, }{\b\fs20 147}{\fs20 \par link errors 307, 326\par link map 118, 147\par linker 98, 106, 113, 147, 307, 326, 341\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 script files 149\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 LINKER command }{\b\fs20 149}{\fs20 \par linking a program 118, 121, 126\par Lisa 147\par LIST directive 118\par ln }{\b\fs20 291}{\fs20 \par load files\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see executable files \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 local modules 239\par locking files 135\par LOGIN file 99, 117, 141, 154, 157, 340\par LONG }{\b\fs20 278}{\fs20 \par long command lines 103\par long integers 227\par longint\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see long integers \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 LongWORD }{\b\fs20 294}{\fs20 \par Lookup }{\b\fs20 284}{\fs20 \par LOOP command 121, 129, 139, }{\b\fs20 149}{\fs20 \par LOOP statement }{\b\fs20 257}{\fs20 \par LoWORD }{\b\fs20 294}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 M\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 M2Defs 33, 53, 99\par Macintosh 147\par MAKELIB utility 98, 99, }{\b\fs20 150}{\fs20 \par MAX }{\b\fs20 279}{\fs20 \par memory\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 requirements 1\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 memory management 333\par memory model 342\par menu bar 13, 31, 34, 72, 75, 86\par menus 9\par merging files 160\par MERR directive 118\par MIN }{\b\fs20 279}{\fs20 \par modification date 152, 159\par modify time 124\par Modula-2 63, 65, 75, 77, 80, 90, 97, 147\par MODULA2 command }{\b\fs20 151}{\fs20 \par modules }{\b\fs20 235}{\fs20 , 239\par mouse 9, 169\par MouseText 349\par MOVE command 102, }{\b\fs20 152}{\fs20 \par MS/DOS 147\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 N\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 NDA directive 35, }{\b\fs20 268}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 examples 36\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 networks 98\par NEW }{\b\fs20 300}{\fs20 \par new command 66\par new desk accessories 35, 36, 37\par new procedure 333\par NEWER command }{\b\fs20 152}{\fs20 \par NEWPROCESS }{\b\fs20 301}{\fs20 , }{\b\fs20 305}{\fs20 \par NIL 229\par NILCheck directive }{\b\fs20 269}{\fs20 \par NoImp directive }{\b\fs20 269}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 O\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 object files 8, 79, 82, 83, 327, 329\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see executable files \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 object module format 151\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 object modules 105, 119, 121, 128, 131, 147, 150\par }\pard \s29\widctlpar\adjustright {\fs20 object segment 147\par octal 211, 213, 218\par ODD }{\b\fs20 279}{\fs20 \par OMF 127\par open command 8, 11, }{\b\fs20 66}{\fs20 , 67\par OpenErrorOutput }{\b\fs20 286}{\fs20 \par OpenInput }{\b\fs20 286}{\fs20 \par OpenOutput }{\b\fs20 287}{\fs20 \par operator precedence 264\par ORCA 112\par ORCA.Sys16 340\par ORCA/C 4, 270, 341\par ORCA/M 4, 327, 329, 338\par ORCA/Modula-2 109, 128, 338\par ORCA/Modula-2 language 97\par ORCA/Pascal 4, 270\par ORD 231, }{\b\fs20 280}{\fs20 \par ord function 229\par output 28\par output redirection 55\par over strike command 59, }{\b\fs20 77}{\fs20 \par over strike mode 59, 62, 63, 77, 90\par OverflowCheck directive }{\b\fs20 270}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 P\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 packed arrays 228\par page setup command }{\b\fs20 67}{\fs20 \par parameters 246-248\par partial compilation 81, 119, 131\par Pascal 63, 77, 80, 97, 270\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also ORCA/Pascal \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 PASCAL command }{\b\fs20 153}{\fs20 \par Pascal directive }{\b\fs20 270}{\fs20 \par paste command 60, 68\par path names 49-51, 53, 97, 102, 106, 120, 123\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see also file names \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 PIFs 267, 272\par pipes 56, 99, }{\b\fs20 112}{\fs20 , 341\par pointers }{\b\fs20 229}{\fs20 , 263\par Pos }{\b\fs20 298}{\fs20 \par prefix 0-7 99\par PREFIX command 97, 99, }{\b\fs20 153}{\fs20 \par prefixes 51\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 numbers }{\b\fs20 97}{\fs20 , 99, 101, 113\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 print command 60, }{\b\fs20 67}{\fs20 \par printer device 55\par PRINTER directive 120\par printers 55, }{\b\fs20 109}{\fs20 -}{\b\fs20 112}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 characters per line 110\par configuration 109\par control characters 111\par lines per page 110\par redirecting output 108, 109\par slot 110\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 printing files 67, 107, 160\par PRIZM 340\par procedure types 247\par procedures 223, }{\b\fs20 245}{\fs20 \par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 calls 257\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ProDOS 146, 147\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 interface files 249\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 ProDOS 8 97, 143\par PRODOS command 96, }{\b\fs20 154}{\fs20 , 159\par PRODOS language 96, 102, 154\par profile command }{\b\fs20 87}{\fs20 \par profiler 14, 87, 91\par program launchers 98\par program modules 235\par program size 124\par Programmer\rquote s Reference for System 6.0 4\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 programming examples 121, 129, 144, 146, 149\par }\pard \s29\widctlpar\adjustright {\fs20 PutChar }{\b\fs20 294}{\fs20 \par PutCharToError }{\b\fs20 295}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 Q\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 QuickDraw II 29\par quit command }{\b\fs20 67}{\fs20 , }{\b\fs20 154}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 R\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 RAM 78, 99\par RAM disks 78, 339\par range checking 269, 270, 271, 273\par RangeCheck directive 231, }{\b\fs20 271}{\fs20 , 333\par Read }{\b\fs20 287}{\fs20 , }{\b\fs20 303}{\fs20 \par ReadCard }{\b\fs20 287}{\fs20 \par ReadChar }{\b\fs20 285}{\fs20 \par ReadInt }{\b\fs20 287}{\fs20 \par ReadLongInt }{\b\fs20 287}{\fs20 \par ReadLongReal }{\b\fs20 288}{\fs20 \par ReadReal }{\b\fs20 288}{\fs20 \par ReadString }{\b\fs20 288}{\fs20 \par ReadWord }{\b\fs20 285}{\fs20 \par ReadWrd }{\b\fs20 288}{\fs20 \par real numbers }{\b\fs20 227}{\fs20 \par records }{\b\fs20 233}{\fs20 , 259\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 size limits 233\par variant 233\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 redirection 96, 107, 108, 120\par registration card 2\par Rename }{\b\fs20 285}{\fs20 \par RENAME command 95, 102, }{\b\fs20 154}{\fs20 \par repeat statement }{\b\fs20 257}{\fs20 \par replace command }{\b\fs20 74}{\fs20 , 75\par replace same command }{\b\fs20 75}{\fs20 \par RESEQUAL command }{\b\fs20 155}{\fs20 \par reserved symbols }{\b\fs20 224}{\fs20 \par reserved words }{\b\fs20 223}{\fs20 \par resource description file 186, 189\par resource fork 125, 130, 219\par resources 130, 132, 155, 156, 185\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 see Rez \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 restartable programs 96, 113, 127\par return characters 165\par return key 63, 71, 73, 77\par RETURN statement }{\b\fs20 258}{\fs20 \par revert to saved command }{\b\fs20 67}{\fs20 \par Rez 80, 132\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 append statement 212\par arrays 198, 202, 205\par built-in functions 204, 215\par change statement 201\par comments 186\par conditional compilation 208\par data statement 191\par define statement 208\par delete statement 201\par escape characters 218\par expressions 214\par if statement 208\par include statement 99, 189, 212\par labels 204, 205, 206, 207\par macros 208\par options 220\par printf statement 209\par read statement 191\par resource attributes 190\par resource statement 201, 213-219\par resource types 191\par strings 195, 217, 218\par switch statement 199, 202\par symbols 200\par type statement 191\par undef statement 208\par variables 215\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 REZ command }{\b\fs20 156}{\fs20 \par Rez Compiler 185\par ROM disks 339\par RTL directive 267, }{\b\fs20 272}{\fs20 \par ruler 65, 78\par run command 54, 105, 106, 118, }{\b\fs20 156}{\fs20 \par run menu 11, }{\b\fs20 78}{\fs20 -}{\b\fs20 85}{\fs20 \par run-time errors 307\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 S\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 Samples folder 11\par save as command }{\b\fs20 67}{\fs20 \par save command }{\b\fs20 66}{\fs20 \par scalars 16, 71, }{\b\fs20 227}{\fs20 , 228, 231, 241\par scope 245\par script files\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 linker 149\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 scripts 340\par Segment directive }{\b\fs20 272}{\fs20 \par segments 266, 272\par select all command 61, }{\b\fs20 69}{\fs20 \par selecting a document 61\par selecting lines 60\par selecting text 60\par selecting words 61\par separate compilation 83\par separators }{\b\fs20 226}{\fs20 \par SET command 104, 149, }{\b\fs20 156}{\fs20 , 161\par set/clear break points command }{\b\fs20 87}{\fs20 \par SetPos }{\b\fs20 285}{\fs20 \par SETREG }{\b\fs20 301}{\fs20 \par sets }{\b\fs20 228}{\fs20 , 254, 334\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 shell 1, 47-58, 60, 79, 81, 83, 88, 89, 93-161, 340\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 command table 340\par commands 48\par errors 57\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 shell calls 249\par shell command }{\b\fs20 88}{\fs20 \par shell commands 102\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 built-in commands 96, 113\par command expansion 93\par command list 94, 95\par command types }{\b\fs20 95}{\fs20 , 113\par language names }{\b\fs20 96}{\fs20 , 113\par metacharacters 119\par multiple commands 95, 103\par parameters 118, 140\par utilities 96\par utility commands 113\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 shell identifier 57\par shell prefix 98, 113, 127, 172\par shell prompt 95, 106\par shell variables }{\b\fs20 104}{\fs20 , 140, 147\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 assigning values to 104, 156, 161\par metacharacters 105\par scope 104, 141, 157\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 shell window 8, 9, 15, 23, 47, 48\par shell window command }{\b\fs20 70}{\fs20 \par SHIFT }{\b\fs20 301}{\fs20 \par shift left command }{\b\fs20 75}{\fs20 \par shift right command }{\b\fs20 76}{\fs20 \par SHORT }{\b\fs20 280}{\fs20 \par SHOW command 100, 108, 126, 154, }{\b\fs20 157}{\fs20 \par show ruler command 65, }{\b\fs20 78}{\fs20 \par SHUTDOWN command }{\b\fs20 158}{\fs20 \par sin }{\b\fs20 291}{\fs20 \par site license 7\par SIZE }{\b\fs20 281}{\fs20 \par SOS 147\par source files 159\par sparse files 124\par split screen }{\b\fs20 62}{\fs20 \par sqrt }{\b\fs20 292}{\fs20 \par stack command }{\b\fs20 70}{\fs20 \par StackCheck directive }{\b\fs20 273}{\fs20 \par Stacksize directive }{\b\fs20 273}{\fs20 \par standard input 55, 56, 98, 108\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 standard output 28, 48, 55, 56, 98, 108, 122, 137, 160\par }\pard \s29\widctlpar\adjustright {\fs20 standard prefixes }{\b\fs20 97}{\fs20 , 99, 153, 157\par step command 12, 13, 34, }{\b\fs20 85}{\fs20 , 86\par step through command 15, }{\b\fs20 86}{\fs20 \par stop command 12, 34, 86, }{\b\fs20 87}{\fs20 \par storage type 125\par strings }{\b\fs20 232}{\fs20 , 253, 254\par subranges }{\b\fs20 231}{\fs20 , 253, 254\par SWITCH command 128, }{\b\fs20 158}{\fs20 \par SYM files 151\par symbol tables\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 linker 119, 147\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 SYSCMND file 99, 113, 127, 340\par SYSEMAC file 99, 166, 340\par SYSHELP file 172, 340\par SYSPIPEx files 112\par SYSTABS file 65, 89, 90, 98, 99, 182, 340\par System 6.0 4\par system configuration 337, 340\par SYSTEM files 97\par SYSTEMP file 170, 174\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 T\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 tab key }{\b\fs20 63}{\fs20 , 65, 74\par tab stop 63, }{\b\fs20 65}{\fs20 , 78, 89\par tabs 165, 168, 176, 177, 183\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 ENTAB utility 138\par removing 160\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 tag fields 233\par terminal errors 119, 330\par Terminate }{\b\fs20 295}{\fs20 \par text based development 1\par TEXT command }{\b\fs20 159}{\fs20 \par text environment 23, 25, 27, 47-58\par text files 96, }{\b\fs20 102}{\fs20 , 113, 154, 159, 160\par TEXT language 97, 102, 159\par text programming 345\par text screen 345\par TIFs 267, 272\par tile command }{\b\fs20 69}{\fs20 \par time 124\par tokens 223\par Tool directive 249\par toolbox 3\par }\pard\plain \s28\li360\widctlpar\adjustright \f4\cgrid {\fs20 interface files 33\par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\fs20 Toolbox Programming in Pascal 5\par ToolError }{\b\fs20 295}{\fs20 \par tools 266\par TOUCH command }{\b\fs20 159}{\fs20 \par trace command 12, 13, 70, }{\b\fs20 86}{\fs20 , 87, 88\par TRANSFER }{\b\fs20 302}{\fs20 , }{\b\fs20 305}{\fs20 \par true 228\par TRUNC }{\b\fs20 281}{\fs20 \par TRUNCD }{\b\fs20 281}{\fs20 \par TSIZE }{\b\fs20 302}{\fs20 \par TYPE command 139, }{\b\fs20 160}{\fs20 \par type compatibility 253\par types 223, 227, }{\b\fs20 242}{\fs20 , 247\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 U\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 UNALIAS command 117, }{\b\fs20 161}{\fs20 \par undo command 60, }{\b\fs20 68}{\fs20 \par units 99\par unlocking files 138\par UNSET command 104, 105, 149, 157, }{\b\fs20 161}{\fs20 \par UserID }{\b\fs20 295}{\fs20 \par utilities 56, 57, 341\par Utilities prefix 96, 98, 99, 113, 144\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 V\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 VAL }{\b\fs20 281}{\fs20 \par variables 223, }{\b\fs20 243}{\fs20 \par variables command 16, }{\b\fs20 70}{\fs20 \par variables window 16, 17, 70, 71, }{\b\fs20 86}{\fs20 \par visual cues 3\par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 volume names 101, 122, 128, 129, 139, 146, 157\par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\fs20 W\par }{\fs20 \par }\pard\plain \s29\widctlpar\adjustright \f4\cgrid {\field\flddirty{\*\fldinst {\fs20  INDEX  }}{\fldrslt {\fs20 wait flag 119\par while statement }{\b\fs20 258}{\fs20 \par }\pard \s29\fi-180\li180\widctlpar\adjustright {\fs20 wildcards 53, }{\b\fs20 101}{\fs20 , 123, 129, 132, 137, 140, 152, 158, 160\par }\pard \s29\widctlpar\adjustright {\fs20 windows 9, 31\par windows menu }{\b\fs20 69}{\fs20 -}{\b\fs20 72}{\fs20 \par with statement }{\b\fs20 259}{\fs20 \par word tabbing }{\b\fs20 64}{\fs20 \par work prefix 98, 99, 112, 170, 174\par Write }{\b\fs20 288}{\fs20 , }{\b\fs20 303}{\fs20 \par write protect 131\par WriteCard }{\b\fs20 288}{\fs20 \par WriteChar }{\b\fs20 285}{\fs20 \par WriteFixPat }{\b\fs20 289}{\fs20 \par WriteHex }{\b\fs20 289}{\fs20 \par WriteInt }{\b\fs20 289}{\fs20 \par WriteLn 23, }{\b\fs20 289}{\fs20 , }{\b\fs20 303}{\fs20 \par WriteLongFixPat }{\b\fs20 289}{\fs20 \par WriteLongInt }{\b\fs20 289}{\fs20 \par WriteLongReal }{\b\fs20 290}{\fs20 \par WriteOct }{\b\fs20 290}{\fs20 \par WriteReal }{\b\fs20 290}{\fs20 \par WriteString }{\b\fs20 290}{\fs20 , }{\b\fs20 304}{\fs20 \par WriteWord }{\b\fs20 285}{\fs20 \par WriteWrd }{\b\fs20 290}{\fs20 \par }\pard\plain \widctlpar\adjustright \f4\cgrid }}\pard\plain \widctlpar\adjustright \f4\cgrid {\par }}