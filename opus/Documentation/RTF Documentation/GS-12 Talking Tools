{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f23\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f25\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f26\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f27\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f28\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f34\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f35\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f37\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f38\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f40\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f41\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f42\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f43\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f44\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f45\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f46\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f47\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f48\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f49\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f50\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f51\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f52\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f53\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f55\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f57\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f58\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f60\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f61\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f62\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f63\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f64\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f65\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f66\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f67\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f68\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f69\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f77\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f78\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f80\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f81\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f82\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f86\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f87\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f88\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f89\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f90\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f91\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f92\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f93\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f96\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f97\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f98\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f99\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f100\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f101\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f102\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f103\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f104\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f105\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f106\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f107\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f108\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f109\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f110\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f112\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f113\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f114\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f115\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f116\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f117\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f118\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f119\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f121\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f122\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f123\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f124\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f125\fnil\fcharset2\fprq2 Zapf Dingbats;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}{\*\ud{\fonttbl{\f0\fnil\fcharset256\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fnil\fcharset256\fprq2{\*\panose 020b0604020202020204}Arial;}{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f3\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}Symbol;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}{\f8\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Tms Rmn;}{\f9\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}Helv;}{\f10\froman\fcharset77\fprq2{\*\panose 00000000000000000000}MS Serif;}{\f11\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}MS Sans Serif;}{\f12\fnil\fcharset256\fprq2{\*\panose 02020502060305060204}New York;}{\f13\fswiss\fcharset77\fprq2{\*\panose 00000000000000000000}System;}{\f14\fnil\fcharset2\fprq2{\*\panose 05020102010804080708}Wingdings;}{\f15\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Roman font face;}{\f16\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Modern font face;}{\f17\froman\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Roman font face;}{\f18\fmodern\fcharset256\fprq1{\*\panose 00000000000000000000}FE Truetype Modern font face;}{\f19\froman\fcharset77\fprq2{\*\panose 00000000000000000000}Century;}{\f20\fnil\fcharset256\fprq2{\*\panose 020b0a06030101010103}Abadi MT Condensed Extra Bold;}{\f21\fnil\fcharset256\fprq2{\*\panose 020b0306030101010103}Abadi MT Condensed Light;}{\f22\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Andale Mono;}{\f23\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}Animals 1;}{\f24\fnil\fcharset256\fprq2{\*\panose 020b0a04020102020204}Arial Black;}{\f25\fnil\fcharset256\fprq2{\*\panose 020b0506020202030204}Arial Narrow;}{\f26\fnil\fcharset256\fprq2{\*\panose 020f0704030504030204}Arial Rounded MT Bold;}{\f27\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Bk BT;}{\f28\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde BkOb BT;}{\f29\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde Dm BT;}{\f30\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}AvantGarde DmOb BT;}{\f31\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde Md BT;}{\f32\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}AvantGarde MdOb BT;}{\f33\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Balloons;}{\f34\fnil\fcharset256\fprq2{\*\panose 02020602080505020303}Baskerville Old Face;}{\f35\fnil\fcharset256\fprq2{\*\panose 04030905020b02020c02}Bauhaus 93;}{\f36\fnil\fcharset256\fprq2{\*\panose 02020503060305020303}Bell MT;}{\f37\fnil\fcharset256\fprq2{\*\panose 02050806060905020404}Bernard MT Condensed;}{\f38\fnil\fcharset256\fprq2{\*\panose 02040602050305030304}Book Antiqua;}{\f39\fnil\fcharset256\fprq2{\*\panose 02050604050505020204}Bookman Old Style;}{\f40\fnil\fcharset256\fprq2{\*\panose 04030b070d0b02020403}Braggadocio;}{\f41\fnil\fcharset256\fprq2{\*\panose 020b0903060703020204}Britannic Bold;}{\f42\fnil\fcharset256\fprq2{\*\panose 03060802040406070304}Brush Script MT;}{\f43\fnil\fcharset256\fprq2{\*\panose 02040603050505030304}Calisto MT;}{\f44\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Capitals;}{\f45\fnil\fcharset256\fprq2{\*\panose 020b0502020202020204}Century Gothic;}{\f46\fnil\fcharset256\fprq2{\*\panose 02040604050505020304}Century Schoolbook;}{\f47\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Charcoal;}{\f48\fnil\fcharset256\fprq2{\*\panose 020b0806080604040204}Chicago;}{\f49\fnil\fcharset256\fprq2{\*\panose 04020805060202030203}Colonna MT;}{\f50\fnil\fcharset256\fprq2{\*\panose 030f0702030302020204}Comic Sans MS;}{\f51\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}CommonBullets;}{\f52\fnil\fcharset256\fprq2{\*\panose 0208090404030b020404}Cooper Black;}{\f53\fnil\fcharset256\fprq2{\*\panose 020e0705020206020404}Copperplate Gothic Bold;}{\f54\fnil\fcharset256\fprq2{\*\panose 020e0507020206020404}Copperplate Gothic Light;}{\f55\fnil\fcharset256\fprq2{\*\panose 04020505020e03040504}Desdemona;}{\f56\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Disney Print;}{\f57\fnil\fcharset256\fprq2{\*\panose 02090707080505020304}Engravers MT;}{\f58\fnil\fcharset256\fprq2{\*\panose 020b0504020202050204}Eurostile;}{\f59\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}Festive;}{\f60\fnil\fcharset256\fprq2{\*\panose 0204060206030a020304}Footlight MT Light;}{\f61\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}FrenchScript;}{\f62\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Gadget;}{\f63\fnil\fcharset256\fprq2{\*\panose 02020404030301010803}Garamond;}{\f64\fnil\fcharset256\fprq2{\*\panose 02040502050405020303}Georgia;}{\f65\fnil\fcharset256\fprq2{\*\panose 020b0a04020203020204}Gill Sans Ultra Bold;}{\f66\fnil\fcharset256\fprq2{\*\panose 02030808020601010101}Gloucester MT Extra Condensed;}{\f67\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}GME Title-Regular;}{\f68\fnil\fcharset256\fprq2{\*\panose 02020502050305020303}Goudy Old Style;}{\f69\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 1;}{\f70\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier 2;}{\f71\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 1;}{\f72\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier Bd 2;}{\f73\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 1;}{\f74\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Grolier BdIt 2;}{\f75\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 1;}{\f76\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Grolier It 2;}{\f77\fnil\fcharset256\fprq2{\*\panose 04040505050a02020702}Harrington;}{\f78\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Black;}{\f79\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica Compressed;}{\f80\fnil\fcharset256\fprq2{\*\panose 020b0806030902050204}Impact;}{\f81\fnil\fcharset256\fprq2{\*\panose 04020605060303030202}Imprint MT Shadow;}{\f82\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL;}{\f83\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso GI1 SILDoulosL I;}{\f84\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL;}{\f85\fnil\fcharset256\fprq2{\*\panose 00000400000000000000}Inso If1 SILDoulosL I;}{\f86\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Kidprint;}{\f87\fnil\fcharset256\fprq2{\*\panose 040307050d0c02020703}Kino MT;}{\f88\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Lucida Blackletter;}{\f89\fnil\fcharset256\fprq2{\*\panose 02040602050505020304}Lucida Bright;}{\f90\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Calligraphy;}{\f91\fnil\fcharset256\fprq2{\*\panose 02060602050505020204}Lucida Fax;}{\f92\fnil\fcharset256\fprq2{\*\panose 03010101010101010101}Lucida Handwriting;}{\f93\fnil\fcharset256\fprq2{\*\panose 020b0602030504020204}Lucida Sans;}{\f94\fnil\fcharset256\fprq2{\*\panose 020b0509030504030204}Lucida Sans Typewriter;}{\f95\fnil\fcharset256\fprq2{\*\panose 020b0602060201020203}Lydian MT;}{\f96\fnil\fcharset256\fprq2{\*\panose 03020802060602070202}Matura MT Script Capitals;}{\f97\fnil\fcharset256\fprq2{\*\panose 02040503050201020203}Minion Web;}{\f98\fnil\fcharset256\fprq2{\*\panose 03090702030407020403}Mistral;}{\f99\fnil\fcharset256\fprq2{\*\panose 02070704070505020303}Modern No. 20;}{\f100\fnil\fcharset256\fprq2{\*\panose 020b0509030404040204}Monaco;}{\f101\fnil\fcharset256\fprq2{\*\panose 03010101010201010101}Monotype Corsiva;}{\f102\fnil\fcharset2\fprq2{\*\panose 01010601010101010101}Monotype Sorts;}{\f103\fnil\fcharset256\fprq2{\*\panose 020b0509000000000004}Monotype.com;}{\f104\fnil\fcharset2\fprq2{\*\panose 02000500000000000000}MT Extra;}{\f105\fnil\fcharset256\fprq2{\*\panose 020b0504020203020204}News Gothic MT;}{\f106\fnil\fcharset256\fprq2{\*\panose 04050602080702020203}Onyx;}{\f107\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Palatino;}{\f108\fnil\fcharset256\fprq2{\*\panose 02020502060505020804}Perpetua Titling MT;}{\f109\fnil\fcharset256\fprq2{\*\panose 040506030a0602020202}Playbill;}{\f110\fnil\fcharset256\fprq2{\*\panose 02060603020205020403}Rockwell;}{\f111\fnil\fcharset256\fprq2{\*\panose 02060903040505020403}Rockwell Extra Bold;}{\f112\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Sand;}{\f113\fnil\fcharset256\fprq2{\*\panose 020b0603050302020204}SportsFigures;}{\f114\fnil\fcharset256\fprq2{\*\panose 040409050d0802020404}Stencil;}{\f115\fnil\fcharset256\fprq2{\*\panose 02000800000000000000}Swing;}{\f116\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Tahoma;}{\f117\fnil\fcharset256\fprq2{\*\panose 00000000000000000000}Techno;}{\f118\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Textile;}{\f119\fnil\fcharset256\fprq2{\*\panose 020b0603020202020204}Trebuchet MS;}{\f120\fnil\fcharset256\fprq2{\*\panose 020b0604030504040204}Verdana;}{\f121\fnil\fcharset2\fprq2{\*\panose 05030102010509060703}Webdings;}{\f122\fnil\fcharset256\fprq2{\*\panose 020a0a07050505020404}Wide Latin;}{\f123\fnil\fcharset2\fprq2{\*\panose 05020102010507070707}Wingdings 2;}{\f124\fnil\fcharset2\fprq2{\*\panose 05040102010807070707}Wingdings 3;}{\f125\fnil\fcharset2\fprq2 Zapf Dingbats;}{\f126\fnil\fcharset256\fprq2{\*\panose 05000000000000000000}ZapfDingbats BT;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \f12\cgrid \snext0 Normal;}{\s1\sb240\widctlpar\adjustright \b\f5\ul\cgrid \sbasedon0 \snext0 heading 1;}{\s2\sb120\widctlpar\adjustright \b\f5\cgrid \sbasedon0 \snext0 heading 2;}{\s3\li360\widctlpar\adjustright \b\f12\cgrid \sbasedon0 \snext0 heading 3;}{\s4\li360\widctlpar\adjustright \f12\ul\cgrid \sbasedon0 \snext0 heading 4;}{\s5\li720\widctlpar\adjustright \b\f12\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\s6\li720\widctlpar\adjustright \f12\fs20\ul\cgrid \sbasedon0 \snext0 heading 6;}{\s7\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 7;}{\s8\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 8;}{\s9\li720\widctlpar\adjustright \i\f12\fs20\cgrid \sbasedon0 \snext0 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\fi-240\li1920\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 \sautoupd index 8;}{\s16\fi-240\li2160\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 \sautoupd index 9;}{\s17\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext31 index heading;}{\s18\li960\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 \sautoupd toc 5;}{\s19\li1200\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 \sautoupd toc 6;}{\s20\li1440\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 \sautoupd toc 7;}{\s21\li2160\ri720\widctlpar\tldot\tx8280\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext0 toc 4;}{\s22\li1440\ri720\widctlpar\tx1440\tx2160\tqr\tx7920\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext0 toc 3;}{\s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext0 toc 2;}{\s24\ri720\sb200\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext0 toc 1;}{\s25\li2160\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 7;}{\s26\li1800\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 6;}{\s27\li1440\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 5;}{\s28\li1080\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 4;}{\s29\li720\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 index 3;}{\s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext0 index 2;}{\s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid \sbasedon0 \snext0 index 1;}{\*\cs32 \additive \sbasedon10 line number;}{\s33\li1680\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 \sautoupd toc 8;}{\s34\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext34 footer;}{\s35\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \f12\cgrid \sbasedon0 \snext35 header;}{\*\cs36 \additive \fs16\up6 \sbasedon10 footnote reference;}{\s37\widctlpar\adjustright \f12\fs20\cgrid \sbasedon0 \snext37 footnote text;}{\s38\li1920\widctlpar\adjustright \f12\cgrid \sbasedon0 \snext0 \sautoupd toc 9;}{\*\cs40 \additive \sbasedon10 page number;}{\s42\widctlpar\adjustright \b\f4\fs36\cgrid \sbasedon0 \snext42 Chapter Head;}{\s43\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid \sbasedon0 \snext43 C2 Header;}{\s44\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid \sbasedon0 \snext44 C3 Header;}}{\*\revtbl {Unknown;}}{\info{\title Talking Tools\'aa}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy24\hr19\min50}{\revtim\yr2000\mo10\dy24\hr19\min50}{\printim\yr2000\mo10\dy24\hr19\min47}{\version2}{\edmins0}{\nofpages105}{\nofwords27345}{\nofchars155869}{\*\company Byte Works, Inc.}{\nofcharsws191418}{\vern99}}\margl2160\margr2160\margt2880\margb2880 \facingp\widowctrl\ftnbj\aenddoc\hyphhotz0\sprstsp\otblrul\brkfrm\sprstsm\truncex\nolead\msmcap\lytprtmet\hyphcaps0\viewkind1\viewscale100 \fet0\sectd \sbkodd\pgnrestart\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerl \pard\plain \widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 ii}}}{\fs20 \par }}{\footerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 101}}}{\fs20 \par }}{\headerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\widctlpar\tx450\tx720\adjustright \f12\cgrid {\b\f4\fs72 \par \par Talking Tools}{\b\f4\fs48\up20 \u8482\'aa}{\b\f4\fs72 \par \par }{\f4\fs36 Computer Generated Speech for Your Apple}{\f4\fs28\up6 \u174\'a8}{\f4\fs36  II}{\f4\fs28 GS}{\f4\fs36 \par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4 \par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\b\f4\fs36 \par Barbara Allred\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par \par \par \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4\fs36 Byte Works, Inc.}{\f4 \par 4700 Irving Blvd. NW, Suite 207\par Albuquerque, NM  87114\par (505) 898-8183\par }\pard \widctlpar\tx450\tx720\adjustright {\f4\fs20 \par }\pard \qc\widctlpar\tx450\tx720\adjustright {\f4\fs20 Copyright 1991\par By The Byte Works, Inc.\par All Rights Reserved\par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\f4\fs20 \page }{\b\f4\fs18 Limited Warranty}{\f4\fs18  - Subject to the below stated limitations, Byte Works, Inc. hereby warrants that the programs contained in this unit will load and run on the standard manufacturer's configuration for the computer listed for a period of ninety (90) days from date of purchase.  Except for such warranty, this product is supplied on an "as is" basis without warranty as to merchantability or its fitness for any particular purpose.  The limits of warranty extend only to the original purchaser.\par Neither Byte Works, Inc. nor the authors of this program are liable or responsible to the purchaser and/or user for loss or damage caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, or anticipatory profits.\par To obtain the warranty offered, the enclosed purchaser registration card must be completed and returned to the Byte Works, Inc. within ten (10) days of purchase.\par }{\b\f4\fs18 Important Notice}{\f4\fs18  - This is a fully copyrighted work and as such is protected under copyright laws of the United States of America.  According to these laws, consumers of copywritten material may make copies for their personal use only.  Duplication for any purpose whatsoever would constitute infringement of copyright laws and the offender would be liable to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 file.\par This product is sold for use on a }{\i\f4\fs18 single computer}{\f4\fs18  at a }{\i\f4\fs18 single location}{\f4\fs18 .  Contact the publisher for information regarding licensing for use at multiple-workstation or multiple-computer installations.\par }{\b\f4\fs18 Use of Speech Tools}{\f4\fs18  - The SmoothTalker speech tools have been licensed to Byte Works for inclusion in the Talking Tools package.  To distribute the SmoothTalker speech tools in your own programs, you must obtain a separate license from First Byte, Inc.  For details, see Appendix B.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\f4\fs18 Byte Works is a registered trade mark of the Byte Works, Inc.\par }{\f4\fs14 \par }\pard \qc\fi540\widctlpar\tx450\tx720\adjustright {\f4\fs18 Program, Documentation and Design\par Copyright 1991\par Byte Works, Inc.\par \par Speech Tools\par Copyright 1987\par First Byte, Inc.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\f4\fs14 \par }\pard \qj\fi540\widctlpar\tx450\tx720\adjustright {\f4\fs18 Apple Computer, Inc. MAKES NO WARRANTIES, EITHER EXPRESSED OR IMPLIED, REGARDING THE ENCLOSED COMPUTER SOFTWARE PACKAGE, ITS MERCHANTABILITY OR ITS FITNESS FOR ANY PARTICULAR PURPOSE.  THE EXCLUSION OF IMPLIED WARRANTIES IS NOT PERMITTED BY SOME STATES.  THE ABOVE EXCLUSION MAY NOT APPLY TO YOU.  THIS WARRANTY PROVIDES YOU WITH SPECIFIC LEGAL RIGHTS.  THERE MAY BE OTHER RIGHTS THAT YOU MAY HAVE WHICH VARY FROM STATE TO STATE.\par GS/OS is a copyrighted program of Apple Computer, Inc. licensed to Byte Works, Inc. to distribute for use only in combination with Talking Tools.  Apple software shall not be copied onto another diskette (except for archive purpose) or into memory unless as part of the execution of Talking Tools.  When the Talking Tools have completed execution Apple Software shall not be used by any other program.\par }\pard \fi540\widctlpar\tx450\tx720\adjustright {\f4\fs18 Apple is a registered trademark of Apple Computer, Inc.\par Byte Works is a registered trademark of Byte Works, Inc.\par ORCA/C, ORCA/Pascal, ORCA/M and Talking Tools are trademarks of Byte Works, Inc.\par }\pard \qc\widctlpar\adjustright {\fs18 \par Master Set 1.0.1.1\par }{\f4 \sect }\sectd \sbkodd\pgnlcrm\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 1 - Introduction\par }}{\footerf \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\field{\*\fldinst {\f5\fs20  PAGE  }}{\fldrslt {\f5\fs20\lang1024 iii}}}{\f5\fs20 \par }}\pard\plain \s42\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 Table of Contents\par }\pard\plain \s24\ri720\sb200\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid {\field\fldedit{\*\fldinst {\f4  TOC \\f }}{\fldrslt Chapter 1  \endash  Introduction\tab {\field{\*\fldinst  PAGEREF _Toc497050721 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320031000000}}}{\fldrslt 1}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Who Should Use Talking Tools\tab {\field{\*\fldinst  PAGEREF _Toc497050722 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320032000000}}}{\fldrslt 1}}\par What You Should Have Received\tab {\field{\*\fldinst  PAGEREF _Toc497050723 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320033000000}}}{\fldrslt 1}}\par Back Up Your New Disks First!\tab {\field{\*\fldinst  PAGEREF _Toc497050724 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320034000000}}}{\fldrslt 2}}\par Installing the Speech Tools\tab {\field{\*\fldinst  PAGEREF _Toc497050725 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320035000000}}}{\fldrslt 2}}\par Required Hardware\tab {\field{\*\fldinst  PAGEREF _Toc497050726 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320036000000}}}{\fldrslt 2}}\par Required Software\tab {\field{\*\fldinst  PAGEREF _Toc497050727 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320037000000}}}{\fldrslt 3}}\par About This Manual\tab {\field{\*\fldinst  PAGEREF _Toc497050728 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320038000000}}}{\fldrslt 3}}\par \pard\plain \s22\li1440\ri720\widctlpar\tx1440\tx2160\tqr\tx7920\adjustright \fs20\lang1024\cgrid Visual Cues\tab {\field{\*\fldinst  PAGEREF _Toc497050729 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700320039000000}}}{\fldrslt 3}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Additional Reading and Reference\tab {\field{\*\fldinst  PAGEREF _Toc497050730 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330030000000}}}{\fldrslt 4}}\par \pard\plain \s24\ri720\sb200\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Chapter 2  \endash  Converting Text to Speech\tab {\field{\*\fldinst  PAGEREF _Toc497050731 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330031000000}}}{\fldrslt 5}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid How Do Computers Speak?\tab {\field{\*\fldinst  PAGEREF _Toc497050732 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330032000000}}}{\fldrslt 5}}\par Getting Started\tab {\field{\*\fldinst  PAGEREF _Toc497050733 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330033000000}}}{\fldrslt 5}}\par Overview of SpeakIt\tab {\field{\*\fldinst  PAGEREF _Toc497050734 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330034000000}}}{\fldrslt 6}}\par Speaking English Text\tab {\field{\*\fldinst  PAGEREF _Toc497050735 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330035000000}}}{\fldrslt 6}}\par Controlling Speech Parameters\tab {\field{\*\fldinst  PAGEREF _Toc497050736 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330036000000}}}{\fldrslt 7}}\par Translating Text to Phonetics\tab {\field{\*\fldinst  PAGEREF _Toc497050737 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330037000000}}}{\fldrslt 10}}\par Building Valid Phonetic Strings\tab {\field{\*\fldinst  PAGEREF _Toc497050738 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330038000000}}}{\fldrslt 12}}\par The Exceptions Dictionary\tab {\field{\*\fldinst  PAGEREF _Toc497050739 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700330039000000}}}{\fldrslt 14}}\par \pard\plain \s24\ri720\sb200\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Chapter 3 \endash  Speaking from a Computer Program\tab {\field{\*\fldinst  PAGEREF _Toc497050740 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340030000000}}}{\fldrslt 17}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Accessing the Interface Files\tab {\field{\*\fldinst  PAGEREF _Toc497050741 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340031000000}}}{\fldrslt 17}}\par The Speak Program at the Global Level\tab {\field{\*\fldinst  PAGEREF _Toc497050742 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340032000000}}}{\fldrslt 17}}\par The Init Procedure\tab {\field{\*\fldinst  PAGEREF _Toc497050743 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340033000000}}}{\fldrslt 19}}\par Speaking an English String\tab {\field{\*\fldinst  PAGEREF _Toc497050744 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340034000000}}}{\fldrslt 21}}\par Converting an English String to Phonetics\tab {\field{\*\fldinst  PAGEREF _Toc497050745 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340035000000}}}{\fldrslt 22}}\par Speaking a Phonetic String\tab {\field{\*\fldinst  PAGEREF _Toc497050746 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340036000000}}}{\fldrslt 23}}\par Setting Global Speech Parameters\tab {\field{\*\fldinst  PAGEREF _Toc497050747 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340037000000}}}{\fldrslt 25}}\par The Exceptions Dictionary\tab {\field{\*\fldinst  PAGEREF _Toc497050748 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340038000000}}}{\fldrslt 26}}\par \pard\plain \s22\li1440\ri720\widctlpar\tx1440\tx2160\tqr\tx7920\adjustright \fs20\lang1024\cgrid Displaying the Dictionary\tab {\field{\*\fldinst  PAGEREF _Toc497050749 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700340039000000}}}{\fldrslt 26}}\par Adding Entries to the Dictionary\tab {\field{\*\fldinst  PAGEREF _Toc497050750 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350030000000}}}{\fldrslt 28}}\par Removing Entries from the Dictionary\tab {\field{\*\fldinst  PAGEREF _Toc497050751 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350031000000}}}{\fldrslt 28}}\par Loading A Dictionary From Disk\tab {\field{\*\fldinst  PAGEREF _Toc497050752 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350032000000}}}{\fldrslt 29}}\par Saving A Dictionary To Disk\tab {\field{\*\fldinst  PAGEREF _Toc497050753 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350033000000}}}{\fldrslt 30}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid The ShutDown Procedure\tab {\field{\*\fldinst  PAGEREF _Toc497050754 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350034000000}}}{\fldrslt 31}}\par \pard\plain \s24\ri720\sb200\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Chapter 4 \endash  Talking Tools Tool Set Reference\tab {\field{\*\fldinst  PAGEREF _Toc497050755 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350035000000}}}{\fldrslt 33}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Using Talking Tools With Pascal\tab {\field{\*\fldinst  PAGEREF _Toc497050756 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350036000000}}}{\fldrslt 33}}\par Using Talking Tools With C\tab {\field{\*\fldinst  PAGEREF _Toc497050757 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350037000000}}}{\fldrslt 34}}\par Using Talking Tools With Assembly Language\tab {\field{\*\fldinst  PAGEREF _Toc497050758 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350038000000}}}{\fldrslt 35}}\par Speech Tool Set\tab {\field{\*\fldinst  PAGEREF _Toc497050759 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700350039000000}}}{\fldrslt 36}}\par \pard\plain \s22\li1440\ri720\widctlpar\tx1440\tx2160\tqr\tx7920\adjustright \fs20\lang1024\cgrid $0135\tab SpeechBootInit\tab {\field{\*\fldinst  PAGEREF _Toc497050760 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360030000000}}}{\fldrslt 36}}\par $0235\tab SpeechStartUp\tab {\field{\*\fldinst  PAGEREF _Toc497050761 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360031000000}}}{\fldrslt 37}}\par $0335\tab SpeechShutDown\tab {\field{\*\fldinst  PAGEREF _Toc497050762 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360032000000}}}{\fldrslt 38}}\par $0435\tab SpeechVersion\tab {\field{\*\fldinst  PAGEREF _Toc497050763 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360033000000}}}{\fldrslt 39}}\par $0535\tab SpeechReset\tab {\field{\*\fldinst  PAGEREF _Toc497050764 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360034000000}}}{\fldrslt 40}}\par $0635\tab SpeechStatus\tab {\field{\*\fldinst  PAGEREF _Toc497050765 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360035000000}}}{\fldrslt 40}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Parser Speech Tool Set\tab {\field{\*\fldinst  PAGEREF _Toc497050766 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360036000000}}}{\fldrslt 41}}\par \pard\plain \s22\li1440\ri720\widctlpar\tx1440\tx2160\tqr\tx7920\adjustright \fs20\lang1024\cgrid $0134\tab ParseBootInit\tab {\field{\*\fldinst  PAGEREF _Toc497050767 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360037000000}}}{\fldrslt 41}}\par $0234\tab ParseStartUp\tab {\field{\*\fldinst  PAGEREF _Toc497050768 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360038000000}}}{\fldrslt 42}}\par $0334\tab ParseShutDown\tab {\field{\*\fldinst  PAGEREF _Toc497050769 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700360039000000}}}{\fldrslt 43}}\par $0434\tab ParseVersion\tab {\field{\*\fldinst  PAGEREF _Toc497050770 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370030000000}}}{\fldrslt 44}}\par $0534\tab ParseReset\tab {\field{\*\fldinst  PAGEREF _Toc497050771 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370031000000}}}{\fldrslt 45}}\par $0634\tab ParseStatus\tab {\field{\*\fldinst  PAGEREF _Toc497050772 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370032000000}}}{\fldrslt 45}}\par $1034\tab DictActivate\tab {\field{\*\fldinst  PAGEREF _Toc497050773 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370033000000}}}{\fldrslt 46}}\par $0B34\tab DictDelete\tab {\field{\*\fldinst  PAGEREF _Toc497050774 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370034000000}}}{\fldrslt 47}}\par $0C34\tab DictDump\tab {\field{\*\fldinst  PAGEREF _Toc497050775 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370035000000}}}{\fldrslt 48}}\par $0E34\tab DictInit\tab {\field{\*\fldinst  PAGEREF _Toc497050776 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370036000000}}}{\fldrslt 49}}\par $0A34\tab DictInsert\tab {\field{\*\fldinst  PAGEREF _Toc497050777 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370037000000}}}{\fldrslt 50}}\par $0934\tab Parse\tab {\field{\*\fldinst  PAGEREF _Toc497050778 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370038000000}}}{\fldrslt 51}}\par $0F34\tab Say\tab {\field{\*\fldinst  PAGEREF _Toc497050779 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700370039000000}}}{\fldrslt 52}}\par $0D34\tab SetSayGlobals\tab {\field{\*\fldinst  PAGEREF _Toc497050780 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380030000000}}}{\fldrslt 53}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Male Speech Tool Set\tab {\field{\*\fldinst  PAGEREF _Toc497050781 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380031000000}}}{\fldrslt 54}}\par \pard\plain \s22\li1440\ri720\widctlpar\tx1440\tx2160\tqr\tx7920\adjustright \fs20\lang1024\cgrid $0132\tab MaleBootInit\tab {\field{\*\fldinst  PAGEREF _Toc497050782 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380032000000}}}{\fldrslt 54}}\par $0232\tab MaleStartUp\tab {\field{\*\fldinst  PAGEREF _Toc497050783 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380033000000}}}{\fldrslt 55}}\par $0332\tab MaleShutDown\tab {\field{\*\fldinst  PAGEREF _Toc497050784 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380034000000}}}{\fldrslt 55}}\par $0432\tab MaleVersion\tab {\field{\*\fldinst  PAGEREF _Toc497050785 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380035000000}}}{\fldrslt 56}}\par $0532\tab MaleReset\tab {\field{\*\fldinst  PAGEREF _Toc497050786 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380036000000}}}{\fldrslt 57}}\par $0632\tab MaleStatus\tab {\field{\*\fldinst  PAGEREF _Toc497050787 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380037000000}}}{\fldrslt 57}}\par $0932\tab MaleSpeak\tab {\field{\*\fldinst  PAGEREF _Toc497050788 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380038000000}}}{\fldrslt 58}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Female Speech Tool Set\tab {\field{\*\fldinst  PAGEREF _Toc497050789 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700380039000000}}}{\fldrslt 59}}\par \pard\plain \s22\li1440\ri720\widctlpar\tx1440\tx2160\tqr\tx7920\adjustright \fs20\lang1024\cgrid $0133\tab FemaleBootInit\tab {\field{\*\fldinst  PAGEREF _Toc497050790 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390030000000}}}{\fldrslt 59}}\par $0233\tab FemaleStartUp\tab {\field{\*\fldinst  PAGEREF _Toc497050791 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390031000000}}}{\fldrslt 60}}\par $0333\tab FemaleShutDown\tab {\field{\*\fldinst  PAGEREF _Toc497050792 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390032000000}}}{\fldrslt 60}}\par $0433\tab FemaleVersion\tab {\field{\*\fldinst  PAGEREF _Toc497050793 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390033000000}}}{\fldrslt 61}}\par $0533\tab FemaleReset\tab {\field{\*\fldinst  PAGEREF _Toc497050794 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390034000000}}}{\fldrslt 62}}\par $0633\tab FemaleStatus\tab {\field{\*\fldinst  PAGEREF _Toc497050795 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390035000000}}}{\fldrslt 62}}\par $0933\tab FemaleSpeak\tab {\field{\*\fldinst  PAGEREF _Toc497050796 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390036000000}}}{\fldrslt 63}}\par \pard\plain \s24\ri720\sb200\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Appendix A - Complete Speak Program\tab {\field{\*\fldinst  PAGEREF _Toc497050797 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390037000000}}}{\fldrslt 65}}\par \pard\plain \s23\li720\ri720\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Speak In Pascal\tab {\field{\*\fldinst  PAGEREF _Toc497050798 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390038000000}}}{\fldrslt 65}}\par Speak In C\tab {\field{\*\fldinst  PAGEREF _Toc497050799 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003700390039000000}}}{\fldrslt 73}}\par Speak In Assembly\tab {\field{\*\fldinst  PAGEREF _Toc497050800 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003800300030000000}}}{\fldrslt 81}}\par \pard\plain \s24\ri720\sb200\widctlpar\tqr\tx7920\adjustright \fs20\lang1024\cgrid Appendix B - Licensing the Speech Tools\tab {\field{\*\fldinst  PAGEREF _Toc497050801 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003800300031000000}}}{\fldrslt 97}}\par {\f4 Index}\tab {\field{\*\fldinst  PAGEREF _Toc497050802 \\h {{\*\datafield 08d0c9ea79f9bace118c8200aa004ba90b02000000080000000e0000005f0054006f0063003400390037003000350030003800300032000000}}}{\fldrslt 99}}\par \pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 \sect }\sectd \sbkodd\pgnrestart\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl \pard\plain \s42\qj\sa240\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 Chapter 1 \endash  Introduction}{\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\v\fs28 {\*\bkmkstart _Toc497050721}Chapter 1  \endash  Introduction{\*\bkmkend _Toc497050721}\tcl1}}}{\fs28 \par }\pard\plain \qj\fi540\widctlpar\adjustright \f12\cgrid {\f4\fs20 Welcome to Talking Tools, a complete speech synthesizer for your Apple II}{\scaps\f4\fs18 GS}{\f4\fs20  computer.  In just a few minutes, your computer will be chattering away.  You'll quickly learn everything you need to know about this easy-to-use software, from generating speech to controlling the way it sounds!  Before diving in, please take some time to skim Chapter 1 and then use the demo program on your Talking Tools disk while you read Chapter 2.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Who Should Use Talking Tools}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050722}Who Should Use Talking Tools{\*\bkmkend _Toc497050722}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 programming}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembly language}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 C}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 Talking Tools has been designed for computer programmers.  You need not be an advanced programmer, since the package contains sample programs that will guide you through using Talking Tools, and which can be used as blueprints for your own programs.  The sample programs and interface files for the speech tools are written in assembly, Pascal, and the C programming languages.  It is expected that you are familiar enough with one of these languages that you can write simple text programs containing more than one subroutine, and that you understand all of your language's basic data types.  In addition to the samples given on the disk, the manual also explains programming with the speech toolkit, and provides an in-depth reference to the toolkit's available functions.\par To make the most out of your experiences with programming Talking Tools, you should probably own the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20  reference manuals needed to program the tools and the operating system.  The sample programs show you how to start, call, and shut down the toolkit, but having the reference manuals on hand will enhance the discussion.  The reading list at the end of this chapter gives the manuals you should have and how they can be purchased.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 What You Should Have Received}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050723}What You Should Have Received{\*\bkmkend _Toc497050723}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Boot Disk}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 registration card}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 warranty card}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 The Talking Tools package consists of one 3.5-inch disk labeled Talking Tools System Disk; one 3.5-inch disk labeled Talking Tools Program Disk; a warranty registration card; and this manual.  Be sure to return the registration card; it entitles you to receive software update information, as well as special product offers from the Byte Works.  The registration card is also your proof of purchase.  We cannot replace defective product components or send upgrades unless we receive it.\par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 GS/OS}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version number}}}{\v\f4\fs20 .Notes;}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Release.Notes}}}{\v\f4\fs20 \par }{\f4\fs20 The Talking Tools System Disk contains the GS/OS operating system, Apple's tools, the Finder, and the SmoothTalker speech tools.  Please notice that the Talking Tools demonstration programs require version 5.0 or greater of GS/OS in order to run, as well as the speech tool files.  The Talking Tools System Disk that comes with Talking Tools has the version of the operating system and tools that it needs.\par The Talking Tools Program Disk contains the interface files for the speech tools and sample programs.  There may be a file named ReleaseNotes; you should always read this file to obtain important information not included in the manual.  At the root level of the disk are the demo programs and any files that are common to the demos, such as Rez source files used in the desktop samples.  The interface files and source code for the sample programs are contained in the folders named Pascal, Asm, and CLang, corresponding to the three programming languages Pascal, assembly, and C.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Back Up Your New Disks First!}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050724}Back Up Your New Disks First!{\*\bkmkend _Toc497050724}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 backups}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disks\:copying}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disks\:initializing}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 Whenever you purchase new software, one of the first things you should do is to make back-up copies of the original disks.  (Of course, sometimes this isn't possible when the disks are copy-protected.)  The Talking Tools disks are not copy-protected, so make back-ups of the disks now.  You can use whatever disk-copying utility you prefer to create the back-ups.  You can also use the Talking Tools System Disk that came with Talking Tools to perform the back-up, since this disk boots into Apple's program launcher, the Finder.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Installing the Speech Tools}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050725}Installing the Speech Tools{\*\bkmkend _Toc497050725}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 installing tools}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tools folder}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The Talking Tools software comes in two distinct parts.  The first of these parts is the executable programs and demonstration source code that we will cover in this manual; these don't require any special treatment or installation.  You can run the programs or compile the source on copies of the disks we sent, or you can move them to some other disk.  The second part of the software is the speech tools themselves; like Apple's tools, these must be installed in the System/Tools folder of your system disk, or they cannot be used.\par If you will be booting from the system disk we sent with the Talking Tools, you don't need to do any special installation \endash  the speech tools are already installed on that disk.\par To install the speech tools on another floppy disk or on a hard disk, run Apple's Installer; you can find a copy on the Talking Tools Program Disk.  You will see a script in the left-hand list labeled "Talking Tools."  Select that script.  The next step is to move to the right-hand list item and select the tools folder where you want to install the speech tools.  If you are installing the speech tools on your hard disk, select the SYSTEM folder on your boot partition, then select the TOOLS folder that you find inside of the SYSTEM folder.  To set up a bootable floppy-disk, you would do the same thing, selecting the TOOLS folder from within the SYSTEM folder on your floppy disk.  With the TOOLS folder and "Install Speech Tools" script selected, click on the Install button.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Required Hardware}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050726}Required Hardware{\*\bkmkend _Toc497050726}\tcl2}}}{\fs24 \par }\pard\plain \qj\keepn\widctlpar\tx450\adjustright \f12\cgrid {\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 hardware, required}}}{\pard\plain \qj\keepn\widctlpar\tx450\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 requirements\:hardware}}}{\v\f4\fs20 \par }\pard \qj\fi-270\li540\widctlpar\tx540\adjustright {\f4\fs20 You will need the following hardware to run Talking Tools' software:\par \par \bullet \tab An Apple II}{\scaps\f4\fs18 GS}{\f4\fs20  computer, or an Apple //e computer with an installed Apple II}{\scaps\f4\fs18 GS }{\f4\fs20 upgrade. \par \par }{\pard\plain \qj\fi-270\li540\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory, required}}}{\pard\plain \qj\fi-270\li540\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi-270\li540\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 requirements\:memory}}}{\v\f4\fs20 \par }{\f4\fs20 \bullet \tab A minimum of 1 megabyte of RAM.\par \par }{\pard\plain \qj\fi-270\li540\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 disk drives, required}}}{\pard\plain \qj\fi-270\li540\widctlpar\tx540\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 requirements\:disk drives}}}{\v\f4\fs20 \par }\pard \qj\fi-274\li540\widctlpar\adjustright {\f4\fs20 \bullet \tab At least one 3.5 inch disk drive.\par }\pard \qj\fi-274\li720\widctlpar\tx720\adjustright {\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The following hardware is highly recommended, especially if you intend to do multiple-language development or to develop large programs:\par }\pard \qj\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi-270\li540\widctlpar\tx540\adjustright {\f4\fs20 \bullet \tab With ROM version 01, 1.25M of RAM.  With ROM version 03, 1.125M of RAM.}{\f4\fs18 \par \par }{\f4\fs20 \bullet \tab A second disk drive.  While a hard disk is ideal for serious programming, a 5.25-inch or second 3.25-inch disk to hold files while running your compiler on your 3.5-inch disk drive will work, too.\par \par }\pard \qj\fi-270\li540\keep\widctlpar\tx540\adjustright {\f4\fs20 \bullet \tab A printer.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Required Software}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050727}Required Software{\*\bkmkend _Toc497050727}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 software, required}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 requirements\:software}}}{\v\f4\fs20 \par }\pard \qj\fi540\keep\widctlpar\adjustright {\f4\fs20 There is no extra software that you'll need to use Talking Tools.  To call the speech tools from a computer program, you'll need a language that can call the toolbox and produce stand-alone programs.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 About This Manual}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050728}About This Manual{\*\bkmkend _Toc497050728}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\widctlpar\adjustright \f12\cgrid {\f4\fs20 Chapter 2 provides a general introduction to the speech tools and should be read by all users of the package.  Chapter 3 shows how to call the speech tools from a program, with Chapter 4 giving a complete call-by-call reference.  Appendix A gives the complete source code listings for some of the samples on the disk.  Appendix B explains how you can license the speech tools.\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 Visual Cues}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050729}Visual Cues{\*\bkmkend _Toc497050729}\tcl3}}}{\fs20 \par }\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 visual cues}}}{\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 type face conventions}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 In order to distinguish between information that this manual provides and characters that you type or characters that appear on your computer screen, special type faces are used.  When you are to enter characters, the type face\par \par  }{\b\f6\fs18 looks like this}{\b\f6\fs20 .  \par \par }{\f4\fs20 The demo program's menu names, commands, and buttons and options within its dialog boxes and alerts\par \par  }{\f6\fs18 look like this}{\f6\fs20 .\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Additional Reading and Reference}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050730}Additional Reading and Reference{\*\bkmkend _Toc497050730}\tcl2}}}{\fs24 \par }\pard\plain \qj\keepn\widctlpar\adjustright \f12\cgrid {\i\f4\fs20 Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20  Toolbox Reference Volume I\par Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20  Toolbox Reference Volume II\par Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20  Toolbox Reference Volume III\par }\pard \qj\widctlpar\adjustright {\f4\fs20 These volumes provide essential information on how tools work; they are absolutely essential in mastering the source code for desktop programs on the disk.\par \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Programmer's Reference for System 6.0\par }\pard \qj\widctlpar\adjustright {\f4\fs20 This colume covers changes to the tools sinse System Disk 5.0, plus new information about GS/OS and the Finder.  This book is available from the Byte Works.\par \par }\pard \qj\keepn\widctlpar\adjustright {\pard\plain \qj\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Human Interface Guidelines}}}{\v\f4\fs20 \par }{\i\f4\fs20 Human Interface Guidelines:  The Apple Desktop Interface\par }\pard \qj\widctlpar\adjustright {\f4\fs20 Provides a complete reference for writing standard desktop applications on the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20  and Macintosh computers.  Also contains important information for the users of desktop programs.\par \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20  Hardware Reference\par Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20  Firmware Reference\par }\pard \qj\widctlpar\adjustright {\f4\fs20 These manuals provide information on how the Apple II}{\scaps\f4\fs20 gs}{\f4\fs20  works.\par \par }\pard \qj\keepn\widctlpar\adjustright {\i\f4\fs20 Programmer's Introduction to the Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Provides programming concepts for the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20 .\par }{\pard\plain \qj\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Toolbox}}}{\v\f4\fs20 \par }{\i\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\adjustright {\i\f4\fs20 Technical Introduction to the Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20 \par }\pard \qj\keep\widctlpar\adjustright {\f4\fs20 A good basic reference source for the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20 .\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \qj\keep\keepn\widctlpar\tqr\tx7200\adjustright {\i\f4\fs20 GS/OS Reference\par }\pard \qj\keep\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Documents the Apple II}{\f4\fs18 GS}{\f4\fs20  disk operating system and program loader.  This book contains all of the information you need to make calls to Apple's disk operating system.\par }\pard \qj\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \qj\keepn\widctlpar\tqr\tx7200\adjustright {\i\f4\fs20 GS/OS Reference, Volume 2, Beta Draft\par }\pard \qj\widctlpar\tqr\tx7200\adjustright {\f4\fs20 For those who write code on the bare metal.  Covers writing device drivers, interrupt handlers, signal processors.\par }\pard \qj\widctlpar\adjustright {\v\f4\fs20 .i).Apple II}{\scaps\v\f4\fs18 GS}{\v\f4\fs20  Manuals;\par }\pard \qc\widctlpar\adjustright {\f4 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 2 - Converting Text to Speech\par }}\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 Chapter 2  \endash  Converting Text to Speech}{\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\v\fs28 {\*\bkmkstart _Toc497050731}Chapter 2  \endash  Converting Text to Speech{\*\bkmkend _Toc497050731}\tcl1}}}{\fs28 \par }\pard\plain \qj\fi540\widctlpar\adjustright \f12\cgrid {\f4\fs20 {\*\bkmkstart bk1}In this chapter, we'll look at how the Talking Tools work, in a general way.  We'll discuss how text is converted to speech, how text is converted to the phonetic language of the tool kit, and the kind of control you have over the processes.  To guide you through the various aspects of the tool kit, we'll use a simple desktop program named SpeakIt, located on the Talking Tools disk.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 How Do Computers Speak?}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050732}How Do Computers Speak?{\*\bkmkend _Toc497050732}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 recorded speech}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 digitally recorded speech}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 synthesized speech}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 There are two main methods used to generate speech from computers.  The first method works more or less like a tape recorder: you digitally record the text to be spoken, and then play the recording back.  Obtaining the recording generally requires special hardware and software that is capable of sampling the speech at high frequencies in order to quantize the wave forms, volume, pitch, and other aspects of the speech.  The quality of the speech produced with this method is very high.  An obvious disadvantage of this method is that the computer only "speaks" pre-recorded messages \endash  you cannot have it "say" arbitrary text on the fly.  Another disadvantage is that digital recordings require massive amounts of space: using the recordings in an application means you'll need to pay special attention to memory requirements, as well as disk space.  Yet one more disadvantage is that you'll need special equipment, such as a microphone, to record the original speech.\par The other main method of generating speech, and the one used by Talking Tools, is to translate text into basic sounds, and then "speak" the sounds.  The advantages to this method include the ability to "say" any text and to limit the amount of memory and disk space needed.  The major disadvantage to this method is that the quality of the speech is not as high as that produced by a recording.  The speech is still clear and understandable; coupled with the ability to customize the spoken words, as you can with Talking Tools, synthesized speech offers a very versatile way to make your computer talk.\par }{\v\f4\fs20 .;}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 First Byte, Inc.}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 licensing speech tools}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SmoothTalker, licensing}}}{\v\f4\fs20 \par }{\f4\fs20 The speech synthesizer included with Talking Tools was developed by First Byte, Inc.  It represents years of intensive research to bring software-based speech to all major computer systems, at minimal cost to the consumer.  You are free to use the speech tools in your own non-commercial programs; if you wish to use the software for commercial products, please consult the licensing information in Appendix B.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Getting Started}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050733}Getting Started{\*\bkmkend _Toc497050733}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 System Disk}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Talking Tools System Disk}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:launching}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\i\v\f4\fs20 Apple II}{\i\scaps\v\f4\fs18 GS}{\i\scaps\v\f4\fs20  }{\i\v\f4\fs20 Owner's Guide}{\v\f4\fs20 \;}{\i\v\f4\fs20 }}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The Talking Tools package contains two disks, one labeled Talking Tools System Disk and the other named Talking Tools Program Disk.  The system disk is used to boot your computer; it boots into the Finder, Apple's program launcher.  Since the Finder is a desktop program, you can use the mouse to do just about everything: pull down menus, select menu items, open files and folders.  You can use the Finder to initialize, rename, and copy disks; create folders; delete files; and copy files and folders.  In the instructions that follow, it is taken for granted that you know how to launch applications, initialize disks, create folders, and copy files.\par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 System folder}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tools folder}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool050 file}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool051 file}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool052 file}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool053 file}}}{\v\f4\fs20 \par }{\f4\fs20 Before launching our demo program, let's take a moment to look at the Talking Tools System Disk.  In the SYSTEM folder is a folder named TOOLS that contains the RAM-based tools.  Talking Tools' speech tool kit actually consists of four separate tool files, named Tool050, Tool051, Tool052, and Tool053.  Tool052 contains the tool kit's front-end module, the parser that converts English text to phonetics.  Tool050 and Tool051 are the tool kit's back-end modules, the adult male voice and adult female voice, respectively.  Tool053 provides an interface to the latest operating system on the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20 .  If you prefer using a system disk other than that which came with your Talking Tools package, be sure to copy these four tool files to the SYSTEM/TOOLS folder of your system disk.  You can do this with Apple's Installer, as described in the installation instructions in Chapter 1.\par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Control Panel}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 System Speed}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Volume setting, in the Control Panel}}}{\v\f4\fs20 \par }{\f4\fs20 Before using the speech tools, you'll want to make sure two settings in your Control Panel are correct (use the 3-key code }{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 -}{\scaps\f4\fs20 control}{\f4\fs20 -}{\scaps\f4\fs20 esc}{\f4\fs20  to reach the Control Panel).  First access the Sound area, using the arrow keys to set the Volume control so that the speech will be audible \endash  we suggest starting with a fairly high volume setting.  Next enter the System Speed area and set the speed to Fast; a speed of Normal will cause the synthesizer to stutter.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Overview of SpeakIt}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050734}Overview of SpeakIt{\*\bkmkend _Toc497050734}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:overview}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 SpeakIt is a simple talking editor.  You can type text into a window, edit the text, save the window to disk, and print the window.  You can also have the text spoken and translated to phonetics.  Access to the speech tool kit's exceptions dictionary is supported as well.\par Start the SpeakIt program by first booting your computer with the Talking Tools System Disk.  Double-click on the SpeakIt icon to launch the demo program.\par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 desktop programs}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Apple II}{\scaps\v\f4\fs18 GS}{\v\f4\fs20  Owner's Guide\;}}}{\v\f4\fs20 \par }{\f4\fs20  SpeakIt is a standard desktop program.  That is, it contains a menu bar with pull-down menus and windows.  Commands are executed by selecting them from menus.  It is "standard" in the sense that its menu bar is organized like other desktop programs you'll see on the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20 , and the commands that it shares with other desktop programs all function in pretty much the same way.  If you are not familiar with desktop programs, you should read Chapter 3 of the }{\i\f4\fs20 Apple II}{\i\scaps\f4\fs18 GS }{\i\f4\fs20 Owner's Guide}{\f4\fs20 , which came with your computer.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Speaking English Text}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050735}Speaking English Text{\*\bkmkend _Toc497050735}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:Speech menu}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:Speak text command}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 SpeakIt's menu bar contains the }{\f6\fs20 Apple}{\f4\fs20 , }{\f6\fs20 File}{\f4\fs20 , }{\f6\fs20 Edit}{\f4\fs20 , and }{\f6\fs20 Speech}{\f4\fs20  menus.  The }{\f6\fs20 Apple}{\f4\fs20 , }{\f6\fs20 File}{\f4\fs20 , and }{\f6\fs20 Edit}{\f4\fs20  menus are common to most desktop programs, while the }{\f6\fs20 Speech}{\f4\fs20  menu is specific to SpeakIt.  Let's dive right in and start exploring.  Pull down the }{\f6\fs20 File}{\f4\fs20  menu and select the }{\f6\fs20 New}{\f4\fs20  command.  This creates a new text window on the desktop.  Type in something to say, such as }{\b\f4\fs20 Hello, World!!}{\f4\fs20  then select the }{\f6\fs20 Speak}{\f4\fs20  command from the }{\f6\fs20 Speech}{\f4\fs20  menu.  You can make your computer speak individual words or phrases by using the mouse to select the text to be spoken, and then issuing the }{\f6\fs20 Speak}{\f4\fs20  command.\par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 abbreviations\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 front-end toolkit}}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 back-end toolkit}}}{\v\f4\fs20 \par }{\f4\fs20 This command illustrates the first function of the speech tool kit that we'll explore, the ability to speak arbitrary English phrases.  In order to speak, the tool kit converts the English text internally into phonetics, then speaks the phonetics.  The process of translating English text into phonemes, the individual pieces of the tool kit's phonetic language, is called parsing.  The tool that performs the parsing is referred to as the front-end of the speech synthesizer.  The tool sets that emit sounds from the phonemes are collectively called the back-end of the synthesizer.\par There is much more to converting English to speech than merely emitting a series of sounds.  The front-end analyzes sentence structure, applying over 1200 English grammar rules, then encodes stress, pitch, and inflection parameters with the phonemes.  Built into the front-end is the ability to recognize abbreviations, such as etc, Dr., Ms., Mr., Mrs., and St., monetary figures, such as $2.39, numbers, dates, times, and mathematical symbols.\par Experiment with different phrases to see how the speech tool kit says them.  The table below shows some example pronunciations:\par \par }\pard \qj\li540\ri1180\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx3600\adjustright {\f4\fs20 Text to Say\tab Talking Tools' Pronunciation\par }\pard \qj\fi540\widctlpar\tx3600\adjustright {\f4\fs20 Dr. and Mr. Rootabaker\tab Doctor and Mister Root-a-baker\par $32.45\tab Thirty-two dollars and forty-five cents\par 1 + 1 = 6\tab One plus one equals six\par 3 5/8\tab Three and five eighths\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Controlling Speech Parameters}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050736}Controlling Speech Parameters{\*\bkmkend _Toc497050736}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 parameters\:see pitch, tone, speed, volume, gender}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speech parameters\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pitch parameter}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tone parameter}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speed parameter}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume parameter}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 gender parameter}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 male voice}}}{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 female voice}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The speech tool kit defines five parameters that control the way in which text is spoken: tone, pitch, speed, volume, and gender.  The basic pitch of the voice, either treble or bass, is set by the tone parameter.  The pitch parameter determines the frequency of the emitted sound: the higher the pitch, the higher the sound.  The speed parameter sets the speed at which the sounds are spoken.  Volume refers to the loudness of the speech.  The gender parameter controls the type of voice that speaks, and can be set to either adult male or adult female.\par The parameters are defined both globally (the default settings for all spoken text) and locally (the settings for the next group of phonemes only).  During the process of translating English to phonetics, the front-end embeds local parameters into the phonetic representation to reflect the structure of the phrase.  When no parameters are embedded, the global values are used.\par Talking Tools allows you to alter the global speech values.  Pull down the }{\f6\fs20 Speech}{\f4\fs20  menu and select the }{\f6\fs20 Set parameters...}{\f4\fs20  command.  It brings up this dialog box:\par \par }\pard \qc\fi540\widctlpar\adjustright {{\pict{\*\picprop\shplid1025{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex49\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw437\pich254\picwgoal8740\pichgoal5080\macpict\bliptag-718563411\blipupi72{\*\blipuid d52b97ad147a9821e84d6028510ac7eb}13d30000000000fe01b51101a00082a0008e01000a0000000002d0024098003800000000003801b800000000003801b500000000003801b5000102c90007007fccff01f00007007fccff01f000070060cc00013000070060cc00013000070060cc00013000070060cc00013000080060cdff02f83000080060cdff02f83000080060cdff02f83000080060cdff02f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000120160f8f4000103c0fa000060e50002f83000120160f8f4000103c0fa000060e50002f83000170160f8f40002066003fb000060fb000003ec0002f83000170160f8f40002066003fb000060fb000003ec0002f83000210160f8f400050603c7c03c7cfe3c0b7c07c3e6c7dfc3c7c3c6c780f00002f83000210160f8f400050603c7c03c7cfe3c0b7c07c3e6c7dfc3c7c3c6c780f00002f830001e0160f8f4000403c6630060fc66090666670cdb666306670cef0002f830001e0160f8f4000403c6630060fc66090666670cdb666306670cef0002f83000200160f8f3001367e3003c667e7e60660666660cdb67e307e60780f00002f83000200160f8f3001367e3003c667e7e60660666660cdb67e307e60780f00002f83000210160f8f40014066603600666606066660666660cdb6603660600c0f00002f83000210160f8f40014066603600666606066660666660cdb6603660600c0f00002f83000210160f8f4000503c3c1c03c7cfe3c0b6607c3e607db63c1c3c60780f00002f83000210160f8f4000503c3c1c03c7cfe3c0b6607c3e607db63c1c3c60780f00002f83000110160f8ef000060fd000006e60002f83000110160f8ef000060fd000006e60002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000120460f80001ffd800020ffffefd0002f83000120460f80001ffd800020ffffefd0002f830001a0860f8000e00e0104007fd000030e100020c0006fd0002f830001a0860f8000e00e0104007fd000030e100020c0006fd0002f830001e0860f80030fe1818c003e4000403e180000cfe00020c3fc6fd0002f830001e0860f80030fe1818c003e4000403e180000cfe00020c3fc6fd0002f83000250f60f80063ff8c1dc7c30780c63c70f0f0eb0004033006000cfe00020c20c6fd0002f8300098003800380000007001b800380000007001b500380000007001b50001250f60f80063ff8c1dc7c30780c63c70f0f0eb0004033006000cfe00020c20c6fd0002f83000250f60f80067ffcc1fccc30cc0c666319998eb000a03338f878f8000000c27c6fd0002f83000250f60f80067ffcc1fccc30cc0c666319998eb000a03338f878f8000000c27c6fd0002f83000250f60f80063ff8c1accc30fc06c663181f8eb000a03e1860cccc000000c20c6fd0002f83000250f60f80063ff8c1accc30fc06c663181f8eb000a03e1860cccc000000c20c6fd0002f83000250f60f80030fe1818ccc30c006c66319980eb000a0301860c0cc000000c3e46fd0002f83000250f60f80030fe1818ccc30c006c66319980eb000a0301860c0cc000000c3e46fd0002f83000250f60f8000e00e018c7c78780383c78f0f0eb000a030186ccccc000000c3e46fd0002f83000250f60f8000e00e018c7c78780383c78f0f0eb000a030186ccccc000000c3e46fd0002f830001a0460f80001ffe0000a0303c3878cc000000c2646fd0002f830001a0460f80001ffe0000a0303c3878cc000000c2646fd0002f830000f0160f8d500020c30c6fd0002f830000f0160f8d500020c30c6fd0002f830000f0160f8d500020c3fc6fd0002f830000f0160f8d500020c3fc6fd0002f830000f0160f8d500020c0006fd0002f830000f0160f8d500020c0006fd0002f830000f0160f8d500020ffffefd0002f830000f0160f8d500020ffffefd0002f830000c0460f80003fed10002f830000c0460f80003fed10002f83000160660f8001c01c03efe00001cfd0000c0dc0002f83000160660f8001c01c03efe00001cfd0000c0dc0002f83000120660f80060003030fe00000cd70002f83000120660f80060003030fe00000cd70002f830001f1160f800c00018303cfe1f0c1e0318f1c3c3c0e500020ffffefd0002f830001f1160f800c00018303cfe1f0c1e0318f1c3c3c0e500020ffffefd0002f830001f1160f800c000183c66db330c33031998c66660e500020c0006fd0002f830001f1160f800c000183c66db330c33031998c66660e500020c0006fd0002f83000271160f800c00018307edb330c3f01b198c607e0ed000101e0fe00053000000c0006fd0002f83000271160f800c00018307edb330c3f01b198c607e0ed000101e0fe00053000000c0006fd0002f83000261060f8006000303060db330c3001b198c666ec00010330fe00053000000c1f06fd0002f83000261060f8006000303060db330c3001b198c666ec00010330fe00053000000c1f06fd0002f83000271160f8001c01c0303cdb1f1e1e00e0f1e3c3c0ed00010303fee105f000000c1806fd0002f83000271160f8001c01c0303cdb1f1e1e00e0f1e3c3c0ed00010303fee105f000000c1806fd0002f830001a0460f80003fee0000101e3fe33053000000c1f06fd0002f830001a0460f80003fee0000101e3fe33053000000c1f06fd0002f83000160160f8dc00093333f3f33000000c0186fd0002f83000160160f8dc00093333f3f33000000c0186fd0002f83000170160f8dd000a03333303033000000c0186fd0002f83000170160f8dd000a03333303033000000c0186fd0002f83000170160f8dd000101e3fee105f000000c1986fd0002f83000170160f8dd000101e3fee105f000000c1986fd0002f83000130160f8dc000003fb00020c0f06fd0002f83000130160f8dc000003fb00020c0f06fd0002f830000f0160f8d500020c0006fd0002f830000f0160f8d500020c0006fd0002f830000f0160f8d500020c0006fd0002f830000f0160f8d500020c0006fd0002f830000f0160f8d500020ffffefd0002f830000f0160f8d500020ffffefd0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f830009800380070000000a801b80070000000a801b50070000000a801b50001090160f8ce0002f830000f0160f8d5000207fffffd0002f830000f0160f8d5000207fffffd0002f830000f0160f8d50002060003fd0002f830000f0160f8d50002060003fd0002f83000160160f8dd0003018c0070fd0002060003fd0002f83000160160f8dd0003018c0070fd0002060003fd0002f83000160160f8dd0003018c0030fd0002060f83fd0002f83000160160f8dd0003018c0030fd0002060f83fd0002f83000170160f8dd000a018c7830cdfc3c00060c03fd0002f83000170160f8dd000a018c7830cdfc3c00060c03fd0002f83000160160f8dc0009d8cc30cdb66600060f83fd0002f83000160160f8dc0009d8cc30cdb66600060f83fd0002f83000160160f8dc0009d8cc30cdb67e000600c3fd0002f83000160160f8dc0009d8cc30cdb67e000600c3fd0002f83000160160f8dc000970cc30cdb660000600c3fd0002f83000160160f8dc000970cc30cdb660000600c3fd0002f83000160160f8dc00097078787db63c00060cc3fd0002f83000160160f8dc00097078787db63c00060cc3fd0002f83000120460f80007fcd80002060783fd0002f83000120460f80007fcd80002060783fd0002f83000140660f8003803807cda0002060003fd0002f83000140660f8003803807cda0002060003fd0002f83000140660f800c3f86066da0002060003fd0002f83000140660f800c3f86066da0002060003fd0002f83000170960f8018ffe30663e3c3cdd000207fffffd0002f83000170960f8018ffe30663e3c3cdd000207fffffd0002f83000110960f8019fff307c666060d60002f83000110960f8019fff307c666060d60002f83000110960f8018ffe3066663c3cd60002f83000110960f8018ffe3066663c3cd60002f83000110960f800c3f86066660606d60002f83000110960f800c3f86066660606d60002f83000110960f8003803807c3e3c3cd60002f83000110960f8003803807c3e3c3cd60002f830000c0460f80007fcd10002f830000c0460f80007fcd10002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f830000c0460f80001ffd10002f830000c0460f80001ffd10002f83000120a60f8000e00e01f8000301cd70002f83000120a60f8000e00e01f8000301cd70002f83000120a60f800300018060000300cd70002f83000120a60f800300018060000300cd70002f83000130b60f80060000c061b1e3e0c1ed80002f83000130b60f80060000c061b1e3e0c1ed80002f83000130b60f80060000c061c33330c33d80002f8300098003800a8000000e001b800a8000000e001b500a8000000e001b50001130b60f80060000c061c33330c33d80002f83000130b60f80060000c06183f330c3fd80002f83000130b60f80060000c06183f330c3fd80002f83000130b60f800300018061830330c30d80002f83000130b60f800300018061830330c30d80002f83000130b60f8000e00e006181e3e1e1ed80002f83000130b60f8000e00e006181e3e1e1ed80002f830000c0460f80001ffd10002f830000c0460f80001ffd10002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f830000f0160f8f400fcff0080e10002f830000f0160f8f400fcff0080e10002f83000110160f8f500001ffc00007ce10002f83000110160f8f500001ffc00007ce10002f830001a0160f8f50000f1fcff01c780fa00001ff9ff00f8f30002f830001a0160f8f50000f1fcff01c780fa00001ff9ff00f8f30002f830001b0160f8f6000101cffc000179c0fa0000f0f900000ff30002f830001b0160f8f6000101cffc000179c0fa0000f0f900000ff30002f830001d0160f8f6000103b8fc00010ee0fb00010380f9000101c0f40002f830001d0160f8f6000103b8fc00010ee0fb00010380f9000101c0f40002f83000230160f8f6000807700003c630000770fb00030700003cfd0003380000e0f40002f83000230160f8f6000807700003c630000770fb00030700003cfd0003380000e0f40002f83000230160f8f60008077000066660000770fb000307000066fd0003180000e0f40002f83000230160f8f60008077000066660000770fb000307000066fd0003180000e0f40002f83000240160f8f600080770000666c0000770fb000b070000603e7c3c3c180000e0f40002f83000240160f8f600080770000666c0000770fb000b070000603e7c3c3c180000e0f40002f83000230160f8f60008077000066780000770fb000307000060fd6603180000e0f40002f83000230160f8f60008077000066780000770fb000307000060fd6603180000e0f40002f83000240160f8f600080770000666c0000770fb000b070000606666607e180000e0f40002f83000240160f8f600080770000666c0000770fb000b070000606666607e180000e0f40002f83000230160f8f60008077000066660000770fb0002070000fd660460180000e0f40002f83000230160f8f60008077000066660000770fb0002070000fd660460180000e0f40002f83000240160f8f6000807700003c630000770fb00050700003c3e66fe3c020000e0f40002f83000240160f8f6000807700003c630000770fb00050700003c3e66fe3c020000e0f40002f830001d0160f8f6000103b8fc00010ee0fb00010380f9000101c0f40002f830001d0160f8f6000103b8fc00010ee0fb00010380f9000101c0f40002f830001b0160f8f6000101cffc000179c0fa0000f0f900000ff30002f830001b0160f8f6000101cffc000179c0fa0000f0f900000ff30002f830001a0160f8f50000f1fcff01c780fa00001ff9ff00f8f30002f8300098003800e0000000fe01b800e0000000fe01b500e0000000fe01b500011a0160f8f50000f1fcff01c780fa00001ff9ff00f8f30002f83000110160f8f500001ffc00007ce10002f83000110160f8f500001ffc00007ce10002f830000f0160f8f400fcff0080e10002f830000f0160f8f400fcff0080e10002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000090160f8ce0002f83000080060cdff02f83000080060cdff02f83000080060cdff02f83000080060cdff02f83000070060cc00013000070060cc00013000070060cc00013000070060cc0001300007007fccff01f00007007fccff01f00002c900a0008fa00083ff}}{\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par \tab The two radio buttons at the top left let you specify whether the default voice should be adult male or adult female.  The radio buttons below the voice buttons let you choose the default tone, which can be either bass or treble.  On the right side of the dialog is a sequence of three edit-line boxes that control the default settings for pitch, speed, and volume.  You can use the }{\outl\scaps\f4\fs20 tab}{\f4\fs20  key to move from one edit-line box to another.  The boxes accept a digit from 0 to 9.  If you enter something other than a digit, this alert will appear:\par \par }\pard \qc\fi540\widctlpar\adjustright {{\pict{\*\picprop\shplid1026{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw363\pich152\picwgoal7260\pichgoal3040\macpict\bliptag-1673172873\blipupi72{\*\blipuid 9c4568779a598048e5651a0d5e56c617}0a03000000000098016b1101a00082a0008e01000a0000000002d0024098002e0000000000430170000000000043016b000000000043016b000102d30006007fd5ff00c006007fd5ff00c0060060d50000c0060060d50000c0060060d50000c0060060d50000c0070060d6ff01e0c0070060d6ff01e0c0070060d6ff01e0c0070060d6ff01e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c00e0160f8fd0001ffc0de000203e0c00e0160f8fd0001ffc0de000203e0c00f0160f8fe000203fff0de000203e0c00f0160f8fe000203fff0de000203e0c00f0160f8fe000207c0f8de000203e0c00f0160f8fe000207c0f8de000203e0c00f0160f8fe00020f807cde000203e0c00f0160f8fe00020f807cde000203e0c00f0160f8fe00021f1e3ede000203e0c00f0160f8fe00021f1e3ede000203e0c00f0160f8fe00023e3f1fde000203e0c00f0160f8fe00023e3f1fde000203e0c0100160f8fe00037c3f0f80df000203e0c0100160f8fe00037c3f0f80df000203e0c0100160f8fe0003f83f07c0df000203e0c0100160f8fe0003f83f07c0df000203e0c0100860f8000001f03f03e0df000203e0c0100860f8000001f03f03e0df000203e0c0100860f8000003e01e01f0df000203e0c0100860f8000003e01e01f0df000203e0c0100860f8000007c01e00f8df000203e0c0100860f8000007c01e00f8df000203e0c0100860f800000f800c007cdf000203e0c0100860f800000f800c007cdf000203e0c0100460f800001ffe00003edf000203e0c0100460f800001ffe00003edf000203e0c0100860f800003e001e001fdf000203e0c0100860f800003e001e001fdf000203e0c0110960f800007c001e000f80e0000203e0c0110960f800007c001e000f80e0000203e0c0110460f8000078fe00010780e0000203e0c0110460f8000078fe00010780e0000203e0c0100460f800007ffdff0080e0000203e0c0100460f800007ffdff0080e0000203e0c00e0460f800003ffdffdf000203e0c00e0460f800003ffdffdf000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c098002e0043000000860170004300000086016b004300000086016b0001090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c01f0160f8fa000218c007fa000306000060fa0005f000000301e0fa000203e0c01f0160f8fa000218c007fa000306000060fa0005f000000301e0fa000203e0c0230160f8fa000218c003fb000630060000600030fd000601300000030330fa000203e0c0230160f8fa000218c003fb000630060000600030fd000601300000030330fa000203e0c0270160f8fa001a18c7c30cc781fc663c7c07c3c07c3c7cc31e1e3e03301f3e1f0330fa000203e0c0270160f8fa001a18c7c30cc781fc663c7c07c3c07c3c7cc31e1e3e03301f3e1f0330fa000203e0c0270160f8fa00100d8cc30cccc1b6666030066660666630dbfe33010330fe33010330fa000203e0c0270160f8fa00100d8cc30cccc1b6666030066660666630dbfe33010330fe33010330fa000203e0c0270160f8fa00150d8cc30ccfc1b6663c300667e0667e30db3f3f330330fe330101f0fa000203e0c0270160f8fa00150d8cc30ccfc1b6663c300667e0667e30db3f3f330330fe330101f0fa000203e0c0270160f8fa0015070cc30ccc01b6660636066600666036663030330320fe33010030fa000203e0c0270160f8fa0015070cc30ccc01b6660636066600666036663030330320fe33010030fa000203e0c0270160f8fa001a0707c787c781b63e3c1c07c3c07c3c1c661e1e3303c01f331f01e3fa000203e0c0270160f8fa001a0707c787c781b63e3c1c07c3c07c3c1c661e1e3303c01f331f01e3fa000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0110160f8f000003ffdff00e0ef000203e0c0110160f8f000003ffdff00e0ef000203e0c0120160f8f1000107c0fd00001fef000203e0c0120160f8f1000107c0fd00001fef000203e0c0130160f8f100013c7ffdff01f1e0f0000203e0c0130160f8f100013c7ffdff01f1e0f0000203e0c0130160f8f1000173c0fd00011e70f0000203e0c0130160f8f1000173c0fd00011e70f0000203e0c0120160f8f10000eefc000103b8f0000203e0c0120160f8f10000eefc000103b8f0000203e0c0150160f8f2000801dc0000f18c0001dcf0000203e0c0150160f8f2000801dc0000f18c0001dcf0000203e0c0150160f8f2000801dc000199980001dcf0000203e0c0150160f8f2000801dc000199980001dcf0000203e0c0150160f8f2000801dc000199b00001dcf0000203e0c0150160f8f2000801dc000199b00001dcf0000203e0c0150160f8f2000801dc000199e00001dcf0000203e0c0150160f8f2000801dc000199e00001dcf0000203e0c0150160f8f2000801dc000199b00001dcf0000203e0c0150160f8f2000801dc000199b00001dcf0000203e0c0150160f8f2000801dc000199980001dcf0000203e0c0150160f8f2000801dc000199980001dcf0000203e0c0150160f8f2000801dc0000f18c0001dcf0000203e0c0150160f8f2000801dc0000f18c0001dcf0000203e0c0120160f8f10000eefc000103b8f0000203e0c0120160f8f10000eefc000103b8f0000203e0c0130160f8f1000173c0fd00011e70f0000203e0c0130160f8f1000173c0fd00011e70f0000203e0c0130160f8f100013c7ffdff01f1e0f0000203e0c0130160f8f100013c7ffdff01f1e0f0000203e0c0120160f8f1000107c0fd00001fef000203e0c098002e0086000000980170008600000098016b008600000098016b0001120160f8f1000107c0fd00001fef000203e0c0110160f8f000003ffdff00e0ef000203e0c0110160f8f000003ffdff00e0ef000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0090160f8d8000203e0c0070060d6ff01e0c0070060d6ff01e0c0070060d6ff01e0c0070060d6ff01e0c0060060d50000c0060060d50000c0060060d50000c0060060d50000c006007fd5ff00c006007fd5ff00c002d300a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par Simply click the }{\f6\fs20 OK}{\f4\fs20  button in the alert and you will be returned to the }{\f6\fs20 Set parameters}{\f4\fs20  dialog.\par The }{\f6\fs20 OK}{\f4\fs20  button at the bottom of the dialog causes your choices to take effect immediately.  Choosing the }{\f6\fs20 Cancel}{\f4\fs20  button exits the dialog with the original selections still in place.\par To see how changing the global parameters affects speech, let's choose the voice to be female, the tone to be treble, a speed of 6, a pitch of 7, and a volume of 9.  Click the }{\f6\fs20 OK}{\f4\fs20  button, then issue the }{\f6\fs20 Speak}{\f4\fs20  command (}{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 T) for your text window.  You should hear your computer say, "Hello, World!" (or whatever text you've selected in your window) in a loud, fast, high-pitched female voice.\par Talking Tools also provides a mechanism for controlling local speech parameters.  You code a special string, called an embedded string, that is passed to the Speak command.  The embedded string is formed by typing two less-than symbols (<<), immediately followed by any desired speech parameters, at least one space, the text to be spoken, and ending with two greater-than symbols.  For example, type this line into your text window, then execute the }{\f6\fs20 Speak}{\f4\fs20  command: \par \par }{\b\f4\fs20 Hi! <<P2V9 Low pitch, volume = 9>> Bye!\par }{\f4\fs20 \par Assuming you had previously set the global voice to female and the global pitch to 7, you should have heard your computer say "Hi!" in a high-pitched female voice, followed by "Low pitch volume equals 9" in a moderately loud, deep voice, and ending with "Bye!" in a normal female voice.  The P stands for pitch, and the V stands for volume.  The table below summarizes the codes you can use to control local speech parameters:\par \par }\pard \qj\li180\ri180\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1620\tx4500\tx7020\adjustright {\f4\fs20 Parameter\tab Embedding Code\tab Range of Values\tab Default\par }\pard \qj\li180\ri180\keepn\widctlpar\tx1620\tx4500\tx7020\adjustright {\f4\fs20 Pitch\tab P or a number by itself\tab 0 (low) to 9 (high)\tab 5\par Speed\tab S\tab 0 (slow) to 9 (fast)\tab 5\par Volume\tab V\tab 0 (soft) to 9 (loud)\tab 5\par Tone\tab B (bass) or T (treble)\tab no range is used\tab B\par }\pard \qj\li180\ri180\widctlpar\tx1620\tx4500\tx7020\adjustright {\f4\fs20 Phonetics\tab ~\tab no range is used\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par You can use either uppercase or lowercase letters for the parameter codes.  Strings can be embedded within one another up to a depth of nine strings.  For example:\par \par }{\b\f4\fs20 <<V9 loud voice <<V1 softer voice >> back to normal voice>>\par }{\f4\fs20 \par The parameters can appear in any order, but you need to be careful when specifying bass or treble tone.  If more than one tone parameter is given, the last one in the parameter list will be used.\par Notice that the speed, volume, and pitch parameters are specified with two characters, the code letter followed by a digit.  You can omit the P code for the pitch parameter, and just use a single digit.  For example,\par \par }{\b\f4\fs20 <<B9 pitch of 9, bass tone>>\par }{\f4\fs20 \par The actual values used by Talking Tools for the speed, pitch, and volume parameters are a computed average of the global (default) setting and the local value.  For example, the string }{\b\f4\fs20 <<V9 fairly loud>>}{\f4\fs20 , with a default volume setting of 5, would be spoken with an actual volume value of 7: (9 + 5) / 2 = 7.  Nested parameters also affect the relative values of the parameters.  Returning to a previous example, with a default volume setting of 5:\par \par }{\b\f4\fs20 <<V9 loud voice <<V1 softer voice >> back to normal voice>>\par }{\f4\fs20 \par The first volume parameter would be set to 7 ( (9 + 5) / 2 ), the second would be set to 4 ( (1 + 7) / 2 ), while the last one would be set to 6 ( (9 + 4) / 2 ).\par The last "parameter" in the table above, the tilde ( ~ ), informs Talking Tools that the text to be spoken is a phonetic string.  It must be the first symbol following the embedding (<<) symbol.  We'll examine the phonetic language in the next section.\par \par \par \par \par \par }\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Translating Text to Phonetics}{\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050737}Translating Text to Phonetics{\*\bkmkend _Toc497050737}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:Speech menu}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:Show phonetics command}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The next Talking Tools function we'll look at is the process of translating an English string into its phonetic representation.  Shrink your text window to make room on the desktop for another window, then type this sentence into your text window: }{\b\f4\fs20 Hello, World!}{\f4\fs20   Select this sentence (a quick way to select an entire line is to triple-click on it), pull down the }{\f6\fs20 Speech}{\f4\fs20  menu, and select the }{\f6\fs20 Show phonetics}{\f4\fs20  (}{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 H) command.  A new window will appear on the desktop, entitled }{\f6\fs20 Phonetics 1}{\f4\fs20 , containing the text }{\f6\fs20 9hEHl8OW w9ERld!}{\f4\fs20   If you followed the discussion in the last section about speech parameters, some of the phonetic text probably looks familiar.  The digits represent pitch levels, while the characters are the phonemes.  Just to assure ourselves that the English sentence sounds the same as the phonetics, click on the }{\f6\fs20 Phonetics}{\f4\fs20  window then pull down the }{\f6\fs20 Speech}{\f4\fs20  menu and select the }{\f6\fs20 Speak}{\f4\fs20  command.  Now click on your text window and issue the }{\f6\fs20 Speak}{\f4\fs20  command.  The two pronunciations will be identical.\par Of course, }{\f6\fs20 9hEHl8OW w9ERld!}{\f4\fs20  just doesn't have the same familiar look as }{\f6\fs20 Hello, World!}{\f4\fs20   There must be a pretty good reason to go to all of the trouble of creating a phonetic language, and of course there is.  The problem with English text is that it doesn't match up exactly with the sounds we make when we read the text.  To see this, try a simple experiment.  Say the word boo out loud.  Now say the word book aloud.  OK, so what does oo sound like?  Our phonetic language comes to the rescue.  It knows that the oo sound differs in different words; it translates boo as bUW, and book as b3UHk.\par {\*\bkmkstart bk0}Let's look at Talking Tools' phonetic language, summarized in the table below:\par \par }\pard \qj\li360\ri1440\keep\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx1350\adjustright {\f4\fs20 \tab \tab Phonetic Code\tab \tab Pronunciation\par }\pard \qj\fi360\keep\keepn\widctlpar\tx1350\adjustright {\f4\fs20 Vowels\par \tab \tab AE\tab \tab \tab Short "a" as in "l}{\b\f4\fs20 a}{\f4\fs20 st"\par \tab \tab EH\tab \tab \tab Short "e" as in "b}{\b\f4\fs20 e}{\f4\fs20 st"\par \tab \tab IH\tab \tab \tab Short "i" as in "f}{\b\f4\fs20 i}{\f4\fs20 t"\par \tab \tab AA\tab \tab \tab Short "o" as in "c}{\b\f4\fs20 o}{\f4\fs20 t"\par }\pard \qj\fi360\keep\widctlpar\tx1350\adjustright {\f4\fs20 \tab \tab AH\tab \tab \tab Short "u" as in "c}{\b\f4\fs20 u}{\f4\fs20 p"\par \par }\pard \qj\fi360\keep\keepn\widctlpar\tx1350\adjustright {\f4\fs20 \tab \tab EY\tab \tab \tab Long "a" as in "}{\b\f4\fs20 a}{\f4\fs20 ce"\par \tab \tab IY\tab \tab \tab Long "e" as in "b}{\b\f4\fs20 ee}{\f4\fs20 t"\par \tab \tab AY\tab \tab \tab Long "i" as in "}{\b\f4\fs20 i}{\f4\fs20 ce"\par \tab \tab OW\tab \tab \tab Long "o" as in "d}{\b\f4\fs20 o}{\f4\fs20 se"\par }\pard \qj\fi360\keep\widctlpar\tx1350\adjustright {\f4\fs20 \tab \tab UW\tab \tab \tab Long "u" as in "l}{\b\f4\fs20 u}{\f4\fs20 te"\par \par }\pard \qj\fi360\keep\keepn\widctlpar\tx1350\adjustright {\f4\fs20 \tab \tab AO\tab \tab \tab Intermediate "o" as in "c}{\b\f4\fs20 au}{\f4\fs20 ght"\par \tab \tab UH\tab \tab \tab Intermediate "u" as in "b}{\b\f4\fs20 oo}{\f4\fs20 k"\par \tab \tab AX\tab \tab \tab schwa sound as in "}{\b\f4\fs20 a}{\f4\fs20 gainst"\par \tab \tab OY\tab \tab \tab diphthong in "n}{\b\f4\fs20 oi}{\f4\fs20 se"\par \tab \tab AW\tab \tab \tab diphthong in "l}{\b\f4\fs20 ou}{\f4\fs20 d"\par }\pard \qj\fi360\keep\widctlpar\tx1350\adjustright {\f4\fs20 \tab \tab ER\tab \tab \tab "ur" as in f}{\b\f4\fs20 ur}{\f4\fs20 ther\par \par }\pard \qj\fi360\keep\keepn\widctlpar\tx1350\adjustright {\f4\fs20 Consonants\par \tab \tab b\tab \tab \tab "}{\b\f4\fs20 b}{\f4\fs20 ig"\par \tab \tab CH\tab \tab \tab "}{\b\f4\fs20 ch}{\f4\fs20 ild"\par \tab \tab d\tab \tab \tab "}{\b\f4\fs20 d}{\f4\fs20 ig"\par \tab \tab f\tab \tab \tab "}{\b\f4\fs20 f}{\f4\fs20 ig"\par \tab \tab g\tab \tab \tab "}{\b\f4\fs20 g}{\f4\fs20 ood"\par \tab \tab h\tab \tab \tab "}{\b\f4\fs20 h}{\f4\fs20 ave"\par \tab \tab j\tab \tab \tab "}{\b\f4\fs20 J}{\f4\fs20 im"\par \tab \tab k\tab \tab \tab "}{\b\f4\fs20 c}{\f4\fs20 ave"\par \tab \tab l\tab \tab \tab "}{\b\f4\fs20 l}{\f4\fs20 ove"\par \tab \tab m\tab \tab \tab "}{\b\f4\fs20 m}{\f4\fs20 an"\par \tab \tab n\tab \tab \tab "}{\b\f4\fs20 n}{\f4\fs20 o"\par \tab \tab NG\tab \tab \tab "}{\b\f4\fs20 r}{\f4\fs20 ing"\par \tab \tab p\tab \tab \tab "}{\b\f4\fs20 p}{\f4\fs20 ig"\par \tab \tab r\tab \tab \tab "}{\b\f4\fs20 r}{\f4\fs20 isk"\par \tab \tab s\tab \tab \tab "}{\b\f4\fs20 s}{\f4\fs20 ave"\par \tab \tab SH\tab \tab \tab "}{\b\f4\fs20 sh}{\f4\fs20 ip"\par \tab \tab t\tab \tab \tab "}{\b\f4\fs20 t}{\f4\fs20 op"\par \tab \tab TH\tab \tab \tab "}{\b\f4\fs20 th}{\f4\fs20 ing"\par \tab \tab DH\tab \tab \tab "}{\b\f4\fs20 th}{\f4\fs20 at"\par \tab \tab v\tab \tab \tab "}{\b\f4\fs20 v}{\f4\fs20 ery"\par \tab \tab w\tab \tab \tab "}{\b\f4\fs20 w}{\f4\fs20 ater"\par \tab \tab WH\tab \tab \tab "}{\b\f4\fs20 wh}{\f4\fs20 y"\par \tab \tab y\tab \tab \tab "}{\b\f4\fs20 y}{\f4\fs20 onder"\par \tab \tab z\tab \tab \tab "}{\b\f4\fs20 Z}{\f4\fs20 iggy"\par }\pard \qj\fi360\keep\widctlpar\tx1350\adjustright {\f4\fs20 \tab \tab ZH\tab \tab \tab "trea}{\b\f4\fs20 s}{\f4\fs20 ure"\par \par }\pard \qj\fi360\keep\keepn\widctlpar\tx1350\adjustright {\f4\fs20 Pitch control\par \tab /\tab \tab \tab Increase pitch by 1 step\par \tab \\\tab \tab \tab Decrease pitch by 1 step\par \tab [\tab \tab \tab Says the following phoneme a little faster\par }\pard \qj\fi360\keep\widctlpar\tx1350\adjustright {\f4\fs20 \tab ]\tab \tab \tab Says the following phoneme a little slower\par \par }\pard \qj\fi540\keep\widctlpar\adjustright {\f4\fs20 While exploring phonetics can be fun, you needn't know anything about the phonetic language to make effective use of the speech tools.  The material is presented here for completeness, and to give you the necessary information to customize the tool kit for your own needs.\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 Ignoring that caveat for the moment, let's experiment with the phonetic language a bit more.  There are four main uses for phonetic strings.  First of all, you can embed a phonetic string within English text.  This gives you even more control over how the string will be pronounced than simply using parameters.  An embedded phonetic string is indicated by placing a tilde (~) immediately after the opening embedding symbol (<<).  The string must follow the rules for forming valid phonetic strings, which we'll look at shortly.  To illustrate passing phonetic strings to the speech tools, type this line into your text window, and then issue the }{\f6\fs20 Speak}{\f4\fs20  command:\par \par }{\b\f4\fs20 <<~9hEHl8OW w9ERld>>\par }{\f4\fs20 \par You should have heard your computer say, "Hello, World!"\par Phonetic strings can also be passed directly to the back-end of the speech tool kit.  You may recall that when we ask Talking Tools to speak an English string, it first converts the string to phonetics (parsing, using the front-end), and then sends the phonetics to the back-end, which uses the machine's sound hardware to speak.  To bypass the front-end, we need to signal that we're sending phonetics only.  This is handled in our demo program with two different types of windows, one for text and the other for phonetics.  We looked at creating phonetics windows at the beginning of this section: type some English in a text window, then issue the }{\f6\fs20 Show phonetics}{\f4\fs20  (}{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 H) command.  A good way to become familiar with the phonetics language it to enter short sentences into your text window, use the }{\f6\fs20 Show phonetics}{\f4\fs20  command to translate them to phonetics, and then use the }{\f6\fs20 Speak}{\f4\fs20  command to speak selected parts of the phonetics.  Once you see how the language works, it's fun to interject speech parameters to change the stress of certain words and substitute different vowels to change the pronunciation.\par {\*\bkmkend bk0}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 phonetic language\bxe }{\rxe bk0}}}{\v\f4\fs20 \par }{\f4\fs20 The last use for phonetic strings is in customizing the exceptions dictionary, our final topic in this chapter.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Building Valid Phonetic Strings}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050738}Building Valid Phonetic Strings{\*\bkmkend _Toc497050738}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\widctlpar\adjustright \f12\cgrid {\f4\fs20 When you were experimenting with the phonetic language, you may have noticed that the }{\f6\fs20 Speak}{\f4\fs20  command refused to speak certain phonetic strings.  As an example, if you were using a phonetic string of }{\b\f4\fs20 9hEHl8OW}{\f4\fs20  for "Hello," but only selected the characters }{\b\f4\fs20 9hE}{\f4\fs20  to pass to the }{\f6\fs20 Speak}{\f4\fs20  command, nothing would happen.  This is because the vowel phoneme of EH was split, and the tool kit doesn't know what a capital E by itself means.  The first rule for forming valid phonetic strings, then, is that you must use complete phonemes.  The tool kit also won't handle special characters inside of a phonetic string; the special characters must be converted to their equivalent phonetic codes.\par The next point we need to make about phonetic strings is that they are similar in structure to the embedded English strings we looked at in an earlier section.  There are some important differences, however.  Pitch levels in a phonetic string are encoded as digits, without the preceding P code, and can also be set with the special symbols given at the end of the phonetic language table.  Parameter codes can be placed anywhere within the string, not just at the beginning.  Parameter codes must always appear in uppercase letters, to distinguish them from phonemes.\par A parameter that can be used in a phonetic string that is not available in an embedded English string is delay, which causes a pause before speaking.  The delay is coded as a capital D, followed by a digit in the range 0 to 9.  For example, }{\b\f4\fs20 S8hEY D2S3yUW}{\f4\fs20 , for "hey you," would speak "hey" with a relative speed of 8, then pause before speaking "you" with a relative speed of 3.  The table below gives the actual pauses for the possible delay values:\par \par }\pard \li2160\ri2520\keep\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2520\tx3960\adjustright {\f4\fs20 Delay value\tab Pause, in seconds\par }\pard \fi2160\keep\keepn\widctlpar\tx2520\tx3960\adjustright {\f4\fs20 \tab 0\tab \tab No delay\par \tab 1\tab \tab 0.25\par \tab 2\tab \tab 0.50\par \tab 3\tab \tab 1\par \tab 4\tab \tab 2\par \tab 5\tab \tab 3\par \tab 6\tab \tab 4\par \tab 7\tab \tab 6\par \tab 8\tab \tab 8\par }\pard \fi2160\keep\widctlpar\tx2520\tx3960\adjustright {\f4\fs20 \tab 9\tab \tab 10\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par After wading through that wealth of information, let's look at a sample to help firm up the ideas.  In the }{\f6\fs20 Text}{\f4\fs20  window on your desktop, enter the string\par \par }{\b\f4\fs20 <<v9s7p6 Hey!>>\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Select the string, then issue the }{\f6\fs20 Speak}{\f4\fs20  command.  You should hear your computer say "Hey!" in a loud, fast, relatively high-pitched voice.  Now let's use phonetics to say the same thing.  In the }{\f6\fs20 Phonetics}{\f4\fs20  window on your desktop, enter the string\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par }{\b\f4\fs20 6V9S7hIY!\par }{\f4\fs20 \par }\pard \qj\widctlpar\adjustright {\f4\fs20 Once again, select the string, then issue the }{\f6\fs20 Speak}{\f4\fs20  command.  The string should sound the same as that said in your }{\f6\fs20 Text}{\f4\fs20  window.\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The table below summarizes the differences between how speech parameters are used in embedded text strings and those used in phonetic strings:\par \par }\pard \li720\ri1260\keep\keepn\widctlpar\brdrt\brdrs\brdrw15 \brdrb\brdrs\brdrw15 \tx2160\tx4860\adjustright {\f4\fs20 Parameter\tab English Code\tab Phonetics Code\par }\pard \fi720\keep\keepn\widctlpar\tx2160\tx4860\adjustright {\f4\fs20 Pitch\tab P, p or single digit\tab single digit or /, \\, [, ]\par Speed\tab S, s\tab S\par Volume\tab V, v\tab V\par Tone\tab B (bass) or T (treble)\tab B (bass) or T (treble)\par Phonetics\tab ~\tab Not used\par }\pard \fi720\keep\widctlpar\tx2160\tx4860\adjustright {\f4\fs20 Delay\tab Not used\tab D\par \par }\pard \li720\keep\widctlpar\tx2160\tx4860\adjustright {\f4\fs20 Parameters must appear immediately after embedding symbol (<<) in an English string, but can be used anywhere in a phonetic string.\par }\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 The Exceptions Dictionary}{\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050739}The Exceptions Dictionary{\*\bkmkend _Toc497050739}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:Dictionary command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:Dictionary on command}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program\:Dictionary off command}}}{\v\f4\fs20 \par }\pard \qj\fi540\keep\widctlpar\adjustright {\f4\fs20 The last two commands in SpeakIt's }{\f6\fs20 Speech}{\f4\fs20  menu, }{\f6\fs20 Dictionary...}{\f4\fs20  and }{\f6\fs20 Dictionary on/off}{\f4\fs20 , control Talking Tools' on-line exceptions dictionary.  The dictionary is used to change the way in which words would normally be spoken.  A dictionary entry consists of an English word and its phonetic translation; by altering the phonetics, you will change the way the word is spoken.\par Let's try a sample to see how this works.  Pull down the }{\f6\fs20 Speech}{\f4\fs20  menu and select the }{\f6\fs20 Dictionary}{\f4\fs20  command.  This brings up the dictionary editor:\par \par }\pard \qc\fi540\keep\widctlpar\adjustright {{\pict{\*\picprop\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw575\pich372\picwgoal11500\pichgoal7440\macpict\bliptag-1407661\blipupi72{\*\blipuid ffea8553c26fa65a4e45c8d67abb8a49}22ff000000000174023f1101a00082a0008e01000a0000000002d0024098004800000000002a024000000000002a023f00000000002a023f000102b90006007fbbff00fc06007fbbff00fc060060bb00000c060060bb00000c060060bb00000c060060bb00000c070060bcff01fe0c070060bcff01fe0c070060bcff01fe0c070060bcff01fe0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c210160f8ef00000ffd00051801f0c00003fa000003fe00040e30e00018ea00013e0c210160f8ef00000ffd00051801f0c00003fa000003fe00040e30e00018ea00013e0c210160f8ef00011980fe00041801980003f9000006fe0004180060000cea00013e0c210160f8ef00011980fe00041801980003f9000006fe0004180060000cea00013e0c260160f8ef0001181ffe0f151f0199c3c7c70f1f0f9b3330000c03e1e03e7060f006ea00013e0c260160f8ef0001181ffe0f151f0199c3c7c70f1f0f9b3330000c03e1e03e7060f006ea00013e0c250160f8ef00010f19fd99148198c663031999999c330000180333301830619803ea00013e0c250160f8ef00010f19fd99148198c663031999999c330000180333301830619803ea00013e0c260160f8ef001a01999f9f98198198c60303199999983700000c033330183061f806ea00013e0c260160f8ef001a01999f9f98198198c60303199999983700000c033330183061f806ea00013e0c260160f8ef001a1999981819998198c66363199999981b000006033330183061800cea00013e0c260160f8ef001a1999981819998198c66363199999981b000006033330183061800cea00013e0c260160f8ef00010f1ffe0f151981f1e3c1c78f198f98233000030331e01878f0f018ea00013e0c260160f8ef00010f1ffe0f151981f1e3c1c78f198f98233000030331e01878f0f018ea00013e0c100160f8ee000018f400001edf00013e0c100160f8ee000018f400001edf00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c980048002a000000540240002a00000054023f002a00000054023f0001080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c100160f8fe000007c6ff00f8fd00013e0c100160f8fe000007c6ff00f8fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318018018fd00013e0c130160f8fe000006c9000318018018fd00013e0c130160f8fe000006c9000318066018fd00013e0c130160f8fe000006c9000318066018fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c130160f8fe000006c9000318600618fd00013e0c130160f8fe000006c9000318600618fd00013e0c130160f8fe000006c9000319f81f98fd00013e0c130160f8fe000006c9000319f81f98fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c130160f8fe000006c90003181ff818fd00013e0c130160f8fe000006c90003181ff818fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c900031ffffff8fd00013e0c130160f8fe000006c900031ffffff8fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c98004800540000007e024000540000007e023f00540000007e023f0001130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c980048007e000000a80240007e000000a8023f007e000000a8023f0001130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c900031ffffff8fd00013e0c130160f8fe000006c900031ffffff8fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c90003181ff818fd00013e0c130160f8fe000006c90003181ff818fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c130160f8fe000006c9000319f81f98fd00013e0c130160f8fe000006c9000319f81f98fd00013e0c130160f8fe000006c9000318600618fd00013e0c130160f8fe000006c9000318600618fd00013e0c100160f8fe000006c900fd18fd00013e0c100160f8fe000006c900fd18fd00013e0c130160f8fe000006c9000318066018fd00013e0c130160f8fe000006c9000318066018fd00013e0c130160f8fe000006c9000318018018fd00013e0c130160f8fe000006c9000318018018fd00013e0c130160f8fe000006c9000318000018fd00013e0c130160f8fe000006c9000318000018fd00013e0c100160f8fe000007c6ff00f8fd00013e0c100160f8fe000007c6ff00f8fd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c98004800a8000000d2024000a8000000d2023f00a8000000d2023f0001080160f8bd00013e0c100160f8ec00000fd9ff00f0fc00013e0c100160f8ec00000fd9ff00f0fc00013e0c100160f8ec00000cd9000030fc00013e0c100160f8ec00000cd9000030fc00013e0c1d0160f8fa00061f00001c1800c0fd0003c000000cd9000030fc00013e0c1d0160f8fa00061f00001c1800c0fd0003c000000cd9000030fc00013e0c1d0160f8fa00061800000c0000c0fd0003c000000cd9000030fc00013e0c1d0160f8fa00061800000c0000c0fd0003c000000cd9000030fc00013e0c1e0160f8fa000e183e1f0c3878f81863c6c7cc00000cd9000030fc00013e0c1e0160f8fa000e183e1f0c3878f81863c6c7cc00000cd9000030fc00013e0c1e0160f8fa000e1e33330c18c0cc1b66670cc000000cd9000030fc00013e0c1e0160f8fa000e1e33330c18c0cc1b66670cc000000cd9000030fc00013e0c1e0160f8fa000e1833330c1878cc1b66660cc000000cd9000030fc00013e0c1e0160f8fa000e1833330c1878cc1b66660cc000000cd9000030fc00013e0c1e0160f8fa000e18331f0c180ccc0cc6660cc000000cd9000030fc00013e0c1e0160f8fa000e18331f0c180ccc0cc6660cc000000cd9000030fc00013e0c1e0160f8fa000e1f33231e3c78cc0cc3c607cc00000cd9000030fc00013e0c1e0160f8fa000e1f33231e3c78cc0cc3c607cc00000cd9000030fc00013e0c140160f8f800001ef600000cd9000030fc00013e0c140160f8f800001ef600000cd9000030fc00013e0c100160f8ec00000fd9ff00f0fc00013e0c100160f8ec00000fd9ff00f0fc00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c100160f8ec00000fd9ff00f0fc00013e0c100160f8ec00000fd9ff00f0fc00013e0c100160f8ec00000cd9000030fc00013e0c100160f8ec00000cd9000030fc00013e0c1c0160f8fb00011f18fd00000cfc00036000000cd9000030fc00013e0c1c0160f8fb00011f18fd00000cfc00036000000cd9000030fc00013e0c1c0160f8fb00011998fe00000cfb00036000000cd9000030fc00013e0c1c0160f8fb00011998fe00000cfb00036000000cd9000030fc00013e0c1f0160f8fb000f199f0f1f0f1f1c3c0c31e363e600000cd9000030fc00013e0c1f0160f8fb000f199f0f1f0f1f1c3c0c31e363e600000cd9000030fc00013e0c1f0160f8fb00011f19fe990a8c0c660db333866000000cd9000030fc00013e0c98004800d2000000fc024000d2000000fc023f00d2000000fc023f00011f0160f8fb00011f19fe990a8c0c660db333866000000cd9000030fc00013e0c1f0160f8fb000f181999999f8c0c600db333066000000cd9000030fc00013e0c1f0160f8fb000f181999999f8c0c600db333066000000cd9000030fc00013e0c1f0160f8fb000f18199999980d8c66066333066000000cd9000030fc00013e0c1f0160f8fb000f18199999980d8c66066333066000000cd9000030fc00013e0c1f0160f8fb000f18198f198f071e3c0661e303e600000cd9000030fc00013e0c1f0160f8fb000f18198f198f071e3c0661e303e600000cd9000030fc00013e0c100160f8ec00000cd9000030fc00013e0c100160f8ec00000cd9000030fc00013e0c100160f8ec00000fd9ff00f0fc00013e0c100160f8ec00000fd9ff00f0fc00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c220160f8fb000530c0000180f0fd00010180e50004f8c380003cfc000060f600013e0c220160f8fb000530c0000180f0fd00010180e50004f8c380003cfc000060f600013e0c220160f8fb000530c000018198fe00010180e40004c001800066fd000060f500013e0c220160f8fb000530c000018198fe00010180e40004c001800066fd000060f500013e0c2b0160f8fb000e36c78d8f8199f0f1b1f3e3878f878ce8000dc1c183c0667c3c6c7cf8e1e3e1e3f900013e0c98004800fc00000126024000fc00000126023f00fc00000126023f00012b0160f8fb000e36c78d8f8199f0f1b1f3e3878f878ce8000dc1c183c0667c3c6c7cf8e1e3e1e3f900013e0c290160f8fb000436ccce1981fe9905c331818ccccce70003f0c18660fe660570cc60633333f800013e0c290160f8fb000436ccce1981fe9905c331818ccccce70003f0c18660fe660570cc60633333f800013e0c2b0160f8fb000e36cccc19819999f98331818cccc780e8000dc0c187e066667e60cc60633331e0f900013e0c2b0160f8fb000e36cccc19819999f98331818cccc780e8000dc0c187e066667e60cc60633331e0f900013e0c2b0160f8fb000e198ccc19819999818331b18cccc0c0e8000dc0c1860066666060cc6c63333030f900013e0c2b0160f8fb000e198ccc19819999818331b18cccc0c0e8000dc0c1860066666060cc6c63333030f900013e0c2b0160f8fb000e19878c0f80f1f0f181f0e3c78cc78ce8000dc1e3c3c03c7c3c607c38f1e331e3f900013e0c2b0160f8fb000e19878c0f80f1f0f181f0e3c78cc78ce8000dc1e3c3c03c7c3c607c38f1e331e3f900013e0c110160f8f600010180db000060f100013e0c110160f8f600010180db000060f100013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c220360f80001f7ff00e0fe00003ff8ff00f0f300000ff7fffe00000ff7ff0300003e0c220360f80001f7ff00e0fe00003ff8ff00f0f300000ff7fffe00000ff7ff0300003e0c250360f8000ff700043c000001e0f800001ef3000078f8000401e0000078f8000401e0003e0c250360f8000ff700043c000001e0f800001ef3000078f8000401e0000078f8000401e0003e0c240360f80038f7000307000007f700010380f5000101c0f70003380001c0f7000338003e0c240360f80038f7000307000007f700010380f5000101c0f70003380001c0f7000338003e0c3c0360f80070fe000301e03030fe00090380000e000007c00380fd000101c0f500050380000001e0fb000a1c00038000000180000018fe00031c003e0c3c0360f80070fe000301e03030fe00090380000e000007c00380fd000101c0f500050380000001e0fb000a1c00038000000180000018fe00031c003e0c3c0360f80070fe000003fe30fe000a0380000e00000660018003fe000101c0f50005038000000330fb000a1c00038000000180000018fe00031c003e0c3c0360f80070fe000003fe30fe000a0380000e00000660018003fe000101c0f50005038000000330fb000a1c00038000000180000018fe00031c003e0c400360f80070fe00030331f1f0fe000f0380000e00000663c183c7c3c00001c0f50008038000000301f318f0fe000a1c00038000000180f0f8f8fe00031c003e0c400360f80070fe00030331f1f0fe000f0380000e00000663c183c7c3c00001c0f50008038000000301f318f0fe000a1c00038000000180f0f8f8fe00031c003e0c400360f80070fe000303333330fe000f0380000e0000066661866306600001c0f500080380000001e3331998fe000a1c00038000000181999998fe00031c003e0c400360f80070fe000303333330fe000f0380000e0000066661866306600001c0f500080380000001e3331998fe000a1c00038000000181999998fe00031c003e0c460360f80070fe000303f33330fe00120380000e00000667e187e307e00001c000001ffbff04e000000380fe00033331b1f8fe000a1c00038000000181999998fe00031c003e0c9800480126000001500240012600000150023f012600000150023f0001460360f80070fe000303f33330fe00120380000e00000667e187e307e00001c000001ffbff04e000000380fe00033331b1f8fe000a1c00038000000181999998fe00031c003e0c460360f80070fe000303333330fe00120380000e0000066601860366000001c00003e0fb000b1f000003800000033331b180fe000a1c00038000000181999998fe00031c003e0c460360f80070fe000303333330fe00120380000e0000066601860366000001c00003e0fb000b1f000003800000033331b180fe000a1c00038000000181999998fe00031c003e0c460360f80070fe00030331f1f0fe00060380000e000007fec308c1c3c00001c0001e3ffbff0bf1e0000380000001e1f0e0f0fe000a1c000380000001f8f0f8f8fe00031c003e0c460360f80070fe00030331f1f0fe00060380000e000007fec308c1c3c00001c0001e3ffbff0bf1e0000380000001e1f0e0f0fe000a1c000380000001f8f0f8f8fe00031c003e0c2a0360f80070f700030380000ef7000401c00039e0fb00041e70000380f700031c000380f700031c003e0c2a0360f80070f700030380000ef7000401c00039e0fb00041e70000380f700031c000380f700031c003e0c290360f80038f7000307000007f7000303800077fa000403b80001c0f70003380001c0f7000338003e0c290360f80038f7000307000007f7000303800077fa000403b80001c0f70003380001c0f7000338003e0c300360f8000ff700043c000001e0f8000f1e0000ee00007c0060000001dc000078f8000401e0000078f8000401e0003e0c300360f8000ff700043c000001e0f8000f1e0000ee00007c0060000001dc000078f8000401e0000078f8000401e0003e0c2d0360f80001f7ff00e0fe00003ff8ff0ff00000ee0000600001800001dc00000ff7fffe00000ff7ff0300003e0c2d0360f80001f7ff00e0fe00003ff8ff0ff00000ee0000600001800001dc00000ff7fffe00000ff7ff0300003e0c150160f8e40009ee000060cce3e00001dce400013e0c150160f8e40009ee000060cce3e00001dce400013e0c150160f8e40009ee0000787861800001dce400013e0c150160f8e40009ee0000787861800001dce400013e0c150160f8e40009ee0000603061800001dce400013e0c150160f8e40009ee0000603061800001dce400013e0c150160f8e40009ee0000607861b00001dce400013e0c150160f8e40009ee0000607861b00001dce400013e0c150160f8e40009ee00007cccf0e00001dce400013e0c150160f8e40009ee00007cccf0e00001dce400013e0c110160f8e40000eefa000101dce400013e0c110160f8e40000eefa000101dce400013e0c110160f8e4000077fa000103b8e400013e0c110160f8e4000077fa000103b8e400013e0c2a0360f80001f7ff00e0fe00003ff8ff04f0000039e0fb00041e7000000ff7fffe00000ff7ff0300003e0c2a0360f80001f7ff00e0fe00003ff8ff04f0000039e0fb00041e7000000ff7fffe00000ff7ff0300003e0c2d0360f8000ff700043c000001e0f800041e00001e3ffbff04f1e0000078f8000401e0000078f8000401e0003e0c2d0360f8000ff700043c000001e0f800041e00001e3ffbff04f1e0000078f8000401e0000078f8000401e0003e0c2a0360f80038f7000307000007f7000403800003e0fb00041f000001c0f70003380001c0f7000338003e0c2a0360f80038f7000307000007f7000403800003e0fb00041f000001c0f70003380001c0f7000338003e0c410560f8007003f0fe00010380fe00030380000efe00003cfe000760000001c000001ffbff08e00000038000000f0efb00081c00038000000f800cfc00031c003e0c410560f8007003f0fe00010380fe00030380000efe00003cfe000760000001c000001ffbff08e00000038000000f0efb00081c00038000000f800cfc00031c003e0c3d0560f8007000c0fe000801800300000380000efe000066fe000460000001c0f50005038000001986fb000a1c00038000000cc0000030fe00031c003e0c3d0560f8007000c0fe000801800300000380000efe000066fe000460000001c0f50005038000001986fb000a1c00038000000cc0000030fe00031c003e0c401160f8007000c363e7c3c183e7c3c00380000efe0008607c3c3e66000001c0f500080380000018060f0f9bfe000a1c00038000000ccd9c7c7cfe00031c003e0c401160f8007000c363e7c3c183e7c3c00380000efe0008607c3c3e66000001c0f500080380000018060f0f9bfe000a1c00038000000ccd9c7c7cfe00031c003e0c401160f8007000c386666601866306600380000efe00003cfe66046c000001c0f5000803800000180619999cfe000a1c00038000000f8e0c6630fe00031c003e0c401160f8007000c386666601866306600380000efe00003cfe66046c000001c0f5000803800000180619999cfe000a1c00038000000f8e0c6630fe00031c003e0c401160f8007000c3066663c1866307e00380000efe000806667e6678000001c0f500080380000018061f9998fe00051c0003800000fe0c016630fe00031c003e0c9800480150000001740240015000000174023f015000000174023f0001401160f8007000c3066663c1866307e00380000efe000806667e6678000001c0f500080380000018061f9998fe00051c0003800000fe0c016630fe00031c003e0c401160f8007000c306666061866366000380000efe0008666660666c000001c0f50008038000001986181998fe00051c0003800000fe0c016636fe00031c003e0c401160f8007000c306666061866366000380000efe0008666660666c000001c0f50008038000001986181998fe00051c0003800000fe0c016636fe00031c003e0c3f1160f8007000c303e663c3c3e1c3c00380000efe00083c7c3c3e66000001c0f5000303800000fd0f0098fe000a1c00038000000c0c1e661cfe00031c003e0c3f1160f8007000c303e663c3c3e1c3c00380000efe00083c7c3c3e66000001c0f5000303800000fd0f0098fe000a1c00038000000c0c1e661cfe00031c003e0c280360f80070f700030380000efd000060fc000101c0f500010380f700031c000380f700031c003e0c280360f80070f700030380000efd000060fc000101c0f500010380f700031c000380f700031c003e0c240360f80038f7000307000007f700010380f5000101c0f70003380001c0f7000338003e0c240360f80038f7000307000007f700010380f5000101c0f70003380001c0f7000338003e0c250360f8000ff700043c000001e0f800001ef3000078f8000401e0000078f8000401e0003e0c250360f8000ff700043c000001e0f800001ef3000078f8000401e0000078f8000401e0003e0c220360f80001f7ff00e0fe00003ff8ff00f0f300000ff7fffe00000ff7ff0300003e0c220360f80001f7ff00e0fe00003ff8ff00f0f300000ff7fffe00000ff7ff0300003e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c080160f8bd00013e0c070060bcff01fe0c070060bcff01fe0c070060bcff01fe0c070060bcff01fe0c060060bb00000c060060bb00000c060060bb00000c060060bb00000c06007fbbff00fc06007fbbff00fc02b900a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi540\keep\widctlpar\adjustright {\f4\fs20 \par At the top of the window is the message }{\f6\fs20 Speech Dictionary}{\f4\fs20 , followed by the name of the file from which the current dictionary is derived.  If the dictionary was not loaded from a file, the message will be }{\f6\fs20 Speech Dictionary: < no file >}{\f4\fs20 .  When the SpeakIt program starts up, it looks in the System folder of the boot disk for a special file named SpeechDict.  If it finds the file, it uses it to initialize the dictionary.  If it doesn't find the file, the dictionary is initialized to empty.\par Beneath the message is a scrollable list of the English words in the current dictionary.  This list is limited to 16,383 entries.\par Below the list are edit boxes labeled }{\f6\fs20 English word}{\f4\fs20  and }{\f6\fs20 Phonetics word}{\f4\fs20 , where you can make new dictionary entries.  If you select an English word from the list, the boxes will be filled with the entry corresponding to the one you selected.\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The bottom left portion of the dictionary window contains four buttons used for word operations.  The }{\f6\fs20 Add}{\f4\fs20  button inserts a new entry into the dictionary, while the }{\f6\fs20 Delete}{\f4\fs20  button removes an entry.  The entry itself is defined by what appears in the }{\f6\fs20 English}{\f4\fs20  and }{\f6\fs20 Phonetics}{\f4\fs20  edit boxes.  The }{\f6\fs20 Translate}{\f4\fs20  button converts the English word in the }{\f6\fs20 English}{\f4\fs20  edit box to its phonetic equivalent, placing the result in the }{\f6\fs20 Phonetics}{\f4\fs20  edit box.  The }{\f6\fs20 Speak}{\f4\fs20  button speaks what is in the }{\f6\fs20 Phonetics}{\f4\fs20  edit box.  When the dictionary window is front-most, the }{\f6\fs20 Speak}{\f4\fs20  command in }{\f6\fs20 Speech}{\f4\fs20  menu performs the same function as the }{\f6\fs20 Speak}{\f4\fs20  button, and the }{\f6\fs20 Show phonetics}{\f4\fs20  command operates identically to the }{\f6\fs20 Translate}{\f4\fs20  button.\par The buttons on the right are used for file operations.  The }{\f6\fs20 Save}{\f4\fs20  button brings up a standard save-file dialog, and is used to save the current dictionary to disk.  The }{\f6\fs20 Load}{\f4\fs20  button brings up a standard open-file dialog, and is used to load a new dictionary from disk.  If the current dictionary has changed, you will be asked whether you want to save it before loading in a new dictionary.\par \par }\pard \qc\fi540\widctlpar\adjustright {{\pict{\*\picprop\shplid1028{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex50\picscaley50\piccropl0\piccropr0\piccropt0\piccropb0\picw516\pich182\picwgoal10320\pichgoal3640\macpict\bliptag-102624742\blipupi72{\*\blipuid f9e2121ae9cfaf74581c473b26a50984}0f5c0000000000b602041101a00082a0008e01000a0000000002d0024098004200000000002f020800000000002f020400000000002f0204000102bf0007007fc2ff01e00007007fc2ff01e000070060c200016000070060c200016000070060c200016000070060c200016000080060c3ff02f06000080060c3ff02f06000080060c3ff02f06000080060c3ff02f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f06000110460f800007ffdff0080cd000301f06000110460f800007ffdff0080cd000301f06000120560f800006001feff0080cd000301f06000120560f800006001feff0080cd000301f06000120560f800006001feff0080cd000301f06000120560f800006001feff0080cd000301f06000120960f800006001fe007f80cd000301f06000120960f800006001fe007f80cd000301f06000120960f800006061f8001f80cd000301f06000120960f800006061f8001f80cd000301f06000120960f800006061f8001f80cd000301f06000120960f800006061f8001f80cd000301f06000120960f800006001f1cccf80cd000301f06000120960f800006001f1cccf80cd000301f06000120960f800006001f0000f80cd000301f06000120960f800006001f0000f80cd000301f06000120960f800006001f199cf80cd000301f06000120960f800006001f199cf80cd000301f06000300960f800006001f0000f80f90004c300001c03fd00021c18c0f8000006f80004018c000030fd000701e0000001f06000300960f800006001f0000f80f90004c300001c03fd00021c18c0f8000006f80004018c000030fd000701e0000001f06000330960f800006001f1cccf80f90004c300000c03fd00040c00c00006fb00010306f90004c001800030fc00070330000001f06000330960f800006001f1cccf80f90004c300000c03fd00040c00c00006fb00010306f90004c001800030fc00070330000001f060003e0960f80000603ff0000f80f9002fdb1e330c1f0331e3300c38cc780f8780787cc63c07c7c3c03c666cd8f1f1f00f9c3c7c70f1f0f9b33030000001f060003e0960f80000603ff0000f80f9002fdb1e330c1f0331e3300c38cc780f8780787cc63c07c7c3c03c666cd8f1f1f00f9c3c7c70f1f0f9b33030000001f060003e0960f800006003e0001f80f90023db33330c33033333300c18d8cc060cc0c0ccc66603066660666670e19998c0198c663031fe9908c33060000001f060003e0960f800006003e0001f80f90023db33330c33033333300c18d8cc060cc0c0ccc66603066660666670e19998c0198c663031fe9908c33060000001f06000980042002f0000005e0208002f0000005e0204002f0000005e020400013e0960f800006003c0007f80f90023db33330c33037333300c18f0fc060cc078cc6c7e030667e0606660c1f998c0198c603031fe99088370c0000001f060003e0960f800006003c0007f80f90023db33330c33037333300c18f0fc060cc078cc6c7e030667e0606660c1f998c0198c603031fe99088370c0000001f060003e0960f8000060ff0001ff80f900236633330c3301b333300c18d8c006ccc00ccc6c6003666600666660c18198d8198c663631fe990181b0fe000301f060003e0960f8000060ff0001ff80f900236633330c3301b333300c18d8c006ccc00ccc6c6003666600666660c18198d8198c663631fe990181b0fe000301f060003e0560f800006003feff0080f9002f661e1f1e1f0231e1f01e3ccc78038780787c383c01c663c03c3e60c0f198700f9e3c1c78f198f98230c0000001f060003e0560f800006003feff0080f9002f661e1f1e1f0231e1f01e3ccc78038780787c383c01c663c03c3e60c0f198700f9e3c1c78f198f98230c0000001f060001c0560f800006003feff0080f4000101e0e1000101e0fe000301f060001c0560f800006003feff0080f4000101e0e1000101e0fe000301f06000110460f800007ffdff0080cd000301f06000110460f800007ffdff0080cd000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f06000120160f8fa00003ffaff00e0d5000301f06000120160f8fa00003ffaff00e0d5000301f06000130160f8fb000107c0fa00001fd5000301f06000980042005e0000008d0208005e0000008d0204005e0000008d02040001130160f8fb000107c0fa00001fd5000301f06000220160f8fb00013c7ffaff01f1e0fa000007f9ff00e0f700f8ff00c0fb000301f06000220160f8fb00013c7ffaff01f1e0fa000007f9ff00e0f700f8ff00c0fb000301f06000250160f8fb000173c0fa00011e70fa00003cf900003cf800010780f9000078fb000301f06000250160f8fb000173c0fa00011e70fa00003cf900003cf800010780f9000078fb000301f06000230160f8fb0000eef9000103b8fa0000e0f9000007f800001cf800000efb000301f06000230160f8fb0000eef9000103b8fa0000e0f9000007f800001cf800000efb000301f06000340160f8fc000501dc00000198fd000101dcfb000101c0fe000046fd00010380f90003380001e0fe000301c00007fb000301f06000340160f8fc000501dc00000198fd000101dcfb000101c0fe000046fd00010380f90003380001e0fe000301c00007fb000301f06000330160f8fc000501dc00000198fd000101dcfb000101c0fe000066fd00010380f9000338000330fd0002c00007fb000301f06000330160f8fc000501dc00000198fd000101dcfb000101c0fe000066fd00010380f9000338000330fd0002c00007fb000301f06000360160f8fc000b01dc00000198f0f0000001dcfb000101c0fe0001763cfe00010380f9000a38000301f3e1e1e0c00007fb000301f06000360160f8fc000b01dc00000198f0f0000001dcfb000101c0fe0001763cfe00010380f9000a38000301f3e1e1e0c00007fb000301f06000360160f8fc000101dcfe0006f19980000001dcfb000101c0fe00017e66fe00010380f9000338000303fe330330c00007fb000301f06000360160f8fc000101dcfe0006f19980000001dcfb000101c0fe00017e66fe00010380f9000338000303fe330330c00007fb000301f06000360160f8fc000101dcfe000661f8f0000001dcfb000101c0fe00016e66fe00010380f9000a38000303333303f0c00007fb000301f06000360160f8fc000101dcfe000661f8f0000001dcfb000101c0fe00016e66fe00010380f9000a38000303333303f0c00007fb000301f06000350160f8fc000101dcfe0006618018000001dcfb000101c0fe00016666fe00010380f90002380003fd330300c00007fb000301f06000350160f8fc000101dcfe0006618018000001dcfb000101c0fe00016666fe00010380f90002380003fd330300c00007fb000301f06000360160f8fc000101dcfe000660f0f0000001dcfb000101c0fe0001623cfe00010380f9000a380001e1f331e1e1e00007fb000301f06000360160f8fc000101dcfe000660f0f0000001dcfb000101c0fe0001623cfe00010380f9000a380001e1f331e1e1e00007fb000301f06000230160f8fb0000eef9000103b8fa0000e0f9000007f800001cf800000efb000301f06000230160f8fb0000eef9000103b8fa0000e0f9000007f800001cf800000efb000301f06000250160f8fb000173c0fa00011e70fa00003cf900003cf800010780f9000078fb000301f06000250160f8fb000173c0fa00011e70fa00003cf900003cf800010780f9000078fb000301f06000220160f8fb00013c7ffaff01f1e0fa000007f9ff00e0f700f8ff00c0fb000301f06000220160f8fb00013c7ffaff01f1e0fa000007f9ff00e0f700f8ff00c0fb000301f06000130160f8fb000107c0fa00001fd5000301f06000130160f8fb000107c0fa00001fd5000301f06000120160f8fa00003ffaff00e0d5000301f06000120160f8fa00003ffaff00e0d5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f06000980042008d000000b60208008d000000b60204008d000000b6020400010a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f060000a0160f8c5000301f06000080060c3ff02f06000080060c3ff02f06000080060c3ff02f06000080060c3ff02f06000070060c200016000070060c200016000070060c200016000070060c20001600007007fc2ff01e00007007fc2ff01e00002bf00a0008fa00083ff}}{\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par The }{\f6\fs20 Clear}{\f4\fs20  button is used to remove the current dictionary from memory.  As with the }{\f6\fs20 Load}{\f4\fs20  button, you will be asked whether you want to save the current dictionary, if it has changed, before removing it.\par The }{\f6\fs20 Print}{\f4\fs20  button is used to print the current dictionary, one entry per line.  It uses standard print dialogs.\par When the dictionary window is front-most, the }{\f6\fs20 Save as}{\f4\fs20  command in the }{\f6\fs20 File}{\f4\fs20  menu performs the same function as the }{\f6\fs20 Save}{\f4\fs20  button, the }{\f6\fs20 Open...}{\f4\fs20  command operates identically to the }{\f6\fs20 Load}{\f4\fs20  button, and the }{\f6\fs20 Print...}{\f4\fs20  command is identical to the }{\f6\fs20 Print}{\f4\fs20  button.\par You can close the dictionary window by clicking the }{\f6\fs20 Exit}{\f4\fs20  button or with the }{\f6\fs20 Close}{\f4\fs20  command in the }{\f6\fs20 File}{\f4\fs20  menu.  When the dictionary window is front-most, selecting the }{\f6\fs20 Dictionary}{\f4\fs20  command in the }{\f6\fs20 Speech}{\f4\fs20  menu will also close the window.  If the dictionary window is open on the desktop, but other windows are on top of it, choosing the }{\f6\fs20 Dictionary}{\f4\fs20  command will bring it to the front.\par Back to playing with the dictionary.  Enter the word }{\b\f4\fs20 cat}{\f4\fs20  in the }{\f6\fs20 English word}{\f4\fs20  edit box, click the }{\f6\fs20 Translate}{\f4\fs20  button, then click the }{\f6\fs20 Speak}{\f4\fs20  button.  You should hear your computer say, "cat."  Now replace the English word }{\b\f4\fs20 cat}{\f4\fs20  with }{\b\f4\fs20 dog}{\f4\fs20 , then click the }{\f6\fs20 Add}{\f4\fs20  button.  The list will scroll to show DOG in your dictionary.  Now use the }{\f6\fs20 New}{\f4\fs20  command from the }{\f6\fs20 File}{\f4\fs20  menu to create a new text window.  Type in the sentence }{\b\f4\fs20 My dog has fleas}{\f4\fs20  then issue the }{\f6\fs20 Speak}{\f4\fs20  command (}{\outl\f4\fs20 \u-3\'f0}{\f4\fs20 T).  You should hear your computer say, "My cat has fleas."  It should be obvious what is happening: when the parser sees the word dog, it substitutes the phonetic word 3kAEt, which sounds like the English word "cat."\par This brings us to our final command in the }{\f6\fs20 Speech}{\f4\fs20  menu, }{\f6\fs20 Dictionary off}{\f4\fs20 .  Pull down the }{\f6\fs20 Speech}{\f4\fs20  menu and select this command, then use the }{\f6\fs20 Speak}{\f4\fs20  command to say the "My dog has fleas" phrase.  This time you should hear your computer say the word dog, rather than cat.  That's because we've temporarily disabled the dictionary.  Pull down the }{\f6\fs20 Speech}{\f4\fs20  menu again, and you'll see that the name of the last command has changed to }{\f6\fs20 Dictionary on}{\f4\fs20 .  Selecting the command again will turn the dictionary back on, and will change the menu name to }{\f6\fs20 Dictionary off}{\f4\fs20 .\par {\*\bkmkend bk1}}{\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeakIt program}{\rxe bk1}}}{\v\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 3 - Speaking from a Computer Program\par }}\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 Chapter 3 \endash  Speaking from a Computer Program}{\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\v\fs28 {\*\bkmkstart _Toc497050740}Chapter 3 \endash  Speaking from a Computer Program{\*\bkmkend _Toc497050740}\tcl1}}}{\fs28 \par }\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\f4\fs20 A computer program that uses Talking Tools' speech tool kit is written in much the same way as any other program that uses the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20  toolbox: the required tools are started up during the program's initialization phase, various tool calls are made in the body of the program, and finally the tools are shut down at the end of the program.  In this chapter, we'll discuss in detail a "plain vanilla" program that demonstrates all of the available tool calls in the tool kit.  We will concentrate on the Pascal version of our sample program, since Pascal is similar enough to English to be understood by programmers familiar with at least one high-level language.  The source code listings for all three versions of the sample is given in Appendix A.  You will find a complete reference for the tool kit in Chapter 4.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Accessing the Interface Files}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050741}Accessing the Interface Files{\*\bkmkend _Toc497050741}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 interface files\bxe }}}{\v\f4\fs20 \par .Int file;}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechTools.Int file}}}{\v\f4\fs20 .h file;}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speech.h file}}}{\v\f4\fs20 .Speech file;}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 M16.Speech file}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/Pascal compiler}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/C compiler}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/M assembler}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Before writing a program that uses the speech tool kit, you will need to move the proper interface file to the correct folder for your compiler or assembler.  For ORCA/Pascal, the interface file is named SpeechTools.Int, and is located in the Pascal folder on the Talking Tools disk.  You'll want to copy this file to the Libraries/ORCAPascalDefs folder of your ORCA/Pascal program disk.  For ORCA/C, the interface file is named speech.h, and is located in the CLang folder on the Talking Tools disk.  You should copy this file to the Libraries/ORCACDefs folder of your ORCA/C program disk.  For ORCA/M, the interface file is named M16.Speech, and is located in the Asm folder on the Talking Tools disk.  You'll want to copy this file to the Libraries/AInclude folder on your ORCA/M disk.\par As mentioned in Chapter 1, you'll need to use a boot disk that has the speech tools installed in the Tools folder of the System folder.  The speech tools consist of four separate tool sets: tool number 50, the male speech tool; tool number 51, the female speech tool; tool number 52, the English text to phonetics translator; and tool number 53, the interface between the speech tools and GS/OS.  You can copy these files manually, or use the installer to move the files, as described in Chapter 1.\par As you read this chapter, you will see various chunks of source code in Pascal.  The complete source listing for the executable program described in this chapter is also in Appendix A, only there you will find it not only in Pascal, but in C and assembly language as well.  Of course, the source code is also in the Talking Tools disk, again in all three languages.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 The Speak Program at the Global Level}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050742}The Speak Program at the Global Level{\*\bkmkend _Toc497050742}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:Tool Locator}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:Memory Manager}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:Integer Math tool set}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 At the beginning of the program, we declare the interface files that we'll use.  These include Common, the Tool Locator, the Integer Math Tool Set, and the speech tools themselves:\par \par }\pard \widctlpar\adjustright {\f6\fs14 uses Common, ToolLocator, MemoryMgr, IntegerMath, SpeechTools;\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par Following the interface files are our global variables.  We'll take a closer look at these variables as they're used.  For now, you will notice that our global variables can be divided into two main groups: those used in a general way, and those which deal specifically with speech.\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 var\par    answer: string;                      \{user's response to queries\}\par    done: boolean;                       \{true if user wants to exit pgm\}\par    toolRec: toolTable;                  \{table of tools we need to start\}\par \par    voice: Gender;                       \{current global voice setting\}\par    basePitch: Tone;                     \{current global tone setting\}\par    speed,                               \{current global speed setting\}\par    pitch,                               \{current global pitch setting\}\par }\pard \widctlpar\adjustright {\f6\fs14    volume: ParmRange;                   \{current global volume setting\}\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:main program}}}{\v\f4\fs20 \par }{\f4\fs20 The global variables are followed by the program's subroutines.  They are in alphabetical order by procedure name.  We'll look at each subroutine below.  For now, let's skip down to the main program.\par The first five }{\f6\fs20 writeln}{\f4\fs20 s comprise a simple "splash screen," introducing the user to our program and letting him know that we'll be loading some tools, which could take some time.\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Main program - Display "main menu" and call appropriate      \}\par \{       function until user selects Quit.                       \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par begin\par \{Splash screen.\}\par writeln;\par writeln('Speak - A demonstration of the Talking Tools');\par writeln;\par writeln('Please wait while we load the tools.');\par }\pard \widctlpar\adjustright {\f6\fs14 writeln;\par \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 After the introduction, the program calls our }{\f6\fs20 Init}{\f4\fs20  procedure, which loads the tools we need and initializes our global variables.  We use a global boolean named }{\f6\fs20 done}{\f4\fs20  to control our main loop.  If the }{\f6\fs20 Init}{\f4\fs20  procedure encounters any errors, it sets }{\f6\fs20 done}{\f4\fs20  to true in order to avoid entering the main loop.\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{Initialize the program.\}\par }\pard \widctlpar\adjustright {\f6\fs14 Init;\par \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Our main loop consists of bringing up a menu of choices for the user, reading the user's selection, and then calling the appropriate routine.  If the user enters }{\b\f4\fs20 Q}{\f4\fs20  (for quit), we set }{\f6\fs20 done}{\f4\fs20  to true, which will bring us out of the main loop.\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{Main loop: bring up menu; get user's selection; handle selection.\}\par }\pard \widctlpar\adjustright {\f6\fs14 while not done do begin\par    writeln('Enter desired function:  S to speak English string');\par    writeln('                         P to speak phonetic string');\par    writeln('                         C to convert to phonetics');\par    writeln('                         G to set global speech parameters');\par    writeln('                         A to activate dictionary');\par    writeln('                         T to deactivate dictionary');\par    writeln('                         D to display dictionary');\par    writeln('                         I to insert word into dictionary');\par    writeln('                         R to remove word from dictionary');\par    writeln('                         L to load dictionary from disk file');\par    writeln('                         W to write dictionary to disk file');\par    writeln('                         Q to quit program');\par    write('                         ');\par    readln(answer);\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par Our main menu reflects the available functions of the speech tool kit: speaking an English string; speaking a phonetic string; converting an English string to its phonetic representation; and the dictionary functions to insert, delete, and display entries, as well as to activate, deactivate, and clear the dictionary.  We dispatch a subroutine to handle the selected speech function or set }{\f6\fs20 done}{\f4\fs20  to true if }{\b\f4\fs20 Q}{\f4\fs20  is entered:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14    case answer[1] of\par       'S', 's': SpeakText;\par       'P', 'p': SpeakPhonetics;\par       'C', 'c': ConvertToPhonetics;\par       'G', 'g': SetSpeechGlobals;\par       'A', 'a': DictActivate(1);\par       'T', 't': DictActivate(0);\par       'D', 'd': DisplayDict;\par       'I', 'i': InsertWord;\par       'R', 'r': DeleteWord;\par       'L', 'l': LoadDict;\par       'W', 'w': WriteDict;\par       'Q', 'q': done := true;\par       otherwise: begin\par                  writeln('Please enter one of S, P, C, G, A, T, D, I, R, L, W, or Q...');\par                  writeln;\par                  end;\par       end; \{case\}\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{while\}\par \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Following the main loop, we call our }{\f6\fs20 ShutDown}{\f4\fs20  routine to shut down the tools we've started.\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{Shut down the program.\}\par ShutDown;\par }\pard \widctlpar\adjustright {\f6\fs14 end.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 The Init Procedure}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050743}The Init Procedure{\*\bkmkend _Toc497050743}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:Init procedure}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Our }{\f6\fs20 Init}{\f4\fs20  procedure attempts to start the tools we need.  If it is successful, it then initializes our global variables and }{\f6\fs20 done}{\f4\fs20  is set to false.  If unsuccessful, }{\f6\fs20 done}{\f4\fs20  is set to true.\par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:Tool Locator}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:Integer Math Tool Set}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Apple II}{\v\f4\fs18 GS}{\v\f4\fs20  Manuals}}}{\v\f4\fs20 \par }{\f4\fs20 Since our final program will be an EXE file, we do not need to start any of the tools we'll be using that are guaranteed to be started by the shell.  For our program, these include the Tool Locator and Integer Math Tool Set.  (These tool sets are described in volumes one and two of the }{\i\f4\fs20 Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20  Toolbox Reference}{\f4\fs20  manuals.)  We'll be calling the Tool Locator to load our speech tools, and we'll be using the Integer Math Tool Set to format error codes as hexadecimal numbers, in order to report errors in the form used by the system's toolbox.\par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleStartUp tool call}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleStartUp tool call}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseStartUp tool call}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechStartUp tool call}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 starting tools}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 loading tools}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 RAM-based tools}}}{\v\f4\fs20 \par }{\f4\fs20 We begin our Init procedure by loading the speech tools, which are RAM based, into memory.  The speech tools are loaded by adding them to our tool record data structure and then making the Tool Locator's LoadTools call, passing it the tool record we've constructed.  If the LoadTools call is successful, we then make a start up call for each speech tool that we loaded.\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs14 \{The following code is from the Tool Locator interface file\}\par }{\f6\fs14 type\par    (* Table of tools to load from the TOOLS directory in the SYSTEM folder *)\par    toolSpec = record\par        toolNumber: integer;\par        minVersion: integer;\par        end;\par \par    (* Change array size for your application. *)\par    ttArray = array [1..20] of toolSpec;\par     \par    toolTable = record\par        numToolsRequired:  integer;\par        tool:              ttArray;\par }\pard \widctlpar\adjustright {\f6\fs14        end;\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs14 \{The following code is from the Speak program\}\par }{\f6\fs14 \par }\pard \widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Init - Load the tools we need and initialize our data        \}\par \{       structures.                                             \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure Init;\par \par var\par    errNum: integer;                     \{error number to report to user\}\par    errString: packed array[1..5]   of char; \{error number as a hex string\}\par \par begin \{Init\}\par errString[1] := '$';                    \{return error codes as hex numbers\}\par with toolRec do begin\par    numToolsRequired := 4;\par    with tool[1] do begin\par       toolNumber := maleToolNum;\par       minVersion := 0;\par       end; \{with\}\par    with tool[2] do begin\par       toolNumber := femaleToolNum;\par       minVersion := 0;\par       end; \{with\}\par    with tool[3] do begin\par       toolNumber := parserToolNum;\par       minVersion := 0;\par       end; \{with\}\par    with tool[4] do begin\par       toolNumber := speechToolNum;\par       minVersion := 0;\par       end; \{with\}\par    end; \{with\}\par LoadTools(toolRec);                     \{load the tools\}\par errNum := toolError;\par if errNum <> 0 then begin               \{report any error returned\}\par    Int2Hex(errNum, pointer(@errString[2]), 4);\par    writeln('Unable to load tools: Error = ', errString);\par    done := true;\par    end \{if\}\par else begin                              \{start the tools\}\par    ParseStartUp(userID);\par    MaleStartUp;\par    FemaleStartUp;\par    SpeechStartUp;\par \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The speech tool kit defines five global speech parameters: voice, either male or female; tone, either bass or treble; and speed, pitch, and volume, each specified on a scale of 0 to 9, 9 the highest value.  Our global speech parameters are assigned the default values used by the speech tool kit:\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs14 \{The following code is from the SpeechTools interface file\}\par }{\f6\fs14 \par type\par    pString32    = packed array [0..32] of char;\par    pString32Ptr = ^pString32;\par \par    Gender = ( Male, Female );\par    Tone   = ( Bass, Treble );\par \par }\pard \widctlpar\adjustright {\f6\fs14    ParmRange = 0..9;\par \par }\pard \keepn\widctlpar\adjustright {\b\f6\fs14 \{The following code is from the global variables section of the Speak program\}\par }{\f6\fs14 \par   voice:        Gender;                        \{current global voice setting   \}\par   basePitch:    Tone;                          \{current global tone setting    \}\par   speed,                                       \{current global speed setting   \}\par   pitch,                                       \{current global pitch setting   \}\par }\pard \widctlpar\adjustright {\f6\fs14   volume:       ParmRange;                     \{current global volume setting  \}\par \par \par }{\b\f6\fs14 \{The following code is from the Init subroutine of the Speak program\}\par }{\f6\fs14 \par    done := false;                       \{initialize globals\}\par    voice := male;                       \{these are the default settings for\}\par    basePitch := bass;                   \{the global speech parameters\}\par    speed := 5;\par    volume := 5;\par    pitch := 5;\par    end; \{else\}\par end; \{Init\}\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Speaking an English String}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050744}Speaking an English String{\*\bkmkend _Toc497050744}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:see also tool calls}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:SpeakText}}}{\f4\fs20 {\*\bkmkstart bk2}The first speech tool call we'll look at is named Say.  Say accepts one parameter, a pointer to an English string.  It first converts the string to its phonetic representation, and then speaks the string.  Say is useful for speaking random strings; that is, when it cannot be known in advance what is to be spoken.\par The call to the Say procedure is shown in bold in the source code below.  The string we pass Say is a "Pascal-style" string.  Since Pascal strings start with a length byte, the total number of characters you can pass is limited to 255.\par Our SpeakText procedure, shown below, is very simple: we allow the user to Say as many strings as he wants; the user signals he's ready to stop Saying by entering a null string (i.e., by hitting the RETURN key right away).\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  SpeakText - Speak as many non-empty lines of English text as \}\par \{       the user wants.                                         \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par }\pard \widctlpar\adjustright {\f6\fs14 procedure SpeakText;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 var\par    sayString: packed array[0..255] of char; \{English text to speak or parse\}\par }\pard \widctlpar\adjustright {\f6\fs14    stop: boolean;                       \{true if user wants to exit\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 begin \{SpeakText\}\par stop := false;\par repeat\par    writeln;\par    writeln('Enter string to speak.  Press RETURN to exit.');\par    readln(sayString);\par    if length(sayString) = 0 then\par       stop := true\par    else\par       }{\b\f6\fs14 Say(sayString);}{\f6\fs14 \par }\pard \widctlpar\adjustright {\f6\fs14 until stop;\par writeln;\par end; \{SpeakText\}\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\*\bkmkend bk2}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call}{\rxe bk2}}}{\v\f4\fs20 \par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Converting an English String to Phonetics}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050745}Converting an English String to Phonetics{\*\bkmkend _Toc497050745}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:ConvertToPhonetics procedure}}}{\v\f4\fs20 .\par i(.Parse tool call;}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The Say procedure provides the easiest way to generate speech.  Another method of generating speech is to first translate the string to phonetics, and then call the male or female voice to speak the phonetics.  This method works well when the same string will be repeated over and over, since the process of converting the string from text to phonetics is only done once, as opposed to translating the text to phonetics each time the string is spoken.\par The tool call to perform the translation from English to phonetics is named Parse, shown in bold in the source code below.  The parameters we pass to Parse include a pointer to the English string to be translated, a pointer to the string to receive the phonetics, and an integer that tells the Parse function how many characters to skip before it starts to translate the text into phonetic characters.  Parse returns an integer, the position in the string where the conversion stopped.  A character's position in the string is counted from one.  Be careful!  Parse expects the phonetic string to be 255 characters long.  If your string is less than 255 characters, Parse could overwrite whatever is beyond the end of the string, without warning.\par Since the output string is limited to 255 characters, it is possible that Parse will not be able to translate all of the text.  Parse returns a displacement into the text string; if it finished, then this value will be equal to the length of the input text.  If the returned value is smaller than the length of the string, then Parse didn't have enough room to store all of the phonetic characters, and you will have to call it again.  On the next call, you would pass the value returned by Parse+1 as the displacement into the text string, and Parse would pick up where it left off.\par In the following sample program, you can see one way to handle these long input strings.  Once again, to leave this subroutine, press the RETURN key right away to enter a null string.\par }\pard \widctlpar\adjustright {\f4\fs20 \par }{\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  ConvertToPhonetics - Convert English text to phonetic        \}\par \{       representation.                                         \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure ConvertToPhonetics;\par \par var\par    phString: packed array[0..255] of char; \{phonetic string\}\par    sayString: packed array[0..255] of char; \{English text to speak or parse\}\par    size: integer;                       \{length of string\}\par    start: integer;                      \{position in English string to begin\}\par                                         \{ conversion                        \}\par    stop: boolean;                       \{true if user wants to exit\}\par \par begin \{ConvertToPhonetics\}\par stop := false;\par \par \{Outer loop lets user enter next string to convert.\}\par \{Entering null string signals it's time to exit.\}\par repeat\par    writeln;\par    writeln('Enter string to translate to phonetics.  Press RETURN to exit.');\par    readln(sayString);\par    size  := length(sayString);\par    start := 0;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14    \{Inner loop is necessary in the event that the \}\par    \{ complete English string wasn't converted.    \}\par    if size > 0 then begin\par       repeat\par          start := start+1;\par          }{\b\f6\fs14 start := Parse(sayString, phString, start);}{\f6\fs14 \par          write(phString);\par       until start = size;\par       writeln;\par       end \{if\}\par    else\par       stop := true;\par until stop;\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{ConvertToPhonetics\}\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\v\f4\fs20 .i).Parse tool call;\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Speaking a Phonetic String}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050746}Speaking a Phonetic String{\*\bkmkend _Toc497050746}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:SpeakPhonetics procedure}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 {\*\bkmkstart bk3}{\*\bkmkstart bk4}The next two speech tool calls we'll look at are used to generate speech from a phonetic string.  The functions are named MaleSpeak and FemaleSpeak, and invoke the back-end's male and female voices, respectively.  The parameters we pass the two routines are identical, and include three integers that specify the volume, speed, and pitch values that are to be applied to the speech, and a pointer to the phonetic string to speak.  As always, the values you pass for volume, speed and pitch should be in the range 0 to 9.  The phonetic string itself is a p-string.\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  SpeakPhonetics - Speak as many non-empty lines of phonetic   \}\par \{       text as the user wants.                                 \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par }\pard \widctlpar\adjustright {\f6\fs14 procedure SpeakPhonetics;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 var\par    phString: packed array[0..255] of char; \{phonetic string\}\par }\pard \widctlpar\adjustright {\f6\fs14    stop: boolean;                       \{true if user wants to exit\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 begin \{SpeakPhonetics\}\par stop := false;\par repeat\par    writeln;\par    writeln('Enter phonetic string to speak.  Press RETURN to exit.');\par    readln(phString);\par    if length(phString) = 0 then\par       stop := true\par    else begin\par       if voice = male then\par          }{\b\f6\fs14 MaleSpeak(volume, speed, pitch, phString)}{\f6\fs14 \par       else\par          }{\b\f6\fs14 FemaleSpeak(volume, speed, pitch, phString);}{\f6\fs14 \par       end; \{else\}\par }\pard \widctlpar\adjustright {\f6\fs14 until stop;\par writeln;\par end; \{SpeakPhonetics\}\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\*\bkmkend bk3}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleSpeak tool call}{\rxe bk3}}}{\*\bkmkend bk4}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleSpeak tool call}{\rxe bk4}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\pard\plain \qj\fi540\widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parse tool call}}}{\v\f4\fs20 \par }{\f4\fs20 Back in Chapter 2, you saw that an illegal phonetic string would stop the speech output, and the same thing is true with this call.  For example, suppose parsing some English text that included the word "hat" resulted in the two strings: hA and Et, both of which are to be spoken one after the other.  Both calls to the Speak function would fail, since the vowel AE has been split.  You can avoid this problem in your own programs by checking the last two characters in the phonetic string returned by the Parse function.  If both characters are capital letters or if the next-to-the-last character only is a capital, you don't need to do anything \endash  you've found a complete phoneme.  On the other hand, if only the last character is a capital letter, then you're splitting a phoneme.  To remedy the situation, you'll need to decrement the start variable and the length of the string.  The sample code below, adapted from our ConvertToPhonetics procedure, demonstrates the technique:\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14   readln(sayString);\par   size := length(sayString);\par \par   \{Inner loop is necessary in the event that the\}\par   \{complete English string wasn't converted.    \}\par   if size > 0 then begin\par      repeat\par         start := start+1;\par         start := Parse(sayString, phString, start);\par         phSize := length(phString);\par         if (phString[phSize] >= 'A') and (phString[phSize] <= 'Z') then\par            if (phString[phSize-1] < 'A') or (phString[phSize-1] > 'Z') then begin\par               start := start-1;\par               phString[0] := phString[0]-1;\par            end; \{if\}\par         write(phString);\par      until start = size;\par      writeln;\par }\pard \widctlpar\adjustright {\f6\fs14      end; \{if\}\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Setting Global Speech Parameters}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050747}Setting Global Speech Parameters{\*\bkmkend _Toc497050747}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:SetSpeechGlobals procedure}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetSayGlobals tool call}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/Pascal compiler}}}{\v\f4\fs20 \par }\pard \qj\fi540\keep\widctlpar\adjustright {\f4\fs20 When English is spoken using the Say procedure, the current global values of voice gender, tone, pitch, speed, and volume are applied.  The speech tool kit provides a mechanism for setting the global speech parameters, in a procedure named SetSayGlobals.  The procedure accepts five integer parameters which set the voice, tone, pitch, speed, and volume global values.  For our readers who are Pascal purists, you'll notice that the voice and tone parameters to the call are actually enumerated types.  This actually works out fine, since all Pascal compilers use ordinal values for enumerations that start with zero and count up from there, and all Pascal compilers on the Apple II}{\f4\fs18 GS}{\f4\fs20  represent integers and enumerated values internally the same way.\par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 Our program's SetSpeechGlobals procedure, shown below, uses a short function to make sure that the number the user types is in an acceptable range.  This subroutine also handles reprompting when the value is bad.  Once all of the values have been obtained, the SetSayGlobals routine is called to set the global speech parameters.\par \par }\pard \widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  SetSpeechGlobals - Set global speech parameters.             \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure SetSpeechGlobals;\par \par \par    function GetValue (min,max: integer): integer;\par \par    \{ Get a value, making sure it is in the given range          \}\par    \{                                                            \}\par    \{ Parameters:                                                \}\par    \{    min - lowest allowed value                              \}\par    \{    max - highest allowed value                             \}\par    \{                                                            \}\par    \{ Returns: Value read                                        \}\par \par    var\par       value: integer;                   \{value read\}\par \par    begin \{GetValue\}\par    repeat\par       readln(value);\par       if (value < min) or (value > max) then begin\par          writeln('Please enter a value from ', min:1, ' to ', max:1, '.');\par          writeln;\par          write('  Value: ');\par          end; \{if\}\par    until (value >= min) and (value <= max);\par    GetValue := value;\par    end; \{GetValue\}\par \par \par begin \{SetSpeechGlobals\}\par write('Voice = ');                      \{Read new global voice setting\}\par if voice = male then\par    writeln('male ')\par else\par    writeln('female ');\par writeln('Enter 0 to change voice to male, 1 to change voice to female.');\par if GetValue(0,1) = 0 then\par    voice := male\par else\par    voice := female;\par writeln;                                \{Read new global tone setting\}\par write('Tone = ');\par if basePitch = bass then\par    writeln('bass ')\par else\par    writeln('treble ');\par writeln('Enter 0 to change tone to bass, 1 to change tone to treble.');\par if GetValue(0,1) = 0 then\par    basePitch := bass\par else\par    basePitch := treble;\par writeln;                                \{Read new global volume setting\}\par write('Volume = ', volume:1, '  ');\par volume := GetValue(0,9);\par writeln;                                \{Read new global speed setting\}\par write('Speed = ', speed:1, '  ');\par speed := GetValue(0,9);\par writeln;                                \{Read new global pitch setting\}\par write('Pitch = ', pitch:1, '  ');\par pitch := GetValue(0,9);\par                                         \{set the globals\}\par SetSayGlobals(voice, basePitch, pitch, speed, volume);\par writeln;\par end; \{SetSpeechGlobals\}\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetSayGlobals tool call}}}{\v\f4\fs20 \par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 The Exceptions Dictionary}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050748}The Exceptions Dictionary{\*\bkmkend _Toc497050748}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:DisplayDict procedure}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictDelete tool call}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictDump tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictInit tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictInsert tool call}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 While it is being run, the speech tool kit maintains an on-line dictionary containing words that are to be pronounced in a special way.  Access to the tool kit's dictionary is provided by five tool calls:  DictInit, which initializes the dictionary; DictDump, which returns the next entry in the dictionary; DictInsert, used to add an entry to the dictionary; DictDelete, which removes an entry from the dictionary; and DictActivate, which enables or disables the current dictionary.  The dictionary is initially empty; entries are added to it with the insert function and are removed from it with delete calls.  Notice that the dictionary resides only in memory \endash  the tool kit knows nothing about dictionary files on disk.  Our program includes subroutines to handle the disk I/O; you can use these subroutines in your own programs to load and save dictionaries.\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 Displaying the Dictionary}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050749}Displaying the Dictionary{\*\bkmkend _Toc497050749}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:DisplayDict procedure}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictDump tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parse tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictInit tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 Our DisplayDict procedure displays the contents of the dictionary, one entry at a time.  As you may recall from Chapter 2, a dictionary entry consists of an English word and the phonetics to be used for the word whenever the parser is called (either with the Say procedure or the Parse function).  Both words are restricted to a maximum of 32 characters each.  The entries are stored in alphabetical order, based on the English words.  The front-end maintains a pointer to the current dictionary entry.  Every time the tool kit's DictDump function is called, the pointer is advanced to the next entry.  When the end of the dictionary is reached, the pointer is set to a null string.  The speech tool kit provides a routine named DictInit to reset the pointer into the dictionary.  DictInit accepts one integer parameter, a flag that tells the parser how to reset the pointer.  A flag of zero causes the pointer to be set to the first entry, while a flag of one removes the dictionary from memory and sets the pointer to a null string.  This is the purpose of the first part of our DisplayDict procedure; we give the user the option of resetting the dictionary pointer:\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictInit tool call}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  DisplayDict - Displays current exceptions dictionary, one    \}\par \{       entry at a time.                                        \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par }\pard \widctlpar\adjustright {\f6\fs14 procedure DisplayDict;\par \par var\par    answer: string;                      \{user's response to queries\}\par    flag: integer;                       \{dict. initialization flag\}\par    noErr: boolean;                      \{true if no error has occurred\}\par    stop: boolean;                       \{true if user wants to exit\}\par    word1, word2: pString32;             \{dictionary entry\}\par    wordPtr: pString32Ptr;               \{pointer returned by DictDump function\}\par \par begin \{DisplayDict\}\par writeln;\par \par \{Before displaying the dictionary, let user initialize it.\}\par repeat\par    noErr := true;\par    writeln('Before displaying the dictionary, lets initialize it.');\par    writeln('Enter 0 to reset dictionary to beginning.');\par    writeln('Enter 1 to delete current dictionary.');\par    writeln('Enter 2 to NOT initialize dictionary.');\par    writeln;\par    readln(flag);\par    if (flag < 0) or (flag > 2) then begin\par        noErr := false;\par        writeln;\par        writeln('Please enter either 0, 1, or 2.');\par        writeln;\par        end; \{if\}\par until noErr;\par \par if flag <> 2 then\par    }{\b\f6\fs14 DictInit(flag);}{\f6\fs14 \par \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 The second part of our DisplayDict procedure is a loop to show the dictionary entries, one after another until the user signals he's ready to stop or the end of the dictionary is reached.  The parameters we pass the DictDump function are pointers to strings to receive the English word and phonetic word.  The call returns a pointer to the current phonetic word entry.\par }\pard \widctlpar\adjustright {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictDump tool call}}}{\v\f4\fs20 \par }{\f6\fs14 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{While there are still entries in the dictionary, \}\par \{ get and then display the next entry.            \}\par stop := false;\par repeat\par    }{\b\f6\fs14 wordPtr := DictDump(word1, word2);}{\f6\fs14 \par    if length(word1) = 0 then\par       stop := true\par    else begin\par       writeln('Next entry:   ', word1, '   ', word2, '   Continue? (Y or N)');\par       readln(answer);\par       if (answer[1] = 'N') or (answer[1] = 'n') then\par          stop := true;\par       end; \{else\}\par until stop;\par writeln;\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{DisplayDict\}\par \par \par \par \par \par \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 Adding Entries to the Dictionary}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050750}Adding Entries to the Dictionary{\*\bkmkend _Toc497050750}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:InsertWord procedure}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictInsert tool call}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 New words are added to the dictionary with the speech tool kit's DictInsert procedure.  The call accepts two parameters, a pointer to the English word and a pointer to the phonetics to be used whenever the English word is encountered during parsing.  Notice that the English word is case-insensitive; that is, all English words in the dictionary are stored in all uppercase letters, so that if you first added the word "have" and then inserted the word "Have," only the second addition would appear in the new dictionary.\par As with our other procedures in our sample program, our InsertWord procedure contains a loop to allow the user to insert as many words into the dictionary as he wants.  The user signals he's finished inserting words by entering a null string for the two words that comprise a dictionary entry.\par }\pard \widctlpar\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  InsertWord - Insert new entries into exceptions dictionary.  \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure InsertWord;\par \par var\par    stop: boolean;                       \{true if user wants to exit\}\par    word1, word2: pString32;             \{dictionary entry\}\par \par begin \{InsertWord\}\par stop := false;\par writeln;\par repeat\par    writeln('Press RETURN for the dictionary entries to exit function.');\par    write('Enter English word to add to dictionary:  ');\par    readln(word1);\par    write('Enter phonetic representation of word to add to dictionary:  ');\par    readln(word2);\par    if (length(word1) = 0) or (length(word2) = 0) then\par       stop := true\par    else\par       }{\b\f6\fs14 DictInsert(word1, word2);}{\f6\fs14 \par    writeln;\par until stop;\par writeln;\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{InsertWord\}\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 Removing Entries from the Dictionary}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050751}Removing Entries from the Dictionary{\*\bkmkend _Toc497050751}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:DeleteWord procedure}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:DictDelete procedure}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 Words are deleted from the dictionary with the speech tool kit's DictDelete procedure.  The call accepts one parameter, a pointer to the English word to be removed.  As with the DictInsert procedure, the English word is case-insensitive; this means that you can mix any combination of uppercase and lowercase letters in the word that you pass to DictDelete.\par Our DeleteWord procedure contains a loop to allow the user to delete as many words from the dictionary as wanted.  The user signals he's finished by entering a null string for the word to delete.\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictDelete tool call}}}{\v\f4\fs20 \par }{\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  DeleteWord - Removes entries from the current exceptions     \}\par \{       dictionary.                                             \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par }\pard \widctlpar\adjustright {\f6\fs14 procedure DeleteWord;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 var\par    stop: boolean;                       \{true if user wants to exit\}\par }\pard \widctlpar\adjustright {\f6\fs14    word: pString32;                     \{dictionary entry\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 begin \{DeleteWord\}\par stop := false;\par writeln;\par repeat\par    writeln('Press RETURN for the dictionary entry to exit function.');\par    write('Word to delete from dictionary?  ');\par    readln(word);\par    if length(word) = 0 then\par       stop := true\par    else\par       }{\b\f6\fs14 DictDelete(word);}{\f6\fs14 \par    writeln;\par until stop;\par writeln;\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{DeleteWord\}\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 Loading A Dictionary From Disk}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050752}Loading A Dictionary From Disk{\*\bkmkend _Toc497050752}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:LoadDict procedure}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dictionary\:loading from disk}}}{\v\f4\fs20 \par }{\f4\fs20 Loading a dictionary from a disk file is very easy:  we get the path name of the file to load, open the file, and then read entries from the file, inserting them into the dictionary, until we reach the end of the file.  There are a number of ways to read the entries from the file, based on how the file was created.  In our sample program, we created the file as a sequence of variable-length p-strings, so we need to read them back in the same format:\par }\pard \fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  LoadDict - Load dictionary file from disk.                   \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par }\pard \widctlpar\adjustright {\f6\fs14 procedure LoadDict;\par \par label 99;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 var\par    ch: char;                            \{character from the file\}\par    errNum: integer;                     \{error number to report to user\}\par    errString: packed array[1..5]   of char; \{error number as a hex string\}\par    f: text;                             \{file variable\}\par    i: integer;                          \{loop/index variable\}\par    pathname: string[255];               \{name of the file\}\par }\pard \widctlpar\adjustright {\f6\fs14    word1, word2: pString32;             \{dictionary entry\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 begin \{LoadDict\}\par \{Get pathname of dictionary to open.\}\par write('Enter pathname of dictionary to open:  ');\par readln(pathname);\par if length(pathname) = 0 then\par }\pard \widctlpar\adjustright {\f6\fs14    goto 99;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{Open the file for reading.\}\par reset(f, pathname);\par errNum := toolError;\par if errNum <> 0 then begin               \{report any error returned\}\par    Int2Hex(errNum, pointer(@errString[2]), 4);\par    writeln('Unable to open file:  Error = ', errString);\par    goto 99;\par }\pard \widctlpar\adjustright {\f6\fs14    end; \{if\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{Build the dictionary from the file.\}\par DictInit(1);                            \{clear current dict from memory\}\par while not (eof(f)) do begin             \{Loop:\}\par    if eoln(f) then\par       readln(f)\par    else begin\par       read(f, ch);                      \{read English word\}\par       word1[0] := ch;\par       for i := 1 to ord(ch) do\par          read(f, word1[i]);\par       read(f, ch);                      \{read phonetic word\}\par       word2[0] := ch;\par       for i := 1 to ord(ch) do\par          read(f, word2[i]);\par       DictInsert(word1, word2);         \{insert entry into dict\}\par       end; \{else\}\par    end; \{while\}\par close(f);\par }\pard \widctlpar\adjustright {\f6\fs14 DictInit(0);                            \{reset dict to top\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 99:\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{LoadDict\}\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 Saving A Dictionary To Disk}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050753}Saving A Dictionary To Disk{\*\bkmkend _Toc497050753}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:WriteDict procedure}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dictionary\:saving to disk}}}{\v\f4\fs20 \par }{\f4\fs20 Saving the current dictionary to a disk file is as simple as loading one:  we get the name of the file to hold the dictionary, open it, and then write entries to the file until we reach the end of the dictionary.  Perhaps the easiest way to create a dictionary file using the Pascal language is to declare our file variable as being of type file of pString32, and then write the entries with a single write statement:\par }\pard \fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \widctlpar\tx360\tx720\tx1080\tx5040\tqr\tx7200\adjustright {\f6\fs14 var\par    f: file of pString32;\par \par begin\par \{Get pathname...\}\par }\pard \widctlpar\tx360\tx720\tx1080\tx5040\adjustright {\f6\fs14 rewrite(f, pathname);\par \{Write the dictionary to the file.\}\par DictInit(0);                               \{set dictionary to top\}\par repeat\tab \tab                                 \{Loop:\}\par    stop := false;\par    tmp := DictDump(word1, word2);          \{get next dict entry\}\par    if length(word1) = 0 then\par       stop := true\par    else\par       write(f, word1, word2);              \{write entry to file\}\tab \par until stop;\par }\pard \widctlpar\tx360\tx720\tx1080\tqr\tx7200\adjustright {\f6\fs18 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 When the file is created, each word will occupy 33 characters, with zeroes appearing at the end of words that are shorter than 33 characters.  To save disk space, we want our entries to take up only as much space as they really need.  This is accomplished by writing the characters individually:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  WriteDict - Write dictionary to disk file.                   \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par }\pard \widctlpar\adjustright {\f6\fs14 procedure WriteDict;\par \par label 99;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 var\par    errNum: integer;                     \{error number to report to user\}\par    errString: packed array[1..5]   of char; \{error number as a hex string\}\par    f: text;                             \{file variable\}\par    i: integer;                          \{loop/index variable\}\par    pathname: string[255];               \{name of the file\}\par    stop: boolean;                       \{true if user wants to exit\}\par    tmp: pString32Ptr;                   \{pointer returned by DictDump\}\par }\pard \widctlpar\adjustright {\f6\fs14    word1, word2: pString32;             \{dictionary entry\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 begin\par \{Get pathname for dictionary file.\}\par write('Enter pathname for dictionary file:  ');\par readln(pathname);\par if length(pathname) = 0 then\par }\pard \widctlpar\adjustright {\f6\fs14    goto 99;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{Open the file for writing.\}\par rewrite(f, pathname);\par errNum := toolError;\par if errNum <> 0 then begin               \{report any error returned\}\par    Int2Hex(errNum, pointer(@errString[2]), 4);\par    writeln('Unable to open file:  Error = ', errString);\par    goto 99;\par }\pard \widctlpar\adjustright {\f6\fs14    end; \{if\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{Write the dictionary to the file.\}\par DictInit(0);                            \{set dictionary to top\}\par stop := false;\par repeat                                  \{Loop:\}\par    tmp := DictDump(word1, word2);       \{get next dict entry\}\par    if length(word1) = 0 then\par       stop := true\par    else begin\par       for i := 0 to length(word1) do    \{write English word\}\par          write(f, word1[i]);\par       for i := 0 to length(word2) do    \{write phonetic word\}\par          write(f, word2[i]);\par       end; \{else\}\par until stop;\par close(f);\par }\pard \widctlpar\adjustright {\f6\fs14 DictInit(0);                            \{reset dict to top\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 99:\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{WriteDict\}\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 The ShutDown Procedure}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050754}The ShutDown Procedure{\*\bkmkend _Toc497050754}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speak program\:ShutDown}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleShutDown tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleShutDown tool call}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseShutDown tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechShutDown tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shutting down tools}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\adjustright {\f4\fs20 After we're through using the speech tool sets, we must shut them down before leaving the program.  The tool shut down calls are very simple, with none of them requiring parameters.\par Our ShutDown procedure, shown below, shows how to make these tool calls.  Notice that the order in which we shut down our tools differs from the standard way tools are shut down on the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20 .  Normally, tools are shut down in the reverse order of the way they were started.  The speech tools require that the Speech tool set be started last, and also it should be shut down last.\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  ShutDown - Shut down the tools we started; do any necessary  \}\par \{       clean-up before exiting.                                \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure ShutDown;\par \par begin \{ShutDown\}\par FemaleShutDown;                         \{shut down speech tools\}\par MaleShutDown;\par ParseShutDown;\par SpeechShutDown;\par }\pard \widctlpar\adjustright {\f6\fs14 end; \{ShutDown\}\par }\pard \qc\widctlpar\adjustright {\f4 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Chapter 4 - Talking Tools Tools Set Reference\par }}\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 Chapter 4 \endash  Talking Tools Tool Set Reference}{\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\v\fs28 {\*\bkmkstart _Toc497050755}Chapter 4 \endash  Talking Tools Tool Set Reference{\*\bkmkend _Toc497050755}\tcl1}}}{\fs28 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speech tool set}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Male Speech tool set}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Female Speech tool set}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parser tool set}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENSONIQ chip}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 front-end toolkit}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 back-end toolkit}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Talking Tools' speech tool kit is a set of four different tool sets that work together to generate high-quality speech on the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20  computer.  Each tool set performs a separate function in generating speech.  The Parser tool set is the "front-end" module; it converts English text to a phonetic representation, using the current values of the five global speech parameters and its exceptions dictionary to create the phonemes.  The Male Speech and Female Speech tool sets form the "back-end" modules; they speak phonetic strings with the computer's ENSONIQ sound chip.  The Speech tool set provides an interface between the other three tool sets and the latest operating system on the machine.\par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TOOLS folder}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEM folder}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool050 file}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool051 file}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool052 file}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Tool053 file}}}{\v\f4\fs20 \par }{\f4\fs20 When using the speech tool kit you'll need to make sure that the appropriate tools are installed in the SYSTEM/TOOLS folder of the boot disk.  The speech tool kit's tools are: Tool050, the Male Speech tool set; Tool051, the Female Speech tool set; Tool052, the English text to phonetics translator tool set; and Tool053, the interface to the GS/OS operating system.  To install them on your boot disk, simply copy the four tool files from the SYSTEM/TOOLS folder of the system disk that came in your Talking Tools package to the SYSTEM/TOOLS folder of your boot disk.\par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Apple II}{\scaps\v\f4\fs18 GS}{\v\f4\fs20  manuals}}}{\v\f4\fs20 \par }{\f4\fs20 For readability, this chapter is organized along the lines of the }{\i\f4\fs20 Apple II}{\i\scaps\f4\fs18 GS}{\i\f4\fs20  Toolbox Reference}{\f4\fs20  manuals.  Each tool set is described in its own section, and the individual calls for a tool set are first organized with the housekeeping functions of boot initialization, start up, shut down, version, reset, and status, followed by the other calls in alphabetical order.  Stack diagrams are included with each call, and source code for each of the programming languages Pascal, C, and assembly is shown.  In the cases of Pascal and C, the function declarations used in their respective interface files is given.  For assembly language, the sample source code shows what parameters to push (if any), followed by a call to the appropriate macro, and ending with pulling return values (if any).  In the sections below, we'll look at the steps needed to use Talking Tools with each of these languages.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Using Talking Tools With Pascal}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050756}Using Talking Tools With Pascal{\*\bkmkend _Toc497050756}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/Pascal compiler}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal}}}{\v\f4\fs20 .int file;}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechTools.int file}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 interface files}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal\:interface files}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Libraries folder}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCAPascalDefs folder}}}{\v\f4\fs20 \par .pas file;}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechTools.pas file}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 The interface file that is to be used when programming in ORCA/Pascal is named SpeechTools.Int.  It is located in the Pascal folder of the Talking Tools disk.  The simplest way to access this file is to move it to the LIBRARIES/ORCAPascalDefs folder of your ORCA/Pascal disk.  The source code for the interface file is also in the Pascal folder on the Talking Tools disk, in a file named SpeechTools.pas.  You may want to copy this file to the TOOL.INTERFACE folder on the ORCA/Pascal Extras disk, where the source code for the other interface files is found.\par }{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 uses statement}}}{\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 interface files}}}{\v\f4\fs20 \par }{\f4\fs20 If you moved the interface file to your ORCAPascalDefs folder of your libraries prefix, you can access the interface file in a program with a simple USES statement:\par \par }{\f6\fs18 uses SpeechTools;\par }{\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Unlike the interfaces to Apple's toolbox, where each tool has a separate interface file, this one interface file contains the interface for all four of the speech tools.\par }\pard \qj\fi540\keep\widctlpar\tqr\tx7200\adjustright {\pard\plain \qj\fi540\keep\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LibPrefix compiler directive}}}{\v\f4\fs20 \par }{\f4\fs20 If the interface file is not in your libraries prefix, you can use the LibPrefix directive to tell the compiler where the file resides, followed by a USES statement.  In the example below, assume that the interface file resides in the same folder as your program:\par \par }\pard \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright {\f6\fs18 \{$LibPrefix '0/'\}\par }\pard \qj\fi540\keep\widctlpar\tqr\tx7200\adjustright {\f6\fs18 uses SpeechTools;\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par Throughout this chapter, you will see references to "pString32" and "pString255" data structures.  These are "Pascal-style" strings (contain a leading length byte) of 32 and 255 characters, respectively.  The pString types are defined in the SpeechTools interface file.  You may recall that in ORCA/Pascal, these kinds of strings are declared as a packed array of characters, indexed from 0 to the maximum number of characters.  You will also see references to the data types Gender, Tone, and ParmRange.  Gender and Tone refer to enumerated types, while ParmRange refers to an integral subrange.  For your convenience, the type definitions from the SpeechTools interface file are shown here:\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs18 type\par    pString32 = packed array[0..32] of char;\par    pString32Ptr = ^pString32;\par \par    Gender = ( Male, Female );\par    Tone = ( Treble, Bass );\par \par }\pard \widctlpar\adjustright {\f6\fs18    ParmRange = 0..9;\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Using Talking Tools With C}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050757}Using Talking Tools With C{\*\bkmkend _Toc497050757}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/C compiler}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 C}}}{\v\f4\fs20 .h file;}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speech.h file}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 interface files}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 C\:interface files}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 LIBRARIES folder}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCACDefs folder}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 include statement}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 The interface file that is to be used when programming in ORCA/C is named speech.h.  It is located in the CLang folder of the Talking Tools disk.  The simplest way to access this file is to move it to the LIBRARIES/ORCACDefs folder of your ORCA/C disk.\par You can access the interface file from a program with an include statement:\par \par }\pard \qj\fi540\widctlpar\tx4320\tqr\tx7200\adjustright {\f6\fs18 #include <speech.h>        /* interface file in libraries prefix */\par #include "/path/speech.h"  /* interface file in path prefix      */\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \qj\widctlpar\tqr\tx7200\adjustright {\f4\fs20 Unlike the interfaces to Apple's toolbox, where each tool has a separate interface file, this one interface file contains the interface for all four of the speech tools.\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 In the C language source code in this chapter, you will see references to "pString32Ptr" and "pString255Ptr" data types.  These are pointers to "Pascal-style" strings (containing a leading length byte) of 32 and 255 characters, respectively.  You will also see the data types of Gender and Tone, which are enumerations.  These data types are defined in the speech.h interface file, reprinted below for your convenience:\par \par }\pard \widctlpar\adjustright {\f4\fs20 typedef char pString32 [33], *pString32Ptr;\par typedef char pString255 [256], *pString255Ptr;\par typedef enum Gender \{ Male, Female \} Gender;\par typedef enum Tone   \{ Treble, Bass \} Tone;\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Using Talking Tools With Assembly Language}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050758}Using Talking Tools With Assembly Language{\*\bkmkend _Toc497050758}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ORCA/M assembler}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembly language}}}{\v\f4\fs20 .Speech file;}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 M16.Speech file}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 interface files}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembly language\:interface file}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MCOPY assembler directive}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MacGen utility}}}{\v\f4\fs20 \par }\pard \qj\fi540\keep\widctlpar\tqr\tx7200\adjustright {\f4\fs20 The macros that can be used to call the speech tool kit are in a file named M16.SPEECH, located in the Asm folder on the Talking Tools disk.  You may want to copy this file to the LIBRARIES/AInclude folder on your ORCA/M disk, where all of the other macro files are located.  In order to use the speech tool kit from assembly language, you would typically use the MacGen utility in ORCA/M to create a custom macro file for your program, having it scan the M16.SPEECH file for the tool kit's macros.  At the beginning of the program, you would then include an MCOPY directive to access the macros:\par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \qj\fi540\widctlpar\tx1440\tqr\tx7200\adjustright {\f6\fs18 mcopy\tab myMacros\page \par }\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\v\fs24 \page }{\fs24 Speech Tool Set}{\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050759}Speech Tool Set{\*\bkmkend _Toc497050759}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Speech tool set\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 The speech tool set provides an interface between the speech tools provided by First Byte, Inc., and the latest version of the GS/OS operating system, correcting minor incompatibilities that crop up when the First Byte tools are used alone.\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0135\tab SpeechBootInit}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050760}$0135\tab SpeechBootInit{\*\bkmkend _Toc497050760}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechBootInit tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Called by the Tool Locator to initialize the tool.  An application should never make this call.\par \par }\pard \keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1029{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure SpeechBootInit;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void SpeechBootInit (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab _}{\f6\fs18 SpeechBootInit}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0235\tab SpeechStartUp}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050761}$0235\tab SpeechStartUp{\*\bkmkend _Toc497050761}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechStartUp tool call\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Initializes the Talking Tools speech tool sets.  This call should be made before any other tool calls to the Speech tool set, and the call should be made only once.  The call should be made after starting the other Talking Tools tool sets.\par \par }\pard \keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1030{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure SpeechStartUp;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void SpeechStartUp (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _SpeechStartUp\page }{\f4\fs14 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0335\tab SpeechShutDown}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050762}$0335\tab SpeechShutDown{\*\bkmkend _Toc497050762}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechShutDown tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shutting down tools\:Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Shuts down the Talking Tools tool sets.  This call should be made after all other Speech tool calls have been made, and should be made only once in a program.  The call should be made after shutting down the other Talking Tools tool sets.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1031{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure SpeechShutDown;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void SpeechShutDown (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _SpeechShutDown}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0435\tab SpeechVersion}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050763}$0435\tab SpeechVersion{\*\bkmkend _Toc497050763}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechVersion tool call\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TOOLS folder}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEM folder}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version number}}}{\v\f4\fs20 \par }{\f4\fs20 Returns the version number of the Speech tool set installed in the TOOLS folder of the SYSTEM folder on the boot disk.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1032{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex77\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw263\pich162\picwgoal5260\pichgoal3240\macpict\bliptag2124045998\blipupi72{\*\blipuid 7e9a5eaeef22d32b67a40fdeb54359d2}026d0007000700a9010e1101a0008201000a0007000700a9010e0a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd0000001b0000a00098280094001c0a76657273696f6e4e756da00099a00097a100960006050000000226a1009a0008fffd0000004c0000a000982b570221576f7264202d2056657273696f6e206e756d626572206f6620746f6f6c20736574a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function SpeechVersion: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int SpeechVersion (void);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _SpeechVersion\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab pl2\tab versionNum\par \par \par \par \par \par \par }{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0535\tab SpeechReset}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050764}$0535\tab SpeechReset{\*\bkmkend _Toc497050764}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechReset tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Reinitializes the Speech tool set to its original state.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1033{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure SpeechReset;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void SpeechReset (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _SpeechReset}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0635\tab SpeechStatus}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050765}$0635\tab SpeechStatus{\*\bkmkend _Toc497050765}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SpeechStatus tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Indicates whether the Speech tool set is currently active.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1034{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich162\picwgoal6960\pichgoal3240\macpict\bliptag1586781238\blipupi72{\*\blipuid 5e945c36abb35500b54bdd940cc4f70b}02880007000700a901631101a0008201000a0007000700a901630a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd000000160000a0009828009400210a616374697665466c6167a00099a00097a100960006050000000226a1009a0008fffd000000760000a000982b520222576f7264202d205a65726f20696620746f6f6c20736574206973206e6f74206163742987176976653b206e6f6e2d7a65726f20696620616374697665a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function SpeechStatus: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int SpeechStatus (void);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _SpeechStatus\par \tab pla\par \tab beq\tab NotActive\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab bne\tab Active\page }{\f4\fs14 \par }\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\v\fs24 \page }{\fs24 Parser Speech Tool Set}{\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050766}Parser Speech Tool Set{\*\bkmkend _Toc497050766}\tcl2}}}{\fs24 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parser speech tool set\bxe }}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 The Parser tool handles the exceptions dictionary, and can convert English text to phonetics, either returning the phonetic string or passing it on to one of the other tools to say the text right away.\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0134\tab ParseBootInit}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050767}$0134\tab ParseBootInit{\*\bkmkend _Toc497050767}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseBootInit tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Called by the Tool Locator to initialize the tool.  An application should never make this call.\par \par }\pard \keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1035{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure ParseBootInit;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void ParseBootInit (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab _}{\f6\fs18 ParseBootInit\par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0234\tab ParseStartUp}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050768}$0234\tab ParseStartUp{\*\bkmkend _Toc497050768}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseStartUp tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 gender parameter}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tone parameter}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speed parameter}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume parameter}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pitch parameter}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Parser tool set}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dictionary}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 parser module}}}{\v\f4\fs20 \par }{\f4\fs20 Initializes the Talking Tools front-end, its parser module.  This call should be made before any other tool calls to the Parser tool set, and the call should be made only once.  The global speech parameters are set as follows: voice gender is set to male; tone is set to bass; speed, volume, and pitch are each set to 5.  The exceptions dictionary is initialized to empty.\par \par }\pard \keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1036{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley75\piccropl0\piccropr0\piccropt0\piccropb0\picw292\pich141\picwgoal5840\pichgoal2820\macpict\bliptag-1860621565\blipupi72{\*\blipuid 91192b03fb9f61369136834ba962baf9}0205000700070094012b1101a0008201000a000700070094012b0a000000000000000034002e000a0041006e38220025006d0024220025000a0024a100960006050000000276a1009a0008fffd0000002a0000a000980300150d000a2b142a1170726576696f757320636f6e74656e7473a00099a00097a100960006060000000276a1009a0008fffd0000000e0000a000982b151006757365724944a00099a00097a100960006050000000276a1009a0008fffd0000005a0000a00098294a22576f7264202d20757365722049442061737369676e656420746f20796f75722070722995056f6772616da00099a00097a100960006050000000276a1009a0008fffd0000000d0000a000982800520073052d2d205350a00099a00097a100960006050000000276a1009a0008fffd0000002f0000a000980401280013000b11537461636b206265666f72652063616c6ca00099a00097220076000a001b220076006d001b22007f000a6300a100960006050000000276a1009a0008fffd000000290000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000276a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097a100960006050000000276a1009a0008fffd0000000d0000a000982b5f0d052d2d205350a00099a00097a00083ff}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure ParseStartUp (myUserID: integer);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void ParseStartUp (int myUserID);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph2\tab myUserID\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18  \tab _ParseStartUp}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0334\tab ParseShutDown}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050769}$0334\tab ParseShutDown{\*\bkmkend _Toc497050769}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseShutDown tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shutting down tools\:Parser tool set}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory deallocation}}}{\v\f4\fs20 \par }{\f4\fs20 Shuts down the Parser module.  This call should be made after all other Parser tool calls have been made, and should be made only once in a program.  The call causes all memory allocated by the parser to be released.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1037{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure ParseShutDown;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void ParseShutDown (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _ParseShutDown}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0434\tab ParseVersion}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050770}$0434\tab ParseVersion{\*\bkmkend _Toc497050770}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseVersion tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TOOLS folder}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEM folder}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version number}}}{\v\f4\fs20 \par }{\f4\fs20 Returns the version number of the Parser tool set installed in the TOOLS folder of the SYSTEM folder on the boot disk.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1038{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex77\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw263\pich162\picwgoal5260\pichgoal3240\macpict\bliptag2124045998\blipupi72{\*\blipuid 7e9a5eaeef22d32b67a40fdeb54359d2}026d0007000700a9010e1101a0008201000a0007000700a9010e0a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd0000001b0000a00098280094001c0a76657273696f6e4e756da00099a00097a100960006050000000226a1009a0008fffd0000004c0000a000982b570221576f7264202d2056657273696f6e206e756d626572206f6620746f6f6c20736574a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function ParseVersion: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int ParseVersion (void);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _ParseVersion\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab pl2\tab versionNum\par \par \par \par }{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0534\tab ParseReset}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050771}$0534\tab ParseReset{\*\bkmkend _Toc497050771}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseReset tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 memory deallocation}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Parser tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Reinitializes the parser module to its original state.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1039{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure ParseReset;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void ParseReset (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _ParseReset}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0634\tab ParseStatus}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050772}$0634\tab ParseStatus{\*\bkmkend _Toc497050772}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ParseStatus tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Indicates whether the Parser tool set is currently active.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1040{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich162\picwgoal6960\pichgoal3240\macpict\bliptag1586781238\blipupi72{\*\blipuid 5e945c36abb35500b54bdd940cc4f70b}02880007000700a901631101a0008201000a0007000700a901630a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd000000160000a0009828009400210a616374697665466c6167a00099a00097a100960006050000000226a1009a0008fffd000000760000a000982b520222576f7264202d205a65726f20696620746f6f6c20736574206973206e6f74206163742987176976653b206e6f6e2d7a65726f20696620616374697665a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function ParseStatus: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int ParseStatus (void);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _ParseStatus\par \tab pla\par \tab beq\tab NotActive\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab bne\tab Active}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $1034\tab DictActivate}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050773}$1034\tab DictActivate{\*\bkmkend _Toc497050773}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictActivate tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dictionary}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parse tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call}}}{\v\f4\fs20 \par }{\f4\fs20 Activates or deactivates the dictionary.  A parameter value of 0 turns off the exceptions dictionary, so that subsequent calls to Say and Parse will not consult the dictionary for special pronunciations.  A parameter of 1 turns the exception dictionary back on.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1041{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw366\pich163\picwgoal7320\pichgoal3260\macpict\bliptag943576276\blipupi72{\*\blipuid 383dd4d4140c3bbe4c14ead569943d02}02110007000700aa01751101a0008201000a0007000700aa01750a000000000000000034003b000a004e006538a100960006050000000276a1009a0008fffd0000002e0000a0009803001504010d000a2b101311537461636b206265666f72652063616c6ca00099a00097220083000a002422008300640024220095000a5a00a100960006050000000276a1009a0008fffd0000002a0000a000982a5e10537461636b2061667465722063616c6ca00099a00097a100960006060000000276a1009a0008fffd000000280000a00098040028008c000f1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000276a1009a0008fffd0000000d0000a000982b680e052d2d205350a00099a00097220029000a002d2200290064002da100960006060000000276a1009a0008fffd000000280000a0009828002e000f1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000276a1009a0008fffd0000000d0000a000982b6828052d2d205350a00099a00097a100960006060000000276a1009a0008fffd000000170000a0009828004700210a616374697665466c6167a00099a00097a100960006050000000276a1009a0008fffd0000007d0000a00098295622576f7264202d206163746976617465206f7220646561637469766174652074686520298f0b64696374696f6e6172793fa00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure DictActivate (activeFlag: integer);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void DictActivate (int activeFlag);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph2\tab #activeFlag\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _DictActivate }{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0B34\tab DictDelete}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050774}$0B34\tab DictDelete{\*\bkmkend _Toc497050774}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictDelete tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dictionary}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parse tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call}}}{\v\f4\fs20 \par }{\f4\fs20 Removes an entry from the parser's on-line dictionary.  Subsequent Say and Parse calls will use the phonetic translation generated by the parser for the deleted English word, rather than that which had been associated with the word in the dictionary.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1042{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw366\pich160\picwgoal7320\pichgoal3200\macpict\bliptag1598450152\blipupi72{\*\blipuid 5f4669e813b15157e15abe5f81bb72d0}02360007000700a701751101a0008201000a0007000700a701750a000000000000000034002e000a0053006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220087000a001d2200880064001b220091000a5a00a100960006050000000226a1009a0008fffd000000290000a000982a6810537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b07131170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b600e052d2d205350a00099a00097220025000a003622002500640036a100960006050000000226a1009a0008fffd0000002a0000a0009828002600121170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b603f052d2d205350a00099a00097a100960006060000000226a1009a0008fffd0000001d0000a00098280043001b0c456e676c69736820776f7264a00099a00097a100960006050000000226a1009a0008fffd000000800000a000982957224c6f6e67202d20706f696e74657220746f20456e676c69736820776f726420746f2029931672656d6f76652066726f6d2064696374696f6e617279a00099a00097a000ab220040000a0900a000ada000ab2200400064f700a000ada00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure DictDelete (EnglishWord: pString32);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void DictDelete (pString32Ptr EnglishWord);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph4\tab #EnglishWord\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _DictDelete}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0C34\tab DictDump}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050775}$0C34\tab DictDump{\*\bkmkend _Toc497050775}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictDump tool call\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dictionary}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 exceptions dictionary\: see dictionary}}}{\v\f4\fs20 \par }{\f4\fs20 Returns the next dictionary entry, advancing the pointer into the dictionary.  A dictionary entry consists of an English word and a phonetic representation that is to be used for the word whenever the parser is called.  The dictionary is stored as a list of entries in memory; the entries are in alphabetical order.  The parser maintains a pointer to the current dictionary entry.  After DictDump has returned the last entry in the list, subsequent calls will return a null string.  To start the process over, you can call DictInit, passing it a flag of zero, to reset the dictionary pointer to the beginning of the dictionary.  You should pass DictDump pointers to two 33-byte (first byte reserved for length) arrays in which it will place the English word and its phonetic representation.  The call returns a pointer to the entry's phonetic representation.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1043{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley77\piccropl0\piccropr0\piccropt0\piccropb0\picw299\pich254\picwgoal5980\pichgoal5080\macpict\bliptag-1052457101\blipupi72{\*\blipuid c144c7730bb8b3da563cbc6dd7d56a2a}03f200070007010501321101a0008201000a00070007010501320a00000000000000003400d0000a00f5006538340076000a009b006538340052000a007700653834002e000a0053006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a000972200c4000a00392200c700640036a100960006050000000226a1009a0008fffd000000290000a000982aa510537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b07131170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6034052d2d205350a00099a00097220025000a007e2200250064007ea100960006050000000226a1009a0008fffd0000002a0000a0009828002600121170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b607a052d2d205350a00099a00097a100960006050000000226a1009a0008fffd000000340000a000982800430072174c6f6e67202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd0000001d0000a00098280067001b0c456e676c69736820776f7264a00099a00097a100960006050000000226a1009a0008fffd0000005b0000a000982957224c6f6e67202d20506f696e74657220746f20737472696e6720746f20726563656976298e026520a00099a00097a100960006060000000226a1009a0008fffd000000200000a0009828008b00180d70686f6e6574696320776f7264a00099a00097a100960006050000000226a1009a0008fffd0000005e0000a00098295a224c6f6e67202d20506f696e74657220746f20737472696e6720746f20726563656976298e026520a00099a00097a100960006060000000226a1009a0008fffd000000200000a000982800e500180d70686f6e6574696320776f7264a00099a00097a100960006050000000226a1009a0008fffd0000004c0000a00098295a224c6f6e67202d20706f696e74657220746f20656e74727927732070686f6e6574696329940120a00099a00097a100960006060000000226a1009a0008fffd000000170000a000982800430020096c6f6e677370616365a00099a00097a000ab220040000a0900a000ada000ab220064000a0900a000ada000ab220088000a0900a000ada000ab2200400064f700a000ada000ab2200640064f700a000ada000ab2200880064f700a000ada000ab2200e2000a0900a000ada000ab2200e20064f700a000ada00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function DictDump (var EnglishWord, phoneticWord: pString32):\par \tab \tab pString32Ptr;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal pString32Ptr DictDump (pString32Ptr EnglishWord,\par \tab \tab pString32Ptr phoneticWord);}{\f4\fs20 \par \par }\pard \qj\keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab pha\par \tab ph4\tab #EnglishWord\par \tab ph4\tab #phoneticWord\par \tab _DictDump\par }\pard \qj\keep\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab pl4\tab entryPointer\par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0E34\tab DictInit}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050776}$0E34\tab DictInit{\*\bkmkend _Toc497050776}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictInit tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Initializes the parser's on-line dictionary.  DictInit accepts an integer parameter; a value of zero resets the entry pointer to the first entry in the dictionary, while a value of one deletes the current dictionary from memory.  Calls to the DictDump function, after clearing the dictionary from memory, will return the null string.\par }\pard \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1044{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex79\picscaley75\piccropl0\piccropr0\piccropt0\piccropb0\picw492\pich133\picwgoal9840\pichgoal2660\macpict\bliptag1448256576\blipupi72{\*\blipuid 5652a44054119d7afe0a90d2d8cec480}023d00070007008c01f31101a0008201000a00070007008c01f30a000000000000000034002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a00152200760064001222007f000a5a00a100960006050000000226a1009a0008fffd000000290000a000982a5410537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b07131170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b600c052d2d205350a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002600121170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6029052d2d205350a00099a00097a100960006060000000226a1009a0008fffd000000100000a0009828003a002808696e6974466c6167a00099a00097a100960006050000000226a1009a0008fffd000000bf0000a00098294a22576f7264202d20466c61672073706563696679696e6720686f7720746f20696e697429912269616c697a652064696374696f6e6172793a2030203d2073657420746f20746f703b2985162031203d20636c6561722066726f6d206d656d6f7279a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure DictInit (flag: integer);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void DictInit (int flag);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph2\tab flag\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _DictInit}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0A34\tab DictInsert}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050777}$0A34\tab DictInsert{\*\bkmkend _Toc497050777}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 DictInsert tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 dictionary}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parse tool call}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call}}}{\v\f4\fs20 \par }{\f4\fs20 Adds a new entry to the current dictionary, inserting it in the correct place in order to preserve the alphabetical ordering of the dictionary.  Subsequent Say and Parse calls will use the dictionary's phonetic representation for the new English word rather than the one which would normally be generated by the parser.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1045{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley77\piccropl0\piccropr0\piccropt0\piccropb0\picw402\pich204\picwgoal8040\pichgoal4080\macpict\bliptag303230436\blipupi72{\*\blipuid 1212ede412948f3de5cba9e191851e47}02ee0007000700d301991101a0008201000a0007000700d301990a0000000000000000340052000a007700653834002e000a0053006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a000972200b5000a00122200b5006400122200be000a5a00a100960006050000000226a1009a0008fffd000000290000a000982a9110537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b07141170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6015052d2d205350a00099a00097220025000a005a2200250064005aa100960006050000000226a1009a0008fffd0000002a0000a0009828002600121170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b605c052d2d205350a00099a00097a100960006060000000226a1009a0008fffd0000001d0000a00098280043001b0c456e676c69736820776f7264a00099a00097a100960006060000000226a1009a0008fffd000000200000a0009828006700180d70686f6e6574696320776f7264a00099a00097a100960006050000000226a1009a0008fffd000000610000a000982800430072224c6f6e67202d20506f696e74657220746f20456e676c69736820776f726420746f2029940761646420746f20a00099a00097a100960006050000000226a1009a0008fffd000000920000a000982800670072224c6f6e67202d20506f696e74657220746f2070686f6e65746963207472616e736c6129942074696f6e20746f2075736520666f722074686520456e676c69736820776f7264a00099a00097a000ab220040000a0900a000ada000ab220064000a0900a000ada000ab2200400064f700a000ada000ab2200640064f700a000ada00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure DictInsert (EnglishWord, phoneticWord: pString32);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void DictInsert (pString32Ptr EnglishWord,\par \tab \tab pString32Ptr phoneticWord);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph4\tab #EnglishWord\par \tab ph4\tab #phoneticWord\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _DictInsert}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0934\tab Parse}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050778}$0934\tab Parse{\*\bkmkend _Toc497050778}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Parse tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 phonetics}}}{\v\f4\fs20 \par }{\f4\fs20 Generates a sequence of phonemes for a given string.  The string can contain English text consisting of letters, numbers, and abbreviations recognized by the parser, as well as a command string of <<COMMANDS text>> or a phonetic string encoded as <<~phonetics>>.  Refer to Chapter 2 for more information about the phonetics generated and for the syntax of the command string.\par Parse returns the position of the last character in the English string that it processed, counting the characters from position 1.  You can check to see if all of the English string was parsed by checking whether the returned value is equal to the length of the English string.  In the event that characters remain to be parsed, you should increment the start parameter and then call Parse again to obtain the next group of phonetics.\par \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1046{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fillColor}{\sv 268435473}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw465\pich252\picwgoal9300\pichgoal5040\macpict\bliptag-382342071\blipupi72{\*\blipuid e935ec497770732e371a8a5e2486a670}04b000070007010301d81101a0008201000a00070007010301d80a00000000000000003400d9000a00ec006538340088000a009b006538340064000a0089006538340040000a006500653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a000972200d0000a00242200d000640024a100960006050000000226a1009a0008fffd0000002a0000a000982ab010537461636b2061667465722063616c6ca00099a00097a100960006060000000226a1009a0008fffd000000280000a0009804002b04121170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6428052d2d205350a00099a00097220025000a007e2200250064007ea100960006060000000226a1009a0008fffd000000280000a00098280025000f1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6483052d2d205350a00099a00097a100960006050000000226a1009a0008fffd000000330000a0009828003a007317576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd0000001f0000a0009828005500190e456e676c69736820737472696e67a00099a00097a100960006050000000226a1009a0008fffd0000007b0000a00098295a224c6f6e67202d20506f696e74657220746f20456e676c69736820737472696e672074298f166f20636f6e7665727420746f2070686f6e6574696373a00099a00097a100960006060000000226a1009a0008fffd000000210000a0009828007900160f70686f6e6574696320737472696e67a00099a00097a100960006050000000226a1009a0008fffd000000640000a00098295d224c6f6e67202d20506f696e74657220746f20737472696e6720746f20726563656976298e0b652070686f6e6574696373a00099a00097a100960006060000000226a1009a0008fffd0000000a0000a00098280094002e057374617274a00099a00097a100960006050000000226a1009a0008fffd000000b10000a00098294522576f7264202d2043686172616374657220706f736974696f6e20696e20456e676c69299322736820737472696e6720746f20626567696e20636f6e76657273696f6e2c20636f7529970c6e74696e672066726f6d2031a00099a00097a100960006060000000226a1009a0008fffd0000001d0000a000982800e5001b0e6c61737420636861726163746572a00099a00097a100960006050000000226a1009a0008fffd000000a30000a00098295822576f7264202d20506f736974696f6e206f66206c6173742063686172616374657220298d21696e20456e676c69736820737472696e6720746f2062652070726f636573736564a00099a00097a100960006060000000226a1009a0008fffd000000180000a0009828003a001f09776f72647370616365a00099a00097a000ab220052000a0900a000ada000ab220076000a0900a000ada000ab2200520064f700a000ada000ab2200760064f700a000ada00083ff}}{\par \par }{\b\f4\fs20 Pascal:}{\f4\fs20 \tab }{\f6\fs18 function Parse (EnglishString: pString255;\par \tab \tab var phoneticString: pString255; start: integer): integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int Parse (pString255Ptr EnglishString,\par \tab \tab pString255Ptr phoneticString, int start);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab ph4\tab #EnglishString\par \tab ph4\tab #phoneticString\par \tab ph2\tab startPos\par \tab _Parse\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab pl2\tab startPos}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0F34\tab Say}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050779}$0F34\tab Say{\*\bkmkend _Toc497050779}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Say tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 English strings}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speech parameters}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetSayGlobals tool call}}}{\v\f4\fs20 \par }{\f4\fs20 Speaks an English string by first calling the parser to generate phonetics for the string, and then passes the phonetics with the current global speech parameters to the currently active male or female voice in order to generate speech.  You can use the SetSayGlobals tool call to change the global speech values used by Say.\par }\pard \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 phonetics}}}{\v\f4\fs20 \par }{\f4\fs20 The input string can contain English text consisting of letters, numbers, and abbreviations recognized by the parser, as well as a command string of <<COMMANDS text>> or a phonetic string encoded as <<~phonetics>>.  Refer to Chapter 2 for more information about the phonetics generated and for the syntax of the command string.\par }\pard \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1047{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw294\pich144\picwgoal5880\pichgoal2880\macpict\bliptag40663018\blipupi72{\*\blipuid 026c77eade97e43a2f474fc0690da024}0265000700070097012d1101a0008201000a000700070097012d0a000000000000000034002e000a0053006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f0064001222007f000a001222007f00640000a100960006050000000226a1009a0008fffd0000002a0000a000982a5f10537461636b2061667465722063616c6ca00099a00097a100960006060000000226a1009a0008fffd000000280000a0009804002b04121170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b640d052d2d205350a00099a0009722002500640036220025000a003622003700640000a100960006060000000226a1009a0008fffd000000280000a00098280025000f1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b643b052d2d205350a00099a0009722006d006400002200400064000023000022005b0064000023000022005200640000230000a100960006060000000226a1009a0008fffd0000001f0000a0009828004300190e456e676c69736820737472696e67a00099a00097a100960006050000000226a1009a0008fffd0000005b0000a00098295a224c6f6e67202d20506f696e74657220746f20456e676c69736820737472696e672074298f076f20737065616ba00099a00097220088000a5a00a000ab220040000a0900a000ada000ab22004000640000a000ada000ab23f700a000ada00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure Say (EnglishString: pString255);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void Say (pString255Ptr EnglishString);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph4\tab #EnglishString\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _Say}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0D34\tab SetSayGlobals}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050780}$0D34\tab SetSayGlobals{\*\bkmkend _Toc497050780}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SetSayGlobals tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speech parameters}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 gender parameter}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 tone parameter}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speed parameter}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 pitch parameter}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 volume parameter}}}{\v\f4\fs20 \par }{\f4\fs20 Sets the global speech parameters applied during parsing.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1048{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex79\picscaley78\piccropl0\piccropr0\piccropt0\piccropb0\picw429\pich207\picwgoal8580\pichgoal4140\macpict\bliptag1360230542\blipupi72{\*\blipuid 5113788e0447023919276cdb36221fbc}04990007000700d601b41101a0008201000a0007000700d601b40a0000000000000000340076000a0089006538340064000a0077006538340052000a0065006538340040000a005300653834002e000a00410065382200be006400122200be000a00122200be00640000a100960006060000000226a1009a0008fffd000000280000a000980300150d000a2b0fc31170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b640d052d2d205350a00099a000972200250064006c220025000a006c22004000640000a100960006060000000226a1009a0008fffd000000280000a00098280025000f1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6471052d2d205350a00099a0009722007600640000220049006400002300002200640064000023000022005b006400002300002200c7000a5a00a100960006060000000226a1009a0008fffd0000000c0000a0009828003a002b05766f696365a00099a00097a100960006060000000226a1009a0008fffd0000000b0000a000982b021204746f6e65a00099a00097a100960006060000000226a1009a0008fffd0000000b0000a000982a12057069746368a00099a00097a100960006060000000226a1009a0008fffd0000000e0000a000982800700029057370656564a00099a00097a100960006060000000226a1009a0008fffd000000110000a00098280082002706766f6c756d65a00099a00097a100960006050000000226a1009a0008fffd0000009f0000a0009828003a007322576f7264202d2053617920766f69636520746f207573652c20656974686572206164299420756c74206d616c6520283029206f72206164756c742066656d616c6520283129a00099a00097a100960006050000000226a1009a0008fffd0000006d0000a0009828004c007322576f7264202d20546f6e6520666f7220766f6963652c20656974686572206261737329951220283029206f7220747265626c6520283129a00099a00097a100960006050000000226a1009a0008fffd000000640000a0009828005e007322576f7264202d205069746368206f6620766f6963652c2066726f6d203020286c6f7729900d2920746f203920286869676829a00099a00097a100960006050000000226a1009a0008fffd0000006d0000a00098280070007322576f7264202d205370656564206f66207370656563682c2066726f6d20302028736c299a0f6f772920746f203920286661737429a00099a00097a100960006050000000226a1009a0008fffd000000720000a00098280082007322576f7264202d20566f6c756d65206f66207370656563682c2066726f6d2030202873299c106f66742920746f203920286c6f756429a00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804012800ac000b10537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002f0000a00098280013000b11537461636b206265666f72652063616c6ca00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Errors:}{\f4\fs20 \tab $3403  Parameter out of range: invalid value passed to function}{\b\f4\fs20 \par \par \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure SetSayGlobals (voice: Gender; basePitch: Tone;\par \tab \tab pitch, speed, volume: ParmRange);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void SetSayGlobals (Gender voice, Tone basePitch,\par \tab \tab int pitch, int speed, int volume);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph2\tab voice\par \tab ph2\tab tone\par \tab ph2\tab pitch\par \tab ph2\tab speed\par \tab ph2\tab volume\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _SetSayGlobals\page }{\f4\fs14 \par }\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\v\fs24 \page }{\fs24 Male Speech Tool Set}{\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050781}Male Speech Tool Set{\*\bkmkend _Toc497050781}\tcl2}}}{\fs24 \par }\pard\plain \keep\widctlpar\tx1260\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \keep\widctlpar\tx1260\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Male Speech tool set\bxe }}}{\v\f4\fs20 \par }\pard \fi540\keep\widctlpar\adjustright {\f4\fs20 The Male Speech tool takes phonetic strings as input and creates sound with a male voice.\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0132\tab MaleBootInit}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050782}$0132\tab MaleBootInit{\*\bkmkend _Toc497050782}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleBootInit tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Called by the Tool Locator to initialize the tool.  An application should never make this call.\par \par }\pard \keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1049{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure MaleBootInit;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void MaleBootInit (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab _}{\f6\fs18 MaleBootInit}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0232\tab MaleStartUp}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050783}$0232\tab MaleStartUp{\*\bkmkend _Toc497050783}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleStartUp tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Male Speech tool set}}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 male speech}}}{\v\f4\fs20 \par }{\f4\fs20 Initializes the Male Speech tool set.  This call should be made before any other calls to the Male Speech tool set, and should only be made once in a program.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1050{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure MaleStartUp;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void MaleStartUp (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _MaleStartUp}{\f4\fs20 \par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0332\tab MaleShutDown}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050784}$0332\tab MaleShutDown{\*\bkmkend _Toc497050784}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleShutDown tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shutting down tools\:Male Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Shuts down the Male Speech tool set.  This call should be made after all other Male Speech tool calls have been made, and should be made only once in a program.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1051{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure MaleShutDown;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void MaleShutDown (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _MaleShutDown}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0432\tab MaleVersion}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050785}$0432\tab MaleVersion{\*\bkmkend _Toc497050785}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleVersion tool call\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TOOLS folder}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEM folder}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version number}}}{\v\f4\fs20 \par }{\f4\fs20 Returns the version number of the Male Speech tool set currently installed in the SYSTEM/TOOLS folder of the boot disk.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1052{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex77\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw263\pich162\picwgoal5260\pichgoal3240\macpict\bliptag2124045998\blipupi72{\*\blipuid 7e9a5eaeef22d32b67a40fdeb54359d2}026d0007000700a9010e1101a0008201000a0007000700a9010e0a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd0000001b0000a00098280094001c0a76657273696f6e4e756da00099a00097a100960006050000000226a1009a0008fffd0000004c0000a000982b570221576f7264202d2056657273696f6e206e756d626572206f6620746f6f6c20736574a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function MaleVersion: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int MaleVersion (void);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _MaleVersion\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab pl2\tab versionNum\par \par \par \par \par }{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0532\tab MaleReset}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050786}$0532\tab MaleReset{\*\bkmkend _Toc497050786}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleReset tool call\bxe }}}{\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Male Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Restores the Male Speech tool set to its original state.\par \par }\pard \keep\keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1053{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure MaleReset;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void MaleReset (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _MaleReset}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0632\tab MaleStatus}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050787}$0632\tab MaleStatus{\*\bkmkend _Toc497050787}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleStatus tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Indicates whether the Male Speech tool set is currently active.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1054{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich162\picwgoal6960\pichgoal3240\macpict\bliptag1586781238\blipupi72{\*\blipuid 5e945c36abb35500b54bdd940cc4f70b}02880007000700a901631101a0008201000a0007000700a901630a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd000000160000a0009828009400210a616374697665466c6167a00099a00097a100960006050000000226a1009a0008fffd000000760000a000982b520222576f7264202d205a65726f20696620746f6f6c20736574206973206e6f74206163742987176976653b206e6f6e2d7a65726f20696620616374697665a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function MaleStatus: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int MaleStatus (void);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _MaleStatus\par \tab pla\par \tab beq\tab NotActive\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab bne\tab Active}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0932\tab MaleSpeak}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050788}$0932\tab MaleSpeak{\*\bkmkend _Toc497050788}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENSONIQ chip}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 MaleSpeak tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speech\:adult male}}}{\v\f4\fs20 \par }{\f4\fs20 Uses the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20 ' ENSONIQ chip to generate speech from a phonetic string.  The voice used is adult male, and the passed speech parameters of volume, speed, and pitch are applied to the speech as well.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1055{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley78\piccropl0\piccropr0\piccropt0\piccropb0\picw339\pich207\picwgoal6780\pichgoal4140\macpict\bliptag1160993065\blipupi72{\*\blipuid 45335929bb2a370050ae28e0e1c52f48}03fa0007000700d6015a1101a0008201000a0007000700d6015a0a0000000000000000340064000a0089006538340052000a0065006538340040000a005300653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a000972200be006400122200be000a00122200be00640000a100960006060000000226a1009a0008fffd000000280000a0009804002b04ab1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6412052d2d205350a00099a000972200250064006c220025000a006c22003700640000a100960006060000000226a1009a0008fffd000000280000a00098280025000f1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6471052d2d205350a00099a0009722007600640000220049006400002300002200640064000023000022005b006400002300002200c7000a5a00a100960006060000000226a1009a0008fffd0000000b0000a0009828005e002d057069746368a00099a00097a100960006060000000226a1009a0008fffd0000000e0000a0009828004c0029057370656564a00099a00097a100960006060000000226a1009a0008fffd000000110000a0009828003a002706766f6c756d65a00099a00097a100960006050000000226a1009a0008fffd000000640000a000982b4c2422576f7264202d205069746368206f6620766f6963652c2066726f6d203020286c6f7729900d2920746f203920286869676829a00099a00097a100960006050000000226a1009a0008fffd0000006d0000a0009828004c007322576f7264202d205370656564206f66207370656563682c2066726f6d20302028736c299a0f6f772920746f203920286661737429a00099a00097a100960006050000000226a1009a0008fffd000000720000a0009828003a007322576f7264202d20566f6c756d65206f66207370656563682c2066726f6d2030202873299c106f66742920746f203920286c6f756429a00099a00097a100960006060000000226a1009a0008fffd000000210000a0009828007900160f70686f6e6574696320737472696e67a00099a00097a100960006050000000226a1009a0008fffd000000600000a00098295d224c6f6e67202d20506f696e74657220746f2070686f6e6574696320737472696e6720299208746f20737065616ba00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804012800ac000b10537461636b2061667465722063616c6ca00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure MaleSpeak (volume, speed, pitch: ParmRange;\par \tab \tab phoneticString: pString255);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void MaleSpeak (int volume, int speed, int pitch,\par \tab \tab pString255Ptr phoneticString);}{\f4\fs20 \par \par }\pard \qj\keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph2\tab volume\par \tab ph2\tab speed\par \tab ph2\tab pitch\par \tab ph4\tab #phoneticString\par }\pard \qj\keep\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _MaleSpeak\page }{\f4\fs14 \par }\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\v\fs24 \page }{\fs24 Female Speech Tool Set}{\pard\plain \s43\qj\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050789}Female Speech Tool Set{\*\bkmkend _Toc497050789}\tcl2}}}{\fs24 \par }\pard\plain \keep\widctlpar\tx1440\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \keep\widctlpar\tx1440\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Female Speech tool set\bxe }}}{\v\f4\fs20 \par }\pard \fi540\keep\widctlpar\adjustright {\f4\fs20 The Female Speech tool takes phonetic strings as input and creates sound with a female voice.\par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0133\tab FemaleBootInit}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050790}$0133\tab FemaleBootInit{\*\bkmkend _Toc497050790}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleBootInit tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Called by the Tool Locator to initialize the tool.  An application should never make this call.\par \par }\pard \keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1056{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\b\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure FemaleBootInit;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void FemaleBootInit (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab _}{\f6\fs18 FemaleBootInit}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0233\tab FemaleStartUp}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050791}$0233\tab FemaleStartUp{\*\bkmkend _Toc497050791}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleStartUp tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Female Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Initializes the Female Speech tool set.  This call should be made before any other calls to the Female Speech tool set, and should only be made once during a program.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1057{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure FemaleStartUp;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void FemaleStartUp (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _FemaleStartUp}{\f4\fs20 \par }\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0333\tab FemaleShutDown}{\pard\plain \s44\qj\sb480\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050792}$0333\tab FemaleShutDown{\*\bkmkend _Toc497050792}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleShutDown tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 shutting down tools\:Female Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Shuts down the Female Speech tool set.  This call should be made after all other Female Speech tool calls have been made, and should be made only once in a program.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1058{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure FemaleShutDown;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void FemaleShutDown (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _FemaleShutDown}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0433\tab FemaleVersion}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050793}$0433\tab FemaleVersion{\*\bkmkend _Toc497050793}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleVersion tool call\bxe }}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 TOOLS folder}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 SYSTEM folder}}}{\v\f4\fs20 \par }{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 version number}}}{\v\f4\fs20 \par }{\f4\fs20 Returns the version number of the Female Speech tool set currently installed in the SYSTEM/TOOLS folder of the boot disk.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1059{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex77\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw263\pich162\picwgoal5260\pichgoal3240\macpict\bliptag2124045998\blipupi72{\*\blipuid 7e9a5eaeef22d32b67a40fdeb54359d2}026d0007000700a9010e1101a0008201000a0007000700a9010e0a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd0000001b0000a00098280094001c0a76657273696f6e4e756da00099a00097a100960006050000000226a1009a0008fffd0000004c0000a000982b570221576f7264202d2056657273696f6e206e756d626572206f6620746f6f6c20736574a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function FemaleVersion: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int FemaleVersion (void);}{\f4\fs20 \par \par }\pard \qj\keep\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _FemaleVersion\par }\pard \qj\keep\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab pl2\tab versionNum\par \par \par \par \par }{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0533\tab FemaleReset}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050794}$0533\tab FemaleReset{\*\bkmkend _Toc497050794}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleReset tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 initializing tools\:Female Speech tool set}}}{\v\f4\fs20 \par }{\f4\fs20 Restores the Female Speech tool set to its original state.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1060{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex76\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw150\pich147\picwgoal3000\pichgoal2940\macpict\bliptag-606849504\blipupi72{\*\blipuid dbd43620e94e3b823006808594d761db}017e00070007009a009d1101a00082a10096000605000000021aa1009a0008fffd0000002f0000a0009801000a00070007009a009d03001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a00097220073000a002422007300760024220085000a6c00a10096000605000000021aa1009a0008fffd000000290000a000982a5110537461636b2061667465722063616c6ca00099a00097a10096000605000000021aa1009a0008fffd0000002a0000a0009804002b09181170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097220022000a002422002200760024220034000a6c00a10096000605000000021aa1009a0008fffd0000002a0000a0009828002b00141170726576696f757320636f6e74656e7473a00099a00097a10096000605000000021aa1009a0008fffd0000000d0000a000982b6c12052d2d205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure FemaleReset;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void FemaleReset (void);}{\f4\fs20 \par \par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 _FemaleReset}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0633\tab FemaleStatus}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050795}$0633\tab FemaleStatus{\*\bkmkend _Toc497050795}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keep\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleStatus tool call\bxe }}}{\v\f4\fs20 \par }{\f4\fs20 Indicates whether the Female Speech tool set is currently active.\par }\pard \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright {\f4\fs20 \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1061{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley76\piccropl0\piccropr0\piccropt0\piccropb0\picw348\pich162\picwgoal6960\pichgoal3240\macpict\bliptag1586781238\blipupi72{\*\blipuid 5e945c36abb35500b54bdd940cc4f70b}02880007000700a901631101a0008201000a0007000700a901630a0000000000000000340088000a009b00653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a0009722007f000a002422007f00640024a100960006050000000226a1009a0008fffd0000002a0000a000982a5610537461636b2061667465722063616c6ca00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804002b09121170726576696f757320636f6e74656e7473a00099a00097220025000a002422002500640024a100960006050000000226a1009a0008fffd0000002a0000a0009828002500141170726576696f757320636f6e74656e7473a00099a00097a100960006060000000226a1009a0008fffd000000180000a000982b0b1709776f72647370616365a00099a00097a100960006050000000226a1009a0008fffd000000330000a000982b540417576f7264202d20537061636520666f7220726573756c74a00099a00097a100960006060000000226a1009a0008fffd000000160000a0009828009400210a616374697665466c6167a00099a00097a100960006050000000226a1009a0008fffd000000760000a000982b520222576f7264202d205a65726f20696620746f6f6c20736574206973206e6f74206163742987176976653b206e6f6e2d7a65726f20696620616374697665a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a00098280052007704d0205350a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982a5104d0205350a00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 function FemaleStatus: integer;}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal int FemaleStatus (void);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 pha\par \tab _FemaleStatus\par \tab pla\par \tab beq\tab NotActive\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab bne\tab Active}{\f4\fs20 \par }\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\f4\cgrid {\fs20 $0933\tab FemaleSpeak}{\pard\plain \s44\qj\sa240\keepn\widctlpar\brdrt\brdrs\brdrw15 \adjustright \b\v\f4\fs20\cgrid {\tc {\v\fs20 {\*\bkmkstart _Toc497050796}$0933\tab FemaleSpeak{\*\bkmkend _Toc497050796}\tcl3}}}{\fs20 \par }\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 FemaleSpeak tool call\bxe }}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 speech\:adult female}}}{\pard\plain \qj\fi540\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 ENSONIQ chip}}}{\v\f4\fs20 \par }{\f4\fs20 Uses the Apple II}{\scaps\f4\fs18 GS}{\f4\fs20 ' ENSONIQ chip to generate speech from a phonetic string.  The voice used is adult female, and the passed speech parameters of volume, speed, and pitch are applied to the speech as well.\par \par }\pard \keepn\widctlpar\tqr\tx7200\adjustright {{\pict{\*\picprop\shplid1062{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn fLine}{\sv 0}}}\picscalex78\picscaley78\piccropl0\piccropr0\piccropt0\piccropb0\picw339\pich207\picwgoal6780\pichgoal4140\macpict\bliptag1160993065\blipupi72{\*\blipuid 45335929bb2a370050ae28e0e1c52f48}03fa0007000700d6015a1101a0008201000a0007000700d6015a0a0000000000000000340064000a0089006538340052000a0065006538340040000a005300653834002e000a0041006538a100960006050000000226a1009a0008fffd0000002f0000a0009803001504010d000a2b0b1311537461636b206265666f72652063616c6ca00099a000972200be006400122200be000a00122200be00640000a100960006060000000226a1009a0008fffd000000280000a0009804002b04ab1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6412052d2d205350a00099a000972200250064006c220025000a006c22003700640000a100960006060000000226a1009a0008fffd000000280000a00098280025000f1170726576696f757320636f6e74656e7473a00099a00097a100960006050000000226a1009a0008fffd0000000d0000a000982b6471052d2d205350a00099a0009722007600640000220049006400002300002200640064000023000022005b006400002300002200c7000a5a00a100960006060000000226a1009a0008fffd0000000b0000a0009828005e002d057069746368a00099a00097a100960006060000000226a1009a0008fffd0000000e0000a0009828004c0029057370656564a00099a00097a100960006060000000226a1009a0008fffd000000110000a0009828003a002706766f6c756d65a00099a00097a100960006050000000226a1009a0008fffd000000640000a000982b4c2422576f7264202d205069746368206f6620766f6963652c2066726f6d203020286c6f7729900d2920746f203920286869676829a00099a00097a100960006050000000226a1009a0008fffd0000006d0000a0009828004c007322576f7264202d205370656564206f66207370656563682c2066726f6d20302028736c299a0f6f772920746f203920286661737429a00099a00097a100960006050000000226a1009a0008fffd000000720000a0009828003a007322576f7264202d20566f6c756d65206f66207370656563682c2066726f6d2030202873299c106f66742920746f203920286c6f756429a00099a00097a100960006060000000226a1009a0008fffd000000210000a0009828007900160f70686f6e6574696320737472696e67a00099a00097a100960006050000000226a1009a0008fffd000000600000a00098295d224c6f6e67202d20506f696e74657220746f2070686f6e6574696320737472696e6720299208746f20737065616ba00099a00097a100960006050000000226a1009a0008fffd0000002a0000a0009804012800ac000b10537461636b2061667465722063616c6ca00099a00097a00083ff}}{\f4\fs20 \par }\pard \qj\keepn\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\b\f4\fs20 \par Pascal:}{\f4\fs20 \tab }{\f6\fs18 procedure FemaleSpeak (volume, speed, pitch: ParmRange;\par \tab \tab phoneticString: pString255);}{\f4\fs20 \par \par }{\b\f4\fs20 C:}{\f4\fs20 \tab }{\f6\fs18 extern pascal void FemaleSpeak (int volume, int speed,\par \tab \tab int pitch, pString255Ptr phoneticString);}{\f4\fs20 \par \par }{\b\f4\fs20 Assembly:}{\f4\fs20 \tab }{\f6\fs18 ph2\tab volume\par \tab ph2\tab speed\par \tab ph2\tab pitch\par \tab ph4\tab #phoneticString\par }\pard \qj\widctlpar\tx1440\tx2160\tqr\tx7200\adjustright {\f6\fs18 \tab _FemaleSpeak}{\f4\fs20 \par }\pard \qc\widctlpar\adjustright {\f4 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix A \endash  Complete Speak Programs\par }}\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 Appendix A - Complete Speak Program}{\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\v\fs28 {\*\bkmkstart _Toc497050797}Appendix A - Complete Speak Program{\*\bkmkend _Toc497050797}\tcl1}}}{\fs28 \par }\pard\plain \qj\fi540\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\f4\fs20 This appendix contains the complete source code for the Speak program described in Chapter 3.  The complete source code for the program can also be found on the Talking Tools disk.  Please keep in mind that it is easier for us to change the disk than it is for us to change the manual.  As the speech tools mature and the product improves, there may be minor differences between the source code presented here and that which appears on the disk.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Speak In Pascal}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050798}Speak In Pascal{\*\bkmkend _Toc497050798}\tcl2}}}{\fs24 \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 Pascal\:source for Speak}}}{\v\f4\fs20 \par }\pard \widctlpar\adjustright {\f6\fs14 \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Speak                                                        \}\par \{                                                               \}\par \{  A "plain vanilla" program that demonstrates all of the calls \}\par \{  available in the Speech Tool kit.                            \}\par \{                                                               \}\par \{  By Barbara Allred                                            \}\par \{                                                               \}\par \{  Copyright 1991 by Byte Works, Inc.                           \}\par \{  Copyright 1987 - 1991 by First Byte, Inc.                    \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par \{$keep 'Speak'\}\par \par program Speak (input, output);\par \par uses Common, ToolLocator, IntegerMath, SpeechTools;\par \par var\par    answer: string;                      \{user's response to queries\}\par    done: boolean;                       \{true if user wants to exit pgm\}\par    toolRec: toolTable;                  \{table of tools we need to start\}\par \par    voice: Gender;                       \{current global voice setting\}\par    basePitch: Tone;                     \{current global tone setting\}\par    speed,                               \{current global speed setting\}\par    pitch,                               \{current global pitch setting\}\par    volume: ParmRange;                   \{current global volume setting\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  ConvertToPhonetics - Convert English text to phonetic        \}\par \{       representation.                                         \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure ConvertToPhonetics;\par \par var\par    phString: packed array[0..255] of char; \{phonetic string\}\par    sayString: packed array[0..255] of char; \{English text to speak or parse\}\par    size: integer;                       \{length of string\}\par    start: integer;                      \{position in English string to begin\}\par                                         \{ conversion                        \}\par    stop: boolean;                       \{true if user wants to exit\}\par \par begin \{ConvertToPhonetics\}\par stop := false;\par \par \{Outer loop lets user enter next string to convert.\}\par \{Entering null string signals it's time to exit.\}\par repeat\par    writeln;\par    writeln('Enter string to translate to phonetics.  Press RETURN to exit.');\par    readln(sayString);\par    size  := length(sayString);\par    start := 0;\par \par    \{Inner loop is necessary in the event that the \}\par    \{ complete English string wasn't converted.    \}\par    if size > 0 then begin\par       repeat\par          start := start+1;\par          start := Parse(sayString, phString, start);\par          write(phString);\par       until start = size;\par       writeln;\par       end \{if\}\par    else\par       stop := true;\par until stop;\par end; \{ConvertToPhonetics\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  DeleteWord - Removes entries from the current exceptions     \}\par \{       dictionary.                                             \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure DeleteWord;\par \par var\par    stop: boolean;                       \{true if user wants to exit\}\par    word: pString32;                     \{dictionary entry\}\par \par begin \{DeleteWord\}\par stop := false;\par writeln;\par repeat\par    writeln('Press RETURN for the dictionary entry to exit function.');\par    write('Word to delete from dictionary?  ');\par    readln(word);\par    if length(word) = 0 then\par       stop := true\par    else\par       DictDelete(word);\par    writeln;\par until stop;\par writeln;\par end; \{DeleteWord\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  DisplayDict - Displays current exceptions dictionary, one    \}\par \{       entry at a time.                                        \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure DisplayDict;\par \par var\par    answer: string;                      \{user's response to queries\}\par    flag: integer;                       \{dict. initialization flag\}\par    noErr: boolean;                      \{true if no error has occurred\}\par    stop: boolean;                       \{true if user wants to exit\}\par    word1, word2: pString32;             \{dictionary entry\}\par    wordPtr: pString32Ptr;               \{pointer returned by DictDump function\}\par \par begin \{DisplayDict\}\par writeln;\par \par \{Before displaying the dictionary, let user initialize it.\}\par repeat\par    noErr := true;\par    writeln('Before displaying the dictionary, lets initialize it.');\par    writeln('Enter 0 to reset dictionary to beginning.');\par    writeln('Enter 1 to delete current dictionary.');\par    writeln('Enter 2 to NOT initialize dictionary.');\par    writeln;\par    readln(flag);\par    if (flag < 0) or (flag > 2) then begin\par        noErr := false;\par        writeln;\par        writeln('Please enter either 0, 1, or 2.');\par        writeln;\par        end; \{if\}\par until noErr;\par \par if flag <> 2 then\par    DictInit(flag);\par \par \{While there are still entries in the dictionary, \}\par \{ get and then display the next entry.            \}\par stop := false;\par repeat\par    wordPtr := DictDump(word1, word2);\par    if length(word1) = 0 then\par       stop := true\par    else begin\par       writeln('Next entry:   ', word1, '   ', word2, '   Continue? (Y or N)');\par       readln(answer);\par       if (answer[1] = 'N') or (answer[1] = 'n') then\par          stop := true;\par       end; \{else\}\par until stop;\par writeln;\par end; \{DisplayDict\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Init - Load the tools we need and initialize our data        \}\par \{       structures.                                             \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure Init;\par \par var\par    errNum: integer;                     \{error number to report to user\}\par    errString: packed array[1..5]   of char; \{error number as a hex string\}\par \par begin \{Init\}\par errString[1] := '$';                    \{return error codes as hex numbers\}\par with toolRec do begin\par    numToolsRequired := 4;\par    with tool[1] do begin\par       toolNumber := maleToolNum;\par       minVersion := 0;\par       end; \{with\}\par    with tool[2] do begin\par       toolNumber := femaleToolNum;\par       minVersion := 0;\par       end; \{with\}\par    with tool[3] do begin\par       toolNumber := parserToolNum;\par       minVersion := 0;\par       end; \{with\}\par }\pard \keepn\widctlpar\adjustright {\f6\fs14    with tool[4] do begin\par       toolNumber := speechToolNum;\par }\pard \widctlpar\adjustright {\f6\fs14       minVersion := 0;\par       end; \{with\}\par    end; \{with\}\par LoadTools(toolRec);                     \{load the tools\}\par errNum := toolError;\par if errNum <> 0 then begin               \{report any error returned\}\par    Int2Hex(errNum, pointer(@errString[2]), 4);\par    writeln('Unable to load tools: Error = ', errString);\par    done := true;\par    end \{if\}\par else begin                              \{start the tools\}\par    ParseStartUp(userID);\par    MaleStartUp;\par    FemaleStartUp;\par    SpeechStartUp;\par    done := false;                       \{initialize globals\}\par    voice := male;                       \{these are the default settings for\}\par    basePitch := bass;                   \{the global speech parameters\}\par    speed := 5;\par    volume := 5;\par    pitch := 5;\par    end; \{else\}\par end; \{Init\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  InsertWord - Insert new entries into exceptions dictionary.  \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure InsertWord;\par \par var\par    stop: boolean;                       \{true if user wants to exit\}\par    word1, word2: pString32;             \{dictionary entry\}\par \par begin \{InsertWord\}\par stop := false;\par writeln;\par repeat\par    writeln('Press RETURN for the dictionary entries to exit function.');\par    write('Enter English word to add to dictionary:  ');\par    readln(word1);\par    write('Enter phonetic representation of word to add to dictionary:  ');\par    readln(word2);\par    if (length(word1) = 0) or (length(word2) = 0) then\par       stop := true\par    else\par       DictInsert(word1, word2);\par    writeln;\par until stop;\par writeln;\par end; \{InsertWord\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  LoadDict - Load dictionary file from disk.                   \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure LoadDict;\par \par label 99;\par \par var\par    ch: char;                            \{character from the file\}\par    errNum: integer;                     \{error number to report to user\}\par    errString: packed array[1..5]   of char; \{error number as a hex string\}\par    f: text;                             \{file variable\}\par    i: integer;                          \{loop/index variable\}\par    pathname: string[255];               \{name of the file\}\par    word1, word2: pString32;             \{dictionary entry\}\par \par begin \{LoadDict\}\par \{Get pathname of dictionary to open.\}\par write('Enter pathname of dictionary to open:  ');\par readln(pathname);\par if length(pathname) = 0 then\par    goto 99;\par \par \{Open the file for reading.\}\par reset(f, pathname);\par errNum := toolError;\par if errNum <> 0 then begin               \{report any error returned\}\par    Int2Hex(errNum, pointer(@errString[2]), 4);\par    writeln('Unable to open file:  Error = ', errString);\par    goto 99;\par    end; \{if\}\par \par \{Build the dictionary from the file.\}\par DictInit(1);                            \{clear current dict from memory\}\par while not (eof(f)) do begin             \{Loop:\}\par    if eoln(f) then\par       readln(f)\par    else begin\par       read(f, ch);                      \{read English word\}\par       word1[0] := ch;\par       for i := 1 to ord(ch) do\par          read(f, word1[i]);\par       read(f, ch);                      \{read phonetic word\}\par       word2[0] := ch;\par       for i := 1 to ord(ch) do\par          read(f, word2[i]);\par       DictInsert(word1, word2);         \{insert entry into dict\}\par       end; \{else\}\par    end; \{while\}\par close(f);\par DictInit(0);                            \{reset dict to top\}\par \par 99:\par end; \{LoadDict\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  SetSpeechGlobals - Set global speech parameters.             \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure SetSpeechGlobals;\par \par \par    function GetValue (min,max: integer): integer;\par \par    \{ Get a value, making sure it is in the given range          \}\par    \{                                                            \}\par    \{ Parameters:                                                \}\par    \{    min - lowest allowed value                              \}\par    \{    max - highest allowed value                             \}\par    \{                                                            \}\par    \{ Returns: Value read                                        \}\par \par    var\par       value: integer;                   \{value read\}\par \par    begin \{GetValue\}\par    repeat\par       readln(value);\par       if (value < min) or (value > max) then begin\par          writeln('Please enter a value from ', min:1, ' to ', max:1, '.');\par          writeln;\par          write('  Value: ');\par          end; \{if\}\par    until (value >= min) and (value <= max);\par    GetValue := value;\par    end; \{GetValue\}\par \par \par begin \{SetSpeechGlobals\}\par write('Voice = ');                      \{Read new global voice setting\}\par if voice = male then\par    writeln('male ')\par else\par    writeln('female ');\par writeln('Enter 0 to change voice to male, 1 to change voice to female.');\par if GetValue(0,1) = 0 then\par    voice := male\par else\par    voice := female;\par writeln;                                \{Read new global tone setting\}\par write('Tone = ');\par if basePitch = bass then\par    writeln('bass ')\par else\par    writeln('treble ');\par writeln('Enter 0 to change tone to bass, 1 to change tone to treble.');\par if GetValue(0,1) = 0 then\par    basePitch := bass\par else\par    basePitch := treble;\par writeln;                                \{Read new global volume setting\}\par write('Volume = ', volume:1, '  ');\par volume := GetValue(0,9);\par writeln;                                \{Read new global speed setting\}\par write('Speed = ', speed:1, '  ');\par speed := GetValue(0,9);\par writeln;                                \{Read new global pitch setting\}\par write('Pitch = ', pitch:1, '  ');\par pitch := GetValue(0,9);\par                                         \{set the globals\}\par SetSayGlobals(voice, basePitch, pitch, speed, volume);\par writeln;\par end; \{SetSpeechGlobals\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  ShutDown - Shut down the tools we started; do any necessary  \}\par \{       clean-up before exiting.                                \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure ShutDown;\par \par begin \{ShutDown\}\par FemaleShutDown;                         \{shut down speech tools\}\par MaleShutDown;\par ParseShutDown;\par SpeechShutDown;\par end; \{ShutDown\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  SpeakPhonetics - Speak as many non-empty lines of phonetic   \}\par \{       text as the user wants.                                 \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure SpeakPhonetics;\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 var\par }\pard \widctlpar\adjustright {\f6\fs14    phString: packed array[0..255] of char; \{phonetic string\}\par    stop: boolean;                       \{true if user wants to exit\}\par \par begin \{SpeakPhonetics\}\par stop := false;\par repeat\par    writeln;\par    writeln('Enter phonetic string to speak.  Press RETURN to exit.');\par    readln(phString);\par    if length(phString) = 0 then\par       stop := true\par    else begin\par       if voice = male then\par          MaleSpeak(volume, speed, pitch, phString)\par       else\par          FemaleSpeak(volume, speed, pitch, phString);\par       end; \{else\}\par until stop;\par writeln;\par end; \{SpeakPhonetics\}\par \par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  SpeakText - Speak as many non-empty lines of English text as \}\par \{       the user wants.                                         \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure SpeakText;\par \par var\par    sayString: packed array[0..255] of char; \{English text to speak or parse\}\par    stop: boolean;                       \{true if user wants to exit\}\par \par begin \{SpeakText\}\par stop := false;\par repeat\par    writeln;\par    writeln('Enter string to speak.  Press RETURN to exit.');\par    readln(sayString);\par    if length(sayString) = 0 then\par       stop := true\par    else\par       Say(sayString);\par until stop;\par writeln;\par end; \{SpeakText\}\par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  WriteDict - Write dictionary to disk file.                   \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par procedure WriteDict;\par \par label 99;\par \par var\par    errNum: integer;                     \{error number to report to user\}\par    errString: packed array[1..5]   of char; \{error number as a hex string\}\par    f: text;                             \{file variable\}\par    i: integer;                          \{loop/index variable\}\par    pathname: string[255];               \{name of the file\}\par    stop: boolean;                       \{true if user wants to exit\}\par    tmp: pString32Ptr;                   \{pointer returned by DictDump\}\par    word1, word2: pString32;             \{dictionary entry\}\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 begin\par \{Get pathname for dictionary file.\}\par }\pard \widctlpar\adjustright {\f6\fs14 write('Enter pathname for dictionary file:  ');\par readln(pathname);\par if length(pathname) = 0 then\par    goto 99;\par \par \{Open the file for writing.\}\par rewrite(f, pathname);\par errNum := toolError;\par if errNum <> 0 then begin               \{report any error returned\}\par    Int2Hex(errNum, pointer(@errString[2]), 4);\par    writeln('Unable to open file:  Error = ', errString);\par    goto 99;\par    end; \{if\}\par \par \{Write the dictionary to the file.\}\par DictInit(0);                            \{set dictionary to top\}\par stop := false;\par repeat                                  \{Loop:\}\par    tmp := DictDump(word1, word2);       \{get next dict entry\}\par    if length(word1) = 0 then\par       stop := true\par    else begin\par       for i := 0 to length(word1) do    \{write English word\}\par          write(f, word1[i]);\par       for i := 0 to length(word2) do    \{write phonetic word\}\par          write(f, word2[i]);\par       end; \{else\}\par until stop;\par close(f);\par DictInit(0);                            \{reset dict to top\}\par \par 99:\par end; \{WriteDict\}\par \par \{---------------------------------------------------------------\}\par \{                                                               \}\par \{  Main program - Display "main menu" and call appropriate      \}\par \{       function until user selects Quit.                       \}\par \{                                                               \}\par \{---------------------------------------------------------------\}\par \par begin\par \{Splash screen.\}\par writeln;\par writeln('Speak - A demonstration of the Talking Tools');\par writeln;\par writeln('Please wait while we load the tools.');\par writeln;\par \par \{Initialize the program.\}\par Init;\par \par \{Main loop: bring up menu; get user's selection; handle selection.\}\par while not done do begin\par    writeln('Enter desired function:  S to speak English string');\par    writeln('                         P to speak phonetic string');\par    writeln('                         C to convert to phonetics');\par    writeln('                         G to set global speech parameters');\par    writeln('                         A to activate dictionary');\par    writeln('                         T to deactivate dictionary');\par    writeln('                         D to display dictionary');\par    writeln('                         I to insert word into dictionary');\par    writeln('                         R to remove word from dictionary');\par    writeln('                         L to load dictionary from disk file');\par    writeln('                         W to write dictionary to disk file');\par    writeln('                         Q to quit program');\par    write('                         ');\par    readln(answer);\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14    case answer[1] of\par }\pard \widctlpar\adjustright {\f6\fs14       'S', 's': SpeakText;\par       'P', 'p': SpeakPhonetics;\par       'C', 'c': ConvertToPhonetics;\par       'G', 'g': SetSpeechGlobals;\par       'A', 'a': DictActivate(1);\par       'T', 't': DictActivate(0);\par       'D', 'd': DisplayDict;\par       'I', 'i': InsertWord;\par       'R', 'r': DeleteWord;\par       'L', 'l': LoadDict;\par       'W', 'w': WriteDict;\par       'Q', 'q': done := true;\par       otherwise: begin\par                  writeln('Please enter one of S, P, C, G, A, T, D, I, R, L, W, or Q...');\par                  writeln;\par                  end;\par    end; \{case\}\par end; \{while\}\par \par \{Shut down the program.\}\par ShutDown;\par end.\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Speak In C}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050799}Speak In C{\*\bkmkend _Toc497050799}\tcl2}}}{\fs24 \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 C\:source for Speak}}}{\v\f4\fs20 \par }\pard \widctlpar\adjustright {\f6\fs14 /****************************************************************\par *\par *  Speak - A "plain vanilla" program that demonstrates all of the\par *       calls available in the Speech Tool kit.\par *\par *  by Barbara Allred\par *\par *  Copyright 1991 by Byte Works, Inc.\par *  Copyright 1987 - 1991 by First Byte, Inc.\par *\par ****************************************************************/\par \par #pragma keep "speak"\par \par #include <types.h>\par #include <stdio.h>\par #include <string.h>\par #include <locator.h>\par #include <errno.h>\par #include <orca.h>\par #include <speech.h>\par \par #pragma lint -1\par \par int done;                               /* true if user wants to exit pgm */\par \par int speed;                              /* current global speed setting */\par int pitch;                              /* current global pitch setting */\par int volume;                             /* current global volume setting */\par Gender voice;                           /* current global voice setting */\par Tone basePitch;                         /* current global tone setting */\par \par ToolTable toolRec = \{                   /* table of tools we need to start*/\par    4,                                   /*   # tools to load */\par    \{                                    /*   toolset #, min. version req. */\par       \{maleToolNum,0\},\par       \{femaleToolNum,0\},\par       \{parserToolNum,0\},\par       \{speechToolNum,1\}\par    \}\par \};\par \par /****************************************************************\par *\par *  ConvertToPhonetics - Convert English text to phonetic representation.\par *\par ****************************************************************/\par \par void ConvertToPhonetics (void)\par \par \{\par int start;                              /* position in English string to */\par                                         /* begin conversion              */\par int stop;                               /* true if user wants to exit */\par int size;                               /* length of string */\par pString255Ptr strPtr;                   /* pointer to Pascal-style string */\par pString255 sayString;                   /* English text to speak or parse */\par pString255 phString;                    /* phonetic string */\par \par stop  = false;\par \par /* Outer loop lets user enter next string to convert. */\par /* Entering null string signals it's time to exit. */\par do \{\par    printf("\\nEnter string to translate to phonetics.  Press RETURN to exit.\\n");\par    fgets(sayString, 256, stdin);\par    size = strlen(sayString);\par    sayString[size-1] = '\\0';            /* replace '\\n' with '\\0' */\par    strPtr = c2pstr(sayString);\par    start  = 0;\par \par    /* Inner loop is necessary in the event that the */\par    /* complete English string wasn't converted. */\par    if (strlen(sayString) != 0) \{\par       do \{\par          ++start;\par          start = Parse(strPtr, phString, start);\par          printf("%p\\n", phString);\par          \}\par       while (start < size-1);\par       \}\par    else\par       stop = true;\par \par    \}\par while (!stop);\par \} /* ConvertToPhonetics */\par \par /****************************************************************\par *\par *  DeleteWord - Removes entries from the current exceptions dictionary.\par *\par ****************************************************************/\par \par void DeleteWord (void)\par \par \{\par int size;                               /* length of string */\par int stop;                               /* true if user wants to exit */\par pString32 word;                         /* dictionary entry */\par \par \par stop = false;\par printf("\\n");\par do \{\par    printf("Press RETURN for the dictionary entry to exit function.\\n");\par    printf("Word to delete from dictionary?  ");\par    fgets(word, 33, stdin);\par    size = strlen(word);\par    word[size-1] = '\\0';                 /* replace '\\n' with '\\0' */\par    if (strlen(word) == 0)\par       stop = true;\par    else\par       DictDelete(c2pstr(word));\par    printf("\\n");\par    \}\par while (!stop);\par printf("\\n");\par \} /* DeleteWord */\par \par /****************************************************************\par *\par *  DisplayDict - Displays current exceptions dictionary, one\par *       entry at a time.\par *\par ****************************************************************/\par \par void DisplayDict (void)\par \par \{\par int flag;                               /* dict. initialization flag */\par int anErr;                              /* true if error has occurred */\par int stop;                               /* true if user wants to exit */\par char answer;                            /* user's response to queries */\par pString32Ptr wordPtr;                   /* pointer to phonetic word */\par pString32 word1, word2;                 /* dictionary entry */\par \par \par /* Before displaying the dictionary, let user initialize it. */\par anErr = false;\par do \{\par    printf("\\nBefore displaying the dictionary, lets initialize it.\\n");\par    printf("Enter 0 to reset dictionary to beginning.\\n");\par    printf("Enter 1 to delete current dictionary.\\n");\par    printf("Enter 2 to NOT initialize dictionary.\\n\\n");\par    scanf(" %d%*[^\\n]%*c", &flag);\par    if ((flag < 0) || (flag > 2)) \{\par       anErr = true;\par       printf("\\n");\par       printf("Please enter either 0, 1, or 2.\\n\\n");\par       \}\par    \}\par while (anErr);\par if (flag != 2)\par    DictInit(flag);\par \par /* While there are still entries in the dictionary, */\par /* get and then display the next entry. */\par stop = false;\par do \{\par    wordPtr = DictDump(word1, word2);\par    if (strlen(word1) == 0)\par       stop = true;\par    else \{\par       printf("Next entry:  %p    %p   Continue? (Y or N)\\n", word1, word2);\par       scanf(" %c%*[^\\n]%*c", &answer);\par       if ((answer == 'N') || (answer == 'n'))\par          stop = true;\par       \}\par    \}\par while (!stop);\par printf("\\n");\par \} /* DisplayDict */\par \par /****************************************************************\par *\par *  Init - Load the tools we need and initialize our data structures.\par *\par ****************************************************************/\par \par void Init (void)\par \par \{\par int errNum;                             /* error number to report to user */\par \par LoadTools(&toolRec);                    /* load the tools */\par errNum = toolerror();\par if (errNum) \{                           /* report any error returned */\par    printf("Unable to load tools:  Error = %X\\n", errNum);\par    done = true;\par    \}\par else \{                                  /* start the speech tools */\par    ParseStartUp(userid());\par    MaleStartUp();\par    FemaleStartUp();\par    SpeechStartUp();\par \par    done = false;                        /* initialize globals */\par    voice = Male;                        /* these are the default settings for */\par    basePitch = Bass;                    /*   the global speech parameters */\par    speed = 5;\par    volume = 5;\par    pitch = 5;\par    \}\par \} /* Init */\par \par /****************************************************************\par *\par *  InsertWord - Insert new entries into exceptions dictionary.\par *\par ****************************************************************/\par \par void InsertWord (void)\par \par \{\par pString32Ptr wPtr;                      /* temp; for conversions */\par int i;                                  /* index/loop variable */\par int size;                               /* length of string */\par int stop;                               /* true if user wants to exit */\par pString32 word1, word2;                 /* dictionary entry */\par \par stop = false;\par do \{\par    printf("\\nPress RETURN for the dictionary entries to exit function.\\n");\par \par    printf("Enter English word to add to dictionary:  ");\par    fgets(word1, 33, stdin);\par    size = strlen(word1);\par    word1[size-1] = '\\0';                /* replace '\\n' with '\\0' */\par    wPtr = c2pstr(word1);\par    for (i = 0; i <= size; i++)\par       word1[i] = wPtr[i];\par \par    printf("\\nEnter phonetic representation of word to add to dictionary:  ");\par    fgets(word2, 33, stdin);\par    size = strlen(word2);\par    word2[size-1] = '\\0';\par    wPtr = c2pstr(word2);\par    for (i = 0; i <= size; i++)\par       word2[i] = wPtr[i];\par \par    if ((strlen(word1) == 0) || (strlen(word2) == 0))\par       stop = true;\par    else\par       DictInsert(word1, word2);\par    printf("\\n");\par    \}\par while (!stop);\par printf("\\n");\par \} /* InsertWord */\par \par /****************************************************************\par *\par *  LoadDict - Load dictionary file from disk.\par *\par ****************************************************************/\par \par void LoadDict (void)\par \par \{\par FILE *f;                                /* file variable */\par char pathname[255];                     /* file name */\par int i;                                  /* loop/index variable */\par int size;                               /* length of string */\par char ch;                                /* char read from file */\par pString32 word1, word2;                 /* dictionary entry */\par \par /* Get pathname of dictionary to open. */\par printf("Enter pathname of dictionary to open:  ");\par gets(pathname);\par \par /* Open the file for reading. */\par errno = 0;\par f = fopen(pathname, "r");\par if (errno) \{                            /* report any error returned */\par    printf("%s: %i\\n", strerror(errno), errno);\par    return;\par    \}\par \par /* Build the dictionary from the file. */\par DictInit(1);                            /* clear current dict from memory */\par fscanf(f, "%c", &size);                 /* initial read before loop */\par while (! (feof(f))) \{                   /* Loop: */\par    word1[0] = size;                     /*   read English word from file */\par    for (i = 1; i <= size; i++) \{\par       fscanf(f, "%c", &ch);\par       word1[i] = ch;\par       \}\par    fscanf(f, "%c", &size);              /*   read phonetic word from file */\par    word2[0] = size;\par    for (i = 1; i <= size; i++) \{\par       fscanf(f, "%c", &ch);\par       word2[i] = ch;\par       \}\par    DictInsert(word1, word2);            /*   insert entry into dict */\par    fscanf(f, "%c", &size);\par    \}\par fclose(f);\par DictInit(0);                            /* reset dict to top */\par \} /* LoadDict */\par \par /****************************************************************\par *\par *  GetValue - Get a value, making sure it is in the given range\par *\par *  Inputs:\par *       min - lowest allowed value\par *       max - highest allowed value\par *\par *  Returns: Value read\par *\par ****************************************************************/\par \par int GetValue (int min, int max)\par \par \{\par int value;                              /* value read */\par \par do \{\par    scanf(" %d%*[^\\n]%*c", &value);\par    if ((value < min) || (value > max))\par       printf("Please enter a value from %d to %d.\\n\\n  Value: ", min, max);\par    \}\par while ((value < min) || (value > max));\par return value;\par \} /* GetValue */\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 /****************************************************************\par *\par }\pard \widctlpar\adjustright {\f6\fs14 *  SetSpeechGlobals - Set global speech parameters.\par *\par ****************************************************************/\par \par void SetSpeechGlobals (void)\par \par \{\par printf("Voice = ");                     /* Read new global voice setting */\par if (voice == Male)\par    printf("male\\n");\par else\par    printf("female\\n");\par printf("Enter 0 to change voice to male, 1 to change voice to female.\\n");\par if (GetValue(0,1) == 0)\par    voice = Male;\par else\par    voice = Female;\par printf("\\nTone = ");                    /* Read new global tone setting */\par if (basePitch == Bass)\par    printf("bass\\n");\par else\par    printf("treble\\n");\par printf("Enter 0 to change tone to bass, 1 to change tone to treble.");\par if (GetValue(0,1) == 0)\par    basePitch = Bass;\par else\par    basePitch = Treble;\par printf("\\nVolume = %d  ", volume);      /* Read new global volume setting */\par volume = GetValue(0,9);\par printf("\\nSpeed = %d  ", speed);        /* Read new global speed setting */\par speed = GetValue(0,9);\par printf("\\nPitch = %d  ", pitch);        /* Read new global pitch setting */\par pitch = GetValue(0,9);\par                                         /* set the globals */\par SetSayGlobals(voice, basePitch, pitch, speed, volume);\par putchar('\\n');\par \} /* SetSpeechGlobals */\par \par /****************************************************************\par *\par *  ShutDown - Shut down the tools we started; do any necessary\par *       clean-up before exiting.\par *\par ****************************************************************/\par \par void ShutDown (void)\par \par \{\par MaleShutDown();\par FemaleShutDown();\par ParseShutDown();\par SpeechShutDown();\par \} /* ShutDown */\par \par /****************************************************************\par *\par *  SpeakPhonetics - Speak as many non-empty lines of phonetic\par *       text as the user wants.\par *\par ****************************************************************/\par \par void SpeakPhonetics (void)\par \par \{\par int size;                               /* length of string */\par int stop;                               /* true if user wants to exit */\par pString255 phString;                    /* phonetic string */\par \par stop = false;\par }\pard \keepn\widctlpar\adjustright {\f6\fs14 do \{\par }\pard \widctlpar\adjustright {\f6\fs14    printf("\\nEnter phonetic string to speak.  Press RETURN to exit.\\n");\par    fgets(phString, 256, stdin);\par    size = strlen(phString);\par    phString[size-1] = '\\0';\par    if (strlen(phString) == 0)\par       stop = true;\par    else \{\par       if (voice == Male)\par          MaleSpeak(volume, speed, pitch, c2pstr(phString));\par       else\par          FemaleSpeak(volume, speed, pitch, c2pstr(phString));\par       \}\par    \}\par while (!stop);\par printf("\\n");\par \} /* SpeakPhonetics */\par \par /****************************************************************\par *\par *  SpeakText - Speak as many non-empty lines of English text as\par *       the user wants.\par *\par ****************************************************************/\par \par void SpeakText (void)\par \par \{\par int size;                               /* length of string */\par int stop;                               /* true if user wants to exit */\par pString255 sayString;                   /* English text to speak or parse */\par \par stop = false;\par do \{\par    printf("\\nEnter string to speak.  Press RETURN to exit.\\n");\par    fgets(sayString, 256, stdin);\par    size = strlen(sayString);\par    sayString[size-1] = '\\0';\par    if (sayString[0] == '\\0')\par       stop = true;\par    else\par       Say(c2pstr(sayString));\par    \}\par while (!stop);\par printf("\\n");\par \} /* SpeakText */\par \par /****************************************************************\par *\par *  WriteDict - Write dictionary to disk file.\par *\par ****************************************************************/\par \par void WriteDict (void)\par \par \{\par FILE *f;                                /* file variable */\par char pathname[255];                     /* file name */\par int i;                                  /* loop/index variable */\par int stop;                               /* true if user wants to exit */\par pString32Ptr tmp;                       /* returned by DictDump */\par pString32 word1, word2;                 /* dictionary entry */\par \par /* Get pathname for dictionary file. */\par printf("Enter pathname for dictionary file:  ");\par gets(pathname);\par \par /* Open the file for writing. */\par f = fopen(pathname, "w");\par if (errno) \{                            /* report any error returned */\par    printf("%s %i\\n", strerror(errno), errno);\par    return;\par    \}\par \par /* Write the dictionary to the file. */\par DictInit(0);                            /* set dictionary to top */\par stop = false;\par do \{                                    /* Loop: */\par    tmp = DictDump(word1, word2);        /*   get next dict entry */\par    if (tmp == NULL)\par       stop = true;\par    else \{\par       for (i = 0; i < strlen(word1); i++)\par          fprintf(f, "%c", word1[i]);\par       for (i = 0; i < strlen(word2); i++)\par          fprintf(f, "%c", word2[i]);\par       \}\par    \}\par while (!stop);\par fclose(f);\par DictInit(0);                            /* reset dict to top */\par \} /* WriteDict */\par \par /****************************************************************\par *\par *  Main program - Display "main menu" and call appropriate\par *       function until user selects Quit.\par *\par ****************************************************************/\par \par void main (void)\par \par \{\par char answer;                            /* user's response to queries */\par \par printf("\\nSpeak - A demonstration of the Speech Toolkit.\\n\\n");\par printf("Please wait while we load the tools.\\n");\par \par Init();\par while (!done) \{\par    printf("Enter desired function:  S to speak English string\\n");\par    printf("                         P to speak phonetic string\\n");\par    printf("                         C to convert to phonetics\\n");\par    printf("                         G to set global speech parameters\\n");\par    printf("                         A to activate dictionary\\n");\par    printf("                         T to deactivate dictionary\\n");\par    printf("                         D to display dictionary\\n");\par    printf("                         I to insert word into dictionary\\n");\par    printf("                         R to remove word from dictionary\\n");\par    printf("                         L to load dictionary from disk\\n");\par    printf("                         W to write dictionary to disk\\n");\par    printf("                         Q to quit program\\n\\n");\par    scanf(" %c%*[^\\n]%*c", &answer);\par \par    switch (answer) \{\par       case 'S': case 's':   SpeakText();\par                             break;\par       case 'P': case 'p':   SpeakPhonetics();\par                             break;\par       case 'C': case 'c':   ConvertToPhonetics();\par                             break;\par       case 'G': case 'g':   SetSpeechGlobals();\par                             break;\par       case 'A': case 'a':   DictActivate(1);\par                             break;\par       case 'T': case 't':   DictActivate(0);\par                             break;\par       case 'D': case 'd':   DisplayDict();\par                             break;\par       case 'I': case 'i':   InsertWord();\par                             break;\par       case 'R': case 'r':   DeleteWord();\par                             break;\par }\pard \keepn\widctlpar\adjustright {\f6\fs14       case 'L': case 'l':   LoadDict();\par }\pard \widctlpar\adjustright {\f6\fs14                             break;\par       case 'W': case 'w':   WriteDict();\par                             break;\par       case 'Q': case 'q':   done = true;\par                             break;\par       default:  printf("Please enter one of S, P, C, G, A, T, D, I, R, L, W, or Q...\\n\\n");\par       \}\par    \} /* while */\par ShutDown();\par \}\par }\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\f4\fs28\cgrid {\fs24 Speak In Assembly}{\pard\plain \s43\qj\sb560\sa280\keepn\widctlpar\brdrt\brdrs\brdrw30 \adjustright \b\v\f4\cgrid {\tc {\v\fs24 {\*\bkmkstart _Toc497050800}Speak In Assembly{\*\bkmkend _Toc497050800}\tcl2}}}{\fs24 \par }\pard\plain \qj\keepn\widctlpar\tqr\tx7200\adjustright \f12\cgrid {\pard\plain \qj\keepn\widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 assembly language\:source for Speak}}}{\v\f4\fs20 \par }\pard \widctlpar\adjustright {\f6\fs14          keep  speak\par          mcopy speak.macros\par ****************************************************************\par *\par *  Speak - A "plain vanilla" demonstration the Talking Tools\par *        Speech Tool kit.\par *\par *  by Barbara Allred\par *\par *  Copyright 1991 by Byte Works, Inc.\par *  Copyright 1987 - 1991 by First Byte, Inc.\par *\par ****************************************************************\par *\par Speak    start\par          using Globals\par \par          phk                            ensure code, data in same bank\par          plb\par          sta   myID                     get userID passed by Loader\par \par          jsr   Init                     initialize program\par          bcs   Rtl\par          jsr   Main                     if no error, execute the program\par Rtl      jsr   ShutDown\par          lda   #0\par          rtl\par          end\par \par ************************************************\par *\par *  Globals - Speak's global data area.\par *\par ************************************************\par *\par Globals  data\par ;\par ; Constants\par ;\par maleVoice      gequ    0                speech parameters that are enumerations\par femaleVoice    gequ    1\par bassTone       gequ    0\par trebleTone     gequ    1\par \par fileNotFoundErr gequ   $0046            GS/OS file-not-found error code\par handle         gequ    0                "generic" handle\par ptr            gequ    4                "generic" pointer\par ;\par ; Global variables\par ;\par ; ORCA/M strings:  2 length bytes before chars.\par ;\par tmp            ds  4                    4-byte temporary\par count          ds  2                    2-byte temporary\par \par                dc  i1'255'              will be using ORCA/M's getstring macro\par sayString      dc  i1'255'              English text to speak or parse\par                ds  255\par                dc  i1'255'              will be using ORCA/M's getstring macro\par phString       dc  i1'255'              phonetic string\par                ds  255\par                dc  i1'1'                will be using ORCA/M's gets function\par answer         dc  i1'1'                user's response to queries\par                ds  1\par                dc  i1'32'\par word1          dc  i1'32'               strings to use with dictionary\par                ds  32\par                dc  i1'32'\par word2          dc  i1'32'\par                ds  32\par ;\par ; Other general variables\par ;\par myID           ds  2                    program's user ID\par errNum         ds  2                    error number to report to user\par done           dc  i2'0'                true if user wants to exit program\par ;\par ; Speech Tool kit variables\par ;\par voice          dc  i2'maleVoice'        default voice = male\par basePitch      dc  i2'bassTone'         default tone = bass\par speed          dc  i2'5'                default speed = 5\par pitch          dc  i2'5'                default pitch = 5\par volume         dc  i2'5'                default volume = 5\par ;\par ;  Start/stop tools data structures\par ;\par toolTable      anop                     tool table to pass to LoadTools function\par ttNumTools     dc  i2'4'                # tools to be loaded\par tsArray        anop                     toolset #, min. version required\par                dc  i2'50,0'               male voice\par                dc  i2'51,0'               female voice\par                dc  i2'52,0'               parser\par                dc  i2'53,0'               GS/OS interface\par ;\par ; Error Messages\par ;\par msg0           dc  i1'13',c'Error = $'\par hexValue       ds  4\par toolErr        dw  'Unable to load Speech Tools             '\par openErr        dw  'Unable to open file                     '\par memErr         dw  'Unable to allocate memory for buffer    '\par readErr        dw  'Unable to read file                     '\par infoErr        dw  'Unable to obtain information about file '\par createErr      dw  'Unable to create file                   '\par zeroErr        dw  'Unable to set file size to zero         '\par writeErr       dw  'Unable to write file                    '\par ;\par ;  Data structures for GS/OS file handling calls.\par ;\par pathname       dc  i1'255'              ORCA string to read dict filename\par                dc  i1'255'\par                dc  255c' '\par \par options        dc  i2'6'                6 bytes total in options area\par                ds  4\par ;                                       GS/OS open record\par openRec        dc  i2'15'                 pcount\par openRef        ds  2                      refNum\par openPath       dc  a4'pathname'           pathname\par                dc  i2'$0003'              request read/write access\par                dc  i2'0'                  resource number:  open data fork\par openAccess     ds  2                      access\par openFileType   ds  2                      filetype\par openAuxType    ds  4                      auxType\par                ds  2                      storage type\par                ds  8                      create date/time\par                ds  8                      mod date/time\par                dc  i4'options'            pointer to GS/OS result buffer\par openSize       ds  4                      eof:  # bytes that can be read\par                ds  4                      blocks used\par                ds  4                      resource eof\par                ds  4                      resource blocks\par ;\par ;                                       GS/OS read record\par readRec        dc  i2'5'                  pcount\par readRef        ds  2                      reference #\par readBuffer     ds  4                      pointer to buffer to read into\par readRequest    ds  4                      # bytes to read\par transferCount  ds  4                      # bytes actually read\par cache          dc  i2'0'                  don't cache\par ;\par ;                                       GS/OS close record\par closeRec       dc  i2'1'                  pCount\par closeRef       ds  2                      reference #\par ;\par ;                                       GS/OS write record\par writeRec       dc  i2'5'                  pCount\par writeRef       ds  2                      file reference #\par writeData      ds  4                      pointer to data to write\par writeRequest   ds  4                      # bytes to write\par writeTransfer  ds  4                      # bytes actually written\par                dc  i2'0'                  don't cache file\par ;\par ;                                       GS/OS getFileInfo record\par GFIRec         dc  i2'12'                 pCount\par GFIPath        dc  a4'pathname'           pointer to GS/OS input string\par GFIInfo        ds  26                     not relevant for our purposes\par                dc  a4'options'            pointer to GS/OS output buffer\par                ds  24                     not interested in this stuff\par ;\par ;                                       GS/OS create record\par createRec      dc  i2'7'                  pCount\par createPath     dc  a4'pathname'           pointer to GS/OS input string\par                dc  i2'$00C3'              destroy, rename, write, read access\par createTyp      dc  i2'$00F2'              filetype = dictionary\par                dc  i4'0'                  auxtype\par                dc  i2'$0001'              standard file\par                dc  i4'0'                  initial size of data fork is 0\par                dc  i4'0'                  initial size of resource fork is 0\par ;\par ;                                       GS/OS EOF record\par setEOFRec      dc  i2'3'                  pCount\par setEOFRef      ds  2                      file reference #\par                dc  i2'0'                  base of 0\par                dc  i4'0'                  displacement of 0 to create empty file\par                end\par \par ****************************************************************\par *\par *  ConvertToPhonetics - Convert English strings to phonetic\par *        strings until user ready to stop.\par *\par ****************************************************************\par *\par ConvertToPhonetics start\par          using Globals\par \par phStart  gequ  0                        char. in sayString to begin PARSE\par size     gequ  2                        size of English string to PARSE\par \par CTP0     putcr                          write carriage return\par          puts  #'Enter string to parse.  Press RETURN to exit.',cr=t\par \par          gets  sayString-1,cr=t         get string to PARSE\par          lda   sayString                if length = 0, exit\par          and   #$00FF\par          sta   size\par          bne   CTP1\par          rts\par \par CTP1     stz   phStart                  initialize where to begin parsing\par \par CTP2     inc   phStart                  loop to PARSE current string\par          pha                              integer result\par          ph4   #sayString                 string to PARSE\par          ph4   #phString                  string to receive phonetics\par          lda   phStart                    where in English string to begin\par          pha\par          _Parse\par          pl2   phStart                    returns last char. converted\par \par          ph4   #phString                  write the phonetic string\par          _WriteLine\par          putcr                          write carriage return\par \par          lda   phStart                    translated all the chars.?\par          cmp   size\par          bne   CTP2                       No - continue inner loop\par          brl   CTP0                       Yes - continue outer loop\par          end\par \par ****************************************************************\par *\par *  DeleteWord - Delete word from exceptions dictionary.\par *\par ****************************************************************\par *\par DeleteWord start\par          using Globals\par \par          putcr\par          puts  #'Word to delete from dictionary?',cr=t\par \par          gets  word1-1,cr=t             get string to DELETE\par \par          ph4   #word1                   DELETE the word from the dictionary\par          _DictDelete\par          rts\par          end\par \par ****************************************************************\par *\par *  DisplayDict - Display exceptions dictionary.\par *\par ****************************************************************\par *\par DisplayDict start\par          using Globals\par \par addr     gequ  4\par \par DD0      putcr                          write carriage return\par          puts  #'Before displaying dictionary, we can initialize it.',cr=t\par          puts  #'Enter 0 to reset dictionary to beginning.',cr=t\par          puts  #'Enter 1 to delete current dictionary.',cr=t\par          puts  #'Enter 2 to NOT initialize dictionary.',cr=t\par \par          gets  answer-1,cr=t            get initialization flag\par          lda   answer+1\par          and   #$00FF\par          cmp   #'0'                     check if valid response\par          blt   Err1\par          cmp   #'3'\par          bge   Err1\par          sec                            if valid, convert to integer\par          sbc   #$30\par \par          cmp   #2                       skip initializing if user says to\par          beq   DD1\par          pha\par          _DictInit\par          bra   DD1\par \par Err1     puts  #'Please enter either 0, 1, or 2.',cr=t\par          brl   DD0\par ;\par ; Loop to display dictionary, from current word to end.\par ;\par DD1      pha                            room for long result\par          pha\par          ph4   #word1                   English word\par          ph4   #word2                   its phonetic translation\par          _DictDump\par          pl4   addr\par          lda   word1                    check if at end of dictionary -\par          and   #$00FF                     length (word1) = 0\par          bne   DD2\par          rts\par \par DD2      putcr                          write carriage return\par          puts  #'Next entry:  '\par          ph4   #word1\par          _WriteString\par          puts  #'   '\par          ph4   #word2\par          _WriteString\par          puts  #'      Continue? (Y or N)',cr=t\par \par          gets  answer-1,cr=t\par          lda   answer+1\par          and   #$00FF\par          cmp   #'N'\par          beq   Rts\par          cmp   #'n'\par          beq   Rts\par          brl   DD1\par Rts      rts\par          end\par \par ****************************************************************\par *\par *  Init - Start the tools, initialize global data.\par *\par *  Outputs:\par *        carry flag - Set if error detected; clear otherwise.\par *\par ****************************************************************\par *\par Init     start\par          using Globals\par ;\par ; Display welcoming message.\par ;\par          puts  #'Speak - A demonstration of the Talking Tools.',cr=t\par          putcr\par          puts  #'Please wait while we load the tools...',cr=t\par          putcr\par          putcr                          write carriage return\par ;\par ; Start the speech tools.\par ;\par          ph4   #toolTable               load the RAM-based tools we need\par          _LoadTools\par          bcc   I1                       check for error from LoadTools call\par          sta   errNum\par          ph4   #toolErr\par          jsr   ReportErr\par          sec                            set error flag\par          rts\par \par I1       lda   myID\par          pha\par          _ParseStartUp\par          _MaleStartUp\par          _FemaleStartUp\par          _SpeechStartUp\par \par Rts      clc                            return OK flag\par          rts\par          end\par \par ****************************************************************\par *\par *  InsertWord - Add a new word to the exceptions dictionary.\par *\par ****************************************************************\par *\par InsertWord start\par          using Globals\par \par IW0      putcr                          write carriage return\par          puts  #'Press RETURN for the dictionary entries to exit.',cr=t\par \par          puts  #'Enter English word to add to dictionary:  '\par          gets  word1-1,cr=t             get English word\par          lda   word1                    if length = 0, exit\par          and   #$00FF\par          bne   IW1\par Rts      rts\par \par IW1      puts  #'Enter phonetic representation of word to add:  '\par          gets  word2-1,cr=t             get phonetic word\par          lda   word2                    if length = 0, exit\par          and   #$00FF\par          beq   Rts\par \par          ph4   #word1\par          ph4   #word2\par          _DictInsert\par          brl   IW0\par          end\par \par ****************************************************************\par *\par * LoadDict - Load dictionary from disk file.\par *\par ****************************************************************\par *\par LoadDict start\par          using Globals\par ;\par ; Get name of file to open.\par ;\par          short M                        init. ORCA string to receive pathname\par          lda   #255\par          sta   pathname\par          sta   pathname+1\par          long  M\par \par          puts  #'Enter pathname of dictionary to open:  '\par          gets  pathname,cr=t            get name of file to open\par          lda   pathname+1               check empty string\par          and   #$00FF\par          bne   LD1\par          rts\par \par LD1      sta   pathname                 convert ORCA string to GS/OS input string\par ;\par ; Open the file, allocate a buffer into which it will be read, then close file.\par ;\par          _OpenGS  openRec               open the file\par          bcc   LD2                      handle error\par          sta   errNum\par          ph4   #openErr\par          jsr   ReportErr\par          rts\par \par LD2      lda   openRef                  get ready to read and then close the file\par          sta   readRef\par          sta   closeRef\par \par          ph2   #1                       clear current dict from memory\par          _DictInit\par ;\par ; If the file is empty, close the file and skip loading it.\par ;\par          lda   openSize\par          ora   openSize+2\par          bne   LD3\par          _CloseGS closeRec\par          rts\par ;\par ; If the file is not empty, allocate a read buffer, read and then close the\par ; file.\par ;\par LD3      ph4   #0                       allocate memory block to read files\par          ph4   openSize                 read in the whole thing\par          ph2   myID\par          ph2   #$C010                   locked, can't move, don't purge, don't\par !                                         cross bank bound., don't page align\par          ph4   #0                       no absolute address specified\par          _NewHandle\par          bcc   LD3A                     handle error:\par          plx                              throw away zero handle\par          plx\par          sta   errNum\par          ph4   #memErr\par          jsr   ReportErr                  report error\par          _CloseGS  closeRec               close file\par          rts                              return\par \par LD3A     pl4   handle                   get ready to dereference the handle\par \par          lda   [handle]                 dereference memory handle\par          sta   readBuffer\par          sta   ptr\par          ldy   #2\par          lda   [handle],Y\par          sta   readBuffer+2\par          sta   ptr+2\par \par          lda   openSize                 get # bytes to read\par          sta   readRequest\par          lda   openSize+2\par          sta   readRequest+2\par \par          _ReadGS  readRec               make the Read call\par          php                            save error flag from read\par          pha                            save error #\par          _CloseGS closeRec\par          pla\par          plp\par          bcc   LD4                      handle error\par          sta   errNum\par          ph4   #readErr\par          jsr   ReportErr\par          bra   LD5\par ;\par ; Create new dictionary from entries in buffer.\par ;\par LD4      clc                            tmp := address of last byte in buffer\par          lda   ptr\par          adc   transferCount\par          sta   tmp\par          lda   ptr+2\par          adc   transferCount+2\par          sta   tmp+2\par \par LD4A     lda   ptr+2                    while ptr < tmp do begin\par          cmp   tmp+2\par          blt   LD4C\par          beq   LD4B\par          bra   LD5\par LD4B     lda   ptr\par          cmp   tmp\par          blt   LD4C\par          bra   LD5\par \par LD4C     lda   ptr+2                      push pointer to English word\par          pha\par          lda   ptr\par          pha\par          lda   [ptr]                      calc. pointer to phonetic word:\par          and   #$00FF                     length (English word) + 1 + textPtr\par          inc   A\par          clc\par          adc   ptr\par          bcc   LD4D\par          inc   ptr+2\par LD4D     sta   ptr\par          ldx   ptr+2\par          phx                              push pointer to phonetic word\par          pha\par          _DictInsert                      insert new entry into dictionary\par \par          lda   [ptr]                      calc. pointer to next entry\par          and   #$00FF\par          inc   A\par          clc\par          adc   ptr\par          bcc   LD4E\par          inc   ptr+2\par LD4E     sta   ptr\par          bra   LD4A                     end \{while\}\par ;\par ; Clean up and return.\par ;\par LD5      lda   handle+2\par          pha\par          lda   handle\par          pha\par          _DisposeHandle\par          ph2   #0                       reset dict to top\par          _DictInit\par          rts\par          end\par \par ****************************************************************\par *\par *  Main - Speak's main function.  Presents main menu and acts\par *        on user's choice.\par *\par ****************************************************************\par *\par Main     start\par          using Globals\par ;\par ; Display main menu.\par ;\par Top      puts  #'Enter desired function:  S to speak English string ',cr=t\par          puts  #'                         P to speak phonetic string',cr=t\par          puts  #'                         C to convert to phonetics ',cr=t\par          puts  #'                         G to set global speech parameters',cr=t\par          puts  #'                         A to activate dictionary  ',cr=t\par          puts  #'                         T to deactivate dictionary',cr=t\par          puts  #'                         D to display dictionary   ',cr=t\par          puts  #'                         I to insert word into dictionary ',cr=t\par          puts  #'                         R to remove word from dictionary ',cr=t\par          puts  #'                         L to load dictionary from disk',cr=t\par          puts  #'                         W to write dictionary to disk',cr=t\par          puts  #'                         Q to quit program         ',cr=t\par          putcr\par \par          gets  answer-1,cr=t            get user's choice\par          lda   answer+1                 dispatch appropriate routine:\par          and   #$00FF                   case (answer):\par \par          cmp   #'S'                       'S','s':  SpeakText;\par          bne   M2\par M1       jsr   SpeakText\par          brl   Top\par M2       cmp   #'s'\par          beq   M1\par \par          cmp   'P'                        'P','p': SpeakPhonetics\par          bne   M4\par M3       jsr   SpeakPhonetics\par          brl   Top\par M4       cmp   #'p'\par          beq   M3\par \par          cmp   #'C'                       'C','c': ConvertToPhonetics\par          bne   M6\par M5       jsr   ConvertToPhonetics\par          brl   Top\par M6       cmp   #'c'\par          beq   M5\par \par          cmp   #'G'                       'G','g': SetSpeechGlobals\par          bne   M8\par M7       jsr   SetSpeechGlobals\par          brl   Top\par M8       cmp   #'g'\par          beq   M7\par \par          cmp   #'A'                       'A','a': Activate dict\par          bne   M10\par M9       ph2   #1\par          _DictActivate\par          brl   Top\par M10      cmp   #'a'\par          beq   M9\par \par          cmp   #'T'                       'T','t': Deactivate dict\par          bne   M12\par M11      ph2   #0\par          _DictActivate\par          brl   Top\par M12      cmp   #'t'\par          beq   M11\par \par          cmp   #'D'                       'D','d': DisplayDict\par          bne   M14\par M13      jsr   DisplayDict\par          brl   Top\par M14      cmp   #'d'\par          beq   M13\par \par          cmp   #'I'                       'I','i': InsertWord\par          bne   M16\par M15      jsr   InsertWord\par          brl   Top\par M16      cmp   #'i'\par          beq   M15\par \par          cmp   #'R'                       'R','r': DeleteWord\par          bne   M18\par M17      jsr   DeleteWord\par          brl   Top\par M18      cmp   #'r'\par          beq   M17\par \par          cmp   #'L'                       'L','l': LoadDict\par          bne   M20\par M19      jsr   LoadDict\par          brl   Top\par M20      cmp   #'l'\par          beq   M19\par \par          cmp   #'W'                       'W','w': WriteDict\par          bne   M22\par M21      jsr   WriteDict\par          brl   Top\par M22      cmp   #'w'\par          beq   M21\par \par          cmp   #'Q'                       'Q','q': exit Main\par          beq   Rts\par          cmp   #'q'\par          bne   M23\par Rts      rts\par \par M23      putcr                          write carriage return\par          puts  #'Please enter one of S, P, C, G, A, T, D, I, R, or Q',cr=t\par          putcr                          write carriage return\par          brl   Top\par          end\par \par ****************************************************************\par *\par *  ReportErr - Report tool errors detected by program.\par *\par ****************************************************************\par *\par ReportErr start\par          using Globals\par \par rtsAddr  gequ  8\par \par          pl2   rtsAddr                  save return address\par \par          _WriteLine\par          pha                            room for long result\par          pha\par          ph2   errNum\par          _HexIt\par          pl4   hexValue\par          ph4   #msg0\par          _WriteLine\par \par          ph2   rtsAddr                  restore return address\par          rts\par          end\par \par ****************************************************************\par *\par *  SetSpeechGlobals - Set global speech parameters.\par *\par ****************************************************************\par *\par SetSpeechGlobals start\par          using Globals\par \par          putcr                          write carriage return\par          puts  #'Follow the prompts to change the speech parameters.',cr=t\par ;\par ; Let user change current voice setting.\par ;\par SSG1     puts  #'Voice = '              display current voice setting\par          lda   voice\par          bne   SSG2\par          puts  #'male  '\par          bra   SSG3\par SSG2     puts  #'female  '\par SSG3     puts  #'Enter 0 for male voice, 1 for female voice.',cr=t\par \par          gets  answer-1,cr=t            get user's response\par          lda   answer+1\par          and   #$00FF\par          cmp   #'0'                     check if it's valid\par          blt   DoErr1\par          cmp   #'2'\par          bge   DoErr1\par          sec                            if valid, convert to integer\par          sbc   #$30\par          sta   voice\par          bra   SSG4\par DoErr1   jsr   Err1\par          brl   SSG1\par \par Err1     putcr                          write carriage return\par          puts  #'Value must be either 0 or 1.',cr=t\par          rts\par ;\par ; Let user change current tone setting.\par ;\par SSG4     puts  #'Tone = '               display current tone setting\par          lda   basePitch\par          bne   SSG5\par          puts  #'bass    '\par          bra   SSG6\par SSG5     puts  #'treble  '\par SSG6     puts  #'Enter 0 for bass tone, 1 for treble tone.',cr=t\par \par          gets  answer-1,cr=t            get user's response\par          lda   answer+1\par          and   #$00FF\par          cmp   #'0'                     check if it's valid\par          blt   DoErr2\par          cmp   #'2'\par          bge   DoErr2\par          sec                            if valid, convert to integer\par          sbc   #$30\par          sta   basePitch\par          bra   SSG7\par \par DoErr2   jsr   Err1\par          brl   SSG4\par ;\par ; Let user change current speed setting.\par ;\par SSG7     puts  #'Speed = '              display current speed setting\par          put2  speed,cr=t\par \par          gets  answer-1,cr=t            get user's response\par          lda   answer+1\par          and   #$00FF\par          cmp   #'0'                     check if it's valid\par          blt   DoErr3\par          cmp   #':'\par          bge   DoErr3\par          sec                            if valid, convert to integer\par          sbc   #$30\par          sta   speed\par          bra   SSG8\par \par DoErr3   jsr   Err2\par          bra   SSG7\par \par Err2     putcr                          write carriage return\par          puts  #'Value must be between 0 and 9.',cr=t\par          rts\par ;\par ; Let user change current volume setting.\par ;\par SSG8     puts  #'Volume = '             display current volume setting\par          put2  volume,cr=t\par \par          gets  answer-1,cr=t            get user's response\par          lda   answer+1\par          and   #$00FF\par          cmp   #'0'                     check if it's valid\par          blt   DoErr4\par          cmp   #':'\par          bge   DoErr4\par          sec                            if valid, convert to integer\par          sbc   #$30\par          sta   volume\par          bra   SSG9\par \par DoErr4   jsr   Err2\par          bra   SSG8\par ;\par ; Let user change current pitch setting.\par ;\par SSG9     puts  #'Pitch = '              display current pitch setting\par          put2  pitch,cr=t\par \par          gets  answer-1,cr=t            get user's response\par          lda   answer+1\par          and   #$00FF\par          cmp   #'0'                     check if it's valid\par          blt   DoErr5\par          cmp   #':'\par          bge   DoErr5\par          sec                            if valid, convert to integer\par          sbc   #$30\par          sta   pitch\par \par          lda   voice\par          pha\par          lda   basePitch\par          pha\par          lda   pitch\par          pha\par          lda   speed\par          pha\par          lda   volume\par          pha\par          _SetSayGlobals\par          rts\par \par DoErr5   jsr   Err2\par          bra   SSG9\par          end\par \par ****************************************************************\par *\par *  ShutDown - Shut down tools, do any necessary clean-up before\par *        exiting program.\par *\par ****************************************************************\par *\par ShutDown start\par          using Globals\par \par          _MaleShutDown\par          _FemaleShutDown\par          _ParseShutDown\par          _SpeechShutDown\par          rts\par          end\par \par }\pard \keepn\widctlpar\adjustright {\f6\fs14 ****************************************************************\par }\pard \widctlpar\adjustright {\f6\fs14 *\par *  SpeakPhonetics - Speak phonetic strings until user is ready\par *        to stop.\par *\par ****************************************************************\par *\par SpeakPhonetics start\par          using Globals\par \par SP0      putcr                          write carriage return\par          puts  #'Enter phonetic string to speak.  RETURN to exit.',cr=t\par \par          gets  phString-1,cr=t          get string to SPEAK\par          lda   phString                 if length = 0, exit\par          and   #$00FF\par          bne   SP1\par          rts\par \par SP1      lda   volume                   else SPEAK the string just entered\par          pha\par          lda   speed\par          pha\par          lda   pitch\par          pha\par          ph4   #phString\par          lda   voice                    call MALE_SPEAK or FEMALE_SPEAK,\par          bne   SP2                        whichever is appropriate\par          _MaleSpeak\par          brl   SP0\par SP2      _FemaleSpeak\par          brl   SP0\par          end\par \par ****************************************************************\par *\par *  SpeakText - Speak English strings until user is ready to stop.\par *\par ****************************************************************\par *\par SpeakText start\par          using Globals\par \par ST0      putcr                          write carriage return\par          puts  #'Enter string to speak.  Press RETURN to exit.',cr=t\par \par          gets  sayString-1,cr=t         get string to SAY\par          lda   sayString                if length = 0, exit\par          and   #$00FF\par          bne   ST1\par          rts\par \par ST1      ph4   #sayString               else SAY the string just entered\par          _Say\par          bra   ST0\par          end\par \par ****************************************************************\par *\par *  WriteDict - Write dictionary to a disk file.\par *\par ****************************************************************\par *\par WriteDict start\par          using Globals\par ;\par ; Get name of file to open.\par ;\par          short M                        init. ORCA string to receive pathname\par          lda   #255\par          sta   pathname\par          sta   pathname+1\par          long  M\par \par          puts  #'Enter pathname of dictionary to write:  '\par          gets  pathname,cr=t            get name of file to open\par          lda   pathname+1               check empty string\par          and   #$00FF\par          bne   WD1\par          rts\par \par WD1      sta   pathname                 convert ORCA string to GS/OS input string\par ;\par ; Check if the file exists.  If not, create the file.\par ;\par          _GetFileInfoGS GFIRec          make GetFileInfo call to see if exists\par          bcc   WD3\par          cmp   #fileNotFoundErr         if error not file-not-found\par          beq   WD2\par          sta   errNum                     report error\par          ph4   #infoErr\par          jsr   ReportErr\par          rts                              and exit\par \par WD2      _CreateGS createRec            else create the file\par          bcc   WD3\par          sta   errNum\par          ph4   #createErr\par          jsr   ReportErr\par          rts\par ;\par ; Open the file, set its size to zero, allocate a write buffer.\par ;\par WD3      _OpenGS  openRec               open the file\par          bcc   WD3A                     handle error\par          sta   errNum\par          ph4   #openErr\par          jsr   ReportErr\par          rts\par \par WD3A     lda   openRef                  init. GS/OS file reference #s\par          sta   setEOFRef\par          sta   writeRef\par          sta   closeRef\par \par          _SetEOFGS setEOFRec            set file's size to 0\par          bcc   WD3B                     handle error\par          sta   errNum\par          ph4   #zeroErr\par          jsr   ReportErr\par          rts\par ;\par ; Allocate the write buffer.\par ;\par WD3B     ph4   #0                       allocate memory block to read files\par          ph4   #1024                    1K buffer\par          ph2   myID\par          ph2   #$C010                   locked, can't move, don't purge, don't\par ;                                         cross bank bound., don't page align\par          ph4   #0                       no absolute address specified\par          _NewHandle\par          bcc   WD3C                     handle error:\par          plx                              throw away zero handle\par          plx\par          sta   errNum\par          ph4   #memErr\par          jsr   ReportErr                  report error\par          _CloseGS  closeRec               close file\par          rts                              return\par \par WD3C     pl4   handle                   get ready to dereference the handle\par \par          lda   [handle]                 dereference memory handle\par          sta   writeData\par          ldy   #2\par          lda   [handle],Y\par          sta   writeData+2\par \par          ph2   #0                       reset dictionary to top\par          _DictInit\par ;\par ; Main loop:  while not at end of dictionary, fill the buffer with dictionary\par ;             entries, then write the buffer to disk.\par ;\par WD4      pha                            room for long result\par          pha\par          ph4   #word1\par          ph4   #word2\par          _DictDump                      get 1st dictionary entry\par          pla\par          pla\par \par WD4A     stz   writeRequest             init. FillBuffer variables\par          stz   writeRequest+2\par          lda   [handle]\par          sta   ptr\par          ldy   #2\par          lda   [handle],Y\par          sta   ptr+2\par          ldy   #0\par \par          jsr   FillBuffer\par          php                            save flag returned from FillBuffer rtn\par \par          _WriteGS  writeRec             write buffer to disk\par          bcc   WD4B\par          sta   errNum\par          ph4   #writeErr\par          jsr   ReportErr\par          plp\par          bra   WD5\par \par WD4B     plp                            retrieve flag returned from FillBuffer\par          bcc   WD4A\par ;\par ; Final clean-up:  Close the file, deallocate buffer.\par ;\par WD5      _CloseGS  closeRec             close the file\par          lda   handle+2\par          pha\par          lda   handle\par          pha\par          _DisposeHandle\par          ph2   #0                       reset dict. to top\par          _DictInit\par          rts\par ;\par ; FillBuffer:  fill the write buffer with dictionary entries.\par ;\par FillBuffer anop\par          lda   word1                    check if we've gotten all entries\par          and   #$00FF\par          bne   FB1\par          sec                            yes - set flag that we're done\par          rts\par \par FB1      lda   writeRequest             no - check if new entries will fit in\par          sta   tmp                        buffer\par          lda   writeRequest+2\par          sta   tmp+2\par          lda   word1                    add size of English word\par          and   #$00FF\par          clc\par          adc   tmp\par          bcc   FB1A\par          inc   tmp+2\par FB1A     sta   tmp\par          lda   word2                    add size of phonetic word\par          and   #$00FF\par          clc\par          adc   tmp\par          bcc   FB1B\par          inc   tmp+2\par FB1B     sta   tmp\par          lda   #2                       add length bytes to total\par          clc\par          adc   tmp\par          bcc   FB1C\par          inc   tmp+2\par FB1C     sta   tmp\par          cmp   #1024                    ensure that new total size is\par          blt   FB2                        less than or equal to buffer size\par          clc                            set flag that we're not done, then exit\par          rts\par ;\par ; We're not at the end of the dictionary, and the current entry will fit in\par ; our buffer, so we move the entries to the buffer, then get the next entry.\par ;\par FB2      lda   tmp                      update current amt. chars. in buffer\par          sta   writeRequest\par          lda   tmp+2\par          sta   writeRequest+2\par \par          lda   word1                    move English word to buffer\par          and   #$00FF\par          sta   count\par          ldx   #0\par          short M\par FB2A     lda   word1,X\par          sta   [ptr],Y\par          inx\par          iny\par          dec   count\par          bpl   FB2A\par          long  M\par \par          lda   word2                    move phonetic word to buffer\par          and   #$00FF\par          sta   count\par          ldx   #0\par          short M\par FB2B     lda   word2,X\par          sta   [ptr],Y\par          inx\par          iny\par          dec   count\par          bpl   FB2B\par          long  M\par \par          phy                            save index into buffer\par          pha                            room for long result\par          pha\par          ph4   #word1\par          ph4   #word2\par          _DictDump                      get next dictionary entry\par          pla\par          pla\par          ply\par          brl   FillBuffer\par          end\par }\pard \qc\widctlpar\adjustright {\f4 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Appendix B - Licensing the Speech Tools\par }}\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\f4\fs36\cgrid {\fs28 Appendix B - Licensing the Speech Tools}{\pard\plain \s42\qj\sa240\widctlpar\adjustright \b\v\f4\fs28\cgrid {\tc {\v\fs28 {\*\bkmkstart _Toc497050801}Appendix B - Licensing the Speech Tools{\*\bkmkend _Toc497050801}\tcl1}}}{\fs28 \par }\pard\plain \widctlpar\tqr\tx7200\adjustright \f12\cgrid {\v\f4\fs20 .:Licensing Tools;}{\pard\plain \widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 First Byte, Inc.\:Licensing Tools}}}{\pard\plain \widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 licensing tools}}}{\pard\plain \widctlpar\tqr\tx7200\adjustright \v\f4\fs20\cgrid {\xe {\v\f4\fs20 }{\v\f4\fs20 copyright}}}{\v\f4\fs20 \par }\pard \qj\fi540\widctlpar\tqr\tx7200\adjustright {\f4\fs20 The speech tools used in this product are copyrighted by First Byte, Inc., and have been licensed to the Byte Works for use in our Talking Tools package.  While you can create as many programs as you like that make use of the speech tools, and distribute your programs in any way you choose, you cannot distribute the speech tool files themselves without obtaining a separate license from First Byte, Inc.  Specifically, the files that you cannot distribute without a license are Tool050, Tool051, and Tool052.  To obtain current information about licensing the speech tools, contact First Byte, Inc. at this address:\par \par First Byte, Inc.\par 3333 E. Spring Street #302\par Long Beach, CA  90806\par (213) 565-7006\par \par The tool Tool053 was developed by the Byte Works, Inc. to correct minor incompatibilities between the speech tools developed by First Byte, Inc., and the latest version of the Apple IIGS operating system.  You may distribute this file with your programs, so long as the following copyright message appears somewhere in your documentation or in the About box of the program itself:\par \par Tool053 Copyright 1991, Byte Works Inc.  Used with permission.\par \par Finally, you should feel free to make use of the ideas represented in any of the sample programs in this book or on the accompanying disks in your own programs.  If you use any of the source verbatim in your program, however, you must include the following statement in the source code and somewhere in the documentation or in the About box:\par \par Some subroutines Copyright 1991, Byte Works, Inc.  Used with permission.\par }\pard \widctlpar\adjustright {\f4\fs20 \sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\cols2\endnhere\titlepg\sectdefaultcl {\headerr \pard\plain \qr\widctlpar\adjustright \f12\cgrid {\f5\fs20 Index\par }}\pard\plain \widctlpar\adjustright \f12\cgrid {\pard\plain \widctlpar\adjustright \v\f4\fs20\cgrid {\tc {\v\f4\fs20 }{\v\f4\fs20 {\*\bkmkstart _Toc497050802}Index{\*\bkmkend _Toc497050802}\tcl1}}}{\v\f4\fs20 \par }{\field\fldedit{\*\fldinst {\f4\fs20  INDEX \\c "2" }}{\fldrslt {\f4\fs20\lang1024 \sect }\sectd \sbknone\linex-32767\headery2520\footery2520\cols2\endnhere\titlepg\sectdefaultcl \pard\plain \keepn\widctlpar\adjustright \f12\cgrid {\b\f4\fs20 A\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid abbreviations, {\b 7}\par Apple IIGS Manuals, 19, 33\par {\i Apple II}{\i\scaps GS }{\i Owner's Guide};, 5, 6\par assembly language, 1, 35\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid interface file, 35\par source for Speak, 81\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 B\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid back-end toolkit, 7, 33\par backups, 2\par Boot Disk, 1\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 C\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid C, 1, 34\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid interface files, 34\par source for Speak, 73\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Control Panel, 6\par copyright, 97\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 D\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid desktop programs, 6\par DictActivate tool call, {\b 46}\par DictDelete tool call, 26, 28, {\b 47}\par DictDump tool call, 26, 27, {\b 48}\par DictInit tool call, 26, 27, {\b 49}\par DictInsert tool call, 26, 28, {\b 50}\par dictionary, 42, 46, 47, 48, 50\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid loading from disk, 29\par saving to disk, 30\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid digitally recorded speech, 5\par disk drives, required, 3\par disks\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid copying, 2\par initializing, 2\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 E\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid English strings, 52\par ENSONIQ chip, 33, 58, 63\par \pard \s31\keepn\widctlpar\tqr\tldot\tx3590\adjustright exceptions dictionary\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid see dictionary, 48\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 F\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Female Speech tool set, 33, {\b 59}\par female voice, 7\par FemaleBootInit tool call, {\b 59}\par FemaleReset tool call, {\b 62}\par FemaleShutDown tool call, 31, {\b 60}\par FemaleSpeak tool call, 23\endash 24, {\b 63}\par FemaleStartUp tool call, 19, {\b 60}\par FemaleStatus tool call, {\b 62}\par FemaleVersion tool call, {\b 61}\par First Byte, Inc., 5\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Licensing Tools, 97\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid front-end toolkit, 7, 33\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 G\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid gender parameter, 7, 42, 53\par GS/OS, 1\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 H\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid hardware, required, 2\par Human Interface Guidelines, 4\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 I\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid include statement, 34\par initializing tools\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Female Speech tool set, 60, 62\par Male Speech tool set, 55, 57\par Parser tool set, 42, 45\par Speech tool set, 37, 40\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid installing tools, 2\par interface files, {\b 17}, 33, 34, 35\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 L\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid LibPrefix compiler directive, 34\par Libraries folder, 33, 34\par licensing speech tools, 5\par licensing tools, 97\par loading tools, 19\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 M\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid M16.Speech file, 17, 35\par MacGen utility, 35\par male speech, 55\par Male Speech tool set, 33, {\b 54}\par male voice, 7\par MaleBootInit tool call, {\b 54}\par MaleReset tool call, {\b 57}\par MaleShutDown tool call, 31, {\b 55}\par MaleSpeak tool call, 23\endash 24, {\b 58}\par MaleStartUp tool call, 19, {\b 55}\par MaleStatus tool call, {\b 57}\par MaleVersion tool call, {\b 56}\par MCOPY assembler directive, 35\par memory deallocation, 43, 45\par memory, required, 3\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 O\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid ORCA/C compiler, 17, 34\par ORCA/M assembler, 17, 35\par ORCA/Pascal compiler, 17, 25, 33\par ORCACDefs folder, 34\par ORCAPascalDefs folder, 33\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 P\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid parameters\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid see pitch, tone, speed, volume, gender, 7\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Parse tool call, 24, 26, 46, 47, 50, {\b 51}\par ParseBootInit tool call, {\b 41}\par parser module, 42\par Parser speech tool set, {\b 41}\par Parser tool set, 33\par ParseReset tool call, {\b 45}\par ParseShutDown tool call, 31, {\b 43}\par ParseStartUp tool call, 19, {\b 42}\par ParseStatus tool call, {\b 45}\par ParseVersion tool call, {\b 44}\par \pard \s31\keepn\widctlpar\tqr\tldot\tx3590\adjustright Pascal, 1, 33\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid interface files, 33\par source for Speak, 65\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid phonetic language, {\b 10}\endash {\b 12}\par phonetics, 51, 52\par pitch parameter, 7, 42, 53\par programming, 1\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 R\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid RAM, 3\par RAM-based tools, 19\par recorded speech, 5\par registration card, 1\par Release.Notes, 1\par requirements\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid disk drives, 3\par hardware, 2\par memory, 3\par software, 3\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 S\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Say tool call, 21\endash 22, 25, 26, 46, 47, 50, {\b 52}\par SetSayGlobals tool call, 25, 26, 52, {\b 53}\par shutting down tools, 31\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Female Speech tool set, 60\par Male Speech tool set, 55\par Parser tool set, 43\par Speech tool set, 38\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid SmoothTalker, licensing, 5\par software, required, 3\par Speak program\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid ConvertToPhonetics procedure, 22\par DeleteWord procedure, 28\par DictDelete procedure, 28\par DisplayDict procedure, 26\par Init procedure, 19\par InsertWord procedure, 28\par Integer Math tool set, 17, 19\par LoadDict procedure, 29\par main program, 18\par Memory Manager, 17\par see also tool calls, 21\par SetSpeechGlobals procedure, 25\par ShutDown, 31\par SpeakPhonetics procedure, 23\par SpeakText, 21\par Tool Locator, 17, 19\par WriteDict procedure, 30\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid SpeakIt program, 5\endash 15\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Dictionary command, 14\par Dictionary off command, 14\par Dictionary on command, 14\par launching, 5\par overview, 6\par Show phonetics command, 10\par Speak text command, 6\par Speech menu, 6, 10\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid speech\par \pard\plain \s30\li360\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid adult female, 63\par adult male, 58\par \pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid speech parameters, {\b 7}, 52, 53\par Speech tool set, 33, {\b 36}\par speech.h file, 17, 34\par SpeechBootInit tool call, {\b 36}\par SpeechReset tool call, {\b 40}\par SpeechShutDown tool call, 31, {\b 38}\par SpeechStartUp tool call, 19, {\b 37}\par SpeechStatus tool call, {\b 40}\par SpeechTools.Int file, 17, 33\par SpeechTools.pas file, 33\par SpeechVersion tool call, {\b 39}\par speed parameter, 7, 42, 53\par starting tools, 19\par synthesized speech, 5\par System Disk, 5\par System folder, 6, 33, 39, 44, 56, 61\par System Speed, 6\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 T\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid Talking Tools System Disk, 5\par tone parameter, 7, 42, 53\par Tool050 file, 6, 33\par Tool051 file, 6, 33\par Tool052 file, 6, 33\par Tool053 file, 6, 33\par Toolbox, 4\par tools folder, 2, 6, 33, 39, 44, 56, 61\par type face conventions, 3\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 U\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid uses statement, 33\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 V\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid version number, 1, 39, 44, 56, 61\par visual cues, 3\par volume parameter, 7, 42, 53\par Volume setting, in the Control Panel, 6\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard \keepn\widctlpar\adjustright {\b\f4\fs20 W\par }{\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid warranty card, 1\par \pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20\lang1024 \sect }\sectd \sbknone\linex-32767\headery2520\footery2520\cols2\endnhere\titlepg\sectdefaultcl \pard\plain \widctlpar\adjustright \f12\cgrid }}\pard\plain \widctlpar\adjustright \f12\cgrid {\f4\fs20 \par }\pard\plain \s31\widctlpar\tqr\tldot\tx3590\adjustright \fs20\lang1024\cgrid {\f4 \par }}