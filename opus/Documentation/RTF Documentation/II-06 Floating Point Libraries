{\rtf1\mac\ansicpg10000\uc1 \deff0\deflang1033\deflangfe1033{\upr{\fonttbl{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}}{\*\ud{\fonttbl{\f2\fnil\fcharset256\fprq2{\*\panose 02070309020205020404}Courier New;}{\f4\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Times;}{\f5\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Helvetica;}{\f6\fnil\fcharset256\fprq2{\*\panose 02000500000000000000}Courier;}{\f7\fnil\fcharset256\fprq2{\*\panose 020b0503030404040204}Geneva;}}}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \snext0 Normal;}{\s1\keepn\widctlpar\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext0 heading 1;}{\s3\sb240\sa60\keepn\widctlpar\adjustright \loch\af5\hich\af5\dbch\f4\cgrid \sbasedon0 \snext0 heading 3;}{\*\cs10 \additive Default Paragraph Font;}{\s15\widctlpar\adjustright \fs20\loch\af2\hich\af2\dbch\f4\cgrid \sbasedon0 \snext15 Plain Text;}{\s16\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext16 header;}{\s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon15 \snext17 Text;}{\s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \sbasedon17 \snext18 Code;}{\s19\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext19 footer;}{\*\cs20 \additive \sbasedon10 page number;}{\s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \sbasedon0 \snext22 Command Header;}}{\info{\title MON+}{\author Mike Westerfield}{\operator Mike Westerfield}{\creatim\yr2000\mo10\dy27\hr14\min55}{\revtim\yr2000\mo10\dy27\hr14\min55}{\printim\yr2000\mo10\dy27\hr14\min54}{\version2}{\edmins0}{\nofpages33}{\nofwords4480}{\nofchars25541}{\*\company Byte Works, Inc.}{\nofcharsws31366}{\vern99}}\margl3060\margr3060\margt2880\margb2880 \facingp\widowctrl\ftnbj\aenddoc\formshade\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl {\headerr \pard\plain \s16\qr\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \loch\af4\hich\af4\dbch\f4\cgrid {\fs20 \par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s15\qc\widctlpar\brdrt\brdrs\brdrw60\brsp20 \brdrb\brdrs\brdrw60\brsp20 \adjustright \fs20\loch\af2\hich\af2\dbch\f4\cgrid {\i\fs72 \hich\af4\dbch\af4\loch\f4 ORCA/M}{\i\fs72\up20 \par \hich\af4\dbch\af4\loch\f4 Floating Point\par \hich\af4\dbch\af4\loch\f4 Libraries}{\i\fs72 \par }\pard \s15\widctlpar\adjustright {\fs36 \hich\af4\dbch\af4\loch\f4 Macro and subroutine library support (with source) for single and double precision floating point with ProDOS ORCA/M.\par }{\par \par \par \par \par }{\fs28 \hich\af4\dbch\af4\loch\f4 By Mike Westerfield\par }{\par \par \par \par \par \par \par \par \par \par }{\fs28 \hich\af4\dbch\af4\loch\f4 Copyright 1985\par }{\par }{{\shp{\*\shpinst\shpleft0\shptop0\shpright6114\shpbottom2457\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz0\shplid1027{\sp{\sn shapeType}{\sv 75}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\sp{\sn pib}{\sv {\pict\picscalex70\picscaley70\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich176\picwgoal8760\pichgoal3520\macpict\bliptag-1229934158\blipupi72{\*\blipuid b6b0b1b2b2eba5eae05d25da145947cc}0e220000000100b001b7001102ff0c00ffffffff000100000000000001b7000000b000000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800380000000000b001b80000000100b001b70000000100b001b7000115e200011ffffb0006300600c0000003fd000060fc0018e200043fff80000cfe0006300600c0000003fd000060fc0018e20004380380000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0019e20004300180000cfe0007300600c00000030cfe000060fc0019e20004300180003ffe0007300600c00000030cfe000070fc001ce2001838038381bf0ffc00300600c7fc1ff30c0ff800787fc1ff00001ce200183fffc7c18c1ffe00380600cfff3ff30c1ffc007cffe3ff80001ce200183fffe7c18c1c0e003c0600cfff38030c1c1c007ce0e38180001ce200183f00e7c18c1806003e0600ce0730030c180c007cc0630180001ce200183e0067c18c1806003e0600cc0330030c1800007cc0630180001be200153e0067c18c1c0e003e0600cc033003ff9800007cc063fe001ce200183e0067c18e1ffe003e0600ce033803ff9ff8007ce0638000001ce200183e0067c18f1ffc003e0600cf033c03e38ffc007cf063c0000020e7000010fd00183e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d18003fc0003e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d180030c0003e0067818f9f00003e0600cf833e03e1807c007cf863e0000022e8001e030c3830c0003e0067018f9f00003e0600cf833e03e1807c007cf863e1800022e8001e060cfc30c0003e0066018f9f06003e0600cf833e03e1987c007cf863e1800022e8001e0c07cc3fc0003f00e6038f9f06003f0f01cfc73e03e1987c007cf863e18e0022e8001e1807063800003fffe7ff8f9ffe003fffffcfff3e03e19ffc007cf863ff8e0022e8001e3807023800001fffc3ff870ffc001fffff87fe1c01c187f800387061ff0e000fe800047c030338c0fd00010380ed000fe80004ce03c13fc0fd00010180ed0012ec00070200000187c1e180fc00010180ed0013ee000801480020000303e1f0fb00010180ed0015ef000930140024c0000001f0f0fc000203ff80ed0014ef000438e0000043fe0001f8f0fc000103ffec000eef00087b01ec02678000007ce4000eef00083c7a00201f8000003ce4000ff000050733e0000207fe00001ce4000cf0000607c7f80001610ce1000cf00006079e01090092dce1000cf00006033c8832041c7ce1000cf0000646e8004000823ce1000cf00006fddd20402005d0e1000df00007fbf5c4801040ccc0e2000df00007f7f13080120967e0e2000df000072f8121801020b2e0e2000df000075f7e8880108af1c0e20011f1000b07be65404032012880000262e50011f1000b07be85c26020457c80002777e50012f1000c077cf93000c1029c5c0077ff30e60012f1000c017b0d848a08278e7c003f9f70e60012f1000c02fc02d0100018ef280771e1e0e60012f1000c02f402c40001201f3007fdff76e60012f1000c1ce801008096341f9003afbdbee60012f1000c1de801626b1e4c0d9116fbf01ee60012f1000c3de8018180ecdc0f973dffedece60012f1000c39e80116003f5e0bcf3bf9680ce60013f1000d0bc4026c401f5f0bce1ff7656780e70013f1000d0bc403f8700fafd1cc1f9c1d9f80e70012f1000c0bc30fdbe067e7d3c873e3e063e60012f1000c73cefbe73e33f867e4ffc7f35fe60013f1000df3cfff22ff1bf7bde4dfaff9adc0e70013f1000d73dfe746ff99ffffe7ef0ff9e1c0e70013f1000d17d7ffc5ffddecece7edeff9fd80e70012f1000c17feff45ffcdfedfe1e80ffa3fe60012f1000c17afdbc5ffcdebffe0e56ffb7fe60013f1000d67b9ffc57fcdffffe17d87f1ddc0e70013f1000df7fbff457f5debede7e061e279c0e70012f1000cf3c17a46be99e8ffe7ff500f7ee60012f1000c73cbfe23453adf47e53dadadbee60012f1000c13e3ff21be33bfcfe4df400337e60012f1000c0bc87f908065ffa3cefdededefe60012f1000c0bc1879800cf7f2bcbfff89be8e60012f1000c19f2018c03deff53c1ffed77f8e60012f1000c79f251860fbcff97caf37edfbce60012f1000c7ce440c180fafff798fde9677ce60012f1000c3cb480807ff0fff397867f5f80e60012f1000c04f400b000297fe786013dafc0e60012f1000c0274008040d87fe72000b7fec0e60011f1000b0e7a012000013fcf0000d2e6e50011f1000b0d2e01301f160f0e45804ae0e50011f1000b3f1d86e060c0e01c79404be0e50011f1000b6c9178c0c1e0021cfd8055e0e50011f1000b3d2ac05081f16238fdb04dc0e50011f1000b2c46370101f980703c52d680e50011f1000b1466cec103f880703faceae0e50011f1000b33f339a103f804e47fe9f2f0e50011f1000b35f1870107f841cf7f86c970e50012f2000c07ebe0c68107f8039b7fff9560e50012f2000c06f86321808ff00f257fffed40e50012f2000c0703e79800dfe31e06bfffdf60e50012f2000c03afffc6007fc078c7dffa50b8e50011f1000be7ffc3801f01e5f78ffe84b8e50014f4000ee000002fe7e080000388ffdfff36b8e50015f5000f0178000077e37210003c18ffa7e598a0e50015f5000f021c00009fc6e00519c07cfff7efc2a0e50015f5000f030e0001bc03c23000039fffc7d864a0e50015f5000f03070002febde506023f0ffff5a016b8e50015f5000f01830002747cf01f0b850fffcc6808b8e50015f5000f01c18003827e84320f8fffffc4d00fb8e50015f5000f40e10000027f900007cdffff9c9c07a0e50015f5000f60718000027ffd2a2fff7fff8eb80fa0e50015f5000f703f00000366ef2e3fffbfff2fa80720e50015f5000f780a000003fdffdc3ffffffe9f980738e50015f500005cfe000b01f9ffe7de7f5ffc3ff00f78e50015f500000efe000b01ffdff6fe3ff7f2ff400f70e50016f6001010072000000e5ffffffc1fff55ff201e40e50016f600101803e0000007fde7ff6c1ffff3ff187e40e50016f600101c01c0000007bf5f7ffc1ffd5ffebffef0e50016f600101e0180000006fdadbffc1ffffff117fcf0e50016f600010701fe000b02dbbadffb3fffffe45afd60e50014f600010380fe000307ffc07ffdff02fe1679e40016f700020701c0fe00031ffe3f7ffdff03c1aafb80e50017f700020bc0f8fe000439f77fafeffeff03bcd6f3c0e50017f7000210e070fe00031d5dff9ffeff04fd5b4bf780e50016f70002187060fe000a0c78ffdfeffcfffeeda5ece40016f700021838c0fe000a077fffdfde78f1fec0a3dce40015f700010c18fd000a0dfdffdfce38e1f900239ee40015f700010e0cfd000a1c007f9f1e0003a1c02736e40015f700010708fd000a39edffaf180001e3c02660e40016f8000240038cfd000a3c081e3280ffe013d84cf0e40016f80002c001f8fd000a0f6560f10f01fe07dcc978e40016f80002c00050fd000a039d9df03ba60f8385b330e40015fa000201e0e0fb0009026061f1fedfe6601e4fe30015fa0002021160fb0009065f5e33fdefd3d8599fe30015fa0002021860fb0009062dbc07ff1769241a67e30015fa0002821830fb00090f81ff1ff0f7fd7f09c0e30016fb000301860c30fb00090e6dff3ffb5ffd1d87e0e30016fc00040103830c30fa00086932fff9b7fd4ec3e0e30016fc00040102c30c18fa00087562fde7b7f97fe3c0e30015fc00040380c3041efa0007fde1fefdebfa2f71e2001909081e0207800380c18438fa00081af9c1fdadf67ff0b8e30019091833060cc00580618c40fa000802fb98df2e0feff8fce300180838210e084001c060ccf900080397787d45fbfff87ce3001808586196186000c06030f900080306f03ba007f83c38e3001707186186186000c030f80008030ef03f2a00b01e30e3001707186186186000e03cf80008034ef03c9fc1e40e10e300170718618618600060e0f8000801dee0386037ca071be300150618618618600068f600075e7039800fdc071fe300160618618618600070f7000803bf3c7a4003d8078fe300160618210608400080f700081fbf9ef48009d4078ce30014041833060cc0f500080fbfc18b8002db0788e30014047e1e1f8780f5000806bfff730f0aee0f8ce3000ff00009035fffe73fc0729f4780e4000ff00009017ffdce7fe6783fc780e4000ef00008037efbcc7fe2bfffc7e3000ef00008077fbfacfff43fffc6e3000ef000083f7fff5cfff0bfffc6e3000ff000093f7fffdcfffb3fffc380e4000ff00009077effecfff02effc380e4000ff00009037fffac7ff2bfffc780e4000ff00009017f83ee7ff83ffdc780e4000ef00008017f3dd63fc5fc3fc4e3000ef00008037e06f60f81710fc4e3000ef000080fbc037b0028e6e78ee3000ef000081fbc01798005e7178fe3000ef000080ebc0154c0214c3b8fe3000ef0000801bc017a702ad4938fe3000def00075c025d900c580318e3000def00075e00fe6030c80310e3000ef0000801cf01eb9fc8e80618e3000ef0000801ef837e000020063ce3000ef0000803e7fcfbbe12b00c3ce3000ef0000803d7cfebc1e14c3c7ce3000def00071bbfdf808057f8c8e3000def000719ff9700440ff080e3000def000705ff6c002153f180e3000def000706ffbe000217e3c0e3000def00071a7daa000841c3e0e3000def00073f367400081b86c0e3000def0007389cfe00108f0c40e3000bee0005476b0004541ce2000bee0005b32a8080187ee2000bee0005f8e1000060dee2000cef000601c63b94c38384e2000cef000601830e40140780e2000cef00060103c0e08019c0e2000bee000503b80200f0c0e2000aee00040714800f28e1000aee0004041d6d9a10e10008ed0002082307e00008ed00020c08c2e0000000a0008f00a0008300ff}}}{\sp{\sn fLine}{\sv 0}}}{\shprslt\par\widctlpar\pvpara\absh2457\absw6114\dxfrtext180\dfrmtxtx180\dfrmtxty0\adjustright {\pict\picscalex70\picscaley70\piccropl0\piccropr0\piccropt0\piccropb0\picw438\pich176\picwgoal8760\pichgoal3520\macpict\bliptag-1229934158\blipupi72{\*\blipuid b6b0b1b2b2eba5eae05d25da145947cc}0e220000000100b001b7001102ff0c00ffffffff000100000000000001b7000000b000000000000000a0008200a0303900a0008e001e0001000a0000000002d00240009800380000000000b001b80000000100b001b70000000100b001b7000115e200011ffffb0006300600c0000003fd000060fc0018e200043fff80000cfe0006300600c0000003fd000060fc0018e20004380380000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0018e20004300180000cfe0006300600c0000003fd000060fc0019e20004300180000cfe0007300600c00000030cfe000060fc0019e20004300180003ffe0007300600c00000030cfe000070fc001ce2001838038381bf0ffc00300600c7fc1ff30c0ff800787fc1ff00001ce200183fffc7c18c1ffe00380600cfff3ff30c1ffc007cffe3ff80001ce200183fffe7c18c1c0e003c0600cfff38030c1c1c007ce0e38180001ce200183f00e7c18c1806003e0600ce0730030c180c007cc0630180001ce200183e0067c18c1806003e0600cc0330030c1800007cc0630180001be200153e0067c18c1c0e003e0600cc033003ff9800007cc063fe001ce200183e0067c18e1ffe003e0600ce033803ff9ff8007ce0638000001ce200183e0067c18f1ffc003e0600cf033c03e38ffc007cf063c0000020e7000010fd00183e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d18003fc0003e0067c18f9f00003e0600cf833e03e1807c007cf863e0000021e7001d180030c0003e0067818f9f00003e0600cf833e03e1807c007cf863e0000022e8001e030c3830c0003e0067018f9f00003e0600cf833e03e1807c007cf863e1800022e8001e060cfc30c0003e0066018f9f06003e0600cf833e03e1987c007cf863e1800022e8001e0c07cc3fc0003f00e6038f9f06003f0f01cfc73e03e1987c007cf863e18e0022e8001e1807063800003fffe7ff8f9ffe003fffffcfff3e03e19ffc007cf863ff8e0022e8001e3807023800001fffc3ff870ffc001fffff87fe1c01c187f800387061ff0e000fe800047c030338c0fd00010380ed000fe80004ce03c13fc0fd00010180ed0012ec00070200000187c1e180fc00010180ed0013ee000801480020000303e1f0fb00010180ed0015ef000930140024c0000001f0f0fc000203ff80ed0014ef000438e0000043fe0001f8f0fc000103ffec000eef00087b01ec02678000007ce4000eef00083c7a00201f8000003ce4000ff000050733e0000207fe00001ce4000cf0000607c7f80001610ce1000cf00006079e01090092dce1000cf00006033c8832041c7ce1000cf0000646e8004000823ce1000cf00006fddd20402005d0e1000df00007fbf5c4801040ccc0e2000df00007f7f13080120967e0e2000df000072f8121801020b2e0e2000df000075f7e8880108af1c0e20011f1000b07be65404032012880000262e50011f1000b07be85c26020457c80002777e50012f1000c077cf93000c1029c5c0077ff30e60012f1000c017b0d848a08278e7c003f9f70e60012f1000c02fc02d0100018ef280771e1e0e60012f1000c02f402c40001201f3007fdff76e60012f1000c1ce801008096341f9003afbdbee60012f1000c1de801626b1e4c0d9116fbf01ee60012f1000c3de8018180ecdc0f973dffedece60012f1000c39e80116003f5e0bcf3bf9680ce60013f1000d0bc4026c401f5f0bce1ff7656780e70013f1000d0bc403f8700fafd1cc1f9c1d9f80e70012f1000c0bc30fdbe067e7d3c873e3e063e60012f1000c73cefbe73e33f867e4ffc7f35fe60013f1000df3cfff22ff1bf7bde4dfaff9adc0e70013f1000d73dfe746ff99ffffe7ef0ff9e1c0e70013f1000d17d7ffc5ffddecece7edeff9fd80e70012f1000c17feff45ffcdfedfe1e80ffa3fe60012f1000c17afdbc5ffcdebffe0e56ffb7fe60013f1000d67b9ffc57fcdffffe17d87f1ddc0e70013f1000df7fbff457f5debede7e061e279c0e70012f1000cf3c17a46be99e8ffe7ff500f7ee60012f1000c73cbfe23453adf47e53dadadbee60012f1000c13e3ff21be33bfcfe4df400337e60012f1000c0bc87f908065ffa3cefdededefe60012f1000c0bc1879800cf7f2bcbfff89be8e60012f1000c19f2018c03deff53c1ffed77f8e60012f1000c79f251860fbcff97caf37edfbce60012f1000c7ce440c180fafff798fde9677ce60012f1000c3cb480807ff0fff397867f5f80e60012f1000c04f400b000297fe786013dafc0e60012f1000c0274008040d87fe72000b7fec0e60011f1000b0e7a012000013fcf0000d2e6e50011f1000b0d2e01301f160f0e45804ae0e50011f1000b3f1d86e060c0e01c79404be0e50011f1000b6c9178c0c1e0021cfd8055e0e50011f1000b3d2ac05081f16238fdb04dc0e50011f1000b2c46370101f980703c52d680e50011f1000b1466cec103f880703faceae0e50011f1000b33f339a103f804e47fe9f2f0e50011f1000b35f1870107f841cf7f86c970e50012f2000c07ebe0c68107f8039b7fff9560e50012f2000c06f86321808ff00f257fffed40e50012f2000c0703e79800dfe31e06bfffdf60e50012f2000c03afffc6007fc078c7dffa50b8e50011f1000be7ffc3801f01e5f78ffe84b8e50014f4000ee000002fe7e080000388ffdfff36b8e50015f5000f0178000077e37210003c18ffa7e598a0e50015f5000f021c00009fc6e00519c07cfff7efc2a0e50015f5000f030e0001bc03c23000039fffc7d864a0e50015f5000f03070002febde506023f0ffff5a016b8e50015f5000f01830002747cf01f0b850fffcc6808b8e50015f5000f01c18003827e84320f8fffffc4d00fb8e50015f5000f40e10000027f900007cdffff9c9c07a0e50015f5000f60718000027ffd2a2fff7fff8eb80fa0e50015f5000f703f00000366ef2e3fffbfff2fa80720e50015f5000f780a000003fdffdc3ffffffe9f980738e50015f500005cfe000b01f9ffe7de7f5ffc3ff00f78e50015f500000efe000b01ffdff6fe3ff7f2ff400f70e50016f6001010072000000e5ffffffc1fff55ff201e40e50016f600101803e0000007fde7ff6c1ffff3ff187e40e50016f600101c01c0000007bf5f7ffc1ffd5ffebffef0e50016f600101e0180000006fdadbffc1ffffff117fcf0e50016f600010701fe000b02dbbadffb3fffffe45afd60e50014f600010380fe000307ffc07ffdff02fe1679e40016f700020701c0fe00031ffe3f7ffdff03c1aafb80e50017f700020bc0f8fe000439f77fafeffeff03bcd6f3c0e50017f7000210e070fe00031d5dff9ffeff04fd5b4bf780e50016f70002187060fe000a0c78ffdfeffcfffeeda5ece40016f700021838c0fe000a077fffdfde78f1fec0a3dce40015f700010c18fd000a0dfdffdfce38e1f900239ee40015f700010e0cfd000a1c007f9f1e0003a1c02736e40015f700010708fd000a39edffaf180001e3c02660e40016f8000240038cfd000a3c081e3280ffe013d84cf0e40016f80002c001f8fd000a0f6560f10f01fe07dcc978e40016f80002c00050fd000a039d9df03ba60f8385b330e40015fa000201e0e0fb0009026061f1fedfe6601e4fe30015fa0002021160fb0009065f5e33fdefd3d8599fe30015fa0002021860fb0009062dbc07ff1769241a67e30015fa0002821830fb00090f81ff1ff0f7fd7f09c0e30016fb000301860c30fb00090e6dff3ffb5ffd1d87e0e30016fc00040103830c30fa00086932fff9b7fd4ec3e0e30016fc00040102c30c18fa00087562fde7b7f97fe3c0e30015fc00040380c3041efa0007fde1fefdebfa2f71e2001909081e0207800380c18438fa00081af9c1fdadf67ff0b8e30019091833060cc00580618c40fa000802fb98df2e0feff8fce300180838210e084001c060ccf900080397787d45fbfff87ce3001808586196186000c06030f900080306f03ba007f83c38e3001707186186186000c030f80008030ef03f2a00b01e30e3001707186186186000e03cf80008034ef03c9fc1e40e10e300170718618618600060e0f8000801dee0386037ca071be300150618618618600068f600075e7039800fdc071fe300160618618618600070f7000803bf3c7a4003d8078fe300160618210608400080f700081fbf9ef48009d4078ce30014041833060cc0f500080fbfc18b8002db0788e30014047e1e1f8780f5000806bfff730f0aee0f8ce3000ff00009035fffe73fc0729f4780e4000ff00009017ffdce7fe6783fc780e4000ef00008037efbcc7fe2bfffc7e3000ef00008077fbfacfff43fffc6e3000ef000083f7fff5cfff0bfffc6e3000ff000093f7fffdcfffb3fffc380e4000ff00009077effecfff02effc380e4000ff00009037fffac7ff2bfffc780e4000ff00009017f83ee7ff83ffdc780e4000ef00008017f3dd63fc5fc3fc4e3000ef00008037e06f60f81710fc4e3000ef000080fbc037b0028e6e78ee3000ef000081fbc01798005e7178fe3000ef000080ebc0154c0214c3b8fe3000ef0000801bc017a702ad4938fe3000def00075c025d900c580318e3000def00075e00fe6030c80310e3000ef0000801cf01eb9fc8e80618e3000ef0000801ef837e000020063ce3000ef0000803e7fcfbbe12b00c3ce3000ef0000803d7cfebc1e14c3c7ce3000def00071bbfdf808057f8c8e3000def000719ff9700440ff080e3000def000705ff6c002153f180e3000def000706ffbe000217e3c0e3000def00071a7daa000841c3e0e3000def00073f367400081b86c0e3000def0007389cfe00108f0c40e3000bee0005476b0004541ce2000bee0005b32a8080187ee2000bee0005f8e1000060dee2000cef000601c63b94c38384e2000cef000601830e40140780e2000cef00060103c0e08019c0e2000bee000503b80200f0c0e2000aee00040714800f28e1000aee0004041d6d9a10e10008ed0002082307e00008ed00020c08c2e0000000a0008f00a0008300ff}\par}}}{\sect }\sectd \sbkodd\linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \par }{\fs16 \hich\af4\dbch\af4\loch\f4 Apple Computer, Inc., makes no warranties, either e\hich\af4\dbch\af4\loch\f4 xpressed or implied, regarding the enclosed computer software package, its merchantability, or its fitness for any particular purpose.\par \par \hich\af4\dbch\af4\loch\f4 ProDOS is a registered trademark of Apple Computer, Inc.\par \par }{\b\fs16 \hich\af4\dbch\af4\loch\f4 Limited Warranty }{\fs16 \hich\af4\dbch\af4\loch\f4 - Subject to the below stated limitations, By\hich\af4\dbch\af4\loch\f4 te Works, Inc. hereby warrants that the program contained in this unit will load and run on the standard manufacturer's configurations for the computer listed for a period of ninety (90) days from the date of purchase. Except for such warranty, this produ\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 t is supplied an "as is" basis without warranty as to merchantability or its fitness for any particular purpose. The limits of warranty extend only to the original purchaser.\par \par \hich\af4\dbch\af4\loch\f4 Neither Byte Works, nor the author of this program are liable or responsible to \hich\af4\dbch\af4\loch\f4 the purchaser and/or user for loss or damages caused, or alleged to be caused, directly or indirectly by this software and its attendant documentation, including (but not limited to) interruption of service, loss of business, at anticipatory profits.\par \par \hich\af4\dbch\af4\loch\f4 To o\hich\af4\dbch\af4\loch\f4 btain the warranty offered, the enclosed purchaser registration card must be completed and returned to The Byte Works within ten days of purchase.\par \par }{\b\fs16 \hich\af4\dbch\af4\loch\f4 Important Notice}{\fs16 \hich\af4\dbch\af4\loch\f4  - This is a fully copyrighted work and as such is protected under the copyright laws of the\hich\af4\dbch\af4\loch\f4  United States of America. According to these laws, consumers of copywritten material may make copies for their personal use only. Duplication for any other purposes whatsoever would constitute infringement of copyright laws and the offender would be liab\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e to civil damages of up to $50,000 in addition to actual damages, plus criminal penalties of up to one year imprisonment and/or a $10,000 fine.\par \par \hich\af4\dbch\af4\loch\f4 This product is sold for use on a single computer at a single location. Contact the publisher for information \hich\af4\dbch\af4\loch\f4 regarding licensing for use at multiple-workstation or multiple-computer Installations.\par }\pard \s17\qc\widctlpar\adjustright {\fs16 \par \sect }\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Overview\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This package contains macro libraries that allow you to use floating point math from within your assembly language programs. The macros allow a variety of \hich\af4\dbch\af4\loch\f4 addressing modes, including absolute, immediate, indirect and stack addressing. in addition to the expected operations of add, subtract, multiply and divide, support is included for trig functions (sine, cosine, tangent and arctangent) as well as natural \hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 og, exponent, power, and a full range of data conversion macros. Input and output is accomplished via macros that provide for Pascal-like formatting of output. Coupled with a powerful library of floating point subroutines, you can easily put the power of \hich\af4\dbch\af4\loch\f4 b\hich\af4\dbch\af4\loch\f4 oth single and double precision floating point to practical use in your assembly language programs.\par \par \hich\af4\dbch\af4\loch\f4 Serving both as a programming example and as a useful tool are two calculators, one for single precision and one for double precision.\par \par \hich\af4\dbch\af4\loch\f4 Finally, source cod\hich\af4\dbch\af4\loch\f4 e for the subroutine libraries is provided so that you can move your programs to non-standard hardware configurations, or simply explore the subroutines.\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Installation\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In this package are three disks. As with other Byte Works programs, they are unlocked a\hich\af4\dbch\af4\loch\f4 nd copyable. Start by making backup copies of all of the disks. Two of the disks contain only source code, and can be ignored for now. These are the Single Precision Source and Double Precision Source. The last disk, Floating Point, contains the files we \hich\af4\dbch\af4\loch\f4 w\hich\af4\dbch\af4\loch\f4 ill use right away.\par \par \hich\af4\dbch\af4\loch\f4 On the floating point disk are three types of files. The first are the macro libraries. The macros are in three files, all starting with SUP. They really don't need to be placed anywhere specific, but if you have a disk where you keep \hich\af4\dbch\af4\loch\f4 all of your other macros, move those files to the same place now. Also, be aware that some of the macros make use of macros in the standard ORCA macro library. When using MACGEN to build libraries for your programs, It will be convenient to have them all \hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4 ogether.\par \par \hich\af4\dbch\af4\loch\f4 Next are the subroutine libraries. These are in the two files F.FLOAT.A and G.DOUBLE.A. These should be moved to the disk (or directory) where you keep the subroutine libraries that came with the original ORCA/M package. Since the linker will onl\hich\af4\dbch\af4\loch\f4 y search one place for libraries, it is important that these files be put in the correct place. If you are using the ORCA/M disks in the configuration In which they were shipped, this would mean placing the library files on the /LIBRARY disk. Just as Impo\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 tant is the order in which the files appear. If you catalog the libraries, you will find that they all start with an alphabetic character followed by a dot. When the files are alphabetized, they are in the proper order. If they are not in the proper order\hich\af4\dbch\af4\loch\f4 ,\hich\af4\dbch\af4\loch\f4  you will get link errors when trying to use the floating point libraries. Use the COMPRESS command to put them in order.\par \par \hich\af4\dbch\af4\loch\f4 Finally, there are two files called CALCF and CALCD. These are the floating point calculators, described later.\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Data Formats\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 These \hich\af4\dbch\af4\loch\f4 libraries include support for both single and double precision floating point numbers. In both cases, the IEEE floating point standard Is used for the format of-the numbers. Note that although the IEEE floating point standard is observed for format, the f\hich\af4\dbch\af4\loch\f4 u\hich\af4\dbch\af4\loch\f4 ll standard is not implemented. This is because of the overhead involved. By conforming with the standard, but not fully implementing it, the subroutines have been kept smaller and faster than they would otherwise be.\par \par \hich\af4\dbch\af4\loch\f4 Single precision numbers require four\hich\af4\dbch\af4\loch\f4  bytes of storage each. The first bit is a sign bit. The next eight bits are the displaced exponent, giving a number range from about IE-38 to 1E38. Numbers are always normalized, so the most significant bit of the mantissa is always one. Since it Is know\hich\af4\dbch\af4\loch\f4 n\hich\af4\dbch\af4\loch\f4 , it is not actually coded - the remaining 23 bits of the number are bits 2 to 24 of the mantissa. This gives slightly more than seven decimal digits of accuracy.\par \par \hich\af4\dbch\af4\loch\f4 Double precision numbers require eight bytes of storage each. Again, the first bit is the si\hich\af4\dbch\af4\loch\f4 gn bit. The next eleven bits are the exponent, giving a number range from IE-308 to 1E308. An implied most significant mantissa bit gives 53 significant bits in the mantissa, resulting in nearly sixteen digit accuracy.\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 The Calculators\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Two calculators are\hich\af4\dbch\af4\loch\f4  provided, one for single precision and one for double precision. They work the same, and will be described together here. The single precision calculator is called CALCF, and the double precision calculator is called CALCD.\par \par \hich\af4\dbch\af4\loch\f4 When you run one of the calcul\hich\af4\dbch\af4\loch\f4 ators, you get a copyright message and the familiar pound sign prompt. Incidentally, you can run the calculators from ORCA/M or under ProDOS's BASIC.SYSTEM since they do not access the disk, they can even be moved to DOS and executed there. Once the promp\hich\af4\dbch\af4\loch\f4 t\hich\af4\dbch\af4\loch\f4  appears, the program is waiting for a command. The commands look a great deal like BASIC statements entered from the immediate execution mode. You can type a question mark followed by an expression to get the program to write an answer immediately. For e\hich\af4\dbch\af4\loch\f4 x\hich\af4\dbch\af4\loch\f4 ample, try typing\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 ? 1+1\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 In addition, the calculator supports twenty-six predefined variables. Each variable Is identified as an alphabetic character. All except P start out as zero - P starts out as pi, to machine accuracy. The variables can be used in e\hich\af4\dbch\af4\loch\f4 xpressions or assigned a value. For example, try\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 A=1.5\par ?A*2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 By now you have noticed that the calculator prints its results twice - once as a decimal value, and once as a hexadecimal value. The hexadecimal value Is what the number would look like in memor\hich\af4\dbch\af4\loch\f4 y.\par \par \hich\af4\dbch\af4\loch\f4 Like BASIC, the calculators let you use parenthesis and most familiar operators and functions. Operators have their standard precedence. Below is a summary of the operators and functions provided.\par \par }\pard \s17\qj\li720\keepn\widctlpar\tx2160\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Operator}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Operation}{\par \par \hich\af4\dbch\af4\loch\f4 +\tab addition\par \hich\af4\dbch\af4\loch\f4 -\tab subtraction\par \hich\af4\dbch\af4\loch\f4 *\tab multipl\hich\af4\dbch\af4\loch\f4 ication\par \hich\af4\dbch\af4\loch\f4 /\tab division\par \hich\af4\dbch\af4\loch\f4 ^\tab raise a number to a power\par \hich\af4\dbch\af4\loch\f4 ABS\tab absolute value function \par \hich\af4\dbch\af4\loch\f4 SIGN\tab sign function; returns -1, 0 or 1 \par \hich\af4\dbch\af4\loch\f4 SQRT\tab square root function \par \hich\af4\dbch\af4\loch\f4 RANDOM\tab return a random number from 0..1 \par \hich\af4\dbch\af4\loch\f4 SIN\tab sine function \par \hich\af4\dbch\af4\loch\f4 COS\tab cosine function \par \hich\af4\dbch\af4\loch\f4 TAN\tab tangent function \par \hich\af4\dbch\af4\loch\f4 ARCTAN\tab arc\hich\af4\dbch\af4\loch\f4 tangent function \par \hich\af4\dbch\af4\loch\f4 LN\tab natural log function \par \hich\af4\dbch\af4\loch\f4 EXP\tab exponent function \par \hich\af4\dbch\af4\loch\f4 INT\tab integer function\par }\pard \s17\qj\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 As you can see, there are a rich variety of operations allowed. All of them are also supported as macros In the macro library. The examples below illustrate the use of \hich\af4\dbch\af4\loch\f4 these functions and operators.\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 ?ABS(-10)\par ?2^10\par ?EXP(l)\par ?SIN(P/2)\par ?P\par ?INT(-1.5)\par ?1+2*3\par ?(1+2)*3\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Addressing Modes\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The addressing modes provided by the floating point macros duplicate those already familiar from the macros provided with ORCA/M. The informa\hich\af4\dbch\af4\loch\f4 tion is included here for completeness.\par \par \hich\af4\dbch\af4\loch\f4 Like the instruction set of the CPU, macros use a variety of addressing modes to increase the power and flexibility of each macro. There are four addressing modes supported by the macros: immediate, absolute, indire\hich\af4\dbch\af4\loch\f4 ct and stack.\par \par \hich\af4\dbch\af4\loch\f4 Immediate addressing is available on all macros that require an input to perform their function. An immediate operand is coded as a pound sign followed by the value for the operand. For example,\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 PUTF  #1.5\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 would write the number 1.500000 E\hich\af4\dbch\af4\loch\f4 00 to the screen.\par \par \hich\af4\dbch\af4\loch\f4 Absolute addresses are coded as a number, label, or expression, using the same rules as absolute addresses on instructions. An absolute address designates the memory location to use as a source or destination by the macro.\par \par \hich\af4\dbch\af4\loch\f4 Indirect addr\hich\af4\dbch\af4\loch\f4 esses take the form of an address which points to the address of the data rather than the data itself. Indirect addressing is Indicated by enclosing the absolute address where the effective address is stored in soft brackets. Thus,\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 MULF (Pl),(P2)\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 multipl\hich\af4\dbch\af4\loch\f4 ies the number pointed to by PI by the number pointed to by P2, placing the result where P1 points. Note that, unlike the 6502, the pointers do not need to be in zero page.\par \par \hich\af4\dbch\af4\loch\f4 Stack addressing refers to taking a source value from the "evaluation stack", or s\hich\af4\dbch\af4\loch\f4 toring a result there. The evaluation stack is the stack used by ORCA high level languages to pass parameters and evaluate expressions. It is a software stack, distinct from the hardware stack in page 1. The INITSTACK macro (from the macros supplied with \hich\af4\dbch\af4\loch\f4 O\hich\af4\dbch\af4\loch\f4 RCA/M) can be used to set up this stack. A stack operand is indicated using the character.\par \par \hich\af4\dbch\af4\loch\f4 When discussing stack operations, it is customary to refer to the values based on the "top of stack" (TOS). In the ORCA macros, the TOS is designated with an * char\hich\af4\dbch\af4\loch\f4 acter. The value on the top of the stack is said to be at TOS, while the number below the TOS is said to be at TOS-1. With this in mind, the following operation divides the double precision number at TOS-1 by the one at TOS, placing the result on the TOS.\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 The original two numbers are removed from the stack in the process.\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 DIVD *,*\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This addressing mode is very convenient for doing reverse polish notation expressions, and is used heavily in the calculators.\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Error Handling\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Floating point error handling is \hich\af4\dbch\af4\loch\f4 done with the aid of three subroutines in the subroutine library provided with ORCA/M. The first of these is called SYSTRAP. it is called by the floating point subroutines whenever an error condition is detected. SYSTRAP stores an error flag in a zero pag\hich\af4\dbch\af4\loch\f4 e\hich\af4\dbch\af4\loch\f4  location called SYSFERR ($EB) and takes corrective action. Five types of errors are possible - the errors, the error code, and the action taken by SYSFERR are shown in the table below.\par \par }\pard \s17\qj\li720\widctlpar\tx2520\tx4320\adjustright {\ul \hich\af4\dbch\af4\loch\f4 Error}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Number}{\tab }{\ul \hich\af4\dbch\af4\loch\f4 Action}{\par \par \hich\af4\dbch\af4\loch\f4 invalid operation\tab 1\tab result is argument\par \hich\af4\dbch\af4\loch\f4 division \hich\af4\dbch\af4\loch\f4 by zero\tab 2\tab result is infinity\par \hich\af4\dbch\af4\loch\f4 overflow\tab 4\tab result is infinity\par \hich\af4\dbch\af4\loch\f4 underflow\tab 8\tab result is 0\par \hich\af4\dbch\af4\loch\f4 inexact\tab 16\tab best guess given\par }\pard \s17\qj\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Overflow, underflow, and division by zero are all common errors on any floating point system. overflow is when the number is too large to be rep\hich\af4\dbch\af4\loch\f4 resented by a floating point number. Underflow is when the number is too small.. Division by zero is, of course, illegal.\par \par \hich\af4\dbch\af4\loch\f4 The remaining two errors are required by the IEEE floating point standard, and while this package does not fully implement that stand\hich\af4\dbch\af4\loch\f4 ard, It does follow it when possible. Invalid operation refers to trying to do an operation based on illegal inputs. An example is taking the square root of a negative number. Inexact refers to a result that, due to the input, cannot be computed to a reas\hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 nable precision. For example, the sine of 1E20 certainly exists, and is well defined, but' due to the limited precision of floating point numbers, an answer that is as accurate as the floating point format would normally allow cannot be given.\par \par \hich\af4\dbch\af4\loch\f4 When the sy\hich\af4\dbch\af4\loch\f4 stem finds a floating point error, the error number is ORed with the current value of SYSFERR. Note that the error numbers are all powers of two - this means that they can all be found in SYSFERR at the same time! Testing for the errors is relatively simp\hich\af4\dbch\af4\loch\f4 l\hich\af4\dbch\af4\loch\f4 e, since SYSFERR is zero if no error has occurred. if an error has occurred, the library subroutine SYSEROR can be called to print the error message. The following code fragment is one way to do this.\par \par }\pard\plain \s18\li360\keepn\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          LDY   #5             loop counter\par          LDA   SYSFERR        get error codes\par          LDX   #5             initial error #\par LB1      LSR   A              get the error bit \par          BCC   LB2            branch if no error \par          PHA                  save regs\par          TYA\par          PHA\par          TXA\par          PHA\par          JSR   SYSEROR        print the error\par          PLA                  restore regs\par          TAX\par          PLA\par          TAY\par          PLA\par LB2      INX                  inc error number\par          DEY                  loop\par          BNE   LBI\par          LDA   #0             reset SYSFERR\par          STA   SYSFERR\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 This routine will only print the error message, then continue on. If you want the program to stop when an error is found, you need to replace a library subroutine called SYSERIN. SYSERIN\hich\af4\dbch\af4\loch\f4  is called by SYSEROR whenever SYSEROR is called. If SYSERIN returns with the carry flag clear, the error is printed - otherwise the error is not printed. Below is a version of SYSERIN that will place the address of a BRK instruction on the top of the sta\hich\af4\dbch\af4\loch\f4 c\hich\af4\dbch\af4\loch\f4 k, then return to get the error message printed. After the error message has been printed, the program ends with a break.\par \par }\pard\plain \s18\fi360\keepn\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 SYSERIN  START\par \par          PLA                  save old return address\par          TAX\par          PLA\par          TAY\par          LDA   #>BRK-1        set address of break\par          PHA\par          LDA   #<BRK-1\par          PHA\par          TYA                  restore return address\par          PHA\par          TXA\par          PHA\par          CLC                  clearing carry so error\par !                              is printed \par          RTS                  return to SYSEROR\par \par BRK      BRK\par          END\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Naturally, the BRK instruction can be replaced with a more sophisticated error handler, if desired.\par \par \hich\af4\dbch\af4\loch\f4 By the way, the default SYSERIN from the library is just a CLC followe\hich\af4\dbch\af4\loch\f4 d by an RTS.\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Source Code\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The two source code disks contain the source code for the floating point and double precision libraries, as well as the floating point calculators. On the disk labeled Single Precision Source you will find a group of files starti\hich\af4\dbch\af4\loch\f4 ng with FP, as well as a file called COMMON. COMMON is used by all of the ORCA libraries, including the ones shipped with ORCA. It contains the definition of zero page areas and global constants. The files starting with FP, when assembled, produce the lib\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 ary file F.FLOAT.A. On the same disk are some files starting with CF. This is the source code for the floating point calculator.\par \par \hich\af4\dbch\af4\loch\f4 In both cases, there is not enough room on the disk to assemble the files. if you will be assembling them, first split the dis\hich\af4\dbch\af4\loch\f4 k up, placing the source for the libraries on one disk, and the calculator source on another. Especially when assembling the calculator, place the macros on a RAM disk if you have one. The program makes extensive use of macros, and will take a great deal \hich\af4\dbch\af4\loch\f4 o\hich\af4\dbch\af4\loch\f4 f time to assemble if the macros are left on a floppy disk. The MCOPY directive at the beginning of the file CF should be changed to reflect the new location of the macros.\par \par \hich\af4\dbch\af4\loch\f4 The disk labeled Double Precision Source has the same type of source code as the o\hich\af4\dbch\af4\loch\f4 ne labeled Single Precision Source, except that it is for double precision. The calculator files start with CD. The library source is in the files starting with DP, and still require the use of COMMON. Once again, there Isn't enough room on the disk to as\hich\af4\dbch\af4\loch\f4 s\hich\af4\dbch\af4\loch\f4 emble either of these files, so split the disk up if you will be doing anything except looking at the source.\par \par }\pard\plain \s1\keepn\widctlpar\outlinelevel0\adjustright \b\fs36\kerning28\loch\af4\hich\af4\dbch\f4\cgrid {\hich\af4\dbch\af4\loch\f4 Macro Descriptions\par }\pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 The following macro descriptions are in the same format as was used in the ORCA/M Macro Library Reference Manual, which start\hich\af4\dbch\af4\loch\f4 s on page 171 of the ORCA/M manual. All macros will destroy the contents of all of the registers. Since their operation is similar, single and double precision macros are described together. Single precision macros always end with the letter (for Floating\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 point), and double precision macros always end with D (Double precision).\par \sect }\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \hich\af4\dbch\af4\loch\f4 ABSx\tab Absolute Value\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab ABSD N1,N2\par LAB\tab ABSF N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The result is the absolute value of the argument. N2 is opt\hich\af4\dbch\af4\loch\f4 ional; if it Is coded, the result is placed there, if it Is not coded, the result is placed at N1 No errors are possible.\par \par \hich\af4\dbch\af4\loch\f4 Coding Examples\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          ABSF  NUM1,*              places the\par !                                   absolute value of\par !                                   NUM1 on the\par !                                   software stack \par          ABSD  #1,NUM1             places 1 at NUM1\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \hich\af4\dbch\af4\loch\f4 ADDx\tab Addition\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      ADDD  N1,N2,N3\par LAB      ADDF  N1,N2,N3\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab First argument.\par N2\tab Second argument.\par N3 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The two arguments are added together. If N3 is coded, the result is stored there; if it is not coded, the result is stored at N1. Overflows and underflows are possible.\par \par \hich\af4\dbch\af4\loch\f4 Coding Examples:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          ADDF  *,*                 perform a stack \par !                                   addition, placing\par !                                   the result on the \par !                                   stack\par          ADDD  NUM1,#3.14159       add a constant to\par !                                   NUM1\par \par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \hich\af4\dbch\af4\loch\f4 ATANx\tab Arctangent\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      ATAND N1,N2\par LAB      ATANF N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The arctangent of the argument N1 is extracted. N2 is optional. if it is coded, the result is stored there; o\hich\af4\dbch\af4\loch\f4 therwise, the result is stored at N1. The result is returned in radians, and is In the range -pi/2..pi/2.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          ATANF (P1)                replace the number \par !                                   pointed to by P1\par !                                   with its \par !                                   arctangent\par \par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \hich\af4\dbch\af4\loch\f4 CHSx.\tab Change Sign\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      CHSD  N1,N2\par LAB      CHSF  N1 N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The result is the negation of N1. If N2 is coded, the\hich\af4\dbch\af4\loch\f4  result is placed there; otherwise, the result is placed at N1.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          CHSD  #-1.2,*             places 1.2 on the \par !                                   software stack\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \hich\af4\dbch\af4\loch\f4 CMPx\tab Compare\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab CMPD N1,N2\par LAB\tab CMPF N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab First number to compare.\par N2\tab Second number to compare.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The first number is compared to the second. If first number is less than the second number, the flag is cleared and the zero flag is set to 0, indicating a non-equal result. The\hich\af4\dbch\af4\loch\f4  branches BCC, BLT and BNE will then be taken. If N1 is equal to N2, the carry flag is set, and the zero flag Is set to 1. The branches BEQ, BGE and BCS will then be taken. If N1 is greater than N2, the carry flag is set and the zero flag is set to 0. The\hich\af4\dbch\af4\loch\f4  \hich\af4\dbch\af4\loch\f4 branches BGE, BCS and BNE will then be taken.\par \par \hich\af4\dbch\af4\loch\f4 Note that the settings of the flags and the resulting conditional branches mimic the operation of the 6502 CMP instruction.\par \par \hich\af4\dbch\af4\loch\f4 Unlike most two operand instructions, both operands are required.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          CMPF  NUM1,#0\par          BLT   LAB1                branch if negative\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\sect }\sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \hich\af4\dbch\af4\loch\f4 CNVxy\tab Convert Type x to Type y\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      CNV2D N1,N2\par LAB      CNV2F N1,N2\par LAB      CNV4D N1,N2\par LAB      CNV4F N1,N2\par LAB      CNV8D N1,N2\par LAB      CNV8F N1,N2\par LAB      CNVD2 N1,N2\par LAB      CNVD4 N1,N2\par LAB      CNVD8 N1,N2\par LAB      CNVDF N1,N2\par LAB      CNVDS N1,N2\par LAB      CNVF2 N1,N2\par LAB      CNVF4 N1,N2\par LAB      CNVF8 N1,N2\par LAB      CNVFD N1,N2\par LAB      CNVFS N1,N2\par LAB      CNVSD N1,N2\par LAB      CNVSF N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 These macros are used to convert from one type to another type. By varying the characters substituted for x and y, floating point an double precision numbers can be converted to or from any type supported by t\hich\af4\dbch\af4\loch\f4 his package, or any type in the standard macro library supplied with ORCA/M.\par \par \hich\af4\dbch\af4\loch\f4 Both operands can be specified using absolute, Indirect, or stack addressing. it is also possible to use immediate addressing on the argument, although this is not recommended (i\hich\af4\dbch\af4\loch\f4 t would be more efficient to simply use a constant in its original form). The argument is converted from the type specified by x to the type specified by y. If N2 is coded, the result is stored there; otherwise, the result is stored at N1. Overflow and un\hich\af4\dbch\af4\loch\f4 d\hich\af4\dbch\af4\loch\f4 erflow errors are possible during the conversion process.\par \par \hich\af4\dbch\af4\loch\f4 The letters used to identify the various types are!\par \par }\pard \s17\qj\li720\widctlpar\tx1080\adjustright {\hich\af4\dbch\af4\loch\f4 2\tab two byte signed integer\par \hich\af4\dbch\af4\loch\f4 4\tab four byte signed integer \par \hich\af4\dbch\af4\loch\f4 8\tab eight byte signed integer \par \hich\af4\dbch\af4\loch\f4 D\tab double precision floating point \par \hich\af4\dbch\af4\loch\f4 F\tab single precision floatin\hich\af4\dbch\af4\loch\f4 g point \par \hich\af4\dbch\af4\loch\f4 S\tab string\par }\pard \s17\qj\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          CNVD2 DP,I2               convert the double \par !                                   precision number \par !                                   DP to a two byte \par !                                   integer\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \sect \sectd \linex-32767\headery2520\footery2520\endnhere\sectdefaultcl \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid C0Sx\tab Cosine\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      COSD  N1,N2\par LAB      COSF  N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The cosine of the argument is extracted. if N2 is coded, the result is placed there; otherwise, the result Is placed at N1. The argument must \hich\af4\dbch\af4\loch\f4 be specified in radians. Underflow errors are possible. If the argument exceeds 1303 for single precision floating point, or 210828714 for double precision floating point, a precise answer is not possible and an inexact error Is returned. (Inexact is a ty\hich\af4\dbch\af4\loch\f4 p\hich\af4\dbch\af4\loch\f4 e of error under the IEEE standard, not an unpredictable error!)\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          COSD  N1                  N1 is replaced by \par !                                   its cosine\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page DIVx\tab Division\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      DIVD  N1,N2,N3\par LAB      DIVF  N1,N2,N3\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Numerator.\par N2\tab Denominator.\par N3 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 N1 is divided by N2. If 03 is coded, the result is placed there; otherwise, the result is placed at N1. Overflow, underflow and division by zero errors are possible.\par \par \hich\af4\dbch\af4\loch\f4 Coding Ex\hich\af4\dbch\af4\loch\f4 amples:\par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \par          DIVF  N1 #2               divide N1 by 2\par          DIVD  N1,#2,N2            do the same, \par !                                   placing the \par !                                   result at N2\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page EXPx\tab Exponent\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      EXPD  N1,N2\par LAB      EXPF  N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par \hich\af4\dbch\af4\loch\f4 LAB\tab \tab Label.\par \hich\af4\dbch\af4\loch\f4 N1\tab Argument.\par \hich\af4\dbch\af4\loch\f4 N2 \tab Result.\par \par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The exponent of the argument is extracted. If N2 is coded, the result is placed there, otherwise the result is placed at N1. Overflow and underflow errors are possible.\par \par \hich\af4\dbch\af4\loch\f4 Coding\hich\af4\dbch\af4\loch\f4  Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          EXPF  #1,N1               places e at N1\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page FERR\tab Flag a Floating Point Error\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      FERR  NUM\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par NUM\tab Error number.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 This macro is used to flag a floating point error. its main use is in new flo\hich\af4\dbch\af4\loch\f4 ating point routines that may be added to the library. The operand must be a valid operand for a LDX instruction. Errors which are currently defined are:\par \par }\pard \s17\qj\li720\widctlpar\tx1080\adjustright {\hich\af4\dbch\af4\loch\f4 1\tab invalid operation\par \hich\af4\dbch\af4\loch\f4 2\tab division by zero\par \hich\af4\dbch\af4\loch\f4 4\tab overflow\par \hich\af4\dbch\af4\loch\f4 8\tab underflow\par \hich\af4\dbch\af4\loch\f4 16 \tab inexact\par }\pard \s17\qj\widctlpar\adjustright {\par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 label    op    operand             comment\par          FERR  #1                  flag invalid\par !                                   operation\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page \hich\af4\dbch\af4\loch\f4 GETx\tab Read a Number\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      GETD  N1,CR\par LAB      GETF  N1,CR\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Location to place the number.\par CR\tab Scan to end of line flag.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The GET macros are the standard way to read numbers from external devices. They receive all information from the $38 input hook, which means that the input stream can be redirected to read from disk drives or oth\hich\af4\dbch\af4\loch\f4 er input devices by simply placing the address of the character input routine at $38.\par \par \hich\af4\dbch\af4\loch\f4 N1 is the location to store the number read. CR is a flag. If anything is coded in the CR field, the input routine will scan to the end of the input line after reading t\hich\af4\dbch\af4\loch\f4 he number. if CR is not coded, the input routine consumes one character after the last character that is in the number. Generally, that one character is a blank or carriage return.\par \par \hich\af4\dbch\af4\loch\f4 Coding Examples:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          GETF  FP                  reads a floating\par !                                   point number from\par !                                   the keyboard\par          GETD  DP,CR=T             reads a double\par !                                   precision number,\par !                                   then scans to the\par !                                   end of the line\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page INTx\tab Integer\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      INTD  N1,N2\par LAB      INTF  N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The result is the largest integer that is less than or equal to the argumen\hich\af4\dbch\af4\loch\f4 t. If N2 is coded, the result is stored there; otherwise, the result Is stored at N1.\par \par \hich\af4\dbch\af4\loch\f4 Note that the largest integer part of -1.5 is -2. That is the normal interpretation of the integer function, but differs from the implementation used under DOS ORCA/M. T\hich\af4\dbch\af4\loch\f4 here, the function returned the integer part, ignoring the sign, so the result would have been -1.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          INTD  NUM1,NUM2           NUM2 = INT(NUM1)\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page \hich\af4\dbch\af4\loch\f4 LNx\tab Natural Log\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      LND   N1,N2\par LAB      LNF   N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The natural log of the argument is placed at N2 if N2 is coded, and at N1 if it is not. Underflows are possible on small arguments. An invalid operation error will result if the argument is zero or negative.\par \par \hich\af4\dbch\af4\loch\f4 Co\hich\af4\dbch\af4\loch\f4 ding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          EXPF  #1,NUM1             NUM1 = 2.718282\par          LNF   NUM1,NUM2           NUM2 = 1\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par }\pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page \hich\af4\dbch\af4\loch\f4 MULx\tab Multiplication\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      MULD  N1,N2,N3\par LAB      MULF  N1,N2,N3\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab First argument.\par N2\tab Second argument.\par N3 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The two numbers at N1 and N2 are multiplied. If N3 is coded, the result is placed there; otherwise, the result is placed at N1. Overflow and underflow errors are possible.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          MULD  *,(P1)              multiply the top\par !                                   of stack by the\par !                                   number pointed to\par !                                   by P1, placing\par !                                   the result on the\par !                                   top of stack\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page PUTx\tab Write a Number\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      PUTD  N1,F1,F2,CR\par LAB      PUTF  N1,F1,F2,CR\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Number to write.\par F1\tab Field width.\par F2\tab Significant digits.\par CR\tab Carriage return flag.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The number at N1 is written to the cur\hich\af4\dbch\af4\loch\f4 rent output device. Since $36 contains the name of the current output device, the output can be redirected to any character oriented device by simply placing the name of a subroutine that writes a character to the device at $36.\par \par \hich\af4\dbch\af4\loch\f4 F1 Is an optional field wi\hich\af4\dbch\af4\loch\f4 dth that defaults to zero. if specified, It defines the width of a field that the number will be right justified in. If the field width is less than or equal to the number of characters needed to write the number, the number will be written out without le\hich\af4\dbch\af4\loch\f4 a\hich\af4\dbch\af4\loch\f4 ding blanks. If the field width is greater than the number of characters needed to write the number, enough blanks will be written out before the number to right justify it in the field.\par \par \hich\af4\dbch\af4\loch\f4 F2 specifies the number of significant digits to write. if it is lef\hich\af4\dbch\af4\loch\f4 t out, or if zero is used, the number will be written in exponential format to machine precision.\par \par \hich\af4\dbch\af4\loch\f4 CR is a flag that indicates if the number should be followed by a carriage return. If anything Is coded in this field, the number will be followed by a carri\hich\af4\dbch\af4\loch\f4 age return. If nothing is coded here, further output will be on the same line.\par \par \hich\af4\dbch\af4\loch\f4 Coding Examples:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          PUTD  NUM1                write the numbers\par          PUTD  NUM2,,#20,CR=T       on the same line\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page PWRx\tab Raise a Number to a Power\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      PWRD  N1,N2,N3\par LAB      PWRF  N1,N2,N3\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2\tab Power.\par N3 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 N1 is raised to the N2 power. If W3 is coded, the result is placed there; otherwise, the result is placed at N1. N1 must be positive and nonzero, \hich\af4\dbch\af4\loch\f4 or an invalid operation error will result. Overflow and underflow errors are also possible.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          PWRF  #2,NUM1,NUM2        NUM2 = 2^NUM1\par \par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page RANx\tab Random Number\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      RAND  N1\par LAB      RANF  N1\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\tx1080\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 A pseudo random number in the range 0.0 to 1.0 (including 0.0 but not 1.0) is generated and stored at N1. Since no argument is required, this is the only floating point macro that uses only one parameter.\par \par \hich\af4\dbch\af4\loch\f4 The random number generator sho\hich\af4\dbch\af4\loch\f4 uld be initialized using the SEED macro from the standard library supplied with ORCA/M before this macro is used.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          SEED                      generate a random\par          RAND  NUM1                 number\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page SIGNx\tab Sign\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      SIGND NUM2\par LAB      SIGNF N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 If the argument is less than zero, the result is -1. If the argument is zero, the result is also zero. If the argument is positive, the result is 1. If N2 is c\hich\af4\dbch\af4\loch\f4 oded, the result Is placed there; otherwise, the result is placed at N1.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          SIGND NUM1                replace NUM1 by\par !                                   its sign\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page SINx\tab Sine\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      SIND  N1,N2\par LAB      SINF  N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operan\hich\af4\dbch\af4\loch\f4 ds:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The sine of the argument is extracted. if N2 is coded, the result is placed there; otherwise, the result is placed at N1. The argument must be specified in radians. Underflow errors are possible. If t\hich\af4\dbch\af4\loch\f4 he argument exceeds 1303 for single precision floating point, or 210828714 for double precision floating point, a precise answer is not possible and an inexact error is returned. (Inexact is a type of error under the IEEE standard, not an unpredictable er\hich\af4\dbch\af4\loch\f4 r\hich\af4\dbch\af4\loch\f4 or!)\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          SINF  ANGLE,SIN           SIN = SIN(ANGLE)\par \pard\plain \s22\widctlpar\brdrb\brdrs\brdrw10\brsp20 \tqr\tx6120\adjustright \b\fs28\loch\af4\hich\af4\dbch\f4\cgrid \page SQRTx\tab Square Root\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Forms:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB      SQRTD N1,N2\par LAB      SQRTF N1,N2\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Operands:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6 LAB\tab Label.\par N1\tab Argument.\par N2 \tab Result.\par \pard\plain \s17\qj\widctlpar\adjustright \fs20\loch\af4\hich\af4\dbch\f4\cgrid {\par \hich\af4\dbch\af4\loch\f4 Description:\par \par \hich\af4\dbch\af4\loch\f4 The result is the square root of the argument. I\hich\af4\dbch\af4\loch\f4 f N2 is coded, the result is placed there; otherwise, the result is placed at N1. If the argument is negative, an invalid operation error results. An underflow error is also possible.\par \par \hich\af4\dbch\af4\loch\f4 Coding Example:\par \par }\pard\plain \s18\fi360\widctlpar\adjustright \fs18\loch\af6\hich\af6\dbch\f4\cgrid \hich\af6\dbch\af4\loch\f6          SQRTF #2,NUM1             NUM1 = 1.414214\par \par }