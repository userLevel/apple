;----------------------------------------------------------------;; Marinetti TCP/IP interfaces for GSoft BASIC.;; By Mike Westerfield, Byte Works, Inc.; This file is released to the public domain.;;----------------------------------------------------------------					; Various numeric equates					;------------------------const conEthernet = 1			; Connect methodsconst conMacIP = 2const conPPPCustom = 3const conSLIP = 4const conTest = 5const conPPP = 6const conDirectConnect = 7const conAppleEthernet = 8const protocolAll = 0			; Protocolsconst protocolICMP = 1const protocolTCP = 6const protocolUDP = 17const terrOK = 0			; Tool Error codesconst terrBADIPID = $3601		; Bad IPID for this requestconst terrNOCONNECTION = $3602	; Not connected to the networkconst terrNORECONDATA = $3603		; No reconnect dataconst terrLINKERROR = $3604		; Problem with the link layerconst terrSCRIPTFAILED = $3605	; The script failed / timed outconst terrCONNECTED = $3606		; Not while connected to the networkconst terrSOCKETOPEN = $3607		; Socket still openconst terrINITNOTFOUND = $3608	; Init not found in memoryconst terrVERSIONMISMATCH = $3609	; Different versions of tool, init, cdevconst terrBADTUNETABLELEN = $360A	; Bad tune table lengthconst terrIPIDTABLEFULL = $360B	; IPID table fullconst terrNOICMPQUEUED = $360C	; No ICMP datagrams in the queueconst terrLOGINSPENDING = $360D	; There are still IPIDs logged inconst terrTCPIPNOTACTIVE = $360E	; Not active. Probably in P8 mode.const terrNODNSERVERS = $360F		; No servers registered with Marinetticonst terrDNRBUSY = $3610		; DNR is current busy. Try again laterconst terrNOLINKLAYER = $3611		; Unable to load link layer moduleconst terrBADLINKLAYER = $3612	; Not a link layer moduleconst terrENJOYCOKE = $3613		; But not so close to the keyboardconst terrNORECONSUPPRT = $3614	; This module doesn't support reconnectconst terrUSERABORTED = $3615		; The user aborted the connect/disconnect scriptconst terrBADUSERPASS = $3616		; Invalid username and/or passwordconst terrBADPARAMETER = $3617	; Invalid parameter for this callconst terrBADENVIRONMENT = $3618	; No desktop or tools not startedconst terrNOINCOMING = $3619		; There is no pending incoming requestconst terrLINKBUSY = $361A		; Modem or interface is busyconst terrNOLINKINTERFACE = $361B	; No dial tone or similarconst terrNOLINKRESPONSE = $361C	; No modem answer or similarconst terrNODNRPENDING = $361D	; No such entry in DNR listconst terrBADALIVEMINUTES = $361E	; Minutes value is invalidconst terrBUFFERTOOSMALL = $361F	; Buffer is too smallconst terrNOTSERVER = $3620		; This ipid is not set up as a serverconst terrmask = $00FF					; DNR status codesconst DNR_Pending = 0			; Request still being processedconst DNR_OK = 1			; Request completed successfullyconst DNR_Failed = 2			; Network error/timeoutconst DNR_NoDNSEntry = 3		; Requested domain has no DNS entryconst DNR_Cancelled = 4		; Cancelled by user					; TCP logic errorsconst tcperrOK = 0			; "tcperr" error codes from TCP RFCconst tcperrDeafDestPort = 1const tcperrHostReset = 2const tcperrConExists = 3		; "connection already exists"const tcperrConIllegal = 4		; "connection illegal for this process"const tcperrNoResources = 5		; "insuficient resources"const tcperrNoSocket = 6		; "foreign socket unspecified"const tcperrBadPrec = 7		; "precedence not allowed"const tcperrBadSec = 8		; "security/compartment not allowed"const tcperrBadConnection = 9		; "connection does not exist"const tcperrConClosing = 10		; "connection closing"const tcperrClosing = 11		; "closing"const tcperrConReset = 12		; "connection reset"const tcperrUserTimeout = 13		; "connection aborted due to user timeout"const tcperrConRefused = 14		; "connection refused"const TCPSCLOSED = 0			; TCP statesconst TCPSLISTEN = 1const TCPSSYNSENT = 2const TCPSSYNRCVD = 3const TCPSESTABLISHED = 4const TCPSFINWAIT1 = 5const TCPSFINWAIT2 = 6const TCPSCLOSEWAIT = 7const TCPSLASTACK = 8const TCPSCLOSING = 9const TCPSTIMEWAIT = 10const nTCPSTATES = 11const TCPIPSaysHello = $8101const TCPIPSaysNetworkUp = $8102const TCPIPSaysNetworkDown = $8103; Miscellaneous datagram header equates;--------------------------------------; ICMP types - TCP_TYPE - Comer/Steven, vol II, p128const ICT_ECHORP = 0const ICT_DESTUR = 3const ICT_SRCQ = 4const ICT_REDIRECT = 5const ICT_ECHORQ = 8const ICT_TIMEX = 11const ICT_PARAMP = 12const ICT_TIMERQ = 13const ICT_TIMERP = 14const ICT_INFORQ = 15const ICT_INFORP = 16const ICT_MASKRQ = 17const ICT_MASKRP = 18const ictmax = 19                                                                                       const ICC_NETUR = 0			; p128, Internetworking with TCP/IP Vol 2.const ICC_HOSTUR = 1			;       Design Implementation, and Internalsconst ICC_PROTOUR = 2			;       Douglas E. Comer / David L. Stevensconst ICC_PORTUR = 3const ICC_FNADF = 4const ICC_SRCRT = 5const ICC_NETRD = 0const ICC_HOSTRD = 1const IC_TOSNRD = 2const IC_TOSHRD = 3const ICC_TIMEX = 0const ICC_FTIMEX = 1const IC_HLEN = 8const IC_PADLEN = 3const IC_RDTTL = 300					; UDP standard port numbersconst UP_ECHO = 7			; echo serverconst UP_DISCARD = 9			; discard packetconst UP_USERS = 11			; users serverconst UP_DAYTIME = 13			; day and time serverconst UP_QOTD = 17			; quote of the day serverconst UP_CHARGEN = 19			; character generatorconst UP_TIME = 37			; time serverconst UP_WHOIS = 43			; who is server (user information)const UP_DNAME = 53			; domain name serverconst UP_TFTP = 69			; trivial file transfer protocol serverconst UP_RWHO = 513			; remote who server (ruptime)const UP_RIP = 520			; route information exchange (RIP)const ip_verlen = 0			; IP headerconst ip_tos = 1const ip_len = 2const ip_id = 4const ip_fragoff = 6const ip_ttl = 8const ip_proto = 9			; protocolconst ip_cksum = 10const ip_src = 12const ip_dst = 16const ip_data = 20					; ICMP headerconst ic_type = 0			; ICT_*const ic_code = 1			; ICC_*const ic_cksum = 2const ic_data = 4const ic_echo_id = 4			; Echo Offsetsconst ic_echo_seq = 6					; UDP headerconst u_source = 0			; source UDP port number - UP_*const u_dst = 2			; destination UDP port numberconst u_len = 4			; length of UDP dataconst u_cksum = 6			; UDP checksum (0 = none)const u_data = 8					; TCP header*/const tcp_sport = 0			; source port - TCP_*const tcp_dport = 2			; destination portconst tcp_seq = 4			; sequence numberconst tcp_ack = 8			; acknowledgement numberconst tcp_offset = 12			; longword count in header (def=6)const tcp_code = 13			; flagsconst tcp_window = 14			; window advertisementconst tcp_cksum = 16			; checksumconst tcp_urgptr = 18			; urgent pointerconst tcp_options = 20const tcp_data = 20type boolean as integertype char as bytetype ptr as pointer to bytetype handle as pointer to ptrtype pString(256) as char               ; the first byte is the number of characterstype pStringPtr as pointer to pStringtype cString(256) as char               ; mark the end of the string with 0type cStringPtr as pointer to cStringtype errTable    tcpDGMSTBLEN as long          ; The total length of the error table, in bytes, including tcpDGMSTBLEN    tcpDGMSTOTAL as long          ; Total datagrams received (good and bad)    tcpDGMSFRAGSIN as long        ; Got a fragment (datagram is queued to frag list)    tcpDGMSFRAGSLOST as long      ; Fragment purged after timeout in queue    tcpDGMSBUILT as long          ; Built a datagram from fragments (is then queued)    tcpDGMSOK as long             ; Datagrams queued from link or tcpDGMSBUILT    tcpDGMSBADCHK as long         ; Bad IP checksum (datagram is purged)    tcpDGMSBADHEADLEN as long     ; Bad IP header lengths (datagram is purged)    tcpDGMSBADPROTO as long       ; Unsupported protocols (added to misc queue)    tcpDGMSBADIP as long          ; Not my or loopback IP (datagram is purged)    tcpDGMSICMP as long           ; ICMP total datagrams in (good and bad)    tcpDGMSICMPUSER as long       ; ICMP user datagrams    tcpDGMSICMPKERNEL as long     ; ICMP kernel datagrams    tcpDGMSICMPBAD as long        ; ICMP bad checksum or datagram too short    tcpDGMSICMPBADTYPE as long    ; ICMP bad ic_type    tcpDGMSICMPBADCODE as long    ; ICMP bad ic_code    tcpDGMSICMPECHORQ as long     ; ICMP ECHORQs in    tcpDGMSICMPECHORQOUT as long  ; ICMP ECHORQ replies sent out    tcpDGMSICMPECHORP as long     ; ICMP ECHORPs in    tcpDGMSICMPECHORPBADID as long ; ICMP ECHORPs unclaimed    tcpDGMSUDP as long            ; UDPs OK (added to UDP queue)    tcpDGMSUDPBAD as long         ; Bad UDP header (datagram is purged)    tcpDGMSUDPNOPORT as long      ; No such logged in port (datagram is purged)    tcpDGMSTCP as long            ; TCPs OK (returned to TCP main logic)    tcpDGMSTCPBAD as long         ; Bad TCP header or checksum (datagram is purged)    tcpDGMSTCPNOPORT as long      ; No such logged in port (datagram is purged)    tcpDGMSTCPQUEUED as long      ; Arrived before required (datagram is queued)    tcpDGMSTCPOLD as long         ; Already received this segment (datagram is purged)    tcpDGMSOFRAGMENTS as long     ; Fragments transmitted    tcpDGMSFRAGMENTED as long     ; Datagrams fragmented for transmissionend typetype errTablePtr as pointer to errTabletype tuneRecord                     ; tuning table    tcpTUNECOUNT as integer         ; The total length of the tuning table,                                    ; in bytes, including tcpTUNECOUNT.                                    ; Currently 10.    tcpTUNEIPUSERPOLLCT as integer  ; The number of datagrams Marinetti will                                    ; build per TCPIPPoll request. The valid                                    ; range is 1 through 10 inclusive. The                                    ; default is 2.    tcpTUNEIPRUNQFREQ as integer    ; The RunQ frequency value (60ths of a                                    ; second). The default is 30 (half a                                    ; second).    tcpTUNEIPRUNQCT as integer      ; The number of datagrams Marinetti will                                    ; build per RunQ dispatch. The valid                                    ; range is 1 through 10 inclusive. The                                    ; default is 2.    tcpTUNETCPUSERPOLL as integer   ; The TCP steps to perform per user, per                                    ; TCPIPPoll request and RunQ dispatch.                                    ; The valid range is 1 through 10                                    ; inclusive. The default is 2.end typetype tunePtr as pointer to tuneRecordtype username    length as byte    name(49) as charend typetype usernamePtr as pointer to usernametype password    length as byte    name(49) as charend typetype passwordPtr as pointer to passwordtype hostName    length as byte    name(29) as byteend typetype hostNamePtr as pointer to hostNametype module    liMethodID as integer            ; The connect method. See the conXXX                                     ; equates at the end of this document    liName(20) as byte               ; Pstring name of the module    liVersion as long                ; rVersion (type $8029 resource layout)                                     ; of the module    liFlags as integer               ; Contains the following flags:                                     ;    bit 15 This link layer uses the                                     ;       built in Apple IIGS serial ports                                     ;    bits 14-0 Reserved - set to zeros    liFilename(16) as byte           ; Pstring filename of the module    liMenuItem(14) as byte           ; bytes rMenuItem template ready for use,                                     ; which defines this connect method as a                                     ; menu itemend typetype moduleListPtr as pointer to moduletype linkInfoBlk    liMethodID as integer  ; The connect method. New modules will need to                           ; apply to the author for a unique ID to use.                           ; See conXXX equates for details of already                           ; defined values    liName(20) as byte     ; Pstring name of the module    liVersion as long      ; rVersion (type $8029 resource layout) of the                           ;     module    liFlags as integer     ; Contains the following flags:                           ;    bit15 This link layer uses the built in Apple                           ;        IIGS serial ports                           ;    bits14-1 Reserved - set to zeros                           ;    bit0 Indicates whether the module contains an                           ;        rIcon resourceend typetype linkInfoBlkPtr as pointer to linkInfoBlktype DNSRec    DNSMain as long        ; Main DNS IP address    DNSAux as long         ; Auxilliary DNS IP addressend typetype DNSRecPtr as pointer to DNSRectype dnrBuffer    DNRstatus as integer    ; Current status of DNR for this request    DNRIPaddress as long    ; Returned IP addressend typetype dnrBufferPtr as pointer to dnrBuffertype udpVars    uvQueueSize as integer    ; Number of entries in receive queue    uvError as integer        ; Last ICMP type 3 error code    uvErrorTick as long       ; Tick of when error occurred    uvCount as long           ; Total received for this ipid    uvTotalCount as long      ; Total received for all ipids    uvDispatchFlag as integer ; UDP dispatch flagend typetype udpVarsPtr as pointer to udpVarstype rrBuff    rrBuffCount as long       ; Length of the returned data    rrBuffHandle as handle    ; Handle to the data    rrMoreFlag as boolean     ; Is there more data received?    rrPushFlag as boolean     ; word Was this buffer pushed?    rrUrgentFlag as boolean   ; Is this urgent data?end typetype rrBuffPtr as pointer to rrBufftype rlrBuff    rlrBuffCount as long      ; Length of the returned data    rlrBuffHandle as handle   ; Handle to the data    rlrIsDataFlag as boolean  ; Was a line actually read?    rlrMoreFlag as boolean    ; Is there more data received?    rlrBuffSize as long       ; Required buffer sizeend typetype rlrBuffPtr as pointer to rlrBufftype srBuff    srState as integer        ; TCP state    srNetworkError as integer ; ICMP error code    srSndQueued as long       ; Bytes left in send queue    srRcvQueued as long       ; Bytes left in receive queue    srDestIP as long          ; Destination IP address    srDestPort as integer     ; Destination port    srConnectType as integer  ; Connection type    srAcceptCount as integer  ; If in listen mode, number of pending incoming                              ; requestsend typetype srBuffPtr as pointer to srBufftype destRec    drUserID as integer       ; UserID used by this ipid    drDestIP as long          ; Destination IP address    drDestPort as integer     ; Destination port numberend typetype destRecPtr as pointer to destRectype cvtRec    cvtIPAddress as long      ; Returned IP address    cvtPort as integer        ; word Port number or nil if noneend typetype cvtRecPtr as pointer to cvtRectype variablesRecord    inwLength as integer	; Length of buffer, including this, is $000E    inwIP as long   		; Your IP address    inwMethod as integer	; The connect method currently being used    inwMTU as integer		; The MTU currently being used    inwLVPtr as long   	; longword Pointer to link layer variables currently being usedend typetype variablesPtr as pointer to variablesRecordtype displayPtr as ptrtype conHandle as handletype disconHandle as handletype messagePtr as ptrtype udpPtr as ptrtype datagramPtr as ptrtype dgmHandle as handletype dataPtr as ptrTool $36, $01 SUB      TCPIPBootInitTool $36, $02 SUB      TCPIPStartUpTool $36, $03 SUB      TCPIPShutDownTool $36, $04 FUNCTION TCPIPVersion as %Tool $36, $05 SUB      TCPIPResetTool $36, $06 FUNCTION TCPIPStatus as %Tool $36, $08 FUNCTION TCPIPLongVersion as &Tool $36, $09 FUNCTION TCPIPGetConnectStatus as %Tool $36, $0A FUNCTION TCPIPGetErrorTable as errTablePtrTool $36, $0B FUNCTION TCPIPGetReconnectStatus as %Tool $36, $0C FUNCTION TCPIPReconnect as displayPtrTool $36, $0F FUNCTION TCPIPGetMyIPAddress as &Tool $36, $10 FUNCTION TCPIPGetConnectMethod as %Tool $36, $11 SUB      TCPIPSetConnectMethod (%)Tool $36, $12 FUNCTION TCPIPConnect as displayPtrTool $36, $13 SUB      TCPIPDisconnect (%, displayPtr)Tool $36, $14 FUNCTION TCPIPGetMTU as %Tool $36, $16 FUNCTION TCPIPGetConnectData (%, %) as conHandleTool $36, $17 SUB      TCPIPSetConnectData (%, conHandle)Tool $36, $18 FUNCTION TCPIPGetDisconnectData (%, %) as disconHandleTool $36, $19 SUB      TCPIPSetDisconnectData (%, disconHandle)Tool $36, $1A SUB      TCPIPLoadPreferencesTool $36, $1B SUB      TCPIPSavePreferencesTool $36, $1E FUNCTION TCPIPGetTuningTable as tunePtrTool $36, $1F SUB      TCPIPSetTuningTable (tunePtr)Tool $36, $42 FUNCTION TCPIPGetConnectMsgFlag as %Tool $36, $43 SUB      TCPIPSetConnectMsgFlag (%)Tool $36, $44 FUNCTION TCPIPGetUsername as usernamePtrTool $36, $45 SUB      TCPIPSetUsername (usernamePtr)Tool $36, $46 FUNCTION TCPIPGetPassword as passwordPtrTool $36, $47 SUB      TCPIPSetPassword (passwordPtr)Tool $36, $4A FUNCTION TCPIPGetLinkVariables as variablesPtrTool $36, $4B SUB      TCPIPEditLinkConfig (Handle, Handle)Tool $36, $4C FUNCTION TCPIPGetModuleNames as moduleListPtrTool $36, $51 FUNCTION TCPIPGetHostName as hostNamePtrTool $36, $52 SUB      TCPIPSetHostName (hostNamePtr)Tool $36, $54 FUNCTION TCPIPGetLinkLayer as linkInfoBlkPtrTool $36, $57 FUNCTION TCPIPGetAuthMessage (%) as handleTool $36, $5A FUNCTION TCPIPGetAliveFlag as %Tool $36, $5B SUB      TCPIPSetAliveFlag (%)Tool $36, $5C FUNCTION TCPIPGetAliveMinutes as %Tool $36, $5D SUB      TCPIPSetAliveMinutes (%)Tool $36, $5F FUNCTION TCPIPGetBootConnectFlag as %Tool $36, $60 SUB      TCPIPSetBootConnectFlag (%)Tool $36, $1C FUNCTION TCPIPGetDNS as DNSRecPtrTool $36, $1D SUB      TCPIPSetDNS (DNSRecPtr)Tool $36, $20 SUB      TCPIPCancelDNR (DNRBufferPtr)Tool $36, $21 SUB      TCPIPDNRNameToIP (pStringPtr, DNRBufferPtr)Tool $36, $22 SUB      TCPIPPollTool $36, $40 SUB      TCPIPSendIPDatagram (datagramPtr)Tool $36, $23 FUNCTION TCPIPLogin (%, &, %, %, %) as %Tool $36, $24 SUB      TCPIPLogout (%)Tool $36, $25 SUB      TCPIPSendICMP (%, messagePtr, %)Tool $36, $26 SUB      TCPIPSendUDP (%, udpPtr, %)Tool $36, $27 FUNCTION TCPIPGetDatagramCount (%, %) as %Tool $36, $28 FUNCTION TCPIPGetNextDatagram (%, %, %) as dgmHandleTool $36, $29 FUNCTION TCPIPGetLoginCount as %Tool $36, $2A SUB      TCPIPSendICMPEcho (%, %)Tool $36, $2B FUNCTION TCPIPReceiveICMPEcho (%) as %Tool $36, $53 SUB      TCPIPStatusUDP (%, udpVarsPtr)Tool $36, $61 SUB      TCPIPSetUDPDispatch (%, %)Tool $36, $2C FUNCTION TCPIPOpenTCP (%) as %Tool $36, $4E FUNCTION TCPIPListenTCP (%) as %Tool $36, $2D FUNCTION TCPIPWriteTCP (%, dataPtr, &, %, %) as %Tool $36, $2E FUNCTION TCPIPReadTCP (%, %, univ, &, rrBuffPtr) as %Tool $36, $5E FUNCTION TCPIPReadLineTCP (%, pstringPtr, %, univ, &,                          rlrBuffPtr) as %Tool $36, $2F FUNCTION TCPIPCloseTCP (%) as %Tool $36, $30 FUNCTION TCPIPAbortTCP (%) as %Tool $36, $31 FUNCTION TCPIPStatusTCP (%, srBuffPtr) as %Tool $36, $4F FUNCTION TCPIPAcceptTCP (%, %) as %Tool $36, $32 FUNCTION TCPIPGetSourcePort (%) as %Tool $36, $33 FUNCTION TCPIPGetTOS (%) as %Tool $36, $34 SUB      TCPIPSetTOS (%, %)Tool $36, $35 FUNCTION TCPIPGetTTL (%) as %Tool $36, $36 SUB      TCPIPSetTTL (%, %)Tool $36, $37 SUB      TCPIPSetSourcePort (%, %)Tool $36, $49 FUNCTION TCPIPGetUserStatistic (%, %) as &Tool $36, $50 SUB      TCPIPSetNewDestination (%, &, %)Tool $36, $62 SUB      TCPIPGetDestination (%, destRecPtr)Tool $36, $0D SUB      TCPIPConvertIPToHex (cvtRecPtr, pstringPtr)Tool $36, $3F SUB      TCPIPConvertIPCToHex (cvtRecPtr, pstringPtr)Tool $36, $0E FUNCTION TCPIPConvertIPToASCII (&, pstringPtr, %) as %Tool $36, $58 FUNCTION TCPIPConvertIPToCASCII (&, pstringPtr, %) as %Tool $36, $41 FUNCTION TCPIPConvertIPToClass (&) as %Tool $36, $59 FUNCTION TCPIPMangleDomainName (%, pstringPtr) as %Tool $36, $55 SUB      TCPIPPtrToPtr (ptr, ptr, &)Tool $36, $56 SUB      TCPIPPtrToPtrNeg (ptr, ptr, &)Tool $36, $48 FUNCTION TCPIPValidateIPString (pstringPtr) as %Tool $36, $15 FUNCTION TCPIPValidateIPCString (cstringPtr) as %