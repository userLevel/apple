      REM A simple, recursive descent expression evaluator.  This      REM program handles +, -, * and /, as well as parenthesis.  All      REM operations are integer operations.      CONST T_ADD = 0:! tokens in an expression      CONST T_SUBTRACT = 1      CONST T_MULTIPLY = 2      CONST T_DIVIDE = 3      CONST T_INTEGER = 4      CONST T_LPAREN = 5      CONST T_RPAREN = 6      CONST T_EOL = 7      DIM CH AS STRING :! last char read by NEXTCH      DIM LINEINDEX AS INTEGER :! index into LINE$      DIM LINE$ AS STRING :! string read from the keyboard      DIM TOKEN AS INTEGER :! last token read      DIM TOKENVALUE AS INTEGER :! value of last integer token      DO        LINE INPUT "Expression: ";LINE$        IF LEN (LINE$) <> 0 THEN          CH = " "          LINEINDEX = 0          CALL NEXTTOKEN          PRINT "The value is ";EXPRESSION          IF TOKEN <> T_EOL THEN            PRINT "Extra input appeared after the expression"          END IF          PRINT        END IF      LOOP UNTIL LEN (LINE$) = 0      END      !----------------------------------------------------------      !      ! Expression - evaluate an expression      !      ! Shared Variables:      !    token - last token read      !    tokenValue - value of last integer token      !    t_add, t_subtract, t_integer - names of the tokens      !      !----------------------------------------------------------      FUNCTION EXPRESSION AS INTEGER      SHARED TOKEN, TOKENVALUE      SHARED T_ADD, T_SUBTRACT, T_INTEGER      DIM FIRSTVALUE AS INTEGER , SECONDVALUE AS INTEGER :! values from FACTOR      DIM OPERATION AS INTEGER :! type of the operation      ! get the first value      FIRSTVALUE = FACTOR      ! handle any operations      WHILE TOKEN = T_ADD OR TOKEN = T_SUBTRACT        ! skip the operation        OPERATION = TOKEN        CALL NEXTTOKEN        ! get the second value        SECONDVALUE = FACTOR        ! do the operation        IF OPERATION = T_ADD THEN          FIRSTVALUE = FIRSTVALUE + SECONDVALUE        ELSE          FIRSTVALUE = FIRSTVALUE - SECONDVALUE        END IF      WEND      ! return the result      EXPRESSION = FIRSTVALUE      END FUNCTION      !----------------------------------------------------------      !      ! Factor - do multiplies and divides      !      ! Shared Variables:      !    token - last token read      !    tokenValue - value of last integer token      !    t_multiply, t_divide, t_integer - names of the tokens      !      !----------------------------------------------------------      FUNCTION FACTOR AS INTEGER      SHARED TOKEN, TOKENVALUE      SHARED T_MULTIPLY, T_DIVIDE, T_INTEGER      DIM FIRSTVALUE AS INTEGER , SECONDVALUE AS INTEGER :! values from TERM      DIM OPERATION AS INTEGER :! type of the operation      ! get the first value      FIRSTVALUE = TERM      ! handle any operations      WHILE TOKEN = T_MULTIPLY OR TOKEN = T_DIVIDE        ! skip the operation        OPERATION = TOKEN        CALL NEXTTOKEN        ! get the second value        SECONDVALUE = TERM        ! do the operation        IF OPERATION = T_MULTIPLY THEN          FIRSTVALUE = FIRSTVALUE * SECONDVALUE        ELSE          FIRSTVALUE = FIRSTVALUE / SECONDVALUE        END IF      WEND      ! return the result      FACTOR = FIRSTVALUE      END FUNCTION      !----------------------------------------------------------      !      ! NextCh - get the next character from line$      !      ! Shared Variables:      !    ch - next character from line$      !    line$ - line containing the characters      !    lineindex - index of the character ch in line$      !      ! Notes: The end of a line is reported as a space      !    character.  Characters are converted to uppercase.      !      !----------------------------------------------------------      SUB NEXTCH      SHARED CH, LINE$, LINEINDEX      ! check for the end of the line      IF LINEINDEX > LEN (LINE$) THEN        CH = ""      ELSE        LINEINDEX = LINEINDEX + 1        IF LINEINDEX > LEN (LINE$) THEN          ! handle an end of line          CH = " "        ELSE          ! report the next character          CH = MID$ (LINE$, LINEINDEX, 1)          IF CH >= "a" AND CH <= "z" THEN            CH = CHR$ ( ASC (CH) - 32)          END IF        END IF      END IF      END SUB      !----------------------------------------------------------      !      ! NextToken - get the next token from line$      !      ! Shared Variables:      !    ch - next character from the file      !    token - last token read      !    tokenValue - value of last integer token      !    t_add..t_eol - names of the tokens      !      ! Notes: The end of a line is reported as a space      !    character.  Characters are converted to uppercase.      !      !----------------------------------------------------------      SUB NEXTTOKEN      SHARED CH, TOKEN, TOKENVALUE      SHARED T_ADD, T_SUBTRACT, T_MULTIPLY, T_DIVIDE, T_INTEGER, T_LPAREN, T_RPAREN, T_EOL      ! skip to the first real character      WHILE CH = " "        CALL NEXTCH      WEND      IF CH = CHR$ (0) THEN        ! handle an end of line        TOKEN = T_EOL      ELSE IF CH = "+" THEN        ! handle add        TOKEN = T_ADD        CALL NEXTCH      ELSE IF CH = "-" THEN        ! handle subtract        TOKEN = T_SUBTRACT        CALL NEXTCH      ELSE IF CH = "*" THEN        ! handle multiply        TOKEN = T_MULTIPLY        CALL NEXTCH      ELSE IF CH = "/" THEN        ! handle divide        TOKEN = T_DIVIDE        CALL NEXTCH      ELSE IF CH = "(" THEN        ! handle (        TOKEN = T_LPAREN        CALL NEXTCH      ELSE IF CH = ")" THEN        ! handle )        TOKEN = T_RPAREN        CALL NEXTCH      ELSE IF CH >= "0" AND CH <= "9" THEN        ! handle a number        TOKEN = T_INTEGER        TOKENVALUE = 0        WHILE CH >= "0" AND CH <= "9"          TOKENVALUE = TOKENVALUE * 10 + ASC (CH) - ASC ("0")          CALL NEXTCH        WEND      ELSE        ! handle bad input        PRINT "Syntax error"        CALL NEXTCH      END IF      END SUB      !----------------------------------------------------------      !      ! Term - Handle a number or parenthesis      !      ! Shared Variables:      !    token - last token read      !    tokenValue - value of last integer token      !    t_integer, t_lparen, t_rparen - names of the tokens      !      !----------------------------------------------------------      FUNCTION TERM AS INTEGER      SHARED TOKEN, TOKENVALUE      SHARED T_INTEGER, T_LPAREN, T_RPAREN      IF TOKEN = T_INTEGER THEN        ! handle an integer        TERM = TOKENVALUE        CALL NEXTTOKEN      ELSE IF TOKEN = T_LPAREN THEN        ! skip the (        CALL NEXTTOKEN        ! evaluate the expression        TERM = EXPRESSION        ! skip the )        IF TOKEN = T_RPAREN THEN          CALL NEXTTOKEN        ELSE          PRINT "Syntax Error"        END IF      END IF      END FUNCTION