      REM Recursive solution to the Towers of Hanoi puzzle.      CONST DISKS% = 6:! Number of disks      DIM D AS INTEGER :! loop variable for looping over disks      DIM T AS INTEGER :! loop variable for looping over the three towers      DIM TOWER(2, DISKS%) AS INTEGER :! towers and disks      ! Set up the graphics screen      CALL INITGRAPHICS      ! Set up the initial values for the pegs      FOR D = 0 TO DISKS%        FOR T = 1 TO 2          TOWER(T, D) = 0        NEXT        TOWER(0, D) = DISKS% - D        IF D <> DISKS% THEN          CALL DRAW(0, D, DISKS% - D, DISKS% - D)        END IF      NEXT      ! Solve the puzzle      CALL MOVEDISKS((DISKS%), 0, 2, 1)      ! Wait for the user to press the return key      INPUT "";A$      END      !----------------------------------------------------------      !      ! Draw - Draw one disk      !      ! Parameters:      !    peg - number of the peg      !    height - location of the disk on the peg      !    disk - size (and number) of the disk      !    color - color of the disk (0 to erase)      !      !----------------------------------------------------------      SUB DRAW(PEG AS INTEGER , HEIGHT AS INTEGER , DISK AS INTEGER , COLOR AS INTEGER )      DIM X AS INTEGER , Y AS INTEGER :! screen coordinates for the disk      SETSOLIDPENPAT (COLOR)      X = 50 + PEG * 100 - DISK * 2      Y = 150 - HEIGHT * 3      MOVETO (X, Y)      X = 50 + PEG * 100 + DISK * 2      LINETO (X, Y)      END SUB      !----------------------------------------------------------      !      ! MoveDisks - Move one or more disks      !      ! Parameters:      !    count - number of disks to move      !    src - peg to move the disks from      !    dest - peg to move the disks to      !    spare - peg to use for the intermediate step      !      !----------------------------------------------------------      SUB MOVEDISKS(COUNT AS INTEGER , SRC AS INTEGER , DEST AS INTEGER , SPARE AS INTEGER )      IF COUNT <> 0 THEN        CALL MOVEDISKS(COUNT - 1, SRC, SPARE, DEST)        CALL MOVEONEDISK(SRC, DEST)        CALL MOVEDISKS(COUNT - 1, SPARE, DEST, SRC)      END IF      END SUB      !----------------------------------------------------------      !      ! MoveOneDisk - Move one disk      !      ! Shared variables:      !    tower - towers and disks      !      ! Parameters:      !    src - peg to move the disk from      !    dest - peg to move the disk to      !      !----------------------------------------------------------      SUB MOVEONEDISK(SRC AS INTEGER , DEST AS INTEGER )      SHARED TOWER()      DIM HEIGHT AS INTEGER :! Height of a peg      DIM DISK AS INTEGER :! Disk number of a disk      ! Find the top disk on the source peg      HEIGHT = 0      WHILE TOWER(SRC, HEIGHT + 1) <> 0        HEIGHT = HEIGHT + 1      WEND      DISK = TOWER(SRC, HEIGHT)      ! Remove the disk from the source peg      TOWER(SRC, HEIGHT) = 0      CALL DRAW(SRC, HEIGHT, DISK, 0)      ! Find the lowest open position on the destination peg      HEIGHT = 0      WHILE TOWER(DEST, HEIGHT) <> 0        HEIGHT = HEIGHT + 1      WEND      ! Place the disk on the destination peg      CALL DRAW(DEST, HEIGHT, DISK, DISK)      TOWER(DEST, HEIGHT) = DISK      END SUB      !----------------------------------------------------------      !      ! InitGraphics - Set up for graphics      !      !----------------------------------------------------------      SUB INITGRAPHICS      HGR      SETPENMODE (0)      SETSOLIDPENPAT (15)      END SUB