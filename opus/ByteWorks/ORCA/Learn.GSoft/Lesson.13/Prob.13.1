      REM Count the compares needed to sort a reverse-order array with      REM a shell sort.      CONST SIZE = 2:! size of the array to sort      DIM COUNT AS INTEGER :! number of compares      DIM A(SIZE) AS INTEGER :! array to sort      COUNT = 0      CALL FILL      CALL SORT      PRINT "There were ";COUNT;" compares."      PRINT "N*(N - 1) is ";SIZE * (SIZE - 1)      END      !----------------------------------------------------------      !      ! Fill - fill an array      !      ! Shared Variables      !    A - array to fill      !    size - number of elements to fill      !      !----------------------------------------------------------      SUB FILL      SHARED A(), SIZE      DIM I AS INTEGER :! loop variable      FOR I = 1 TO SIZE        A(I) = SIZE + 1 - I      NEXT      END SUB      !----------------------------------------------------------      !      ! Sort - sort an array      !      ! Shared Variables      !    A - array to sort      !    count - number of swaps      !    size - number of elements to sort      !      !----------------------------------------------------------      SUB SORT      SHARED A(), COUNT, SIZE      DIM I AS INTEGER :! loop variable/array index      DIM SWAP AS BOOLEAN:! was a value swapped?      DIM TEMP AS INTEGER :! temp; used for swapping      DO        SWAP = FALSE        FOR I = 1 TO SIZE - 1          COUNT = COUNT + 1          IF A(I) > A(I + 1) THEN            TEMP = A(I)            A(I) = A(I + 1)            A(I + 1) = TEMP            SWAP = TRUE          END IF        NEXT      LOOP WHILE SWAP      END SUB