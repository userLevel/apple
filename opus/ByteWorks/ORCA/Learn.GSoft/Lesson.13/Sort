      REM A sample of quick sort.      CONST SIZE = 10      DIM A(SIZE) AS INTEGER      CALL FILL      CALL SORT(1, (SIZE))      CALL PRINTARRAY      END      !----------------------------------------------------------      !      ! Fill - fill an array      !      ! Shared Variables      !    A - array to fill      !    size - number of elements to fill      !      !----------------------------------------------------------      SUB FILL      SHARED A(), SIZE      DIM I AS INTEGER :! loop variable      FOR I = 1 TO SIZE        A(I) = SIZE + 1 - I      NEXT      END SUB      !----------------------------------------------------------      !      ! PrintArray - print the array      !      ! Shared Variables      !    A - array to sort      !    size - number of elements to fill      !      !----------------------------------------------------------      SUB PRINTARRAY      SHARED A(), SIZE      DIM I AS INTEGER :! loop variable      FOR I = 1 TO SIZE        PRINT A(I)      NEXT      END SUB      !----------------------------------------------------------      !      ! Sort - sort an array      !      ! Shared Variables:      !    A - array to sort      !    size - number of elements to fill      !      ! Parameters:      !    left, right - range of indices to sort      !      !----------------------------------------------------------      SUB SORT(LEFT AS INTEGER , RIGHT AS INTEGER )      SHARED A(), SIZE      DIM I AS INTEGER , J AS INTEGER :! array indices      DIM PIVOT AS INTEGER :! pivot value      DIM TEMP AS INTEGER :! used to swap values      ! quit if there is only 1 element to sort      IF RIGHT > LEFT THEN        ! find the pivot index        I = (LEFT - 1) + (RIGHT - LEFT + 1) / 2        ! put the pivot at the end and save it for compares        PIVOT = A(I)        A(I) = A(RIGHT)        A(RIGHT) = PIVOT        ! set up the start indices        I = LEFT        J = RIGHT - 1        ! partition the array        WHILE I <> J          WHILE A(I) <= PIVOT AND I <> J            I = I + 1          WEND          WHILE A(J) >= PIVOT AND I <> J            J = J - 1          WEND          TEMP = A(I)          A(I) = A(J)          A(J) = TEMP        WEND        ! find the pivot insert point        IF A(I) < PIVOT THEN          I = I + 1        END IF        ! replace the pivot        TEMP = A(I)        A(I) = A(RIGHT)        A(RIGHT) = TEMP        ! sort to the left of the pivot        CALL SORT(LEFT, I - 1)        ! sort to the right of the pivot        CALL SORT(I + 1, RIGHT)      END IF      END SUB