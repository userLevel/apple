      REM Do a random walk with 10 random shapes      CONST NUMSHAPES = 10:! # of shapes to animate      CONST WALKLENGTH = 100:! # of "steps" in the walk      CONST TRIANGLE = 0:! shapes      CONST SQUARE = 1      CONST STAR = 2      ! information about one shape      TYPE SHAPERECORD        COLOR AS INTEGER        KIND AS INTEGER      CASE TRIANGLE        TX1 AS INTEGER        TX2 AS INTEGER        TX3 AS INTEGER        TY1 AS INTEGER        TY2 AS INTEGER        TY3 AS INTEGER      CASE SQUARE        SX1 AS INTEGER        SX2 AS INTEGER        SX3 AS INTEGER        SX4 AS INTEGER        SY1 AS INTEGER        SY2 AS INTEGER        SY3 AS INTEGER        SY4 AS INTEGER      CASE STAR        PX1 AS INTEGER        PX2 AS INTEGER        PX3 AS INTEGER        PX4 AS INTEGER        PX5 AS INTEGER        PY1 AS INTEGER        PY2 AS INTEGER        PY3 AS INTEGER        PY4 AS INTEGER        PY5 AS INTEGER      END TYPE      DIM I AS INTEGER , J AS INTEGER :! loop variables      DIM SHAPES(NUMSHAPES) AS SHAPERECORD:! current array of shapes      DIM OLDSHAPES(NUMSHAPES) AS SHAPERECORD:! shapes in last position      ! set up the graphics window      CALL INITGRAPHICS      SETPENMODE (2)      ! set up and draw the initial shapes      FOR I = 1 TO NUMSHAPES        CALL CREATESHAPE(SHAPES(I))        CALL DRAWSHAPE(SHAPES(I))      NEXT      ! do the random walk      FOR I = 1 TO WALKLENGTH        ! move the shapes        FOR J = 1 TO NUMSHAPES          OLDSHAPES(J) = SHAPES(J)          CALL UPDATESHAPE(SHAPES(J))        NEXT        ! redraw the shapes        FOR J = 1 TO NUMSHAPES          CALL DRAWSHAPE(SHAPES(J))          CALL DRAWSHAPE(OLDSHAPES(J))        NEXT      NEXT      END      !----------------------------------------------------------      !      ! CreateShape - creates a shape      !      ! The type, color and initial position are chosen randomly.      ! The size of the shape is based on precomputed values.      !      ! Shared Variables:      !    triangle, square, star - possible shapes      !      ! Parameters:      !    s - shape to create      !      !----------------------------------------------------------      SUB CREATESHAPE(S AS SHAPERECORD)      SHARED TRIANGLE, SQUARE, STAR      DIM CX AS INTEGER , CY AS INTEGER :! center point for the shape      ! get a color      S.COLOR = RANDOMVALUE(15)      ! get the center position, picking the point so the shape is      ! on the graphics screen.      CX = RANDOMVALUE(300) + 10      CY = RANDOMVALUE(184) + 8      ! set the initial position      SELECT CASE RANDOMVALUE(3)        CASE 1          S.KIND = TRIANGLE          S.TX1 = CX - 9          S.TY1 = CY + 4          S.TX2 = CX          S.TY2 = CY - 8          S.TX3 = CX + 9          S.TY3 = CY + 4        CASE 2          S.KIND = SQUARE          S.SX1 = CX - 7          S.SY1 = CY - 6          S.SX2 = CX + 7          S.SY2 = CY - 6          S.SX3 = CX - 7          S.SY3 = CY + 6          S.SX4 = CX + 7          S.SY4 = CY + 6        CASE 3          S.KIND = STAR          S.PX1 = CX - 6          S.PY1 = CY + 7          S.PX2 = CX          S.PY2 = CY - 8          S.PX3 = CX + 6          S.PY3 = CY + 7          S.PX4 = CX - 10          S.PY4 = CY - 3          S.PX5 = CX + 10          S.PY5 = CY - 3      END SELECT      END SUB      !----------------------------------------------------------      !      ! DrawShape - draw a shape      !      ! Shared Variables:      !    triangle, square, star - possible shapes      !      ! Parameters:      !    s - shape to draw      !      !----------------------------------------------------------      SUB DRAWSHAPE(S AS SHAPERECORD)      SHARED TRIANGLE, SQUARE, STAR      ! set the pen color for the shape      SETSOLIDPENPAT (S.COLOR)      ! draw the shape      SELECT CASE S.KIND        CASE TRIANGLE          MOVETO (S.TX1, S.TY1)          LINETO (S.TX2, S.TY2)          LINETO (S.TX3, S.TY3)          LINETO (S.TX1, S.TY1)        CASE SQUARE          MOVETO (S.SX1, S.SY1)          LINETO (S.SX2, S.SY2)          LINETO (S.SX4, S.SY4)          LINETO (S.SX3, S.SY3)          LINETO (S.SX1, S.SY1)        CASE STAR          MOVETO (S.PX1, S.PY1)          LINETO (S.PX2, S.PY2)          LINETO (S.PX3, S.PY3)          LINETO (S.PX4, S.PY4)          LINETO (S.PX5, S.PY5)          LINETO (S.PX1, S.PY1)      END SELECT      END SUB      !----------------------------------------------------------      !      ! InitGraphics - Set up for graphics      !      !----------------------------------------------------------      SUB INITGRAPHICS      HGR      SETPENMODE (0)      SETSOLIDPENPAT (15)      END SUB      !----------------------------------------------------------      !      ! RandomValue - Return a random number in the range 1 to max      !      ! Parameters:      !    max - maximum allowed value for the random number      !      ! Returns: Random number in the range 1..max      !      !----------------------------------------------------------      FUNCTION RANDOMVALUE(MAX AS INTEGER ) AS INTEGER      DIM VALUE AS INTEGER :! Random value to return      VALUE = 1 + RND (1) * MAX      IF VALUE = MAX + 1 THEN        VALUE = MAX      END IF      RANDOMVALUE = VALUE      END FUNCTION      !----------------------------------------------------------      !      ! UpdateShape - move the shape across the screen randomly      !      ! Shared Variables:      !    triangle, square, star - possible shapes      !      ! Parameters:      !    s - shape to update      !      !----------------------------------------------------------      SUB UPDATESHAPE(S AS SHAPERECORD)      SHARED TRIANGLE, SQUARE, STAR      DIM DX AS INTEGER , DY AS INTEGER :! movement direction      ! get the walk direction      DX = RANDOMVALUE(3) - 2      DY = RANDOMVALUE(3) - 2      ! make sure we don't walk off of the screen, then update      ! the position      SELECT CASE S.KIND        CASE TRIANGLE          IF DX = - 1 THEN            IF S.TX1 < 1 THEN              DX = 0            END IF          END IF          IF DX = 1 THEN            IF S.TX3 >= 319 THEN              DX = 0            END IF          END IF          IF DY = - 1 THEN            IF S.TY2 < 1 THEN              DY = 0            END IF          END IF          IF DY = 1 THEN            IF S.TY3 >= 199 THEN              DY = 0            END IF          END IF          S.TX1 = S.TX1 + DX          S.TY1 = S.TY1 + DY          S.TX2 = S.TX2 + DX          S.TY2 = S.TY2 + DY          S.TX3 = S.TX3 + DX          S.TY3 = S.TY3 + DY        CASE SQUARE          IF DX = - 1 THEN            IF S.SX1 < 1 THEN              DX = 0            END IF          END IF          IF DX = 1 THEN            IF S.SX2 >= 319 THEN              DX = 0            END IF          END IF          IF DY = - 1 THEN            IF S.SY1 < 1 THEN              DY = 0            END IF          END IF          IF DY = 1 THEN            IF S.SY3 >= 199 THEN              DY = 0            END IF          END IF          S.SX1 = S.SX1 + DX          S.SY1 = S.SY1 + DY          S.SX2 = S.SX2 + DX          S.SY2 = S.SY2 + DY          S.SX3 = S.SX3 + DX          S.SY3 = S.SY3 + DY          S.SX4 = S.SX4 + DX          S.SY4 = S.SY4 + DY        CASE STAR          IF DX = - 1 THEN            IF S.PX4 < 1 THEN              DX = 0            END IF          END IF          IF DX = 1 THEN            IF S.PX5 >= 319 THEN              DX = 0            END IF          END IF          IF DY = - 1 THEN            IF S.PY2 < 1 THEN              DY = 0            END IF          END IF          IF DY = 1 THEN            IF S.PY1 >= 199 THEN              DY = 0            END IF          END IF          S.PX1 = S.PX1 + DX          S.PY1 = S.PY1 + DY          S.PX2 = S.PX2 + DX          S.PY2 = S.PY2 + DY          S.PX3 = S.PX3 + DX          S.PY3 = S.PY3 + DY          S.PX4 = S.PX4 + DX          S.PY4 = S.PY4 + DY          S.PX5 = S.PX5 + DX          S.PY5 = S.PY5 + DY      END SELECT      END SUB