      REM Write the number of times a word occurs in a file.      ! File constants.      CONST FNAME$ = "Prob.11.2":! file name to scan      CONST F = 1:! file number      ! Scanner variables.      DIM TOKEN AS STRING :! last word read      DIM CH AS STRING :! next character to use      DIM LINE$ AS STRING :! current line      DIM LINEINDEX AS INTEGER :! index of ch in line$      ! Symbol table types and variables.      TYPE SYMBOLRECORD        NEXTP AS POINTER TO SYMBOLRECORD        COUNT AS INTEGER        SYMBOL AS STRING      END TYPE      TYPE SYMBOLPTR AS POINTER TO SYMBOLRECORD      DIM TABLE AS SYMBOLPTR:! the symbol table      ! open the file      OPEN FNAME$ FOR INPUT AS #F      ! get an initial character      CH = " "      LINE$ = ""      LINEINDEX = 0      CALL NEXTCH      CALL NEXTCH      ! initialize the symbol table      TABLE = NIL      ! scan the file      DO        CALL NEXTTOKEN        IF LEN (TOKEN) <> 0 THEN          CALL INSERT        END IF      LOOP UNTIL LEN (TOKEN) = 0      ! close the file      CLOSE #F      ! print the symbol table      CALL PRINTSYMBOLS      END      !----------------------------------------------------------      !      ! DisposeSymbols - dispose of the symbol table      !      ! Shared Variables:      !    table - symbol table to dispose of      !      !----------------------------------------------------------      SUB DISPOSESYMBOLS      DIM SPTR AS SYMBOLPTR:! work pointer      WHILE TABLE <> NIL        SPTR = TABLE        TABLE = SPTR^.NEXTP        DISPOSE (SPTR)      WEND      END SUB      !----------------------------------------------------------      !      ! Insert - insert a word in the symbol table      !      ! Shared Variables:      !    token - symbol to insert      !    table - symbol table      !      !----------------------------------------------------------      SUB INSERT      SHARED TOKEN, TABLE      DIM SYM AS SYMBOLPTR:! the symbol we found      DIM SPTR AS SYMBOLPTR:! work pointer      ! try to find the symbol in the current symbol table      SYM = NIL      SPTR = TABLE      WHILE SPTR <> NIL AND SYM = NIL        IF SPTR^.SYMBOL = TOKEN THEN          ! yes -> mark the symbol          SYM = SPTR        END IF        SPTR = SPTR^.NEXTP      WEND      ! if we didn't find the symbol, create a new one      IF SYM = NIL THEN        ALLOCATE (SYM)        IF SYM <> NIL THEN          SYM^.NEXTP = TABLE          TABLE = SYM          SYM^.SYMBOL = TOKEN        END IF      END IF      ! update the symbol count      IF SYM <> NIL THEN        SYM^.COUNT = SYM^.COUNT + 1      END IF      END SUB      !----------------------------------------------------------      !      ! NextCh - get the next character from the file      !      ! Shared Variables:      !    ch - next character from the file      !    f - file number      !    line$ - current line from the file      !    lineindex - index of the character ch in line$      !      ! Notes: The end of a line is reported as a space      !    character.      !      !----------------------------------------------------------      SUB NEXTCH      SHARED CH, F, LINE$, LINEINDEX      ! if we need one, get a new line      IF LINEINDEX > LEN (LINE$) THEN        IF EOF (F) THEN          CH = ""        ELSE          LINE INPUT #F, LINE$          LINEINDEX = 0        END IF      END IF      ! check for an end of file      IF LEN (CH) <> 0 THEN        LINEINDEX = LINEINDEX + 1        IF LINEINDEX > LEN (LINE$) THEN          ! handle an end of line          CH = " "        ELSE          ! report the next character          CH = MID$ (LINE$, LINEINDEX, 1)        END IF      END IF      END SUB      !----------------------------------------------------------      !      ! NextToken - read a word from the file      !      ! Shared Variables:      !    ch - next character from the file      !    token - string in which to return the token      !      !----------------------------------------------------------      SUB NEXTTOKEN      SHARED CH, TOKEN      ! initialize the token      TOKEN = ""      ! skip to the first character      WHILE ( ASC (CH) <> 0) AND (CH < "A" OR (CH > "Z" AND CH < "a") OR CH > "z")        CALL NEXTCH      WEND      ! read the word      WHILE ( ASC (CH) <> 0) AND ((CH >= "A" AND CH <= "Z") OR (CH >= "a" AND CH <= "z"))        TOKEN = TOKEN + CH        CALL NEXTCH      WEND      END SUB      !----------------------------------------------------------      !      ! PrintSymbols - print the symbol table      !      ! Shared Variables:      !    table - symbol table to print      !      !----------------------------------------------------------      SUB PRINTSYMBOLS      SHARED TABLE      DIM SPTR AS SYMBOLPTR:! work pointer      SPTR = TABLE      WHILE SPTR <> NIL        PRINT SPTR^.COUNT, SPTR^.SYMBOL        SPTR = SPTR^.NEXTP      WEND      END SUB