{ This program reads in an array of up to 100 strings, each of    }{ which can have up to 100 characters.  It then sorts the array,  }{ and prints the numbers in order.  Strings are read until a      }{ string of length zero is found.                                 }program SortStrings(input, output);const   max = 100;                   {max # of strings to sort}   size = 100;                  {max size of a string}var                                {strings to sort}   strings: array [1..max] of packed array [1..size] of char;                                {uppercase version of strings array}   upper: array [1..max] of packed array [1..size] of char;   num: integer;                {# of strings actually read}   function ToUpper(ch: char): char;   { If the character is a lowercase alphabetic character then    }   { return its uppercase equivalent.  Otherwise, return the      }   { original character.                                          }   {                                                              }   { Parameters:                                                  }   {    ch - character to convert                                 }   {                                                              }   { Notes:                                                       }   {    This function assumes that the computer is using the      }   {    ASCII character set.                                      }   begin {ToUpper}   if ch >= 'a' then      if ch <= 'z' then         ch := chr(ord(ch) - ord('a') + ord('A'));   ToUpper := ch;   end; {ToUpper}   procedure ReadEm;   { Read the list of strings.                                    }   {                                                              }   { Variables:                                                   }   {    strings - array of strings read                           }   {    upper - uppercase version of strings array                }   {    num - number of strings read                              }   var      i: integer;                       {loop variable}      sval: packed array [1..size] of char; {string read from keyboard}   begin {ReadEm}   num := 0;   repeat      readln(sval);      if length(sval) <> 0 then begin         num := num+1;         strings[num] := sval;         for i := 1 to length(sval) do            sval[i] := ToUpper(sval[i]);         upper[num] := sval;         end; {if}   until length(sval) = 0;   end; {ReadEm}   procedure Sort;   { Sort the list of strings.                                    }   {                                                              }   { Variables:                                                   }   {    strings - array of strings read                           }   {    upper - uppercase version of strings array                }   {    num - number of strings read                              }   var                                  {temp variable; used for swapping}      temp: packed array [1..size] of char;      noswap: boolean;            {has a swap occurred?}      i: integer;                 {loop variable}   begin {Sort}   repeat                         {loop until the array is sorted}      noswap := true;             {no swaps, yet}      for i := 1 to num-1 do      {check each element but the last}                                  {if a swap is needed then...}         if upper[i+1] < upper[i] then begin            noswap := false;      {note that there was a swap}            temp := strings[i];   {swap the entries}            strings[i] := strings[i+1];            strings[i+1] := temp;            temp := upper[i];            upper[i] := upper[i+1];            upper[i+1] := temp;            end; {if}   until noswap;   end; {Sort}   procedure WriteEm;   { Write the list of strings.                                   }   {                                                              }   { Variables:                                                   }   {    numbers - array of strings read                           }   {    num - number of strings read                              }   var      i: integer;                {loop variable}   begin {WriteEm}   for i := 1 to num do      writeln(strings[i]);   end; {WriteEm}beginReadEm;                          {read the list of strings}Sort;                            {sort the strings}WriteEm;                         {write the list of strings}end.