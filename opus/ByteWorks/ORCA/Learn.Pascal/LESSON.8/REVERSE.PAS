{ This program reads in a list of integers, and then prints    }{ them in reverse order.  The program stops when a zero value  }{ is read.                                                     }program Reverse(input, output);type   listPointer = ^listRecord;           {list pointer}   listRecord = record                  {list element}      next: listPointer;      i: integer;      end;var   list: listPointer;                  {points to the top item in the list}   procedure GetList (var list: listPointer);   { Read a list from the keyboard.                            }   {                                                           }   { Parameters:                                               }   {    list - pointer to the head of the list                 }   var      i: integer;                       {variable read from input}      temp: listPointer;                {work pointer}   begin {GetList}   list := nil;                         {initialize the list pointer}   repeat      readln(i);                        {read a value}      if i <> 0 then begin              {if not at the end of the list...}         new(temp);                     {allocate a record}         temp^.i := i;                  {place i in the record}         temp^.next := list;            {put the record in the list}         list := temp;         end; {if}   until i = 0;   end; {GetList}   procedure PrintList (var list: listPointer);   { Print a list.                                             }   {                                                           }   { Parameters:                                               }   {    list - pointer to the head of the list                 }   var      temp: listPointer;                {work pointer}   begin {PrintList}   while list <> nil do begin      temp := list;                     {remove an item from the list}      list := temp^.next;      writeln(temp^.i);                 {write the value}      dispose(temp);                    {free the memory}      end; {while}   end; {PrintList}beginGetList(list);                          {read a list}PrintList(list);                        {print a list}end.