{ Hangman                                               }{                                                       }{ This program plays the game of Hangman.  When the     }{ game starts, you are given a word to guess.  The      }{ program displays one dash for each letter in the      }{ word.  You guess a letter.  If the letter is in the   }{ word, the computer prints the word with all letters   }{ you have guessed correctly shown in their correct     }{ positions.  If you do not guess the word, you move    }{ one step closer to being hung.  After six wrong       }{ guesses, you loose.                                   }program HangMan (input, output);uses Common, TextToolSet;const   maxWords = 10;               {possible words}   maxChars = 8;                {number of characters in each word}var   words: array[1..maxWords] of string[maxChars]; {word array}   procedure StartText;   { Start the text tools for a stand-alone text program.     }      begin {StartText}   TextStartUp;   SetErrGlobals(127,0);   SetErrorDevice(1,3);   SetInGlobals(127,0);   SetInputDevice(1,3);   SetOutGlobals(127,0);   SetOutputDevice(1,3);   end; {StartText}      procedure EndText;      { Shut down the text tools for a stand-alone text program. }      begin {EndText}   TextShutDown;   end; {EndText}   procedure FillArray;   { Fill the word array.                               }   {                                                    }   { Variables:                                         }   {    words - word array                              }   begin {FillArray}   words[1] := 'computer';   words[2] := 'whale';   words[3] := 'megabyte';   words[4] := 'modem';   words[5] := 'chip';   words[6] := 'online';   words[7] := 'disk';   words[8] := 'monitor';   words[9] := 'window';   words[10] := 'keyboard';   end; {FillArray}   procedure GetSeed;   { Initialize the random number generator             }   var      val: integer;             {seed value}   begin {GetSeed}   write('Please enter a random number seed:');   readln(val);   seed(val);   end; {GetSeed}   function RandomValue(max: integer): integer;   { Return a pseudo-random number in the range 1..max. }   {                                                    }   { Parameters:                                        }   {    max - largest number to return                  }   {    color - interior color of the rectangle         }   begin {RandomValue}   RandomValue := (RandomInteger mod max) + 1;   end; {RandomValue}   procedure Play;   { Play a game of hangman.                            }   {                                                    }   { Variables:                                         }   {    words - word array                              }   var      allFound: boolean;        {used to test for unknown chars}      ch: char;                 {character from player}      done: boolean;            {is the game over?}                                {characters found by the player}      found: array[1..maxChars] of boolean;       len: integer;             {length of word; for efficiency}      i: integer;               {loop variable}      inString: boolean;        {is ch in the string?}      word: string[maxChars];   {word to guess}      wrong: integer;           {number of wrong guesses}   begin {Play}                                {pick a word}   word := words[RandomValue(maxWords)];    len := length(word);         {record the length of the word}   for i := 1 to len do         {no letters guessed, so far}      found[i] := false;   done := false;               {the game is not over, yet}   wrong := 0;                  {no wrong guesses, yet}   ch := ' ';                   {initialize the character}   repeat      writeln;                  {write the word}      write('The word is: "');      for i := 1 to len do         if found[i] then            write(word[i])         else            write('-');      writeln('"');      write('Guess a character:'); {get the player's choice}      readln(ch);      inString := false;        {see if ch is in the string}      for i := 1 to len do         if word[i] = ch then begin            found[i] := true;            inString := true;            end; {if}      if inString then          {handle a correct guess}         writeln(ch, ' is in the string.')      else begin                {handle an incorrect guess}         writeln(ch, ' is not in the string.');         wrong := wrong+1;      {one more wrong answer...}         write('Your ');        {tell the player how they are doing}         if wrong = 1 then            write('head')         else if wrong = 2 then            write('body')         else if wrong = 3 then            write('left arm')         else if wrong = 4 then            write('right arm')         else if wrong = 5 then            write('left leg')         else {if wrong = 6 then}            write('right leg');         writeln(' is now in the noose!');         end; {else}      if wrong = 6 then begin   {see if the player is hung}         writeln('Sorry, Jack Ketch got you!');         writeln('The word was ', word);         done := true;         end; {if}      allFound := true;         {check for unknown characters}      for i := 1 to len do         if not found[i] then            allFound := false;      if allFound then begin    {see if the player got the word}         writeln('You got it!  The word is ', word);         done := true;         end; {if}   until done;   end; {Play}   function PlayAgain: boolean;   { See if the player wants to play another game.      }   {                                                    }   { Returns:                                           }   {    True to play again, false to quit.              }   var      ch: char;                 {player's response}   begin {PlayAgain}   ch := ' ';   writeln;   writeln;   repeat      write('Would you like to play again (y or n)?');      readln(ch);   until (ch = 'y') or (ch = 'Y') or (ch = 'n') or (ch = 'N');   PlayAgain := (ch = 'y') or (ch = 'Y');   end; {PlayAgain}beginStartText;                      {start the text tools}FillArray;                      {fill the word array}GetSeed;                        {initialize the random number generator}repeat   Play;                        {play a game}until not PlayAgain;            {loop if he wants to play again}EndText;                        {shut down the text tools}end.