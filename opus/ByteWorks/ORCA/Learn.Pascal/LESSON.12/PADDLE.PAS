{ Move a paddle in the graphics window }program Paddle;uses Common, QuickDrawII, EventMgr, MemoryMgr;const   eventMask = $0F6E;           {GetNextEvent event mask}var   event: boolean;              {event flag; returned by GetNextEvent}   maxX: integer;               {max X distance the paddle can travel}   myEvent: eventRecord;        {current event record}   paddlePosition: integer;     {current X position of the paddle}   screen: rect;                {port rectangle}   procedure StartTools;   { Start the tools                                              }   const      size = 640;               {graphics mode}   var      memory: handle;           {memory returned by NewHandle}      r: rect;                  {screen size}   begin {StartTools}   StartGraph(size);            {initialize QuickDraw}   SetPenMode(2);               {pen mode = xor}   SetPenSize(1,1);             {use a square pen}   SetSolidPenPat(15);          {paint the screen white}   GetPortRect(r);   PaintRect(r);   SetSolidPenPat(0);           {use a black pen}   memory := NewHandle(256,UserID,$C015,nil); {start up the event mgr}   EMStartUp(ord(memory^),0,0,size,0,200,UserID);   end; {StartTools}   procedure ShutDownTools;   { Shut down the tools                                          }   begin {ShutDownTools}   EMShutDown;   EndGraph;   end; {ShutDownTools}   procedure DrawPaddle (position,color: integer);   { Draw the paddle                                              }   {                                                              }   { Parameters:                                                  }   {    position - position to draw the paddle                    }   {    color - color of the paddle                               }   const      width = 70;               {width of the paddle}      height = 3;               {height of the paddle}   var      y: integer;               {position of paddle on screen}   begin {DrawPaddle}   SetPenSize(width,height);    {set the pen to draw the entire paddle}   SetSolidPenPat(color);       {set the paddle color}   SetPenMode(0);               {use copy mode}   if position+width > maxX then {make sure we don't go off of the screen}      position := maxX-width;   if position < 0 then      position := 0;   y := screen.v2-12;           {find the paddle's y position}   MoveTo(position,y);          {draw the paddle}   LineTo(position,y);   end; {DrawPaddle}   procedure MovePaddle;   { Track and move the paddle                                    }   {                                                              }   { Variables:                                                   }   begin {MovePaddle}   {convert the point to our window}   GlobalToLocal(myevent.eventWhere);   {if the mouse moved, move the paddle}   if myevent.eventWhere.h <> paddlePosition then begin      DrawPaddle(paddlePosition,3);      paddlePosition := myevent.eventWhere.h;      DrawPaddle(paddlePosition,0);      end; {if}   end; {MovePaddle}beginStartTools;                     {start the tools}GetPortRect(screen);            {set the limit on the paddle}maxX := screen.h2;DrawPaddle(0,0);                {draw the initial paddle}paddlePosition := 0;repeat                          {event loop}   event := GetNextEvent(eventMask, myevent);   MovePaddle;until event;ShutDownTools;                  {shut down the tools}end.