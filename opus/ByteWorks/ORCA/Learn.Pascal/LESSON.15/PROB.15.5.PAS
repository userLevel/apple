{ Compare the time for a quick sort to the time for a shell    }{ sort.                                                        }program Sort(output);const   size = 18;                           {size of the array}   trials = 10;                         {number of trial runs}var   a,b: array[1..size] of integer;      {array(s) to sort}   i: 1..trials;                        {loop variable}   function RandomValue(max: integer): integer;   { Return a pseudo-random number in the range 1..max.         }   {                                                            }   { Parameters:                                                }   {    max - largest number to return                          }   begin {RandomValue}   RandomValue := (RandomInteger mod max) + 1;   end; {RandomValue}   procedure Fill;   { Fill an array                                              }   {                                                            }   { Variables:                                                 }   {    a - array to fill                                       }   var      i: integer;                       {loop variable}   begin {Fill}   for i := 1 to size do      a[i] := RandomValue(size);   end; {Fill}   procedure ShellSort;   { Sort an array                                              }   {                                                            }   { Variables:                                                 }   {    a - array to sort                                       }   var      i: integer;                       {loop variable/array index}      swap: boolean;                    {was a value swapped?}      temp: integer;                    {temp; used for swapping}   begin {ShellSort}   repeat      swap := false;      for i := 1 to size-1 do         if a[i] > a[i+1] then begin            temp := a[i];            a[i] := a[i+1];            a[i+1] := temp;            swap := true;            end; {if}   until not swap;   end; {ShellSort}   procedure QuickSort (left,right: integer);   { Sort an array                                             }   {                                                           }   { Parameters:                                               }   {    left - leftmost part of the array to sort              }   {    right - rightmost part of the array to sort            }   {                                                           }   { Variables:                                                }   {    a - array to sort                                      }   var      i,j: integer;                       {array indices}      pivot: integer;                     {pivot value}      temp: integer;                      {used to swap values}   begin {QuickSort}   if right > left then begin             {quit if there is only 1 element}      i := (left-1) + ((right-left+1) div 2); {find the pivot index}      pivot := a[i];                      {put the pivot at the end}      a[i] := a[right];                   {(remember the pivot, too)}      a[right] := pivot;      i := left;                          {set up the start indices}      j := right-1;      while i <> j do begin               {partition the array}         while (a[i] <= pivot) and (i <> j) do            i := i+1;         while (a[j] >= pivot) and (i <> j) do            j := j-1;         temp := a[i];         a[i] := a[j];         a[j] := temp;         end; {while}      if a[i] < pivot then                {find the pivot insert point}         i := i+1;      temp := a[i];                       {replace the pivot}      a[i] := a[right];      a[right] := temp;      QuickSort(left, i-1);               {sort to the left of the pivot}      QuickSort(i+1, right);              {sort to the right of the pivot}      end; {if}   end; {QuickSort}beginSeed(2345);                             {initialize the random number generator}for i := 1 to trials do begin           {do the trial runs}   Fill;   b := a;   QuickSort(1,size);   a := b;   ShellSort;   end; {for}end.