{ A sample of quick sort.                                      }program Sort(output);const   size = 10;                           {size of the array}var   a: array[1..size] of integer;        {array to sort}   function RandomValue(max: integer): integer;   { Return a pseudo-random number in the range 1..max.         }   {                                                            }   { Parameters:                                                }   {    max - largest number to return                          }   begin {RandomValue}   RandomValue := (RandomInteger mod max) + 1;   end; {RandomValue}   procedure Fill;   { Fill an array                                              }   {                                                            }   { Variables:                                                 }   {    a - array to fill                                       }   var      i: integer;                       {loop variable}   begin {Fill}   for i := 1 to size do      a[i] := RandomValue(size);   end; {Fill}   procedure Sort (left,right,depth: integer);   { Sort an array                                             }   {                                                           }   { Parameters:                                               }   {    left - leftmost part of the array to sort              }   {    right - rightmost part of the array to sort            }   {    depth - recursion depth                                }   {                                                           }   { Variables:                                                }   {    a - array to sort                                      }   const      maxDepth = 100;                     {max recursion depth}      shellSize = 18;                     {size where quick sort is better}   var      i,j: integer;                       {array indices}      pivot: integer;                     {pivot value}      swap: boolean;                      {was a value swapped?}      temp: integer;                      {used to swap values}   begin {Sort}   if ((right-left) < shellSize) or (depth > maxDepth) then begin      repeat                            {do a shell sort}         swap := false;         for i := left to right-1 do            if a[i] > a[i+1] then begin               temp := a[i];               a[i] := a[i+1];               a[i+1] := temp;               swap := true;               end; {if}      until not swap;      end {if}   else begin                             {do a quick sort}      i := (left-1) + ((right-left+1) div 2); {find the pivot index}      pivot := a[i];                      {put the pivot at the end}      a[i] := a[right];                   {(remember the pivot, too)}      a[right] := pivot;      i := left;                          {set up the start indices}      j := right-1;      while i <> j do begin               {partition the array}         while (a[i] <= pivot) and (i <> j) do            i := i+1;         while (a[j] >= pivot) and (i <> j) do            j := j-1;         temp := a[i];         a[i] := a[j];         a[j] := temp;         end; {while}      if a[i] < pivot then                {find the pivot insert point}         i := i+1;      temp := a[i];                       {replace the pivot}      a[i] := a[right];      a[right] := temp;      Sort(left, i-1, depth+1);           {sort to the left of the pivot}      Sort(i+1, right, depth+1);          {sort to the right of the pivot}      end; {else}   end; {Sort}   procedure Print;   { Print the array                                           }   {                                                           }   { Variables:                                                }   {    a - array to print                                     }   var      i: integer;   begin {Print}   for i := 1 to size do begin      write(a[i]:4);      if (i mod 8) = 0 then         writeln;      end; {for}   end; {Print}beginSeed(2345);                             {initialize the random number generator}Fill;                                   {fill the array}Sort(1,size,1);                         {sort the array}Print;                                  {print the array}end.