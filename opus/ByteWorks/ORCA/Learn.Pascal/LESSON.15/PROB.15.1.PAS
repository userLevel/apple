{ Count the compares needed to sort a reverse-order array with  }{ a shell sort.                                                 }program ShellSort (output);const   size = 2;                            {size of the array to sort}var   count: integer;                      {number of compares}   a: array[1..size] of integer;        {array to sort}   procedure Sort;   { Sort an array                                              }   {                                                            }   { Variables:                                                 }   {    a - array to sort                                       }   var      i: integer;                       {loop variable/array index}      swap: boolean;                    {was a value swapped?}      temp: integer;                    {temp; used for swapping}   begin {Sort}   repeat      swap := false;      for i := 1 to size-1 do begin         count := count+1;         if a[i] > a[i+1] then begin            temp := a[i];            a[i] := a[i+1];            a[i+1] := temp;            swap := true;            end; {if}         end; {for}   until not swap;   end; {Sort}   procedure Fill;   { Fill an array                                              }   {                                                            }   { Variables:                                                 }   {    a - array to fill                                       }   var      i: integer;                       {loop variable}   begin {Fill}   for i := 1 to size do      a[i] := size+1-i;   end; {Fill}begincount := 0;Fill;Sort;writeln('There were ', count:1, ' compares.');writeln('n*(n-1) is ', size*(size-1):1);end.