{ A sample of quick sort.                                      }program Sort(output);const   size = 2;                            {size of the array}   trials = 100;                        {number of trial runs}var   a: array[1..size] of integer;   count: integer;                      {number of compares}   i: 1..trials;                        {loop variable}   function RandomValue(max: integer): integer;   { Return a pseudo-random number in the range 1..max.         }   {                                                            }   { Parameters:                                                }   {    max - largest number to return                          }   begin {RandomValue}   RandomValue := (RandomInteger mod max) + 1;   end; {RandomValue}   procedure Fill;   { Fill an array                                              }   {                                                            }   { Variables:                                                 }   {    a - array to fill                                       }   var      i: integer;                       {loop variable}   begin {Fill}   for i := 1 to size do      a[i] := RandomValue(size);   end; {Fill}   procedure Sort (left,right: integer);   { Sort an array                                             }   {                                                           }   { Parameters:                                               }   {    left - leftmost part of the array to sort              }   {    right - rightmost part of the array to sort            }   {                                                           }   { Variables:                                                }   {    a - array to sort                                      }   var      i,j: integer;                       {array indices}      pivot: integer;                     {pivot value}      temp: integer;                      {used to swap values}   begin {Sort}   if right > left then begin             {quit if there is only 1 element}      i := (left-1) + ((right-left+1) div 2); {find the pivot index}      pivot := a[i];                      {put the pivot at the end}      a[i] := a[right];                   {(remember the pivot, too)}      a[right] := pivot;      i := left;                          {set up the start indices}      j := right-1;      while i <> j do begin               {partition the array}         count := count+1;         while (a[i] <= pivot) and (i <> j) do begin            i := i+1;            count := count+1;            end; {while}         count := count+1;         while (a[j] >= pivot) and (i <> j) do begin            j := j-1;            count := count+1;            end; {while}         temp := a[i];         a[i] := a[j];         a[j] := temp;         end; {while}      count := count+1;      if a[i] < pivot then                {find the pivot insert point}         i := i+1;      temp := a[i];                       {replace the pivot}      a[i] := a[right];      a[right] := temp;      Sort(left, i-1);                    {sort to the left of the pivot}      Sort(i+1, right);                   {sort to the right of the pivot}      end; {if}   end; {Sort}beginSeed(2345);                             {initialize the random number generator}count := 0;                             {no compares, so far}for i := 1 to trials do begin           {do the trial runs}   Fill;   Sort(1,size);   end; {for}                                        {print the results}writeln('The average number of compares is ', count/trials:1:2, '.');end.