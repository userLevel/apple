{ This program tests the hypothesis that the loop with a goto   }{ exit does half the number of compares, on average, as the     }{ loop that does not use a goto statement.                      }program TestLoopEfficiency (output);const   count = 10000;                       {number of times to search}type   charPtr = ^charType;                 {char record pointer}   charType = record                    {element of the char list}      next: charPtr;      ch: char;      end;var   chars: charPtr;                      {list of chars}   compares: longint;                   {# of compares}   procedure MakeList;   { Create the list of characters }   var      ch: char;                         {loop variable}      ptr: charPtr;                     {new char record}   begin {MakeList}   chars := nil;   for ch := 'a' to 'z' do begin      new(ptr);      ptr^.next := chars;      chars := ptr;      ptr^.ch := ch;      end; {for}   end; {MakeList}   function RandomValue(max: integer): integer;   { Return a pseudo-random number in the range 1..max.           }   {                                                              }   { Parameters:                                                  }   {    max - largest number to return                            }   begin {RandomValue}   RandomValue := (RandomInteger mod max) + 1;   end; {RandomValue}   procedure Test;   { Test to see if characters are in the list }   label 1;   var      i: 1..count;                      {loop counter}      ptr: charPtr;                     {used to trace the list}      ch: char;                         {char to find}   begin {Test}   for i := 1 to count do begin      ch := chr(RandomValue(26)-1+ord('a')); {get a char}      ptr := chars;                     {scan for the char}      while ptr <> nil do begin         compares := compares+1;         if ptr^.ch = ch then           {char found -> exit loop}            goto 1;         ptr := ptr^.next;         end; {while}1:      end; {for}   end; {Test}beginSeed(6289);compares := 0;MakeList;Test;writeln('Average # of compares per search = ', compares/count:1:3);end.