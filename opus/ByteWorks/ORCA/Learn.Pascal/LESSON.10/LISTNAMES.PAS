{ This program reads a list of names from the keyboard,         }{ stopping when you hit the RETURN key right away.  These       }{ names are stored in the linked list names.  The program then  }{ asks you to enter a name, and scans the list.  If the name is }{ in the list, the program prints the name.  If not, false is   }{ printed.                                                      }program ListOfNames(input, output);label 99;                               {used for program exit}const   nameLength = 20;                     {max length of a name}type   namePtr = ^nameType;                 {name pointer}   nameType = record                    {element of the name list}      next: namePtr;      name: string[nameLength];      end;var   names: namePtr;                      {list of names}   procedure ReadList;   { Read a list of names from the keyboard }   var      ptr: namePtr;                     {new name record}      name: string[nameLength];         {name read from keyboard}   begin {ReadList}   names := nil;                        {no names so far}   repeat      write('Name:');                   {get a name}      readln(name);      if length(name) <> 0 then begin         new(ptr);                      {get a new name record}         ptr^.next := names;            {add the record to the list}         names := ptr;         ptr^.name := name;             {put the name in the record}         end; {if}   until length(name) = 0;   end; {ReadList}   procedure Test;   { Test to see if names are in the list }   label 1;   var      ptr: namePtr;                     {used to trace the list}      name: string[nameLength];         {name read from keyboard}   begin {Test}   repeat      write('Name to find:');           {get a name}      readln(name);      if length(name) = 0 then          {quit if no name is given}         goto 99;      ptr := names;                     {scan for the name}      while ptr <> nil do begin         if ptr^.name = name then begin {name found -> write it}            writeln('true: "', name, '"');            goto 1;            end; {if}         ptr := ptr^.next;         end; {while}      writeln('false');                 {name not found}1:   until false;                         {loop forever}   end; {Test}beginReadList;writeln;Test;99:end.