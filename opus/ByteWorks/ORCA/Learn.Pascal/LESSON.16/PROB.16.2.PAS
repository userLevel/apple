{ Create a binary tree from keyboard strings }program BinaryTree (input, output);type   treePtr = ^treeRecord;                 {tree entry}   treeRecord = record      left,right: treePtr;      str: string[20];      end;var   tree, tPtr: treePtr;                   {top of the tree}   str: string[20];                       {work string}   procedure Add(var ptr: treePtr; rec: treePtr);   { Add a record to the tree                                     }   {                                                              }   { Parameters:                                                  }   {    ptr - next node in the tree                               }   {    rec - record to add to the tree                           }   begin {Add}   if ptr = nil then      ptr := rec   else if rec^.str < ptr^.str then      Add(ptr^.left, rec)   else if rec^.str > ptr^.str then      Add(ptr^.right, rec);   end; {Add}   procedure Print(ptr: treePtr);   { Print the tree                                               }   {                                                              }   { Parameters:                                                  }   {    ptr - next node in the tree                               }   begin {Print}   if ptr <> nil then begin      Print(ptr^.left);      writeln(ptr^.str);      Print(ptr^.right);      end; {if}   end; {Print}begintree := nil;                              {nothing in the tree}repeat   write('string: ');                     {get a string}   readln(str);   if length(str) <> 0 then begin      new(tPtr);                          {create a new record}      tPtr^.left := nil;      tPtr^.right := nil;      tPtr^.str := str;      if tree = nil then                  {add it to the tree}         tree := tPtr      else         Add(tree, tPtr);      end; {if}until length(str) = 0;                    {loop until no string is given}Print(tree);                              {print the tree}end. 