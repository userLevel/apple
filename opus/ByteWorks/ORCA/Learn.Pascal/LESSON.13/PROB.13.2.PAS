program Words (output);{ Write the number of times a word occurs in a file }const   maxLength = 29;                      {length of a word}   fname = 'prob.13.2.pas';             {file name to scan}type   tokenType = string[maxLength];       {a word from the file}   symbolPtr = ^symbolRecord;           {ptr to a symbol table entry}   symbolRecord = record                {symbol table entry}      next: symbolPtr;      count: integer;      symbol: tokenType;      end;var   token: tokenType;                    {last word read}   f: text;                             {file being scanned}   table: symbolPtr;                    {the symbol table}   procedure GetToken;      { Read a word from the source file                           }   {                                                            }   { Variables:                                                 }   {    f - source file                                         }   {    token - string read                                     }      var      len: integer;                     {length of the string}      begin {GetToken}   {initialize the length of the string}   len := 0;   {skip to the first character}   while (not (f^ in ['a'..'z','A'..'Z'])) and (not eof(f)) do      get(f);   {read the word}   while (not eof(f)) and (f^ in ['a'..'z','A'..'Z']) do begin      if len < maxLength then begin         len := len+1;         token[len] := f^;         end; {if}      get(f);      end; {while}   {set the length of the string}   token[0] := chr(len);   end; {GetToken}   procedure Insert;      { Insert a word in the symbol table                          }   {                                                            }   { Variables:                                                 }   {    token - symbol                                          }   {    table - pointer to the first element in the symbol      }   {       table                                                }      label 1;      var      ptr: symbolPtr;                   {work pointer}      len: integer;                     {length of the string}      begin {Insert}   ptr := table;                        {see if the symbol already exists}   while ptr <> nil do begin      if ptr^.symbol = token then begin         ptr^.count := ptr^.count+1;    {yes -> update the count and exit}         goto 1;         end; {if}      ptr := ptr^.next;      end; {while}   new(ptr);                            {no -> create a new entry}   ptr^.next := table;   table := ptr;   ptr^.count := 1;   ptr^.symbol := token;   1:   end; {Insert}   procedure PrintSymbols;      { Print the symbol table                                     }   {                                                            }   { Variables:                                                 }   {    table - pointer to the first element in the symbol      }   {       table                                                }   var      ptr: symbolPtr;                   {work pointer}   begin {PrintSymbols}   ptr := table;   while ptr <> nil do begin      with ptr^ do         writeln(count:10, '  ', symbol);      ptr := ptr^.next;      end; {while}   end; {PrintSymbols}beginreset(f,fname);                         {open the file}table := nil;                           {no symbols, yet}repeat                                  {scan the file}   GetToken;   if length(token) <> 0 then      Insert;until length(token) = 0;PrintSymbols;                           {print the symbol table}end.