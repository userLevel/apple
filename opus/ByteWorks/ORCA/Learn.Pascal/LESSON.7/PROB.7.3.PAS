{ This program plays Acey Ducey                                }{                                                              }{ Acey Ducey is a card game played, in this case, between the  }{ computer and the human.  The computer draws and displays two }{ cards.  The player then decides how much to bet, and a third }{ card is drawn.  If it is between the first two, the player   }{ wins, and gets back double the bet.  If it is not between    }{ the two cards, the computer wins, and the player looses the  }{ bet.  The game continues until the player looses all of his  }{ money, or until the player signals the end of the game with  }{ a negative bet.                                              }{                                                              }{ The deck of cards is represented by a pair of arrays.  Each  }{ array has one position for each of the 52 cards in a         }{ standard deck of playing cards.  One array gives the value   }{ of the card (see the value enumeration), while the other     }{ gives the suit (see the suit enumeration).                   }program Shuffle(input,output);type                                        {suits of cards}   suit = (spades, diamonds, clubs, hearts);                                        {face value of cards}   value = (two, three, four, five, six, seven, eight, nine, ten,            jack, queen, king, ace);   suitDeck = array[1..52] of suit;     {these two arrays define}   valueDeck = array[1..52] of value;   { a deck of cards       }var   done: boolean;                       {is the game over?}   hands: integer;                      {# of hands played from the deck}   money: real;                         {amount of money left}   nextCard: integer;                   {next card in the deck}   suits: suitDeck;                     {our deck of cards}   values: valueDeck;   function Random(max: integer): integer;   { Return a pseudo-random number in the range 1..max.           }   {                                                              }   { Parameters:                                                  }   {    max - largest number to return                            }   {    color - interior color of the rectangle                   }   begin {Random}   Random := (RandomInteger mod max) + 1;   end; {Random}   procedure InitializeDeck(var suits: suitDeck; var values: valueDeck);   { Fills in the values to define a sorted deck of cards         }   {                                                              }   { Parameters:                                                  }   {    suits - array of the card suits                           }   {    values - array of the card values                         }   var      i: integer;                       {loop variable}   begin {InitializeDeck}   for i := 1 to 13 do begin            {initialize the suit array}      suits[i] := spades;      suits[i+13] := diamonds;      suits[i+26] := clubs;      suits[i+39] := hearts;      end; {for}   values[1] := two;                    {initialize the first suit}   values[2] := three;   values[3] := four;   values[4] := five;   values[5] := six;   values[6] := seven;   values[7] := eight;   values[8] := nine;   values[9] := ten;   values[10] := jack;   values[11] := queen;   values[12] := king;   values[13] := ace;   for i := 14 to 52 do                 {copy the first suit to the}      values[i] := values[i-13];        { remaining suits}   end; {InitializeDeck}   procedure Shuffle(var suits: suitDeck; var values: valueDeck);   { Shuffles the deck of cards                                   }   {                                                              }   { Parameters:                                                  }   {    suits - array of the card suits                           }   {    values - array of the card values                         }   var      i: integer;                       {loop variable}      j: integer;                       {card to swap with current card}      tvalue: value;                    {temp value; for swap}      tsuit: suit;                      {temp suit; for swap}   begin {Shuffle}   for i := 1 to 51 do begin      j := Random(52 - (i-1)) + i-1;      tvalue := values[i];      values[i] := values[j];      values[j] := tvalue;      tsuit := suits[i];      suits[i] := suits[j];      suits[j] := tsuit;      end; {for}   end; {Shuffle}   procedure PrintCard(s: suit; v: value);   { Prints the cards in order                                    }   {                                                              }   { Parameters:                                                  }   {    s - suit of the card                                      }   {    v - value of the card                                     }   var      i: integer;                       {loop variable}      procedure PrintValue(v: value);      { Print a value of a card                                   }      {                                                           }      { Parameters:                                               }      {    v - value of the card                                  }      begin {PrintValue}      if v = two then         write('two')      else if v = three then         write('three')      else if v = four then         write('four')      else if v = five then         write('five')      else if v = six then         write('six')      else if v = seven then         write('seven')      else if v = eight then         write('eight')      else if v = nine then         write('nine')      else if v = ten then         write('ten')      else if v = jack then         write('jack')      else if v = queen then         write('queen')      else if v = king then         write('king')      else if v = ace then         write('ace');      end; {PrintValue}      procedure PrintSuit(s: suit);      { Print a suit of a card                                    }      {                                                           }      { Parameters:                                               }      {    s - suit of the card                                   }      begin {PrintSuit}      if s = spades then         write('spades')      else if s = diamonds then         write('diamonds')      else if s = clubs then         write('clubs')      else if s = hearts then         write('hearts');      end; {PrintSuit}   begin {PrintCard}   PrintValue(v);   write(' of ');   PrintSuit(s);   writeln;   end; {PrintCard}   procedure PlayHand;   { Play one hand of Acey Ducey.                                 }   {                                                              }   { Variables:                                                   }   {    done - game over flag                                     }   {    money - amount of money the player has                    }   {    nextCard - next card to draw from the deck                }   {    suits,values - deck of cards                              }   var      bet: real;                        {player's bet}      v1,v2,v3: value;                  {value of the three cards}   begin {PlayHand}   writeln;   writeln('I draw:');   v1 := values[nextCard];              {draw the first card}   PrintCard(suits[nextCard], v1);   nextCard := nextCard+1;   v2 := values[nextCard];              {draw the second card}   PrintCard(suits[nextCard], v2);   nextCard := nextCard+1;   if v2 < v1 then begin                {sort the values}      v3 := v2;      v2 := v1;      v1 := v3;      end; {if}   repeat                               {get the bet}      writeln('You have ', money:1:2, ' left.');      write('Your bet:');      readln(bet);      if bet < 0.0 then         done := true      else if bet > money then         writeln('Sorry, you don''t have that much.');   until bet <= money;   if not done then begin      v3 := values[nextCard];           {draw the third card}      write('Your card is:');      PrintCard(suits[nextCard], v3);      nextCard := nextCard+1;      if (v1 < v3) and (v3 < v2) then begin         money := money+bet;            {player wins}         writeln('You win!');         end {if}      else begin         money := money-bet;            {player looses}         writeln('Sorry, you loose.');         if money <= 0.0 then begin     {see if he's broke}            writeln('You are out of money.  So long!');            done := true;            end; {if}         end; {else}      end; {if}   end; {PlayHand}   procedure GetSeed;   { Initialize the random number generator                       }   var      i: integer;                       {integer from keyboard}   begin {GetSeed}   writeln('Please enter a number from');   write  ('1000 to 30000:');   readln(i);   seed(i);   end; {GetSeed}beginmoney := 50.0;                   {player starts with $50}GetSeed;                         {initialize the random number generator}InitializeDeck(suits, values);   {get a new (sorted) deck of cards}hands := 17;                     {this forces an immediate shuffle}done := false;                   {not done, yet}repeat   if hands = 17 then begin      {reshuffle after 17 hands}      Shuffle(suits, values);    {shuffle the deck}      hands := 0;                {no hands played from the deck}      nextCard := 1;             {next card to draw}      end; {if}   PlayHand;                     {play one hand of Acey Ducey}   hands := hands+1;             {update the # of hands played}until done;end.