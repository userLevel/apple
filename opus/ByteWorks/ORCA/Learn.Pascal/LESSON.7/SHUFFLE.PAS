{ This program shuffles a deck of cards, then prints the       }{ results.                                                     }{                                                              }{ The deck of cards is represented by a pair of arrays.  Each  }{ array has one position for each of the 52 cards in a         }{ standard deck of playing cards.  One array gives the value   }{ of the card (see the value enumeration), while the other     }{ gives the suit (see the suit enumeration).                   }program Shuffle(output);type                                        {suits of cards}   suit = (spades, diamonds, clubs, hearts);                                        {face value of cards}   value = (two, three, four, five, six, seven, eight, nine, ten,            jack, queen, king, ace);   suitDeck = array[1..52] of suit;     {these two arrays define}   valueDeck = array[1..52] of value;   { a deck of cards       }var   suits: suitDeck;                     {our deck of cards}   values: valueDeck;   function Random(max: integer): integer;   { Return a pseudo-random number in the range 1..max.           }   {                                                              }   { Parameters:                                                  }   {    max - largest number to return                            }   {    color - interior color of the rectangle                   }   begin {Random}   Random := (RandomInteger mod max) + 1;   end; {Random}   procedure InitializeDeck(var suits: suitDeck; var values: valueDeck);   { Fills in the values to define a sorted deck of cards         }   {                                                              }   { Parameters:                                                  }   {    suits - array of the card suits                           }   {    values - array of the card values                         }   var      i: integer;                       {loop variable}   begin {InitializeDeck}   for i := 1 to 13 do begin            {initialize the suit array}      suits[i] := spades;      suits[i+13] := diamonds;      suits[i+26] := clubs;      suits[i+39] := hearts;      end; {for}   values[1] := two;                    {initialize the first suit}   values[2] := three;   values[3] := four;   values[4] := five;   values[5] := six;   values[6] := seven;   values[7] := eight;   values[8] := nine;   values[9] := ten;   values[10] := jack;   values[11] := queen;   values[12] := king;   values[13] := ace;   for i := 14 to 52 do                 {copy the first suit to the}      values[i] := values[i-13];        { remaining suits}   end; {InitializeDeck}   procedure Shuffle(var suits: suitDeck; var values: valueDeck);   { Shuffles the deck of cards                                   }   {                                                              }   { Parameters:                                                  }   {    suits - array of the card suits                           }   {    values - array of the card values                         }   var      i: integer;                       {loop variable}      j: integer;                       {card to swap with current card}      tvalue: value;                    {temp value; for swap}      tsuit: suit;                      {temp suit; for swap}   begin {Shuffle}   for i := 1 to 51 do begin      j := Random(52 - (i-1)) + i-1;      tvalue := values[i];      values[i] := values[j];      values[j] := tvalue;      tsuit := suits[i];      suits[i] := suits[j];      suits[j] := tsuit;      end; {for}   end; {Shuffle}   procedure PrintDeck(suits: suitDeck; values: valueDeck);   { Prints the cards in order                                    }   {                                                              }   { Parameters:                                                  }   {    suits - array of the card suits                           }   {    values - array of the card values                         }   var      i: integer;                       {loop variable}      procedure PrintValue(v: value);      { Print a value of a card                                   }      {                                                           }      { Parameters:                                               }      {    v - value of the card                                  }      begin {PrintValue}      if v = two then         write('two')      else if v = three then         write('three')      else if v = four then         write('four')      else if v = five then         write('five')      else if v = six then         write('six')      else if v = seven then         write('seven')      else if v = eight then         write('eight')      else if v = nine then         write('nine')      else if v = ten then         write('ten')      else if v = jack then         write('jack')      else if v = queen then         write('queen')      else if v = king then         write('king')      else if v = ace then         write('ace');      end; {PrintValue}      procedure PrintSuit(s: suit);      { Print a suit of a card                                    }      {                                                           }      { Parameters:                                               }      {    s - suit of the card                                   }      begin {PrintSuit}      if s = spades then         write('spades')      else if s = diamonds then         write('diamonds')      else if s = clubs then         write('clubs')      else if s = hearts then         write('hearts');      end; {PrintSuit}   begin {PrintDeck}   for i := 1 to 52 do begin      PrintValue(values[i]);      write(' of ');      PrintSuit(suits[i]);      writeln;      end; {for}   end; {PrintDeck}beginSeed(1234);                      {initialize the random number generator}InitializeDeck(suits, values);   {get a new (sorted) deck of cards}Shuffle(suits, values);          {shuffle the deck}PrintDeck(suits, values);        {print the shuffled deck}end.