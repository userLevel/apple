{ This program shuffles a deck of cards, then prints the       }{ results.                                                     }program Shuffle(output);type                                        {suits of cards}   suit = (spades, diamonds, clubs, hearts);                                        {face value of cards}   value = (two, three, four, five, six, seven, eight, nine, ten,            jack, queen, king, ace);   card = record                        {one card}      s: suit;                          {card's suit}      v: value;                         {card's value}      end;   deck = array[1..52] of card;         {deck of cards}var   cards: deck;                         {our deck of cards}   function Random(max: integer): integer;   { Return a pseudo-random number in the range 1..max.           }   {                                                              }   { Parameters:                                                  }   {    max - largest number to return                            }   {    color - interior color of the rectangle                   }   begin {Random}   Random := (RandomInteger mod max) + 1;   end; {Random}   procedure InitializeDeck(var c: deck);   { Fills in the values to define a sorted deck of cards         }   {                                                              }   { Parameters:                                                  }   {    c - deck of cards                                         }   var      i: integer;                       {loop variable}   begin {InitializeDeck}   for i := 1 to 13 do begin            {initialize the suit array}      c[i].s := spades;      c[i+13].s := diamonds;      c[i+26].s := clubs;      c[i+39].s := hearts;      end; {for}   c[1].v := two;                       {initialize the first suit}   c[2].v := three;   c[3].v := four;   c[4].v := five;   c[5].v := six;   c[6].v := seven;   c[7].v := eight;   c[8].v := nine;   c[9].v := ten;   c[10].v := jack;   c[11].v := queen;   c[12].v := king;   c[13].v := ace;   for i := 14 to 52 do                 {copy the first suit to the}      c[i].v := c[i-13].v;              { remaining suits}   end; {InitializeDeck}   procedure Shuffle(var c: deck);   { Shuffles the deck of cards                                   }   {                                                              }   { Parameters:                                                  }   {    c - deck of cards                                         }   var      i: integer;                       {loop variable}      j: integer;                       {card to swap with current card}      tvalue: value;                    {temp value; for swap}      tsuit: suit;                      {temp suit; for swap}   begin {Shuffle}   for i := 1 to 51 do begin      j := Random(52 - (i-1)) + i-1;      tvalue := c[i].v;      c[i].v := c[j].v;      c[j].v := tvalue;      tsuit := c[i].s;      c[i].s := c[j].s;      c[j].s := tsuit;      end; {for}   end; {Shuffle}   procedure PrintDeck(c: deck);   { Prints the cards in order                                    }   {                                                              }   { Parameters:                                                  }   {    c - deck of cards                                         }   var      i: integer;                       {loop variable}      procedure PrintValue(v: value);      { Print a value of a card                                   }      {                                                           }      { Parameters:                                               }      {    v - value of the card                                  }      begin {PrintValue}      case v of         two:     write('two');         three:   write('three');         four:    write('four');         five:    write('five');         six:     write('six');         seven:   write('seven');         eight:   write('eight');         nine:    write('nine');         ten:     write('ten');         jack:    write('jack');         queen:   write('queen');         king:    write('king');         ace:     write('ace');         end; {case}      end; {PrintValue}      procedure PrintSuit(s: suit);      { Print a suit of a card                                    }      {                                                           }      { Parameters:                                               }      {    s - suit of the card                                   }      begin {PrintSuit}      case s of         spades:   write('spades');         diamonds: write('diamonds');         clubs:    write('clubs');         hearts:   write('hearts');         end; {case}      end; {PrintSuit}   begin {PrintDeck}   for i := 1 to 52 do begin      PrintValue(c[i].v);      write(' of ');      PrintSuit(c[i].s);      writeln;      end; {for}   end; {PrintDeck}beginSeed(1234);                      {initialize the random number generator}InitializeDeck(cards);           {get a new (sorted) deck of cards}Shuffle(cards);                  {shuffle the deck}PrintDeck(cards);                {print the shuffled deck}end.