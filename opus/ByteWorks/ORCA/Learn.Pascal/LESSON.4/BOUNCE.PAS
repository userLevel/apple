program Bounce(input,output);uses Common, QuickDrawII;const   maxX = 316;   maxY = 83;var   i,j: integer;                       {loop counters}   iter: integer;                      {# of movements of the ball}   x,y: integer;                       {coordinates of the point}   xSpeed,ySpeed: integer;             {speed the ball}   procedure MoveBall(var x, y, vx, vy: integer);   { Move a ball in the graphics window.  If the ball   }   { hits one of the sides (defined by the global       }   { constants maxX and maxY), the direction of the     }   { ball is changed.                                   }   {                                                    }   { Parameters:                                        }   {    x,y - position of the ball                      }   {    vx,vy - velocity of the ball                    }   begin {MoveBall}   SetSolidPenPat(3);                  {erase the ball}   MoveTo(x,y);   LineTo(x,y);   x := x+vx;                          {move in the x direction}   if x < 0 then begin                 {check for off the edge}      x := 0;      vx := -vx;      end {if}   else if x > maxX then begin      x := maxX;      vx := -vx;      end; {else}   y := y+vy;                          {move in the y direction}   if y < 0 then begin                 {check for off the edge}      y := 0;      vy := -vy;      end {if}   else if y > maxY then begin      y := maxY;      vy := -vy;      end; {else}   SetSolidPenPat(0);                  {draw the ball in the new spot}   MoveTo(x,y);   LineTo(x,y);   end; {MoveBall}beginSetPenMode(0);                         {set up for graphics}SetPenSize(6,2);write('Start x     :');                {initialize the ball position}readln(x);write('Start y     :');readln(y);write('X speed     :');                {initialize the ball speed}readln(xSpeed);write('Y speed     :');readln(ySpeed);write('iterations  :');                {initialize the loop counter}readln(iter);if x < 0 then                          {restrict the initial ball position}   x := 0else if x > maxX then   x := maxX;if y < 0 then   y := 0else if y > maxY then   y := maxY;for i := 1 to iter do begin            {animate the ball}   for j := 1 to 10000 do ;            {pause for a bit}   MoveBall(x,y,xSpeed,ySpeed);        {move the ball}   end; {for}end.