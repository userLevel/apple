{---------------------------------------------------------------}{                                                               }{  Dither Explorer                                              }{                                                               }{  Display the colors possible in 640 mode using dithering      }{                                                               }{---------------------------------------------------------------}program Dither (input);uses Common, QuickDrawII;const   left           = 20;                  {left edge}   width1         = 60;                  {width of pure colors}   width2         = 120;                 {width of boxes}   hgap           = 15;                  {horizontal gap size}   top            = 0;                   {top edge}   height1        = 20;                  {height of pure colors}   height2        = 40;                  {height of boxes}   vgap           = 5;                   {vertical gap size}var   color1, color2: integer;              {pen colors}   i, j: integer;                        {loop variables}beginStartGraph(640);PenNormal;{draw the left boxes}for color1 := 0 to 3 do begin   SetSolidPenPat(color1);   for i := left to left+width1 do begin      MoveTo(i, top + height1 + vgap*(color1+1) + height2*(color1));      LineTo(i, top + height1 + vgap*(color1+1) + height2*(color1+1));      end; {for}   end; {for}{draw the top boxes}for color2 := 0 to 3 do begin   SetSolidPenPat(color2);   for j := top to top+height1 do begin      MoveTo(left + width1 + hgap*(color2+1) + width2*(color2), j);      LineTo(left + width1 + hgap*(color2+1) + width2*(color2+1), j);      end; {for}   end; {for}{draw the mixed color boxes}for color1 := 0 to 3 do   for color2 := 0 to 3 do      for i := left + width1 + hgap*(color2+1) + width2*(color2)         to left + width1 + hgap*(color2+1) + width2*(color2+1) do begin         if odd(i) then            SetSolidPenPat(color1)         else            SetSolidPenPat(color2);         MoveTo(i, top + height1 + vgap*(color1+1) + height2*(color1));         LineTo(i, top + height1 + vgap*(color1+1) + height2*(color1+1));         end; {for}{wait for a keypress}readln;EndGraph;end.