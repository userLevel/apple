{---------------------------------------------------------------}{                                                               }{  Draw                                                         }{                                                               }{  Draw and print pictures, picking between 3 shapes and 8      }{  colors.                                                      }{                                                               }{---------------------------------------------------------------}program Draw;uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,     DialogMgr, MenuMgr, ResourceMgr, MemoryMgr, SFToolSet, ToolLocator,     MscToolSet, PrintMgr, GSOS;const   return        = 13;                  {return key code}    appleMenu     = 1;                   {Menu ID #s (also resource ID #s)}   fileMenu      = 2;   editMenu      = 3;   shapesMenu    = 4;   colorsMenu    = 5;   editUndo      = 250;   editCut       = 251;   editCopy      = 252;   editPaste     = 253;   editClear     = 254;   fileNew       = 260;   fileOpen      = 261;   fileClose     = 255;   fileSave      = 262;   fileSaveAs    = 263;   filePageSetup = 264;   filePrint     = 265;   fileQuit      = 256;   appleAbout    = 257;   shapesLine    = 270;   shapesRect    = 271;   shapesOval    = 272;   colorsBlack   = 280;   colorsBrown   = 281;   colorsRed     = 282;   colorsOrange  = 283;   colorsYellow  = 284;   colorsGreen   = 285;   colorsBlue    = 286;   colorsPurple  = 287;type   long = record                        {for splitting 4 bytes to 2 bytes}      case boolean of         true : (long: longint);         false: (lsw,msw: integer);      end;   shapeKind = (oLine, oRect, oOval);   {object shapes}   objectPtr = ^objectRecord;           {pointer to an object}   objectRecord = record                {one drawing object}      next: objectPtr;      color: integer;      case kind: shapeKind of         oLine:  (p1, p2: point);         oRect,         oOval:  (r: rect);      end;   documentPtr = ^documentRecord;       {document pointer}   documentRecord = record              {information about our document}      next: documentPtr;                {next document}      wPtr: grafPortPtr;                {window pointer}      wName: pString;                   {window name}      onDisk: boolean;                  {does the file exist on disk?}      fileName: handle;                 {file name handle or nil}      pathName: handle;                 {full path name handle or nil}      prHandle: handle;                 {print record}      objects: objectPtr;               {list of objects in the document}      changed: boolean;                 {has the document changes since saving?}      end;var   documents: documentPtr;              {our documents}   done: boolean;                       {tells if the program should stop}   event: integer;                      {event #; returned by GetNextEvent}   myEvent: eventRecord;                {last event returned in event loop}   startStopParm: longint;              {tool start/shutdown parameter}   tbool: boolean;                      {temp boolean}   untitledNum: integer;                {number for the next untitled window}   currentColor: integer;               {color for new objects}   currentShape: shapeKind;             {shape for new objects}   colorItem: integer;                  {color menu item checked}   shapeItem: integer;                  {shape menu item checked}   procedure InitGlobals;   { Initialize the global variables                            }   begin {InitGlobals}   documents := nil;   currentColor := 0;   currentShape := oLine;   colorItem := colorsBlack;   shapeItem := shapesLine;   end; {InitGlobals}   procedure InitMenus;   { Initialize the menu bar.                                   }   const      menuID = 1;                       {menu bar resource ID}    var      height: integer;                  {height of the largest menu}      menuBarHand: menuBarHandle;       {for 'handling' the menu bar}    begin {InitMenus}                                        {create the menu bar}   menuBarHand := NewMenuBar2(refIsResource, menuID, nil);   SetSysBar(menuBarHand);   SetMenuBar(nil);   FixAppleMenu(1);                     {add desk accessories}   height := FixMenuBar;                {draw the completed menu bar}   DrawMenuBar;   end; {InitMenus}   function GetPString (resourceID: integer): pStringPtr;   { Get a string from the resource fork                        }   {                                                            }   { Parameters:                                                }   {    resourceID - resource ID of the rPString resource       }   {                                                            }   { Returns: pointer to the string; nil for an error           }   {                                                            }   { Notes: The string is in a locked resource handle.  The     }   {    caller should call FreePString when the string is no    }   {    longer needed.  Failure to do so is not catastrophic;   }   {    the memory will be deallocated when the program is shut }   {    down.                                                   }   const      rPString = $8006;                 {resource type for p-strings}   var      hndl: handle;                     {resource handle}   begin {GetPString}   hndl := LoadResource(rPString, resourceID);   if ToolError <> 0 then      GetPString := nil   else begin      HLock(hndl);      GetPString := pStringPtr(hndl^);      end; {else}   end; {GetPString}   procedure FreePString (resourceID: integer);   { Free a resource string                                     }   {                                                            }   { Parameters:                                                }   {    resourceID - resource ID of the rPString to free        }   const      rPString = $8006;                 {resource type for p-strings}   begin {FreePString}                  ReleaseResource(-3, rPString, resourceID);   end; {FreePString}   procedure FlagError (error, tError: integer);   { Flag an error                                              }   {                                                            }   { Parameters:                                                }   {    error - error message number                            }   {    tError - toolbox error code; 0 if none                  }   const      errorAlert = 2000;                {alert resource ID}      errorBase = 2000;                 {base resource ID for error messages}   var      str: pString;                     {wprk string}      substArray: pStringPtr;           {substitution "array"}      button: integer;                  {button pushed}      function HexDigit (value: integer): char;      { Returns a hexadecimal digit for the value               }      {                                                         }      { Parameters:                                             }      {    value - value to form a digit from; only the least   }      {       significant 4 bits are used                       }      {                                                         }      { Returns: Hexadecimal character                          }      begin {HexDigit}      value := value & $000F;      if value > 9 then         HexDigit := chr(value-10 + ord('A'))      else         HexDigit := chr(value + ord('0'));      end; {HexDigit}   begin {FlagError}                                        {form the error string}   substArray := GetPString(errorBase + error);   str := substArray^;   FreePString(errorBase + error);   substArray := @str;   if tError <> 0 then begin            {add the tool error number}      str := concat(         str,         ' ($',         HexDigit(tError >> 12),         HexDigit(tError >> 8),         HexDigit(tError >> 4),         HexDigit(tError),         ')'         );      end; {if}                                        {show the alert}   button := AlertWindow($0005, @substArray, ord4(errorAlert));   end; {FlagError}   procedure SaveDocument (dPtr: documentPtr);   { Save a document file to disk                                  }   {                                                               }   { Parameters:                                                   }   {    dPtr - pointer to the document to save                     }   var      f: file of objectRecord;          {output file variable}      gsosNamePtr: gsosOutStringPtr;    {pointer to the GS/OS path name}      i: integer;                       {loop/index variable}      name: pString;                    {new document name}      procedure SaveObjects (oPtr: objectPtr);      { Save the objects in the order created                   }      {                                                         }      { Parameters:                                             }      {    oPtr - pointer to first object to save               }      begin {SaveObjects}      if oPtr <> nil then begin         SaveObjects(oPtr^.next);         f^ := oPtr^;         put(f);         end; {if}      end; {SaveObjects}   begin {SaveDocument}   if dPtr <> nil then begin                                        {form the file name}      HLock(dPtr^.pathName);      gsosNamePtr := pointer(dPtr^.pathName^);      name := '';      for i := 1 to gsosNamePtr^.theString.size do         name := concat(name, gsosNamePtr^.theString.theString[i]);      HUnlock(dPtr^.pathName^);      rewrite(f, name);                 {open the file}      SaveObjects(dPtr^.objects);       {save all of the objects}      dPtr^.changed := false;           {no changes}      end; {if}   end; {SaveDocument}   procedure DoSaveAs (dPtr: documentPtr);   { Save a document to a new name                              }   {                                                            }   { Parameters:                                                }   {    dPtr - document to save                                 }      const      posX = 20;                        {X position of the dialog}      posY = 50;                        {Y position of the dialog}      titleID = 103;                    {prompt string resource ID}   var      dummyName: integer;               {used for a null file name prompt}      gsosNameHandle: handle;           {handle of the file name}      gsosNamePtr: gsosOutStringPtr;    {pointer to the GS/OS file name}      i: integer;                       {loop/index variable}      reply: replyRecord5_0;            {reply record}   begin {DoSaveAs}   if dPtr <> nil then begin      reply.nameVerb := 3;              {get the new file name}      reply.pathVerb := 3;      if dPtr^.fileName = nil then begin         dummyName := 0;         SFPutFile2(posX, posY, 2, titleID, 0, @dummyName, reply);         end {if}      else         SFPutFile2(posX, posY, 2, titleID, 0,            pointer(ord4(dPtr^.fileName^)+2), reply);      if ToolError <> 0 then         FlagError(3, ToolError)        {handle an error}      else if reply.good <> 0 then begin                                        {form the new window name}         gsosNameHandle := pointer(reply.nameRef);         HLock(gsosNameHandle);         gsosNamePtr := pointer(gsosNameHandle^);         dPtr^.wName := '  ';         for i := 1 to gsosNamePtr^.theString.size do            dPtr^.wName :=               concat(dPtr^.wName, gsosNamePtr^.theString.theString[i]);         dPtr^.wName := concat(dPtr^.wName, '  ');         HUnlock(gsosNameHandle);         SetWTitle(dPtr^.wName, dPtr^.wPtr);                                        {save the names}         dPtr^.fileName := handle(reply.nameRef);         dPtr^.pathName := handle(reply.pathRef);         dPtr^.onDisk := true;          {file is on disk}         SaveDocument(dPtr);            {save the file}         end; {else if}      end; {if}   end; {DoSaveAs}   procedure DoSave (dPtr: documentPtr);   { Save a document to the existing disk file                  }   {                                                            }   { Parameters:                                                }   {    dPtr - document to save                                 }   begin {DoSave}   if dPtr <> nil then      if dPtr^.onDisk then         SaveDocument(dPtr)      else         DoSaveAs(dPtr);   end; {DoSave}   function CloseDocument (dPtr: documentPtr): boolean;   { Close a document and its associated window                    }   {                                                               }   { Parameters:                                                   }   {    dPtr - pointer to the document to close; may be nil        }   {                                                               }   { Returns: True for normal close, false if the user canceled.   }   label 99;   const      alertID = 2;                      {alert string resource ID}            var      button: integer;                  {button pushed}      lPtr: documentPtr;                {pointer to the previous document}      name: pString;                    {document name}      namePtr: pStringPtr;              {pointer to document name}      oPtr: objectPtr;                  {used to dispose of the objects}   begin {CloseDocument}   CloseDocument := true;               {check for changes}   if dPtr <> nil then begin      while dPtr^.changed do begin         name := dPtr^.wName;         Delete(name, 1, 2);         Delete(name, length(name)-1, 2);         namePtr := @name;         button := AlertWindow($0005, @namePtr, alertID);         case button of            0: DoSave(dPtr);            1: dPtr^.changed := false;            2: begin               CloseDocument := false;               goto 99;               end;            end; {case}         end; {while}      CloseWindow(dPtr^.wPtr);          {close the window}      if documents = dPtr then          {remove dPtr from the list when...}         documents := dPtr^.next        {...dPtr is the first document}      else begin                        {...dPtr is not the first document}         lPtr := documents;         while lPtr^.next <> dPtr do            lPtr := lPtr^.next;         lPtr^.next := dPtr^.next;         end; {else}      if dPtr^.fileName <> nil then     {dispose of the name buffers}         DisposeHandle(dPtr^.fileName);      if dPtr^.pathName <> nil then         DisposeHandle(dPtr^.pathName);      while dPtr^.objects <> nil do     {dispose of the object list}         begin         oPtr := dPtr^.objects;         dPtr^.objects := oPtr^.next;         dispose(oPtr);         end; {while}      if dPtr^.prHandle <> nil then     {dispose of the print record}         DisposeHandle(dPtr^.prHandle);      dispose(dPtr);                    {dispose of the document record}      end; {if}   99:   end; {CloseDocument}   function FindDocument (wPtr: grafPortPtr): documentPtr;   { Find the document for wPtr                                    }   {                                                               }   { Parameters:                                                   }   {    wPtr - pointer to the window for which to find a document  }   {                                                               }   { Returns: Document pointer; nil if there isn't one             }   var      done: boolean;                    {used to test for loop termination}      dPtr: documentPtr;                {used to trace the document list}   begin {FindDocument}   dPtr := documents;   done := dPtr = nil;   while not done do      if dPtr^.wPtr = wPtr then         done := true      else begin         dPtr := dPtr^.next;         done := dPtr = nil;         end; {else}   FindDocument := dPtr;   end; {FindDocument}   procedure DrawObjects (oPtr: objectPtr);   { Draw objects in reverse order                              }   {                                                            }   { Parameters:                                                }   {    oPtr: remaining objects to draw                         }   begin {DrawObjects}   if oPtr <> nil then begin      DrawObjects(oPtr^.next);      PenNormal;      SetSolidPenPat(oPtr^.color);      case oPtr^.kind of         oLine:            with oPtr^ do begin               MoveTo(p1.h, p1.v);               LineTo(p2.h, p2.v);               end; {with}         oRect: PaintRect(oPtr^.r);         oOval: PaintOval(oPtr^.r);         end; {case}      end; {if}   end; {DrawObjects}   {$databank+}   procedure DrawContents;   { Draw the contents of the active port                       }   var      dPtr: documentPtr;                {document to draw}      info: locInfo;                    {record for PPToPort}   begin {DrawContents}   dPtr := FindDocument(GetPort);   if dPtr <> nil then      DrawObjects(dPtr^.objects);                  end; {DrawContents}   {$databank+}   function LoadDocument (dPtr: documentPtr): boolean;   { Load a document file from disk                                }   {                                                               }   { Parameters:                                                   }   {    dPtr - pointer to the document to save                     }   {                                                               }   { Returns: true if successful, else false                       }      var      count: integer;                   {number of points in the file}      f: file of objectRecord;          {output file variable}      gsosNamePtr: gsosOutStringPtr;    {pointer to the GS/OS path name}      i: integer;                       {loop/index variable}      name: pString;                    {new document name}      oPtr: objectPtr;                  {used to trace the object list}      port: grafPortPtr;                {caller's grafPort}      r: rect;                          {our port rect}            begin {LoadDocument}   if dPtr <> nil then begin                                        {form the file name}      HLock(dPtr^.pathName);      gsosNamePtr := pointer(dPtr^.pathName^);      name := '';      for i := 1 to gsosNamePtr^.theString.size do         name := concat(name, gsosNamePtr^.theString.theString[i]);      HUnlock(dPtr^.pathName^);      reset(f, name);                   {open the file}      while dPtr^.objects <> nil do     {dispose of the current objects}         begin         oPtr := dPtr^.objects;         dPtr^.objects := oPtr^.next;         dispose(oPtr);         end; {while}      while not eof(f) do begin         {add the points to the document}         new(oPtr);         oPtr^ := f^;         get(f);         oPtr^.next := dPtr^.objects;         dPtr^.objects := oPtr;         end; {while}      dPtr^.changed := false;           {no changes}      port := GetPort;                  {force an update}      SetPort(dPtr^.wPtr);      GetPortRect(r);      InvalRect(r);      SetPort(port);      end; {if}   LoadDocument := true;   end; {LoadDocument}   procedure GetUntitledName (var name: pString);   { Create a name for an untitled window                          }   {                                                               }   { Parameters:                                                   }   {    name - (returned) name for the window                      }   const      untitled = 101;                   {Resource number for "Untitled "}   var      dPtr: documentPtr;                {used to trace the document list}      number: integer;                  {new value for untitledNum}      sPtr: pStringPtr;                 {pointer to the resource string}   begin {GetUntitledName}   dPtr := documents;                   {if there are no untitled         }   number := 1;                         { documents then reset untitledNum}   while dPtr <> nil do      if not dPtr^.onDisk then begin         number := untitledNum;         dPtr := nil;         end {if}      else         dPtr := dPtr^.next;   untitledNum := number;   sPtr := GetPString(untitled);        {set the base name}   if sPtr = nil then      name := 'Untitled '   else begin      name := sPtr^;      FreePString(untitled);      end; {else}   name := concat(name, cnvis(untitledNum)); {add the untitled number}   name := concat('  ', name, '  ');    {pad with spaces}   untitledNum := untitledNum+1;        {update untitledNum}   end; {GetUntitledName}   function NewDocument (wName: pString): documentPtr;   { Open a new document                                           }   {                                                               }   { Parameters:                                                   }   {    wName - name for the new window                            }   {                                                               }   { Returns: Document pointer; nil for an error                   }   const      rWindParam1 = $800E;              {resource ID}      wrNum = 1001;                     {window resource number}   var      dPtr: documentPtr;                {new document pointer}   begin {NewDocument}   new(dPtr);                           {allocate the record}   if dPtr <> nil then begin      dPtr^.onDisk := false;            {not on disk}      dPtr^.wName := wName;             {set up the name}      dPtr^.fileName := nil;            {no file name handle}      dPtr^.pathName := nil;            {no path name handle}      dPtr^.objects := nil;             {no objects}      dPtr^.changed := false;           {no changes}      dPtr^.wPtr :=                     {open the window}         NewWindow2(@dPtr^.wName, 0, @DrawContents, nil, $02, wrNum,            rWindParam1);      if dPtr^.wPtr = nil then begin         FlagError(1, ToolError);       {handle a window error}         dispose(dPtr);         dPtr := nil;         end {if}      else begin         dPtr^.next := documents;       {put the document in the list}         documents := dPtr;                                        {allocate a print record}         dPtr^.prHandle := NewHandle(140, userID, 0, nil);         if dPtr^.prHandle <> nil then begin            PrDefault(dPtr^.prHandle);            if ToolError <> 0 then begin               DisposeHandle(dPtr^.prHandle);               dPtr^.prHandle := nil;               end; {if}            end; {if}         end; {else}      end {if}   else      FlagError(2, 0);                  {handle an out of memory error}   NewDocument := dPtr;   end; {NewDocument}   procedure HandleMenu;   { Handle a menu selection.                                   }   var      menuNum, menuItemNum: integer;    {menu number & menu item number}      tbool: boolean;                   {temp boolean}      procedure DoAbout;      { Draw our about box                                         }      const         alertID = 1;                   {alert string resource ID}      var         button: integer;               {button pushed}      begin {DoAbout}      button := AlertWindow($0005, nil, alertID);      end; {DoAbout}      procedure DoNew;      { Open a new document window                              }      var         dPtr: documentPtr;             {pointer to the new document}         name: pString;                 {new document name}      begin {DoNew}      GetUntitledName(name);      dPtr := NewDocument(name);      end; {DoNew}      procedure DoOpen;      { Open a file                                             }      const         posX = 20;                     {X position of the dialog}         posY = 50;                     {Y position of the dialog}         titleID = 102;                 {prompt string resource ID}      var         dPtr: documentPtr;             {pointer to the new document}         fileTypes: typeList5_0;        {list of valid file types}         gsosNameHandle: handle;        {handle of the file name}         gsosNamePtr: gsosOutStringPtr; {pointer to the GS/OS file name}         i: integer;                    {loop/index variable}         name: pString;                 {new document name}         reply: replyRecord5_0;         {reply record}         tbool: boolean;                {temporary boolean}      begin {DoOpen}      with fileTypes do begin           {set up the allowed file types}         numEntries := 1;         with fileAndAuxTypes[1] do begin            flags := $0000;            fileType := $06;            auxType := $0000;            end; {with}         end; {with}      reply.nameVerb := 3;              {get the file to open}      reply.pathVerb := 3;      SFGetFile2(posX, posY, 2, titleID, nil, fileTypes, reply);      if ToolError <> 0 then         FlagError(3, ToolError)        {handle an error}      else if reply.good <> 0 then begin                                        {form the file name}         gsosNameHandle := pointer(reply.nameRef);         HLock(gsosNameHandle);         gsosNamePtr := pointer(gsosNameHandle^);         name := '  ';         for i := 1 to gsosNamePtr^.theString.size do            name := concat(name, gsosNamePtr^.theString.theString[i]);         name := concat(name, '  ');         HUnlock(gsosNameHandle);         dPtr := NewDocument(name);     {get a document record}         if dPtr = nil then begin       {in case of error, dispose of the names}            DisposeHandle(handle(reply.nameRef));            DisposeHandle(handle(reply.pathRef));            end {if}         else begin                     {otherwise save the names}            dPtr^.fileName := handle(reply.nameRef);            dPtr^.pathName := handle(reply.pathRef);            if LoadDocument(dPtr) then  {read the file}               dPtr^.onDisk := true     {file is on disk}            else                        {handle a read error}               tbool := CloseDocument(dPtr);            end; {else}         end; {else if}      end; {DoOpen}      procedure DoPageSetup;      { Set up the printer options                              }      var         changed: boolean;              {did the print record change?}         dPtr: documentPtr;             {document to save}      begin {DoPageSetup}      dPtr := FindDocument(FrontWindow); {get the document}      if dPtr <> nil then begin                                        {make sure there is a print record}         if dPtr^.prHandle = nil then begin            dPtr^.prHandle := NewHandle(140, userID, 0, nil);            if dPtr^.prHandle <> nil then begin               PrDefault(dPtr^.prHandle);               if ToolError <> 0 then begin                  FlagError(6, ToolError);                  DisposeHandle(dPtr^.prHandle);                  dPtr^.prHandle := nil;                  end; {if}               end {if}            else               FlagError(6, ToolError);            end; {if}         if dPtr^.prHandle <> nil then  {update the print record}            changed := PrStlDialog(dPtr^.prHandle);         end; {if}      end; {DoPageSetup}      procedure DoPrint;      { Print the document                                      }      var         dPtr: documentPtr;             {document to save}         port: grafPortPtr;             {caller's grafPort}         procedure PrintDocument;         { Do the actual printing of the document               }         var            h, v: integer;              {size of document in pages}            info: locInfo;              {record for PPToPort}            prPort: grafPortPtr;        {printer's grafPort}            status: prStatusRec;        {printer status}            x, y: integer;              {page loop counters}            procedure GetPageCount (dPtr: documentPtr; var h, v: integer);            { Get the size of the document in pages             }            {                                                   }            { Parameters:                                       }            {    dPtr - document to get the size of             }            {    h, v - (returned) size in pages                }            begin {GetPageCount}            h := 1;            v := 1;            end; {GetPageCount}         begin {PrintDocument}         {main print loop}         prPort := PrOpenDoc(dPtr^.prHandle, nil);         if ToolError <> 0 then            FlagError(6, ToolError)         else begin            GetPageCount(dPtr, h, v);            for x := 1 to h do               for y := 1 to v do begin                  PrOpenPage(prPort, nil);                  if ToolError <> 0 then                     FlagError(6, ToolError)                  else begin                     {print here}                     DrawObjects(dPtr^.objects);                     {done printing}                     PrClosePage(prPort);                     end; {else}                  end; {for}            PrCloseDoc(prPort);            end; {else}         {spooling loop}         if PrError = 0 then            PrPicFile(dPtr^.prHandle, nil, @status);         end; {PrintDocument}      begin {DoPrint}      dPtr := FindDocument(FrontWindow); {get the document}      if dPtr <> nil then begin                                        {make sure there is a print record}         if dPtr^.prHandle = nil then begin            dPtr^.prHandle := NewHandle(140, userID, 0, nil);            if dPtr^.prHandle <> nil then begin               PrDefault(dPtr^.prHandle);               if ToolError <> 0 then begin                  FlagError(6, ToolError);                  DisposeHandle(dPtr^.prHandle);                  dPtr^.prHandle := nil;                  end; {if}               end {if}            else               FlagError(6, ToolError);            end; {if}         if dPtr^.prHandle <> nil then  {print the document}            if PrJobDialog(dPtr^.prHandle) then               PrintDocument;         end; {if}      end; {DoPrint}      procedure DoQuit;      { Handle quit processing                                  }      begin {DoQuit}      done := true;      while (documents <> nil) and done do         if documents <> nil then            done := CloseDocument(documents);      end; {DoSave}      procedure PickShape (item: integer);      { Select a new shape                                      }      {                                                         }      { Parameters:                                             }      {    item - menu item selected                            }      begin {PickShape}      CheckMItem(false, shapeItem);      shapeItem := item;      CheckMItem(true, shapeItem);      case shapeItem of         shapesLine: currentShape := oLine;         shapesRect: currentShape := oRect;         shapesOval: currentShape := oOval;         end; {case}      end; {PickShape}      procedure PickColor (item: integer);      { Select a new color                                      }      {                                                         }      { Parameters:                                             }      {    item - menu item selected                            }      begin {PickColor}      CheckMItem(false, colorItem);      colorItem := item;      CheckMItem(true, colorItem);      case colorItem of         colorsBlack:  currentColor := 0;         colorsBrown:  currentColor := 2;         colorsRed:    currentColor := 7;         colorsOrange: currentColor := 6;         colorsYellow: currentColor := 9;         colorsGreen:  currentColor := 10;         colorsBlue:   currentColor := 4;         colorsPurple: currentColor := 3;         end; {case}      end; {PickColor}          begin {HandleMenu}                                        {separate the menu and item numbers}   menuNum := long(myEvent.taskData).msw;   menuItemNum := long(myEvent.taskData).lsw;   case menuItemNum of                  {go handle the menu}      appleAbout:  DoAbout;      fileNew:     DoNew;      fileOpen:    DoOpen;      fileClose:   tbool := CloseDocument(FindDocument(FrontWindow));      fileSave:    DoSave(FindDocument(FrontWindow));      fileSaveAs:  DoSaveAs(FindDocument(FrontWindow));      filePageSetup: DoPageSetup;      filePrint:   DoPrint;      fileQuit:    DoQuit;      editUndo:    ;      editCut:     ;      editCopy:    ;      editPaste:   ;      editClear:   ;      shapesLine,      shapesRect,      shapesOval:  PickShape(menuItemNum);      colorsBlack,      colorsBrown,      colorsRed,      colorsOrange,      colorsYellow,      colorsGreen,      colorsBlue,      colorsPurple: PickColor(menuItemNum);      otherwise:   ;      end; {case}   HiliteMenu(false, menuNum);          {unhighlight the menu}   end; {HandleMenu}   procedure HandleMouseDown (dPtr: documentPtr; p: point);   { Handle a mouse down in a document window                   }   {                                                            }   { Parameters:                                                }   {    dPtr - document where the mouse down occurred           }   {    p - location of the event (global coordinates)          }   type      originRecord = record             {type for origin conversion}         case boolean of            true:  (long: longint);            false: (v, h: integer);         end;   var      origin: originRecord;             {wPtr's origin}      port: grafPortPtr;                {caller's grafPort}      procedure FixRect (var r: rect);      { Make sure the rectangle is valid                        }      {                                                         }      { Parameters:                                             }      {    r - rectangle to check                               }      var         t: integer;                    {swap variable}      begin {FixRect}      if r.h2 < r.h1 then begin         t := r.h2;         r.h2 := r.h1;         r.h1 := t;         end; {if}      if r.v2 < r.v1 then begin         t := r.v2;         r.v2 := r.v1;         r.v1 := t;         end; {if}      end; {FixRect}      procedure DoLine;      { Create a new line object                                }      var         finish: point;                 {end point}         newPoint: point;               {new point}         oPtr: objectPtr;               {new object}         r: rect;                       {used to force an update}      begin {DoLine}      {get ready to rubber-band}      finish := p;      PenNormal;      SetSolidPenPat(15);      SetPenMode(modeXOR);      {draw the initial line}      MoveTo(p.h, p.v);      LineTo(finish.h, finish.v);      {rubber-band loop}      while StillDown(0) do begin         GetMouse(newPoint);         if (newPoint.h <> finish.h) or (newPoint.v <> finish.v) then begin            MoveTo(p.h, p.v);            LineTo(finish.h, finish.v);            finish := newPoint;            MoveTo(p.h, p.v);            LineTo(finish.h, finish.v);            end; {if}         end; {while}      {erase the line}      MoveTo(p.h, p.v);      LineTo(finish.h, finish.v);      {create the new object}      new(oPtr);      oPtr^.color := currentColor;      oPtr^.kind := oLine;      oPtr^.p1.h := p.h + origin.h;      oPtr^.p1.v := p.v + origin.v;      oPtr^.p2.h := finish.h + origin.h;      oPtr^.p2.v := finish.v + origin.v;      oPtr^.next := dPtr^.objects;      dPtr^.objects := oPtr;      {force an update}      r.h1 := p.h;      r.h2 := finish.h;      r.v1 := p.v;      r.v2 := finish.v;      FixRect(r);      r.h2 := r.h2 + 1;      r.v2 := r.v2 + 1;      InvalRect(r);      end; {DoLine}      procedure DoRect;      { Create a new rect object                                }      var         finish: point;                 {end point}         newPoint: point;               {new point}         oPtr: objectPtr;               {new object}         r: rect;                       {work rect}                      begin {DoRect}      {get ready to rubber-band}      finish := p;      PenNormal;      SetSolidPenPat(15);      SetPenMode(modeXOR);      {draw the initial rect}      r.h1 := p.h;      r.h2 := finish.h;      r.v1 := p.v;      r.v2 := finish.v;      FixRect(r);      PaintRect(r);      {rubber-band loop}      while StillDown(0) do begin         GetMouse(newPoint);         if (newPoint.h <> finish.h) or (newPoint.v <> finish.v) then begin            PaintRect(r);            finish := newPoint;            r.h1 := p.h;            r.h2 := finish.h;            r.v1 := p.v;            r.v2 := finish.v;            FixRect(r);            PaintRect(r);            end; {if}         end; {while}      {erase the rect}      PaintRect(r);                  {create the new object}      new(oPtr);      oPtr^.color := currentColor;      oPtr^.kind := oRect;      oPtr^.r.h1 := r.h1 + origin.h;      oPtr^.r.h2 := r.h2 + origin.h;      oPtr^.r.v1 := r.v1 + origin.v;      oPtr^.r.v2 := r.v2 + origin.v;      oPtr^.next := dPtr^.objects;      dPtr^.objects := oPtr;      {force an update}      InvalRect(r);      end; {DoRect}      procedure DoOval;      { Create a new oval object                                }      var         finish: point;                 {end point}         newPoint: point;               {new point}         oPtr: objectPtr;               {new object}         r: rect;                       {work rect}      begin {DoOval}      {get ready to rubber-band}      finish := p;      PenNormal;      SetSolidPenPat(15);      SetPenMode(modeXOR);      {draw the initial oval}      r.h1 := p.h;      r.h2 := finish.h;      r.v1 := p.v;      r.v2 := finish.v;      FixRect(r);      PaintOval(r);      {rubber-band loop}      while StillDown(0) do begin         GetMouse(newPoint);         if (newPoint.h <> finish.h) or (newPoint.v <> finish.v) then begin            PaintOval(r);            finish := newPoint;            r.h1 := p.h;            r.h2 := finish.h;            r.v1 := p.v;            r.v2 := finish.v;            FixRect(r);            PaintOval(r);            end; {if}         end; {while}      {erase the oval}      PaintOval(r);                  {create the new object}      new(oPtr);      oPtr^.color := currentColor;      oPtr^.kind := oOval;      oPtr^.r.h1 := r.h1 + origin.h;      oPtr^.r.h2 := r.h2 + origin.h;      oPtr^.r.v1 := r.v1 + origin.v;      oPtr^.r.v2 := r.v2 + origin.v;      oPtr^.next := dPtr^.objects;      dPtr^.objects := oPtr;      {force an update}      InvalRect(r);      end; {DoOval}   begin {HandleMouseDown}   if dPtr <> nil then begin      port := GetPort;      SetPort(dPtr^.wPtr);      origin.long := GetContentOrigin(dPtr^.wPtr);      GlobalToLocal(p);      case currentShape of         oLine: DoLine;         oRect: DoRect;         oOval: DoOval;         end; {case}      dPtr^.changed := true;      SetPort(port);      end; {if}   end; {HandleMouseDown}   procedure CheckMenus;   { Check the menus to see if they should be dimmed            }   begin {CheckMenus}   if documents = nil then begin      DisableMItem(filePageSetup);      DisableMItem(filePrint);      DisableMItem(fileSave);      DisableMItem(fileSaveAs);      end {if}   else begin      EnableMItem(filePageSetup);      EnableMItem(filePrint);      EnableMItem(fileSave);      EnableMItem(fileSaveAs);      end; {else}   end; {CheckMenus}begin {Draw}startStopParm :=                        {start up the tools}   StartUpTools(userID, 2, 1);if ToolError <> 0 then   SysFailMgr(ToolError, @'Could not start tools: ');InitMenus;                              {set up the menu bar}InitCursor;                             {show the cursor}InitGlobals;                            {initialize our global variables}done := false;                          {main event loop}myEvent.taskMask := $001F7FFF;          {let task master do it all}repeat   CheckMenus;   event := TaskMaster(everyEvent, myEvent);   case event of                        {handle the events we need to}      wInSpecial,      wInMenuBar: HandleMenu;      wInGoAway:  tbool :=                     CloseDocument(FindDocument(grafPortPtr(myEvent.taskData)));      wInContent: HandleMouseDown(FindDocument(grafPortPtr(myEvent.taskData)),                     myEvent.eventWhere);      otherwise: ;      end; {case}until done;ShutDownTools(1, startStopParm);        {shut down the tools}end. {Draw}