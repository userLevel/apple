{---------------------------------------------------------------}{                                                               }{  Color Explorer                                               }{                                                               }{  Explore colors with this simple color intensity mixer.       }{                                                               }{---------------------------------------------------------------}program ColorExplorer;uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,     DialogMgr, MenuMgr, ResourceMgr, MemoryMgr, SFToolSet, ToolLocator,     MscToolSet;const   return        = 13;                  {return key code}    appleMenu     = 1;                   {Menu ID #s (also resource ID #s)}   fileMenu      = 2;   editMenu      = 3;   editUndo      = 250;   editCut       = 251;   editCopy      = 252;   editPaste     = 253;   editClear     = 254;   fileClose     = 255;   fileQuit      = 256;   appleAbout    = 257;   red0          = 260;   red1          = 261;   red2          = 262;   red3          = 263;   red4          = 264;   red5          = 265;   red6          = 266;   red7          = 267;   red8          = 268;   red9          = 269;   red10         = 270;   red11         = 271;   red12         = 272;   red13         = 273;   red14         = 274;   red15         = 275;   blue0         = 280;   blue1         = 281;   blue2         = 282;   blue3         = 283;   blue4         = 284;   blue5         = 285;   blue6         = 286;   blue7         = 287;   blue8         = 288;   blue9         = 289;   blue10        = 290;   blue11        = 291;   blue12        = 292;   blue13        = 293;   blue14        = 294;   blue15        = 295;   green0        = 300;   green1        = 301;   green2        = 302;   green3        = 303;   green4        = 304;   green5        = 305;   green6        = 306;   green7        = 307;   green8        = 308;   green9        = 309;   green10       = 310;   green11       = 311;   green12       = 312;   green13       = 313;   green14       = 314;   green15       = 315;   type   long = record                        {for splitting 4 bytes to 2 bytes}      case boolean of         true : (long: longint);         false: (lsw,msw: integer);      end;var   wPtr: grafPortPtr;                   {our window}   done: boolean;                       {tells if the program should stop}   event: integer;                      {event #; returned by GetNextEvent}   myEvent: eventRecord;                {last event returned in event loop}   redLevel, blueLevel, greenLevel: integer; {color levels}   startStopParm: longint;              {tool start/shutdown parameter}   procedure InitMenus;   { Initialize the menu bar.                                   }   const      menuID = 1;                       {menu bar resource ID}    var      height: integer;                  {height of the largest menu}      menuBarHand: menuBarHandle;       {for 'handling' the menu bar}    begin {InitMenus}                                        {create the menu bar}   menuBarHand := NewMenuBar2(refIsResource, menuID, nil);   SetSysBar(menuBarHand);   SetMenuBar(nil);   FixAppleMenu(1);                     {add desk accessories}   height := FixMenuBar;                {draw the completed menu bar}   DrawMenuBar;   end; {InitMenus}   procedure InitGlobals;   { Initialize the global variables                            }   begin {InitGlobals}   redLevel := 0;   blueLevel := 0;   greenLevel := 0;   end; {InitGlobals}   {$databank+}   procedure DrawContents;   { Draw the contents of the active port                       }   var      r: rect;                          {work rectangle}   begin {DrawContents}   PenNormal;   SetSolidPenPat(1);                   {draw the red rectangle}   r.h1 := 5; r.h2 := 65;   r.v1 := 5; r.v2 := 55;   PaintRect(r);   SetSolidPenPat(2);                   {draw the blue rectangle}   r.v1 := 58; r.v2 := 108;   PaintRect(r);   SetSolidPenPat(3);                   {draw the green rectangle}   r.v1 := 111; r.v2 := 161;   PaintRect(r);   SetSolidPenPat(4);                   {draw the combined rectangle}   r.h1 := 70; r.h2 := 295;   r.v1 := 5; r.v2 := 161;   PaintRect(r);   end; {DrawContents}   {$databank+}   procedure InitWindow;   { Set up the program window                                  }   const      rWindParam1 = $800E;              {resource ID}      wrNum = 1001;                     {window resource number}    var      height: integer;                  {height of the largest menu}      menuBarHand: menuBarHandle;       {for 'handling' the menu bar}    begin {InitWindow}   wPtr := NewWindow2(@' ', 0, @DrawContents, nil, $02, wrNum, rWindParam1);   end; {InitWindow}   procedure ChangeColorTable;   { Changes colors 1, 2, 3, and 4 based on the color levels    }   var      colors: colorTable;               {color table}   begin {ChangeColorTable}   GetColorTable(0, colors);   colors[1] := redLevel << 8;   colors[2] := greenLevel << 4;   colors[3] := blueLevel;   colors[4] := colors[1] + colors[2] + colors[3];   SetColorTable(0, colors);   end; {ChangeColorTable}   procedure HandleMenu;   { Handle a menu selection.                                   }    var      menuNum, menuItemNum: integer;    {menu number & menu item number}      procedure DoAbout;      { Draw our about box                                         }      const         alertID = 1;                   {alert string resource ID}      var         button: integer;               {button pushed}      begin {DoAbout}      button := AlertWindow($0005, nil, alertID);      end; {DoAbout}      procedure SetLevel (var colorLevel: integer; itemID, level: integer);      { Make a change to the color level                           }      {                                                            }      { Parameters:                                                }      {    colorLevel - color variable to update                   }      {    itemID - menu item ID for 0 color                       }      {    level - new color level                                 }      begin {SetLevel}      CheckMItem(false, itemID+colorLevel);      colorLevel := level;      CheckMItem(true, itemID+colorLevel);      ChangeColorTable;      end; {SetLevel}   begin {HandleMenu}                                        {separate the menu and item numbers}   menuNum := long(myEvent.taskData).msw;   menuItemNum := long(myEvent.taskData).lsw;   case menuItemNum of                  {go handle the menu}      appleAbout:  DoAbout;      fileClose:   ;      fileQuit:    done := true;      editUndo:    ;      editCut:     ;      editCopy:    ;      editPaste:   ;      editClear:   ;      red0:        SetLevel(redLevel, red0, 0);      red1:        SetLevel(redLevel, red0, 1);      red2:        SetLevel(redLevel, red0, 2);      red3:        SetLevel(redLevel, red0, 3);      red4:        SetLevel(redLevel, red0, 4);      red5:        SetLevel(redLevel, red0, 5);      red6:        SetLevel(redLevel, red0, 6);      red7:        SetLevel(redLevel, red0, 7);      red8:        SetLevel(redLevel, red0, 8);      red9:        SetLevel(redLevel, red0, 9);      red10:       SetLevel(redLevel, red0, 10);      red11:       SetLevel(redLevel, red0, 11);      red12:       SetLevel(redLevel, red0, 12);      red13:       SetLevel(redLevel, red0, 13);      red14:       SetLevel(redLevel, red0, 14);      red15:       SetLevel(redLevel, red0, 15);      blue0:       SetLevel(blueLevel, blue0, 0);      blue1:       SetLevel(blueLevel, blue0, 1);      blue2:       SetLevel(blueLevel, blue0, 2);      blue3:       SetLevel(blueLevel, blue0, 3);      blue4:       SetLevel(blueLevel, blue0, 4);      blue5:       SetLevel(blueLevel, blue0, 5);      blue6:       SetLevel(blueLevel, blue0, 6);      blue7:       SetLevel(blueLevel, blue0, 7);      blue8:       SetLevel(blueLevel, blue0, 8);      blue9:       SetLevel(blueLevel, blue0, 9);      blue10:      SetLevel(blueLevel, blue0, 10);      blue11:      SetLevel(blueLevel, blue0, 11);      blue12:      SetLevel(blueLevel, blue0, 12);      blue13:      SetLevel(blueLevel, blue0, 13);      blue14:      SetLevel(blueLevel, blue0, 14);      blue15:      SetLevel(blueLevel, blue0, 15);      green0:      SetLevel(greenLevel, green0, 0);      green1:      SetLevel(greenLevel, green0, 1);      green2:      SetLevel(greenLevel, green0, 2);      green3:      SetLevel(greenLevel, green0, 3);      green4:      SetLevel(greenLevel, green0, 4);      green5:      SetLevel(greenLevel, green0, 5);      green6:      SetLevel(greenLevel, green0, 6);      green7:      SetLevel(greenLevel, green0, 7);      green8:      SetLevel(greenLevel, green0, 8);      green9:      SetLevel(greenLevel, green0, 9);      green10:     SetLevel(greenLevel, green0, 10);      green11:     SetLevel(greenLevel, green0, 11);      green12:     SetLevel(greenLevel, green0, 12);      green13:     SetLevel(greenLevel, green0, 13);      green14:     SetLevel(greenLevel, green0, 14);      green15:     SetLevel(greenLevel, green0, 15);      otherwise:   ;      end; {case}   HiliteMenu(false, menuNum);          {unhighlight the menu}   end; {HandleMenu}begin {ColorExplorer}startStopParm :=                        {start up the tools}   StartUpTools(userID, 2, 1);if ToolError <> 0 then   SysFailMgr(ToolError, @'Could not start tools: ');InitMenus;                              {set up the menu bar}InitGlobals;                            {initialize our global variables}ChangeColorTable;                       {set up the initial color table}InitWindow;                             {set up the program window}InitCursor;                             {show the cursor}done := false;                          {main event loop}myEvent.taskMask := $001F7FFF;          {let task master do it all}repeat   event := TaskMaster(everyEvent, myEvent);   case event of                        {handle the events we need to}      wInSpecial,      wInMenuBar: HandleMenu;      otherwise: ;      end; {case}until done;ShutDownTools(1, startStopParm);        {shut down the tools}end. {ColorExplorer}