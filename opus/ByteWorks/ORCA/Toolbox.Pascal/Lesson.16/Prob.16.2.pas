{---------------------------------------------------------------}{                                                               }{  Play an AE sound file                                        }{                                                               }{---------------------------------------------------------------}program PlaySound (output);uses Common, SoundMgr, ResourceMgr, MemoryMgr, ToolLocator, MscToolSet;label 98, 99;const   fname = 'Hello.Sound';               {sound file name}var   f: file of byte;                     {sound file}   frequency: integer;                  {frequency of the file}   i: integer;                          {loop/index variable}   length: longint;                     {length of the sound}   soundBlock: soundParamBlock;         {sound parameter block}   soundHandle: handle;                 {sound block handle}   soundPtr: ptr;                       {sound block pointer}   startStopParm: longint;              {tool start/shutdown parameter}   function SizeToBuffer (size: integer): integer;   { Return the DOC buffer size for a given sound size          }   {                                                            }   { Parameters:                                                }   {    size - sound size, in bytes                             }   {                                                            }   { Returns: DOC buffer size value                             }   begin {SizeToBuffer}   if size <= 256 then      SizeToBuffer := 0   else if size <= 512 then      SizeToBuffer := 1   else if size <= 1024 then      SizeToBuffer := 2   else if size <= 2048 then      SizeToBuffer := 3   else if size <= 4096 then      SizeToBuffer := 4   else if size <= 8192 then      SizeToBuffer := 5   else if size <= 16384 then      SizeToBuffer := 6   else      SizeToBuffer := 7;   end; {SizeToBuffer}begin {Blaster}startStopParm :=                        {start up the tools}   StartUpTools(userID, 2, 1);if ToolError <> 0 then begin   writeln('Could not start tools: ', ToolError:1);   goto 99;   end; {if}                                        {create the sound buffer}soundHandle := NewHandle($010000, userID, $C014, nil);if ToolError <> 0 then begin   writeln('Could not allocate a sound buffer: ', ToolError:1);   goto 98;   end; {if}writeln('Reading the sound file...');   {read the sound file}reset(f, fname);for i := 0 to 7 do   get(f);length := f^; get(f);length := (ord4(f^) << 8) | length; get(f);length := (ord4(f^) << 16) | length; get(f);length := (ord4(f^) << 24) | length; get(f);frequency := f^; get(f);frequency := (f^ << 8) | frequency; get(f);soundPtr := soundHandle^;for i := 1 to ord(length) do begin   soundPtr^ := f^;   get(f);   soundPtr := pointer(ord4(soundPtr)+1);   end; {for}soundPtr^ := 0;with soundBlock do begin                {set up the sound parameter blocks}   waveStart := soundHandle^;   waveSize := (ord(length) + 255) div 256;   freqOffset := round(32.0*frequency/1645.0);   DOCBuffer := 0;   DOCBufferSize := SizeToBuffer(waveSize);   nextWaddr := nil;   volSetting := 250;   end; {with}writeln('Playing the sound...');        {start the sound}FFStartSound($0201, soundBlock);while not FFSoundDoneStatus(2) do ;     {wait for the sound to finish}98:ShutDownTools(1, startStopParm);        {shut down the tools}99:end. {Blaster}