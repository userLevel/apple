{---------------------------------------------------------------}{                                                               }{  Blaster Sound                                                }{                                                               }{---------------------------------------------------------------}program Blaster (output);uses Common, SoundMgr, ResourceMgr, MemoryMgr, ToolLocator, MscToolSet;label 98, 99;const   twoPi = 6.28318531;                  {2*pi}var   i: integer;                          {loop/index variable}   sinTable: array[1..100] of real;     {sine table (for speed)}   soundBlocks: array[1..10] of soundParamBlock; {sound parameter blocks}   soundHandle: handle;                 {sound block handle}   soundPtr: ptr;                       {sound block pointer}   startStopParm: longint;              {tool start/shutdown parameter}begin {Blaster}startStopParm :=                        {start up the tools}   StartUpTools(userID, 2, 1);if ToolError <> 0 then begin   writeln('Could not start tools: ', ToolError:1);   goto 99;   end; {if}                                        {create the sound buffer}soundHandle := NewHandle($010000, userID, $C014, nil);if ToolError <> 0 then begin   writeln('Could not allocate a sound buffer: ', ToolError:1);   goto 98;   end; {if}writeln('Setting up the sound...');     {put a sine wave in the buffer}soundPtr := soundHandle^;for i := 1 to 100 do   sinTable[i] := sin(i/100.0*twoPi)*120.0 + 128.0;for i := 1 to 4096 do begin   soundPtr^ := round(sinTable[i mod 100 + 1]*(1.0 - i/4096.0));   soundPtr := pointer(ord4(soundPtr)+1);   end; {for}with soundBlocks[1] do begin            {set up the sound parameter blocks}   waveStart := soundHandle^;   waveSize := 16;   freqOffset := round(32.0*40960.0/1645.0);   DOCBuffer := 0;   DOCBufferSize := 4;   nextWaddr := @soundBlocks[2];   volSetting := 250;   end; {with}for i := 2 to 9 do begin   soundBlocks[i] := soundBlocks[1];   soundBlocks[i].nextWaddr := @soundBlocks[i+1];   end; {for}soundBlocks[9] := soundBlocks[1];soundBlocks[9].nextWaddr := nil;writeln('Playing the sound...');        {start the sound}FFStartSound($0201, soundBlocks[1]);while not FFSoundDoneStatus(2) do ;     {wait for the sound to finish}98:ShutDownTools(1, startStopParm);        {shut down the tools}99:end. {Blaster}