{---------------------------------------------------------------}{                                                               }{  Clock Desk Accessory                                         }{                                                               }{---------------------------------------------------------------}{$NewDeskAcc NDAOpen NDAClose NDAAction NDAInit 60 $03FF '  Clock\H**'}program Clock;uses Common, QuickDrawII, WindowMgr, MscToolSet, DeskMgr, ResourceMgr,     MemoryMgr;var   clockActive: boolean;                {is the clock active?}   clockWinPtr: grafPortPtr;            {clock window pointer}   rID: integer;                        {resource file ID}function LGetPathname2 (userID, fileNum: integer): gsosInStringPtr; tool ($11, $22);function OpenResourceFork: boolean;{ Open the resource fork for this DA                            }var   fPtr: gsosInStringPtr;               {GS/OS file name pointer}   id: integer;                         {user ID for our executable chunk}begin {OpenResourceFork}id := SetHandleID(0, FindHandle(@OpenResourceFork));fPtr := LGetPathname2(id, 1);if ToolError = 0 then   rID := OpenResourceFile(1, nil, fPtr^);OpenResourceFork := ToolError = 0;end; {OpenResourceFork}procedure CloseResourceFork;{ Close the resource fork opened by OpenResourceFork            }begin {CloseResourceFork}CloseResourceFile(rID);end; {CloseResourceFork}procedure NDAClose;{ Close entry point                                             }begin {NDAClose}if clockActive then begin   CloseWindow(clockWinPtr);   clockActive := false;   end; {if}end; {NDAClose}procedure NDAInit (code: integer);{ Init entry point                                              }{                                                               }{ Parameters:                                                   }{    code - 1 for tool start up time, 0 for tool shut down time }begin {NDAInit}if code = 1 then   clockActive := falseelse   if clockActive then      NDAClose;end; {NDAInit}function NDAOpen: grafPortPtr;{ Open entry point                                              }{                                                               }{ Returns: Pointer to the new NDA window                        }const   rWindParam1 = $800E;                 {window resource type}   wrNum = 1001;                        {window resource number}begin {NDAOpen}NDAOpen := nil;if not clockActive then   if OpenResourceFork then begin      clockWinPtr :=         NewWindow2(@' Clock ', 0, nil, nil, $02, wrNum, rWindParam1);      if ToolError = 0 then begin         SetSysWindow(clockWinPtr);         clockActive := true;         NDAOpen := clockWinPtr;         end; {if}      CloseResourceFork;      end; {if}end; {NDAOpen}function NDAAction (code: integer; myEvent: eventRecord): boolean;{ Action entry point                                            }{                                                               }{ Parameters:                                                   }{    code - action code; tells why the call is being made       }{    event - if the code is eventAction, this is an event       }{       record; the parameter is unused for all other codes     }{                                                               }{ Returns: True if one of the five editing codes is handled,    }{    false if not.                                              }var   event: integer;                      {TaskMaster event code}   port: grafPortPtr;                   {caller's grafPort}   procedure DrawTime;   { Draw the time in the window                                }   var      i: integer;                       {loop variable}      timeString: packed array[1..21] of char; {string to hold time}   begin {DrawTime}   ReadAsciiTime(@timeString);   for i := 1 to 20 do      timeString[i] := chr(ord(timeString[i])&$7F);   timeString[21] := chr(0);   MoveTo(7, 10);   DrawCString(pointer(@timeString));   end; {DrawTime}   begin {NDAAction}NDAAction := false;case code of   eventAction:      event := TaskMasterDA(0, myEvent);   runAction: begin      port := GetPort;      SetPort(clockWinPtr);      DrawTime;      SetPort(port);      end;   otherwise: ;   end; {case}end; {NDAAction}begin{The body of the program is empty for an NDA.}end.