{---------------------------------------------------------------}{                                                               }{  Testbed for changing a menu name                             }{                                                               }{---------------------------------------------------------------}program Quit;uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,     DialogMgr, MenuMgr;const   return        = 13;                  {return key code}    file_Quit     = 256;                 {Menu ID #s}   options_Palette = 258;type   long = record                        {for splitting 4 bytes to 2 bytes}      case boolean of         true : (long: longint);         false: (lsw,msw: integer);      end;var   done: boolean;                       {tells if the program should stop}   event: integer;                      {event type returned by TaskMaster}   myEvent: eventRecord;                {last event returned in event loop}   paletteString: integer;              {palette string in use}   procedure InitMenus;   { Initialize the menu bar.                                   }    var      height: integer;                  {height of the largest menu}      menuHand: menuHandle;             {for 'handling' windows}      s: textPtr;                       {for building menus}    begin {InitMenus}   new(s);                              {create the options menu}   s^ := concat('>> Options \N4',chr(return));   s^ := concat(s^,'--Hide Palette\N258',chr(return));   s^ := concat(s^,'.',chr(return));   menuHand := NewMenu(s);   InsertMenu(menuHand,0);   new(s);                              {create the edit menu}   s^ := concat('>> Edit \N3',chr(return));   s^ := concat(s^,'--Undo\N250*Zz',chr(return));   s^ := concat(s^,'--Cut\N251*Xx',chr(return));   s^ := concat(s^,'--Copy\N252*Cc',chr(return));   s^ := concat(s^,'--Paste\N253*Vv',chr(return));   s^ := concat(s^,'--Clear\N254',chr(return));   s^ := concat(s^,'.',chr(return));   menuHand := NewMenu(s);   InsertMenu(menuHand,0);   new(s);                              {create the file menu}   s^ := concat('>> File \N2',chr(return));   s^ := concat(s^,'--Close\N255*Ww',chr(return));   s^ := concat(s^,'--Quit\N256*Qq',chr(return));   s^ := concat(s^,'.',chr(return));   menuHand := NewMenu(s);   InsertMenu(menuHand,0);   new(s);                              {create the apple menu}   s^ := concat('>>@\XN1',chr(return));   s^ := concat(s^,'--About...\N257',chr(return));   s^ := concat(s^,'.',chr(return));   menuHand := NewMenu(s);   InsertMenu(menuHand,0);   FixAppleMenu(1);                     {add desk accessories}   height := FixMenuBar;                {draw the completed menu bar}   DrawMenuBar;   end; {InitMenus}    procedure HandleMenu;   { Handle a menu selection.                                   }    var      menuNum, menuItemNum: integer;    {menu number & menu item number}      procedure ChangePalette;      { Change the menu item string for the palette choice      }      begin {ChangePalette}      if paletteString = 0 then begin         paletteString := 1;         SetMItem(ptr(ord4(@'--Show Palette')+1), options_palette);         end {if}      else begin         paletteString := 0;         SetMItem(ptr(ord4(@'--Hide Palette')+1), options_palette);         end; {else}      end; {ChangePalette}         begin {HandleMenu}                                        {get the menu and item numbers}   menuNum := long(myEvent.taskData).msw;   menuItemNum := long(myEvent.taskData).lsw;   case menuItemNum of                  {go handle the menu}      file_Quit:   done := true;      options_Palette: ChangePalette;      otherwise:   ;      end; {case}   HiliteMenu(false, menuNum);          {unhighlight the menu}   end; {HandleMenu}begin {Quit}StartDesk(640);InitMenus;                              {set up the menu bar}InitCursor;                             {show the cursor}paletteString := 0;                     {palette is visible}done := false;                          {main event loop}myEvent.taskMask := $001F7FFF;          {let TaskMaster do it all}repeat   event := TaskMaster(everyEvent, myEvent);   case event of      wInSpecial,      wInMenuBar: HandleMenu;      otherwise: ;      end; {case}until done;EndDesk;end. {Quit}