{---------------------------------------------------------------}{                                                               }{  Quit                                                         }{                                                               }{  This program creates a menu bar with one command: quit.      }{                                                               }{---------------------------------------------------------------}program Quit;uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,     DialogMgr, MenuMgr;const   return        = 13;                  {return key code}    File_Quit     = 256;                 {Menu ID #s}type   long = record                        {for splitting 4 bytes to 2 bytes}      case boolean of         true : (long: longint);         false: (lsw,msw: integer);      end;var   done: boolean;                       {tells if the program should stop}   myEvent: eventRecord;                {last event returned in event loop}   menuNum,menuItemNum: integer;        {menu number & menu item number}   where: integer;                      {where the mouse event occurred}   wPtr: grafPortPtr;                   {window where event occurred}   procedure InitMenus;   { Initialize the menu bar.                                   }    var      height: integer;                  {height of the largest menu}      menuHand: menuHandle;             {for 'handling' windows}      s: textPtr;                       {for building menus}    begin {InitMenus}   new(s);                              {create the file menu}   s^ := concat('>> File \N1',chr(return));   s^ := concat(s^,'--Quit\N256*Qq',chr(return));   s^ := concat(s^,'.',chr(return));   menuHand := NewMenu(s);   InsertMenu(menuHand,0);   height := FixMenuBar;                {draw the completed menu bar}   DrawMenuBar;   end; {InitMenus}    procedure HandleMenu;   { Handle a menu selection.                                   }    begin {HandleMenu}   case menuItemNum of                  {go handle the menu}      file_Quit:   done := true;      otherwise:   ;      end; {case}   HiliteMenu(false, menuNum);          {unhighlight the menu}   end; {HandleMenu}begin {Quit}StartDesk(640);InitMenus;                              {set up the menu bar}InitCursor;                             {show the cursor}done := false;                          {main event loop}repeat   if GetNextEvent(everyEvent, myEvent) then      case myEvent.eventWhat of         mouseDownEvt: begin            with myEvent.eventWhere do               where := FindWindow(wPtr, h, v);            if where = wInMenuBar then begin               MenuSelect(myEvent, nil);               menuNum := long(myEvent.taskData).msw;               menuItemNum := long(myEvent.taskData).lsw;               if menuItemNum <> 0 then                  HandleMenu;               end; {if}            end;         keyDownEvt, autoKeyEvt: begin            if (myEvent.eventModifiers & appleKey) <> 0 then begin               MenuKey(myEvent, nil);               menuNum := long(myEvent.taskData).msw;               menuItemNum := long(myEvent.taskData).lsw;               if menuItemNum <> 0 then                  HandleMenu;               end; {if}            end;         otherwise: {do nothing};         end; {case}until done;EndDesk;end. {Quit}