{---------------------------------------------------------------}{                                                               }{  Fortune Cookie                                               }{                                                               }{  Randomly selects a wise(?) saying.                           }{                                                               }{---------------------------------------------------------------}program Fortune;uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,     DialogMgr, MenuMgr, MemoryMgr, ResourceMgr;const   return        = 13;                  {return key code}    appleMenu     = 1;                   {Menu ID #s (also resource ID #s)}   fileMenu      = 2;   editMenu      = 3;   editUndo      = 250;   editCut       = 251;   editCopy      = 252;   editPaste     = 253;   editClear     = 254;   fileOpen      = 258;   fileClose     = 255;   fileQuit      = 256;   appleAbout    = 257;   numberOfFortunes = 10;               {# of sayings in resource fork}type   long = record                        {for splitting 4 bytes to 2 bytes}      case boolean of         true : (long: longint);         false: (lsw,msw: integer);      end;var   done: boolean;                       {tells if the program should stop}   event: integer;                      {event #; returned by GetNextEvent}   myEvent: eventRecord;                {last event returned in event loop}   iconSize: 1..9;                      {icon size}   iconNumber: 2..6;                    {icon number}   procedure InitMenus;   { Initialize the menu bar.                                   }   const      menuID = 1;                       {menu bar resource ID}    var      height: integer;                  {height of the largest menu}      menuBarHand: menuBarHandle;       {for 'handling' the menu bar}    begin {InitMenus}                                        {create the menu bar}   menuBarHand := NewMenuBar2(refIsResource, menuID, nil);   SetSysBar(menuBarHand);   SetMenuBar(nil);   FixAppleMenu(1);                     {add desk accessories}   height := FixMenuBar;                {draw the completed menu bar}   DrawMenuBar;   end; {InitMenus}   procedure InitRandom;   { Initialize Pascal's random number generator                }   begin {InitRandom}   Seed($A55A);   end; {InitRandom}   procedure HandleMenu;   { Handle a menu selection.                                   }    var      menuNum, menuItemNum: integer;    {menu number & menu item number}      procedure DoAbout;      { Draw our about box                                      }      const         alertID = 1;                   {alert string resource ID}      var         button: integer;               {button pushed}      begin {DoAbout}      button := AlertWindow($0005, nil, alertID);      end; {DoAbout}      procedure FortuneAlert (number: integer);      { Show a fortune                                          }      {                                                         }      { Parameters:                                             }      {    number - number of the fortune to show               }      const         fortuneAlert = 21;             {alert resource ID}         base = 2000;                   {base resource ID for fortunes}         rPString = $8006;              {resource type for p-strings}      var         substArray: pStringPtr;        {substitution "array"}         button: integer;               {button pushed}         function GetPString (resourceID: integer): pStringPtr;         { Get a string from the resource fork                  }         {                                                      }         { Parameters:                                          }         {    resourceID - resource ID of the rPString resource }         {                                                      }         { Returns: pointer to the string; nil for an error     }         {                                                      }         { Notes: The string is in a locked resource handle.    }         {    The caller should call FreePString when the       }         {    string is no longer needed.  Failure to do so is  }         {    not catastrophic; the memory will be deallocated  }         {    when the program is shut down.                    }         var            hndl: handle;               {resource handle}         begin {GetPString}         hndl := LoadResource(rPString, resourceID);         if ToolError <> 0 then            GetPString := nil         else begin            HLock(hndl);            GetPString := pStringPtr(hndl^);            end; {else}         end; {GetPString}         procedure FreePString (resourceID: integer);         { Free a resource string                               }         {                                                      }         { Parameters:                                          }         {    resourceID - resource ID of the rPString to free  }         begin {FreePString}         ReleaseResource(-3, rPString, resourceID);         end; {FreePString}      begin {FortuneAlert}      substArray := GetPString(base+number);      button := AlertWindow($0005, @substArray, ord4(fortuneAlert));      FreePString(base+number);      end; {FortuneAlert}   begin {HandleMenu}                                        {separate the menu and item numbers}   menuNum := long(myEvent.taskData).msw;   menuItemNum := long(myEvent.taskData).lsw;   case menuItemNum of                  {go handle the menu}      appleAbout:  DoAbout;      fileOpen:    FortuneAlert(RandomInteger mod numberOfFortunes + 1);      fileClose:   ;      fileQuit:    done := true;      editUndo:    ;      editCut:     ;      editCopy:    ;      editPaste:   ;      editClear:   ;      otherwise:   ;      end; {case}   HiliteMenu(false, menuNum);          {unhighlight the menu}   end; {HandleMenu}begin {Fortune}StartDesk(640);InitMenus;                              {set up the menu bar}InitCursor;                             {show the cursor}InitRandom;                             {initialize the random number generator}done := false;                          {main event loop}myEvent.taskMask := $001F7FFF;          {let task master do it all}repeat   event := TaskMaster(everyEvent, myEvent);   case event of                        {handle the events we need to}      wInSpecial,      wInMenuBar: HandleMenu;      otherwise: ;      end; {case}until done;EndDesk;end. {Fortune}