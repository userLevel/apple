{---------------------------------------------------------------}{                                                               }{  Alert Sampler                                                }{                                                               }{  This program lets you pick any combination of alert sizes    }{  and icons.                                                   }{                                                               }{---------------------------------------------------------------}program Sampler;uses Common, QuickDrawII, EventMgr, WindowMgr, ControlMgr, DeskMgr,     DialogMgr, MenuMgr;const   return        = 13;                  {return key code}    appleMenu     = 1;                   {Menu ID #s (also resource ID #s)}   fileMenu      = 2;   editMenu      = 3;   sizeMenu      = 4;   iconMenu      = 5;   editUndo      = 250;   editCut       = 251;   editCopy      = 252;   editPaste     = 253;   editClear     = 254;   fileOpen      = 258;   fileClose     = 255;   fileQuit      = 256;   appleAbout    = 257;   size1         = 261;   size2         = 262;   size3         = 263;   size4         = 264;   size5         = 265;   size6         = 266;   size7         = 267;   size8         = 268;   size9         = 269;   iconStop      = 271;   iconNote      = 272;   iconCaution   = 273;   iconDisk      = 274;   iconSwap      = 275;type   long = record                        {for splitting 4 bytes to 2 bytes}      case boolean of         true : (long: longint);         false: (lsw,msw: integer);      end;var   done: boolean;                       {tells if the program should stop}   event: integer;                      {event #; returned by GetNextEvent}   myEvent: eventRecord;                {last event returned in event loop}   iconSize: 1..9;                      {icon size}   iconNumber: 2..6;                    {icon number}   procedure InitMenus;   { Initialize the menu bar.                                   }   const      menuID = 1;                       {menu bar resource ID}    var      height: integer;                  {height of the largest menu}      menuBarHand: menuBarHandle;       {for 'handling' the menu bar}    begin {InitMenus}                                        {create the menu bar}   menuBarHand := NewMenuBar2(refIsResource, menuID, nil);   SetSysBar(menuBarHand);   SetMenuBar(nil);   FixAppleMenu(1);                     {add desk accessories}   height := FixMenuBar;                {draw the completed menu bar}   DrawMenuBar;   end; {InitMenus}    procedure HandleMenu;   { Handle a menu selection.                                   }    var      menuNum, menuItemNum: integer;    {menu number & menu item number}      procedure DoAbout;      { Draw our about box                                         }      const         alertID = 1;                   {alert string resource ID}      var         button: integer;               {button pushed}      begin {DoAbout}      button := AlertWindow($0005, nil, alertID);      end; {DoAbout}      procedure SampleAlert (size, icon: integer);      { Draw an alert window                                       }      {                                                            }      { Parameters:                                                }      {    size - size of the alert (1..9)                         }      {    icon - alert icon number (2..6)                         }      var         alertString: packed array[1..200] of char; {alert string}         button: integer;               {button pushed}      begin {SampleAlert}      alertString := concat(chr(ord('0')+size),         chr(ord('0')+icon),         '/Sample alert of size ',         chr(ord('0')+size),         ', with icon ',         chr(ord('0')+icon),         './^#0'         );      button := AlertWindow($0001, nil, @alertString);      end; {SampleAlert}      procedure SetIconNumber (number: integer);      { Set the icon number                                     }      {                                                         }      { Parameters:                                             }      {    number - icon number (2..6)                          }      begin {SetIconNumber}      CheckMItem(false, iconStop + iconNumber - 2);      iconNumber := number;      CheckMItem(true, iconStop + iconNumber - 2);      end; {SetIconNumber}      procedure SetIconSize (size: integer);      { Set the icon size                                       }      {                                                         }      { Parameters:                                             }      {    size - icon size (1..9)                              }      begin {SetIconSize}      CheckMItem(false, size1 + iconSize - 1);      iconSize := size;      CheckMItem(true, size1 + iconSize - 1);      end; {SetIconSize}   begin {HandleMenu}                                        {separate the menu and item numbers}   menuNum := long(myEvent.taskData).msw;   menuItemNum := long(myEvent.taskData).lsw;   case menuItemNum of                  {go handle the menu}      appleAbout:  DoAbout;      fileOpen:    SampleAlert(iconSize, iconNumber);      fileClose:   ;      fileQuit:    done := true;      editUndo:    ;      editCut:     ;      editCopy:    ;      editPaste:   ;      editClear:   ;      size1:       SetIconSize(1);      size2:       SetIconSize(2);      size3:       SetIconSize(3);      size4:       SetIconSize(4);      size5:       SetIconSize(5);      size6:       SetIconSize(6);      size7:       SetIconSize(7);      size8:       SetIconSize(8);      size9:       SetIconSize(9);      iconStop:    SetIconNumber(2);      iconNote:    SetIconNumber(3);      iconCaution: SetIconNumber(4);      iconDisk:    SetIconNumber(5);      iconSwap:    SetIconNumber(6);      otherwise:   ;      end; {case}   HiliteMenu(false, menuNum);          {unhighlight the menu}   end; {HandleMenu}begin {Sampler}StartDesk(640);InitMenus;                              {set up the menu bar}InitCursor;                             {show the cursor}iconSize := 1;                          {default icon size is 1}iconNumber := 2;                        {default icon number is 2}done := false;                          {main event loop}myEvent.taskMask := $001F7FFF;          {let task master do it all}repeat   event := TaskMaster(everyEvent, myEvent);   case event of                        {handle the events we need to}      wInSpecial,      wInMenuBar: HandleMenu;      otherwise: ;      end; {case}until done;EndDesk;end. {Sampler}