;----------------------------------------------------------------;; GSoft BASIC Tool, GS/OS, ORCA/Shell and Talking Tools interface; files.;; Copyright 1998, Byte Works, Inc.; All rights reserved.;;----------------------------------------------------------------;; Common Types;;----------------------------------------------------------------; Reference verbs describing parameter type.const pointerVerb     =   $0000         ; parm is pointer to block of dataconst handleVerb      =   $0001         ; parm is handle of block of dataconst resourceVerb    =   $0002         ; parm is resource IDconst newHandleVerb   =   $0003         ; tool is to create new handle; TaskMaster/Event Manager result codesconst nullEvt         =   $0000const inNull          =   $0000const wNoHit          =   $0000const mouseDownEvt    =   $0001const inButtDwn       =   $0001const mouseUpEvt      =   $0002const keyDownEvt      =   $0003const inKey           =   $0003const autoKeyEvt      =   $0005const updateEvt       =   $0006const inUpdate        =   $0006const activateEvt     =   $0008const switchEvt       =   $0009const deskAccEvt      =   $000Aconst driverEvt       =   $000Bconst app1Evt         =   $000Cconst app2Evt         =   $000Dconst app3Evt         =   $000Econst app4Evt         =   $000Fconst wInDesk         =   $0010         ; in desktopconst wInMenuBar      =   $0011         ; in system menu barconst wClickCalled    =   $0012         ; system click calledconst wInContent      =   $0013         ; in content region of windowconst wInDrag         =   $0014         ; in drag region of windowconst wInGrow         =   $0015         ; in grow box of active windowconst wInGoAway       =   $0016         ; in close box of active windowconst wInZoom         =   $0017         ; in zoom box of active windowconst wInInfo         =   $0018         ; in information bar of windowconst wInSpecial      =   $0019         ; item ID selected was 250-255const wInDeskItem     =   $001A         ; item ID selected was 1-249const wInFrame        =   $001B         ; in frame, but not on anything elseconst wInactMenu      =   $001C         ; inactive menu item selectedconst wClosedNDA      =   $001D         ; desk accessory closedconst wCalledSysEdit  =   $001E         ; inactive menu item selectedconst wTrackZoom      =   $001F         ; zoom box clicked, but not selectedconst wHitFrame       =   $0020         ; button down on frame, made activeconst wInControl      =   $0021         ; button or keystroke in controlconst wInSysWindow    =   $8000         ; high-order bit set for system windows; Base tool types that have no corresponding BASIC typetype boolean as integerconst true = 1const false = 0type char as bytetype fixed as longtype pString(256) as char               ; the first byte is the number of characterstype pStringPtr as pointer to pStringtype cString(256) as char               ; mark the end of the string with 0type cStringPtr as pointer to cString; pointer to a null terminated string (or to a block of text)type stringPtr as pointer to string; ProDOS 16 pathnametype pathName(129) as chartype pathPtr as pointer to pathName; GS/OS class 1 input stringtype gsosInString   size as integer   ; Change the array size as needed for your application   theString(254) as charend typetype gsosInStringPtr as pointer to gsosInString; GS/OS class 1 output stringtype gsosOutString   maxSize as integer   theString as gsosInStringend typetype gsosOutStringPtr as pointer to gsosOutString; GS/OS option listtype optionListRecord   totalSize as integer   requiredSize as integer   fileSysID as integer   ; theData is a variable length array   theData(10) as charend typetype optionListPtr as pointer to optionListRecord; GS/OS time fieldtype timeField(7) as byte; "General" types to circumvent type checking by GSofttype ptr as pointer to bytetype handle as pointer to ptrtype rgnHandle as handletype procPtr as ptrtype intPtr as pointer to integertype longPtr as pointer to long; Basic shapestype point   v as integer   h as integerend typetype pointPtr as pointer to pointtype rect   case normal      v1 as integer      h1 as integer      v2 as integer      h2 as integer   case mac      top as integer      left as integer      bottom as integer      right as integer   case points      topLeft as point      botRight as pointend typetype rectPtr as pointer to rect; Patterntype pattern(31) as bytetype patternPtr as pointer to pattern; Color tabletype colorTable(15) as integertype colorTblPtr as pointer to colorTabletype colorTablePtr as pointer to colorTabletype colorTableHndl as pointer to colorTablePtr   ; Font recordtype font   offsetToMF as integer   family as integer   style as integer   size as integer   _version as integer   fbrExtent as integer   highowTLoc as integer   ; Other fields used internally by the Font Managerend typetype fontPtr as pointer to fonttype fontHndl as pointer to fontPtr; Location information recordtype locInfo   portSCB as integer   ptrToPixelImage as ptr   width as integer   boundsRect as rectend typetype locInfoPtr as pointer to locInfo; Masktype mask(7) as bytetype maskPtr as pointer to mask; Fontstype fontID   famNum as integer   fontStyle as byte   fontSize as byteend typetype fontStatRec   resultID as fontID   resultStats as integerend typetype fontStatRecPtr as pointer to fontStatRec; Event recordtype eventRecord   eventWhat as integer   eventMessage as long   eventWhen as long   eventWhere as point   eventModifiers as integer   ; TaskMaster fields   taskData as long   taskMask as long   lastClickTick as long   ClickCount as integer   TaskData2 as long   TaskData3 as long   TaskData4 as long   lastClickPt as pointend typetype eventRecPtr as pointer to eventRecordtype wmTaskRec as eventRecord; Control recordtype keyEquivRec   key1 as byte   key2 as byte   keyModifiers as integer   keyCareBits as integerend typetype textList   cachedHandle as long   cachedOffset as longend typetype superHandle   cachedHandle as long   cachedOffset as long   cachedIndex as integerend typetype keyRecord   theChar as integer   theModifiers as integer   theInputHandle as long   cursorOffset as long   theOpCode as integerend typetype teStyle   teFont as fontID   foreColor as integer   backColor as integer   userData as longend typetype grafPortPtr as pointer to grafPorttype ctlPtr as pointer to ctlRectype ctlRecHndl as pointer to ctlPtrtype ctlRec   ctlNext as ctlRecHndl   ctlOwner as grafPortPtr   ctlRect as rect   ctlFlag as byte   ctlHilite as byte   ctlValue as integer   ctlProc as procPtr   ctlAction as procPtr   ctlData as long   ctlRefCon as long   ctlColor as colorTblPtr   ctlType as integer   case generic      genericReserved1 as long      genericReserved2 as long      genericReserved3 as long      genericReserved4 as long      ctlID as long      ctlMoreFlags as integer      ctlVersion as integer   case btnOrCheck      keyEquiv as keyEquivRec      btnOrCheckReserved1 as long      btnOrCheckReserved2 as long      btnOrCheckReserved3 as integer      ctlID1 as long      ctlMoreFlags1 as integer      ctlVersion1 as integer   case icon      keyEquiv2 as keyEquivRec      iconReserved1 as long      iconReserved2 as long      iconReserved3 as integer      ctlID2 as long      ctlMoreFlags2 as integer      ctlVersion2 as integer      iconRef as long      displayMode as integer   case lnEdPicGrow      lnEdPicGrowReserved1 as long      lnEdPicGrowReserved2 as long      lnEdPicGrowReserved3 as long      lnEdPicGrowReserved4 as long      ctlID3 as long      ctlMoreFlags3 as integer      ctlVersion3 as integer   case list      ctlMemDraw as procPtr      ctlMemHeight as integer      ctlMemSize as integer      ctlListRef as long      ctlListBar as ctlRecHndl      ctlID4 as long      ctlMoreFlags4 as integer      ctlVersion4 as integer   case popUp      menuRef as long      menuEnd as long      popUpRect as rect      ctlID5 as long      ctlMoreFlags5 as integer      ctlVersion5 as integer      titleWidth as integer   case scroll      thumbRect as rect      pageRegion as rect      ctlID6 as long      ctlMoreFlags6 as integer      ctlVersion6 as integer   case staticText      ctlJust as integer      staticTextReserved1 as long      staticTextReserved2 as long      staticTextReserved3 as long      staticTextReserved4 as integer      ctlID7 as long      ctlMoreFlags7 as integer      ctlVersion7 as integer   case textEdit      textFlags as long      textLength as long      blockList as textList      ctrlID8 as integer      ctrlMoreFlags8 as integer      ctrlVersion8 as integer      viewRect as rect      totalHeight as long      lineSuper as superHandle      styleSuper as superHandle      styleList as handle      rulerList as handle      lineAtEndFlag as integer      selectionStart as long      selectionEnd as long      selectionActive as integer      selectionState as integer      caretTime as long      nullStyleActive as integer      nullStyle as teStyle      topTextOffset as long      topTextVPos as integer      vertScrollBar as ctlRecHndl      vertScrollPos as long      vertScrollMax as long      vertScrollAmount as integer      horzScrollBar as ctlRecHndl      horzScrollPos as long      horzScrollMax as long      horzScrollAmount as integer      growBoxHandle as ctlRecHndl      maximumChars as long      maximumLines as long      maxCharsPerLine as integer      maximumHeight as integer      textDrawMode as integer      wordBreakHook as procPtr      wordWrapHook as procPtr      keyFilter as procPtr      theFilterRect as rect      theBufferVPos as integer      theBufferHPos as integer      theKeyRecord as keyRecord      cachedSelcOffset as long      cachedSelcVPos as integer      cachedSelcHPos as integer      mouseRect as rect      mouseTime as long      mouseKind as integer      lastClick as long      savedHPos as integer      anchorPoint as longend type; Graphics porttype grafPort   portInfo as locInfo   portRect as rect   clipRgn as rgnHandle   visRgn as rgnHandle   bkPat as pattern   pnLoc as point   pnSize as point   pnMode as integer   pnPat as pattern   pnMask as mask   pnVis as integer   fontHandle as fontHndl   theFontID as fontID   fontFlags as integer   txSize as integer   txFace as integer   txMode as integer   spExtra as fixed   chExtra as fixed   fgColor as integer   bgColor as integer   picSave as handle   rgnSave as handle   polySave as handle   grafProcs as ptr   arcRot as integer   userField as long   sysField as long   ; These additional fields are used by the Window Manager.   wDefProc as long   wRefCon as long   wContDraw as long   wReserved as long   wStructRgn as rgnHandle   wContRgn as rgnHandle   wUpdateRgn as rgnHandle   wControl as ctlRecHndl   wFrameControl as ctlRecHndl   wFrame as integerend type; Dialog templatetype itemTemplate   itemID as integer   itemRect as rect   itemType as integer   itemDescr as ptr   itemValue as integer   itemFlag as integer   itemColor as colorTblPtrend typetype itemTempPtr as pointer to itemTemplatetype dialogTemplate   dtBoundsRect as rect   dtVisible as boolean   dtRefCon as long   ; dtItemList is an array with one more element than the number of items in   ; the dialog.  Set the last element of the array to NULL to mark the end.   dtItemList(10) as itemTempPtrend typetype dialogTempPtr as pointer to dialogTemplate; Menu recordtype menu   menuID as integer   menuWidth as integer   menuHeight as integer   menuProc as procPtr   menuFlag as byte   menuRes as byte   numOfItems as integer   titleWidth as integer   titleName as pStringPtr   menuCache as handleend typetype menuPtr as pointer to menutype menuHandle as pointer to menuPtr; Menu bar recordtype menuBar   ctlNext as ctlRecHndl   ctlOwner as grafPortPtr   ctlRect as rect   ctlFlag as byte   ctlHilite as byte   ctlValue as integer   ctlProc as procPtr   ctlAction as procPtr   ctlData as long   ctlRefCon as long   ctlColor as colorTblPtr   ; menuList is a variable length array   menuList(10) as menuHandleend typetype menuBarPtr as pointer to menuBartype menuBarHandle as pointer to menuBarPtr; Member recordtype memRec   memPtr as pStringPtr   memFlag as byte   ; Rest is defined by userend typetype memRecPtr as pointer to memRec; Scroll bar color tabletype barColors   barOutline as integer   barNorArrow as integer   barSelArrow as integer   barArrowBack as integer   barNorThumb as integer   barSelThumb as integer   barPageRgn as integer   barInactive as integerend typetype barColorsPtr as pointer to barColorstype ctlType as integer; types for ctlType:const generic     = 0const btnOrCheck  = 1const icon        = 2const lnEdPicGrow = 3const list        = 4const popUp       = 5const scroll      = 6const staticText  = 7const textEdit    = 8;----------------------------------------------------------------;; ACE (Apple IIGS Audio Compression and Expansion);;----------------------------------------------------------------Tool $1D, $01 SUB      ACEBootInitTool $1D, $02 SUB      ACEStartup (%)Tool $1D, $03 SUB      ACEShutdownTool $1D, $04 FUNCTION ACEVersionas as %Tool $1D, $05 SUB      ACEResetTool $1D, $06 FUNCTION ACEStatus as booleanTool $1D, $07 FUNCTION ACEInfo (%) as &Tool $1D, $0B SUB      ACECompBeginTool $1D, $09 SUB      ACECompress (handle, &, handle, &, %, %)Tool $1D, $0A SUB      ACEExpand (handle, &, handle, &, %, %)Tool $1D, $0C SUB      ACEExpBeginTool $1D, $0D FUNCTION GetACEExpState as ptrTool $1D, $0E SUB      SetACEExpState (ptr);----------------------------------------------------------------;; Control Manager;;----------------------------------------------------------------const ctlInVis         =   $0080        ; invisible mask for any type ctl; Simple button control flag valuesconst simpRound        =   $0000        ; single outlined, round corneredconst simpBRound       =   $0001        ; bold outlined, round corneredconst simpSquare       =   $0002        ; single outlined, square corneredconst simpDropSquare   =   $0003        ; single outlined, square cornered,                                        ; drop shadowedconst family           =   $007F        ; radio button family number; Scroll bar control flag valuesconst upFlag           =   $0001        ; up arrow on scroll barconst downFlag         =   $0002        ; down arrow on scroll barconst leftFlag         =   $0004        ; left arrow on scroll barconst rightFlag        =   $0008        ; right arrow on scroll barconst horScroll        =   $0010        ; horizontal scroll bar; Standard Control proceduresconst SimpleProc       =   $00000000    ; simple button standard controlconst CheckProc        =   $02000000    ; simple check-box std controlconst RadioProc        =   $04000000    ; radio button standard controlconst ScrollProc       =   $06000000    ; scroll bar standard controlconst GrowProc         =   $08000000    ; size box standard control; NewControl2 procRef values for standard control typesconst cSimpleButtonControl =  $80000000const cCheckControl        =  $82000000const cRadioControl        =  $84000000const cScrollBarControl    =  $86000000const cGrowControl         =  $88000000const cStatTextControl     =  $81000000const cEditLineControl     =  $83000000const cEditTextControl     =  $85000000const cPopUpControl        =  $87000000const cListControl         =  $89000000const cIconButtonControl   =  $07FF0001const cPictureControl      =  $8D000000; DefProc message parametersconst drawCtl          =   $00          ; draw the controlconst calcCRect        =   $01          ; compute the rectangle to dragconst testCtl          =   $02          ; test where mouse button pressedconst initCtl          =   $03          ; perform additional control initconst dispCtl          =   $04          ; take additional disposal actionsconst posCtl           =   $05          ; move control's indicatorconst thumbCtl         =   $06          ; compute parms for dragging indic.const dragCtl          =   $07          ; drag either indicator or controlconst autoTrack        =   $08          ; called while dragging if -1 passed                                        ; to TrackControlconst newValue         =   $09          ; called when ctl gets new valueconst setParams        =   $0A          ; called when ctl gets add. parmsconst moveCtl          =   $0B          ; called when control movesconst recSize          =   $0C          ; return ctl record size in bytesconst ctlHandleEvent    =  $0D          ; handle keystrokes/menu selectionsconst ctlChangeTarget   =  $0E          ; make control active/inactiveconst ctlChangeBounds   =  $0F          ; change bounds rectangle of controlconst ctlWindChangeSize =  $10          ; window has grown or been zoomedconst ctlHandleTab      =  $11          ; control was tabbed toconst ctlNotifyMultiPart = $12          ; multipart control must be hidden,                                        ;   drawn, or shownconst ctlWinStateChange =  $13          ; window state has changed ; axis parametersconst noConstraint     =   $0000        ; no movement constraintconst hAxisOnly        =   $0001        ; constrain movement to horiz. axisconst vAxisOnly        =   $0002        ; constrain movement to vertical axis; part codesconst NoPart           =   $00          ; no partconst SimpleButton     =   $02          ; simple buttonconst CheckBox         =   $03          ; check boxconst RadioButton      =   $04          ; radio buttonconst UpArrow          =   $05          ; up arrow on scroll barconst DownArrow        =   $06          ; down arrow on scroll barconst PageUp           =   $07          ; page upconst PageDown         =   $08          ; page downconst GrowBox          =   $0A          ; size boxconst Thumb            =   $81          ; thumb; Hilite control parametersconst noHilite           =   $0000      ; hilight controlconst inactiveHilite     =   $00FF      ; remove hilighting from control; Control Manager constants (upper 8 bits) of ctlMoreFlags fieldconst fCtlTarget         =   $8000      ; ctl is currently active controlconst fCtlCanBeTarget    =   $4000      ; ctl can be made active controlconst fCtlWantEvents     =   $2000      ; call ctl when SendEventToCtl activatedconst fCtlProcRefNotPtr  =   $1000      ; if set, ProcRef = ID of def proc rtn,                                        ;   else ProcRef = ptr to defproc rtnconst fCtlTellAboutSize  =   $0800      ; notify ctl when window size changesconst fCtlIsMultiPart    =   $0400      ; notify ctl needs to be hidden; defProc constants (lower 8 bits) of ctlMoreFlags field; Bits 0 and 1 describe title reference:const titleIsPtr         = $0const titleIsHandle      = $1const titleIsResource    = $2; Bits 2 and 3 describe the color table reference:const colorTableIsPtr      = $0const colorTableIsHandle   = $4const colorTableIsResource = $8type boxColors                          ; check box color table   boxReserved as integer   boxNor as integer   boxSel as integer   boxTitle as integerend typetype bttnColors                         ; button color table   bttnOutline as integer   bttnNorBack as integer   bttnSelBack as integer   bttnNorText as integer   bttnSelText as integerend typetype limitBlk                           ; limit block   boundRect as rect   slopRect as rect   axisParam as integer   dragPatt as ptrend typetype radioColors                        ; radio button color table   radReserved as integer   radNor as integer   radSel as integer   radTitle as integerend type; Control templatestype customControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   ; This block is user-defined: set your own limit.   data(10) as byteend typetype simpleButtonControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   titleRef as long   colorTblRef as long                  ; optional   keyEquiv as keyEquivRec              ; optionalend type        type checkOrRadioControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   titleRef as long   initialValue as integer   colorTblRef as long                  ; optional   keyEquiv as keyEquivRec              ; optionalend type        type scrollControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   maxSize as integer   viewSize as integer   initialValue as integer   colorTblRef as long                  ; optionalend type        type statTextControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   textRef as long   textSize as integer                  ; optional   just as integer                      ; optionalend type        type editLineControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   maxSize as integer   defaultRef as longend type        type editTextControl   pCount as integer   controlID as long   boundsRect as rect   procRef as long                      ; must be $85000000   flags as integer   moreflags as integer   refCon as long   textFlags as long   indentRect as rect                   ; this, and the rest of the fields,   vertBar as long                      ;   are optional   vertAmount as integer   horzBar as long                      ; reserved - set to nil   horzAmount as integer                ; reserved - set to 0   styleRef as long   textDescriptor as integer   textRef as long   textLength as long   maxChars as long   maxLines as long   maxCharsPerLine as integer   maxHeight as integer   colorRef as long   drawMode as integer   filterProcPtr as procPtrend typetype popUpControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   titleWidth as integer   menuRef as long   initialValue as integer   colorRef as long                     ; optionalend type        type listControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   listSize as integer   listView as integer   listType as integer   listStart as integer   listDraw as procPtr   listMemHeight as integer   listMemSize as integer   listRef as long   colorRef as longend type        type growControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   colorRef as long                     ; optionalend typetype pictureControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   pictureRef as longend type        type iconButtonControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   iconRef as long   titleRef as long                     ; optional   colorTblRef as long                  ; optional   displayMode as integer               ; optional   keyEquiv as keyEquivRec              ; optionalend typetype rectangleControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   penHeight as integer   penWidth as integer   penMask as mask   penPattern as patternend typetype thermometerControl   pCount as integer   ID as long   boundsRect as rect   procRef as long   flag as integer   moreFlags as integer   refCon as long   value as integer   data as integer   colorTblRef as long                  ; optionalend typeTool $10, $01 SUB      CtlBootInitTool $10, $02 SUB      CtlStartup (%, %)Tool $10, $03 SUB      CtlShutDownTool $10, $04 FUNCTION CtlVersion as %Tool $10, $05 SUB      CtlResetTool $10, $06 FUNCTION CtlStatus as ~Tool $10, $2C FUNCTION CallCtlDefProc (ctlRecHndl, %, univ) as &Tool $10, $32 FUNCTION CMLoadResource (%, &) as handleTool $10, $33 SUB      CMReleaseResource (%, &)Tool $10, $12 SUB      CtlNewResTool $10, $0A SUB      DisposeControl (ctlRecHndl)Tool $10, $17 SUB      DragControl (%, %, (rect), (rect), %, ctlRecHndl)Tool $10, $1D FUNCTION DragRect (procPtr, (pattern), %, %, (rect), (rect),                          (rect), %) as &Tool $10, $10 SUB      DrawControls (grafPortPtr)Tool $10, $25 SUB      DrawOneCtl (ctlRecHndl)Tool $10, $24 SUB      EraseControl (ctlRecHndl)Tool $10, $13 FUNCTION FindControl ((ctlRecHndl), %, %, grafPortPtr) as %Tool $10, $39 FUNCTION FindRadioButton (grafPortPtr, %) as %Tool $10, $26 FUNCTION FindTargetCtl as ctlRecHndlTool $10, $21 FUNCTION GetCtlAction (ctlRecHndl) as procPtrTool $10, $30 FUNCTION GetCtlHandleFromID (grafPortPtr, &) as ctlRecHndlTool $10, $2A FUNCTION GetCtlID (ctlRecHndl) as &Tool $10, $1F FUNCTION GetCtlDPage as %Tool $10, $2E FUNCTION GetCtlMoreFlags (ctlRecHndl) as %Tool $10, $35 FUNCTION GetCtlParamPtr as &Tool $10, $1C FUNCTION GetCtlParams (ctlRecHndl) as &Tool $10, $23 FUNCTION GetCtlRefCon (ctlRecHndl) as &Tool $10, $0D FUNCTION GetCtlTitle (ctlRecHndl) as pStringPtrTool $10, $1A FUNCTION GetCtlValue (ctlRecHndl) as %Tool $10, $3B SUB      GetLETextByID (grafPortPtr, &, (pString))Tool $10, $1E FUNCTION GrowSize as &Tool $10, $0E SUB      HideControl (ctlRecHndl)Tool $10, $11 SUB      HiliteControl (%, ctlRecHndl)Tool $10, $37 SUB      InvalCtls (grafPortPtr)Tool $10, $0B SUB      KillControls (grafPortPtr)Tool $10, $27 FUNCTION MakeNextCtlTarget as ctlRecHndlTool $10, $28 SUB      MakeThisCtlTarget (ctlRecHndl)Tool $10, $16 SUB      MoveControl (%, %, ctlRecHndl)Tool $10, $09 FUNCTION NewControl (grafPortPtr, (rect), univ, %, %, %, %, univ,                          &, colorTblPtr) as ctlRecHndlTool $10, $31 FUNCTION NewControl2 (grafPortPtr, %, univ) as ctlRecHndlTool $10, $2D SUB      NotifyCtls (%, %, univ, grafportptr)Tool $10, $29 FUNCTION SendEventToCtl (boolean, grafPortPtr, (eventRecord))                          as booleanTool $10, $20 SUB      SetCtlAction (procPtr, ctlRecHndl)Tool $10, $18 FUNCTION SetCtlIcons (fontHndl) as fontHndlTool $10, $2B SUB      SetCtlID (&, ctlRecHndl)Tool $10, $2F SUB      SetCtlMoreFlags (%, ctlRecHndl)Tool $10, $34 SUB      SetCtlParamPtr (univ)Tool $10, $1B SUB      SetCtlParams (%, %, ctlRecHndl)Tool $10, $22 SUB      SetCtlRefCon (&, ctlRecHndl)Tool $10, $0C SUB      SetCtlTitle (univ, ctlRecHndl)Tool $10, $19 SUB      SetCtlValue (%, ctlRecHndl)Tool $10, $3A SUB      SetLETextByID (grafPortPtr, &, pString)Tool $10, $0F SUB      ShowControl (ctlRecHndl)Tool $10, $14 FUNCTION TestControl (%, %, ctlRecHndl) as %Tool $10, $15 FUNCTION TrackControl (%, %, procPtr, ctlRecHndl) as %; new in 6.0.1Tool $10, $3C SUB      SetCtlValueByID (%, grafPortPtr, &)Tool $10, $3D FUNCTION GetCtlValueByID (grafPortPtr, &) as %Tool $10, $3E SUB      InvalOneCtlByID (grafPortPtr, &)Tool $10, $3F SUB      HiliteCtlByID (%, grafPortPtr, &);----------------------------------------------------------------;; Desk Manager;;----------------------------------------------------------------; NDA action codesconst eventAction     =   $0001         ; code for event to be handled by NDAconst runAction       =   $0002         ; code passed when time period elapsedconst cursorAction    =   $0003         ; code if NDA is frontmost windowconst undoAction      =   $0005         ; code when user selects Undoconst cutAction       =   $0006         ; code when user selects Cutconst copyAction      =   $0007         ; code when user selects Copyconst pasteAction     =   $0008         ; code when user selects Pasteconst clearAction     =   $0009         ; code when user selects Clear; edit typesconst undoEdit        =   $0001         ; Undo edit typeconst cutEdit         =   $0002         ; Cut edit typeconst copyEdit        =   $0003         ; Copy edit typeconst pasteEdit       =   $0004         ; Paste edit typeconst clearEdit       =   $0005         ; Clear edit typetype CDA_ID   DAName as pString   DAstart as procPtr   DAShutDown as procPtrend typetype CDA_IDPtr as pointer to CDA_IDtype CDA_IDHandle as pointer to CDA_IDPtrtype NDA_ID   openRtn as procPtr   closeRtn as procPtr   actionRtn as procPtr   initRtn as procPtr   period as integer   eventMask as integer   menuText as cStringend typetype NDA_IDPtr as pointer to NDA_IDtype NDA_IDHandle as pointer to NDA_IDPtrtype stringTable   titleStr as cStringPtr   controlStr as cStringPtr   quitStr as cStringPtr   selectStr as cStringPtrend typetype stringTblPtr as pointer to stringTabletype runItem       reserved as long       period as integer       signature as integer       reserved2 as longend typetype runItemPtr as pointer to runItemTool $05, $01 SUB      DeskBootInitTool $05, $02 SUB      DeskStartUpTool $05, $03 SUB      DeskShutDownTool $05, $04 FUNCTION DeskVersion as %Tool $05, $05 SUB      DeskResetTool $05, $06 FUNCTION DeskStatus as booleanTool $05, $1F SUB      AddToRunQ (runItemPtr)Tool $05, $24 SUB      CallDeskAcc (%, univ, %, &)Tool $05, $11 SUB      ChooseCDATool $05, $1D SUB      CloseAllNDAsTool $05, $16 SUB      CloseNDA (%)Tool $05, $1C SUB      CloseNDAbyWinPtr (grafPortPtr)Tool $05, $1E SUB      FixAppleMenu (%)Tool $05, $23 SUB      GetDeskAccInfo (%, univ, %, ptr)Tool $05, $25 FUNCTION GetDeskGlobal (%) as &Tool $05, $14 FUNCTION GetDAStrPtr as stringTblPtrTool $05, $1B FUNCTION GetNumNDAs as %Tool $05, $0F SUB      InstallCDA (handle)Tool $05, $0E SUB      InstallNDA (NDA_IDHandle)Tool $05, $15 FUNCTION OpenNDA (%) as %Tool $05, $20 SUB      RemoveFromRunQ (runItemPtr)Tool $05, $21 SUB      RemoveCDA (CDA_IDHandle)Tool $05, $22 SUB      RemoveNDA (NDA_IDHandle)Tool $05, $0C SUB      RestAllTool $05, $0A SUB      RestScrnTool $05, $0B SUB      SaveAllTool $05, $09 SUB      SaveScrnTool $05, $13 SUB      SetDAStrPtr (handle, stringTblPtr)Tool $05, $17 SUB      SystemClick ((eventRecord), grafPortPtr, %)Tool $05, $18 FUNCTION SystemEdit (%) as booleanTool $05, $1A FUNCTION SystemEvent (%, &, &, &, %) as booleanTool $05, $19 SUB      SystemTask;----------------------------------------------------------------;; Desktop Bus Tool Set;;----------------------------------------------------------------const readModes       =   $000A         ; read modes of ADB commandconst readConfig      =   $000B         ; read configuration of ADB commandconst readADBError    =   $000C         ; read ADB error byte of ADB commandconst readVersionNum  =   $000D         ; read version number of ADB commandconst readAvailCharSet =  $000E         ; read available character setsconst readAvailLayout =   $000F         ; read available keyboard layoutsconst readMicroMem    =   $0009         ; read data byte from kybd controllerconst abort           =   $0001         ; abort no operationconst resetKbd        =   $0002         ; reset keyboard microcontrollerconst flushKbd        =   $0003         ; flush keyboardconst setModes        =   $0004         ; set modesconst clearModes      =   $0005         ; clear modesconst setConfig       =   $0006         ; set configurationconst synch           =   $0007         ; synchconst writeMicroMem   =   $0008         ; write microcontroller memoryconst resetSys        =   $0010         ; reset systemconst keyCode         =   $0011         ; send ADB key codeconst resetADB        =   $0040         ; reset ADBconst transmitADBBytes =  $0047         ; transmit ADB bytesconst enableSRQ       =   $0050         ; enable SRQconst flushADBDevBuf  =   $0060         ; flush buffer on ADB deviceconst disableSRQ      =   $0070         ; disable SRQconst transmit2ADBBytes = $0080         ; transmit 2 ADB bytesconst listen          =   $0080         ; ADB listen commandconst talk            =   $00C0         ; ADB talk commandtype readConfigRec   rcADBAddr as byte   rcLayoutOrLang as byte   rcRepeatDelay as byteend typetype setConfigRec   scADBAddr as byte   scLayoutOrLang as byte   scRepeatDelay as byteend typetype synchRec   synchMode as byte   synchKybdMouseAddr as byte   synchLayoutOrLang as byte   synchRepeatDelay as byteend typetype scaleRec   xDivide as integer   yDivide as integer   xOffset as integer   yOffset as integer   xMultiply as integer   yMultiply as integerend typeTool $09, $01 SUB      ADBBootInitTool $09, $02 SUB      ADBStartUpTool $09, $03 SUB      ADBShutDownTool $09, $04 FUNCTION ADBVersion as %Tool $09, $05 SUB      ADBResetTool $09, $06 FUNCTION ADBStatus as booleanTool $09, $0F SUB      AbsONTool $09, $10 SUB      AbsOFFTool $09, $0D SUB      AsyncADBReceive (procPtr, %)Tool $09, $16 SUB      ClearSRQTableTool $09, $13 SUB      GetAbsScale ((scaleRec))Tool $09, $11 FUNCTION ReadAbs as booleanTool $09, $0A SUB      ReadKeyMicroData (%, ptr, %)Tool $09, $0B SUB      ReadKeyMicroMemory (ptr, ptr, %)Tool $09, $09 SUB      SendInfo (%, ptr, %)Tool $09, $12 SUB      SetAbsScale ((scaleRec))Tool $09, $14 SUB      SRQPoll (procPtr, %)Tool $09, $15 SUB      SRQRemove (%)Tool $09, $0E SUB      SyncADBReceive (%, procPtr, %);----------------------------------------------------------------;; Dialog Manager;;----------------------------------------------------------------; dialog scroll bar commandsconst getInitView     =   $0001         ; view size at creationconst getInitTotal    =   $0002         ; total size at creationconst getInitValue    =   $0003         ; value at creationconst scrollLineUp    =   $0004         ; scroll one line upconst scrollLineDown  =   $0005         ; scroll one line downconst scrollPageUp    =   $0006         ; scroll one page upconst scrollPageDown  =   $0007         ; scroll one page downconst scrollThumb     =   $0008         ; scroll to thumb position; item typesconst buttonItem      =   $000A         ; standard button controlconst checkItem       =   $000B         ; standard check box controlconst radioItem       =   $000C         ; standard radio button controlconst scrollBarItem   =   $000D         ; special dialog scroll barconst userCtlItem     =   $000E         ; application-defined controlconst statText        =   $000F         ; static text - cannot be editedconst longStatText    =   $0010         ; static textconst editLine        =   $0011         ; text that can be editedconst iconItem        =   $0012         ; an iconconst picItem         =   $0013         ; a QuickDrawII pictureconst userItem        =   $0014         ; application-defined itemconst userCtlItem2    =   $0015         ; application-defined controlconst longStatText2   =   $0016         ; static text - text cannot be edited                                        ; and can contain embedded commandsconst itemDisable     =   $8000         ; added to any item to disable item; item type rangeconst minItemType     =   $000A         ; minimum valid item typeconst maxItemType     =   $0016         ; maximum valid item type; item IDsconst OK              =   $0001const Cancel          =   $0002; part codesconst inButton        =   $0002         ; user clicked simple buttonconst inCheckBox      =   $0003         ; user clicked check boxconst inRadioButton   =   $0004         ; user clicked radio buttonconst inUpArrow       =   $0005         ; user clicked up arrowconst inDownArrow     =   $0006         ; user clicked down arrowconst inPageUP        =   $0007         ; user clicked page-up areaconst inPageDown      =   $0008         ; user clicked page-down areaconst inStatText      =   $0009         ; user clicked static text itemconst inGrow          =   $000A         ; user clicked size boxconst inEditLine      =   $000B         ; user clicked in text to editconst inUserItem      =   $000C         ; user clicked application itemconst inLongStatText  =   $000D         ; user clicked longStatText itemconst inIconItem      =   $000E         ; user clicked an iconconst inLongStatText2 =   $000F         ; user clicked longStatText2 itemconst inThumb         =   $0081         ; user clicked thumb of scroll item; stage bit flagsconst OKDefault       =   $0000         ; OK is default for alertconst CancelDefault   =   $0040         ; Cancel is default for alertconst AlertDrawn      =   $0080         ; draw alerttype alertTemplate   atBoundsRect as rect   atAlertID as integer   atStage1 as byte   atStage2 as byte   atStage3 as byte   atStage4 as byte   ; This array should be set to reflect the number of items in the alert.   ; The last pointer in the array should be NIL to mark the end of the list   atItemList(10) as itemTempPtrend typetype iconRecord   iconRect as rect   ; iconImage is a variable length array   iconImage(10) as integerend typetype userCtlItemPB   defProcParm as procPtr   titleParm as ptr   param2 as integer   param1 as integerend typeTool $15, $01 SUB      DialogBootInitTool $15, $02 SUB      DialogStartup (%)Tool $15, $03 SUB      DialogShutDownTool $15, $04 FUNCTION DialogVersion as %Tool $15, $05 SUB      DialogResetTool $15, $06 FUNCTION DialogStatus as booleanTool $15, $17 FUNCTION Alert ((alertTemplate), procPtr) as %Tool $15, $1A FUNCTION CautionAlert ((alertTemplate), procPtr) as %Tool $15, $0C SUB      CloseDialog (grafPortPtr)Tool $15, $36 FUNCTION DefaultFilter (grafPortPtr, (eventRecord), (ptr))                       as booleanTool $15, $11 FUNCTION DialogSelect ((eventRecord), (grafPortPtr), (%))                       as booleanTool $15, $39 SUB      DisableDItem (grafPortPtr, %)Tool $15, $13 SUB      DlgCopy (grafPortPtr)Tool $15, $12 SUB      DlgCut (grafPortPtr)Tool $15, $15 SUB      DlgDelete (grafPortPtr)Tool $15, $14 SUB      DlgPaste (grafPortPtr)Tool $15, $16 SUB      DrawDialog (grafPortPtr)Tool $15, $3A SUB      EnableDItem (grafPortPtr, %)Tool $15, $09 SUB      ErrorSound (procPtr)Tool $15, $24 FUNCTION FindDItem (grafPortPtr, (point)) as %Tool $15, $34 FUNCTION GetAlertStage as %Tool $15, $1E FUNCTION GetControlDItem (grafPortPtr, %) as ctlRecHndlTool $15, $37 FUNCTION GetDefButton (grafPortPtr) as %Tool $15, $28 SUB      GetDItemBox (grafPortPtr, %, (rect))Tool $15, $26 FUNCTION GetDItemType (grafPortPtr, %) as %Tool $15, $2E FUNCTION GetDItemValue (grafPortPtr, %) as %Tool $15, $2A FUNCTION GetFirstDItem (grafPortPtr) as %Tool $15, $1F SUB      GetIText (grafPortPtr, %, univ)Tool $15, $33 SUB      GetNewDItem (grafPortPtr, (itemTemplate))Tool $15, $32 FUNCTION GetNewModalDialog ((dialogTemplate)) as grafPortPtrTool $15, $2B FUNCTION GetNextDItem (grafPortPtr, %) as %Tool $15, $22 SUB      HideDItem (grafPortPtr, %)Tool $15, $10 FUNCTION IsDialogEvent ((eventRecord)) as booleanTool $15, $0F FUNCTION ModalDialog (procPtr) as %; ModalDialog2 returns 2 integers: the lo word = item, hi word = part codeTool $15, $2C FUNCTION ModalDialog2 (procPtr) as &Tool $15, $0D SUB      NewDItem (grafPortPtr, %, (rect), %, univ, %, %, univ)Tool $15, $0A FUNCTION NewModalDialog ((rect), boolean, &) as grafPortPtrTool $15, $0B FUNCTION NewModelessDialog ((rect), pStringPtr, grafPortPtr,                       %, &, (rect)) as grafPortPtrTool $15, $19 FUNCTION NoteAlert ((alertTemplate), procPtr) as %Tool $15, $1B SUB      ParamText (pStringPtr, pStringPtr, pStringPtr,                       pStringPtr)Tool $15, $0E SUB      RemoveDItem (grafPortPtr, %)Tool $15, $35 SUB      ResetAlertStageTool $15, $21 SUB      SelectIText (grafPortPtr, %, %, %)Tool $15, $1C SUB      SetDAFont (fontHndl)Tool $15, $38 SUB      SetDefButton (%, grafPortPtr)Tool $15, $29 SUB      SetDItemBox (grafPortPtr, %, (rect))Tool $15, $27 SUB      SetDItemType (%, grafPortPtr, %)Tool $15, $2F SUB      SetDItemValue (%, grafPortPtr, %)Tool $15, $20 SUB      SetIText (grafPortPtr, %, pStringPtr)Tool $15, $23 SUB      ShowDItem (grafPortPtr, %)Tool $15, $18 FUNCTION StopAlert ((alertTemplate), procPtr) as %Tool $15, $25 SUB      UpdateDialog (grafPortPtr, rgnHandle);----------------------------------------------------------------;; Event Manager;;----------------------------------------------------------------; Event codes are in the Common.Intf interface file; event masksconst mDownMask       =   $0002         ; call applies to mouse-down eventsconst mUpMask         =   $0004         ; call applies to mouse-up eventsconst keyDownMask     =   $0008         ; call applies to key-down eventsconst autoKeyMask     =   $0020         ; call applies to auto-key eventsconst updateMask      =   $0040         ; call applies to update eventsconst activeMask      =   $0100         ; call applies to activate eventsconst switchMask      =   $0200         ; call applies to switch eventsconst deskAccMask     =   $0400         ; call applies to desk accessory eventsconst driverMask      =   $0800         ; call applies to device driver eventsconst app1Mask        =   $1000         ; call applies to application-1 eventsconst app2Mask        =   $2000         ; call applies to application-2 eventsconst app3Mask        =   $4000         ; call applies to application-3 eventsconst app4Mask        =   $8000         ; call applies to application-4 eventsconst everyEvent      =   $FFFF         ; call applies to all events; journal codesconst jcTickCount     =   $00           ; TickCount callconst jcGetMouse      =   $01           ; GetMouse callconst jcButton        =   $02           ; Button callconst jcEvent         =   $04           ; GetNextEvent and EventAvail calls; Modifier flagsconst activeFlag    = $0001             ; set if window was activatedconst changeFlag    = $0002             ; set if active window changed stateconst btn1State     = $0040             ; set if button 1 was upconst btn0State     = $0080             ; set if button 0 was upconst appleKey      = $0100             ; set if Apple key was downconst shiftKey      = $0200             ; set if Shift key was downconst capsLock      = $0400             ; set if Caps Lock key was downconst optionKey     = $0800             ; set if Option key was downconst controlKey    = $1000             ; set if Control key was downconst keyPad        = $2000             ; set if keypress was from key padTool $06, $01 SUB      EMBootInitTool $06, $02 SUB      EMStartUp (%, %, %, %, %, %, %)Tool $06, $03 SUB      EMShutDownTool $06, $04 FUNCTION EMVersion as %Tool $06, $05 SUB      EMResetTool $06, $06 FUNCTION EMStatus as booleanTool $06, $0D FUNCTION Button (%) as booleanTool $06, $09 FUNCTION DoWindows as %Tool $06, $0B FUNCTION EventAvail (%, (eventRecord)) as boolean; FakeMouse's modLatch_padding are 2 separate parameters, each 1 byte in; length.  Use (modLatch * 256 + padding) to create the parameter.Tool $06, $19 SUB      FakeMouse (%, %, %, %, %)Tool $06, $15 FUNCTION FlushEvents (%, %) as %Tool $06, $12 FUNCTION GetCaretTime as &Tool $06, $11 FUNCTION GetDblTime as &Tool $06, $1B FUNCTION GetKeyTranslation as %Tool $06, $0C SUB      GetMouse ((point))Tool $06, $0A FUNCTION GetNextEvent (%, (eventRecord)) as booleanTool $06, $16 FUNCTION GetOSEvent (%, (eventRecord)) as booleanTool $06, $17 FUNCTION OSEventAvail (%, (eventRecord)) as booleanTool $06, $14 FUNCTION PostEvent (%, &) as %Tool $06, $1A SUB      SetAutoKeyLimit (%)Tool $06, $18 SUB      SetEventMask (%)Tool $06, $1C SUB      SetKeyTranslation (%)Tool $06, $13 SUB      SetSwitchTool $06, $0E FUNCTION StillDown (%) as booleanTool $06, $10 FUNCTION TickCount as &Tool $06, $0F FUNCTION WaitMouseUp (%) as boolean;----------------------------------------------------------------;; Finder;;----------------------------------------------------------------; SendRequest codes sent by the Finderconst finderSaysHello            = $0100const finderSaysGoodbye          = $0101const finderSaysSelectionChanged = $0102const finderSaysMItemSelected    = $0103const finderSaysBeforeOpen       = $0104const finderSaysOpenFailed       = $0105const finderSaysBeforeCopy       = $0106const finderSaysBeforeIdle       = $0107const finderSaysExtrasChosen     = $0108const finderSaysBeforeRename     = $0109const finderSaysKeyHit           = $010A   ; SendRequest codes sent to the Finderconst tellFinderGetDebugInfo      = $8000const askFinderAreYouThere        = $8001const tellFinderAreYouThere       = $8001const tellFinderOpenWindow        = $8002const tellFinderCloseWindow       = $8003const tellFinderGetSelectedIcons  = $8004const tellFinderSetSelectedIcons  = $8005const tellFinderLaunchThis        = $8006const tellFinderShutDown          = $8007const tellFinderMItemSelected     = $8008const tellFinderMatchFileToIcon   = $800Aconst tellFinderAddBundle         = $800Bconst tellFinderAboutChange       = $800Cconst tellFinderCheckDatabase     = $800Dconst tellFinderColorSelection    = $800Econst tellFinderAddToExtras       = $800Fconst askFinderIdleHowLong        = $8011const tellFinderIdleHowLong       = $8011const tellFinderGetWindowIcons    = $8012const tellFinderGetWindowInfo     = $8013const tellFinderRemoveFromExtras  = $8014const tellFinderSpecialPreference = $8015type finderSaysHelloIn   pCount as integer   _version as long   finderID as integer   iconObjJize as integerend typetype finderSaysHelloInPtr as pointer to finderSaysHelloIntype finderSaysMItemSelectedIn   pCount as integer   menuItemID as integer   menuID as integer   modifiers as integerend typetype finderSaysMItemSelectedInPtr as pointer to finderSaysMItemSelectedIntype finderSaysMItemSelectedOut   recvCount as integer   abortIt as integerend typetype finderSaysMItemSelectedOutPtr as pointer to finderSaysMItemSelectedOuttype finderSaysBeforeOpenIn   pCount as integer   pathname as gsosInStringPtr   zoomRect as rectPtr   fileType as integer   auxType as long   modifiers as integer   theIconObj as ptr   printFlag as booleanend typetype finderSaysBeforeOpenInPtr as pointer to finderSaysBeforeOpenIntype finderSaysOpenFailedIn as finderSaysBeforeOpenIntype finderSaysOpenFailedInPtr as pointer to finderSaysOpenFailedIntype finderSaysBeforeCopyIn   pCount as integer   inpath as gsosInStringPtr   outpath as gsosOutStringPtrend typetype finderSaysBeforeCopyInPtr as pointer to finderSaysBeforeCopyIntype finderSaysBeforeCopyOut   recvCount as integer   abortFlag as integerend typetype finderSaysBeforeCopyOutPtr as pointer to finderSaysBeforeCopyOuttype finderSaysBeforeRenameIn   pCount as integer   oldpath as gsosInStringPtr   newpath as gsosInStringPtr   fileType as integer   auxType as longend typetype finderSaysBeforeRenameInPtr as pointer to finderSaysBeforeRenameIntype finderSaysBeforeRenameOut   recvCount as integer   abortFlag as integerend typetype finderSaysBeforeRenameOutPtr as pointer to finderSaysBeforeRenameOuttype finderSaysKeyHitIn   pCount as integer   message as integer   modifiers as integerend typetype finderSaysKeyHitInPtr as pointer to finderSaysKeyHitIntype tellFinderGetDebugInfoOut   recvCount as integer   finderResult as integer   reserved as integer   directPage as integer   deskIcon as handle   nameChainH as handle   filetypeBlock as ptr   deviceBlock as ptr   masterChainH as handle   finderPathsH as handle   finderPathsCount as integer   nameChainInsert as long   reserved2 as long   masterChainInsert as long   reserved3 as long   chainTable as handle   iconOffsetArray as handle   iconHandleArray as handle   iconArrayUsed as integer   iconArraySize as integer   reserved4(64) as byteend typetype tellFinderGetDebugInfoOutPtr as pointer to tellFinderGetDebugInfoOuttype tellFinderAreYouThereOut   recvCount as integer   finderResult as integerend typetype tellFinderAreYouThereOutPtr as pointer to tellFinderAreYouThereOuttype tellFinderOpenWindowOut   recvCount as integer   finderResult as integer   windowPtr as grafPortPtrend typetype tellFinderOpenWindowOutPtr as pointer to tellFinderOpenWindowOuttype tellFinderCloseWindowOut   recvCount as integer   finderResult as integerend typetype tellFinderCloseWindowOutPtr as pointer to tellFinderCloseWindowOuttype tellFinderGetSelectedIconsOut   recvCount as integer   finderResult as integer   windowPtr as grafPortPtr   stringListHandle as handleend typetype tellFinderGetSelectedIconsOutPtr as pointer to tellFinderGetSelectedIconsOuttype tellFinderSetSelectedIconsOut   recvCount as integer   finderResult as integerend typetype tellFinderSetSelectedIconsOutPtr as pointer to tellFinderSetSelectedIconsOuttype tellFinderLaunchThisIn   reserved as integer   pathname as gsosInStringPtrend typetype tellFinderLaunchThisInPtr as pointer to tellFinderLaunchThisIntype tellFinderLaunchThisOut   recvCount as integer   finderResult as integerend typetype tellFinderLaunchThisOutPtr as pointer to tellFinderLaunchThisOuttype tellFinderShutDownOut   recvCount as integer   finderResult as integerend typetype tellFinderShutDownOutPtr as pointer to tellFinderShutDownOuttype tellFinderMItemSelectedIn   menuItemID as integer   modifiers as integer   flags as integerend typetype tellFinderMItemSelectedInPtr as pointer to tellFinderMItemSelectedIntype tellFinderMItemSelectedOut   recvCount as integer   finderResult as integerend typetype tellFinderMItemSelectedOutPtr as pointer to tellFinderMItemSelectedOuttype swapLong   msw as integer   lsw as integerend typetype tellFinderMatchFileToIconIn   pCount as integer   vote as integer   match as integer   fileType as integer   auxType as swapLong   fileNamePtr as swapLong   createDateTimePtr as swapLong   modDateTimePtr as swapLong   access as integer   flags as integer   optionPtr as swapLong   combinedEOF as swapLongend typetype tellFinderMatchFileToIconInPtr as pointer to tellFinderMatchFileToIconIntype tellFinderMatchFileToIconOut   recvCount as integer   finderResult as integer   offset as long   matches as handle   smallIcon as long   largeIcon as long   finderPath as handleend typetype tellFinderMatchFileToIconOutPtr as pointer to tellFinderMatchFileToIconOuttype tellFinderAddBundleIn   reserved as integer   path1 as gsosInStringPtr   path2 as gsosInStringPtr   rBundleID as longend typetype tellFinderAddBundleInPtr as pointer to tellFinderAddBundleIntype tellFinderAddBundleOut   recvCount as integer   finderResult as integerend typetype tellFinderAddBundleOutPtr as pointer to tellFinderAddBundleOuttype tellFinderAboutChangeOut   recvCount as integer   finderResult as integerend typetype tellFinderAboutChangeOutPtr as pointer to tellFinderAboutChangeOuttype ptr68000   b3 as byte   b2 as byte   b1 as byte   b0 as byteend typetype tellFinderCheckDatabaseIn   update as integer   pathName as ptr68000   rVersion as ptr68000end typetype tellFinderCheckDatabaseInPtr as pointer to tellFinderCheckDatabaseIn   type tellFinderCheckDatabaseOut   recvCount as integer   finderResult as integer   found as integerend typetype tellFinderCheckDatabaseOutPtr as pointer to tellFinderCheckDatabaseOuttype tellFinderColorSelectionOut   recvCount as integer   finderResult as integerend typetype tellFinderColorSelectionOutPtr as pointer to tellFinderColorSelectionOut   type tellFinderAddToExtrasOut   recvCount as integer   finderResult as integer   menuItemID as integer   menuID as integerend typetype tellFinderAddToExtrasOutPtr as pointer to tellFinderAddToExtrasOuttype askFinderIdleHowLongOut   recvCount as integer   finderResult as integer   tickCount as longend typetype askFinderIdleHowLongOutPtr as pointer to askFinderIdleHowLongOuttype tellFinderIdleHowLongOut as askFinderIdleHowLongOuttype tellFinderIdleHowLongOutPtr as pointer to tellFinderIdleHowLongOuttype tellFinderGetWindowIconsOut   recvCount as integer   finderResult as integer   stringListHandle as handleend typetype tellFinderGetWindowIconsOutPtr as pointer to tellFinderGetWindowIconsOuttype tellFinderGetWindowInfoOut   recvCount as integer   finderResult as integer   windType as integer   windView as integer   windFST as integer   windTitle as pStringPtr   windPath as gsosInStringPtr   reserved1 as long   reserved2 as longend typetype tellFinderGetWindowInfoOutPtr as pointer to tellFinderGetWindowInfoOuttype tellFinderRemoveFromExtrasOut   recvCount as integer   finderResult as integerend typetype tellFinderRemoveFromExtrasOutPtr as pointer to tellFinderRemoveFromExtrasOuttype tellFinderSpecialPreferencesIn   pCount as integer   allowDrag as booleanend typetype tellFinderSpecialPreferencesInPtr as pointer to tellFinderSpecialPreferencesIntype tellFinderSpecialPreferencesOut   recvCount as integer   finderResult as integerend typetype tellFinderSpecialPreferencesOutPtr as pointer to tellFinderSpecialPreferencesOut;----------------------------------------------------------------;; Font Manager;;----------------------------------------------------------------const memBit          =   $0001         ; font is in memoryconst unrealBit       =   $0002         ; font is scaled from another fontconst apFamBit        =   $0004         ; font family supplied by applicationconst apVarBit        =   $0008         ; font added by AddFontVar call or                                        ; scaled from such a fontconst purgeBit        =   $0010         ; font is purgeableconst notDiskBit      =   $0020         ; font not in ROM or in FONTS folderconst notFoundBit     =   $8000         ; specified font not found; font spec bitsconst memOnlyBit      =   $0001         ; allow only ROM fonts and fonts                                        ; currently in memoryconst realOnlyBit     =   $0002         ; allow only unscaled fontsconst anyFamBit       =   $0004         ; ignore family number in callconst anyStyleBit     =   $0008         ; allow any partially matching styleconst anySizeBit      =   $0010         ; ignore point size in call; family stat bitsconst notBaseBit      =   $0020         ; family is not a base family; family spec bitsconst baseOnlyBit     =   $0020         ; allow only base families; Scale wordconst dontScaleBit    =   $0001         ; disable font scaling; Family Numbersconst newYork         =   $0002const geneva          =   $0003const monaco          =   $0004const venice          =   $0005const london          =   $0006const athens          =   $0007const sanFran         =   $0008const toronto         =   $0009const cairo           =   $000Bconst losAngeles      =   $000Cconst times           =   $0014const helvetica       =   $0015const courier         =   $0016const symbol          =   $0017const taliesin        =   $0018const shaston         =   $FFFETool $1B, $01 SUB      FMBootInitTool $1B, $02 SUB      FMStartUp (%, %)Tool $1B, $03 SUB      FMShutDownTool $1B, $04 FUNCTION FMVersion as %Tool $1B, $05 SUB      FMResetTool $1B, $06 FUNCTION FMStatus as booleanTool $1B, $0D SUB      AddFamily (%, univ)Tool $1B, $14 SUB      AddFontVar (fontHndl, %)Tool $1B, $16 FUNCTION ChooseFont (fontID, %) as &Tool $1B, $09 FUNCTION CountFamilies (%) as %Tool $1B, $10 FUNCTION CountFonts (fontID, %) as %Tool $1B, $1B FUNCTION FamNum2ItemID (%) as %Tool $1B, $0A FUNCTION FindFamily (%, %, univ) as %Tool $1B, $11 SUB      FindFontStats (fontID, %, %, (fontStatRec))Tool $1B, $15 SUB      FixFontMenu (%, %, %)Tool $1B, $1A FUNCTION FMGetCurFID as &Tool $1B, $19 FUNCTION FMGetSysFID as &Tool $1B, $18 SUB      FMSetSysFont (fontID)Tool $1B, $0B FUNCTION GetFamInfo (%, univ) as %Tool $1B, $0C FUNCTION GetFamNum (univ) as %Tool $1B, $0E SUB      InstallFont (fontID, %)Tool $1B, $1C FUNCTION InstallWithStats (fontID, %) as fontStatRecPtrTool $1B, $17 FUNCTION ItemID2FamNum (%) as %Tool $1B, $12 SUB      LoadFont (fontID, %, %, (fontStatRec))Tool $1B, $13 SUB      LoadSysFontTool $1B, $0F SUB      SetPurgeStat (fontID, %);----------------------------------------------------------------;; GS/OS;;----------------------------------------------------------------; File System IDs; reserved = 0const ProDOS_SOS      =   1const DOS_3_3         =   2const DOS_3_2         =   3const ApplePascal     =   4const Macintosh_MFS   =   5const Macintosh_HFS   =   6const LISA            =   7const AppleCPM        =   8const CharacterFST    =   9const MS_DOS          =   10const HighSierra      =   11const ISO_9660        =   12const AppleShare      =   13; Standard I/O prefixesconst stdIn       =   10const stdOut      =   11const stdError    =   12type bindIntOSDCB   pcount as integer   intNum as integer   vrn as integer   intCode as ptrend typetype changePathOSDCB   pcount as integer   pathName as gsosInStringPtr   newPathName as gsosInStringPtr   flags as integerend typetype closeOSDCB   pcount as integer   refNum as integerend typetype clrBkupBitOSDCB   pcount as integer   pathName as gsosInStringPtrend typetype createOSDCB   pcount as integer   pathName as gsosInStringPtr   access as integer   fileType as integer   auxType as long   storageType as integer   dataEOF as long   resourceEOF as longend typetype destroyOSDCB   pcount as integer   pathName as gsosInStringPtrend typetype devReadWriteOSDCB   pcount as integer   devNum as integer   buffer as ptr   requestCount as long   startingBlock as long   blockSize as integer   transferCount as longend typetype dInfoOSDCB   pcount as integer   devNum as integer   devName as gsosOutStringPtr   characteristics as integer   totalBlocks as long   slotNum as integer   unitNum as integer   _version as integer   deviceID as integer   headLink as integer   forwardLink as integer   extendedDIBptr as ptrend typetype dirEntryOSDCB   pcount as integer   refNum as integer   flags as integer   base as integer   displacement as integer   name as gsosOutStringPtr   entryNum as integer   fileType as integer   eofValue as long   blockCount as long   createDateTime as timeField   modDateTime as timeField   access as integer   auxType as long   fileSysID as integer   optionList as optionListPtr   resourceEOF as long   resourceBlocks as longend typetype dRenameOSDCB   pcount as integer   devNum as integer   replaceString as gsosInStringPtrend typetype dStatusOSDCB   pcount as integer   devNum as integer   statusCode as integer   statusList as ptr   requestCount as long   transferCount as longend typetype eofOSDCB   pcount as integer   refNum as integer   eofEOF as longend typetype expandPathOSDCB   pcount as integer   inputPath as gsosInStringPtr   outputPath as gsosOutStringPtr   flags as integerend typetype flushOSDCB   pcount as integer   refNum as integerend typetype formatOSDCB   pcount as integer   devName as gsosInStringPtr   volName as gsosInStringPtr   fileSysID as integer   reqFileSysID as integer   flags as integer   reaVolName as gsosOutStringPtrend typetype fstInfoOSDCB   pcount as integer   fstNum as integer   fileSysID as integer   fstName as gsosOutStringPtr   _version as integer   attributes as integer   blockSize as integer   maxVolSize as long   maxFileSize as longend typetype getDevNumOSDCB   pcount as integer   devName as gsosInStringPtr   devNum as integerend typetype getFileInfoOSDCB   pcount as integer   pathName as gsosInStringPtr   access as integer   fileType as integer   auxType as long   storageType as integer   createDateTime as timeField   modDateTime as timeField   optionList as optionListPtr   dataEOF as long   blocksUsed as long   resourceEOF as long   resourceBlocks as longend typetype getMarkOSDCB   pcount as integer   refNum as integer   position as longend typetype getNameOSDCB   pcount as integer   dataBuffer as gsosOutStringPtr   userID as integerend typetype getPrefixOSDCB   pcount as integer   prefixNum as integer   prefix as gsosOutStringPtrend typetype getRefInfoOSDCB   pcount as integer   referenceNumber as integer   access as integer   thePath as gsosOutStringPtr   resourceNumber as integer   level as integerend typetype getRefNumOSDCB   pcount as integer   thePath as gsosInStringPtr   referenceNumber as integer   access as integer   resourceNum as integer   caseSense as integer   displacement as integerend typetype getStdRefNumOSDCB   pcount as integer   prefixNumber as integer   referenceNumber as integerend typetype judgeNameOSDCB   pcount as integer   fileSysID as integer   nameType as integer   syntax as pStringPtr   maxLen as integer   name as gsosOutStringPtr   nameFlags as integerend typetype levelOSDCB   pcount as integer   level as integer   levelMode as integerend typetype newlineOSDCB   pcount as integer   refNum as integer   enableMask as integer   numChars as integer   newlineTable as ptrend typetype notifyOSDCB   pcount as integer   theProc as procPtrend typetype nullOSDCB   pcount as integerend typetype openOSDCB   pcount as integer   refNum as integer   pathName as gsosInStringPtr   requestAccess as integer   resourceNumber as integer   access as integer   fileType as integer   auxType as long   storageType as integer   createDateTime as timeField   modDateTime as timeField   optionList as optionListPtr   dataEOF as long   blocksUsed as long   resourceEOF as long   resourceBlocks as longend typetype osVersionOSDCB   pcount as integer   _version as integerend typetype prefsOSDCB   pcount as integer   preferences as integerend typetype quitOSDCB   pcount as integer   pathName as gsosInStringPtr   flags as integerend typetype readWriteOSDCB   pcount as integer   refNum as integer   dataBuffer as ptr   requestCount as long   transferCount as long   cachePriority as integerend typetype setFileInfoOSDCB   pcount as integer   pathName as gsosInStringPtr   access as integer   fileType as integer   auxType as long   nullField1 as integer    ; set this field to zero   createDateTime as long   modDateTome as long   optionList as optionListPtr   nullField2 as long       ; set this field to zero   nullField3 as long       ; set this field to zero   nullField4 as long       ; set this field to zero   nullField5 as long       ; set this field to zeroend typetype setMarkOSDCB   pcount as integer   refNum as integer   base as integer   displacement as longend typetype setStdRefNumOSDCB   pcount as integer   prefixNum as integer   refNum as integerend typetype shutdownOSDCB   pcount as integer   shutdownFlag as integerend typetype statusOSDCB   pcount as integer   status as integerend typetype unbindIntOSDCB   pcount as integer   intNum as integerend typetype volumeOSDCB   pcount as integer   devName as gsosInStringPtr   volName as gsosOutStringPtr   totalBlocks as long   freeBlocks as long   fileSysID as integer   blockSize as integer   characteristics as integer   deviceID as integerend typeGSOS $34, $20 SUB      AddNotifyProcGS ((notifyOSDCB))GSOS $1D, $20 SUB      BeginSessionGS ((nullOSDCB))GSOS $31, $20 SUB      BindIntGS ((bindIntOSDCB))GSOS $04, $20 SUB      ChangePathGS ((changePathOSDCB))GSOS $0B, $20 SUB      ClearBackupGS ((clrBkupBitOSDCB))GSOS $14, $20 SUB      CloseGS ((closeOSDCB))GSOS $01, $20 SUB      CreateGS ((createOSDCB))GSOS $2E, $20 SUB      DControlGS ((dStatusOSDCB))GSOS $35, $20 SUB      DelNotifyProcGS ((notifyOSDCB))GSOS $02, $20 SUB      DestroyGS ((destroyOSDCB))GSOS $2C, $20 SUB      DInfoGS ((dInfoOSDCB))GSOS $2F, $20 SUB      DReadGS ((devReadWriteOSDCB))GSOS $36, $20 SUB      DRenameGS ((dRenameOSDCB))GSOS $2D, $20 SUB      DStatusGS ((dStatusOSDCB))GSOS $30, $20 SUB      DWriteGS ((devReadWriteOSDCB))GSOS $1E, $20 SUB      EndSessionGS ((nullOSDCB))GSOS $25, $20 SUB      EraseDiskGS ((formatOSDCB))GSOS $0E, $20 SUB      ExpandPathGS ((expandPathOSDCB))GSOS $15, $20 SUB      FlushGS ((flushOSDCB))GSOS $24, $20 SUB      FormatGS ((formatOSDCB))GSOS $28, $20 SUB      GetBootVolGS ((getNameOSDCB))GSOS $20, $20 SUB      GetDevNumberGS ((getDevNumOSDCB))GSOS $1C, $20 SUB      GetDirEntryGS ((dirEntryOSDCB))GSOS $19, $20 SUB      GetEOFGS ((eofOSDCB))GSOS $06, $20 SUB      GetFileInfoGS ((getFileInfoOSDCB))GSOS $2B, $20 SUB      GetFSTInfoGS ((fstInfoOSDCB))GSOS $1B, $20 SUB      GetLevelGS ((levelOSDCB))GSOS $17, $20 SUB      GetMarkGS ((getMarkOSDCB))GSOS $27, $20 SUB      GetNameGS ((getNameOSDCB))GSOS $0A, $20 SUB      GetPrefixGS ((getPrefixOSDCB))GSOS $39, $20 SUB      GetRefInfoGS ((getRefInfoOSDCB))GSOS $38, $20 SUB      GetRefNumGS ((getRefNumOSDCB))GSOS $37, $20 SUB      GetStdRefNumGS ((getStdRefNumOSDCB))GSOS $0F, $20 SUB      GetSysPrefsGS ((prefsOSDCB))GSOS $2A, $20 SUB      GetVersionGS ((osVersionOSDCB))GSOS $07, $20 SUB      JudgeNameGS ((judgeNameOSDCB))GSOS $11, $20 SUB      NewlineGS ((newlineOSDCB))GSOS $0D, $20 SUB      NullGS ((nullOSDCB))GSOS $10, $20 SUB      OpenGS ((openOSDCB))GSOS $03, $20 SUB      OSShutdownGS ((shutdownOSDCB))GSOS $29, $20 SUB      QuitGS ((quitOSDCB))GSOS $12, $20 SUB      ReadGS ((readWriteOSDCB))GSOS $26, $20 SUB      ResetCacheGS ((nullOSDCB))GSOS $1F, $20 SUB      SessionStatusGS ((statusOSDCB))GSOS $18, $20 SUB      SetEOFGS ((setMarkOSDCB))GSOS $05, $20 SUB      SetFileInfoGS ((setFileInfoOSDCB))GSOS $1A, $20 SUB      SetLevelGS ((levelOSDCB))GSOS $16, $20 SUB      SetMarkGS ((setMarkOSDCB))GSOS $09, $20 SUB      SetPrefixGS ((getPrefixOSDCB))GSOS $3A, $20 SUB      SetStdRefNum ((setStdRefNumOSDCB))GSOS $0C, $20 SUB      SetSysPrefsGS ((prefsOSDCB))GSOS $32, $20 SUB      UnbindIntGS ((unbindIntOSDCB))GSOS $08, $20 SUB      VolumeGS ((volumeOSDCB))GSOS $13, $20 SUB      WriteGS ((readWriteOSDCB));----------------------------------------------------------------;; Integer Math;;----------------------------------------------------------------; Limitsconst minLongint  =   $80000000         ; min negative signed longconst minFrac     =   $80000000         ; pinned value for neg Frac overflowconst minFixed    =   $80000000         ; pinned value for neg Fixed overflowconst minInt      =   $8000             ; min negative signed integerconst maxUInt     =   $FFFF             ; max positive unsigned integerconst maxLongint  =   $7FFFFFFF         ; max positive signed longconst maxFrac     =   $7FFFFFFF         ; pinned value for positive Frac overflowconst maxFixed    =   $7FFFFFFF         ; pinned value, positive Fixed overflowconst maxULong    =   $FFFFFFFF         ; max unsigned long; Signed Flagconst unsignedFlag =  $0000             ; value is not signedconst signedFlag  =   $0001             ; value is signedtype extendedValue   exponent as integer   mantissa as longend typetype extendedValuePtr as pointer to extendedValueTool $0B, $01 SUB      IMBootInitTool $0B, $02 SUB      IMStartUpTool $0B, $03 SUB      IMShutDownTool $0B, $04 FUNCTION IMVersion as %Tool $0B, $05 SUB      IMResetTool $0B, $06 FUNCTION IMStatus as booleanTool $0B, $28 FUNCTION Dec2Int (univ, %, %) as %Tool $0B, $29 FUNCTION Dec2Long (univ, %, %) as &Tool $0B, $1C FUNCTION Fix2Frac (&) as &Tool $0B, $1B FUNCTION Fix2Long (&) as &Tool $0B, $1E SUB      Fix2X (&, (extendedValue))Tool $0B, $17 FUNCTION FixATan2 (&, &) as &Tool $0B, $11 FUNCTION FixDiv (&, &) as &Tool $0B, $0F FUNCTION FixMul (&, &) as &Tool $0B, $0E FUNCTION FixRatio (%, %) as &Tool $0B, $13 FUNCTION FixRound (&) as %Tool $0B, $1D FUNCTION Frac2Fix (&) as &Tool $0B, $1F SUB      Frac2X (&, (extendedValue))Tool $0B, $15 FUNCTION FracCos (&) as &Tool $0B, $12 FUNCTION FracDiv (&, &) as &Tool $0B, $10 FUNCTION FracMul (&, &) as &Tool $0B, $16 FUNCTION FracSin (&) as &Tool $0B, $14 FUNCTION FracSqrt (&) as &Tool $0B, $0B FUNCTION Hex2Int (univ, %) as %Tool $0B, $25 FUNCTION Hex2Long (univ, %) as &Tool $0B, $2A FUNCTION HexIt (%) as &Tool $0B, $18 FUNCTION HiWord (&) as %Tool $0B, $26 SUB      Int2Dec (%, univ, %, boolean)Tool $0B, $22 SUB      Int2Hex (%, univ, %)Tool $0B, $27 SUB      Long2Dec (&, univ, %, boolean)Tool $0B, $1A FUNCTION Long2Fix (&) as &Tool $0B, $23 SUB      Long2Hex (&, univ, %); LongDivide returns 2 longs, so it cannot be called by BASIC; Tool $0B, $0D FUNCTION LongDivide (&, &) as 2 longints; LongMul returns 2 longs, so it cannot be called by BASIC; Tool $0B, $0C FUNCTION LongMul (&, &) as 2 longintsTool $0B, $19 FUNCTION LoWord (&) as %Tool $0B, $09 FUNCTION Multiply (%, %) as &; SDivide returns 2 words: the lo word = quotient, hi word = remainderTool $0B, $0A FUNCTION SDivide (%, %) as &; UDivide returns 2 words: the lo word = quotient, hi word = remainderTool $0B, $0B FUNCTION UDivide (%, %) as &Tool $0B, $20 FUNCTION X2Fix ((extendedValue)) as &Tool $0B, $21 FUNCTION X2Frac ((extendedValue)) as &;----------------------------------------------------------------;; Line Edit Tool Set;;----------------------------------------------------------------; Justificationconst leJustLeft      =   $0000      ; left justifyconst leJustCenter    =   $0001      ; centerconst leJustRight     =   $FFFF      ; right justifyconst leJustFill      =   $0002      ; fill justification; LEClassifyKey result valuesconst leKeyIsSpecial    = $8000const leKeyIsNumber     = $4000const leKeyIsHex        = $2000const leKeyIsAlpha      = $1000const leKeyIsNonControl = $0800type leRec   leLineHandle as pointer to cStringPtr   leLength as integer   leMaxLength as integer   leDestRect as rect   leViewRect as rect   lePort as grafPortPtr   leLineHite as integer   leBaseHite as integer   leSelStart as integer   leSelEnd as integer   leActFlag as integer   leCarAct as integer   leCarOn as integer   leCarTime as long   leHiliteHook as procPtr   leCaretHook as procPtr   leJust as integer   lePWChar as integerend typetype leRecPtr as pointer to leRectype leRecHndl as pointer to leRecPtrTool $14, $01 SUB      LEBootInitTool $14, $02 SUB      LEStartUp (%, %)Tool $14, $03 SUB      LEShutDownTool $14, $04 FUNCTION LEVersion as %Tool $14, $05 SUB      LEResetTool $14, $06 FUNCTION LEStatus as booleanTool $14, $24 FUNCTION GetLeDefProc as procPtrTool $14, $0F SUB      LEActivate (leRecHndl)Tool $14, $0D SUB      LEClick ((eventRecord), leRecHndl)Tool $14, $13 SUB      LECopy (leRecHndl)Tool $14, $12 SUB      LECut (leRecHndl)Tool $14, $10 SUB      LEDeactivate (leRecHndl)Tool $14, $15 SUB      LEDelete (leRecHndl)Tool $14, $0A SUB      LEDispose (leRecHndl)Tool $14, $19 SUB      LEFromScrapTool $14, $1C FUNCTION LEGetScrapLen as %Tool $14, $22 FUNCTION LEGetTextHand (leRecHndl) as handleTool $14, $23 FUNCTION LEGetTextLen (leRecHndl) as %Tool $14, $0C SUB      LEIdle (leRecHndl)Tool $14, $16 SUB      LEInsert (univ, %, leRecHndl)Tool $14, $11 SUB      LEKey (%, %, leRecHndl)Tool $14, $09 FUNCTION LENew ((rect), (rect), %) as leRecHndlTool $14, $14 SUB      LEPaste (leRecHndl)Tool $14, $1B FUNCTION LEScrapHandle as handleTool $14, $1F SUB      LESetCaret (procPtr, leRecHndl)Tool $14, $1E SUB      LESetHilite (procPtr, leRecHndl)Tool $14, $21 SUB      LESetJust (%, leRecHndl)Tool $14, $1D SUB      LESetScrapLen (%)Tool $14, $0E SUB      LESetSelect (%, %, leRecHndl)Tool $14, $0B SUB      LESetText (univ, %, leRecHndl)Tool $14, $18 SUB      LETextBox (univ, %, (rect), %)Tool $14, $20 SUB      LETextBox2 (univ, %, (rect), %)Tool $14, $1A SUB      LEToScrapTool $14, $17 SUB      LEUpdate (leRecHndl); new in 6.0.1Tool $14, $25 FUNCTION LEClassifyKey (eventRecord) as %;----------------------------------------------------------------;; List Manager;;----------------------------------------------------------------; Bit mask for listTypeconst cStringFlag     =   $0001         ; null-terminated string typeconst selectOnlyOne   =   $0002         ; only 1 selection allowed; memFlagconst memDisabled     =   $40           ; sets member flag to disabledconst memSelected     =   $80           ; sets member flag to selected; Member record is defined in the Common.intf inteface file.type memberList(10) as memRec           ; user may modify sizetype listRec   listRect as rect   listSize as integer   listView as integer   listType as integer   listStart as integer   listCtl as ctlRecHndl   listDraw as procPtr   listMemHeight as integer   listMemSize as integer   listPointer as memRecPtr   listRefCon as long   listScrollClr as barColorsPtrend typetype listRecPtr as pointer to listRec; List color tabletype lColorTable   listFrameClr as integer   listNorTextClr as integer   listSelTextClr as integer   listNorBackClr as integer   listSelBackClr as integerend typeTool $1C, $01 SUB      ListBootInitTool $1C, $02 SUB      ListStartUpTool $1C, $03 SUB      ListShutDownTool $1C, $04 FUNCTION ListVersion as %Tool $1C, $05 SUB      ListResetTool $1C, $06 FUNCTION ListStatus as booleanTool $1C, $18 FUNCTION CompareStrings (%, pString, pString) as %Tool $1C, $09 FUNCTION CreateList (grafPortPtr, (listRec)) as ctlRecHndlTool $1C, $0C SUB      DrawMember (memRecPtr, (listRec))Tool $1C, $11 SUB      DrawMember2 (%, ctlRecHndl)Tool $1C, $0E FUNCTION GetListDefProc as procPtrTool $1C, $17 SUB      ListKey (%, eventRecord, ctlRecHndl)Tool $1C, $10 SUB      NewList (memRecPtr, (listRec))Tool $1C, $16 SUB      NewList2 (procPtr, %, univ, %, %, ctlRecHndl)Tool $1C, $0B FUNCTION NextMember (memRecPtr, (listRec)) as memRecPtrTool $1C, $12 FUNCTION NextMember2 (%, ctlRecHndl) as %Tool $1C, $0F FUNCTION ResetMember ((listRec)) as memRecPtrTool $1C, $13 FUNCTION ResetMember2 (ctlRecHndl) as %Tool $1C, $0D SUB      SelectMember (memRecPtr, (listRec))Tool $1C, $14 SUB      SelectMember2 (%, ctlRecHndl)Tool $1C, $0A SUB      SortList (procPtr, (listRec))Tool $1C, $15 SUB      SortList2 (procPtr, ctlRecHndl);----------------------------------------------------------------;; Memory Manager;;----------------------------------------------------------------const attrNoPurge     =   $0000         ; not purgeableconst attrBank        =   $0001         ; fixed bankconst attrAddr        =   $0002         ; fixed addressconst attrPage        =   $0004         ; page alignedconst attrNoSpec      =   $0008         ; may not use special memoryconst attrNoCross     =   $0010         ; may not cross bank boundaryconst attrPurge1      =   $0100         ; purge level 1const attrPurge2      =   $0200         ; purge level 2const attrPurge3      =   $0300         ; purge level 3const attrPurge       =   $0300         ; test or set both purge bitsconst attrHandle      =   $1000         ; block of handles - reserved for MMconst attrSystem      =   $2000         ; system handle - reserved for MMconst attrFixed       =   $4000         ; fixed blockconst attrLocked      =   $8000         ; locked blocktype OOMHeader   reserved as long   _version as integer                   ; must be zero   signature as integer                 ; set to $A55Aend typeTool $02, $01 SUB      MMBootInitTool $02, $02 FUNCTION MMStartUp as %Tool $02, $03 SUB      MMShutDown (%)Tool $02, $04 FUNCTION MMVersion as %Tool $02, $05 SUB      MMResetTool $02, $06 FUNCTION MMStatus as booleanTool $02, $0C SUB      AddToOOMQueue ((OOMHeader))Tool $02, $2B SUB      BlockMove (ptr, ptr, &)Tool $02, $1E SUB      CheckHandle (handle)Tool $02, $1F SUB      CompactMemTool $02, $11 SUB      DisposeAll (%)Tool $02, $10 SUB      DisposeHandle (handle)Tool $02, $1A FUNCTION FindHandle (ptr) as handleTool $02, $1B FUNCTION FreeMem as &Tool $02, $18 FUNCTION GetHandleSize (handle) as &Tool $02, $2A SUB      HandToHand (handle, handle, &)Tool $02, $29 SUB      HandToPtr (handle, ptr, &)Tool $02, $20 SUB      HLock (handle)Tool $02, $21 SUB      HLockAll (%)Tool $02, $22 SUB      HUnLock (handle)Tool $02, $23 SUB      HUnLockAll (%)Tool $02, $1C FUNCTION MaxBlock as &Tool $02, $09 FUNCTION NewHandle (&, %, %, univ) as handleTool $02, $29 SUB      PtrToHand (ptr, handle, &)Tool $02, $13 SUB      PurgeAll (%)Tool $02, $12 SUB      PurgeHandle (handle)Tool $02, $2F FUNCTION RealFreeMem as &Tool $02, $0A SUB      ReAllocHandle (&, %, %, ptr, handle)Tool $02, $0D SUB      RemoveFromOOMQueue ((OOMHeader))Tool $02, $0B SUB      RestoreHandle (handle)Tool $02, $30 FUNCTION SetHandleID (%, handle) as %Tool $02, $19 SUB      SetHandleSize (&, handle)Tool $02, $24 SUB      SetPurge (%, handle)Tool $02, $25 SUB      SetPurgeAll (%, %)Tool $02, $1D FUNCTION TotalMem as &;----------------------------------------------------------------;; Menu Manager;;----------------------------------------------------------------; Masks for MenuFlagconst mInvis          =   $0004         ; set if menu is not visibleconst mCustom         =   $0010         ; set if menu is a custom menuconst mXor            =   $0020         ; set if menu is hilited using XORconst mSelected       =   $0040         ; set if menu is highlightedconst mDisabled       =   $0080         ; set if menu is disabled; Messages to menu definition proceduresconst mDrawMsg        =   $0000         ; draw menuconst mChooseMsg      =   $0001         ; hit test itemconst mSizeMsg        =   $0002         ; compute menu sizeconst mDrawTitle      =   $0003         ; draw menu's titleconst mDrawMItem      =   $0004         ; draw itemconst mGetMItemID     =   $0005         ; return item ID number; Inputs to SetMenuFlag routineconst customMenu      =   $0010         ; menu is a custom menuconst disableMenu     =   $0080         ; menu will be dimmed and not selectableconst enableMenu      =   $FF7F         ; menu will not be dimmed is selectableconst colorReplace    =   $FFDF         ; menu title and background will be                                        ;   redrawn and hilightedconst standardMenu    =   $FFEF         ; menu considered a standard menu; Inputs to SetMItemFlag routineconst xorMItemHilite  =   $0020         ; menu title area XORed to highlightconst underMItem      =   $0040         ; underline itemconst noUnderMItem    =   $FFBF         ; don't underline itemconst colorMItemHilite =  $FFDF         ; menu title and background highlightedconst enableItem      =   $FF7F         ; enable menu itemconst disableItem     =   $0080         ; disable menu item; Reference values for new 5.0 Menu Manager callsconst refIsPointer    =   0const refIsHandle     =   1const refIsResource   =   2type menuItemTemplate   _version as integer                   ; must be zero   itemID as integer   itemChar as byte   itemAltChar as byte   itemCheck as integer   itemFlag as integer   itemTitleRef as longend typetype menuTemplate   _version as integer                   ; must be zero   menuID as integer   menuFlag as integer   menuTitleRef as long   ; itemRefs is a variable length array.   itemRefs(10) as longend typetype menuBarTemplate   _version as integer                   ; must be zero   menuBarFlag as integer   ; menuRefs is a variable length array.   menuRefs(10) as longend typetype menuResult   menuID as integer   firstHandle as handle   secondHandle as handleend typeTool $0F, $01 SUB      MenuBootInitTool $0F, $02 SUB      MenuStartUp (%, %)Tool $0F, $03 SUB      MenuShutDownTool $0F, $04 FUNCTION MenuVersion as %Tool $0F, $05 SUB      MenuResetTool $0F, $06 FUNCTION MenuStatus as booleanTool $0F, $1C SUB      CalcMenuSize (%, %, %)Tool $0F, $32 SUB      CheckMItem (boolean, %)Tool $0F, $14 FUNCTION CountMItems (%) as %Tool $0F, $0E SUB      DeleteMenu (%)Tool $0F, $10 SUB      DeleteMItem (%)Tool $0F, $31 SUB      DisableMItem (%)Tool $0F, $2E SUB      DisposeMenu (menuHandle)Tool $0F, $2A SUB      DrawMenuBarTool $0F, $30 SUB      EnableMItem (%)Tool $0F, $13 FUNCTION FixMenuBar as %Tool $0F, $0C SUB      FlashMenuBarTool $0F, $18 FUNCTION GetBarColors as &Tool $0F, $0A FUNCTION GetMenuBar as ctlRecHndlTool $0F, $20 FUNCTION GetMenuFlag (%) as %Tool $0F, $1B FUNCTION GetMenuMgrPort as grafPortPtrTool $0F, $22 FUNCTION GetMenuTitle (%) as cStringPtrTool $0F, $16 FUNCTION GetMHandle (%) as menuHandleTool $0F, $25 FUNCTION GetMItem (%) as cStringPtrTool $0F, $4F FUNCTION GetMItemBlink as %Tool $0F, $27 FUNCTION GetMItemFlag (%) as %Tool $0F, $4C FUNCTION GetMItemFlag2 (%) as %Tool $0F, $48 FUNCTION GetMItemIcon (%) as &Tool $0F, $34 FUNCTION GetMItemMark (%) as %Tool $0F, $4A FUNCTION GetMItemStruct (%) as &Tool $0F, $36 FUNCTION GetMItemStyle (%) as %Tool $0F, $1A FUNCTION GetMTitleStart as %Tool $0F, $1E FUNCTION GetMTitleWidth (%) as %Tool $0F, $3B FUNCTION GetPopUpDefProc as procPtrTool $0F, $11 FUNCTION GetSysBar as ctlRecHndlTool $0F, $45 SUB      HideMenuBarTool $0F, $2C SUB      HiliteMenu (boolean, %)Tool $0F, $2F SUB      InitPaletteTool $0F, $0D SUB      InsertMenu (menuHandle, %)Tool $0F, $0F SUB      InsertMItem (cStringPtr, %, %)Tool $0F, $3F SUB      InsertMItem2 (%, &, %, %)Tool $0F, $50 SUB      InsertPathMItems (%, gsosInString, %, %, %, %,                          menuResult)Tool $0F, $23 FUNCTION MenuGlobal (%) as %Tool $0F, $09 SUB      MenuKey ((eventRecord), ctlRecHndl)Tool $0F, $29 SUB      MenuNewResTool $0F, $0B SUB      MenuRefresh (procPtr)Tool $0F, $2B SUB      MenuSelect ((eventRecord), ctlRecHndl)Tool $0F, $2D FUNCTION NewMenu (stringPtr) as menuHandleTool $0F, $3E FUNCTION NewMenu2 (%, &) as menuHandleTool $0F, $15 FUNCTION NewMenuBar (grafPortPtr) as ctlRecHndlTool $0F, $43 FUNCTION NewMenuBar2 (%, univ, grafPortPtr) as menuBarHandleTool $0F, $3C FUNCTION PopUpMenuSelect (%, %, %, %, menuHandle) as %Tool $0F, $4B SUB      RemoveMItemStruct (%)Tool $0F, $17 SUB      SetBarColors (%, %, %)Tool $0F, $39 SUB      SetMenuBar (ctlRecHndl)Tool $0F, $1F SUB      SetMenuFlag (%, %)Tool $0F, $37 SUB      SetMenuID (%, %)Tool $0F, $21 SUB      SetMenuTitle (cStringPtr, %)Tool $0F, $40 SUB      SetMenuTitle2 (%, &, %)Tool $0F, $24 SUB      SetMItem (cStringPtr, %)Tool $0F, $41 SUB      SetMItem2 (%, &, %)Tool $0F, $28 SUB      SetMItemBlink (%)Tool $0F, $26 SUB      SetMItemFlag (%, %)Tool $0F, $4D SUB      SetMItemFlag2 (%, %)Tool $0F, $47 SUB      SetMItemIcon (%, univ, %)Tool $0F, $38 SUB      SetMItemID (%, %)Tool $0F, $33 SUB      SetMItemMark (%, %)Tool $0F, $3A SUB      SetMItemName (pStringPtr, %)Tool $0F, $42 SUB      SetMItemName2 (%, &, %)Tool $0F, $49 SUB      SetMItemStruct (%, univ, %)Tool $0F, $35 SUB      SetMItemStyle (%, %)Tool $0F, $19 SUB      SetMTitleStart (%)Tool $0F, $1D SUB      SetMTitleWidth (%, %)Tool $0F, $12 SUB      SetSysBar (ctlRecHndl)Tool $0F, $46 SUB      ShowMenuBar;----------------------------------------------------------------;; MIDI Tool Set;;----------------------------------------------------------------Tool $20, $01 SUB      MidiBootInitTool $20, $02 SUB      MidiStartup (%, %)Tool $20, $03 SUB      MidiShutdownTool $20, $04 FUNCTION MidiVersion as %Tool $20, $05 SUB      MidiResetTool $20, $06 FUNCTION MidiStatus as booleanTool $20, $0B SUB      MidiClock (%, &)Tool $20, $09 SUB      MidiControl (%, &)Tool $20, $0A SUB      MidiDevice (%, ptr)Tool $20, $0C FUNCTION MidiInfo (%) as &Tool $20, $0D FUNCTION MidiReadPacket (ptr, %) as %Tool $20, $0E FUNCTION MidiWritePacket (ptr) as %;----------------------------------------------------------------;; MIDISynth Tool Set;;----------------------------------------------------------------; Error Codesconst msAlreadyStarted = $2301          ; MidiSynth already started.const msNotStarted = $2302              ; MidiSynth never started.const msNoDPMem = $2303                 ; Can't get direct page memory.const msNoMemBlock = $2304              ; Can't get memory block.const msNoMiscTool = $2305              ; Misc Tools not started.const msNoSoundTool = $2306             ; Sound Tools not started.const msGenInUse = $2307                ; Ensoniq generator in use.const msBadPortNum = $2308              ; Illegal port number.const msPortBusy = $2309                ; Port is busy.const msParamRangeErr = $230a           ; Parameter range error.const msMsgQueueFull = $230b            ; Message queue full.const msRecBufFull = $230c              ; Rec buffer is full.const msOutputDisabled = $230d          ; MIDI output disabled.const msMessageError = $230e            ; Message error.const msOutputBufFull = $230f           ; MIDI output buffer is full.const msDriverNotStarted = $2310        ; Driver not started.const msDriverAlreadySet = $2311        ; Driver already set.const msDevNotAvail = $2380             ; the requested device is not availableconst msDevSlotBusy = $2381             ; requested slot is already in useconst msDevBusy = $2382                 ; the requested device is already in useconst msDevOverrun = $2383              ; device overrun by incoming MIDI dataconst msDevNoConnect = $2384            ; no connection to MIDIconst msDevReadErr = $2385              ; framing error in received MIDI dataconst msDevVersion = $2386              ; ROM version is incompatible with device driverconst msDevIntHndlr = $2387             ; conflicting interrupt handler is installedtype msDirectPageHndl as pointer to msDirectPagePtrtype msDirectPagePtr as pointer to msDirectPagetype msDirectPage    reserved1(10) as byte   mpacketStat as integer   mpacketData1 as integer   mpacketData2 as integer   seqClockFrac as byte   seqClockInt as long   reserved2(25) as byte   seqItemStat as byte   seqItemData1 as byte   seqItemData2 as byte   reserved3(10) as byte   metroVol as byte   reserved4(163) as byte   metroFreq as byte   reserved5(3) as byte   seqItemTrack as byte   reserved6 as byte   packetBytes as byte   reserved7(13) as byteend typetype getMSDataOutputRecHndl as pointer to getMSDataOutputRecPtrtype getMSDataOutputRecPtr as pointer to getMSDataOutputRectype getMSDataOutputRec    directPage as msDirectPagePtr   reserved as longend typetype measureRecHndl as pointer to measureRecPtrtype measureRecPtr as pointer to measureRectype measureRec    measureNumber as integer   beatNumber as integer   msRemainder as integerend typetype callBackRecHndl as pointer to callBackRecPtrtype callBackRecPtr as pointer to callBackRectype callBackRec    endSeq as procPtr   userMeter as procPtr   mstart as procPtr   mstop as procPtr   packetIn as procPtr   seqEvent as procPtr   sysEx as procPtr   packetOut as procPtr   pgmChange as procPtr   mContinue as procPtr   sMarker as procPtr   recBufFull as procPtr   reserved1 as procPtr   reserved2 as procPtrend typetype seqPlayRecHndl as pointer to seqPlayRecPtrtype seqPlayRecPtr as pointer to seqPlayRectype seqPlayRec    pBufStart as ptr   reserved as long   rBufStart as ptr   rBufEnd as ptr   seqFlags as integer   theClock as longend typetype envelopeRecHndl as pointer to envelopeRecPtrtype envelopeRecPtr as pointer to envelopeRectype envelopeRec    attackLevel as byte   attackRate as byte   decay1Level as byte   decay1Rate as byte   decay2Level as byte   decay2Rate as byte   sustainLevel as byte   decay3Rate as byte   release1Level as byte   release1Rate as byte   release2Level as byte   release2Rate as byte   release3Rate as byte   decayGain as byte   velocityGain as byte   pitchBendRange as byteend typetype wavelistRecHndl as pointer to wavelistRecPtrtype wavelistRecPtr as pointer to wavelistRectype wavelistRec    topKey as byte   oscConfig as byte   stereo as byte   detune as byte   waveAddrA as byte   waveSizeA as byte   volumeA as byte   octaveA as byte   semitoneA as byte   findTuneA as byte   wavAddrB as byte   waveSizeB as byte   volumeB as byte   octaveB as byte   semitoneB as byte   fineTuneB as byteend typetype instrumentRecHndl as pointer to instrumentRecPtrtype instrumentRecPtr as pointer to instrumentRectype instrumentRec    gen1EnvRec as envelopeRec   gen1WaveRecs(7) as wavelistRec   gen2EnvRec as envelopeRec   gen2WaveRecs(7) as wavelistRecend typetype seqItemRecHndl as pointer to seqItemRecPtrtype seqItemRecPtr as pointer to seqItemRectype seqItemRec    trackNum as byte   timeStampHigh as byte   timeStampLow as byte   timeStampMid as byte   dataByteCount as byte   MIDIStat as byte   dataByte1 as byte   dataByte2 as byteend typeTool $23, $01 SUB      MSBootInitTool $23, $02 SUB      MSStartUpTool $23, $03 SUB      MSShutDownTool $23, $04 FUNCTION MSVersion as %Tool $23, $05 SUB      MSResetTool $23, $06 FUNCTION MSStatus as Boolean; ConvertToMeasure returns 3 integers, so it cannot be called from BASIC; Tool $23, $21 FUNCTION ConvertToMeasure (%, %, &) as MeasureRecTool $23, $20 FUNCTION ConvertToTime (%, %, %, %) as &Tool $23, $1D SUB      DeleteTrack (%, ptr); GetMSData returns 2 longs, so it cannot be called from BASIC; Tool $23, $1F FUNCTION GetMSData as getMSDataOutputRecTool $23, $25 SUB      GetTuningTable (ptr)Tool $23, $27 SUB      InitMIDIDriver (%, %, %, procPtr)Tool $23, $0D SUB      KillAllNotesTool $23, $11 FUNCTION Locate (&, ptr) as seqItemRecPtrTool $23, $1B FUNCTION LocateEnd (ptr) as ptrTool $23, $1C SUB      Merge (ptr, ptr)Tool $23, $1A SUB      MIDIMessage (%, %, %, %, %)Tool $23, $23 SUB      MSResumeTool $23, $22 SUB      MSSuspendTool $23, $0B SUB      PlayNote (%, %, %)Tool $23, $28 SUB      RemoveMIDIDriverTool $23, $15 SUB      SeqPlayer ((seqPlayRec))Tool $23, $09 SUB      SetBasicChannel (%)Tool $23, $19 SUB      SetBeat (%)Tool $23, $17 SUB      SetCallBack ((callBackRec))Tool $23, $14 SUB      SetInstrument (instrumentRecPtr, %)Tool $23, $1E SUB      SetMetro (%, %, ptr)Tool $23, $0A SUB      SetMIDIMode (%)Tool $23, $13 SUB      SetMIDIPort (%, %)Tool $23, $0F SUB      SetPlayTrack (%, %)Tool $23, $0E SUB      SetRecTrack (%)Tool $23, $16 SUB      SetTempo (%)Tool $23, $26 SUB      SetTrackOut (%, %)Tool $23, $24 SUB      SetTuningTable (ptr)Tool $23, $24 SUB      SetVelComp (%)Tool $23, $0C SUB      StopNote (%, %)Tool $23, $18 SUB      SysExOut (ptr, %, procPtr)Tool $23, $10 SUB      TrackToChannel (%, %);----------------------------------------------------------------;; Miscellaneous Tool Set;;----------------------------------------------------------------type queueHeader    reserved1 as long   reserved2 as integer   signature as integerend typetype queueHeaderPtr as pointer to queueHeadertype intStateRecord    irq_A as integer   irq_X as integer   irq_Y as integer   irq_S as integer   irq_D as integer   irq_P as byte   irq_DB as byte   irq_e as byte   irq_K as byte   irq_PC as integer   irq_state as byte   irq_shadow as integer   irq_mslot as byteend typeTool $03, $01 SUB      MTBootInitTool $03, $02 SUB      MTStartUpTool $03, $03 SUB      MTShutDownTool $03, $04 FUNCTION MTVersion as %Tool $03, $05 SUB      MTResetTool $03, $06 FUNCTION MTStatus as booleanTool $03, $2E SUB      AddToQueue (queueHeaderPtr, queueHeaderPtr)Tool $03, $37 FUNCTION ConvSeconds (%, &, ptr) as &Tool $03, $2F SUB      DeleteFromQueue (queueHeaderPtr, queueHeaderPtr)Tool $03, $30 SUB      SetInterruptState ((intStateRecord), %)Tool $03, $31 SUB      GetInterruptState ((intStateRecord), %)Tool $03, $32 FUNCTION GetIntStateRecSize as %Tool $03, $34 FUNCTION GetCodeResConverter as procPtrTool $03, $09 SUB      WriteBRam (ptr)Tool $03, $0A SUB      ReadBRam (ptr)Tool $03, $0B SUB      WriteBParam (%, %)Tool $03, $0C FUNCTION ReadBParam (%) as %; ReadTimeHex returns 8 bytes, so it cannot be called by BASIC; To set up parameters for WriteTimeHex, you could shift the first value; and then OR it with the second value as month_day as = month << 8 | dayTool $03, $0E SUB      WriteTimeHex (%, %, %)Tool $03, $0F SUB      ReadASCIITime (ptr); FWEntry returns 4 integers, so it cannot be called by BASICTool $03, $16 FUNCTION GetAddr (%) as ptrTool $03, $25 FUNCTION GetTick as &Tool $03, $29 FUNCTION GetIRQEnable as %Tool $03, $23 SUB      IntSource (%)Tool $03, $1C SUB      ClampMouse (%, %, %, %)Tool $03, $1B SUB      ClearMouse; GetMouseClamp returns 4 integers, so it cannot be called by BASICTool $03, $1A SUB      HomeMouseTool $03, $18 SUB      InitMouse (%)Tool $03, $1E SUB      PosMouse (%, %); ReadMouse returns 2 integers and 2 bytes, so it cannot be called by BASIC; ReadMouse2 returns 3 integers, so it cannot be called by BASICTool $03, $1F FUNCTION ServeMouse as %Tool $03, $19 SUB      SetMouse (%)Tool $03, $2A SUB      SetAbsClamp (%, %, %, %); GetAbsClamp returns 4 integers, so it cannot be called by BASICTool $03, $26 FUNCTION PackBytes (handle, (%), ptr, %) as %Tool $03, $27 FUNCTION UnPackBytes (ptr, %, handle, (%)) as %Tool $03, $28 FUNCTION Munger (handle, (%), ptr, %, ptr, %, ptr) as %Tool $03, $12 SUB      SetHeartBeat (ptr)Tool $03, $13 SUB      DelHeartBeat (ptr)Tool $03, $14 SUB      ClrHeartBeatTool $03, $2C SUB      SysBeepTool $03, $38 SUB      SysBeep2 (%)Tool $03, $15 SUB      SysFailMgr (%, univ)Tool $03, $20 FUNCTION GetNewID (%) as %Tool $03, $21 SUB      DeleteID (%)Tool $03, $22 SUB      StatusID (%)Tool $03, $10 SUB      SetVector (%, ptr)Tool $03, $11 FUNCTION GetVector (%) as ptrTool $03, $39 SUB      VersionString (%, &, univ)Tool $03, $3A FUNCTION WaitUntil (%, %) as %Tool $03, $3D FUNCTION ScanDevices as %Tool $03, $3C SUB      ShowBootInfo (cStringPtr, ptr)Tool $03, $3B FUNCTION StringToText (%, cStringPtr, %, gsosOutStringPtr) as &; new in 6.0.1Tool $03, $3E FUNCTION AlertMessage (ptr, %, ptr) as %Tool $03, $3F FUNCTION DoSysPrefs (%, %) as %;----------------------------------------------------------------;; Multimedia Squence Editor, Scheduler;;----------------------------------------------------------------const inChapters = 1const inFrames = 2const inTimes = 3const mcCInit = 1                       ; control values for MCControlconst mcCEject = 2const mcCVideoOn = 3const mcCVideoOff = 4const mcCDisplayOn = 5const mcCDisplayOff = 6const mcCBlankVideo = 7const mcCDefaultCom = 8const mcCLockDev = 9const mcCUnLockDev = 10const mcC8Data1Stop = 40const mcC7Data1Stop = 41const mcC6Data1Stop = 42const mcC5Data1Stop = 43const mcC8Data2Stop = 44const mcC7Data2Stop = 45const mcC6Data2Stop = 46const mcC5Data2Stop = 47   const mcCBaudDflt = 50const mcCBaud50 = 51const mcCBaud75 = 52const mcCBaud110 = 53const mcCBaud134 = 54const mcCBaud150 = 55const mcCBaud300 = 56const mcCBaud600 = 57const mcCBaud1200 = 58const mcCBaud1800 = 59const mcCBaud2400 = 60const mcCBaud3600 = 61const mcCBaud4800 = 62const mcCBaud7200 = 63const mcCBaud9600 = 64const mcCBaud19200 = 65const mcCModem = 100const mcCPrinter = 101const mcCIgnoreDS = 200const mcCReportDS = 201const mcFTypes = 0                      ; status values for MCGetFeaturesconst mcFStep = 1const mcFRecord = 2const mcFVideo = 3const mcFEject = 4const mcFLock = 5const mcFVDisplay = 6const mcFVOverlay = 7const mcFVOChars = 8const mcFVolume = 9const mcSUnknown = 0                    ; status values for MCGetStatusconst mcSDeviceType = $0000const mcSLaserDisc = 1const mcSCDAudio = 2const mcSCDLaserCD = 3const mcSVCR = 4const mcSCamCorder = 5const mcSPlayStatus = $0001const mcSPlaying = 1const mcSStill = 2const mcSParked = 3const mcSDoorStatus = $0002const mcSDoorOpen = 1const mcSDoorClosed = 2const mcSDiscType = $0003const mcS_CLV = 1const mcS_CAV = 2const mcS_CDV = 3const mcS_CD = 4const mcSDiscSize = $0004const mcSDisc3inch = 3const mcSDisk5inch = 5const mcSDisk8inch = 8const mcSDisk12inch = 12const mcSDiskSide = $0005const mcSSideOne = 1const mcSSideTwo = 2const mcSVolumeL = $0006const mcSVolumeR = $0007const mcElapsedTrack = 0                ; MCGetTimes selector valuesconst mcRemainTrack = 1const mcElapsedDisc = 2const mcRemainDisc = 3const mcTotalDisc = 4const mcTotalFrames = 5const mcTracks = 6const mcDiscID = 7   const AudioOff = 0                      ; Audio valuesconst AudioRight = 1const AudioLinR = 2const AudioMinR = 3const AudioRinL = 4const AudioRinLR = 5const AudioReverse = 6const AudioRinLMR = 7const AudioLeft = 8const AudioSterio = 9const AudioLinLR = 10const AudioLinLMR = 11const AudioMinL = 12const AudioMinLRinR = 13const AudioMonLLinR = 14const AudioMonaural = 15           Tool $26, $01 SUB      MCBootInitTool $26, $02 SUB      MCStartUp (%)Tool $26, $03 SUB      MCShutDownTool $26, $04 FUNCTION MCVersion as %Tool $26, $05 SUB      MCResetTool $26, $06 FUNCTION MCStatus as booleanTool $26, $0A SUB      MCLoadDriver (%)Tool $26, $0B SUB      MCUnLoadDriver (%)Tool $26, $14 SUB      MCDStartUp (%, pString, %)Tool $26, $15 SUB      MCDShutDown (%)Tool $26, $0D FUNCTION MCBinToTime (&) as &Tool $26, $1B SUB      MCControl (%, %)Tool $26, $28 FUNCTION MCGetDiscID (%) as &Tool $26, $12 SUB      MCGetDicTitle (&, (pString))Tool $26, $27 FUNCTION MCGetDiscTOC (%, %) as &Tool $26, $09 SUB      MCGetErrorMsg (%, (pString))Tool $26, $16 FUNCTION MCGetFeatures (%, %) as &Tool $26, $2D SUB      MCGetName (%, (pString))Tool $26, $29 FUNCTION MCGetNoTracks (%) as %Tool $26, $24 FUNCTION MCGetPosition (%, %) as &Tool $26, $10 SUB      MCGetProgram (&, (pString))Tool $26, $1D SUB      MCGetSpeeds (%, (pString))Tool $26, $1A FUNCTION MCGetStatus (%, %) as %Tool $26, $26 FUNCTION MCGetTimes (%, %) as &Tool $26, $0E SUB      MCGetTrackTitle (&, %, (pString))Tool $26, $20 SUB      MCJog (%, %, &, %)Tool $26, $18 SUB      MCPause (%)Tool $26, $17 SUB      MCPlay (%)Tool $26, $2A SUB      MCRecord (%)Tool $26, $25 SUB      MCSetAudio (%, %)Tool $26, $2E SUB      MCSetVolume (%, %, %)Tool $26, $1C SUB      MCScan (%, %)Tool $26, $22 FUNCTION MCSearchDone (%) as booleanTool $26, $21 SUB      MCSearchTo (%, %, &)Tool $26, $23 SUB      MCSearchWait (%)Tool $26, $19 SUB      MCSendRawData (%, gsosInString)Tool $26, $13 SUB      MCSetDiscTitle (&, pString)Tool $26, $11 SUB      MCSetProgram (&, gsosInString)Tool $26, $0F SUB      MCSetTrackTitle (&, %, pString)Tool $26, $1E SUB      MCSpeed (%, %)Tool $26, $2B SUB      MCStop (%)Tool $26, $1F SUB      MCStopAt (%, %, &)Tool $26, $0C FUNCTION MCTimeToBin (&) as &Tool $26, $2C SUB      MCWaitRawData (%, (gsosOutString), %, %);----------------------------------------------------------------;; Note Sequencer;;----------------------------------------------------------------Tool $1A, $01 SUB      SeqBootInitTool $1A, $02 SUB      SeqStartup (%, %, %, %)Tool $1A, $03 SUB      SeqShutdownTool $1A, $04 FUNCTION SeqVersion as %Tool $1A, $05 SUB      SeqResetTool $1A, $06 FUNCTION SeqStatus as booleanTool $1A, $0A FUNCTION ClearIncr as %; The function GetLoc returns 3 words, so it cannot be called from BASIC; Tool $1A, $0C FUNCTION GetLoc % % %Tool $1A, $0B FUNCTION GetTimer as %Tool $1A, $0D SUB      SeqAllNotesOffTool $1A, $09 SUB      SetIncr (%)Tool $1A, $12 SUB      SetInstTable (handle)Tool $1A, $0E SUB      SetTrkInfo (%, %, %)Tool $1A, $13 SUB      StartIntsTool $1A, $0F SUB      StartSeq (procPtr, procPtr, univ)Tool $1A, $15 SUB      StartSeqRel (procPtr, procPtr, univ)Tool $1A, $10 SUB      StepSeqTool $1A, $14 SUB      StopIntsTool $1A, $11 SUB      StopSeq (boolean);----------------------------------------------------------------;; Note Synthesizer;;----------------------------------------------------------------type waveForm   topKey as byte   waveAddress as byte   waveSize as byte   DOCMode as byte   relPitch as integerend typetype instrument   envelope(23) as byte   releaseSegment as byte   priorityIncrement as byte   pitchBendRange as byte   vibratoDepth as byte   vibratoSpeed as byte   spare as byte   aWaveCount as byte   bWaveCount as byte   aWaveList(10) as waveForm            ; variable length array   bWaveList(10) as waveForm            ; variable length arrayend typetype generatorControlBlock   synthID as byte   genNum as byte   semitone as byte   volume as byte   pitchBend as byte   vibratoDepth as byte   reserved1 as long   reserved2 as long   reserved3 as integerend typeTool $19, $01 SUB      NSBootInitTool $19, $02 SUB      NSStartUp (%, procPtr)Tool $19, $03 SUB      NSShutDownTool $19, $04 FUNCTION NSVersion as %Tool $19, $05 SUB      NSResetTool $19, $06 FUNCTION NSStatus as booleanTool $19, $07 SUB      AllNotesOffTool $19, $09 FUNCTION AllocGen (%) as %Tool $19, $0A SUB      DeallocGen (%)Tool $19, $0C SUB      NoteOff (%, %)Tool $19, $0B SUB      NoteOn (%, %, %, (instrument))Tool $19, $0E FUNCTION NSSetUpdateRate (%) as %Tool $19, $0F FUNCTION NSSetUserUpdateRtn (procPtr) as procPtr;----------------------------------------------------------------;; ORCA/Shell;;----------------------------------------------------------------type changeVectorDCB   reserved as integer   vector as integer   proc as procPtr   oldProc as procPtrend typetype changeVectorDCBGS   pcount as integer   reserved as integer   vector as integer   proc as procPtr   oldProc as procPtrend typetype consoleOutDCB   ch as charend typetype consoleOutDCBGS   pcount as integer   ch as char end typetype directionDCB   device as integer   result as integerend typetype directionDCBGS   pcount as integer   device as integer   direct as integerend typetype errorDCB   errorNumber as integerend typetype errorDCBGS   pcount as integer   error as integerend typetype executeDCB   flag as integer   commandString as stringPtrend typetype executeDCBGS   pcount as integer   flag as integer   comm as stringPtrend typetype expandDevicesDCB   name as pathPtrend typetype expandDevicesDCBGS   pcount as integer   inName as gsosInStringPtr   outName as gsosOutStringPtrend typetype exportDCB   name as pStringPtr   flags as integerend typetype exportDCBGS   pcount as integer   name as gsosInStringPtr   flags as integerend typetype fastFileDCB   action as integer   index as integer   flags as integer   file_handle as handle   file_length as long   name as pathPtr   access as integer   file_type as integer   auxType as long   storage_type as integer   create_date as integer   create_time as integer   mod_date as integer   mod_time as integer   blocks_used as longend typetype fastFileDCBGS   pcount as integer   action as integer   index as integer   flags as integer   fileHandle as handle   pathName as gsosInStringPtr   access as integer   fileType as integer   auxType as long   storageType as integer   createDate as timeField   modDate as timeField   option as optionListPtr   fileLength as long   blocksUsed as longend typetype getCommandDCB   index as integer   restart as integer   reserved as integer   command as integer   name(15) as charend typetype getCommandDCBGS   pcount as integer   index as integer   restart as integer   reserved as integer   command as integer   name(15) as charend typetype IODevicesDCB   output_type as integer   output_addr as procPtr   error_type as integer   error_addr as procPtr   input_type as integer   input_addr as procPtrend typetype IODevicesDCBGS   pcount as integer   outputType as integer   outputAddr as procPtr   errorType as integer   errorAddr as procPtr   inputType as integer   inputAddr as procPtrend typetype initWildcardDCB   wFile as pathPtr   flags as integerend typetype initWildcardDCBGS   pcount as integer   wFile as gsosInStringPtr   flags as integerend typetype keyPressDCBGS   pcount as integer   key as char   modifiers as integer   available as booleanend type   type langDCB   languageNum as integerend typetype langDCBGS   pcount as integer   lang as integerend typetype lInfoDCB   sFile as pathPtr   dFile as pathPtr   namesList as cStringPtr   iString as cStringPtr   merr as byte   merrf as byte   opFlags as byte   keepFlag as byte   mFlags as long   pFlags as long   origin as longend typetype getLInfoDCBGS   pcount as integer   sFile as gsosOutStringPtr   dFile as gsosOutStringPtr   namesList as gsosOutStringPtr   iString as gsosOutStringPtr   merr as byte   merrf as byte   lops as byte   kFlag as byte   mFlags as long   pFlags as long   org as longend typetype nextWildcardDCB   nextFile as pathPtrend typetype nextWildcardDCBGS   pcount as integer   pathName as gsosOutStringPtr   access as integer   fileType as integer   auxType as long   storageType as integer   createDate as timeField   modDate as timeField   option as optionListPtr   EOF as long   blocksUsed as long   resourceEOF as long   resourceBlocks as longend typetype popVariablesDCBGS   pcount as integerend typetype pushVariablesDCBGS   pcount as integerend typetype readIndexedDCB   varName as pStringPtr   value as pStringPtr   index as integerend typetype readIndexedDCBGS   pcount as integer   name as gsosOutStringPtr   value as gsosOutStringPtr   index as integer   export as integerend typetype readKeyDCBGS   pcount as integer   key as char   modifiers as integerend typetype readVariableDCB   varName as pStringPtr   value as pStringPtrend typetype readVariableDCBGS   pcount as integer   name as gsosInStringPtr   value as gsosOutStringPtr   export as integerend typetype redirectDCB   device as integer   appendFlag as integer   fileName as pStringPtrend typetype redirectDCBGS   pcount as integer   device as integer   append as integer   fileName as gsosInStringPtrend typetype setDCB   varName as pStringPtr   value as pStringPtrend typetype setDCBGS   pcount as integer   name as gsosInStringPtr   value as gsosInStringPtr   export as integerend typetype setLInfoDCBGS   pcount as integer   sFile as gsosInStringPtr   dFile as gsosInStringPtr   namesList as gsosInStringPtr   iString as gsosInStringPtr   merr as byte   merrf as byte   lops as byte   kFlag as byte   mFlags as long   pFlags as long   org as longend typetype stopDCB   stopFlag as booleanend typetype stopDCBGS   pcount as integer   flag as booleanend typetype unsetVariableDCB   name as pStringPtrend typetype unsetVariableDCBGS   pcount as integer   name as gsosInStringend typetype versionDCB   _version(3) as charend typetype versionDCBGS   pcount as integer   _version(3) as charend typeGSOS $0C, $01 SUB      ChangeVector ((changeVectorDCB))GSOS $4C, $01 SUB      ChangeVectorGS ((changeVectorDCBGS))GSOS $1A, $01 SUB      ConsoleOut ((consoleOutDCB))GSOS $5A, $01 SUB      ConsoleOutGS ((consoleOutDCBGS))GSOS $0F, $01 SUB      Direction ((directionDCB))GSOS $4F, $01 SUB      DirectionGS ((directionDCBGS))GSOS $05, $01 SUB      Error ((errorDCB))GSOS $45, $01 SUB      ErrorGS ((errorDCBGS))GSOS $0D, $01 SUB      Execute ((executeDCB))GSOS $4D, $01 SUB      ExecuteGS ((executeDCBGS))GSOS $14, $01 SUB      ExpandDevices ((expandDevicesDCB))GSOS $54, $01 SUB      ExpandDevicesGS ((expandDevicesDCBGS))GSOS $16, $01 SUB      Export ((exportDCB))GSOS $56, $01 SUB      ExportGS ((exportDCBGS))GSOS $0E, $01 SUB      FastFile ((fastFileDCB))GSOS $4E, $01 SUB      FastFileGS ((fastFileDCBGS))GSOS $1D, $01 SUB      GetCommand ((getCommandDCB))GSOS $5D, $01 SUB      GetCommandGS ((getCommandDCBGS))GSOS $1C, $01 SUB      GetIODevices ((IODevicesDCB))GSOS $03, $01 SUB      Get_Lang ((langDCB))GSOS $43, $01 SUB      GetLangGS ((langDCBGS))GSOS $01, $01 SUB      GetLInfo ((lInfoDCB))GSOS $41, $01 SUB      GetLInfoGS ((getLInfoDCBGS))GSOS $09, $01 SUB      Init_Wildcard ((initWildcardDCB))GSOS $49, $01 SUB      InitWildcardGS ((initWildcardDCBGS))GSOS $5E, $01 SUB      KeyPressGS ((keyPressDCBGS))GSOS $0A, $01 SUB      Next_Wildcard ((nextWildcardDCB))GSOS $4A, $01 SUB      NextWildcardGS ((nextWildcardDCBGS))GSOS $17, $01 SUB      PopVariables ((ptr)) ; pass nilGSOS $57, $01 SUB      PopVariablesGS ((popVariablesDCBGS))GSOS $18, $01 SUB      PushVariables ((ptr)) ; pass nilGSOS $58, $01 SUB      PushVariablesGS ((pushVariablesDCBGS))GSOS $08, $01 SUB      Read_Indexed ((readIndexedDCB))GSOS $48, $01 SUB      ReadIndexedGS ((readIndexedDCBGS))GSOS $5F, $01 SUB      ReadKeyGS ((readKeyDCBGS))GSOS $0B, $01 SUB      Read_Variable ((readVariableDCB))GSOS $4B, $01 SUB      ReadVariableGS ((readVariableDCBGS))GSOS $10, $01 SUB      Redirect ((directionDCB))GSOS $50, $01 SUB      RedirectGS ((directionDCBGS))GSOS $06, $01 SUB      Set_Variable ((setDCB))GSOS $46, $01 SUB      SetGS ((setDCBGS))GSOS $1B, $01 SUB      SetIODevices ((IODevicesDCB))GSOS $5B, $01 SUB      SetIODevicesGS ((IODevicesDCBGS))GSOS $04, $01 SUB      Set_Lang ((langDCB))GSOS $44, $01 SUB      SetLangGS ((langDCBGS))GSOS $02, $01 SUB      Set_LInfo ((lInfoDCB))GSOS $42, $01 SUB      SetLInfoGS ((setLInfoDCBGS))GSOS $19, $01 SUB      SetStopFlag ((stopDCB))GSOS $59, $01 SUB      SetStopFlagGS ((stopDCBGS))GSOS $13, $01 SUB      Stop ((stopDCB))GSOS $53, $01 SUB      StopGS ((stopDCBGS))GSOS $15, $01 SUB      UnsetVariable ((unsetVariableDCB))GSOS $55, $01 SUB      UnsetVariableGS ((unsetVariableDCBGS))GSOS $07, $01 SUB      ProVersion ((versionDCB))GSOS $47, $01 SUB      VersionGS ((versionDCBGS));----------------------------------------------------------------;; Print Manager;;----------------------------------------------------------------; Printer error codesconst prAbort     =   $80; Printer information subrecordtype prInfoRec   iDev as integer   iVRes as integer   iHRes as integer   rPage as rectend type; Printer style subrecordtype prStyleRec   wDev as integer   internA(2) as integer   feed as integer   paperType as integer   case 0      crWidth as integer   case 1      vSizing as integer      reduction as integer      internB as integerend type; Job information subrecordtype prJobRec   iFstPage as integer   iLstPage as integer   iCopies as integer   bJDocLoop as byte   fFromUser as byte   pIdleProc as procPtr   pFileName as pathPtr   iFileVol as integer   bFileVers as byte   bJobX as byteend type; Print recordtype PrRec   prVersion as integer   prInfo as prInfoRec   rPaper as rect   prStl as prStyleRec   prInfoPT(13) as byte   prXInfo(23) as byte   prJob as PrJobRec   printX(37) as byte   iReserved as integerend typetype PrRecPtr as pointer to PrRectype PrHandle as pointer to PrRecPtr; Printer status subrecordtype PrStatusRec   iTotPages as integer   iCurPage as integer   iTotCopies as integer   iCurCopy as integer   iTotBands as integer   iCurBand as integer   fPgDirty as boolean   fImaging as integer   hPrint as prHandle   pPrPort as grafPortPtr   hPic as longend typetype PrStatusPtr as pointer to PrStatusRecTool $13, $01 SUB      PMBootInitTool $13, $02 SUB      PMStartup (%, %)Tool $13, $03 SUB      PMShutDownTool $13, $04 FUNCTION PMVersion as %Tool $13, $05 SUB      PMResetTool $13, $06 FUNCTION PMStatus as booleanTool $13, $35 SUB      PMLoadDriver (%)Tool $13, $34 SUB      PMUnloadDriver (%)Tool $13, $16 FUNCTION PrChoosePrinter as booleanTool $13, $0F SUB      PrCloseDoc (grafPortPtr)Tool $13, $11 SUB      PrClosePage (grafPortPtr)Tool $13, $09 SUB      PrDefault (prHandle)Tool $13, $23 FUNCTION PrDriverVer as %Tool $13, $14 FUNCTION PrError as %Tool $13, $36 FUNCTION PrGetDocName as pStringPtrTool $13, $2B FUNCTION PrGetNetworkName as pStringPtrTool $13, $38 FUNCTION PrGetPgOrientation (prHandle) as %Tool $13, $29 FUNCTION PrGetPortDvrName as pStringPtrTool $13, $28 FUNCTION PrGetPrinterDvrName as pStringPtrTool $13, $18 FUNCTION PrGetPrinterSpecs as &Tool $13, $2A FUNCTION PrGetUserName as pStringPtrTool $13, $25 FUNCTION PrGetZoneName as pStringPtrTool $13, $0C FUNCTION PrJobDialog (prHandle) as booleanTool $13, $0E FUNCTION PrOpenDoc (prHandle, grafPortPtr) as grafPortPtrTool $13, $10 SUB      PrOpenPage (grafPortPtr, rectPtr)Tool $13, $12 SUB      PrPicFile (prHandle, grafPortPtr, PrStatusPtr)Tool $13, $0D SUB      PrPixelMap (locInfoPtr, (rect), boolean)Tool $13, $24 FUNCTION PrPortVer as %Tool $13, $37 SUB      PrSetDocName (pStringPtr)Tool $13, $15 SUB      PrSetError (%)Tool $13, $0B FUNCTION PrStlDialog (prHandle) as booleanTool $13, $0A FUNCTION PrValidate (prHandle) as boolean;----------------------------------------------------------------;; ProDOS 16;;----------------------------------------------------------------type createDCB   pathName as pathPtr   access as integer   fileType as integer   auxType as long   storageType as integer   createDate as integer   createTime as integerend typetype destroyDCB   pathName as pathPtrend typetype changePathDCB   pathName as pathPtr   newPathName as pathPtrend typetype setFileInfoDCB   pathName as pathPtr   access as integer   fileType as integer   auxType as long   nullField as integer   createDate as integer   createTime as integer   modDate as integer   modTime as integerend typetype getFileInfoDCB   pathName as pathPtr   access as integer   fileType as integer   auxTypeOrTotalBlocks as long   storageType as integer   createDate as integer   createTime as integer   modDate as integer   modTime as integer   blocksUsed as longend typetype volumeDCB   devName as pathPtr   volName as pathPtr   totalBlocks as long   freeBlocks as long   fileSysID as integerend typetype prefixDCB   prefixNum as integer   prefix as pathPtrend typetype clrBkupBitDCB   pathName as pathPtrend typetype openDCB   refNum as integer   pathName as pathPtr   reserved as long   ; set this value to $00000000end typetype newlineDCB   refNum as integer   enableMask as integer   newlineChar as integerend typetype readWriteDCB   refNum as integer   dataBuffer as ptr   requestCount as long   transferCount as longend typetype closeDCB   refNum as integerend typetype flushDCB   refNum as integerend typetype markDCB   refNum as integer   position as longend typetype eofDCB   refNum as integer   fileSize as longend typetype levelDCB   level as integerend typetype dirEntryDCB   refNum as integer   flags as integer   base as integer   displacement as integer   name as ptr   entryNum as integer   fileType as integer   eofValue as long   blockCount as long   createDate as long   createTime as long   modDate as long   modTime as long   access as integer   auxType as long   fileSystemID as integerend typetype getDevNumDCB   devName as pathPtr   devNum as integerend typetype deviceDCB   devNum as integerend typetype blockDCB   devNum as integer   dataBuffer as ptr   blockNum as longend typetype formatDCB   devName as pathPtr   volName as pathPtr   fileSysID as integerend typetype getNameDCB   theName as pathPtrend typetype quitDCB   pathName as pathPtr   flags as integerend typetype P16versionDCB   _version as integerend typetype dInfoDCB   devNum as integer   devName as pathPtrend typetype allocInterruptDCB   intNum as integer   intCode as ptrend typetype deallocInterruptDCB   intNum as integerend typeGSOS $01, $00 SUB      P16Create ((createDCB))GSOS $02, $00 SUB      P16Destroy ((destroyDCB))GSOS $04, $00 SUB      P16Change_Path ((changePathDCB))GSOS $05, $00 SUB      P16Set_File_Info ((setFileInfoDCB))GSOS $06, $00 SUB      P16Get_File_Info ((getFileInfoDCB))GSOS $08, $00 SUB      P16Volume ((volumeDCB))GSOS $09, $00 SUB      P16Set_Prefix ((prefixDCB))GSOS $0A, $00 SUB      P16Get_Prefix ((prefixDCB))GSOS $0B, $00 SUB      P16Clear_Backup ((clrBkupBitDCB))GSOS $10, $00 SUB      P16Open ((openDCB))GSOS $11, $00 SUB      P16Newline ((newlineDCB))GSOS $12, $00 SUB      P16Read ((readWriteDCB))GSOS $13, $00 SUB      P16Write ((readWriteDCB))GSOS $14, $00 SUB      P16Close ((closeDCB))GSOS $15, $00 SUB      P16Flush ((flushDCB))GSOS $16, $00 SUB      P16Set_Mark ((markDCB))GSOS $17, $00 SUB      P16Get_Mark ((markDCB))GSOS $18, $00 SUB      P16Set_EOF ((eofDCB))GSOS $19, $00 SUB      P16Get_EOF ((eofDCB))GSOS $1A, $00 SUB      P16Set_Level ((levelDCB))GSOS $1B, $00 SUB      P16Get_Level ((levelDCB))GSOS $1C, $00 SUB      P16Get_Dir_Entry ((dirEntryDCB))GSOS $20, $00 SUB      P16Get_Dev_Number ((getDevNumDCB))GSOS $21, $00 SUB      P16Get_Last_Dev ((deviceDCB))GSOS $22, $00 SUB      P16Read_Block ((blockDCB))GSOS $23, $00 SUB      P16Write_Block ((blockDCB))GSOS $24, $00 SUB      P16Format ((formatDCB))GSOS $25, $00 SUB      P16Erase_Disk ((formatDCB))GSOS $27, $00 SUB      P16Get_Name ((getNameDCB))GSOS $28, $00 SUB      P16Get_Boot_Vol ((getNameDCB))GSOS $29, $00 SUB      P16Quit ((quitDCB))GSOS $2A, $00 SUB      P16Get_Version ((P16versionDCB))GSOS $2C, $00 SUB      P16D_Info ((dInfoDCB))GSOS $31, $00 SUB      P16Alloc_Interrupt ((allocInterruptDCB))GSOS $32, $00 SUB      P16Dealloc_Interrupt ((deallocInterruptDCB));----------------------------------------------------------------;; QuickDraw II;;----------------------------------------------------------------; Font Flagsconst widMaxSize      =   $0001      ; nonproportional spacingconst zeroSize        =   $0002      ; numeric spacing; Color dataconst table320        =   $32        ; 320 color tableconst table640        =   $32        ; 640 color table; GrafPort sizesconst maskSize        =   $08        ; mask sizeconst locSize         =   $10        ; loc sizeconst patSize         =   $20        ; pattern sizeconst pnStateSize     =   $32        ; pen state sizeconst portSize        =   $AA        ; size of grafPort; Color masksconst blueMask        =   $000F      ; mask for blue nibbleconst greenMask       =   $00F0      ; mask for green nibbleconst redMask         =   $0F00      ; mask for red nibble; Master colors - mode indicated next to nameconst black           =   $0000      ; works in 320 & 640 modesconst blue            =   $000F      ; works in 320 & 640 modesconst darkGreen320    =   $0080const green320        =   $00E0const green640        =   $00F0const lightBlue320    =   $04DFconst purple320       =   $072Cconst darkGray320     =   $0777const periwinkleBlue320 = $078Fconst brown320        =   $0841const lightGray320    =   $0CCCconst red320          =   $0D00const lilac320        =   $0DAFconst red640          =   $0F00const orange320       =   $0F70const flesh320        =   $0FA9const yellow          =   $0FF0      ; works in 320 & 640 modesconst white           =   $0FFF      ; works in 320 & 640 modes; Pen modesconst modeCopy        =   $0000      ; copy source to destinationconst modeOR          =   $0001      ; overlay source & destinationconst modeXOR         =   $0002      ; XOR pen with destinationconst modeBIC         =   $0003      ; bit clear pen with destinationconst notCopy         =   $8000      ; copy (not source) to destinationconst notOR           =   $8001      ; overlay (not source) & destinationconst notXOR          =   $8002      ; XOR (not pen) with destinationconst notBIC          =   $8003      ; bit clear (not pen) with destination; Pen and text modesconst modeForeCopy    =   $0004      ; copy foreground pixels to destinationconst modeForeOR      =   $0005      ; OR foreground pixels into destinationconst modeForeXOR     =   $0006      ; XOR foreground pixels into destinationconst modeForeBIC     =   $0007      ; BIC foreground pixels into destinationconst notForeCopy     =   $8004      ; turn background to foreground, then copy                                     ; foreground pixels into destinationconst notForeOR       =   $8005      ; turn background to foreground, then OR                                     ; foreground pixels into destinationconst notForeXOR      =   $8006      ; turn background to foreground, then XOR                                     ; foreground pixels into destinationconst notForeBIC      =   $8007      ; turn background to foreground, then BIC                                     ; foreground pixels into destination; QD Start-up modesconst mode320         =   $00        ; 320 graphics modeconst mode640         =   $80        ; 640 graphics mode; SCB Byte Masksconst colorTableNo    =   $0F        ; color table numberconst scbReserved     =   $10        ; reserved for future useconst scbFill         =   $20        ; fill mode onconst scbInterrupt    =   $40        ; interrupt generated when line refreshedconst scbColorMode    =   $80        ; 640 mode on; Text stylesconst boldMask        =   $0001      ; mask for bold bitconst italicMask      =   $0002      ; mask for italics bitconst underlineMask   =   $0004      ; mask for underline bitconst outlineMask     =   $0008      ; mask for outline bitconst shadowMask      =   $0010      ; mask for shadow bit; DrawStringWidth flag valuesconst dswNoCondense    = $8000const dswCondense      = $0000const dswNoTruncate    = $0000const dswTruncLeft     = $2000const dswTruncCenter   = $4000const dswTruncRight    = $6000const dswPString       = $0000const dswCString       = $0004const dswWString       = $0008const dswStrIsPtr      = $0000const dswStrIsHandle   = $0001const dswStrIsResource = $0002; ColorTable flag valuesconst ctUse640Colors   = $8000const ctNoCtlNewRes    = $4000const ctIncludeMenuBar = $2000type polygon   polySize as integer   polyBBox as rect   ; polyPoints is a variable length array   polyPoints(10) as pointend typetype polyPtr as pointer to polygontype polyHandle as pointer to polyPtrtype cursor   cursorHeight as integer   cursorWidth as integer   ; cursorImage and cursorMask are variable length arrays, but they must be   ; the same size.   cursorImage(43) as byte   cursorMask(43) as byte   hotSpotY as integer   hotSpotX as integerend typetype cursorPtr as pointer to cursortype penState   psPnLoc as point   psPnSize as point   psPnMode as integer   psPnPat as pattern   psPnMask as maskend typetype penStatePtr as pointer to penStatetype bufDimRec   maxWidth as integer   textBufHeight as integer   textBufferWords as integer   fontWidth as integerend typetype fontGlobalsRecord   fgFontID as integer   fgStyle as integer   fgSize as integer   fgVersion as integer   fgWidMax as integer   fgFBRExtent as integerend typetype fontInfoRecord   ascent as integer   descent as integer   widMax as integer   leading as integerend typetype paintParamBlock   ptrToSourceLocInfo as locInfoPtr   ptrToDestLocInfo as locInfoPtr   ptrToSourceRect as rectPtr   ptrToDestPoint as pointPtr   mode as integer   maskHandle as handleend typetype paintParamPtr as pointer to paintParamBlocktype ROMFontRec   rfFamNum as integer   rfFamStyle as integer   rfSize as integer   rfFontHandle as fontHndl   rfNamePtr as pStringPtr   rfFBRExtent as integerend typetype ROMFontPtr as pointer to ROMFontRectype iconRec   iconType as integer   iconSize as integer   iconHeight as integer   iconWidth as integer   ; iconImage and iconMask are variable length arrays, but they must be   ; the same size.   iconImage(43) as byte   iconMask(43) as byteend typetype iconRecPtr as pointer to iconRectype QDProcsPtr as ptrTool $04, $01 SUB      QDBootInitTool $04, $02 SUB      QDStartup (%, %, %, %)Tool $04, $03 SUB      QDShutDownTool $04, $04 FUNCTION QDVersion as %Tool $04, $05 SUB      QDResetTool $04, $06 FUNCTION QDStatus as BooleanTool $04, $80 SUB      AddPt ((Point), (Point))Tool $04, $AC SUB      CharBounds (Char, (Rect))Tool $04, $A8 FUNCTION CharWidth (Char) as %Tool $04, $15 SUB      ClearScreen (%)Tool $04, $26 SUB      ClipRect ((Rect))Tool $04, $B9 SUB      ClosePictureTool $04, $C2 SUB      ClosePolyTool $04, $1A SUB      ClosePort (grafportPtr)Tool $04, $6E SUB      CloseRgn (rgnHandle)Tool $04, $69 SUB      CopyRgn (rgnHandle, rgnHandle)Tool $04, $AE SUB      CStringBounds (Univ, (Rect))Tool $04, $AA FUNCTION CStringWidth (Univ) as %Tool $04, $73 SUB      DiffRgn (rgnHandle, rgnHandle, rgnHandle)Tool $04, $68 SUB      DisposeRgn (rgnHandle)Tool $04, $A4 SUB      DrawChar (Char)Tool $04, $A6 SUB      DrawCString (Univ)Tool $04, $A5 SUB      DrawString (Univ)Tool $04, $A7 SUB      DrawText (Univ, %)Tool $04, $78 FUNCTION EmptyRgn (rgnHandle) as BooleanTool $04, $83 FUNCTION EqualPt ((Point), (Point)) as BooleanTool $04, $51 FUNCTION EqualRect (Rect, Rect) as BooleanTool $04, $77 FUNCTION EqualRgn (rgnHandle, rgnHandle) as BooleanTool $04, $64 SUB      EraseArc ((Rect), %, %)Tool $04, $5A SUB      EraseOval ((Rect))Tool $04, $BE SUB      ErasePoly (polyHandle)Tool $04, $55 SUB      EraseRect ((Rect))Tool $04, $7B SUB      EraseRgn (rgnHandle)Tool $04, $5F SUB      EraseRRect ((Rect), %, %)Tool $04, $66 SUB      FillArc ((Rect), %, %, (Pattern))Tool $04, $5C SUB      FillOval ((Rect), (Pattern))Tool $04, $C0 SUB      FillPoly (polyHandle, (Pattern))Tool $04, $57 SUB      FillRect ((Rect), (Pattern))Tool $04, $7D SUB      FillRgn (rgnHandle, (Pattern))Tool $04, $61 SUB      FillRRect ((Rect), %, %, (Pattern))Tool $04, $CC SUB      ForceBufDims (%, %, %)Tool $04, $62 SUB      FrameArc ((Rect), %, %)Tool $04, $58 SUB      FrameOval ((Rect))Tool $04, $BC SUB      FramePoly (polyHandle)Tool $04, $53 SUB      FrameRect ((Rect))Tool $04, $79 SUB      FrameRgn (rgnHandle)Tool $04, $5D SUB      FrameRRect ((Rect), %, %)Tool $04, $DA FUNCTION Get640Colors as patternPtrTool $04, $09 FUNCTION GetAddress (%) as ptrTool $04, $B1 FUNCTION GetArcRot as %Tool $04, $A3 FUNCTION GetBackColor as %Tool $04, $35 SUB      GetBackPat ((Pattern))Tool $04, $D5 FUNCTION GetCharExtra as fixedTool $04, $25 SUB      GetClip (rgnHandle)Tool $04, $C7 FUNCTION GetClipHandle as rgnHandleTool $04, $11 FUNCTION GetColorEntry (%, %) as %Tool $04, $0F SUB      GetColorTable (%, (colorTable))Tool $04, $8F FUNCTION GetCursorAdr as cursorPtrTool $04, $CF FUNCTION GetFGSize as %Tool $04, $95 FUNCTION GetFont as fontHndlTool $04, $99 FUNCTION GetFontFlags as %Tool $04, $97 SUB      GetFontGlobals ((fontGlobalsRecord))Tool $04, $D1 FUNCTION GetFontID as &Tool $04, $96 SUB      GetFontInfo ((fontInfoRecord))Tool $04, $D9 FUNCTION GetFontLore (Ptr, %) as %Tool $04, $A1 FUNCTION GetForeColor as %Tool $04, $45 FUNCTION GetGrafProcs as QDProcsPtrTool $04, $17 FUNCTION GetMasterSCB as %Tool $04, $29 SUB      GetPen ((Point))Tool $04, $33 SUB      GetPenMask ((Mask))Tool $04, $2F FUNCTION GetPenMode as %Tool $04, $31 SUB      GetPenPat ((Pattern))Tool $04, $2D SUB      GetPenSize ((Point))Tool $04, $2B SUB      GetPenState ((penState))Tool $04, $3F FUNCTION GetPicSave as handleTool $04, $88 FUNCTION GetPixel (%, %) as %Tool $04, $43 FUNCTION GetPolySave as handleTool $04, $1C FUNCTION GetPort as grafPortPtrTool $04, $1E SUB      GetPortLoc ((locInfo))Tool $04, $20 SUB      GetPortRect ((Rect))Tool $04, $41 FUNCTION GetRgnSave as handleTool $04, $D8 SUB      GetROMFont ((ROMFontRec))Tool $04, $13 FUNCTION GetSCB (%) as %Tool $04, $9F FUNCTION GetSpaceExtra as fixedTool $04, $0C FUNCTION GetStandardSCB as %Tool $04, $49 FUNCTION GetSysField as &Tool $04, $B3 FUNCTION GetSysFont as fontHndlTool $04, $9B FUNCTION GetTextFace as %Tool $04, $9D FUNCTION GetTextMode as %Tool $04, $D3 FUNCTION GetTextSize as %Tool $04, $47 FUNCTION GetUserField as &Tool $04, $C9 FUNCTION GetVisHandle as rgnHandleTool $04, $B5 SUB      GetVisRgn (rgnHandle)Tool $04, $85 SUB      GlobalToLocal ((Point))Tool $04, $0B SUB      GrafOffTool $04, $0A SUB      GrafOnTool $04, $90 SUB      HideCursorTool $04, $27 SUB      HidePenTool $04, $D7 SUB      InflateTextBuffer (%, %)Tool $04, $0D SUB      InitColorTable ((colorTable))Tool $04, $CA SUB      InitCursorTool $04, $19 SUB      InitPort (grafportPtr)Tool $04, $4C SUB      InsetRect ((Rect), %, %)Tool $04, $70 SUB      InsetRgn (rgnHandle, %, %)Tool $04, $65 SUB      InvertArc ((Rect), %, %)Tool $04, $5B SUB      InvertOval ((Rect))Tool $04, $BF SUB      InvertPoly ((polyHandle))Tool $04, $56 SUB      InvertRect ((Rect))Tool $04, $7C SUB      InvertRgn (rgnHandle)Tool $04, $60 SUB      InvertRRect ((Rect), %, %)Tool $04, $C3 SUB      KillPoly (polyHandle)Tool $04, $3D SUB      Line (%, %)Tool $04, $3C SUB      LineTo (%, %)Tool $04, $84 SUB      LocalToGlobal ((Point))Tool $04, $C5 SUB      MapPoly (polyHandle, (Rect), (Rect))Tool $04, $8A SUB      MapPt ((Point), (Rect), (Rect))Tool $04, $8B SUB      MapRect ((Rect), (Rect), (Rect))Tool $04, $8C SUB      MapRgn (rgnHandle, (Rect), (Rect))Tool $04, $3B SUB      Move (%, %)Tool $04, $22 SUB      MovePortTo (%, %)Tool $04, $3A SUB      MoveTo (%, %)Tool $04, $67 FUNCTION NewRgn as rgnHandleTool $04, $52 FUNCTION NotEmptyRect ((Rect)) as BooleanTool $04, $92 SUB      ObscureCursorTool $04, $C4 SUB      OffsetPoly (polyHandle, %, %)Tool $04, $4B SUB      OffsetRect ((Rect), %, %)Tool $04, $6F SUB      OffsetRgn (rgnHandle, %, %)Tool $04, $C1 FUNCTION OpenPoly as polyHandleTool $04, $18 SUB      OpenPort (grafportPtr)Tool $04, $6D SUB      OpenRgnTool $04, $63 SUB      PaintArc ((Rect), %, %)Tool $04, $59 SUB      PaintOval ((Rect))Tool $04, $7F SUB      PaintPixels ((paintParamBlock))Tool $04, $BD SUB      PaintPoly (polyHandle)Tool $04, $54 SUB      PaintRect ((Rect))Tool $04, $7A SUB      PaintRgn (rgnHandle)Tool $04, $5E SUB      PaintRRect ((Rect), %, %)Tool $04, $36 SUB      PenNormalTool $04, $D6 SUB      PPToPort (locInfoPtr, (Rect), %, %, %)Tool $04, $50 SUB      Pt2Rect ((Point), (Point), (Rect))Tool $04, $4F FUNCTION PtInRect ((Point), (Rect)) as BooleanTool $04, $75 FUNCTION PtInRgn ((Point), rgnHandle) as BooleanTool $04, $86 FUNCTION QDRandom as %Tool $04, $76 FUNCTION RectInRgn ((Rect), rgnHandle) as BooleanTool $04, $6C SUB      RectRgn (rgnHandle, (Rect))Tool $04, $CE SUB      RestoreBufDims ((bufDimRec))Tool $04, $CD SUB      SaveBufDims ((bufDimRec))Tool $04, $89 SUB      ScalePt ((Point), (Rect), (Rect))Tool $04, $7E SUB      ScrollRect ((Rect), %, %, rgnHandle)Tool $04, $4D FUNCTION SectRect ((Rect), (Rect), (Rect)) as BooleanTool $04, $71 SUB      SectRgn (rgnHandle, rgnHandle, rgnHandle)Tool $04, $DB SUB      Set640Colors (%)Tool $04, $DB SUB      Set640Color (%)Tool $04, $14 SUB      SetAllSCBs (%)Tool $04, $B0 SUB      SetArcRot (%)Tool $04, $A2 SUB      SetBackColor (%)Tool $04, $34 SUB      SetBackPat ((Pattern))Tool $04, $CB SUB      SetBufDims (%, %, %)Tool $04, $D4 SUB      SetCharExtra (fixed)Tool $04, $24 SUB      SetClip (handle)Tool $04, $C6 SUB      SetClipHandle (rgnHandle)Tool $04, $10 SUB      SetColorEntry (%, %, %)Tool $04, $0E SUB      SetColorTable (%, (colorTable))Tool $04, $8E SUB      SetCursor ((cursor))Tool $04, $6A SUB      SetEmptyRgn (rgnHandle)Tool $04, $94 SUB      SetFont (fontHndl)Tool $04, $98 SUB      SetFontFlags (%)Tool $04, $D0 SUB      SetFontID (fontID)Tool $04, $A0 SUB      SetForeColor (%)Tool $04, $44 SUB      SetGrafProcs (ptr)Tool $04, $B6 SUB      SetIntUse (Boolean)Tool $04, $16 SUB      SetMasterSCB (%)Tool $04, $23 SUB      SetOrigin (%, %)Tool $04, $32 SUB      SetPenMask ((Mask))Tool $04, $2E SUB      SetPenMode (%)Tool $04, $30 SUB      SetPenPat ((Pattern))Tool $04, $2C SUB      SetPenSize (%, %)Tool $04, $2A SUB      SetPenState ((penState))Tool $04, $3E SUB      SetPicSave (handle)Tool $04, $42 SUB      SetPolySave (handle)Tool $04, $1B SUB      SetPort (grafportPtr)Tool $04, $1D SUB      SetPortLoc ((locInfo))Tool $04, $1F SUB      SetPortRect ((Rect))Tool $04, $21 SUB      SetPortSize (%, %)Tool $04, $82 SUB      SetPt ((Point), %, %)Tool $04, $87 SUB      SetRandSeed (&)Tool $04, $4A SUB      SetRect ((Rect), %, %, %, %)Tool $04, $6B SUB      SetRectRgn (rgnHandle, %, %, %, %)Tool $04, $40 SUB      SetRgnSave (handle)Tool $04, $12 SUB      SetSCB (%, %)Tool $04, $38 SUB      SetSolidBackPat (%)Tool $04, $37 SUB      SetSolidPenPat (%)Tool $04, $9E SUB      SetSpaceExtra (fixed)Tool $04, $8D SUB      SetStdProcs (QDProcsPtr)Tool $04, $48 SUB      SetSysField (&)Tool $04, $B2 SUB      SetSysFont (fontHndl)Tool $04, $9A SUB      SetTextFace (%)Tool $04, $9C SUB      SetTextMode (%)Tool $04, $D2 SUB      SetTextSize (%)Tool $04, $46 SUB      SetUserField (&)Tool $04, $C8 SUB      SetVisHandle (rgnHandle)Tool $04, $B4 SUB      SetVisRgn (rgnHandle)Tool $04, $91 SUB      ShowCursorTool $04, $28 SUB      ShowPenTool $04, $39 SUB      SolidPattern (%, (Pattern))Tool $04, $AD SUB      StringBounds (Univ, (Rect))Tool $04, $A9 FUNCTION StringWidth (Univ) as %Tool $04, $81 SUB      SubPt ((Point), (Point))Tool $04, $AF SUB      TextBounds (Univ, %, (Rect))Tool $04, $AB FUNCTION TextWidth (Univ, %) as %Tool $04, $4E SUB      UnionRect ((Rect), (Rect), (Rect))Tool $04, $72 SUB      UnionRgn (rgnHandle, rgnHandle, rgnHandle)Tool $04, $74 SUB      XorRgn (rgnHandle, rgnHandle, rgnHandle);----------------------------------------------------------------;; Quick Draw Auxiliary;;----------------------------------------------------------------Tool $12, $01 SUB      QDAuxBootInitTool $12, $02 SUB      QDAuxStartupTool $12, $03 SUB      QDAuxShutDownTool $12, $04 FUNCTION QDAuxVersion as %Tool $12, $05 SUB      QDAuxResetTool $12, $06 FUNCTION QDAuxStatus as booleanTool $12, $0E SUB      CalcMask ((locInfo), (rect), (locInfo), (rect), %,                          patternPtr, univ)Tool $12, $09 SUB      CopyPixels ((locInfo), (locInfo), (rect), (rect),                          %, rgnHandle)Tool $12, $0B SUB      DrawIcon ((iconRec), %, %, %)Tool $04, $BA SUB      DrawPicture (handle, (rect))Tool $12, $0F FUNCTION GetSysIcon (%, %, &) as ptrTool $12, $13 SUB      IBeamCursorTool $04, $BB SUB      KillPicture (handle)Tool $04, $B7 FUNCTION OpenPicture ((rect)) as handleTool $04, $B8 SUB      PicComment (%, %, handle)Tool $12, $10 FUNCTION PixelMap2Rgn (locInfo, %, %) as rgnHandleTool $12, $0D SUB      SeedFill ((locInfo), (rect), (locInfo), (rect),                          %, %, %, patternPtr, univ)Tool $12, $0C SUB      SpecialRect ((rect), %, %)Tool $12, $0A SUB      WaitCursorTool $12, $14 SUB      WhooshRect (&, rect, rect); new in 6.0.1Tool $12, $15 SUB      DrawStringWidth (%, &, %)Tool $12, $16 FUNCTION UseColorTable (%, colorTablePtr, %) as handleTool $12, $17 SUB      RestoreColorTable (handle, %);----------------------------------------------------------------;; Resource Manager;;----------------------------------------------------------------; Resource Manager Error Codesconst resForkUsed     =   $1E01         ; resource fork not emptyconst resBadFormat    =   $1E02         ; format of resource fork is unknownconst resNoConverter  =   $1E03         ; no converter logged in for resourceconst resNoCurFile    =   $1E04         ; there are no current open resource filesconst resDupID        =   $1E05         ; ID is already usedconst resNotFound     =   $1E06         ; resource was not foundconst resFileNotFound =   $1E07         ; resource file not foundconst resBadAppID     =   $1E08         ; user ID not found, call ResourceStartupconst resNoUniqueID   =   $1E09         ; a unique ID was not foundconst resIndexRange   =   $1E0A         ; index is out of rangeconst resSysIsOpen    =   $1E0B         ; system file is already openconst resHasChanged   =   $1E0C         ; resource changed - operation can't be doneconst resDifConverter =   $1E0D         ; different converter logged for resrc type; Resource flag valuesconst resChanged      =   $0020         ; true if resource has changedconst resPreLoad      =   $0040         ; true if should load with OpenResourceFileconst resProtected    =   $0080         ; true if should never write to diskconst resAbsLoad      =   $0400         ; true if should load at absolute addressconst resConverter    =   $0800         ; true if requires converter for loads/writesconst resMemAttr      =   $C31C         ; mask for NewHandle for resource memory; Resource Type Numbersconst rIcon = $8001                     ; Icon typeconst rPicture = $8002                  ; Picture typeconst rControlList = $8003              ; Control list typeconst rControlTemplate = $8004          ; Control template typeconst rC1InputString = $8005            ; GS/OS class 1 input stringconst rPString = $8006                  ; Pascal string typeconst rStringList = $8007               ; String list typeconst rMenuBar = $8008                  ; MenuBar typeconst rMenu = $8009                     ; Menu templateconst rMenuItem = $800A                 ; Menu item definitionconst rTextForLETextBox2 = $800B        ; Data for LineEdit LETextBox2 callconst rCtlDefProc = $800C               ; Control definition procedure typeconst rCtlColorTbl = $800D              ; Color table for controlconst rWindParam1 = $800E               ; Parameters for NewWindow2 callconst rWindParam2 = $800F               ; Parameters for NewWindow2 callconst rWindColor = $8010                ; Window Manager color tableconst rTextBlock = $8011                ; Text blockconst rStyleBlock = $8012               ; TextEdit style informationconst rToolStartup = $8013              ; Tool set startup recordconst rResName = $8014                  ; Resource nameconst rAlertString = $8015              ; AlertWindow input dataconst rText = $8016                     ; Unformatted textconst rCodeResource = $8017const rCDEVCode = $8018const rCDEVFlags = $8019const rTwoRects = $801A                 ; Two rectanglesconst rFileType = $801B                 ; Filetype descriptors--see File Type Note $42const rListRef = $801C                  ; List memberconst rCString = $801D                  ; C stringconst rXCMD = $801Econst rXFCN = $801Fconst rErrorString = $8020              ; ErrorWindow input dataconst rKTransTable = $8021              ; Keystroke translation tableconst rWString = $8022                  ; not useful--duplicates $8005const rC1OutputString = $8023           ; GS/OS class 1 output stringconst rSoundSample = $8024const rTERuler = $8025                  ; TextEdit ruler informationconst rFSequence = $8026const rCursor = $8027                   ; Cursor resource typeconst rItemStruct = $8028               ; for 6.0 Menu Managerconst rVersion = $8029const rComment = $802Aconst rBundle = $802Bconst rFinderPath = $802Cconst rPaletteWindow = $802D            ; used by HyperCard IIgs 1.1const rTaggedStrings = $802Econst rPatternList = $802Fconst rRectList = $C001const rPrintRecord = $C002const rFont = $C003; System file IDconst sysFileID       =   $0001         ; file ID of system resource file; Map flag valuesconst systemMap       =   $0001const mapChanged      =   $0002         ; true if map has changedconst romMap          =   $0004         ; true if resource file is in ROMtype resID as longtype resType as integertype resAttr as integertype resHeaderRec   rFileVersion as long   rFileToMap as long   rFileMapSize as long   rFile(127) as byteend typetype freeBlockRec   blkOffset as long   blkSize as longend typetype resRefRec   rResType as resType   rResID as resID   rResOffset as long   rResAttr as resAttr   rResSize as long   rResHandle as handleend typetype resMapHandle as pointer to resMapPtrtype resMapPtr as pointer to resMapRectype resMapRec   mapNext as resMapHandle   mapFlag as integer   mapOffset as long   mapSize as long   mapToIndex as integer   mapFileNum as integer   mapID as integer   mapIndexSize as long   mapIndexUsed as long   mapFreeListSize as integer   mapFreeListUsed as integer   ; mapFreeList is a variable length array   mapFreeList(10) as freeBlockRecend typetype resourceSpec   resourceType as resType   resourceID as resIDend typetype resNameEntryPtr as pointer to resNameEntrytype resNameEntry   namedResID as resID   resName as pStringend typetype resNameRecordHandle as pointer to ResNameRecordPtrtype resNameRecordPtr as pointer to ResNameRecordtype resNameRecord   _version as integer   nameCount as long   ; resNameEntries is a variable length array   resNameEntries(10) as resNameEntryend typeTool $1E, $01 SUB      ResourceBootInitTool $1E, $02 SUB      ResourceStartup (%)Tool $1E, $03 SUB      ResourceShutdownTool $1E, $04 FUNCTION ResourceVersion as %Tool $1E, $05 SUB      ResourceResetTool $1E, $06 FUNCTION ResourceStatus as booleanTool $1E, $0C SUB      AddResource (handle, %, %, &)Tool $1E, $0B SUB      CloseResourceFile (%)Tool $1E, $22 FUNCTION CountResources (%) as &Tool $1E, $20 FUNCTION CountTypes as %Tool $1E, $09 SUB      CreateResourceFile (&, %, %, (gsosInString))Tool $1E, $18 SUB      DetachResource (%, &) Tool $1E, $14 FUNCTION GetCurResourceApp as %Tool $1E, $12 FUNCTION GetCurResourceFile as %Tool $1E, $23 FUNCTION GetIndResource (resType, &) as resIDTool $1E, $21 FUNCTION GetIndType (%) as resTypeTool $1E, $26 FUNCTION GetMapHandle (%) as resMapHandleTool $1E, $1F FUNCTION GetOpenFileRefNum (%) as %Tool $1E, $1B FUNCTION GetResourceAttr (resType, resID) as resAttrTool $1E, $1D FUNCTION GetResourceSize (resType, resID) as &Tool $1E, $15 FUNCTION HomeResourceFile (resType, resID) as %Tool $1E, $27 FUNCTION LoadAbsResource (&, &, resType, resID) as &Tool $1E, $0E FUNCTION LoadResource (resType, resID) as handleTool $1E, $29 FUNCTION LoadResource2 (%, ptr, resType, resID) as handleTool $1E, $10 SUB      MarkResourceChange (boolean, resType, resID)Tool $1E, $1E SUB      MatchResourceHandle ((resourceSpec), handle)Tool $1E, $0A FUNCTION OpenResourceFile (%, resMapPtr, (gsosInString)) as %Tool $1E, $17 SUB      ReleaseResource (%, resType, resID)Tool $1E, $0F SUB      RemoveResource (resType, resID)Tool $1E, $28 SUB      ResourceConverter (procPtr, resType, %)Tool $1E, $2A FUNCTION RMFindNamedResource (resType, pString, (%)) as &Tool $1E, $2B SUB      RMGetResourceName (resType, &, (pString))Tool $1E, $2D SUB      RMSetResourceName (resType, &, (pString))Tool $1E, $2C FUNCTION RMLoadNamedResource (resType, pString) as handleTool $1E, $13 SUB      SetCurResourceApp (%)Tool $1E, $11 SUB      SetCurResourceFile (%)Tool $1E, $1C SUB      SetResourceAttr (resAttr, resType, resID)Tool $1E, $25 FUNCTION SetResourceFileDepth (%) as %Tool $1E, $1A SUB      SetResourceID (resID, resType, resID)Tool $1E, $24 FUNCTION SetResourceLoad (%) as %Tool $1E, $19 FUNCTION UniqueResourceID (%, resType) as resIDTool $1E, $0D SUB      UpdateResourceFile (%)Tool $1E, $16 SUB      WriteResource (resType, resID); new in 6.0.1Tool $1E, $2E FUNCTION OpenResourceFileByID (%, %) as %Tool $1E, $2F SUB      CompactResourceFile (%, %);----------------------------------------------------------------;; Scheduler;;----------------------------------------------------------------Tool $07, $01 SUB      SchBootInitTool $07, $02 SUB      SchStartupTool $07, $03 SUB      SchShutDownTool $07, $04 FUNCTION SchVersion as %Tool $07, $05 SUB      SchResetTool $07, $06 FUNCTION SchStatus as booleanTool $07, $09 FUNCTION SchAddTask (procPtr) as %Tool $07, $0A SUB      SchFlush;----------------------------------------------------------------;; Scrap Manager;;----------------------------------------------------------------; Scrap typesconst textScrap   =   0const picScrap    =   1; ShowClipboard flag valuesconst cpOpenWindow  = $8000const cpCloseWindow = $4000type scrapBuffer   scrapType as integer   scrapSize as long   scrapHandle as handleend typeTool $16, $01 SUB      ScrapBootInitTool $16, $02 SUB      ScrapStartupTool $16, $03 SUB      ScrapShutDownTool $16, $04 FUNCTION ScrapVersion as %Tool $16, $05 SUB      ScrapResetTool $16, $06 FUNCTION ScrapStatus as booleanTool $16, $14 SUB      GetIndScrap (%, scrapBuffer)Tool $16, $0D SUB      GetScrap (handle, %)Tool $16, $12 FUNCTION GetScrapCount as %Tool $16, $0E FUNCTION GetScrapHandle (%) as handleTool $16, $10 FUNCTION GetScrapPath as pathPtrTool $16, $0F FUNCTION GetScrapSize (%) as &Tool $16, $13 FUNCTION GetScrapState as %Tool $16, $0A SUB      LoadScrapTool $16, $0C SUB      PutScrap (&, %, ptr)Tool $16, $11 SUB      SetScrapPath ((pathName))Tool $16, $09 SUB      UnloadScrapTool $16, $0B SUB      ZeroScrap; new in 6.0.1Tool $16, $15 FUNCTION ShowClipboard (%, rectPtr) as grafPortPtr;----------------------------------------------------------------;; Sound Manager;;----------------------------------------------------------------; Channel-generator-type wordconst ffSynthMode     =   $0001         ; free-form synthesizer modeconst noteSynthMode   =   $0002         ; note synthesizer mode; Stop-sound maskconst gen0off         =   $0001const gen1off         =   $0002const gen2off         =   $0004const gen3off         =   $0008const gen4off         =   $0010const gen5off         =   $0020const gen6off         =   $0040const gen7off         =   $0080const gen8off         =   $0100const gen9off         =   $0200const gen10off        =   $0400const gen11off        =   $0800const gen12off        =   $1000const gen13off        =   $2000const gen14off        =   $4000; Generator status wordconst genAvail        =   $0000const ffSynth         =   $0100const noteSynth       =   $0200const lastBlock       =   $8000type soundPBPtr as pointer to soundParamBlocktype soundParamBlock   waveStart as ptr                     ; starting address of wave   waveSize as integer                  ; waveform size in pages   freqOffset as integer                ; waveform playback frequency   DOCBuffer as integer                 ; DOC buffer starting address   DOCBufferSize as integer             ; DOC buffer size code   nextWAddr as soundPBPtr              ; ptr to next waveform block   volSetting as integer                ; DOC volume settingend typetype DOCRegParamBlk   oscGenType as integer   freqLow1 as byte                     ; 1st oscillator's parameters   freqHigh1 as byte   vol1 as byte   tablePtr1 as byte   control1 as byte   tableSize1 as byte   freqLow2 as byte                     ; 2nd oscillator's parameters   freqHigh2 as byte   vol2 as byte   tablePtr2 as byte   control2 as byte   tableSize2 as byteend typeTool $08, $01 SUB      SoundBootInitTool $08, $02 SUB      SoundStartUp (%)Tool $08, $03 SUB      SoundShutDownTool $08, $04 FUNCTION SoundVersion as %Tool $08, $05 SUB      SoundResetTool $08, $06 FUNCTION SoundToolStatus as booleanTool $08, $15 SUB      FFSetUpSound (%, (soundParamBlock))Tool $08, $11 FUNCTION FFGeneratorStatus (%) as %Tool $08, $14 FUNCTION FFSoundDoneStatus (%) as booleanTool $08, $10 FUNCTION FFSoundStatus as %Tool $08, $16 SUB      FFStartPlaying (%)Tool $08, $0E SUB      FFStartSound (%, (soundParamBlock))Tool $08, $0F SUB      FFStopSound (%)Tool $08, $0C FUNCTION GetSoundVolume (%) as %Tool $08, $0B FUNCTION GetTableAddress as &Tool $08, $18 SUB      ReadDOCReg ((DOCregParamBlk))Tool $08, $0A SUB      ReadRamBlock (ptr, %, %)Tool $08, $17 SUB      SetDOCReg ((DOCRegParamBlk))Tool $08, $12 SUB      SetSoundMIRQV (&)Tool $08, $0D SUB      SetSoundVolume (%, %)Tool $08, $13 FUNCTION SetUserSoundIRQV (&) as &Tool $08, $09 SUB      WriteRamBlock (ptr, %, %);----------------------------------------------------------------;; Standard File Operations;;----------------------------------------------------------------; Filter procedure results.const noDisplay       =   $0000         ; don't display fileconst noSelect        =   $0001         ; display file, but don't allow selectionconst displaySelect   =   $0002         ; display file and allow selectiontype typeList   numEntries as byte   ; fileType is a variable length array   fileType(10) as byteend typetype typeListPtr as pointer to typeListtype replyRecord   good as boolean   fileType as integer   auxFileType as integer   fileName(15) as char   fullPathName as pathNameend typetype replyRecord5_0   good as integer   fileType as integer   auxFileType as long   nameVerb as integer   nameRef as long   pathVerb as integer   pathRef as longend typetype typeRec   flags as integer   fileType as integer   auxType as longend typetype typeList5_0   numEntries as integer   ; fileAndAuxTypes is a variable length array   fileAndAuxTypes(9) as typeRecend typetype typeList5_0Ptr as pointer to typeList5_0type multiReplyRecord   good as integer   namesHandle as handleend typeTool $17, $01 SUB      SFBootInitTool $17, $02 SUB      SFStartup (%, %)Tool $17, $03 SUB      SFShutDownTool $17, $04 FUNCTION SFVersion as %Tool $17, $05 SUB      SFResetTool $17, $06 FUNCTION SFStatus as booleanTool $17, $0D SUB      SFAllCaps (boolean)Tool $17, $09 SUB      SFGetFile (%, %, univ, procPtr, typeListPtr,                          (replyRecord))Tool $17, $0E SUB      SFGetFile2 (%, %, %, univ, procPtr, (typeList5_0),                          (replyRecord5_0))Tool $17, $14 SUB      SFMultiGet2 (%, %, %, univ, procPtr, (typeList5_0),                          (multiReplyRecord))Tool $17, $0B SUB      SFPGetFile (%, %, %, univ, procPtr, typeListPtr,                          dialogTempPtr, procPtr, (replyRecord))Tool $17, $10 SUB      SFPGetFile2 (%, %, procPtr, %, univ, procPtr,                          (typeList5_0), (dialogTemplate), procPtr,                          (replyRecord5_0))Tool $17, $15 SUB      SFPMultiGet2 (%, %, procPtr, %, univ, procPtr,                          (typeList5_0), (dialogTemplate), procPtr,                          (multiReplyRecord))Tool $17, $0C SUB      SFPPutFile (%, %, univ, univ, %, dialogTempPtr,                          procPtr, (replyRecord))Tool $17, $11 SUB      SFPPutFile2 (%, %, procPtr, %, univ, %, univ,                          (dialogTemplate), procPtr, (replyRecord5_0))Tool $17, $0A SUB      SFPutFile (%, %, univ, %, (replyRecord))Tool $17, $0F SUB      SFPutFile2 (%, %, %, univ, %, univ, (replyRecord5_0))Tool $17, $13 SUB      SFReScan (procPtr, (typeList))Tool $17, $12 FUNCTION SFShowInvisible (boolean) as boolean;----------------------------------------------------------------;; Talking Tools;;----------------------------------------------------------------const Male = 0				; Gendersconst Female = 1type Gender as integerconst Bass = 0				; Tonesconst Treble = 1type Tone as integertype pString32(32) as char              ; the first byte is the number of characterstype pString32Ptr as pointer to pString32Tool $32, $02 SUB      MaleStartUpTool $32, $03 SUB      MaleShutDownTool $32, $04 FUNCTION MaleVersion as %Tool $32, $05 SUB      MaleResetTool $32, $06 FUNCTION MaleStatus as %Tool $32, $09 SUB      MaleSpeak (%, %, %, pString)Tool $33, $02 SUB      FemaleStartUpTool $33, $03 SUB      FemaleShutDownTool $33, $04 FUNCTION FemaleVersion as %Tool $33, $05 SUB      FemaleResetTool $33, $06 FUNCTION FemaleStatus as %Tool $33, $09 SUB      FemaleSpeak (%, %, %, pString)Tool $34, $02 SUB      ParseStartUp (%)Tool $34, $03 SUB      ParseShutDownTool $34, $04 FUNCTION ParseVersion as %Tool $34, $05 SUB      ParseResetTool $34, $06 FUNCTION ParseStatus as %Tool $34, $10 SUB      DictActivate (%)Tool $34, $0B SUB      DictDelete (pString32)Tool $34, $0C FUNCTION DictDump ((pString32), (pString32)) as pString32PtrTool $34, $0E SUB      DictInit (%)Tool $34, $0A SUB      DictInsert (pString32, pString32)Tool $34, $09 FUNCTION Parse (pString, pString, %) as %Tool $34, $0F SUB      Say (pString)Tool $34, $0D SUB      SetSayGlobals (Gender, Tone, %, %, %)Tool $35, $02 SUB      SpeechStartUpTool $35, $03 SUB      SpeechShutDownTool $35, $04 FUNCTION SpeechVersion as %Tool $35, $05 SUB      SpeechResetTool $35, $06 FUNCTION SpeechStatus as %;----------------------------------------------------------------;; Text Edit;;----------------------------------------------------------------; Text Edit error codesconst teAlreadyStarted    =   $2201const teNotStarted        =   $2202const teInvalidHandle     =   $2203const teInvalidVerb       =   $2204const teInvalidFlag       =   $2205const teInvalidPCount     =   $2206const teInvalidRect       =   $2207const teBufferOverflow    =   $2208const teInvalidLine       =   $2209const teInvalidCall       =   $220Aconst teInvalidParameter  =   $220Bconst teInvalidTextBox2   =   $220C; Text descriptors as Bits 0-2 of descriptor wordconst dataIsPString       =   $000const dataIsCString       =   $001const dataIsC1Input       =   $002const dataIsC1Output      =   $003const dataIsTextBox2      =   $004const dataIsTextBlock     =   $005; Text Edit reference descriptorsconst teRefIsPtr          =   $0000const teRefIsHandle       =   $0001const teRefIsResource     =   $0002const teRefIsNewHandle    =   $0003type teColorTablePtr as pointer to TEColorTabletype teColorTable   contentColor as integer   outlineColor as integer   hiliteForeColor as integer   hiliteBackColor as integer   vertColorDescriptor as integer   vertColorRef as long   horzColorDescriptor as integer   horzColorRef as long   growColorDescriptor as integer   growColorRef as longend typetype teTextBlock   nextHandle as long   prevHandle as long   textLength as long   flags as integer   reserved as integer   ; The following is a variable length array   theText(300) as charend typetype superItem   theLength as long   theData as longend typetype superBlock   nextHandle as long   prevHandle as long   textLength as long   reserved as long   ; The following is a variable length array   theItems(10) as superItemend typetype teHandle as ctlRecHndltype teRecPtr as ctlPtrtype teTabItem   tabKind as integer   tabData as integerend typetype teRuler   leftMargin as integer   leftIndent as integer   rightMargin as integer   just as integer   extraLS as integer   flags as integer   userData as long   tabType as integer   ; tabs is a variable length array   tabs(10) as teTabItem   tabTerminator as integerend typetype teStyleGroupHndl as pointer to teStyleGroupPtrtype teStyleGroupPtr as pointer to teStyleGrouptype teStyleGroup   count as integer   ; styles is a variable length array   styles(10) as teStyleend typetype teStyleItem   length as long   offset as longend typetype teFormatHndl as pointer to teFormatPtrtype teFormatPtr as pointer to teFormattype teFormat   _version as integer   rulerListLength as long   ; theRullerList is a variable length array   theRulerList(10) as teRuler   styleListLength as long   ; theStyleList is a variable length array   theStyleList(10) as teStyle   numberOfStyles as long   ; theStyles is a variable length array   theStyles(10) as teStyleItemend typetype teTextRef as longtype teStyleRef as longtype teInfoRec   charCount as long   lineCount as long   formatMemory as long   totalMemory as long   styleCount as long   rulerCount as longend typetype teHooks   charFilter as procPtr   wordWrap as procPtr   wordBreak as procPtr   drawText as procPtr   eraseText as procPtrend typeTool $22, $01 SUB      TEBootInitTool $22, $02 SUB      TEStartup (%, %)Tool $22, $03 SUB      TEShutDownTool $22, $04 FUNCTION TEVersion as %Tool $22, $05 SUB      TEResetTool $22, $06 FUNCTION TEStatus as booleanTool $22, $0F SUB      TEActivate (teHandle)Tool $22, $19 SUB      TEClear (teHandle)Tool $22, $11 SUB      TEClick ((eventRecord), teHandle)Tool $22, $17 SUB      TECopy (teHandle)Tool $22, $16 SUB      TECut (teHandle)Tool $22, $10 SUB      TEDeactivate (teHandle)Tool $22, $22 FUNCTION TEGetDefProc as procPtrTool $22, $23 SUB      TEGetRuler (%, univ, teHandle)Tool $22, $1C SUB      TEGetSelection (univ, univ, teHandle)Tool $22, $1E FUNCTION TEGetSelectionStyle ((teStyle ), TEStyleGroupHndl,                          teHandle) as %Tool $22, $0C FUNCTION TEGetText (%, univ, &, %, univ, teHandle) as &Tool $22, $0D SUB      TEGetTextInfo ((teInfoRec), %, teHandle)Tool $22, $0E SUB      TEIdle (teHandle)Tool $22, $1A SUB      TEInsert (%, teTextRef, &, %, teStyleRef, teHandle)Tool $22, $14 SUB      TEKey ((eventRecord), teHandle)Tool $22, $0A SUB      TEKill (teHandle)Tool $22, $09 FUNCTION TENew ((editTextControl)) as teHandleTool $22, $20 SUB      TEOffsetToPoint (&, ptr, ptr, teHandle)Tool $22, $13 FUNCTION TEPaintText (grafPortPtr, &, (rect), %, teHandle) as &Tool $22, $18 SUB      TEPaste (teHandle)Tool $22, $21 FUNCTION TEPointToOffset (&, &, teHandle) as &Tool $22, $1B SUB      TEReplace (%, teTextRef, &, %, teStyleRef, teHandle)Tool $22, $25 SUB      TEScroll (%, &, &, teHandle)Tool $22, $24 SUB      TESetRuler (%, univ, teHandle)Tool $22, $1D SUB      TESetSelection (&, &, teHandle)Tool $22, $0B SUB      TESetText (%, teTextRef, &, %, teStyleRef, teHandle)Tool $22, $1F SUB      TEStyleChange (%, (teStyle), teHandle)Tool $22, $12 SUB      TEUpdate (TEHandle);----------------------------------------------------------------;; Text Tools;;----------------------------------------------------------------; Echo flag valuesconst noEcho      =   $0000             ; don't echo chars to output deviceconst echo        =   $0001             ; echo chars to output device; Device numbersconst inputDev    =   $0000const outputDev   =   $0001const errorOutputDev = $0002; Device typesconst basicType   =   $0000const pascalType  =   $0001const ramBased    =   $0002Tool $0C, $01 SUB      TextBootInitTool $0C, $02 SUB      TextStartupTool $0C, $03 SUB      TextShutDownTool $0C, $04 FUNCTION TextVersion as %Tool $0C, $05 SUB      TextResetTool $0C, $06 FUNCTION TextStatus as booleanTool $0C, $16 SUB      CtlTextDev (%, %)Tool $0C, $1F SUB      ErrWriteBlock (stringPtr, %, %)Tool $0C, $19 SUB      ErrWriteChar (char)Tool $0C, $21 SUB      ErrWriteCString (univ)Tool $0C, $1B SUB      ErrWriteLine (univ)Tool $0C, $1D SUB      ErrWriteString (univ)Tool $0C, $0E FUNCTION GetErrGlobals as &; GetErrorDevice returns 1 integer and 1 long, so in cannot be called from BASIC; Tool $0C, $14 FUNCTION GetErrorDevice as (%, &) % &Tool $0C, $0C FUNCTION GetInGlobals as &; GetInputDevice returns 1 integer and 1 long, so in cannot be called from BASIC; Tool $0C, $12 FUNCTION GetInputDevice as (%, &) % &Tool $0C, $0D FUNCTION GetOutGlobals as &; GetOutputDevice returns 1 integer and 1 long, so in cannot be called from BASIC; Tool $0C, $13 FUNCTION GetOutputDevice as (%, &) % &Tool $0C, $15 SUB      InitTextDev (%)Tool $0C, $22 FUNCTION ReadChar (boolean) as charTool $0C, $24 FUNCTION ReadLine (ptr, %, char, boolean) as %Tool $0C, $0B SUB      SetErrGlobals (%, %)Tool $0C, $11 SUB      SetErrorDevice (%, &)Tool $0C, $09 SUB      SetInGlobals (%, %)Tool $0C, $0F SUB      SetInputDevice (%, &)Tool $0C, $0A SUB      SetOutGlobals (%, %)Tool $0C, $10 SUB      SetOutputDevice (%, &)Tool $0C, $17 SUB      StatusTextDev (%, %)Tool $0C, $23 SUB      TextReadBlock (ptr, %, %, boolean)Tool $0C, $1E SUB      TextWriteBlock (univ, %, %)Tool $0C, $18 SUB      WriteChar (char)Tool $0C, $20 SUB      WriteCString (univ)Tool $0C, $1A SUB      WriteLine (univ)Tool $0C, $1C SUB      WriteString (univ);----------------------------------------------------------------;; Tool Locator;;----------------------------------------------------------------; MessageCenter action codesconst addMessage  =   1                 ; add message to msg center dataconst getMessage  =   2                 ; return message from msg centerconst deleteMessage = 3                 ; delete message from msg center; Table of tools to load from the TOOLS directory in the SYSTEM foldertype toolSpec   toolNumber as integer   minVersion as integerend type; This is a variable length arraytype ttArray(10) as toolSpec    type toolTable   numToolsRequired as integer   tooltable as ttArrayend typetype startStopRecord   flags as integer   videoMode as integer   resFileID as integer   DPageHandle as handle   numTools as integer   toolArray as ttArrayend typetype startStopRecordPtr as pointer to startStopRecord      ; Function pointer tabletype FPT   count as long                        ; number of functions plus 1   addr1 as ptr                         ; ptr to BootInit routine minus 1   addr2 as ptr                         ; ptr to StartUp routine minus 1   addr3 as ptr                         ; ptr to ShutDown routine minus 1   addr4 as ptr                         ; ptr to Version routine minus 1   addr5 as ptr                         ; ptr to Reset routine minus 1   addr6 as ptr                         ; ptr to Status routine minus 1   addr7 as ptr                         ; ptr to reserved routine minus 1   addr8 as ptr                         ; ptr to reserved routine minus 1   addr9 as ptr                         ; ptr to 1st nonrequired routine minus 1   ; Other pointers to additional nonrequired routines follow   addr(10) as ptrend typetype messageRecord   blockLength as integer   IDstring as pString                  ; may be a max of 64 chars long   ; dataBlock is a variable length array   dataBlock(10) as byteend typeTool $01, $01 SUB      TLBootInitTool $01, $02 SUB      TLStartupTool $01, $03 SUB      TLShutDownTool $01, $04 FUNCTION TLVersion as integerTool $01, $05 SUB      TLResetTool $01, $06 FUNCTION TLStatus as booleanTool $01, $1B SUB      AcceptRequests (pString, %, ptr)Tool $01, $0B FUNCTION GetFuncPtr (%, %) as &Tool $01, $1A FUNCTION GetMsgHandle (%, univ) as &Tool $01, $09 FUNCTION GetTSPtr (%, %) as &Tool $01, $0C FUNCTION GetWAP (%, %) as &Tool $01, $0F SUB      LoadOneTool (%, %)Tool $01, $0E SUB      LoadTools ((toolTable))Tool $01, $17 FUNCTION MessageByName (boolean, (messageRecord)) as &Tool $01, $15 SUB      MessageCenter (%, %, handle)Tool $01, $14 SUB      RestoreTextState (handle)Tool $01, $13 FUNCTION SaveTextState as handleTool $01, $1C SUB      SendRequest (%, %, univ, univ, ptr)Tool $01, $16 SUB      SetDefaultTPTTool $01, $0A SUB      SetTSPtr (%, %, FPT)Tool $01, $0D SUB      SetWAP (%, %, ptr)Tool $01, $19 SUB      ShutDownTools (%, univ)Tool $01, $18 FUNCTION StartupTools (%, %, univ) as &Tool $01, $11 FUNCTION TLMountVolume (%, %, pStringPtr, pStringPtr, pStringPtr,                          pStringPtr) as %Tool $01, $12 FUNCTION TLTextMountVolume (pStringPtr, pStringPtr, pStringPtr,                          pStringPtr) as %Tool $01, $10 SUB      UnloadOneTool (%);----------------------------------------------------------------;; Window Manager;;----------------------------------------------------------------; constants for AlertWindow alertFlagsconst awCString = $0000const awPString = $0001const awPointer = $0000const awHandle = $0002const awResource = $0004const awTextFullWidth = $0008const awForceBeep = $0010const awButtonLayout = $0020const awNoDevScan = $0040const awNoDisposeRes = $0080const awWatchForDisk = $0100const awIconIsResource = $0200const awFullColor = $0400; Axis parametersconst wNoConstraint   =   $0000         ; no constraint on movementconst wHAxisOnly      =   $0001         ; horizontal axis onlyconst wVAxisOnly      =   $0002         ; vertical axis only; Desktop commandsconst fromDesk        =   $00           ; subtract region from desktopconst toDesk          =   $01           ; add region to desktopconst getDesktop      =   $02           ; get handle to desktop regionconst setDesktop      =   $03           ; set handle to desktop regionconst getDeskPat      =   $04           ; address of pattern or drawing rtnconst setDeskPat      =   $05           ; change addr of pattern or drawing rtnconst getVisDesktop   =   $06           ; get desktop rgn, minus visible windowsconst backgroundRgn   =   $07           ; for drawing directly on desktop; SendBehind valuesconst toBottom        =   -2            ; send window to bottomconst topMost         =   -1            ; make window frontmostconst bottomMost      =   $0000         ; make window bottom; Task mask valuesconst tmMenuKey           =   $00000001 ; handle menu key eventsconst tmUpdate            =   $00000002 ; handle update eventsconst tmFindW             =   $00000004 ; FindWindow calledconst tmMenuSel           =   $00000008 ; MenuSelect calledconst tmOpenNDA           =   $00000010 ; OpenNDA calledconst tmSysClick          =   $00000020 ; SystemClick calledconst tmDragW             =   $00000040 ; DragWindow calledconst tmContent           =   $00000080 ; activate window if click in content                                        ;  regionconst tmClose             =   $00000100 ; TrackGoAway calledconst tmZoom              =   $00000200 ; TrackZoom calledconst tmGrow              =   $00000400 ; GrowWindow calledconst tmScroll            =   $00000800 ; enable scrolling activate window                                        ;   on click in scroll barconst tmSpecial           =   $00001000 ; handle special menu eventsconst tmCRedraw           =   $00002000 ; redraw controlsconst tmInactive          =   $00004000 ; allow select of inactive menu itemsconst tmInfo              =   $00008000 ; don't activate inactive window on                                        ;   click in information barconst tmContentControls   =   $00010000 ; track controls in content regionconst tmControlKey        =   $00020000 ; send keystrokes to controls in                                        ;   active windowconst tmControlMenu       =   $00040000 ; send menu selections to controls in                                        ;   active windowconst tmMultiClick        =   $00080000 ; track double and triple clicksconst tmIdleEvents        =   $00100000 ; send null events to active control                                        ;   in active windowconst tmNoGetNextEvent    =   $00200000 ; don't call GetNextEvent; varCode values when defining custom windowsconst wDraw           =   $00           ; draw window frame commandconst wHit            =   $01           ; hit test commandconst wCalcRgns       =   $02           ; compute regions commandconst wNew            =   $03           ; initialization commandconst wDispose        =   $04           ; dispose command; wFrame valuesconst fHilited        =   $0001         ; window is highlightedconst fZoomed         =   $0002         ; window is zoomedconst fAllocated      =   $0004         ; window record was allocatedconst fCtlTie         =   $0008         ; state of ctls tied to window's stateconst fInfo           =   $0010         ; window has information barconst fVis            =   $0020         ; window is visibleconst fQContent       =   $0040         ; select window if mousedown in contentconst fMove           =   $0080         ; window can be draggedconst fZoom           =   $0100         ; window has a zoom boxconst fFlex           =   $0200         ; data height and width are flexibleconst fGrow           =   $0400         ; window has a size boxconst fBScroll        =   $0800         ; window has horizontal scroll barconst fRScroll        =   $1000         ; window has vertical scroll barconst fAlert          =   $2000         ; alert-type window frameconst fClose          =   $4000         ; window has close boxconst fTitle          =   $8000         ; window has title bar; Record sizesconst windSize        =   $145          ; size of window recordconst wmTaskRecSize   =   $16           ; size of task record; UpdateWindow flag valuesconst uwBackground    =   $8000const uwGSOSnotAvail  =   $4000   ; Document and alert window color tabletype wColorTbl   frameColor as integer   titleColor as integer   tBarColor as integer   growColor as integer   infoColor as integerend typetype wColorPtr as pointer to wColorTbl; Window recordtype windRecPtr as pointer to windRectype windRec   wNext as windRecPtr   wPort(169) as byte   wDefProc as long   wRefCon as long   wContDraw as procPtr   wReserved as long   wStructRgn as handle   wContRgn as handle   wUpdateRgn as handle   wCtls as handle   wFrameCtls as handle   wFrame as integer   ; Other fields may be added here, as defined by window's defProc.end typetype paramTableRef   p1Length as integer   p1Frame as integer   p1Title as long   p1RefCon as long   p1Zoom as rect   p1Color as long   p1YOrigin as integer   p1XOrigin as integer   p1DataH as integer   p1DataW as integer   p1MaxH as integer   p1MaxW as integer   p1VerScroll as integer   p1HorScroll as integer   p1VerPage as integer   p1HorPage as integer   p1InfoText as long   p1InfoHeight as integer   p1DefProc as procPtr   p1InfoDraw as procPtr   p1ContentDraw as procPtr   p1Position as rect   p1Plane as long   p1ControlList as long   p1InVerb as integerend type; original Window parameter listtype paramList   paramLength as integer   wFrameBits as integer   wTitle as pStringPtr   wRefCon as long   wZoom as rect   wColor as wColorPtr   wYOrigin as integer   wXOrigin as integer   wDataH as integer   wDataW as integer   wMaxH as integer   wMaxW as integer   wScrollVer as integer   wScrollHor as integer   wPageVer as integer   wPageHor as integer   wInfoRefCon as long   wInfoHeight as integer   wFrameDefProc as procPtr   wInfoDefProc as procPtr   wContDefProc as procPtr   wPosition as rect   wPlane as grafPortPtr   wStorage as windRecPtr               ; address of memory for window recordend typetype paramListPtr as pointer to paramListtype deskMessage   reserved as long   messType as integer                  ; must be 2   drawType as integer                  ; 0 = pattern 1 = picture   ; drawData = 32 bytes of pattern or 32,000 bytes of picture data   drawData(31) as integerend typeTool $0E, $01 SUB      WindBootInitTool $0E, $02 SUB      WindStartup (%)Tool $0E, $03 SUB      WindShutDownTool $0E, $04 FUNCTION WindVersion as %Tool $0E, $05 SUB      WindResetTool $0E, $06 FUNCTION WindStatus as booleanTool $0E, $59 FUNCTION AlertWindow (%, ptr, univ) as %Tool $0E, $1E SUB      BeginUpdate (grafPortPtr)Tool $0E, $24 SUB      BringToFront (grafPortPtr)Tool $0E, $0A FUNCTION CheckUpdate ((eventRecord)) as booleanTool $0E, $0B SUB      CloseWindow (grafPortPtr)Tool $0E, $60 FUNCTION CompileText (%, univ, univ, %) as handleTool $0E, $0C FUNCTION Desktop (%, &) as &Tool $0E, $64 FUNCTION DoModalWindow (eventRecord, procPtr, procPtr, procPtr,                          %) as &Tool $0E, $1A SUB      DragWindow (%, %, %, %, (rect), grafPortPtr)Tool $0E, $55 SUB      DrawInfoBar (grafPortPtr)Tool $0E, $5B SUB      EndFrameDrawingTool $0E, $51 SUB      EndInfoDrawingTool $0E, $1F SUB      EndUpdate (grafPortPtr)Tool $0E, $62 FUNCTION ErrorWindow (%, univ, %) as %Tool $0E, $69 FUNCTION FindCursorCtl ((ctlRecHndl), %, %, grafPortPtr) as %Tool $0E, $17 FUNCTION FindWindow ((grafPortPtr), %, %) as %Tool $0E, $15 FUNCTION FrontWindow as grafPortPtrTool $0E, $63 FUNCTION GetAuxWindInfo (grafPortPtr) as &Tool $0E, $48 FUNCTION GetContentDraw (grafPortPtr) as procPtrTool $0E, $3E FUNCTION GetContentOrigin (grafPortPtr) as &Tool $0E, $3E FUNCTION GetContentOrgin (grafPortPtr) as &Tool $0E, $2F FUNCTION GetContentRgn (grafPortPtr) as &Tool $0E, $40 FUNCTION GetDataSize (grafPortPtr) as &Tool $0E, $31 FUNCTION GetDefProc (grafPortPtr) as procPtrTool $0E, $52 FUNCTION GetFirstWindow as grafPortPtrTool $0E, $10 SUB      GetFrameColor ((wColorTbl), grafPortPtr)Tool $0E, $4A FUNCTION GetInfoDraw (grafPortPtr) as procPtrTool $0E, $35 FUNCTION GetInfoRefCon (grafPortPtr) as &Tool $0E, $42 FUNCTION GetMaxGrow (grafPortPtr) as &Tool $0E, $2A FUNCTION GetNextWindow (grafPortPtr) as grafPortPtrTool $0E, $46 FUNCTION GetPage (grafPortPtr) as &Tool $0E, $4F SUB      GetRectInfo ((rect), grafPortPtr)Tool $0E, $44 FUNCTION GetScroll (grafPortPtr) as &Tool $0E, $2E FUNCTION GetStructRgn (grafPortPtr) as rgnHandleTool $0E, $4C FUNCTION GetSysWFlag (grafPortPtr) as booleanTool $0E, $30 FUNCTION GetUpdateRgn (grafPortPtr) as rgnHandleTool $0E, $33 FUNCTION GetWControls (grafPortPtr) as ctlRecHndlTool $0E, $2C FUNCTION GetWFrame (grafPortPtr) as %Tool $0E, $58 FUNCTION GetWindowMgrGlobals as ptrTool $0E, $2B FUNCTION GetWKind (grafPortPtr) as %Tool $0E, $20 FUNCTION GetWMgrPort as grafPortPtrTool $0E, $29 FUNCTION GetWRefCon (grafPortPtr) as &Tool $0E, $0E FUNCTION GetWTitle (grafPortPtr) as pStringPtrTool $0E, $37 FUNCTION GetZoomRect (grafPortPtr) as rectPtrTool $0E, $1B FUNCTION GrowWindow (%, %, %, %, grafPortPtr) as &Tool $0E, $6B FUNCTION HandleDiskInsert (%, %) as &Tool $0E, $12 SUB      HideWindow (grafPortPtr)Tool $0E, $22 SUB      HiliteWindow (boolean, grafPortPtr)Tool $0E, $3A SUB      InvalRect ((rect))Tool $0E, $3B SUB      InvalRgn (rgnHandle)Tool $0E, $19 SUB      MoveWindow (%, %, grafPortPtr)Tool $0E, $65 FUNCTION MWGetCtlPart as %Tool $0E, $66 FUNCTION MWSetMenuProc (procPtr) as procPtrTool $0E, $68 SUB      MWSetUpEditMenuTool $0E, $67 SUB      MWStdDrawProcTool $0E, $09 FUNCTION NewWindow (paramList) as grafPortPtrTool $0E, $61 FUNCTION NewWindow2 (pStringPtr, univ, procPtr, procPtr, %, univ,                          %) as grafPortPtrTool $0E, $21 FUNCTION PinRect (%, %, (rect)) as &Tool $0E, $39 SUB      RefreshDesktop (rectPtr)Tool $0E, $6A SUB      ResizeInfoBar (%, %, grafPortPtr)Tool $0E, $5C SUB      ResizeWindow (boolean, (rect), grafPortPtr)Tool $0E, $11 SUB      SelectWindow (grafPortPtr)Tool $0E, $14 SUB      SendBehind (grafPortPtr, grafPortPtr)Tool $0E, $49 SUB      SetContentDraw (procPtr, grafPortPtr)Tool $0E, $3F SUB      SetContentOrigin (%, %, grafPortPtr)Tool $0E, $57 SUB      SetContentOrigin2 (%, %, %, grafPortPtr)Tool $0E, $41 SUB      SetDataSize (%, %, grafPortPtr)Tool $0E, $32 SUB      SetDefProc (procPtr, grafPortPtr)Tool $0E, $0F SUB      SetFrameColor (wColorPtr, grafPortPtr)Tool $0E, $16 SUB      SetInfoDraw (procPtr, grafPortPtr)Tool $0E, $36 SUB      SetInfoRefCon (&, grafPortPtr)Tool $0E, $43 SUB      SetMaxGrow (%, %, grafPortPtr)Tool $0E, $34 SUB      SetOriginMask (%, grafPortPtr)Tool $0E, $47 SUB      SetPage (%, %, grafPortPtr)Tool $0E, $45 SUB      SetScroll (%, %, grafPortPtr)Tool $0E, $4B SUB      SetSysWindow (grafPortPtr)Tool $0E, $2D SUB      SetWFrame (%, grafPortPtr)Tool $0E, $4E FUNCTION SetWindowIcons (handle) as handleTool $0E, $28 SUB      SetWRefCon (&, grafPortPtr)Tool $0E, $0D SUB      SetWTitle (univ, grafPortPtr)Tool $0E, $38 SUB      SetZoomRect ((rect), grafPortPtr)Tool $0E, $23 SUB      ShowHide (boolean, grafPortPtr)Tool $0E, $13 SUB      ShowWindow (grafPortPtr)Tool $0E, $1C SUB      SizeWindow (%, %, grafPortPtr)Tool $0E, $4D SUB      StartDrawing (grafPortPtr)Tool $0E, $5A SUB      StartFrameDrawing (grafPortPtr)Tool $0E, $50 SUB      StartInfoDrawing ((rect), grafPortPtr)Tool $0E, $1D FUNCTION TaskMaster (%, (eventRecord)) as %Tool $0E, $5F FUNCTION TaskMasterDA (%, (eventRecord)) as %Tool $0E, $18 FUNCTION TrackGoAway (%, %, grafPortPtr) as booleanTool $0E, $26 FUNCTION TrackZoom (%, %, grafPortPtr) as booleanTool $0E, $3C SUB      ValidRect ((rect))Tool $0E, $3D SUB      ValidRgn (rgnHandle)Tool $0E, $53 FUNCTION WindDragRect (procPtr, (pattern), %, %, (rect), (rect),                          (rect), %) as &Tool $0E, $25 SUB      WindNewResTool $0E, $56 FUNCTION WindowGlobal (%) as %Tool $0E, $27 SUB      ZoomWindow (grafPortPtr); new in 6.0.1Tool $0E, $6C SUB      UpdateWindow (%, grafPortPtr)