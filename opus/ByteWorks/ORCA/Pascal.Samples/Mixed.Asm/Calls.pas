{$keep 'Calls'}{---------------------------------------------------------------}{                                                               }{  Calls                                                        }{                                                               }{  This program gives you a quick look at the macros used to    }{  pass parameters to assembly language subroutines.  It shows  }{  a series of six functions, each of which takes a parameter   }{  which is one of the basic data types and returns the value   }{  unchanged.                                                   }{                                                               }{  The last example is a procedure that passes an array of      }{  three integers.  Arrays are passed by address, so the        }{  assembly language subroutine accesses the values using       }{  indirect addressing.  The array is sorted and returned.      }{  Since the array is changed, it is defined as a var parameter,}{  although its address would be passed even as a value         }{  parameter.                                                   }{                                                               }{  Mike Westerfield                                             }{                                                               }{  Copyright 1987                                               }{  Byte Works, Inc.                                             }{                                                               }{---------------------------------------------------------------}program Calls(output);type  array3 = array[1..3] of integer;var  a3: array3;  b: byte;  passed: boolean;  function BoolFunc(b: boolean): boolean; extern;  function ByteFunc(b: byte): byte; extern;  function CharFunc(c: char): char; extern;  function IntFunc(i: integer): integer; extern;  function RealFunc(r: real): real; extern;  function LongIntFunc(l: longint): longint; extern;  procedure Sort(var a: array3); extern;beginb := 4;passed := BoolFunc(true);if ByteFunc(b) <> 4 then  passed := false;if CharFunc('c') <> 'c' then  passed := false;if IntFunc(maxint) <> maxint then  passed := false;if RealFunc(1.0) <> 1.0 then  passed := false;if LongIntFunc(100000) <> 100000 then  passed := false;a3[1] := 10;a3[2] := 0;a3[3] := 5;Sort(a3);if (a3[1] > a3[2]) or (a3[2] > a3[3]) then  passed := false;if passed then  writeln('passed')else  writeln('failed');end.{$append 'calls.asm'}