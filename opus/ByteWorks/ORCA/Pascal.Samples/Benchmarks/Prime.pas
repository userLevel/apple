{$keep 'Prime'}{$optimize -1}{--------------------------------------------------------------}{                                                              }{  This is probably the most famous benchmark in use today.    }{  It tests the speed that a compiler can do logic and looping }{  operations.  While there are things that you can do to make }{  this benchmark run faster under ORCA/Pascal, we have not    }{  doctored it in any way - this is the original benchmark     }{  in its original form.                                       }{                                                              }{  To get the best performance from the desktop development    }{  environment, be sure to turn debugging off from the         }{  Compile Dialog.  Use the Compile command from the Run menu  }{  to get the compile dialog.                                  }{                                                              }{--------------------------------------------------------------}program prime(output);const   size = 8190;var   flags: array[0..size] of boolean;   i, prime, k, count, iter: integer;beginwriteln ('10 iterations');for iter := 1 to 10 do   begin   count := 0;   for i := 0 to size do      flags[i] := true;   for i := 0 to size do      if flags[i] then         begin         prime := i+i+3;{        writeln(prime);}         k := i+prime;         while k <= size do            begin            flags[k] := false;            k := k+prime;            end;         count := count+1;         end;   end;writeln(count, ' primes');end.