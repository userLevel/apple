{$keep 'Fib'}{$optimize -1}{---------------------------------------------------------------}{                                                               }{  Fibonacci                                                    }{                                                               }{  Recursively computes Fibonacci numbers to test the speed of  }{  procedure calls.                                             }{                                                               }{  To get the best performance from the desktop development     }{  environment, be sure to turn debugging off from the          }{  Compile Dialog.  Use the Compile command from the Run menu   }{  to get the compile dialog.                                   }{                                                               }{---------------------------------------------------------------}program Fibonacci(output);const  nTimes        =       10;             {# iterations}  number        =       23;             {largest Fib. number in [0..maxint]}var  i: integer;                           {loop variable}  value: integer;                       {result of call to Fibonacci}  function Fibonacci(x: integer): integer;  begin  if x > 2 then    Fibonacci := Fibonacci(x-1)+Fibonacci(x-2)  else    Fibonacci := 1;  end;beginwriteln(nTimes:1,' iterations:');for i := 1 to nTimes do  value := Fibonacci(number);writeln('Fibonacci(',number:1,') = ',value:1);end.