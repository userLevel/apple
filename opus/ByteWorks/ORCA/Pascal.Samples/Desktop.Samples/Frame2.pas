{$keep 'Frame2'}{---------------------------------------------------------------}{                                                               }{  Frame 2.0                                                    }{                                                               }{  This desktop program is about as simple as they get.  It     }{  brings up the Apple menu, a file menu with Quit and Close,   }{  and an edit menu with Undo, Cut, Copy, Paste and Clear.      }{  This is the minimum configuration for supporting desk        }{  accessories.  (All of these menus have pre-assigned numbers, }{  assigned by Apple.)                                          }{                                                               }{  The purpose of this rather simple program is to show how     }{  simple a desktop program can really be, and to give you a    }{  framework to use in developing your own programs.            }{                                                               }{  This is the second version of this program.  The first,      }{  Frame.Pas, uses only tool calls described in volumes 1 and 2 }{  of the toolbox reference manuals, and will work on any       }{  version of Apple's system disk release to date.  This        }{  version uses resources where possible, and requires version  }{  5.0 or later of Apple's system disk.                         }{                                                               }{  Mike Westerfield                                             }{                                                               }{  Copyright 1987-1991                                          }{  Byte Works, Inc.                                             }{                                                               }{---------------------------------------------------------------}program Frame(output);uses Common, QuickDrawII, WindowMgr, MenuMgr, DeskMgr;const   return        = 13;                  {return key code}    Apple_About   = 257;                 {Menu ID #s}   File_Quit     = 256;type   convert = record                     {for splitting 4 bytes to 2 bytes}      case boolean of         true : (long: longint);         false: (lsw,msw: integer);      end;var   done: boolean;                       {tells if the program should stop}   event: integer;                      {event #; returned by TaskMaster}   lastEvent: eventRecord;              {last event returned in event loop}   procedure InitMenus;   { Initialize the menu bar.                                   }    const      menuID = 1;                       {menu bar resource ID}   var      height: integer;                  {height of the largest menu}    begin {InitMenus}   SetSysBar(NewMenuBar2(2, menuID, nil)); {create the menu bar}   SetMenuBar(nil);   FixAppleMenu(1);                     {add desk accessories}   height := FixMenuBar;                {draw the completed menu bar}   DrawMenuBar;   end; {InitMenus}    procedure HandleMenu (menuNum: integer);   { Handle a menu selection.                                   }       procedure MenuAbout;      { Show About alert box.                                   }        const         alertID = 1;                   {alert resource ID}      var         button: integer;               {button pushed}        begin {MenuAbout}      button := AlertWindow(5, nil, alertID);      end; {MenuAbout}    begin {HandleMenu}   case menuNum of                      {go handle the menu}      apple_About: MenuAbout;      file_Quit:   done := true;      otherwise:   ;      end; {case}   HiliteMenu(false,convert(lastEvent.taskData).msw);   end; {HandleMenu}begin {Frame}StartDesk(640);InitMenus;                              {set up the menu bar}lastEvent.taskMask := $1FFF;            {let task master do most stuff}ShowCursor;                             {show the cursor}done := false;                          {main event loop}repeat   event := TaskMaster($076E, lastEvent);   case event of                        {handle the events we need to}      wInSpecial,      wInMenuBar: HandleMenu(convert(lastEvent.taskData).lsw);      otherwise: ;      end; {case}until done;EndDesk;end. {Frame}