{$keep 'Clock'}{$newDeskAcc Open Close Action Init 60 -1 '--Clock\H**'}program Clock (output);{****************************************************************  This desk accessory brings up a simple clock.  It can be*  used as an outline when creating more complex desk accessories.**  By Phil Montoya**  Copyright 1987-1990*  Byte Works, Inc.***************************************************************}uses   Common, QuickDrawII, EventMgr, WindowMgr, DeskMgr, MscToolSet;var   str1: pString;   clockActive: boolean;           { are we already active flag }   clockWinPtr: grafPortPtr;         { clock desk acc window pointer }   timeString: CString;            { string to hold time }   clockWin:   paramList;          { window parameter list }   aptr: grafPortPtr;   i, j: integer;procedure DrawTime; forward;{*****************************************************************  Open - opens the desk accessory if it is not already active**  Outputs:*       grafPortPtr - pointer to desk accessory window****************************************************************}function Open: grafPortPtr;begin  if not clockActive then begin    str1 := 'Clock';                    { assign the window title }    with clockWin do begin              { set window parameters }      paramLength := 78;      wFrameBits := $FFFFC0A0;      wTitle := @str1;      wRefCon := 0;      wZoom.v1 := 0;      wZoom.h1 := 0;      wZoom.v2 := 0;      wZoom.h2 := 0;      wColor := nil;      wYOrigin := 0;      wXOrigin := 0;      wDataH := 0;      wDataW := 0;      wMaxH := 0;      wMaxW := 0;      wScrollVer := 0;      wScrollHor := 0;      wPageVer := 0;      wPageHor := 0;      wInfoRefCon := 0;      wInfoHeight := 0;      wFrameDefProc := nil;      wInfoDefProc := nil;      wContDefProc := nil;      wPosition.v1 := 50;      wPosition.h1 := 50;      wPosition.v2 := 62;      wPosition.h2 := 200;      wPlane := pointer (-1);      wStorage := nil;      end;   clockWinPtr := NewWindow (clockWin);    { open a window }   SetSysWindow (clockWinPtr);             { set it to the system window }   clockActive := true;                    { we are now active }   Open := clockWinPtr;                    { return our window pointer }   end;end;{*****************************************************************  Close - closes the desk accessory if it is active****************************************************************}procedure Close;beginif clockActive then begin   CloseWindow (clockWinPtr);   clockActive := false;   end;end;{*****************************************************************  Action - Handle an action call****************************************************************}procedure Action (code: integer; param: longint);var   evPtr: eventRecPtr;   currPort: grafPortPtr;begincase code of   eventAction: begin       evPtr := pointer (param);       if evPtr^.eventWhat = updateEvt then begin           BeginUpdate (clockWinPtr);           DrawTime;           EndUpdate (clockWinPtr);           end;  { if updateEvt }       end;   runAction: begin       currPort := GetPort;       SetPort (pointer (clockWinPtr));       DrawTime;       SetPort (currPort);       end;   clearAction: code := 1;   otherwise: ;   end;  { case code of }end;  { Action }{*****************************************************************  Initialization****************************************************************}procedure Init (code: integer);begin   if code = 0 then begin       if clockActive then Close;       end   else       clockActive := false;end;{*****************************************************************  DrawTime - Reads the time and draws it in the window****************************************************************}procedure DrawTime;var   i: integer;begin   ReadAsciiTime (@timeString);   for i := 1 to 20 do       timeString[i] := chr (ord (timeString[i]) & $7F);   MoveTo (7, 10);   DrawCString (pointer (@timeString));end;{*****************************************************************  Body of program is empty for NDA's****************************************************************}beginend.