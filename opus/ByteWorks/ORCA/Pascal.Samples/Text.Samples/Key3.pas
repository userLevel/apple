{$keep 'Key3'}{---------------------------------------------------------------}{                                                               }{  Keyboard Handling                                            }{                                                               }{  This is the final incarnation of the keyboard polling        }{  sample.  See KEY.PAS for complete comments on what the       }{  program does and how it works.                               }{                                                               }{  In this version, we will write the two subroutines in        }{  assembly language.  While you could use separate compilation }{  to compile and assemble the two pieces separately, then      }{  link them, as in the last example, we will use chaining      }{  to avoid all of that.  Chaining is a feature of all          }{  languages fully installed in ORCA or APW that allows a       }{  single program to be written in more than one language       }{  without resorting to separate compilation.  Which method     }{  you prefer - chaining or separate compilation - depends      }{  on your own taste.                                           }{                                                               }{  To chain the two files together, we just place an append     }{  directive after the end of the program.  The rest is         }{  automatic.  To compile, assemble, link and execute, we can   }{  now use the familiar run command:                            }{                                                               }{       RUN KEY3.PAS                                            }{                                                               }{  Note: both the assembler and compiler must be properly       }{  installed for this to work.  The assembler is sold           }{  separately as either ORCA/M 1.0 for the Apple IIgs, or as    }{  APW.                                                         }{                                                               }{  By Mike Westerfield                                          }{                                                               }{  Copyright 1987-1990                                          }{  Byte Works, Inc.                                             }{                                                               }{---------------------------------------------------------------}program echokeys(output);var  ch: char;                             {character read}  function KeyPress: boolean; extern;  {check to see if a key has been pressed}  function ReadChar: char; extern;  {return the last character typed on the keyboard}beginrepeat  while not KeyPress do ;               {wait for a keypress}  ch := ReadChar;                       {write the character to the screen}  if ch = chr(13) then    writeln  else    write(ch);until ch = chr(0);end.{$append 'key3.asm'}