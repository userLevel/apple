{$keep 'Key'}{---------------------------------------------------------------}{                                                               }{  Keyboard Handling                                            }{                                                               }{  This program shows one way to access the keyboard directly   }{  from Pascal.  Keep in mind that the standard file input      }{  collects an entire line of characters before reporting the   }{  first.  This is necessarry to allow editing of the input     }{  line.  When using the desktop environment, you can get       }{  keypress events from the event manager.  This program shows  }{  how to detect a keypress as soon as it is hit.  It echoes    }{  keys until you type CONTROL-@ (ascii 0).                     }{                                                               }{  The program works by reading the keyboard (at $C000) until   }{  the value is negative, indicating that a key has been        }{  pressed.  It then stores a value (any value will do) in      }{  $C010 to indicate that the key has been read.  This makes    }{  the value at $C010 positive (bit 7 is clear).  The value of  }{  the key is then anded with $7F to remove the high bit.       }{                                                               }{  Checking to see when a key has been pressed is bundled into  }{  the function KeyPress.  Returning the key and clearing the   }{  strobe is done in ReadChar.                                  }{                                                               }{  See key2 for a version that splits the keyboard routines off }{  into a separately compilable module.                         }{                                                               }{  See key3 for a version that uses assembly language to do the }{  same thing.                                                  }{                                                               }{  By Mike Westerfield                                          }{                                                               }{  Copyright 1987-1990                                          }{  Byte Works, Inc.                                             }{                                                               }{---------------------------------------------------------------}program echokeys(output);var  ch: char;                             {character read}  function KeyPress: boolean;  {check to see if a key has been pressed}  var    keyboard: ^byte;  begin  keyboard := pointer($00C000);  KeyPress := keyboard^ & $80 <> 0;  end;  function ReadChar: char;  {return the last character typed on the keyboard}  {Note: returns a character whether or not one has been typed!}  var    keyboard, strobe: ^byte;  begin  keyboard := pointer($00C000);  strobe := pointer($00C010);  ReadChar := chr(keyboard^ & $7F);  strobe^ := 0;  end;beginrepeat  while not KeyPress do ;               {wait for a keypress}  ch := ReadChar;                       {write the character to the screen}  if ch = chr(13) then    writeln  else    write(ch);until ch = chr(0);end.