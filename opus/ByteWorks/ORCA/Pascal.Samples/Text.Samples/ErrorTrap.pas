{$keep 'ErrorTrap'}{$names+, rangecheck+}{--------------------------------------------------------------}{                                                              }{  Error Trap                                                  }{                                                              }{  You can trap run time errors with ORCA/Pascal.  There are   }{  several reasons to do this, including:                      }{                                                              }{       1.  Error messages take up space.  By replacing the    }{           system error handler with your own, you can cut    }{           out the space needed to store the run-time error   }{           messages.                                          }{       2.  You may want to trap some kinds of run-time        }{           errors, like file not found or out of memory,      }{           and handle them yourself.  If you do not, the      }{           error will cause the program to stop executing,    }{           which may not be the desired result.               }{                                                              }{  This program shows how to intercept and handle run-time     }{  errors.  This is done by placing a procedure in your        }{  program called SystemError.  The procedure has a single     }{  parameter, which is the error number.  This procedure       }{  replaces a procedure by the same name that is normally      }{  linked in from the libraries.                               }{                                                              }{  Note that if you do not want to handle a particular error,  }{  you can call the system error handlers from your program.   }{  See the sample program ERROREXIT.PAS for an example.        }{                                                              }{  By Mike Westerfield                                         }{                                                              }{  Copyright 1987-1990                                         }{  Byte Works, Inc.                                            }{                                                              }{--------------------------------------------------------------}program ErrorTrap(output);var  i: 1..10;  count: integer;                       {# errors trapped}  procedure SystemError(errorNumber: integer);  begin  count := count+1;  end;begincount := 0;                             {no errors so far!}i := 1;                                 {access i, sometimes with values       }while i <= 20 do                        { outside the allowed subrange         }  i := i+1;                                    {write the # of times the range is exceeded}writeln(count: 1,' errors trapped.');end.