{$keep 'CallGSOS'}{--------------------------------------------------------------}{                                                              }{  Call GS/OS                                                  }{                                                              }{  This simple program shows how to call GS/OS, the operating  }{  system of the Apple IIGS.  It creates a new file in the     }{  current directory, opens the file for output, writes some   }{  text to the file, and then closes it.                       }{                                                              }{  By Barbara Allred                                           }{                                                              }{  Copyright 1990                                              }{  Byte Works, Inc.                                            }{                                                              }{--------------------------------------------------------------}program CallGSOS (output);uses   Common, GSOS;var   createDCB:     createOSDCB;   openDCB:       openOSDCB;   writeDCB:      readWriteOSDCB;   closeDCB:      closeOSDCB;   buffer:        array [0..255] of byte;   newfile:       gsosInString;   fileContents:  packed array [1..255] of char;begin(* Initialize the file's contents *)FileContents  :=  'Now is the time for all good programmers to come to the aid of ';FileContents[64]  :=  chr(0);(* Initialize pathname of file to create *)with newfile do begin   size       :=  7;   theString  :=  'newfile';   end;(* Create a new file *)with createDCB do begin   pcount        :=  7;                        (* send GS/OS all 7 parameters *)   pathName      :=  gsosInStringPtr (@newfile); (* newfile in curr. directry *)   access        :=  $00E3;                    (* enable all access bits      *)   fileType      :=  $0004;                    (* ASCII text file             *)   auxType       :=  0;                        (* sequential file             *)   storageType   :=  1;                        (* seedling file               *)   dataEOF       :=  0;                        (* don't preallocate any bytes *)   resourceEOF   :=  0;                        (* not a MAC extended file     *)   end;CreateGS ( createDCB );if toolError <> 0 then begin   writeln ('Error when creating = ', ToolError);   Halt (ToolError);   end;(* Open newfile for output *)with openDCB do begin   pcount         :=  15;   pathName       :=  pointer (@newfile);   requestAccess  :=  $0002;                   (* open for output *)   optionList     :=  pointer (@'buffer');   end;OpenGS ( openDCB );if toolError <> 0 then begin   writeln ('Error when opening = ', ToolError);   Halt (ToolError);   end;(* Write to the file *)writeDCB.refNum  :=  openDCB.refNum;closeDCB.refNum  :=  openDCB.refNum;with writeDCB do begin   pcount         :=  5;   dataBuffer     :=  pointer (@fileContents);   requestCount   :=  64;   cachePriority  :=  0;                       (* don't cache *)   end;WriteGS ( writeDCB );if toolError <> 0 then begin   writeln ('Error when writing = ', ToolError);   Halt (ToolError);   end;(* Close the file *)closeDCB.pcount  :=  1;CloseGS ( closeDCB );end.