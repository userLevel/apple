/***************************************************************** Clock Desk Accessory****************************************************************/#pragma nda NDAOpen NDAClose NDAAction NDAInit 60 0x03FF "  Clock\\H**"#pragma lint -1#include <orca.h>#include <QuickDraw.h>#include <Window.h>#include <Desk.h>#include <Resources.h>#include <MiscTool.h>#include <Memory.h>#include <Loader.h>BOOLEAN clockActive;                    /* is the clock active? */GrafPortPtr clockWinPtr;                /* clock window pointer */unsigned rID;                           /* resource file ID */EventRecord myEvent;                    /* event record *//***************************************************************** OpenResourceFork** Open the resource fork for this DA** Returns: TRUE if successful, else FALSE****************************************************************/BOOLEAN OpenResourceFork (void){GSString255Ptr fPtr;                    /* GS/OS file name pointer */unsigned id;                            /* user ID for our executable chunk */id = SetHandleID(0, FindHandle((Pointer) OpenResourceFork));fPtr = (GSString255Ptr) LGetPathname2(id, 1);if (toolerror() == 0)   rID = OpenResourceFile(1, NULL, (Pointer) fPtr);return toolerror() == 0;}/***************************************************************** CloseResourceFork** Close the resource fork opened by OpenResourceFork****************************************************************/void CloseResourceFork (void){CloseResourceFile(rID);}/***************************************************************** NDAClose** Close entry point****************************************************************/void NDAClose (void){if (clockActive) {   CloseWindow(clockWinPtr);   clockActive = FALSE;   }}/***************************************************************** NDAInit** Init entry point** Parameters:*    code - 1 for tool start up time, 0 for tool shut down time****************************************************************/void NDAInit (int code){if (code == 1)   clockActive = FALSE;else   if (clockActive)      NDAClose();}/***************************************************************** NDAOpen** Open entry point** Returns: Pointer to the new NDA window****************************************************************/GrafPortPtr NDAOpen (void){#define wrNum 1001                      /* window resource number */GrafPortPtr wPtr;                       /* new window pointer */wPtr = NULL;if (!clockActive)   if (OpenResourceFork()) {      clockWinPtr =         NewWindow2("\p Clock ", 0, NULL, NULL, 0x02, wrNum, rWindParam1);      if (toolerror() == 0) {         SetSysWindow(clockWinPtr);         clockActive = TRUE;         wPtr = clockWinPtr;         }      CloseResourceFork();      }return wPtr;#undef wrNum}/***************************************************************** DrawTime** Draw the time in the window****************************************************************/void DrawTime (void){unsigned i;                             /* loop variable */char timeString[21];                    /* string to hold time */ReadAsciiTime(timeString);for (i = 0; i < 20; ++i)   timeString[i] = (char) (((unsigned) timeString[i]) & 0x7F);timeString[20] = (char) 0;MoveTo(7, 10);DrawCString(timeString);}/***************************************************************** NDAAction** Action entry point** Parameters:*    code - action code; tells why the call is being made*    sysEvent - if the code is eventAction, this is an event*       record; the parameter is unused for all other codes** Returns: TRUE if one of the five editing codes is handled,*    FALSE if not.****************************************************************/BOOLEAN NDAAction (int code, EventRecord *sysEvent){GrafPortPtr port;                       /* caller's GrafPort */int event;                              /* TaskMaster event code */switch (code) {   case eventAction:      myEvent.what = sysEvent->what;      myEvent.message = sysEvent->message;      myEvent.when = sysEvent->when;      myEvent.where = sysEvent->where;      myEvent.modifiers = sysEvent->modifiers;      event = TaskMasterDA(0, &myEvent);      break;   case runAction:      port = GetPort();      SetPort(clockWinPtr);      DrawTime();      SetPort(port);      break;   }return FALSE;}