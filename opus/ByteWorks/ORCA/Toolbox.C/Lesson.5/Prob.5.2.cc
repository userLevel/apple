/***************************************************************** Frame** This is a frame for other programs.  It contains a basic* event loop, a menu bar, an about box, and supports NDAs.****************************************************************/#pragma lint -1#include <orca.h>#include <Event.h>#include <Menu.h>#include <QuickDraw.h>#include <Window.h>#include <Desk.h>#include <Resources.h>#define appleMenu       1               /* Menu ID #s (also resource ID #s) */#define fileMenu        2#define editMenu        3#define appleAbout      257#define fileNew         260#define fileOpen        261#define fileClose       255#define fileQuit        256#define editUndo        250#define editCut         251#define editCopy        252#define editPaste       253#define editClear       254BOOLEAN done;                           /* are we done, yet? */EventRecord myEvent;                    /* event record */GrafPortPtr wPtr;                       /* most recently opened window *//***************************************************************** CloseDocument** Close a document** Parameters:*    wPtr - pointer to the window to close (may be NULL!)****************************************************************/void CloseDocument (GrafPortPtr grafPortPtr){if (wPtr != NULL)   CloseWindow(wPtr);}/***************************************************************** NewDocument** Open a new window, returning the pointer** Returns: Window's window pointer; NULL for an error****************************************************************/GrafPortPtr NewDocument (void){#define wrNum 1001                      /* window resource number */return NewWindow2("\pMyWindow", 0, NULL, NULL, 0x02, wrNum, rWindParam1);#undef wrNum}/***************************************************************** DoAbout** Draw our about box****************************************************************/void DoAbout (void){#define alertID 1                       /* alert string resource ID */AlertWindow(awCString+awResource, NULL, alertID);#undef alertID}/***************************************************************** HandleMenu** Initialize the menu bar.****************************************************************/void HandleMenu (void){int menuNum, menuItemNum;               /* menu number & menu item number */menuNum = myEvent.wmTaskData >> 16;menuItemNum = myEvent.wmTaskData;switch (menuItemNum) {                  /* go handle the menu */   case appleAbout:     DoAbout();                      break;   case fileNew:        wPtr = NewDocument();           break;   case fileOpen:       wPtr = NewDocument();           break;   case fileClose:      CloseDocument(FrontWindow());   break;   case fileQuit:       done = TRUE;                    break;   case editUndo:                                       break;   case editCut:                                        break;   case editCopy:                                       break;   case editPaste:                                      break;   case editClear:                                      break;   }HiliteMenu(FALSE, menuNum);             /* unhighlight the menu */}/***************************************************************** InitMenus** Initialize the menu bar.****************************************************************/void InitMenus (void){#define menuID 1                        /* menu bar resource ID */int height;                             /* height of the largest menu */MenuBarRecHndl menuBarHand;             /* for 'handling' the menu bar */                                        /* create the menu bar */menuBarHand = NewMenuBar2(refIsResource, menuID, NULL);SetSysBar(menuBarHand);SetMenuBar(NULL);FixAppleMenu(1);                        /* add desk accessories */height = FixMenuBar();                  /* draw the completed menu bar */DrawMenuBar();#undef menuID}/***************************************************************** Main program****************************************************************/int main (void){int event;                              /* event type returned by TaskMaster */startdesk(640);                         /* start the tools */InitMenus();                            /* set up the menu bar */InitCursor();                           /* start the arrow cursor */done = FALSE;                           /* main event loop */myEvent.wmTaskMask = 0x001F7FFF;        /* let TaskMaster do it all */while (!done) {   event = TaskMaster(everyEvent, &myEvent);   switch (event) {      case wInSpecial:      case wInMenuBar:          HandleMenu();                                break;      case wInGoAway:           CloseDocument((GrafPortPtr) myEvent.wmTaskData);                                break;      }   }enddesk();}