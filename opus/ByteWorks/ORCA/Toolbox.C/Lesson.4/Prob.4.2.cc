/***************************************************************** Alert Sampler** This program lets you pick any combination of alert sizes* and icons.****************************************************************/#pragma lint -1#include <orca.h>#include <Event.h>#include <Menu.h>#include <QuickDraw.h>#include <Window.h>#include <Desk.h>#define appleMenu       1               /* Menu ID #s (also resource ID #s) */#define fileMenu        2#define editMenu        3#define sizeMenu        4#define iconMenu        5#define appleAbout      257#define fileOpen        258#define fileClose       255#define fileQuit        256#define editUndo        250#define editCut         251#define editCopy        252#define editPaste       253#define editClear       254#define size1           261#define size2           262#define size3           263#define size4           264#define size5           265#define size6           266#define size7           267#define size8           268#define size9           269#define iconStop        271#define iconNote        272#define iconCaution     273#define iconDisk        274#define iconSwap        275BOOLEAN done;                           /* are we done, yet? */EventRecord myEvent;                    /* event record */int iconSize;                           /* icon size */int iconNumber;                         /* icon number *//***************************************************************** DoAbout** Draw our about box****************************************************************/void DoAbout (void){#define alertID 1                       /* alert string resource ID */AlertWindow(awCString+awResource, NULL, alertID);#undef alertID}/***************************************************************** SampleAlert** Draw an alert window** Parameters:*    size - size of the alert (1..9)*    icon - alert icon number (2..6)****************************************************************/void SampleAlert (int size, int icon){int button;                             /* button pushed */char alertString[] = "00/Sample alert of size 0, with icon 0./^#0";alertString[ 0] = (char) ('0'+size);alertString[ 1] = (char) ('0'+icon);alertString[24] = (char) ('0'+size);alertString[37] = (char) ('0'+icon);AlertWindow(awCString+awPointer, NULL, (Ref) alertString);}/***************************************************************** SetIconNumber** Set the icon number** Parameters:*    number - icon number (2..6)****************************************************************/void SetIconNumber (int number){CheckMItem(FALSE, iconStop + iconNumber - 2);iconNumber = number;CheckMItem(TRUE, iconStop + iconNumber - 2);}/***************************************************************** SetIconSize** Set the icon size** Parameters:*    size - icon size (1..9)****************************************************************/void SetIconSize (int size){CheckMItem(FALSE, size1 + iconSize - 1);iconSize = size;CheckMItem(TRUE, size1 + iconSize - 1);}/***************************************************************** HandleMenu** Initialize the menu bar.****************************************************************/void HandleMenu (void){int menuNum, menuItemNum;               /* menu number & menu item number */menuNum = myEvent.wmTaskData >> 16;menuItemNum = myEvent.wmTaskData;switch (menuItemNum) {                  /* go handle the menu */   case appleAbout:     DoAbout();                              break;   case fileOpen:       SampleAlert(iconSize, iconNumber);      break;   case fileClose:                                              break;   case fileQuit:       done = TRUE;                            break;   case editUndo:                                               break;   case editCut:                                                break;   case editCopy:                                               break;   case editPaste:                                              break;   case editClear:                                              break;   case size1:          SetIconSize(1);                         break;   case size2:          SetIconSize(2);                         break;   case size3:          SetIconSize(3);                         break;   case size4:          SetIconSize(4);                         break;   case size5:          SetIconSize(5);                         break;   case size6:          SetIconSize(6);                         break;   case size7:          SetIconSize(7);                         break;   case size8:          SetIconSize(8);                         break;   case size9:          SetIconSize(9);                         break;   case iconStop:       SetIconNumber(2);                       break;   case iconNote:       SetIconNumber(3);                       break;   case iconCaution:    SetIconNumber(4);                       break;   case iconDisk:       SetIconNumber(5);                       break;   case iconSwap:       SetIconNumber(6);                       break;   }HiliteMenu(FALSE, menuNum);             /* unhighlight the menu */}/***************************************************************** InitMenus** Initialize the menu bar.****************************************************************/void InitMenus (void){#define menuID 1                        /* menu bar resource ID */int height;                             /* height of the largest menu */MenuBarRecHndl menuBarHand;             /* for 'handling' the menu bar */                                        /* create the menu bar */menuBarHand = NewMenuBar2(refIsResource, menuID, NULL);SetSysBar(menuBarHand);SetMenuBar(NULL);FixAppleMenu(1);                        /* add desk accessories */height = FixMenuBar();                  /* draw the completed menu bar */DrawMenuBar();#undef menuID}/***************************************************************** Main program****************************************************************/int main (void){int event;                              /* event type returned by TaskMaster */startdesk(640);                         /* start the tools */InitMenus();                            /* set up the menu bar */InitCursor();                           /* start the arrow cursor */iconSize = 1;                           /* default icon size is 1 */iconNumber = 2;                         /* default icon number is 2 */done = FALSE;                           /* main event loop */myEvent.wmTaskMask = 0x001F7FFF;        /* let TaskMaster do it all */while (!done) {   event = TaskMaster(everyEvent, &myEvent);   switch (event) {      case wInSpecial:      case wInMenuBar:          HandleMenu();           break;      }   }enddesk();}