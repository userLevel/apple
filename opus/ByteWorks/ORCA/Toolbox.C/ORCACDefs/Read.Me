Prototyped Tool Header FilesCopyright 1992, Byte Works, Inc.===========================================================================Distribution------------These files contain prototyped headers for the Apple IIGS toolbox.  Thefiles are designed for use with ORCA/C.  You may use these headers withany version of ORCA/C, but the header files may not be distributed or usedwith any other compiler.Instalation-----------Copy these files to your ORCA/C header folder.  From the shell, you can dothis by:   1.  Setting the default prefix to the one containing these files.   2.  Using the command:        copy -c =.h 2/orcacdefsImplementation Notes--------------------These header files are based on the original Apple APW C hedaer files, andwith few exceptions are simply prototyped versions of those headers.  Theprototypes for the parameters are based on "Apple IIGS Toolbox Reference,"volumes 1 to 3, and "Programmer's Reference for System 6.0."  Wheneverpossible, the actual names for the parameters listed in the reference bookswere used in the header files.  With the exceptions mentioned below, thismeans that the actual type names were used unless they were in error.1.  I've tried to stick as close as possible to the reference mnauals, evenwhen it would be possible to be more exact.  For example, Pointer is usedthroughout the reference manuals when the parameter generally points to aspecific thing, and Handle is used in Text Edit rather than the more specificdefinition of a TextEdit record handle.  Using more restrictive types wouldcatch more errors, but it would also force more type casting -- for example,you could not use the same variable with Memory Manager and TextEdit handleswithout type casting.2.  There are a number of tool calls that return something other that 2 or 4bytes, and cannot be made without glue code.  Glue code is not included withthis release of the prototyped headers.3.  The way Ref is defined has been changed.  In the Apple header files, Refis defined as a typedef.  In these header files, Ref is a macro.  The macrois surrounded by conditional compilation directives, so you can change thetype of all Ref parameters by including an appropriate macro before the variousincludes, like this:        #define Ref PointerIn both header files, Ref is equivalent to Long.4.  All parameters that are references (i.e., that can be reource IDs,pointers, or handles, based on contexted) have been changed to Ref.  In theApple header files, some of these parameters were Long and some were Ref.5.  In MiscTool.h:  A new struct (HexTime) has been defined; it is asequence of 6 byte byte values with the names shown for the parameters ofWriteTimeHex on p. 14-15 of TBR #1.  The declaration of the WriteTimeHexcall has been changed from a subroutine requiring glue code to one thatuses a single parameter of type HexTime.6.  When two alternate forms of a call are shown in the reference manuals(for example, PosMouse, which is shown one way with two integer parametersand another way with a single point parameter) the "expanded" form isalways used.  The "expanded" form is the one that uses individual parameters,rather than structures.7.  The parameters for GetROMResource (p. 39-10 of TBR #3) andReleaseROMResource (p. 39-12 of TBR #3) are not documented, so the calls havebeen commented out.8.  The spellng of ReleaseROMResource has been changed to match TBR #3, eventhough the call has been commented out (see note 5).9.  The spelling "GetRomFont" has been added to the existing "GetROMFont."The later spelling is really correct, but the former is the spelling usedon p. 16-141 of TBR #2.10.  The documentation for the TextEdit tool set used Long for virtually alltypes.  TextEdit handle parameters were changed to Handle, pointers tospecific TextEdit structures were changed to the appropriate structurepointer, and other pointers were changed to type Pointer.