/***************************************************************** Control Explorer** Explores how controls work.****************************************************************/#pragma lint -1#include <orca.h>#include <Event.h>#include <Menu.h>#include <QuickDraw.h>#include <Window.h>#include <Desk.h>#include <Resources.h>#include <Locator.h>#include <MiscTool.h>#include <Control.h>#define appleMenu       1               /* Menu ID #s (also resource ID #s) */#define fileMenu        2#define editMenu        3#define appleAbout      257#define fileClose       255#define fileQuit        256#define editUndo        250#define editCut         251#define editCopy        252#define editPaste       253#define editClear       254#define moveLast        260#define moveNext        261#define ctlBeepOnce     2               /* control IDs */#define ctlBeepTwice    3#define ctlTitle        4#define ctlBoxRed       5#define ctlBoxGreen     6#define ctlBoxBlue      7#define ctlSound        8BOOLEAN done;                           /* are we done, yet? */EventRecord myEvent;                    /* event record */GrafPortPtr wPtr;                       /* window pointer */static Rect boxRect = {18,10,31,21};    /* color box rectangle */unsigned boxColor;                      /* box color */BOOLEAN soundOn;                        /* is the sound turned on? *//***************************************************************** DrawContents** Draw the contents of the active port****************************************************************/#pragma databank 1void DrawContents (void){PenNormal();DrawControls(GetPort());                /* draw the controls */SetSolidPenPat(boxColor);               /* draw the radio color box */PaintRect(&boxRect);SetSolidPenPat(0);FrameRect(&boxRect);}#pragma databank 0/***************************************************************** ForceUpdate** Force an update of our window** Parameters:*    r - rectangle to update****************************************************************/void ForceUpdate (Rect r){GrafPortPtr port;                       /* caller's GrafPort */port = GetPort();SetPort(wPtr);InvalRect(&r);SetPort(port);}/***************************************************************** InitWindows** Set up the program window****************************************************************/void InitWindow (void){#define wrNum 1001                      /* window resource number */wPtr = NewWindow2("\p ", 0, DrawContents, NULL, 0x02, wrNum, rWindParam1);#undef wrNum}/***************************************************************** DoAbout** Draw our about box****************************************************************/void DoAbout (void){#define alertID 1                       /* alert string resource ID */AlertWindow(awCString+awResource, NULL, alertID);#undef alertID}/***************************************************************** HandleMenu** Initialize the menu bar.****************************************************************/void HandleMenu (void){int menuNum, menuItemNum;               /* menu number & menu item number */menuNum = myEvent.wmTaskData >> 16;menuItemNum = myEvent.wmTaskData;switch (menuItemNum) {                  /* go handle the menu */   case appleAbout:     DoAbout();                                      break;   case fileClose:                                                      break;   case fileQuit:       done = TRUE;                                    break;   case editUndo:                                                       break;   case editCut:                                                        break;   case editCopy:                                                       break;   case editPaste:                                                      break;   case editClear:                                                      break;   }HiliteMenu(FALSE, menuNum);             /* unhighlight the menu */}/***************************************************************** InitMenus** Initialize the menu bar.****************************************************************/void InitMenus (void){#define menuID 1                        /* menu bar resource ID */int height;                             /* height of the largest menu */MenuBarRecHndl menuBarHand;             /* for 'handling' the menu bar */                                        /* create the menu bar */menuBarHand = NewMenuBar2(refIsResource, menuID, NULL);SetSysBar(menuBarHand);SetMenuBar(NULL);FixAppleMenu(1);                        /* add desk accessories */height = FixMenuBar();                  /* draw the completed menu bar */DrawMenuBar();#undef menuID}/***************************************************************** HandleControl** Take action after a control has been selected****************************************************************/void HandleControl (void){if ((myEvent.wmTaskData4 & 0xFFFF8000) == 0)   switch (myEvent.wmTaskData4) {      case ctlBeepOnce:         if (soundOn)            SysBeep();         break;      case ctlBeepTwice:         if (soundOn) {            SysBeep();            SysBeep();            }         break;      case ctlBoxRed:           boxColor = 7; ForceUpdate(boxRect);     break;      case ctlBoxGreen:         boxColor = 10; ForceUpdate(boxRect);    break;      case ctlBoxBlue:          boxColor = 4; ForceUpdate(boxRect);     break;      case ctlSound:            soundOn = !soundOn;                     break;      }}/***************************************************************** InitGLobals** Initialize the global variables****************************************************************/void InitGlobals (void){boxColor = 7;                           /* red box */soundOn = TRUE;                         /* the sound is on */}/***************************************************************** Main program****************************************************************/int main (void){int event;                              /* event type returned by TaskMaster */Ref startStopParm;                      /* tool start/shutdown parameter */startStopParm =                         /* start up the tools */   StartUpTools(userid(), 2, 1);if (toolerror() != 0)   SysFailMgr(toolerror(), "\pCould not start tools: ");InitMenus();                            /* set up the menu bar */InitGlobals();                          /* initialize our global variables */InitWindow();                           /* set up the program window */InitCursor();                           /* start the arrow cursor */done = FALSE;                           /* main event loop */myEvent.wmTaskMask = 0x001F7FFF;        /* let TaskMaster do it all */while (!done) {   event = TaskMaster(everyEvent, &myEvent);   switch (event) {      case wInSpecial:      case wInMenuBar:          HandleMenu();                   break;      case wInControl:          HandleControl();                break;      }   }ShutDownTools(1, startStopParm);        /* shut down the tools */}