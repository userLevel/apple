/***************************************************************** Color Explorer** Explore colors with this simple color intensity mixer****************************************************************/#pragma lint -1#include <orca.h>#include <Event.h>#include <Menu.h>#include <QuickDraw.h>#include <Window.h>#include <Desk.h>#include <Resources.h>#include <Locator.h>#include <MiscTool.h>#define appleMenu       1               /* Menu ID #s (also resource ID #s) */#define fileMenu        2#define editMenu        3#define appleAbout      257#define fileClose       255#define fileQuit        256#define editUndo        250#define editCut         251#define editCopy        252#define editPaste       253#define editClear       254#define red0            260#define red1            261#define red2            262#define red3            263#define red4            264#define red5            265#define red6            266#define red7            267#define red8            268#define red9            269#define red10           270#define red11           271#define red12           272#define red13           273#define red14           274#define red15           275#define blue0           280#define blue1           281#define blue2           282#define blue3           283#define blue4           284#define blue5           285#define blue6           286#define blue7           287#define blue8           288#define blue9           289#define blue10          290#define blue11          291#define blue12          292#define blue13          293#define blue14          294#define blue15          295#define green0          300#define green1          301#define green2          302#define green3          303#define green4          304#define green5          305#define green6          306#define green7          307#define green8          308#define green9          309#define green10         310#define green11         311#define green12         312#define green13         313#define green14         314#define green15         315BOOLEAN done;                           /* are we done, yet? */EventRecord myEvent;                    /* event record */GrafPortPtr wPtr;                       /* window pointer */unsigned redLevel, blueLevel, greenLevel; /* color levels *//***************************************************************** DrawContents** Draw the contents of the active port****************************************************************/#pragma databank 1void DrawContents (void){Rect r;                                 /* work rectangle */PenNormal();                            /* use a "normal" pen */SetSolidPenPat(1);                      /* draw the red rectangle */r.h1 = 5; r.h2 = 65;r.v1 = 5; r.v2 = 55;PaintRect(&r);SetSolidPenPat(2);                      /* draw the blue rectangle */r.v1 = 58; r.v2 = 108;PaintRect(&r);SetSolidPenPat(3);                      /* draw the green rectangle */r.v1 = 111; r.v2 = 161;PaintRect(&r);SetSolidPenPat(4);                      /* draw the combined rectangle */r.h1 = 70; r.h2 = 295;r.v1 = 5; r.v2 = 161;PaintRect(&r);}#pragma databank 0/***************************************************************** DoAbout** Draw our about box****************************************************************/void DoAbout (void){#define alertID 1                       /* alert string resource ID */AlertWindow(awCString+awResource, NULL, alertID);#undef alertID}/***************************************************************** ChangeColorTable** Changes colors 1, 2, 3, and 4 based on the color levels****************************************************************/void ChangeColorTable (void){ColorTable colors;                      /* color table */GetColorTable(0, colors);colors[1] = redLevel << 8;colors[2] = greenLevel << 4;colors[3] = blueLevel;colors[4] = colors[1] | colors[2] | colors[3];SetColorTable(0, colors);}/***************************************************************** SetLevel** Make a change to the color level** Parameters:*    colorLevel - pointer to color variable to update*    itemID - menu item ID for 0 color*    level - new color level****************************************************************/void SetLevel (unsigned *colorLevel, unsigned itemID, unsigned level){CheckMItem(FALSE, itemID+(*colorLevel));*colorLevel = level;CheckMItem(TRUE, itemID+(*colorLevel));ChangeColorTable();}/***************************************************************** HandleMenu** Initialize the menu bar.****************************************************************/void HandleMenu (void){int menuNum, menuItemNum;               /* menu number & menu item number */menuNum = myEvent.wmTaskData >> 16;menuItemNum = myEvent.wmTaskData;switch (menuItemNum) {                  /* go handle the menu */   case appleAbout:     DoAbout();                                      break;   case fileClose:                                                      break;   case fileQuit:       done = TRUE;                                    break;   case editUndo:                                                       break;   case editCut:                                                        break;   case editCopy:                                                       break;   case editPaste:                                                      break;   case editClear:                                                      break;   case red0:           SetLevel(&redLevel, red0, 0);                   break;   case red1:           SetLevel(&redLevel, red0, 1);                   break;   case red2:           SetLevel(&redLevel, red0, 2);                   break;   case red3:           SetLevel(&redLevel, red0, 3);                   break;   case red4:           SetLevel(&redLevel, red0, 4);                   break;   case red5:           SetLevel(&redLevel, red0, 5);                   break;   case red6:           SetLevel(&redLevel, red0, 6);                   break;   case red7:           SetLevel(&redLevel, red0, 7);                   break;   case red8:           SetLevel(&redLevel, red0, 8);                   break;   case red9:           SetLevel(&redLevel, red0, 9);                   break;   case red10:          SetLevel(&redLevel, red0, 10);                  break;   case red11:          SetLevel(&redLevel, red0, 11);                  break;   case red12:          SetLevel(&redLevel, red0, 12);                  break;   case red13:          SetLevel(&redLevel, red0, 13);                  break;   case red14:          SetLevel(&redLevel, red0, 14);                  break;   case red15:          SetLevel(&redLevel, red0, 15);                  break;   case blue0:          SetLevel(&blueLevel, blue0, 0);                 break;   case blue1:          SetLevel(&blueLevel, blue0, 1);                 break;   case blue2:          SetLevel(&blueLevel, blue0, 2);                 break;   case blue3:          SetLevel(&blueLevel, blue0, 3);                 break;   case blue4:          SetLevel(&blueLevel, blue0, 4);                 break;   case blue5:          SetLevel(&blueLevel, blue0, 5);                 break;   case blue6:          SetLevel(&blueLevel, blue0, 6);                 break;   case blue7:          SetLevel(&blueLevel, blue0, 7);                 break;   case blue8:          SetLevel(&blueLevel, blue0, 8);                 break;   case blue9:          SetLevel(&blueLevel, blue0, 9);                 break;   case blue10:         SetLevel(&blueLevel, blue0, 10);                break;   case blue11:         SetLevel(&blueLevel, blue0, 11);                break;   case blue12:         SetLevel(&blueLevel, blue0, 12);                break;   case blue13:         SetLevel(&blueLevel, blue0, 13);                break;   case blue14:         SetLevel(&blueLevel, blue0, 14);                break;   case blue15:         SetLevel(&blueLevel, blue0, 15);                break;   case green0:         SetLevel(&greenLevel, green0, 0);               break;   case green1:         SetLevel(&greenLevel, green0, 1);               break;   case green2:         SetLevel(&greenLevel, green0, 2);               break;   case green3:         SetLevel(&greenLevel, green0, 3);               break;   case green4:         SetLevel(&greenLevel, green0, 4);               break;   case green5:         SetLevel(&greenLevel, green0, 5);               break;   case green6:         SetLevel(&greenLevel, green0, 6);               break;   case green7:         SetLevel(&greenLevel, green0, 7);               break;   case green8:         SetLevel(&greenLevel, green0, 8);               break;   case green9:         SetLevel(&greenLevel, green0, 9);               break;   case green10:        SetLevel(&greenLevel, green0, 10);              break;   case green11:        SetLevel(&greenLevel, green0, 11);              break;   case green12:        SetLevel(&greenLevel, green0, 12);              break;   case green13:        SetLevel(&greenLevel, green0, 13);              break;   case green14:        SetLevel(&greenLevel, green0, 14);              break;   case green15:        SetLevel(&greenLevel, green0, 15);              break;   }HiliteMenu(FALSE, menuNum);             /* unhighlight the menu */}/***************************************************************** InitMenus** Initialize the menu bar.****************************************************************/void InitMenus (void){#define menuID 1                        /* menu bar resource ID */int height;                             /* height of the largest menu */MenuBarRecHndl menuBarHand;             /* for 'handling' the menu bar */                                        /* create the menu bar */menuBarHand = NewMenuBar2(refIsResource, menuID, NULL);SetSysBar(menuBarHand);SetMenuBar(NULL);FixAppleMenu(1);                        /* add desk accessories */height = FixMenuBar();                  /* draw the completed menu bar */DrawMenuBar();#undef menuID}/***************************************************************** InitWindows** Set up the program window****************************************************************/void InitWindow (void){#define wrNum 1001                      /* window resource number */wPtr = NewWindow2(" ", 0, DrawContents, NULL, 0x02, wrNum, rWindParam1);#undef wrNum}/***************************************************************** InitGlobals** Initialize the global variables****************************************************************/void InitGlobals (void){redLevel = 0;blueLevel = 0;greenLevel = 0;}/***************************************************************** Main program****************************************************************/int main (void){int event;                              /* event type returned by TaskMaster */Ref startStopParm;                      /* tool start/shutdown parameter */startStopParm =                         /* start up the tools */   StartUpTools(userid(), 2, 1);if (toolerror() != 0)   SysFailMgr(toolerror(), "\pCould not start tools: ");InitMenus();                            /* set up the menu bar */InitGlobals();                          /* initialize our global variables */ChangeColorTable();                     /* set up the initial color table */InitWindow();                           /* set up the program window */InitCursor();                           /* start the arrow cursor */done = FALSE;                           /* main event loop */myEvent.wmTaskMask = 0x001F7FFF;        /* let TaskMaster do it all */while (!done) {   event = TaskMaster(everyEvent, &myEvent);   switch (event) {      case wInSpecial:      case wInMenuBar:          HandleMenu();                                break;      }   }ShutDownTools(1, startStopParm);        /* shut down the tools */}