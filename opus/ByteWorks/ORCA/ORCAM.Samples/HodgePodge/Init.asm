*******************************************************************************							     **	  HodgePodge:  An example Apple IIGS Desktop application 	     **							     **	  Written in 65816 Assembler by the Apple IIGS Tools Team	     **  Modified by Ben Koning for "Programmer's Introduction to the Apple IIGS"  **							     **	      Copyright (c) 1986-87 by Apple Computer, Inc.		     **							     **   ----------------------------------------------------------------------   **							     **   Modified to use the ORCA/M macros and format by Byte Works, Inc.	     **	      Copyright (c) 1989 by Byte Works, Inc.			     **							     **     ASM65816 Code file "INIT.ASM" -- Toolbox startup/shutdown routines     **							     ************************************************************************************************************************************************** INIT.ASM** Contains the following global data**   myID 	    Variable holding userid of this program**   thisMode	    Variable holding mode used to start*		    QuickDraw*   origPort	    Variable holding pointer to original*		    port that QuickDraw has when started up.** Contains the following private data**   dpHandle	    Holds handle to memory that is used*		    as direct page for the tools.*   dpPtr	    Pointer to above memory.** Contains the following public procedures.**   function  StartupTools  (ModeToUse : SCB_type) : integer;**      Starts up the tools (initializing QuickDraw II with the specified*      mode) and initializes the global variables above.**   procedure  ShutdownTools;*      Shuts things down, undoing what was done above.** Uses the MountBootDisk dialog routine to have the user put the* system disk on line.** Uses the CheckToolError dialog routine to cause a system death* (bouncing apple) if the A register is nonzero.  The X register is* assumed to contain a "Where" value.** Change History** June	 1987  Steven E. Glass* August 1987  Ben Koning* August 1989  Barbara Allred** Modified to use the C calling convention so that can be used by* both C and Pascal.  (Input parameters are not removed from the stack.)************************************************************************************************************************************ StartupTools**     Input:	ModeToUse  -- $0080 for 640 mode*     Output:	ErrorCode  -- Error if nonzero*			      (NOTE: DIFFERENT FROM C AND PASCAL VERSIONS)** Calling Sequence:**	  pha		     space for output*	  ph2 #Mode	     mode to use for QD*	  jsl StartupTools*	  plx		     remove input parameter*	  pla		     get func result*	  bne MustQuit** This is a subroutine to load and startup all the tools* an application generally needs.  This routine also gets the* space in bank zero that the tools use for direct page.  The* only time an error code other than zero is returned is when* the boot disk is not on line and the user asks to cancel* rather than to put it on line.** Order of work:** 1)  Start**      Tool Locator, Memory Manager, Misc Tools*      QuickDraw, Event Manager** 2)  When these are running, the "One moment please" string is* displayed and LoadTools is called.** QuickDraw II and the Event Manager are started up first* because if the LoadTools call returns a VolNotFound error* we need to have the volume mounted.  This is done with* the TLMountVolume call which requires both QuickDraw II and* the Event Manager to be active.** 3)  Next I start up**      Window Manager, Control Manager,*      Menu Manager, LineEdit, Dialog Manager** 4)  After these are initialized, I setup and draw the* menu bar and display a message to the user before I* initialize the rest (Standard File, Font Manager,* QuickDraw Auxiliary and Print Manager).******************************************************************StartupTools   start	       using  InitData	       using  GlobalDataModeToUse      equ    $5ResultCode     equ    $7;; Direct Page use.  The following equates; describe how the direct pages are assigned; to the tools below.;dpForQuickDraw equ    $000		needs 3dpForEventMgr  equ    $300		needs 1dpForCtlMgr    equ    $400		needs 1dpForLineEdit  equ    $500		needs 1dpForMenuMgr   equ    $600		needs 1dpForStdFile   equ    $700		needs 1dpForFontMgr   equ    $800		needs 1dpForPrintMgr  equ    $900		needs 2totalDP	       equ    $B00;; Just in case this routine is called when the; data bank is set somewhere else we set it; right here.;	       phb	       phk	       plb;; Copy the input parameter into the global; data area and initialize the result code; assuming all is well.;	       lda    modeToUse,s	       sta    thisMode	       lda    #0	       sta    resultCode,s;; Start with TLStartup;	       _TLStartup		Tool Locator;; Initialize the memory manager.;	       ph2    #0	       _MMStartup	       ldx    #1	       jsr    CheckToolError	       pla	       sta    myID;; Initialize misc tools.;	       _MTStartup	       ldx    #2	       jsr    CheckToolError;; First get some memory for the direct page we need!;	       pha			space for handle	       pha	       ph4    #TotalDP	       ph2    myID	       ph2    #attrBank+attrPage+attrFixed+attrLocked	       ph4    #0	       _NewHandle	       ldx    #3	       jsr    CheckToolError;; Take the resulting handle (still on the stack); and dereference it, putting the pointer into; dpPtr.;	       phd			save current D	       tsc			turn stack into direct page	       tcd	       lda    [3]		deref the pointer	       sta    dpPtr		we know that high word is 0	       pld			restore direct page	       pla			put handle into storage	       sta    dpHandle	       pla	       sta    dpHandle+2;; Note that width on startup is 320 to allow doubling the; screen width when doing best printing.;	       lda    dpPtr	       clc	       adc    #dpForQuickDraw	       pha			QDII's direct page	       ph2    thisMode		master SCB for super hi-res graphics	       ph2    #640		max size of scan line in bytes	       ph2    myID	       _QDStartup	       ldx    #4	       jsr    CheckToolError	       	       ph4    #0	       _GetPort	       pl4    origPort 	       ldy    #640	       lda    thisMode	       cmp    #$80	       beq    OKmode	       ldy    #320OKmode	       anop	       sty    maxX	       lda    dpPtr	       clc	       adc    #dpForEventMgr	       pha	       ph2    #20		queue size	       ph2    #0 		x clamp low	       ph2    maxX		x clamp high	       ph2    #0 		y clamp low	       ph2    #200		y clamp high	       ph2    myID	       _EMStartup	       ldx    #5	       jsr    CheckToolError;; Put up a string telling user that something is; happening.;	       ph2    #20	       ph2    #20	       _MoveTo	       ph2    #0	       _SetBackColor	       ph2    #$F	       _SetForeColor	       ph4    #momentStr	       _DrawString	       _ShowCursor;; Make the LoadTools call;LoadAgain      GET_FILE_INFO paramBlock	       Try to find the directory	       bcc    OkToLoad			 */SYSTEM/TOOLS/.  Ok? Go load.	       jsr    MountBootDisk	       Else, display psuedo-dialog	       cmp    #1 		       Did they select "OK"?	       beq    LoadAgain		       Yes, so try it again.;					       Else, they selected "Cancel".	       sta    resultCode,s	       So return result code	       brl    GetOut			 and leave this routine.OkToLoad       ph4    #toolTable 	       Push address of tool table	       _LoadTools		       Attempt to load them (should	       bcc    ToolsLoaded		  work).  If ok, go on.	       ldx    #6 		       If error happened anyway,	       jsr    CheckToolError		  we'll just die here.;; The tools are loaded so start them up.;ToolsLoaded    anop	       _QDAuxStartup		QuickDraw Auxiliary	       _WaitCursor		With QDAux started we can show the;					  watch cursor	       ph2    myID		Window Manager	       _WindStartup	       ldx    #7	       jsr    CheckToolError	       	       ph4    #$0000		display desktop	       _RefreshDeskTop	       ph2    myID		Control Manager	       lda    dpPtr	       clc	       adc    #dpForCtlMgr	       pha	       _CtlStartup	       ldx    #8	       jsr    CheckToolError	       	       ph2    myID		LineEdit	       lda    dpPtr	       clc	       adc    #dpForLineEdit	       pha	       _LEStartup	       ldx    #9	       jsr    CheckToolError	       ph2    myID		Dialog Manager	       _DialogStartup	       ldx    #10	       jsr    CheckToolError	       	       ph2    myID		Menu Manager	       lda    dpPtr	       clc	       adc    #dpForMenuMgr	       pha	       _MenuStartup	       ldx    #11	       jsr    CheckToolError	       	       _DeskStartup		Desk Manager	       jsr    ShowPleaseWait	message for user	       ldx    #12	       jsr    CheckToolError	       ph2    myID		Standard File	       lda    dpPtr	       clc	       adc    #dpForStdFile	       pha	       _SFStartup	       ldx    #13	       jsr    CheckToolError	       ph2    #$8000		display file names in all caps	       _SFAllCaps 	       ph2    myID		Font Manager	       lda    dpPtr	       clc	       adc    #dpForFontMgr	       pha	       _FMStartup	       ldx    #14	       jsr    CheckToolError	       ph2    myID		Print Manager	       lda    dpPtr	       clc	       adc    #dpForPrintMgr	       pha	       _PMStartup	       ldx    #15	       jsr    CheckToolError	       jsr    HidePleaseWait	       _InitCursor		reset cursor to arrow cursor;; All is done.	We must clean up the stack and get out;GetOut	       anop	       plb			restore Data Bank Register	       rtl			all done.momentStr      dw     'One moment please...'maxX	       ds     2paramBlock     dc i4'PathName'		;ProDOS/16 Parameter block	       ds 2			;With pathname as input; rest of the	       ds 2			;fields will be set as output.	       ds  4	       ds 2	       ds 2	       ds 2	       ds 2	       ds 2	       ds  4pathName       dw     '*/SYSTEM/TOOLS'	       end******************************************************************* InitData*******************************************************************InitData       data	       copy   13/ainclude/E16.MemorydpHandle		 ds     4dpPtr	       ds     4toolTable      anopstartTable     anop	       dc     i'(endTable-startTable)/4'	       dc     i'1,$0101' 	Tool Locator	       dc     i'2,$0101' 	Memory Manager	       dc     i'3,$0101' 	Misc Tools	       dc     i'4,$0101' 	QuickDraw II	       dc     i'5,$0100' 	Desk Manager	       dc     i'6,$0100' 	Event Manager	       dc     i'14,$0103'	Window Manager	       dc     i'15,$0103'	Menu Manager	       dc     i'16,$0103'	Control Manager	       dc     i'18,$0100'	QuickDraw Aux	       dc     i'19,$0100'	Print Manager	       dc     i'20,$0100'	Line Edit	       dc     i'21,$0100'	Dialog Manager	       dc     i'22,$0102'	Scrap Manager	       dc     i'23,$0100'	Standard File	       dc     i'27,$0100'	Font Manager	       dc     i'28,$0100'	List ManagerendTable       anop	       end****************************************************************** ShutDownTools**   Inputs:   None**   Outputs:  None*** Shuts down every thing started up in InitTools******************************************************************ShutDownTools  start	       using InitData	       _DeskShutdown		shut this first so that other tools;					  are still around (close DA's)	       _FMShutDown	       _PMShutdown	       _SFShutDown	       _DialogShutdown	       _LEShutdown	       _MenuShutDown	       _WindShutDown	       _CtlShutdown		this is shut down after window mgr;					  because window mgr makes contol;					  manager calls at shutdown time.	       _EMShutDown	       _QDAuxShutdown	       _QDShutDown	       _MTShutdown	       ph4    dpHandle		get rid of handle for direct	       _DisposeHandle		  page	       ph2    myID	       _MMShutdown	       _TLShutdown	       rtl	       end	       append  Event.Asm