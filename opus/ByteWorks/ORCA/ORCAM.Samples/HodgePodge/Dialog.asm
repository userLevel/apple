*******************************************************************************							     **	  HodgePodge:  An example Apple IIGS Desktop application 	     **							     **	  Written in 65816 Assembler by the Apple IIGS Tools Team	     **  Modified by Ben Koning for "Programmer's Introduction to the Apple IIGS"  **							     **	      Copyright (c) 1986-87 by Apple Computer, Inc.		     **							     **   ----------------------------------------------------------------------   **							     **   Modified to use the ORCA/M macros and format by Byte Works, Inc.	     **	      Copyright (c) 1989 by Byte Works, Inc.			     **							     **   ASM65816 Code file "DIALOG.ASM" -- Various dialogs taking modal control  **							     ************************************************************************************************************************************************* ManyWindDialog -- Warning that too many windows are open.******************************************************************ManyWindDialog start	 using GlobalData	 pha	 ph4   #OurAlert	 ph4   #$0000	 _CautionAlert	 pla				get the item hit	 rtsOurAlert dc    i'30,120,80,520'		bounds rect	 dc    i'2374'			id	 dc    h'80'	 dc    h'80'	 dc    h'80'	 dc    h'80'	 dc    i4'item1'	 dc    i4'item2'	 dc    i4'0000'item1	 dc    i2'1'			id	 dc    i2'25,320,00,00'		bounds rect for button	 dc    i2'ButtonItem'		type	 dc    i4'But1'			item descreptor	 dc    i2'00'			item value	 dc    i2'0'			item flag	 dc    i4'0'			item coloritem2	 dc    i2'1348'			id	 dc    i2'11,72,200,640' 	bounds rect for message	 dc    i2'StatText+$8000'	type + disabled	 dc    i4'Msg'			item descreptor	 dc    i2'00'			item value	 dc    i2'0'			item flag	 dc    i4'0'			item colorBut1	 dw    'OK'Msg	 dw    'No more windows, please.'	 end****************************************************************** DoAboutItem** Brings up about box and waits until button press until* it puts it away. Shows how to build a dialog window by hand.******************************************************************DoAboutItem    start	 using globalData	 ph4   #0			get space for Icon	 ph4   #34*16+8			#lines * bytes/line + rect	 ph2   MyId	 ph2   #0			don't care where it goes	 ph4   #0	 _NewHandle	 pla	 plx	 bcc   ok	 lda   #$81			out of memory	 ldx   #1	 jmp   CheckDiskError		Go and tell user error message,;					  and use its RTS to exit from here.ok	 anop	 sta   AppleIconH	 stx   AppleIconH+2	 jsr   deref	 sta   0	 stx   2	 ldy   #0			move Icon to new spaceCopy640	 lda   AppleIcon640,y	 sta   [0],y	 iny	 iny	 cpy   #34*16+8	 bne   Copy640FixDBox	 ldx   #160+10	 lda   #640-160-10JoinRect stx   DRect+2	 sta   DRect+6	 ph4   #0			output	 ph4   #DRect	 ph2   #True			visible	 ph4   #0			refcon	 _NewModalDialog	 pla	 sta   MDialogPtr	 pla	 sta   MDialogPtr+2	 ph4   MDialogPtr	 ph2   #1	 ph4   #ButtonRect	 ph2   #ButtonItem	 ph4   #ButtonText	 ph2   #0	 ph2   #0	 ph4   #0	 _NewDItem	 ph4   MDialogPtr	 ph2   #2	 ph4   #AppleIconRect	 ph2   #IconItem+ItemDisable	 ph4   AppleIconH	 ph2   #0	 ph2   #0	 ph4   #0	 _NewDItem	 ph4   MDialogPtr	 ph2   #4	 ph4   #TextRect	 ph2   #LongStatText2+ItemDisable	 ph4   #startOfText	 ph2   #EndOfText-startOfText	 ph2   #0	 ph4   #0	 _NewDItemDoModal	 ph2   #0			result	 ph4   #0			no filterproc	 _ModalDialog	 pla				chuck the item hit	 ph4   MDialogPtr	 _CloseDialog	 ph4   AppleIconH	 _DisposeHandle	 rtsDRect	 dc    i'20,10,192,320-10'AppleIconH     ds 4AppleIconRect  dc i'135,20,0,0'AppleIcon640   anop	 dc    i'0,0,34,64'	 dc    h'00000000000000000000000000000000'	 DC    h'0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0'	 DC    h'0F0000000000000000000000000000F0'	 DC    h'0F0FFFFFFFFFFFFFFFFFFFFFFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFFFFFFF88FFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFFFFF8888FFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFFFF88888FFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFFF88888FFFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFF888888FFFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFF88888FFFFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFF8888FFFFFFFFF0F0'	 DC    h'0F0FFFFFF8888FFF88FF8888FFFFF0F0'	 DC    h'0F0FFFF88888888FFF88888888FFF0F0'	 DC    h'0F0FFF888888888888888888888FF0F0'	 DC    h'0F0FFeeeeeeeeeeeeeeeeeeeeFFFF0F0'	 DC    h'0F0FFeeeeeeeeeeeeeeeeeeeFFFFF0F0'	 DC    h'0F0FFeeeeeeeeeeeeeeeeeeFFFFFF0F0'	 DC    h'0F0FF666666666666666666FFFFFF0F0'	 DC    h'0F0FF666666666666666666FFFFFF0F0'	 DC    h'0F0FF666666666666666666FFFFFF0F0'	 DC    h'0F0FF4444444444444444444FFFFF0F0'	 DC    h'0F0FF44444444444444444444FFFF0F0'	 DC    h'0F0FFF444444444444444444444FF0F0'	 DC    h'0F0FFF555555555555555555555FF0F0'	 DC    h'0F0FFF555555555555555555555FF0F0'	 DC    h'0F0FFFF5555555555555555555FFF0F0'	 DC    h'0F0FFFF1111111111111111111FFF0F0'	 DC    h'0F0FFFFF11111111111111111FFFF0F0'	 DC    h'0F0FFFFFF111111FFF111111FFFFF0F0'	 DC    h'0F0FFFFFFF1111FFFFF1111FFFFFF0F0'	 DC    h'0F0FFFFFFFFFFFFFFFFFFFFFFFFFF0F0'	 DC    h'0F0000000000000000000000000000F0'	 DC    h'0FFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0'	 DC    h'00000000000000000000000000000000'TextRect dc    i2'4,10,135,280'startOfText anop	 dc    h'01',c'J',i'1'		 center 	 dc    h'01',c'S',i'$0008'	 Outline	 dc    c'HodgePodge',h'0D'	 dc    h'01',c'S',i'$0000'	 plain	 dc    c'A potpourri of routines that '	 dc    c'demonstrate many features of '	 dc    c'the Apple IIGS Tools.'	 dc    h'0D'	 dc    h'0D'	 dc    c'By Ben Koning and the Apple IIGS '	 dc    c'Tools Group:'	 dc    h'0D'	 dc    c'Eagle I. Berns, Art Cabral, Cheryl Ewy, '	 dc    c'Steven Glass, Suki Lee, '	 dc    c'Pete McDonald, Bennet Marks, Dan Oliver, '	 dc    c'Dan Hitchens, and Keith Rollin.'	 dc    h'0D'	 dc    c'Copyright Apple Computer, Inc., '	 dc    c'1986-87, All Rights Reserved',h'0D'	 dc    c'v1.0  '	 dc    c'&SysDate'EndOfText anopButtonRect dc  i'153,205,0,0'ButtonText dw  'OK'MDialogPtr ds  4	 end****************************************************************** ShowPleaseWait / HidePleaseWait** Brings up a window and immediately puts message in it* (without waiting for update event).******************************************************************ShowPleaseWait start	 using globalData	 ph4   #0			save the current port	 _GetPort	 pla	 sta   OrigPort	 pla	 sta   OrigPort+2	 ph4   #0	 ph4   #DialogTemplate	 _GetNewModalDialog	 pla	 sta   MsgWinPtr	 pla	 sta   MsgWinPtr+2	 ph4   MsgWinPtr 		begin the updating process	 _BeginUpdate	 ph4   MsgWinPtr	 _DrawDialog	 ph4   MsgWinPtr	 _EndUpdate	 rtsHidePleaseWait entry	 ph4   MsgWinPtr 		hide the window	 _CloseDialog	 ph4   OrigPort			restore the port	 _SetPort	 rtsMsgWinPtr ds   4DialogTemplate anop	 dc    i'30,120,80,520'		bounding box	 dc    i'True'			visible	 dc    i4'0'			refcon	 dc    i4'item1'	 dc    i4'0000'item1	 anop	 dc    i2'1348'			id	 dc    i2'19,70,200,640' 	bounds rect for text	 dc    i2'StatText'		type	 dc    i4'Msg'			item descreptor	 dc    i2'00'			item value	 dc    i2'0'			item flag	 dc    i4'0'			item colorMsg	 dw    'Please wait while we set things up.'	 end****************************************************************** MountBootDisk** This is a routine that is called whenever the application* needs to get something off the boot volume and the* boot volume is not on line.** This can occur when loading fonts, tools or drivers.******************************************************************MountBootDisk  start	 Set_Prefix  SetPrefixParams	 Get_Prefix  GetPrefixParams	 ph2   #0			Space for result	 ph2   #174			x pos	 ph2   #30			y pos	 ph4   #PromptStr		Prompt string	 ph4   #VolStr			Vol string	 ph4   #OKStr	 ph4   #CancelStr	 _TLMountVolume	 pla	 rtsPromptStr dw   'Please insert the disk'OKStr	  dw   'OK'CancelStr dw   'Shutdown'GetPrefixParams anop	 dc    i'2'		  parameter count	 dc    i'7'		  prefix number	 dc    i4'VolStr'	  pointer to buffer containing vol nameSetPrefixParams anop	 dc    i'2'	 dc    i'7'	 dc    i4'BootStr'VolStr	 ds    18BootStr	 dc    i'2'	 dc    c'*/'	 end****************************************************************** CheckToolError** Cause system death if A register is nonzero and carry set;* otherwise, it just returns.** Error code to make part of string is in A register.* "Where" number to make part of string is in X register.******************************************************************CheckToolError start	 bcs   RealDeath 		If a tool error didn't happen	 rts				  then just returnRealDeath pha				Save error code for now	 pea   0 			Convert the "Where" debug trace	 pea   0 			  number to a four-digit ASCII hex	 phx				  string.	 _Hexit	 pla	 sta   codes	 pla	 sta   codes+2	 pla				Restore error code	 pha				Exit to system failure handler	 ph4   #DeathMsg 		  (bouncing apple)	 _SysFailMgrDeathMsg anop	 dc    i1'EndMsg-startMsg'startMsg dc    c' At $'Codes	 ds    4	 dc    c'Could not handle error $'EndMsg	 anop	 end****************************************************************** CheckDiskError -- Display stop alert dialog if ProDOS error happened.*	      We sniff the A register to see if an error occurred,*	      and assume the X register to be loaded with a*	      "where" value, used to locate bugs.******************************************************************CheckDiskError start	 using GlobalData	 phx				Save the Where value	 pha				Save the error number	 _InitCursor			Set pointer--looks better than watch	 pla				Restore the error number	 pha				Convert the error message	 ph4   #OurErrStr		  to an ASCII string 4 chars long	 ph2 #4	 _Int2Hex	 pla				Do this just for clarity (note that	 pha				  Where value is already on stack!)	 ph4   #OurWhereStr		Convert the Where value	 ph2   #2			  to an ASCII string 2 chars long	 _Int2Hex	 pha				Space for result	 ph4   #OurAlert 		Pointer to template	 ph4   #$0000			Standard Filter procedure	 _StopAlert			Draw box and wait for mouse OK press	 pla				Get the item hit (the OK button)	 sec				Set the error flag	 rts				Return to callerOurAlert dc    i'30,120,80,520'		bounds rect	 dc    i'6666'			id	 dc    h'80'	 dc    h'80'	 dc    h'80'	 dc    h'80'	 dc    i4'OKButton'	 dc    i4'Message'	 dc    i4'0000'OKButton dc    i2'1'			id	 dc    i2'25,320,00,00'		bounds rect for button	 dc    i2'ButtonItem'		type	 dc    i4'OKName'		item descreptor	 dc    i2'00'			item value	 dc    i2'0'			item flag	 dc    i4'0'			item colorMessage	 dc    i2'1348'			id	 dc    i2'11,72,200,640' 	bounds rect for static text	 dc    i2'StatText+$8000'	type + disable flagErrMsgPtr dc   i4'Msg'			item descreptor	 dc    i2'00'			item value	 dc    i2'0'			item flag	 dc    i4'0'			item colorOKName	 dw    'OK'Msg	    dc i1'EndMsg-startMsg'startMsg    dc c'Disk error $'OurErrStr   ds 4	    dc c' occurred at $'OurWhereStr ds 2	    dc c'.'	    dc h'0D'EndMsg	    anop	    end	    append  Font.Asm