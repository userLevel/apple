	keep	CLine	mcopy CLine.mac******************************************************************  CLine - Echo command line arguments, shell identifier, user ID**  This program shows you the basics of how to write a program*  that runs from the shell environment.  Shell programs can*  tell which shell they are launched from, what was typed*  from the command line, and what their user ID is.  Shell*  programs can also return an error code to the shell, which*  can then be used by EXEC files to test for an error*  condition.**  Inputs:*	A - User ID*	X-Y - pointer to shell identifier and command line**  Outputs:*	A - error code; set to 0******************************************************************CLine	start;;  Direct page variables;cl	equ	0	command line pointer	phk		set up our data bank	plb	sta	userID	save user ID	sty	cl	save command line pointer	stx	cl+2	jsl	SystemEnvironmentInit	start the I/O system	jsl	SysIOStartup	lda	cl	if command line pointer is null then	ora	cl+2	bne	lb1	puts	#'Null command line pointer',cr=t   tell the user	brl	lb5lb1	anop		else	puts	#'Shell ID: '	  write the shell identifier	ldy	#0	ldx	#8lb2	lda	[cl],Y	phx	phy	sta	ch	putc	ch	ply	plx	iny	dbne	X,lb2	putcr	puts	#'Command line: '	  write the command line	ldy	#8lb3	lda	[cl],Y	and	#$00FF	beq	lb4	phy	sta	ch	putc	ch	ply	iny	bra	lb3lb4	putcrlb5	anop		endif	puts	#'User ID: '	write the user ID	put2	userID,cr=t	jsl	SysIOShutDown	shut down the I/O system	lda	#0	return with no error	quit	qtDCB	(from ORCA, you could also use RTL);;  Local variables;qtDCB	anop		quit DCB	dc	a4'flags'flags	dc	i'0'ch	ds	2	temp characteruserID	ds	2	User ID number	end