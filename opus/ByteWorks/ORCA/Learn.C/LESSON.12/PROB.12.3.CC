/* Hangman                                              *//*                                                      *//* This program plays the game of Hangman.  When the    *//* game starts, you are given a word to guess.  The     *//* program displays one dash for each letter in the     *//* word.  You guess a letter.  If the letter is in the  *//* word, the computer prints the word with all letters  *//* you have guessed correctly shown in their correct    *//* positions.  If you do not guess the word, you move   *//* one step closer to being hung.  After six wrong      *//* guesses, you loose.                                  */#include <stdio.h>#include <string.h>#include <stdlib.h>#include <texttool.h>#define MAXWORDS 10             /* possible words */#define MAXCHARS 8              /* number of characters in each word */char words[MAXWORDS][MAXCHARS+1]; /* word array */void FillArray (void)/* Fill the word array.                               *//*                                                    *//* Variables:                                         *//*    words - word array                              */{strcpy(words[0], "computer");strcpy(words[1], "whale");strcpy(words[2], "megabyte");strcpy(words[3], "modem");strcpy(words[4], "chip");strcpy(words[5], "online");strcpy(words[6], "disk");strcpy(words[7], "monitor");strcpy(words[8], "window");strcpy(words[9], "keyboard");}void GetSeed (void)/* Initialize the random number generator             */{int val;                        /* seed value */printf("Please enter a random number seed:");scanf(" %d", &val);srand(val);}unsigned RandomValue (unsigned max)/* Return a pseudo-random number in the range 1..max. *//*                                                    *//* Parameters:                                        *//*    max - largest number to return                  *//*    color - interior color of the rectangle         */{return rand() % max + 1;}void Play (void)/* Play a game of hangman.                            *//*                                                    *//* Variables:                                         *//*    words - word array                              */{int allFound;                   /* used to test for unknown chars */char ch;                        /* character from player */int done;                       /* is the game over? */char found[MAXCHARS];           /* characters found by player */unsigned len;                   /* length of word; for efficiency */unsigned i;                     /* loop variable */int inString;                   /* is ch in the string? */char word[MAXCHARS+1];          /* word to guess */int wrong;                      /* number of wrong guesses */for (i = 0; i < MAXCHARS; ++i)  /* no letters guessed, so far */   found[i] = 0;wrong = 0;                      /* no wrong guesses, yet */done = 0;                       /* the game is not over, yet */                                /* pick a word */strcpy(word, words[RandomValue(MAXWORDS)]); len = strlen(word);             /* record the length of the word */do {   printf("\nThe word is: \""); /* write the word */   for (i = 0; i < len; ++i)      if (found[i])         printf("%c", word[i]);      else         printf("-");   printf("\"\nGuess a character:"); /* get the player's choice */   scanf(" %c", &ch);   inString = 0;                /* see if ch is in the string */   for (i = 0; i < len; ++i)      if (word[i] == ch) {         found[i] = 1;         inString = 1;         }   if (inString)                /* handle a correct guess */      printf("%c is in the string.\n", ch);   else {                       /* handle an incorrect guess */      printf("%c is not in the string.\n", ch);      ++wrong;                  /* one more wrong answer... */      printf("Your ");          /* tell the player how they are doing */      if (wrong == 1)         printf("head");      else if (wrong == 2)         printf("body");      else if (wrong == 3)         printf("left arm");      else if (wrong == 4)         printf("right arm");      else if (wrong == 5)         printf("left leg");      else /* if (wrong == 6) */         printf("right leg");      printf(" is now in the noose!\n");      }   if (wrong == 6) {            /* see if the player is hung */      printf("\n\nSorry, Jack Ketch got you!\nThe word was \"%s\".\n", word);      done = 1;      }   allFound = 1;                /* check for unknown characters */   for (i = 0; i < len; ++i)      if (!found[i])         allFound = 0;   if (allFound) {              /* see if the player got the word */      printf("You got it!  The word is \"%s\".\n", word);      done = 1;      }   }while (!done);}int PlayAgain (void)/* See if the player wants to play another game.      *//*                                                    *//* Returns:                                           *//*    True to play again, false to quit.              */{char ch;                        /* player's response */printf("\n\n");do {   printf("Would you like to play again (y or n)?");   scanf(" %c", &ch);   }while ((ch != 'y') && (ch != 'Y') && (ch != 'n') && (ch != 'N'));return (ch == 'y') || (ch == 'Y');}void StartText (void)/* Start the text tools for a stand-alone text        *//* program.                                           */{TextStartUp();SetErrGlobals(127, 0);SetErrorDevice(1, 3L);SetInGlobals(127, 0);SetInputDevice(1, 3L);SetOutGlobals(127, 0);SetOutputDevice(1, 3L);}void EndText (void)/* Shut down the text tools for a stand-alone text    *//* program.                                           */{TextShutDown();}void main (void)/* Main program                                       */{StartText();                    /* start the text toolbox */FillArray();                    /* fill the word array */GetSeed();                      /* initialize the random number generator */do   Play();                      /* play a game */while (PlayAgain());            /* loop if he wants to play again */EndText();                      /* shut down the text tool set */}