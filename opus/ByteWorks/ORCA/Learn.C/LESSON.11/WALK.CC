/* Do a random walk with 10 random shapes */#include <stdlib.h>#include <quickdraw.h>#define NUMSHAPES 10                    /* # of shapes to animate */#define WALKLENGTH 100                  /* # of "steps" in the walk */#define MAXX 316                        /* size of the graphics screen */#define MAXY 83typedef enum shapeKind {triangle, square, star} shapeKind;typedef struct shapeType {              /* information about one shape */   int color;                           /* color */   shapeKind kind;                      /* kind of shape */   union {      struct {                          /* points for a triangle */         int x1,x2,x3,y1,y2,y3;         } t;      struct {                          /* points for a square */         int x1,x2,x3,x4,y1,y2,y3,y4;         } s;      struct {                          /* points for a star */         int x1,x2,x3,x4,x5;         int y1,y2,y3,y4,y5;         } p;      } coord;   } shapeType;shapeType shapes[NUMSHAPES];            /* current array of shapes */shapeType oldShapes[NUMSHAPES];         /* shapes in last position */void InitGraphics (void)/* Standard graphics initialization.                            */{SetPenMode(2);                          /* pen mode = xor */SetPenSize(3,1);                        /* use a square pen */}void DrawShape (shapeType s)/* This subroutine draws one of the shapes on the screen.       *//*                                                              *//* Parameters:                                                  *//*    s - shape to draw                                         */{SetSolidPenPat(s.color);                /* set the pen color for the shape */switch (s.kind) {   case triangle:                       /* draw a triangle */      MoveTo(s.coord.t.x1, s.coord.t.y1);      LineTo(s.coord.t.x2, s.coord.t.y2);      LineTo(s.coord.t.x3, s.coord.t.y3);      LineTo(s.coord.t.x1, s.coord.t.y1);      return;   case square:                         /* draw a square */      MoveTo(s.coord.s.x1, s.coord.s.y1);      LineTo(s.coord.s.x2, s.coord.s.y2);      LineTo(s.coord.s.x4, s.coord.s.y4);      LineTo(s.coord.s.x3, s.coord.s.y3);      LineTo(s.coord.s.x1, s.coord.s.y1);      return;   case star:                           /* draw a star */      MoveTo(s.coord.p.x1, s.coord.p.y1);      LineTo(s.coord.p.x2, s.coord.p.y2);      LineTo(s.coord.p.x3, s.coord.p.y3);      LineTo(s.coord.p.x4, s.coord.p.y4);      LineTo(s.coord.p.x5, s.coord.p.y5);      LineTo(s.coord.p.x1, s.coord.p.y1);      return;   }}void CreateShape (shapeType *s)/* This subroutine creates a shape.  The color and initial      *//* position of the shape are chosen randomly.  The size of the  *//* shape is based on pre-computed values.                       *//*                                                              *//* Parameters:                                                  *//*    s - shape to create                                       */{int cx,cy;                              /* center point for the shape */s->color = rand() % 3 + 1;              /* get a color */cx = rand() % (MAXX - 38) + 19;         /* get the center position,   */cy = rand() % (MAXY - 16) + 8;          /* picking the points so the  */                                        /* shape is in the window     */switch (rand() % 3) {                   /* set the initial positions */   case 0:                              /* set up a triangle */      s->kind = triangle;      s->coord.t.x1 = cx-19;      s->coord.t.y1 = cy+4;      s->coord.t.x2 = cx;      s->coord.t.y2 = cy-8;      s->coord.t.x3 = cx+19;      s->coord.t.y3 = cy+4;      return;   case 1:                              /* set up a square */      s->kind = square;      s->coord.s.x1 = cx-15;      s->coord.s.y1 = cy-6;      s->coord.s.x2 = cx+15;      s->coord.s.y2 = cy-6;      s->coord.s.x3 = cx-15;      s->coord.s.y3 = cy+6;      s->coord.s.x4 = cx+15;      s->coord.s.y4 = cy+6;      return;   case 2:                              /* set up a star */      s->kind = star;      s->coord.p.x1 = cx-13;      s->coord.p.y1 = cy+7;      s->coord.p.x2 = cx;      s->coord.p.y2 = cy-8;      s->coord.p.x3 = cx+13;      s->coord.p.y3 = cy+7;      s->coord.p.x4 = cx-21;      s->coord.p.y4 = cy-3;      s->coord.p.x5 = cx+21;      s->coord.p.y5 = cy-3;      return;   }}void UpdateShape (shapeType *s)/* This subroutine moves a shape across the screen in a random  *//* walk.                                                        *//*                                                              *//* Parameters:                                                  *//*    s - shape to update                                       */{int dx,dy;                              /* movement direction */dx = rand() % 3 - 1;                    /* get the walk direction */dy = rand() % 3 - 1;switch (s->kind) {                      /* make sure we don't walk off of */                                        /* the screen, then update the    */                                        /* position                       */   case triangle:                       /* check a triangle */      if (dx == -1)         if (s->coord.t.x1 < 1)            dx = 0;      if (dx == 1)         if (s->coord.t.x3 >= MAXX)            dx = 0;      if (dy == -1)         if (s->coord.t.y2 < 1)            dy = 0;      if (dy == 1)         if (s->coord.t.y3 >= MAXY)            dy = 0;      s->coord.t.x1 = s->coord.t.x1+dx; /* update a triangle */      s->coord.t.y1 = s->coord.t.y1+dy;      s->coord.t.x2 = s->coord.t.x2+dx;      s->coord.t.y2 = s->coord.t.y2+dy;      s->coord.t.x3 = s->coord.t.x3+dx;      s->coord.t.y3 = s->coord.t.y3+dy;      return;   case square:                         /* check a square */      if (dx == -1)         if (s->coord.s.x1 < 1)            dx = 0;      if (dx == 1)         if (s->coord.s.x2 >= MAXX)            dx = 0;      if (dy == -1)         if (s->coord.s.y1 < 1)            dy = 0;      if (dy == 1)         if (s->coord.s.y3 >= MAXY)            dy = 0;      s->coord.s.x1 = s->coord.s.x1+dx; /* update a square */      s->coord.s.y1 = s->coord.s.y1+dy;      s->coord.s.x2 = s->coord.s.x2+dx;      s->coord.s.y2 = s->coord.s.y2+dy;      s->coord.s.x3 = s->coord.s.x3+dx;      s->coord.s.y3 = s->coord.s.y3+dy;      s->coord.s.x4 = s->coord.s.x4+dx;      s->coord.s.y4 = s->coord.s.y4+dy;      return;   case star:                           /* check a star */      if (dx == -1)         if (s->coord.p.x4 < 1)            dx = 0;      if (dx == 1)         if (s->coord.p.x5 >= MAXX)            dx = 0;      if (dy == -1)         if (s->coord.p.y2 < 1)            dy = 0;      if (dy == 1)         if (s->coord.p.y1 >= MAXY)            dy = 0;      s->coord.p.x1 = s->coord.p.x1+dx; /* update a star */      s->coord.p.y1 = s->coord.p.y1+dy;      s->coord.p.x2 = s->coord.p.x2+dx;      s->coord.p.y2 = s->coord.p.y2+dy;      s->coord.p.x3 = s->coord.p.x3+dx;      s->coord.p.y3 = s->coord.p.y3+dy;      s->coord.p.x4 = s->coord.p.x4+dx;      s->coord.p.y4 = s->coord.p.y4+dy;      s->coord.p.x5 = s->coord.p.x5+dx;      s->coord.p.y5 = s->coord.p.y5+dy;      return;   }}void main(void)/* main program                                                 */{int i,j;                                /* loop variables */InitGraphics();                         /* set up the graphics window */srand(6289);                            /* initialize rand() */for (i = 0; i < NUMSHAPES; ++i) {       /* set up and draw the initial shapes */   CreateShape(&shapes[i]);   DrawShape(shapes[i]);   }for (i = 0; i < WALKLENGTH; ++i) {      /* do the random walk */   for (j = 0; j < NUMSHAPES; ++j) {    /* move the shapes */      oldShapes[j] = shapes[j];      UpdateShape(&shapes[j]);      }   for (j = 0; j < NUMSHAPES; ++j) {    /* redraw the shapes */      DrawShape(shapes[j]);      DrawShape(oldShapes[j]);      }   }}