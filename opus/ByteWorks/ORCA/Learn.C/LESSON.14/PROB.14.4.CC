/* A simple, recursive descent expression evaluator.  This       *//* program handles +, -, * and /, as well as parenthesis.  All   *//* operations are integer operations.                            */#include <stdio.h>#include <string.h>#include <ctype.h>typedef enum tokenType                  /* tokens in an expression */   {add,subtract,multiply,divide,integer,lparen,rparen,eol}   tokenType;char ch;                                /* last char read by GetCh */int index;                              /* index into str */char str[81];                           /* string read from the keyboard */tokenType token;                        /* last token read */int tokenValue;                         /* value of last integer token */void GetCh (void)/* Read the next character from str                             *//*                                                              *//* Variables:                                                   *//*    ch - char read; 0 if at the end of the string             *//*    index - index into str                                    *//*    str - string to read the character from                   */{if (index >= strlen(str))   ch = 0;else {   ch = str[index];   ++index;   }}void GetToken (void)/* Read a token from the input string                           */{while (ch == ' ')                       /* skip to the first real character */   GetCh();if (ch == 0) {                          /* handle an end of line */   token = eol;   return;   }if (ch == '+') {                        /* handle add */   token = add;   GetCh();   return;   }if (ch == '-') {                        /* handle subtract */   token = subtract;   GetCh();   return;   }if (ch == '*') {                        /* handle multiply */   token = multiply;   GetCh();   return;   }if (ch == '/') {                        /* handle divide */   token = divide;   GetCh();   return;   }if (ch == '(') {                        /* handle ( */   token = lparen;   GetCh();   return;   }if (ch == ')') {                        /* handle ) */   token = rparen;   GetCh();   return;   }if (isdigit(ch)) {                      /* handle a number */   token = integer;   tokenValue = 0;   while (isdigit(ch)) {      tokenValue = tokenValue*10 + ch-'0';      GetCh();      }   return;   }                                        /* handle bad input */printf("\"%c\" is an illegal character.\n", ch);token = eol;}int Expression (void);                  /* forward dec. of expression */int Term (void)/* Handle a number or parenthesis                               */{int val;                                /* integer value */if (token == integer) {                 /* handle an integer */   val = tokenValue;   GetToken();   }else if (token == lparen) {   GetToken();                          /* skip the ( */   val = Expression();                  /* evaluate the expression */   if (token == rparen)                 /* skip the ) */      GetToken();   else      printf(") expected\n");   }return val;                             /* return the value */}   int Factor (void)/* Do multiplies and divides                                    */{int value, newValue;                    /* values from Term */tokenType operation;                    /* type of the operation */value = Term();                         /* get the first value */while ((token == multiply) || (token == divide)) {   operation = token;                   /* skip the operation */   GetToken();   newValue = Term();                   /* get the second value */   if (operation == multiply)           /* do the operation */      value *= newValue;   else      value /= newValue;   }return value;                           /* return the result */}int Expression (void)/* Evaluate an expression                                       */{int value, newValue;                    /* values from Factor */tokenType operation;                    /* type of the operation */value = Factor();                       /* get the first value */while ((token == add) || (token == subtract)) {   operation = token;                   /* skip the operation */   GetToken();   newValue = Factor();                 /* get the second value */   if (operation == add)                /* do the operation */      value += newValue;   else      value -= newValue;   }return value;                           /* return the result */}void main (void)/* main program                                                 */{do {   printf("Expression: ");   scanf("%80[^\n]%*1[\n]", str);   if (strlen(str)) {      ch = ' ';      index = 0;      GetToken();      printf("The value is %d\n\n", Expression());      }   }while (strlen(str));}