/* This program plays the game of break-out, a classic arcade    *//* game.                                                         */#pragma optimize 9#include <quickdraw.h>#include <event.h>#include <memory.h>#include <window.h>#include <orca.h>#include <stdio.h>#define EVENTMASK 0x0F6E                /* GetNextEvent event mask */#define SIZE 320                        /* graphics mode */#define LETTERY 200                     /* height of letters for score, ball count */#define PAUSE 1                         /* 60ths of a sec. to pause */EventRecord myevent;                    /* current event record */Rect screen;                            /* port rectangle */int score;                              /* current score */long lastWhen;                          /* event timer */                                        /* the paddle */                                        /*------------*/#define PADDLECOLOR 15                  /* paddle color */#define PADDLEHEIGHT 3                  /* paddle height */#define PADDLEWIDTH 35                  /* paddle width */#define PADDLEY 184                     /* y position of the paddle */#define EASY 2                          /* x velocity for easy spin */#define HARD 3                          /* x velocity for hard spin */#define AREA1 7                         /* sensitive areas of the paddle */#define AREA2 14#define AREA3 21#define AREA4 28int maxX;                               /* max X distance the paddle can travel */int paddlePosition;                     /* current X position of the paddle */                                        /* the bricks */                                        /*------------*/#define COLUMNS 16                      /* # of bricks in a row */#define ROWS 6                          /* # of rows of bricks */#define SPACING 8                       /* spacing of the rows */#define STARTHEIGHT 56                  /* starting distance to bottom of bricks */#define THICKNESS 6                     /* thickness of a brick */#define WIDTH 20                        /* width of a brick */int brickY;                             /* disp to the bottom row of bricks */int level;                              /* playing level */int numBricks;                          /* # of bricks visible */int stillThere[ROWS][COLUMNS+2];        /* brick array */                                        /* the ball */                                        /*----------*/#define BALLCOLOR 15                    /* ball color */#define BALLHEIGHT 3                    /* ball height; should be odd */#define BALLWIDTH 3                     /* ball width; should be odd */#define BALLDX (BALLWIDTH/2)            /* half width of ball */#define BALLDY (BALLHEIGHT/2)           /* half height of ball */#define SPEED 2                         /* vertical ball speed */int balls;                              /* # of balls left */int dx,dy;                              /* speed of the ball */int x,y;                                /* position of the ball */                                        /* button sizes */                                        /*--------------*/#define LEFT 110#define RIGHT 210#define TOP1 90#define BOTTOM1 101#define TOP2 105#define BOTTOM2 116/*--------------------------------------------------------------*/void StartTools (void)/* Start the tools                                              */{handle memory;                          /* memory returned by NewHandle */startgraph(SIZE);                       /* initialize QuickDraw */memory = NewHandle(256L,userid(),0xC015,0L); /* start up the event mgr */EMStartUp((int) *memory, 0, 0, SIZE, 0, 200, userid());FlushEvents(0xFFFF, 0);}void ShutDownTools (void)/* Shut down the tools                                          */{EMShutDown();endgraph();}void DrawPaddle (int position, int color)/* Draw the paddle                                              *//*                                                              *//* Parameters:                                                  *//*    position - position to draw the paddle                    *//*    color - color of the paddle                               */{int y;                                  /* position of the paddle on the screen */SetPenSize(PADDLEWIDTH,PADDLEHEIGHT);   /* set the pen to draw the entire paddle */SetSolidPenPat(color);                  /* set the paddle color */SetPenMode(0);                          /* use copy mode */MoveTo(position,PADDLEY);               /* draw the paddle */LineTo(position,PADDLEY);}void MovePaddle (void)/* Track and move the paddle                                    *//*                                                              *//* Variables:                                                   *//*    paddlePosition - position of the paddle                   *//*    myevent - last event returned by GetNextEvent             */{/* convert the point to our window */GlobalToLocal(&myevent.where);/* make sure we don't go off of the screen */if (myevent.where.h+PADDLEWIDTH > maxX)   myevent.where.h = maxX-PADDLEWIDTH;/* if the mouse moved, move the paddle */if (myevent.where.h != paddlePosition) {   DrawPaddle(paddlePosition,0);   paddlePosition = myevent.where.h;   DrawPaddle(paddlePosition, PADDLECOLOR);   }}void DrawBrick (int row, int column, int color)/* Draw a brick on the screen                                   *//*                                                              *//* Parameters:                                                  *//*    row,column - brick to draw                                *//*    color - color of the brick                                *//*                                                              *//* Variables:                                                   *//*     brickY - distance to the bottom of the bricks            */{Rect r;                                 /* brick's rectangle */SetPenMode(0);                          /* get ready to draw */SetSolidPenPat(color);SetPenSize(1,1);r.h1 = column*WIDTH;                    /* set up the brick's rectangle */r.h2 = r.h1+WIDTH;r.v2 = brickY - row*SPACING;r.v1 = r.v2-THICKNESS;PaintRect(&r);                          /* draw the brick */SetSolidPenPat(0);                      /* draw a line to separate the bricks */MoveTo(r.h2-1, r.v1);LineTo(r.h2-1, r.v2);}void DrawBricks (void)/* Draw a set of bricks                                         */{int colors[ROWS];                       /* brick colors */int column;                             /* loop variable */int row;                                /* loop variable */Rect r;                                 /* brick rectangle */numBricks = ROWS*COLUMNS;               /* set the brick count */colors[0] = 7;                          /* fill in the brick color array */colors[1] = 6;colors[2] = 9;colors[3] = 10;colors[4] = 13;colors[5] = 12;for (row = 0; row < ROWS; ++row) {      /* draw the bricks */   for (column = 0; column < COLUMNS; ++column) {      DrawBrick(row, column, colors[row]);      stillThere[row][column+1] = 1;      }   stillThere[row][0] = 0;   stillThere[row][COLUMNS+1] = 0;   }}void WriteBalls (void)/* Draw the number of balls left                                *//*                                                              *//* Variables:                                                   *//*    balls - number of balls left                              */#define BALLX 290{MoveTo(BALLX, LETTERY);printf("%d          ", balls);}void WriteScore (void)/* Draw the current score                                       *//*                                                              *//* Variables:                                                   *//*    score - score to draw                                     */#define SCOREX 50{MoveTo(SCOREX, LETTERY);printf("%d          ", score);}void DrawBall (void)/* Draw a ball at the current position                          *//*                                                              *//* Variables:                                                   *//*    x,y: ball position                                        *//*                                                              *//* Note: This procedure is used to draw an initial ball or      *//*       to erase one after a ball is missed.  MoveBall uses    *//*       its own method, which is faster when the ball is       *//*       being animated.                                        */{SetSolidPenPat(BALLCOLOR);SetPenMode(2);SetPenSize(BALLWIDTH, BALLHEIGHT);MoveTo(x-BALLDX, y-BALLDY);LineTo(x-BALLDX, y-BALLDY);}void StartBall (void)/* Start a ball                                                 *//*                                                              *//* Variables:                                                   *//*    x,y - position of the ball                                *//*    dx,dy - speed of the ball                                 */{if (myevent.when & 0x0001)              /* set the speed, position */   dx = -EASY;else   dx = EASY;x = myevent.when % screen.h2;dy = SPEED;y = brickY + 4;DrawBall();                             /* draw the ball */GetNextEvent(EVENTMASK, &myevent);      /* set the timer */lastWhen = myevent.when;}void WaitForClick (void)/* Pause until the player is ready for a ball                   */{static Rect r = {90, 0, 100, 320};      /* used to erase the message */MoveTo(65,100);                         /* write the message */printf("Click for the next ball");do {                                    /* wait for the click */   GetNextEvent(EVENTMASK, &myevent);   MovePaddle();   }while (myevent.what != mouseUpEvt);SetSolidPenPat(0);SetPenMode(0);PaintRect(&r);}void HitBrick (int row, int column)/* Handle a hit brick                                           *//*                                                              *//* Parameters:                                                  *//*    row,column - brick that was hit                           */{Rect ball;                              /* ball rectangle */stillThere[row][column+1] = 0;          /* remove the brick */ball.h1 = x-BALLDX;                     /* erase the ball */ball.h2 = ball.h1+BALLWIDTH;ball.v1 = y-BALLDY;ball.v2 = ball.v1+BALLHEIGHT;SetPenMode(2);SetSolidPenPat(BALLCOLOR);PaintRect(&ball);DrawBrick(row, column, 0);              /* erase the brick */SetPenMode(2);                          /* redraw the ball */SetSolidPenPat(BALLCOLOR);PaintRect(&ball);score += (row+1+level)*5;               /* add in the score */WriteScore();--numBricks;                            /* see if they are all gone */if (numBricks == 0) {   DrawBall();   ++balls;   WriteBalls();   brickY += SPACING;   ++level;   DrawBricks();   WaitForClick();   StartBall();   }GetNextEvent(EVENTMASK, &myevent);      /* reset the timer */lastWhen = myevent.when;}void CheckBricks (void)/* Move the ball.                                               *//*                                                              *//* Variables:                                                   *//*    x,y - position of the ball                                *//*    numBricks - # of bricks left                              */{int row,column;                         /* brick row,column */int dispX,dispY;                        /* position along the brick */if (y > brickY)                         /* quit now if we are below the bricks */   return;row = (brickY-y) / SPACING;             /* find the vertical brick values */dispY = (brickY-y) % SPACING;if ((row < ROWS) && (dispY <= THICKNESS)) {   column = x / WIDTH;                  /* find the horizontal brick values */   dispX = x % WIDTH;                                        /* check for a hit */   if (stillThere[row][column+1]) {      HitBrick(row,column);      if ((dispY == 0) || (dispY == THICKNESS))         dy = -dy;      else         dx = -dx;      }   else if ((dispY == 0) || (dispY == THICKNESS))      if (dispX == 0) {         if (stillThere[row][column]) {            HitBrick(row,column-1);            dy = -dy;            }         }      else if (dispX == WIDTH)         if (stillThere[row][column+2]) {            HitBrick(row,column+1);            dy = -dy;            }   }}void GetANewBall (Rect *oldBall)/* Missed; get a new ball                                       *//*                                                              *//* Parameters:                                                  *//*    oldBall - ptr to MoveBall's old ball position             */{--balls;                                /* reduce the number of balls */WriteBalls();if (balls) {   PaintRect(oldBall);                  /* erase the old ball */   WaitForClick();                      /* wait until the player is ready */   StartBall();                         /* start a new ball */   oldBall->h1 = x-BALLDX;              /* form its rectangle */   oldBall->h2 = oldBall->h1+BALLWIDTH;   oldBall->v1 = y-BALLDY;   oldBall->v2 = oldBall->v1+BALLHEIGHT;   }}void MoveBall (void)/* Move the ball                                                *//*                                                              *//* Variables:                                                   *//*    x,y - position of the ball                                *//*    dx,dy - speed of the ball                                 */{Rect oldBall, newBall;                  /* ball rectangles */int px;                                 /* disp of ball on paddle surface */SetPenMode(2);                          /* get ready to draw */SetSolidPenPat(BALLCOLOR);oldBall.h1 = x-BALLDX;                  /* form the old ball rectangle */oldBall.h2 = oldBall.h1+BALLWIDTH;oldBall.v1 = y-BALLDY;oldBall.v2 = oldBall.v1+BALLHEIGHT;x += dx;                                /* move the ball */if (x < 0) {   x = 0;   dx = -dx;   }else if (x > screen.h2) {   x = screen.h2;   dx = -dx;   }y += dy;if (y < 0) {   y = 0;   dy = -dy;   }else if (y >= PADDLEY) {   if ((x < paddlePosition) || (x > paddlePosition+PADDLEWIDTH))      GetANewBall(&oldBall);   else {      px = x-paddlePosition;      if (px < AREA1)         dx = -HARD;      else if (px < AREA2)         dx = -EASY;      else if (px < AREA3)         dx = 0;      else if (px < AREA4)         dx = EASY;      else         dx = HARD;      dy = -dy;      y = PADDLEY;      }   }newBall.h1 = x-BALLDX;                  /* form the new ball rectangle */newBall.h2 = newBall.h1+BALLWIDTH;newBall.v1 = y-BALLDY;newBall.v2 = newBall.v1+BALLHEIGHT;PaintRect(&newBall);                    /* draw the ball in the new spot */PaintRect(&oldBall);                    /* erase the old ball */}int WhichButton (void)/* See which button the mouse is in                             *//*                                                              *//* Variables:                                                   *//*    myevent.where - location of mouse at mouseup              *//*    myevent.what - kind of event                              */{int result = 0;                         /* value to return */if (myevent.what == mouseUpEvt)   if (myevent.where.h >= LEFT)      if (myevent.where.h <= RIGHT)         if (myevent.where.v >= TOP1)            if (myevent.where.v <= BOTTOM2)               if (myevent.where.v <= BOTTOM1)                  result = 1;               else if (myevent.where.v >= TOP2)                  result = 2;return result;}int PlayAGame (void)/* See if the player wants to play a game or quit.              *//*                                                              *//* Returns: True to play a game, else false.                    */{Rect r;                                 /* rect inclosing the buttons */MoveTo(LEFT+10, BOTTOM1-2);             /* draw the messages */printf("Play a Game");MoveTo(LEFT+30,BOTTOM2-2);printf("Quit");SetSolidPenPat(14);                     /* draw the button outlines */SetPenMode(0);SetPenSize(3,1);MoveTo(LEFT,TOP1);LineTo(RIGHT,TOP1);LineTo(RIGHT,BOTTOM1);LineTo(LEFT,BOTTOM1);LineTo(LEFT,TOP1);MoveTo(LEFT,TOP2);LineTo(RIGHT,TOP2);LineTo(RIGHT,BOTTOM2);LineTo(LEFT,BOTTOM2);LineTo(LEFT,TOP2);ShowCursor();                           /* wait for a click in a button */do {   GetNextEvent(EVENTMASK, &myevent);   GlobalToLocal(&myevent.where);   MovePaddle();   }while (WhichButton() == 0);HideCursor();r.h1 = LEFT;                            /* erase the messages */r.h2 = RIGHT;r.v1 = TOP1;r.v2 = BOTTOM2;SetSolidPenPat(0);return WhichButton() == 1;              /* set the return value */}void InitScreen (void)/* Draw the initial screen                                      */{SetSolidPenPat(0);                      /* erase the old screen contents */SetPenMode(0);PaintRect(&screen);brickY = STARTHEIGHT;                   /* draw the initial set of bricks */DrawBricks();paddlePosition = 0;                     /* draw the initial paddle */DrawPaddle(0,PADDLECOLOR);balls = 3;                              /* give the player 3 balls */level = 1;                              /* play level = 1 */SetForeColor(11);                       /* draw the initial score, ball count */SetBackColor(0);MoveTo(0, LETTERY);printf("Score:");MoveTo(240, LETTERY);printf("Balls:");score = 0;WriteScore();WriteBalls();}void main (void)/* Main program                                                 */{int time;                               /* timer */StartTools();                           /* start the tools */InitCursor();                           /* set up the cursor */HideCursor();GetPortRect(&screen);                   /* set the limit on the paddle */maxX = screen.h2;InitScreen();                           /* give them something to look at */while (PlayAGame()) {   InitScreen();                        /* set up the screen */   StartBall();                         /* start a ball */   do {                                 /* event loop */      GetNextEvent(EVENTMASK, &myevent);      time = myevent.when - lastWhen;      if (time > PAUSE) {         MoveBall();         CheckBricks();         lastWhen += PAUSE;         }      MovePaddle();      }   while (balls);   DrawBall();                          /* erase the last ball */   }ShutDownTools();                        /* shut down the tools */}