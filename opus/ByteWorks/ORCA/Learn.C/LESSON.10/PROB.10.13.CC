/* Find the average number of compares needed to find a character *//* from a list of characters that make up the alphabet.           */#include <stdio.h>#include <stdlib.h>#define NAMELENGTH 20                   /* max length of a name */#define COUNT 10000                     /* number of tests */typedef struct listType {               /* element of the list */   struct listType *next;   char ch;   }   listType,   *listPtr;                            /* list pointer type */long compares;                          /* # of compares done */listPtr list;                           /* ptr to the first element *//* Build a list of characters */void BuildList (void){listPtr ptr;                            /* new list element */char ch;                                /* character for the list */list = NULL;                            /* no elements so far */for (ch = 'a'; ch <= 'z'; ++ch) {   ptr = (listPtr) malloc(sizeof(listType)); /* get a new list record */   ptr->next = list;                    /* add the record to the list */   list = ptr;   ptr->ch = ch;                        /* put the char in the struct */   }}/* Check the list */void Test (void){listPtr ptr;                            /* used to trace the list */char ch;                                /* character to test for */int i;                                  /* loop counter */srand(23456);                           /* initialize rand() */for (i = 0; i < COUNT; ++i) {   ch = (rand() %26) + 'a';             /* create a character */   ptr = list;                          /* scan for the character */   while (ptr != NULL) {      ++compares;                       /* update the # of compares */      if (ptr->ch == ch)                /* found -> exit loop */         break;      ptr = ptr->next;      }   }}/* Main program */void main (void){compares = 0;BuildList();Test();printf("The average # of compares was %.2f.\n", ((float)compares)/COUNT);}