/* This program reads in a list of integers, and then prints    *//* them in reverse order.  The program stops when a zero value  *//* is read.                                                     */#include <stdio.h>#include <stdlib.h>#include <stddef.h>typedef struct listElement {   struct listElement *next;   int i;   } listElement;listElement *list;void GetList (void)/* Read a list from the keyboard.                            *//*                                                           *//* Variables:                                                *//*    list - pointer to the head of the list                 */{int i;                                /* variable read from the keyboard */listElement *temp;                      /* work pointer */list = NULL;                            /* initialize the list pointer */do {   scanf(" %d", &i);                    /* read a value */   if (i != 0) {                     /* if not at the end of the list... */                                        /* allocate a structure */      temp = (listElement *) malloc (sizeof(listElement));      temp->i = i;                      /* place i in the structure */      temp->next = list;                /* put the structure in the list */      list = temp;      }   }while (i != 0);}void PrintList (void)/* Print a list.                                             *//*                                                           *//* Parameters:                                               *//*    list - pointer to the head of the list                 */{listElement *temp;                      /* work pointer */while (list != NULL) {   temp = list;                         /* remove an item from the list */   list = temp->next;   printf("%d\n", temp->i);             /* write the value */   free(temp);                          /* free the memory */   }}void main (void){GetList();                              /* read a list */PrintList();                            /* print a list */}