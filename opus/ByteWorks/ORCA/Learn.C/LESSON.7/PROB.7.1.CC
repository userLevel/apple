/* Rotate a square in the graphics window.       *//*                                               *//* This program makes use of two constants,      *//* XSCALE and YSCALE, to decide how to convert   *//* from the real numbers used to represent the   *//* points of the cube into the integer           *//* coordinates used by QuickDraw.  These values  *//* will convert from inches to pixels in 640     *//* mode on a 12" monitor.                        */#include <quickdraw.h>#include <math.h>#define XSCALE 86               /* x conversion factor */#define YSCALE 33               /* y conversion factor */#define pi 3.1415927            /* circumference of a circle */typedef float square[4];        /* type for a square */void InitGraphics (void)/* Standard graphics initialization            */{SetPenMode(0);                  /* pen mode = copy */SetSolidPenPat(0);              /* pen color = black */SetPenSize(3,1);                /* use a square pen */}void Rotate (float *x, float *y, float angle, float ox, float oy)/* Rotate the point x,y about ox,oy through   *//* the angle given.                           *//*                                            *//* Parameters:                                *//*    x,y - point to rotate                   *//*    angle - angle to rotate (in radians)    *//*    ox,oy - point to rotate around          */{float cosAngle,sinAngle;        /* sin and cos of angle */float nx;                       /* new x */*x -= ox;                       /* move the point */*y -= oy;cosAngle = cos(angle);          /* this takes time - save the results */sinAngle = sin(angle);nx = *x * cosAngle + *y * sinAngle; /* rotate the point */*y = *y * cosAngle - *x * sinAngle;*x = nx+ox;                     /* move the point back */*y = *y+oy;}void RotateSquare (square x, square y)/* Rotate the square 9 degrees                *//*                                            *//* Parameters:                                *//*    x,y - coordinates of square             */{unsigned i;                     /* loop variable */for (i = 0; i < 4; ++i)   Rotate(&x[i], &y[i], pi/20.0, 1.5, 1.5);}void DrawSquare (int color, square x, square y)/* Draw the square                            *//*                                            *//* Parameters:                                *//*    color - color to draw                   *//*    x,y - coordinates of the square         */{SetSolidPenPat(color);       /* set the pen color */                             /* draw the square */MoveTo((int) (x[0]*XSCALE), (int) (y[0]*YSCALE));LineTo((int) (x[1]*XSCALE), (int) (y[1]*YSCALE));LineTo((int) (x[2]*XSCALE), (int) (y[2]*YSCALE));LineTo((int) (x[3]*XSCALE), (int) (y[3]*YSCALE));LineTo((int) (x[0]*XSCALE), (int) (y[0]*YSCALE));}void main(void)/* Main program                               */{square x,y,oldX,oldY;           /* points in the square */unsigned i,j;                   /* loop variables */InitGraphics();                 /* set up the graphics window */x[0] = 1.0;   y[0] = 1.0;       /* initialize the square */x[1] = 2.0;   y[1] = 1.0;x[2] = 2.0;   y[2] = 2.0;x[3] = 1.0;   y[3] = 2.0;DrawSquare(0, x, y);            /* draw the square */for (i = 0; i < 10; ++i) {   for (j = 0; j < 4; ++j) {    /* save the current location */      oldX[j] = x[j];      oldY[j] = y[j];      }   RotateSquare(x, y);          /* rotate */   DrawSquare(3, oldX, oldY);   /* erase the old square */   DrawSquare(0, x, y);         /* draw the square */   }}