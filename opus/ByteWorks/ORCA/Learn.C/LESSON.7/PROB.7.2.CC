/* This program plays Acey Ducey                                *//*                                                              *//* Acey Ducey is a card game played, in this case, between the  *//* computer and the human.  The computer draws and displays two *//* cards.  The player then decides how much to bet, and a third *//* card is drawn.  If it is between the first two, the player   *//* wins, and gets back double the bet.  If it is not between    *//* the two cards, the computer wins, and the player looses the  *//* bet.  The game continues until the player looses all of his  *//* money, or until the player signals the end of the game with  *//* a negative bet.                                              *//*                                                              *//* The deck of cards is represented by a pair of arrays.  Each  *//* array has one position for each of the 52 cards in a         *//* standard deck of playing cards.  One array gives the value   *//* of the card (see the value enumeration), while the other     *//* gives the suit (see the suit enumeration).                   */#include <stdio.h>#include <stdlib.h>                                        /* suits of cards */enum suit {spades, diamonds, clubs, hearts};                                        /* face value of cards */enum value {two, three, four, five, six, seven, eight, nine, ten,            jack, queen, king, ace};typedef unsigned boolean;               /* set up boolean logic */#define TRUE 1#define FALSE 0typedef enum suit suitDeck[52];         /* these two arrays define */typedef enum value valueDeck[52];       /* a deck of cards         */suitDeck suits;                         /* our deck of cards */valueDeck values;boolean done;                           /* is the game over? */unsigned hands;                         /* # of hands played from the deck */float money;                            /* amount of money left */unsigned nextCard;                      /* next card in the deck */unsigned RandomValue (unsigned max)/* Return a pseudo-random number in the range 1..max.              *//*                                                                 *//* Parameters:                                                     *//*    max - largest number to return                               *//*    color - interior color of the rectangle                      */{return rand() % max + 1;}void InitializeDeck (suitDeck suits, valueDeck values)/* Fills in the values to define a sorted deck of cards         *//*                                                              *//* Parameters:                                                  *//*    suits - array of the card suits                           *//*    values - array of the card values                         */{unsigned i;                             /* loop variable */for (i = 0; i < 13; ++i) {              /* initialize the suit array */   suits[i] = spades;   suits[i+13] = diamonds;   suits[i+26] = clubs;   suits[i+39] = hearts;   }values[0] = two;                        /* initialize the first suit */values[1] = three;values[2] = four;values[3] = five;values[4] = six;values[5] = seven;values[6] = eight;values[7] = nine;values[8] = ten;values[9] = jack;values[10] = queen;values[11] = king;values[12] = ace;for (i = 13; i < 52; ++i)               /* copy the first suit to the */   values[i] = values[i-13];            /* remaining suits            */}void Shuffle(suitDeck suits, valueDeck values)/* Shuffles the deck of cards                                   *//*                                                              *//* Parameters:                                                  *//*    suits - array of the card suits                           *//*    values - array of the card values                         */{unsigned i;                             /* loop variable */unsigned j;                             /* card to swap with current card */enum value tvalue;                      /* temp value; for swap */enum suit tsuit;                        /* temp suit; for swap */for (i = 0; i < 52-1; ++i) {   j = RandomValue(52 - i) + i - 1;   tvalue = values[i];   values[i] = values[j];   values[j] = tvalue;   tsuit = suits[i];   suits[i] = suits[j];   suits[j] = tsuit;   }}void PrintValue (enum value v)/* Print the value of a card                                 *//*                                                           *//* Parameters:                                               *//*    v - value of the card                                  */{if (v == two)   printf("two");else if (v == three)   printf("three");else if (v == four)   printf("four");else if (v == five)   printf("five");else if (v == six)   printf("six");else if (v == seven)   printf("seven");else if (v == eight)   printf("eight");else if (v == nine)   printf("nine");else if (v == ten)   printf("ten");else if (v == jack)   printf("jack");else if (v == queen)   printf("queen");else if (v == king)   printf("king");else if (v == ace)   printf("ace");}void PrintSuit (enum suit s)/* Print the suit of a card                                  *//*                                                           *//* Parameters:                                               *//*    s - suit of the card                                   */{if (s == spades)   printf("spades");else if (s == diamonds)   printf("diamonds");else if (s == clubs)   printf("clubs");else if (s == hearts)   printf("hearts");}void PrintCard (enum suit s, enum value v)/* Print a card                                                 *//*                                                              *//* Parameters:                                                  *//*    s - suit                                                  *//*    v - values                                                */{PrintValue(v);printf(" of ");PrintSuit(s);printf("\n");}void PlayHand (void)/* Play one hand of Acey Ducey.                                 *//*                                                              *//* Variables:                                                   *//*    done - game over flag                                     *//*    money - amount of money the player has                    *//*    nextCard - next card to draw from the deck                *//*    suits,values - deck of cards                              */{float bet;                              /* player's bet */enum value v1,v2,v3;                    /* value of the three cards */printf("\nI draw:\n");v1 = values[nextCard];                  /* draw the first card */PrintCard(suits[nextCard], v1);++nextCard;v2 = values[nextCard];                  /* draw the second card */PrintCard(suits[nextCard], v2);++nextCard;if (v2 < v1) {                          /* sort the values */   v3 = v2;   v2 = v1;   v1 = v3;   }do {                                    /* get the bet */   printf("You have %.2f left.\nYour bet:", money);   scanf(" %f", &bet);   if (bet < 0.0)      done = TRUE;   else if (bet > money)      printf("Sorry, you don't have that much.\n");   }while (bet > money);if (! done) {   v3 = values[nextCard];               /* draw the third card */   printf("Your card is:\n");   PrintCard(suits[nextCard], v3);   ++nextCard;   if ((v1 < v3) && (v3 < v2)) {      money += bet;                     /* player wins */      printf("You win!\n");      }   else {      money -= bet;                     /* player looses */      printf("Sorry, you loose.\n");      if (money <= 0.0) {               /* see if he's broke */         printf("You are out of money.  So long!\n");         done = TRUE;         }      }   }}void GetSeed (void)/* Initialize the random number generator                       */{int i;                                  /* integer from keyboard */printf("Please enter a number from\n1000 to 30000:");scanf(" %d", &i);srand(i);}void main (void)/* Main program                                                 */{money = 50.0;                    /* player starts with $50 */GetSeed();                       /* initialize the random number generator */InitializeDeck(suits, values);   /* get a new (sorted) deck of cards */hands = 17;                      /* this forces an immediate shuffle */done = FALSE;                    /* not done, yet */do {   if (hands = 17) {             /* reshuffle after 17 hands */      Shuffle(suits, values);    /* shuffle the deck */      hands = 0;                 /* no hands played from the deck */      nextCard = 1;              /* next card to draw */      }   PlayHand();                   /* play one hand of Acey Ducey */   ++hands;                      /* update the # of hands played */   }while (!done);}