/* XREF                                                         *//*                                                              *//* This program generates a cross reference of a C program,     *//* showing where any symbol is used.  To use XREF, start by     *//* selecting the shell window.  Type                            *//*                                                              *//*    xref filename                                             *//*                                                              *//* where filename is the name of the program you want to cross- *//* reference.                                                   */#include <stdio.h>#include <ctype.h>#include <string.h>#include <stdlib.h>#define symbolLength 80                 /* max length of a symbol */char fName[65];                         /* file name */FILE *f;                                /* file variable */char *fNamePtr;                         /* pointer to the file name */typedef struct lineStruct {             /* line number list */   struct lineStruct *next;   int number;   }   lineStruct, *linePtr;typedef struct symbolStruct {           /* symbol table entry */   struct symbolStruct *next;   char symbol[symbolLength+1];   linePtr lines;   }   symbolStruct, *symbolPtr;symbolPtr symbols = NULL;               /* symbol table */int lineNumber = 1;                     /* current line number */char ch = ' ';                          /* current character */char token[symbolLength+1];             /* current token */int tokenLine;                          /* line number at start of token */void GetCh (void)/* Read a character from the file                               *//*                                                              *//* Variables:                                                   *//*    ch - character read                                       *//*    lineNumber - current line number                          */{ch = fgetc(f);if (ch == '\n')   ++lineNumber;}void SkipComment (void)/* Skip comments in the program                                 */{do {   GetCh();   if (ch == '*') {      GetCh();      if (ch == '/')         return;      }   }while (ch != EOF);}void NextCh (void)/* Get the next character from the file, skipping comments      */{GetCh();                                /* get the next character */if (ch == '/') {                        /* skip comments */   GetCh();   if (ch == '*') {      GetCh();      SkipComment();      }   }}void GetToken (void)/* Read a word from the source file                             *//*                                                              *//* Variables:                                                   *//*    lineNumber - current line number                          *//*    token - string read                                       *//*    tokenLine - line number at the start of the token         */{int len = 0;                            /* length of the token */if (ch != EOF) {                                        /* skip to the next token */   while ((!iscsymf(ch)) && (ch != EOF))      GetCh();   tokenLine = lineNumber;              /* record the line number */                                        /* record the token */   while (iscsym(ch) && (ch != EOF)) {      if (len < symbolLength) {         token[len] = ch;         ++len;         }      GetCh();      }   }token[len] = (char) 0;                  /* mark the end of the string */}void Insert (void)/* Insert a symbol use in the symbol table.  If the symbol does *//* not exist, create a new entry.                               *//*                                                              *//* Variables:                                                   *//*    tokenLine - line number at the start of the token         *//*    token - symbol to insert                                  *//*    symbols - pointer to the first entry in the symbol table  */{linePtr lPtr;                           /* current line number pointer */symbolPtr sPtr;                         /* current symbol pointer */sPtr = symbols;                         /* try to find the symbol */while (sPtr != NULL) {   if (strcmp(token, sPtr->symbol) == 0)      goto make;   sPtr = sPtr->next;   }                                      /* none exists: create a new entry */sPtr = (symbolPtr) malloc(sizeof(symbolStruct));sPtr->next = symbols;symbols = sPtr;strcpy(sPtr->symbol, token);sPtr->lines = NULL;make:                                        /* enter the line number */lPtr = (linePtr) malloc(sizeof(lineStruct));lPtr->next = sPtr->lines;sPtr->lines = lPtr;lPtr->number = tokenLine;}void PrintNumber (linePtr nPtr)/* Recursively print the line numbers in reverse order          *//*                                                              *//* Parameters:                                                  *//*    nPtr - pointer to the remainder of the line number list   */{if (nPtr != NULL) {   PrintNumber(nPtr->next);   printf("%d ", nPtr->number);   }}void PrintSymbols (void)/* Print the symbols found and line numbers                     *//*                                                              *//* Variables:                                                   *//*    symbols - pointer to the first entry in the symbol table  */{symbolPtr sPtr;                         /* current symbol pointer */sPtr = symbols;while (sPtr != NULL) {   printf("%16s  ", sPtr->symbol);   PrintNumber(sPtr->lines);   printf("\n");   sPtr = sPtr->next;   }}int main (int argc, char *argv[])/* Main program                                                 */{if (argc < 2) {                         /* get a file name */   printf("File to cross reference: ");   fNamePtr = fName;   scanf("%64s", fName);   if (strlen(fName) == 0)      return -1;   }else {   if (argc > 2)      printf("Extra input ignored.\n");   fNamePtr = argv[1];   }f = fopen(fNamePtr, "r");               /* open the file */if (f == NULL) {   printf("Could not open %s.\n", fNamePtr);   return -1;   }do {                                  /* collect the symbols in the file */   GetToken();   if (strlen(token))      Insert();   }while (strlen(token));PrintSymbols();                         /* print the symbol table */fclose(f);                              /* close the file */return 0;                               /* return with no error */}