/* Compare the time for a quick sort to the time for a shell    *//* sort.                                                        */#include <stdio.h>#include <stdlib.h>#define SIZE 10                         /* size of the array to sort */#define TRIALS 10                       /* number of trial runs */int a[SIZE], b[SIZE];                   /* array(s) to sort */void Fill (void)/* Fill two arrays                                              *//*                                                              *//* Variables:                                                   *//*    a,b - arrays to fill                                      */{int i;                                  /* loop variable */for (i = 0; i < SIZE; ++i) {   a[i] = rand() % SIZE;   b[i] = a[i];   }}void ShellSort (void)/* Sort an array                                                *//*                                                              *//* Variables:                                                   *//*    b - array to sort                                         */{int i;                                  /* loop variable/array index */int swap;                               /* was a value swapped? */int temp;                               /* temp; used for swapping */do {   swap = 0;   for (i = 0; i < SIZE-1; ++i) {      if (b[i] > b[i+1]) {         temp = b[i];         b[i] = b[i+1];         b[i+1] = temp;         swap = 1;         }      }   }while (swap);}void QuickSort (int left, int right)/* Sort an array                                                *//*                                                              *//* Parameters:                                                  *//*    left - leftmost part of the array to sort                 *//*    right - rightmost part of the array to sort               *//*                                                              *//* Variables:                                                   *//*    a - array to sort                                         */{int i,j;                                /* array indices */int pivot;                              /* pivot value */int temp;                               /* used to swap values */if (right > left) {                     /* quit if there is only 1 element */   i = (left-1) + ((right-left+1) / 2); /* find the pivot index */   pivot = a[i];                        /* put the pivot at the end */   a[i] = a[right];                     /* (remember the pivot, too) */   a[right] = pivot;   i = left;                            /* set up the start indices */   j = right-1;   while (i != j) {                     /* partition the array */      while ((a[i] <= pivot) && (i != j))         ++i;      while ((a[j] >= pivot) && (i != j))         --j;      temp = a[i];      a[i] = a[j];      a[j] = temp;      }   if (a[i] < pivot)                    /* find the pivot insert point */      ++i;   temp = a[i];                         /* replace the pivot */   a[i] = a[right];   a[right] = temp;   QuickSort(left, i-1);                /* sort to the left of the pivot */   QuickSort(i+1, right);               /* sort to the right of the pivot */   }}void main (void)/* main program                                                 */{int i;                                  /* loop variable */srand(2345);                            /* initialize the random number generator */for (i = 0; i < TRIALS; ++i) {          /* do the trial runs */   Fill();   QuickSort(0, SIZE-1);   ShellSort();   }}