/* Determine how many times Sort is called                      */#include <stdio.h>#define SIZE 10                         /* size of the array to sort */int a[SIZE];                            /* array to sort */int count = 0;                          /* number of calls */void Fill (void)/* Fill an array                                                *//*                                                              *//* Variables:                                                   *//*    a - array to fill                                         */{int i;                                  /* loop variable */for (i = 0; i < SIZE; ++i)   a[i] = SIZE-i;}void Sort (int left, int right)/* Sort an array                                                *//*                                                              *//* Parameters:                                                  *//*    left - leftmost part of the array to sort                 *//*    right - rightmost part of the array to sort               *//*                                                              *//* Variables:                                                   *//*    a - array to sort                                         */{int i,j;                                /* array indices */int pivot;                              /* pivot value */int temp;                               /* used to swap values */++count;                                /* update the counter */if (right > left) {                     /* quit if there is only 1 element */   i = (left-1) + ((right-left+1) / 2); /* find the pivot index */   pivot = a[i];                        /* put the pivot at the end */   a[i] = a[right];                     /* (remember the pivot, too) */   a[right] = pivot;   i = left;                            /* set up the start indices */   j = right-1;   while (i != j) {                     /* partition the array */      while ((a[i] <= pivot) && (i != j))         ++i;      while ((a[j] >= pivot) && (i != j))         --j;      temp = a[i];      a[i] = a[j];      a[j] = temp;      }   if (a[i] < pivot)                    /* find the pivot insert point */      ++i;   temp = a[i];                         /* replace the pivot */   a[i] = a[right];   a[right] = temp;   Sort(left, i-1);                     /* sort to the left of the pivot */   Sort(i+1, right);                    /* sort to the right of the pivot */   }}void Print (void)/* Print the array                                              *//*                                                              *//* Variables:                                                   *//*    a - array to print                                        */{int i;for (i = 0; i < SIZE; ++i)   printf("%d\n", a[i]);}void main (void)/* main program                                                 */{Fill();Sort(0, SIZE-1);Print();printf("Sort is called %d times.\n", count);}