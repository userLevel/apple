Asm65816 2.1.0Copyright 1996, Byte Works Inc.-- Change List --------------------------------------------------------------2.1.0       1.	Bugs squashed.  See bug notes, below.	     2.	The assembler supports the extended character set.  See		"Extended Characters," below.2.0.4       1.	In the 2.0.4 disk release, the shell and run-time libraries		underwent a significant change that forces text-based		assembly language programs to call initialization and		shutdown subroutines.  These subroutines, and some related		utility routines you may want to use, are described in		"System Functions," below.2.0.2       1.	Bugs squashed.  See bug notes, below.2.0.1       1.	Bugs squashed.  See bug notes, below.-- A Special Thanks... ------------------------------------------------------ORCA/M 2.0 has been a very long project, mostly because the necessities of running a business kept interfering with getting the programming done.  Along the way, I got lots of help and encouragement from a number of sources, and I'd like to mention a couple here.First, Zip Technologies provided a Zip GSX board for compatibility testing.  It works great, made development a lot quicker, and unlike my old accelerator, it gets along with my FPE card.  Thanks, Zip!Several people helped beta test ORCA/M 2.0; some have been at it for a year.  Beta testing is hard work, and occasionally dangerous to your sanity and the contents of your disks, so they deserve a lot of credit for sticking with the system.  They are, in no particular order, Mark Wolfgram, Mike Hackett, Rao Parik, Mike Morrison, Tim Swihart, Paul Elseth, Scott Gentry, Bryan Pietrzak, Gary Jacobson, Jim Moricondo, Jim Corbin, Steve Peterson, Niel Rosen, Matt Deatherage, Andy Nicholas, Morgan Davis and Jawaid Bazyar.Finally, over the entire course of the project, one person stands out.  Tim Swihart from Apple computer has been a constant help on ORCA/M 2.0.  He did so much for ORCA/M 2.0 that I can literally say that if it weren't for Tim, you would not be using this program today.  From start to finish, he provided input, encouragement, and a lot of internal help from Apple Computer to make the program possible.-- Manual Errata ------------------------------------------------------------Extended Keypad Support-----------------------At the insistence of one of our beta testers (he's bigger than me!) we added support in the editor for the extended keypad.  This was done after the manuals were printed, so you will not find any information about this feature in the manual.  Basically, if you are using the extended keypad, several of the keys map to existing editor commands.  These key equivalents are shown in the table below.Extended Key	Equivalent	Command------------	----------	-------F1		command-Z	undoF2		command-X	cutF3		command-C	copyF4		command-V	pastehelp		command-E	toggle insert/over strikecommand-help	command-?	helphome		command-<	go to beginning of linepage up		command-[	move up one pagedel		command-F	delete character rightend		command->	go to end of linepage down	command-]	move down one pageMiscellaneous-------------p. 177  The command "Set and Clear Tabs" is shown as open-apple TAB; it should be closed-apple TAB.p. 410, 2nd para.  Reads, "... the file names will be separated by a single space."  Should read, "... the file names will be separated by a single newline character.  The character code for newline is 10."-- Assembler changes introduced in Asm65816 2.1.0 ---------------------------Extended Characters-------------------Bear with me.  This is an ASCII file, and it describes non-ASCII material.Beginning with version 2.1, the PRIZM desktop editor supports the full Apple extended character set.  A file called FontTest on the samples disk shows the complete character set, and also contains a table that shows how to type each character from a U.S. English keyboard.ORCA/M supports the use of extended characters in strings, comments and labels.Any character you can type from PRIZM (or for that matter, any character with an ordinal value in [1..12, 14..255]) can appear in a DC S, character constant  or comment.  The ordinal value of the character matches the values shown in FontTest, as well as several official Apple publications.  Keep in mind that many output devices, including Apple's text console driver, do not support all of these characters.  ORCA/M will properly send extended characters to whatever output device you choose, but what happens when the output device tries to handle the character varies from device to device.Many of the characters in the extended character set are used in languages other than English, and are now allowed in label names.  There are two ways to think about which characters will work in a label.The simple way is to remember that all characters that look like a graphically modified ASCII alphabetic character or a Greek alphabetic character are allowed in labels.  For example, an a with two dots above it is now legal in a label.The more exact, and naturally more complicated way to think about which characters are allowed in a label is to list all of them.  Since this is an ASCII file, I'll list the ordinal values--you can cross reference the values in FontTest.  The ordinal values of the extended characters that are allowed in labels are [$80..$9F, $A7, $AE, $AF, $B4..$B9, $BB..$BF, $C4, $C6, $CB..$CF, $D8, $DE, $DF].The non-breaking space, sometimes called the sticky space (ordinal value $CA), is allowed in comments, strings and character constants, but not elsewhere.  -- Changes introduced in the 2.0.4 release of ORCA/M ------------------------System Functions================The run-time library for ORCA/M contains a number of functions that can be manipulated directly from ORCA/M.  Most of these are designed for ORCA/C and ORCA/Pascal, but a few are required to make assembly language programs work correctly with the new text input and output mechanism, which must initialize Apple's .CONSOLE driver.As a minimum, assembly language programs that use text input or output should make these calls:	jsl	SystemEnvironmentInit	jsl	SysIOStartupBefore exiting, be sure and shut down the I/O system with this call:	jsl	SysIOShutDownIf you will be calling subroutines written in a high-level ORCA language, and you will start from assembly language, add these calls to completely set up the environment expected by the ORCA high-level languages:	pha	phx	phy	jsl	SystemUserID	jsl	SystemMinStack	jsl	SystemSANEInit	jsl	SystemEnvironmentInit	jsl	SysIOStartupThese calls should be made right after you enter the program, and before the X, Y, and A registers are disturbed.  When you exit, make these calls:	jsl	SysIOShutDown	jsl	SystemSANEShutDown	jsl	SystemMMShutDownSource code for all of these subroutines can be found in ORCA Sublib Source, a separate package containing the source code for the ORCA subroutine libraries.SysCharErrout-------------	lda	char	pha	jsl	SysCharErroutWrites a character to error out.SysCharOut----------	lda	char	pha	jsl	SysCharOutWrites a character to standard out.SysIOShutDown-------------	jsl	SysIOShutDownCloses any files opened by SysIOStartup.SysIOStartup------------	jsl	SysIOStartupStarts the I/O system using the files in prefixes 10, 11 and 12.  If the files have already been opened, the existing open file is used, and the file is not closed when the program exits.  If prefix 10 is .CONSOLE, DRead calls are used to read lines of text, allowing editing.  In this case, you can use RETURN to finish a line, or ctrl@ or command. to signal an end of file.SysKeyAvail-----------	jsl	SysKeyAvailReturns 1 (TRUE) in the accumulator if there is an input character available, and 0 (FALSE) if there is not.If a character has been put back with a call to SysPutback, and has not been read by a subsequent call to SysKeyin, the result is TRUE.  The rest of the discussion assumes there is no character in the putback buffer.If input is redirected from a file, this function is equivalent to a test for end of file, returning the opposite result.For input from .CONSOLE, if there is remaining input in the line buffer, TRUE is returned.  If not, and if the Event Manager is active, the result is TRUE if there is a keypress or auto key event available, and FALSE if not.  If the Event Manager is not active, the result is TRUE if bit 7 of $00C000 is set, and FALSE if not.  ($00C000 is the hardware keyboard input location.)Note:  If input is from .CONSOLE, the fact that this function returns TRUE is not a guarantee that a call to SysKeyin will return immediately, since SysKeyin would wait for an entire line to be typed.SysKeyin--------	jsl	SysKeyinReads a character from standard in, returning the character in the accumulator.  If an end of file condition occurs, (char) 0 is returned.If input is from .CONSOLE, an entire line is read on the first call to this subroutine, and remaining characters are returned on subsequent calls until the line is exhausted; another call will then read in a new line.SysPutback----------	lda	char	pha	jsl	SysPutbackPlaces a character in a one-character putback buffer.  This character will be the next character returned by SysKeyin, and SysKeyAvail will return TRUE until the buffer is emptied.If another call is made to SysPutback before the first character is used, the original character is lost.SystemEnvironmentInit---------------------	jsl	SystemEnvironmentInitThis subroutine initializes global variables used by the compilers and their libraries.  It should be called by programs that are not started in the normal way as one step in initializing the run-time environment.SystemError-----------	lda	error	pha	jsl	SystemErrorWhen a run-time error occurs, libraries call SystemError.  By defining your own version of SystemError, you can intercept and handle run-time errors within your own program.  You can also call SystemError from within your own program if your own program needs to report an error.By default, SystemError calls two other library subroutines, SystemPrintError and SystemErrorLocation, to actually handle the error.  If you write your own version of SystemError, you may want to call one or both of these subroutines for some or all of the errors.The table below shows the various error numbers currently reported by the run-time libraries.Error Number	Error------------	-----1	Subrange exceeded2	File not open3	Read while at end of file4	I/O error5	Out of memory6	EOLN while at end of file7	Set overflow8	Jump to undefined case statement label	This error cannot be recovered from!9	Integer math error10	Real math error11	Underflow12	Overflow13	Divide by zero14	Inexact15	Stack overflow16	Stack errorSystemErrorLocation-------------------	jsl	SystemErrorLocationThis subroutine is called by SystemError when a run-time error is reported.  Normally, this subroutine prints any traceback information recorded due to the debug pragma, then shuts down the program.  This subroutine can be called from within a program to print traceback information during the debug cycle, or replaced with a different subroutine that either handles an error and recovers from it, or shuts down the system in a different way.  Traceback information is created by compiled C and Pascal programs when certain flags are set.SystemMinStack--------------	jsl	SystemMinStackThis subroutine finds the start of the segment containing the return address, setting the variable ~MinStack to this value.  ~MinStack must be set before calling SystemSANEInit or before using any debug options that check for stack overflows.SystemMMShutDown----------------	jsl	SystemMMShutDownThis subroutine shuts down the memory manager used by the run time libraries.  It should be called just before a program exits for the last time.  The memory manager is left in a restartable state after this call.SystemPrintError----------------	lda	error	pha	jsl	SystemPrintErrorWrites a text error message to standard out.  See SystemError for a list of the errors that SystemPrintError can handle, as well as the strings it will print.SystemQuitFlags---------------	lda	flags	pha	jsl	SystemQuitFlagsThis subroutine sets the quit flags field for the GS/OS Quit call that is made to exit from a program written in a high-level language.  See Apple IIGS GS/OS Reference for the allowed values for this parameter.Note:  If you set this parameter in a restartable program, be sure and reset it when the program starts.  To reset the value to the one normally used, pass 0.  The libraries do not normally initialize this value.SystemQuitPath--------------	ph4	pathAddr	jsl	SysCharErroutThis subroutine sets the quit pathname field for the GS/OS Quit call that is made to exit from a program written in a high-level language.  See Apple IIGS GS/OS Reference for the allowed values for the parameter.Note:  In restartable programs, be sure to initialize this variable to NULL manually.  The libraries do not normally initialize this value.SystemSANEInit--------------	jsl	SystemSANEInitThis subroutine is called to start SANE.This subroutine keeps track of whether SANE was initially started, starting SANE only if needed.  SystemSANEShutDown will only shut down SANE if it was started by this subroutine.SystemSANEShutDown------------------	jsl	SystemSANEShutDownIf SANE was started by an earlier call to SystemSANEInit, this subroutine shuts down the tool.SystemUserID	ph4	cline	ph2	userID	jsl	SystemUserIDThis subroutine should be called right after SystemMinStack by programs that are not started in the normal way.  userID is the user ID for the program.  cline can either be a pointer to a command line string or NULL.  If the string is a pointer to a command line string, the command line should start with an 8 character identifier naming the launcher, and be followed by the command line as a null terminated string.--- Bugs in Asm65816 2.0.2 that were fixed in Asm65816 2.1.0 ------------------1.  Segments that were longer than 64K on disk had the high word of the segment length trashed, causing the linker and utilities that work on object files to choke on the object file.(Jawaid Bazyar)--- Bugs in Asm65816 2.0.1 that were fixed in Asm65816 2.0.2 ------------------1.  The code to create the macro hash table trashed one byte of memory the assembler did not own.(Nathan Mates)--- Bugs in Asm65816 2.0.0 that were fixed in Asm65816 2.0.1 ------------------1.  The macro files now use &SYSCNT and &SYSNAME rather than &syscnt and &sysname.  This prevents errors when the case on directive is used.(Soenke Behrens, Bryan Pietrzak)2.  The GetMouse macro has a single parameter, now.(Johnathan Salz)3.  The COPY command placed the copied file name in an unpredictable location.(Jay Krell, Jawaid Bazyar)4.  The byte past the end of a symbol table buffer was occasionally wiped out.5.  Apple's M16.HyperXCMD did not end in a return.(Jack Burke)