         KEEP  STUFF         MCOPY T.MAC******************************************************************  TEST - Simple program to test if modified multiply routine*         works.******************************************************************T        START         PHK                            Program & data in same bank         PLB         MUL2  #3,#4,ANS                Multiply 3 by 4; store in ANS         PUTS  #'ANS: '                 Echo multiply result         PUT2  ANS,CR=T         LDA   #0         RTLANS      DS    2         END******************************************************************  ~MUL2 - Two-Byte Unsigned Integer Multiply**  Inputs:*        A - multiplicand*        X - multipier**  Outputs:*        A - result*        V - set if an overflow occurred**  Notes:*        1) Assumes long A and X on entry.******************************************************************~MUL2    START         LONGA ON         LONGI ONNUM1     EQU   1NUM2     EQU   5         PHD                            set up local data area on the stack         PHA         PHX         PHX         TSC         TCD         LDY   #16                      do 16 bit multiply         LDA   #0                       set up the high byte of the resultML3      LSR   NUM1+2                   test the LSB         BCC   ML4                      br if it is off         CLC                            add in partial product         ADC   NUM2ML4      ROR   A                        multiply answer by 2         ROR   NUM1         DEY                            loop         BNE   ML3         TAX                            check for overflow         BNE   OVFL         LDA   NUM1         BMI   OVFLML5      PLY                            restore stack, DP         PLY         PLY         PLD         CLV         RTLOVFL     PLY                            restore stack, DP         PLY         PLY         PLD         SEP   #%01000000               SEV         RTL         END