(*$Keep 'Gamm'*)(*--------------------------------------------------------------*)(*                                                              *)(*  Gamm                                                        *)(*                                                              *)(*  Test the speed of floating point operations in a mix tha    *)(*  is typical of scientific and engineering applications.      *)(*                                                              *)(*  To get the best performance from the desktop development    *)(*  environment, be sure TO turn debugging off from the         *)(*  Compile Dialog.  Use the Compile command from the Run menu  *)(*  to get the compile dialog.                                  *)(*                                                              *)(*--------------------------------------------------------------*)MODULE gamm;FROM InOut IMPORT WriteString, WriteLn, WriteInt, WriteReal;VAR  five,i,j,n,rep,ten,thirty: INTEGER;  acc,acc1,divn,rn,root,x,y: REAL;  a,b,c: ARRAY[1..30] OF REAL;BEGIN  WriteString('Start timing 15000 Gamm units');  WriteLn;  n := 50;  five := 5;  ten := 10;  thirty := 30;  rn := FLOAT(n);  divn := 1.0/rn;  x := 0.1;  acc := 0.0;  (*initialize a and b*)  y := 1.0;  FOR i := 1 TO 30 DO     a[i] := FLOAT(i);    b[i] := -y;    y := -y;  END;  (*one pass thru this loop corresponds to 300 gamm units*)  FOR rep := 1 TO n DO    (*first addition/subtraction loop*)    i := 30;    FOR j := 1 TO 30 DO      c[i] := a[i]+b[i];      i := i-1;    END;    (*first polynomial loop*)    y := 1.0;    FOR i := 1 TO ten DO      y := (y+c[i])*x;    END;    acc1 := y*divn;    (*first maximum element loop*)    y := c[11];    FOR i := 12 TO 20 DO      IF c[i] > y THEN	y := c[i];      END;    END;    (*first square root loop*)    root := 1.0;    FOR i := 1 TO 5 DO      root := 0.5*(root+y/root);    END;    acc1 := acc1+root*divn;    (*second addition/subtraction loop*)    FOR i := 1 TO 30 DO      a[i] := c[i]-b[i];    END;    (*second polynomial loop*)    y := 0.0;    FOR i := 1 TO ten DO      y := (y+a[i])*x;    END;    (*second square root loop*)    root := 1.0;    FOR i := 1 TO five DO      root := 0.5*(root+y/root);    END;    acc1 := acc1+root*divn;    (*first multiplication loop*)    FOR i := 1 TO thirty DO      c[i] := c[i]*b[i];    END;    (*second maximum element loop*)    y := c[20];    FOR i := 21 TO thirty DO      IF c[i] > y THEN	y := c[i];      END;    END;    (*third square root loop*)    root := 1.0;    FOR i := 1 TO 5 DO      root := 0.5*(root+y/root);    END;    acc1 := acc1+root*divn;    (*third polynomial loop*)    y := 0.0;    FOR i := 1 TO ten DO      y := (y+c[i])*x;    END;    acc1 := acc1+y*divn;    (*third maximum element loop*)    y := c[1];    FOR i := 2 TO ten DO      IF c[i] > y THEN	y := c[i];      END;    END;    (*fourth square root loop*)    root := 1.0;    FOR i := 1 TO 5 DO      root := 0.5*(root+y/root);    END;    acc1 := acc1+root*divn;    acc := acc+acc1;  END;  WriteInt(n, 12);  WriteString('  ');  WriteReal(acc, 12);  WriteString('  ');  WriteReal(acc1, 12);  WriteLn;END gamm.