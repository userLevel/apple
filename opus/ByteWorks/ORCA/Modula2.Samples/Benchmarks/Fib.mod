(*$Keep 'Fib'*)(*---------------------------------------------------------------*)(*                                                               *)(*  Fibonacci                                                    *)(*                                                               *)(*  Recursively computes Fibonacci numbers to test the speed of  *)(*  procedure calls.                                             *)(*                                                               *)(*  To get the best performance from the desktop development     *)(*  environment, be sure to turn debugging off from the          *)(*  Compile Dialog.  Use the Compile command from the Run menu   *)(*  to get the compile dialog.                                   *)(*                                                               *)(*---------------------------------------------------------------*)MODULE Fib;FROM InOut IMPORT WriteString, WriteLn, WriteInt;CONST  nTimes        =       10;             (*# iterations*)  number        =       23;             (*largest Fib. number in [0..maxint]*)VAR  i: INTEGER;                           (*loop variable*)  value: INTEGER;                       (*result of call to Fibonacci*)  PROCEDURE Fibonacci (x: INTEGER): INTEGER;  BEGIN    IF x > 2 THEN      RETURN Fibonacci(x-1)+Fibonacci(x-2)    END;    RETURN 1;  END Fibonacci;BEGINWriteInt(nTimes, 1);WriteString(' iterations:');WriteLn;FOR i := 1 TO nTimes DO  value := Fibonacci(number);END;WriteString('Fibonacci(');WriteInt(number, 1);WriteString(') = ');WriteInt(value, 1);WriteLn;END Fib.