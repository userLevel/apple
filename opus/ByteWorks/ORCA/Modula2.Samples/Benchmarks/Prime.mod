(*$Keep 'Prime'*)(*--------------------------------------------------------------*)(*                                                              *)(*  This is probably the most famous benchmark in use today.    *)(*  It tests the speed that a compiler can do logic and looping *)(*  operations.  While there are things that you can do to make *)(*  this benchmark run faster under ORCA/Pascal, we have not    *)(*  doctored it in any way - this is the original benchmark     *)(*  in its original form.                                       *)(*                                                              *)(*  To get the best performance from the desktop development    *)(*  environment, be sure to turn debugging off from the         *)(*  Compile Dialog.  Use the Compile command from the Run menu  *)(*  to get the compile dialog.                                  *)(*                                                              *)(*--------------------------------------------------------------*)MODULE prime;FROM InOut IMPORT WriteString, WriteLn, WriteInt;CONST   size = 8190;VAR   flags: ARRAY[0..size] OF BOOLEAN;   i, prime, k, count, iter: INTEGER;BEGIN   WriteString ('10 iterations');   WriteLn;   FOR iter := 1 TO 10 DO      count := 0;      FOR i := 0 TO size DO	 flags[i] := TRUE;      END;      FOR i := 0 TO size DO	 IF flags[i] THEN            prime := i+i+3;   (*       WriteInt(prime); WriteLn; *)            k := i+prime;            WHILE k <= size DO               flags[k] := FALSE;               k := k+prime;            END;            count := count+1;         END;      END;   END;   WriteInt(count, 1);   WriteString(' primes');   WriteLn;END prime.