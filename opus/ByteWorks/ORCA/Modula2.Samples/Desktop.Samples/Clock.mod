(*$Keep 'clock' *)(*$NDA Open Close Action 60 0FFFFH '--Clock\H**'*)MODULE Clock;(*  This desk accessory brings up a simple clock.  It can be  used as an outline when creating more complex desk accessories.  By Phil Montoya  Ported to Modula-2 by Peter Easdown  Copyright 1987-1990  Byte Works, Inc.*)FROM Common IMPORT String255, TextArray, ConvStrToPStr;FROM DeskManager IMPORT eventAction, runAction, clearAction;FROM EventManager IMPORT EventRecordPtr, updateEvt;FROM M2Lib IMPORT NDACode;FROM MiscToolSet IMPORT ReadASCIITime;FROM QuickDrawII IMPORT GrafPortPtr, GetPort, SetPort, MoveTo, DrawCString;FROM Strings IMPORT Assign, Length;FROM SYSTEM IMPORT ADR, BYTE;FROM WindowManager IMPORT ParamList, topMost, NewWindow, SetSysWindow,  CloseWindow, BeginUpdate, EndUpdate, FrameDefProc, DrawInfoBarProc;VAR  str1:         String255;  clockActive:  BOOLEAN;           (* are we already active flag *)  clockWinPtr:  GrafPortPtr;       (* clock desk acc window pointer *)  timeString:   TextArray;         (* string to hold time *)  clockWin:     ParamList;         (* window parameter list *)  aptr:         GrafPortPtr;  i, j:         CARDINAL;PROCEDURE DrawTime; FORWARD;PROCEDURE Action(code: CARDINAL; param: LONGINT);(*  Action - Handle an action call*)VAR  evPtr:    EventRecordPtr;  currPort: GrafPortPtr;BEGIN  CASE code OF    eventAction:  evPtr := VAL(EventRecordPtr, param);                  IF evPtr^.what = updateEvt THEN                    BeginUpdate(clockWinPtr);                    DrawTime;                    EndUpdate(clockWinPtr);                  END;  (* if updateEvt *)                  code := 0;  | runAction:    currPort := GetPort();                  SetPort(clockWinPtr);                  DrawTime;                  SetPort(currPort);                  code := 0;  | clearAction:  code := 1;  ELSE            code := 0;  END;  (* case code of *)END Action;PROCEDURE Close;(*  Close - closes the desk accessory if it is active*)BEGIN  IF clockActive THEN    CloseWindow(clockWinPtr);    clockActive := FALSE;  END;END Close;PROCEDURE DrawTime;(*  DrawTime - Reads the time and draws it in the window*)VAR  i: CARDINAL;BEGIN  ReadASCIITime(ADR(timeString));  FOR i := 0 TO HIGH(timeString) DO    IF ORD(timeString[i]) > 127 THEN      timeString[i] := CHR(ORD(timeString[i]) - 128);    END;  END;  MoveTo(7, 10);  DrawCString(ADR(timeString));END DrawTime;PROCEDURE Open(): GrafPortPtr;(*  Open - opens the desk accessory if it is not already active  Outputs:       GrafPortPtr - pointer to desk accessory window*)BEGIN  IF NOT clockActive THEN    ConvStrToPStr('Clock', str1);       (* assign the window title *)    WITH clockWin DO                    (* set window parameters *)      paramLength := 78;      wFrameBits := 0C0A0H;      wTitle := ADR(str1);      wRefCon := 0;      wZoom.v1 := 0;      wZoom.h1 := 0;      wZoom.v2 := 0;      wZoom.h2 := 0;      wColor := NIL;      wYOrigin := 0;      wXOrigin := 0;      wDataH := 0;      wDataW := 0;      wMaxH := 0;      wMaxW := 0;      wScrollVer := 0;      wScrollHor := 0;      wPageVer := 0;      wPageHor := 0;      wInfoRefCon := 0;      wInfoHeight := 0;      wFrameDefProc := FrameDefProc(NIL);      wInfoDefProc := DrawInfoBarProc(NIL);      wContDefProc := DrawTime;      wPosition.v1 := 50;      wPosition.h1 := 50;      wPosition.v2 := 62;      wPosition.h2 := 200;      wPlane := VAL(GrafPortPtr, topMost);      wStorage := NIL;    END;    clockWinPtr := NewWindow(ADR(clockWin));    (* open a window *)    SetSysWindow(clockWinPtr);             (* set it to the system window *)    clockActive := TRUE;                   (* we are now active *)  END;  RETURN clockWinPtr;                    (* return our window pointer *)END Open;BEGIN  IF NDACode = 0 THEN    IF clockActive THEN      Close;    END;  ELSE    clockActive := FALSE;  END;END Clock.