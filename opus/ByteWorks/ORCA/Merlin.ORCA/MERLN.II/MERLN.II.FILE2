******************************************************************  PRNT_LT - Prints label table.**  Inputs:*        LTHANDLE - pointer to label table*        INDEX    - 4-digit ASCII string giving the index*                   of a label in the label table**  Outputs:*        STRING   - ASCII string containing 'SYS' + the 4-digit*                   index number of the global label in the table*        L_STRING - ASCII string containing 'L' + the 4-digit*                   index number of the local label in the table*                   + 3 X's showing the position of the global*                   label counter attached to the local label*        V_STRING - ASCII string containing 'V' + the 4-digit*                   index number of the variable in the table*                   + 3 X's showing the position of the counter*                   attached to the variable******************************************************************PRNT_LT  START         USING COMMON         LONGA OFF         LONGI OFF         MOVE  LTHANDLE,TABLE,#2        Check if label table is empty         LDY   #0         LDA   (TABLE),Y         BNE   P0         RTS;;   Print label table headings.;P0       PUTCR         PUTCR         PUTCR         PUTS  #';     MERLIN LABEL                  '         PUTS  #'TRANSLATED LABEL',CR=T         PUTS  #';     ------------'         PUTS  #'                  ----------------',CR=T         PUTS  #';',CR=T;;   Print label table.;         MOVE  NUM,INDEX,#4             Initialize table index to 4 ASCII zeroes         MOVE  XXX,GBL_CNT,#3           Set global count to 3 x's         MOVE  XXX,VAR_CNT,#3           Set variable count to 3 x'sTOP      PUTS  #';     '         LDY   #0         LDA   (TABLE),Y         BNE   P1                       Check end of table         RTSP1       STA   T_SIZE                   Get size of next Merlin label         TAX         INY                            Check if Merlin variable         LDA   (TABLE),Y         CMP   #']'         BNE   P2A         DEX                            Skip VAR_CNT attached to label         DEX         DEX         JMP   P2AP2       INY                            Loop to move Merlin label to output         LDA   (TABLE),YP2A      STA   OUTPUT,Y         DBNE  X,P2         LDA   #BLANK                   Put blanks between fields in outputP3       INY         STA   OUTPUT,Y         CPY   #34         BLT   P3         LDY   #1                       Check if local label         LDA   (TABLE),Y         CMP   #':'         BNE   P4         MOVE  INDEX,L_INDEX,#4         LA    R0,L_STRING         JSR   MV_STRING         JMP   P6P4       CMP   #']'                     Check if variable         BNE   P5         MOVE  INDEX,V_INDEX,#4         LA    R0,V_STRING         JSR   MV_STRING         JMP   P6P5       LA    R0,STRING         JSR   MV_STRINGP6       LM    R0,#4                    Increment index         LA    R1,INDEX         JSR   INC_ASC         INC2  T_SIZE                   Get next table item         ADD2  TABLE,T_SIZE         JMP   TOPMV_STRING LDY  #0                       Move translated label to output         LDA   (R0),Y                   Move size of string to R2         STA   R2         INC2  R0                       Update pointer to beginning of string         LDX   #34MV1      LDA   (R0),Y         STA   OUTPUT,X         INY         INX         DBNE  R2,MV1         DEX         STX   OUTPUT         PUTS  OUTPUT-1,CR=T         RTST_SIZE   DS    2NUM      DC    C'0000'XXX      DC    C'xxx'         END******************************************************************  SYSPERR - Write a ProDOS Error**  INPUTS:*        A - ProDOS error number******************************************************************SYSPERR  START         CMP   #0         BNE   S0         JMP   ER5S0       STA   ERNUM                    save the registers         SAVE         MOVE  R0,SAVE,#5         LA    R0,ERADR                 find the error messageER1      LDY   #0         LDA   (R0),Y         BEQ   ER6         CMP   ERNUM         BEQ   ER3         INY         SEC         LDA   (R0),Y         ADC   R0         STA   R0         BCC   ER2         INC   R1ER2      INC2  R0         JMP   ER1ER3      INC2  R0                       write the error         LDA   (R0),Y         STA   R2         INC2  R0         LM    R3,#0ER4      LDY   R3         LDA   (R0),Y         STA   R4         PUTC  R4         INC   R3         DBNE  R2,ER4ER4A     PUTCR         MOVE  SAVE,R0,#5               restore the registers         RESTOREER5      RTSER6      PUTS  #'ProDOS error number '  write out an unidentified error         PUT2  ERNUM         JMP   ER4ASAVE     DS    5ERNUM    DS    1                        error number         DC    I1'0'ERADR    DE    01,'Bad system call number'         DE    04,'Bad system call parameter count'         DE    25,'Interupt table full'         DE    27,'I/O error'         DE    28,'No device connected'         DE    2B,'Disk write protected'         DE    2E,'Disk switched'         DE    40,'Invalid pathname'         DE    42,'Maximum number of files open'         DE    43,'Invalid reference number'         DE    44,'Directory not found'         DE    45,'Volume not found'         DE    46,'File not found'         DE    47,'Duplicate filename'         DE    48,'Volume full'         DE    49,'Volume directory full'         DE    4A,'Incompatible file format'         DE    4B,'Unsupported storage_type'         DE    4C,'End of file encountered'         DE    4D,'Position out of range'         DE    4E,'File access error'         DE    50,'File is open'         DE    51,'Directory structure damaged'         DE    52,'Not a ProDOS volume'         DE    53,'Invalid system call parameter'         DE    55,'Volume control block table full'         DE    56,'Bad buffer address'         DE    57,'Duplicate volume'         DE    5A,'File structure damaged'         DE    80,'Language not available'         DE    81,'Directory file..Not copied'         DE    82,'Acess error..Not copied'         DE    83,'Directory not found'         DE    84,'Unknown option'         DE    85,'File must be TXT or SRC'         DE    86,'Invalid device number'         DE    87,'No entries found'         DE    88,'File must be SYS or BIN'         DE    89,'File name error'         DE    8A,'Illegal path name'         DE    8B,'Invalid operand'         DE    8C,'Invalid flag'         DC    I1'0'         END******************************************************************  TERMINATE - Program wrap-up.  Closes any open files, and*              releases all memory used by program.**  Inputs:*        LTHANDLE - pointer to label table*        LENGTH - total length of memory allocated to label table*        FILE_FLAG - true if input file opened*        BUFF - pointer to input file I/O work area**  Outputs:*        - None -******************************************************************TERMINATE START         USING COMMON         LONGA OFF         LONGI OFF         RELEASE  M_BUFF,#1024         RELEASE  LTHANDLE,LENGTH         LDA   FILE_FLAG                Check if input file was opened so can         BEQ   RTS                      release memory used by file         RELEASE  BUFF,#1024RTS      CLOSE CL_DCB         RTSCL_DCB   DC    I1'1'         DC    I1'0'         END******************************************************************  TRANSLATE - Controlling routine for translating Merlin source*              code to ORCA source**  Inputs:*        EOF_FLAG - set to true if end-of-file encountered while*                   reading input line******************************************************************TRANSLATE START         USING COMMON         LONGA OFF         LONGI OFFESC      EQU   $1BKBD_BUFF EQU   $C000STROBE   EQU   $C010         PUTS  #'         MCOPY MERLIN.MACROS',CR=T    Use MERLIN.MACROS in new;                                                      source file;         PUTS  #'         MCOPY MY.MACROS',CR=T        Make user's macros;                                                      available in new file;         PUTS  #'TRANSLATION  START',CR=T              Needed by ORCA         PUTS  #'         LCLA  &'                     Use local ORCA symbolic         PUTS  #'LUP',CR=T                             variable for Merlin LUP;                                                      directiveT0       JSR   GET_LINE                 Get next line from input         LDA   EOF_FLAG                 Check for EOF         BNE   RTS         LDA   KBD_BUFF                 Check exit from translator by user         BPL   T1         STA   STROBE         AND   #$7F         CMP   #ESC         BEQ   RTST1       JSR   PROC_LINE         JSR   PUTLINE                  Write translated line to output         JMP   T0RTS      PUTS  #'         END',CR=T     Needed by ORCA         RTS         END