******************************************************************  TRANS_LABEL - Translates Merlin label to ORCA label.**  NOTES:  TRANS_LABEL first checks if the Merlin label is already*          in the label table.  If it is not, it adds the new*          label to the end of the table.  The search performed is*          linear.  Merlin labels are of 3 distinct types:*          global labels, local labels, and variables.**          Global labels are translated into 'SYS' + the 4-byte*          ASCII index of the label's position in the label table.**          Local labels begin with ':'  and are "attached"*          to global labels.  They are translated into 'L' + the*          4-byte ASCII index of the label's position in the*          table + a 3-byte ASCII global count.  (The global counter*          is incremented every time a new global label is defined.)**          Variables begin with ']' and are redefined every time*          they appear in the label field of a Merlin source line.*          Variables are translated into 'V' + the 4-byte ASCII index*          of its position in the label table + a 3-byte ASCII field*          which is initialized to '000' and then incremented whenever*          the variable is redefined.**          Global and local labels are stored into the table with a*          starting length byte, followed by the characters as they*          appear in the Merlin source file.  Variables are stored into*          the table with a starting length byte, followed by the*          characters as they appear in the Merlin source file, and*          ending with a 3-byte ASCII count attached to the variable.**  Inputs:*        KEY      - string containing label extracted from input line,*                   either in label field or operand field*        KEY_SIZE - size of label*        LT_PTR   - pointer to label table*        INDEX    - index of Merlin global label in table*        L_INDEX  - index of Merlin local label in table**  Outputs:*        R0 - address of translated label******************************************************************TRANS_LABEL  START         USING COMMON         LONGA OFF         LONGI OFF         MOVE  LTHANDLE,TABLE,#2        Address of label table into TABLE         MOVE  NUM,INDEX,#4             Initialize table index to 4 ASCII zeros         LDY   #0                       Check if key points to Merlin variable         LDA   (KEY),Y         CMP   #']'         BNE   TOP         LDA   MAC_FLG                  Check if within macro         BEQ   T0000         LDA   KEY_SIZE                 Macro var siz is 2 characters:  ]  1-8         BNE   CONT         RTSCONT     CMP   #2         BNE   T0000         INY                            Check if 2nd key char is digit         LDA   (KEY),Y         CMP   #'1'         BLT   T0000         CMP   #'9'         BGT   T0000         SEC         SBC   #'1'         TAX         LDA   PARMS,X         STA   SYMPARM+2         LA    R0,SYMPARM         RTST0000    JSR   TRANS_VAR         LA    R0,V_STRING              Return pointer to variable         RTS;;   First check if label is already in table.;TOP      LDY   #0         LDA   (TABLE),Y                Check next table item size         BEQ   NOT_FND                  Check null size         STA   T_SIZE                   Save size of current table elementT0       CMP   KEY_SIZE                 Find element with same size as key         BEQ   STR_SRCHT1       LM    R0,#4                    Increment index         LA    R1,INDEX         JSR   INC_ASCT2       INC2  T_SIZE                   Get next table element         ADD2  TABLE,T_SIZE         JMP   TOPSTR_SRCH LDY   KEY_SIZE                 Compare key chars to table charsT3       LDA   (TABLE),Y         DEY         BMI   FOUND         CMP   (KEY),Y         BEQ   T3         JMP   T1NOT_FND  ADD2  LT_SIZE,KEY_SIZE         First check if enough memory for label         CMP2  LT_SIZE,LENGTH         BLE   OKAY         PUTS  #'Aborting program:  Out of memory for label table',CR=T         JMP   EXITOKAY     LDY   #0                       Store label size into table         LDA   KEY_SIZE         STA   (TABLE),YT4       LDA   (KEY),Y                  Loop to store new label in table         INY         STA   (TABLE),Y         CPY   KEY_SIZE         BLT   T4         LDA   #0                       Reset end of table         INY         STA   (TABLE),YFOUND    LDY   #0                       Check if local label         LDA   (KEY),Y         CMP   #':'         BNE   T5         MOVE  INDEX,L_INDEX,#4         Set local label's index         LA    R0,L_STRING              Return pointer to local label         RTST5       LA    R0,STRING                Else return pointer to global label         RTSSYMPARM  DC    I1'2'         DC    C'&'         DS    1PARMS    DC    C'ABCDEFGH'T_SIZE   DS    2NUM      DC    C'0000'         END******************************************************************  TRANS_VAR - Translates Merlin variable to ORCA variable.**  NOTES:  TRANS_VAR first checks if the variable is in the label*          table.  If it is not, it adds the new variable to the*          end of the table.  The variables are translated*          into the string 'V' + a 4-digit index string + a*          3-digit qualifier attached to the variable.  The*          qualifier is also appended to the variable stored*          in the table.  See TRANS_LABEL above for a more*          thorough discussion of the label table.**  Inputs:*        KEY      - string containing variable extracted from input*                   line, either in LABEL field or OPERAND field*        KEY_SIZE - size of variable*        VT_PTR   - pointer to variable table*        V_INDEX  - index of Merlin variable in table*        NEW_VAR  - set if variable is in LABEL field so that it*                   should be redefined (i.e. VAR_CNT should be*                   incremented if the variable already appears in*                   the label table.**  Outputs:*        V_STRING - the ASCII string 'V' + V_INDEX + VAR_CNT******************************************************************TRANS_VAR START         USING COMMON         MOVE  NUM,V_INDEX,#4           Init variable index to 4 ASCII zeroes         LDA   KEY_SIZE                 Save size of original key         STA   SAV_SIZE         CLC                            Increment new key size by 3 to reflect         ADC   #3                       3-byte ASCII variable number attached to         STA   KEY_SIZE                 variable-type labelsTOP      LDY   #0                       Search table loop         LDA   (TABLE),Y         BEQ   NOT_FND                  Check end of table         STA   T_SIZE         CMP   KEY_SIZE                 Check for label of same size         BNE   CONT         INY                            Check for label which is a variable         LDA   (TABLE),Y         CMP   #']'         BNE   CONT         LDY   SAV_SIZE                 Check if table item matches keyT0       LDA   (TABLE),Y         DEY         BPL   T00         JMP   FOUNDT00      CMP   (KEY),Y         BEQ   T0CONT     LM    R0,#4                    Increment index         LA    R1,V_INDEX         JSR   INC_ASC         INC   T_SIZE                   Get next table item         ADD2  TABLE,T_SIZE         JMP   TOPNOT_FND  ADD2  LT_SIZE,KEY_SIZE         First check if enough memory for label         CMP2  LT_SIZE,LENGTH         BLE   OKAY         PUTS  #'Aborting program:  Out of memory for label table',CR=T         JMP   EXITOKAY     LDY   #0         LDA   KEY_SIZE                 Store size of new variable         STA   (TABLE),Y         LDX   SAV_SIZE                 Loop to store new variable in tableT1       LDA   (KEY),Y         INY         STA   (TABLE),Y         DBNE  X,T1         LM    COUNT,#3                 Store counter for variable into table         LDA   #'0'                     and V_STRING         LDX   #0T2       INY         STA   (TABLE),Y         STA   VAR_CNT,X         INX         DBNE  COUNT,T2         LDA   #0                       Reset end of table         INY         STA   (TABLE),Y         RTSFOUND    LDY   KEY_SIZE                 Move variable counter from table into         LDX   #2                       VAR_CNTF0       LDA   (TABLE),Y         STA   VAR_CNT,X         DEY         DBPL  X,F0         LDA   NEW_VAR                  Check if table's VAR_CNT is to be updatd         BEQ   F2         DEC   NEW_VAR                  Reset new-variable flag to zero         LM    R0,#3         LA    R1,VAR_CNT         JSR   INC_ASC         LDY   KEY_SIZE         LDX   #2F1       LDA   VAR_CNT,X         STA   (TABLE),Y         DEY         DBPL  X,F1F2       RTSNUM      DC    C'0000'COUNT    DS    1T_SIZE   DS    2SAV_SIZE DS    1         END******************************************************************  WR_MACRO - Writes output line to macro file MY.MACROS**  Notes:  System error returned from WRITE operation*          causes program to issue error message and abort.**  Inputs:*        OUTPUT - Pascal-type string containing translated*                 input line**  Outputs:*        WR_CNT - 4-byte value (low byte first) containing*                 number of bytes written.  The DCB for the*                 write operation is given in COMMON data area.*        OUTPUT - output line is written to the macro file******************************************************************WR_MACRO START         USING COMMON         LONGA OFF         LONGI OFF         INC   OUTPUT         LDX   OUTPUT         STX   WR_CNT         LDA   #0         STA   WR_CNT+1         LDA   #RETURN         STA   OUTPUT,X         WRITE WR_DCB         BCS   ERR         RTSERR      JSR   SYSPERR         JMP   TERMINATE         END