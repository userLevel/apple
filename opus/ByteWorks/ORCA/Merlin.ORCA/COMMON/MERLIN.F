******************************************************************  FIN - Translates Merlin directive FIN to a sequence symbol.**  NOTES:  The sequence symbol to assign is obtained by*          examining the SEQ_SYM array, and using the closest*          previous symbol that has not yet been used.**  Inputs:*        FIN_CNT - current count of number of FINs found in input*        DO_CNT  - current count of number of DOs found in input*        NEXT    - index into SEQ_SYM array*        SEQ_SYM - array of sequence symbols and use markers*                  used as branch points for conditional assembly*                  statements**  Outputs:*        FIN_CNT - updated count of number of FINs found in input;*                  reset to zero if FIN count equals DO count*        DO_CNT  - reset to zero if FIN count equals DO count*        ELSE_CNT - reset to zero if FIN count equals DO count*        SEQ_SYM  - array of sequence symbols; the symbol used*                   for the current FIN is marked as used.*                   When the number of FINs equals the number of*                   DOs, then all sequence symbols in the array*                   are marked as unused.*        NO_PRNT  - set if an error in the logic of the*                   conditional assembly language is found*        ERR_NUM  - the ERR1 byte of this array is set if the*                   NO-PREVIOUS-DO error is found; the ERR2 byte*                   is set if the INVALID-NESTING-OF-CONDITIONAL-*                   STATEMENTS error is detected******************************************************************FIN      START         USING COMMON         LONGA OFF         LONGI OFFOPSIZ    EQU   4ERR1     EQU   3ERR2     EQU   4         LDA   FIN_CNT                  Check for invalid FIN before continuing         CMP   DO_CNT         BLT   OK         INC   NO_PRNT                  Set flag to not print this source line         LDX   #ERR1                    Set byte in error array for this error         INC   ERR_NUM,X         RTSOK       LDX   NEXT                     Find preceding sequence symbol that hasF0       DEX                            not been used to assign to current FIN         LDA   SEQ_SYM,X         BEQ   F1         BPL   F0;;   If no unused sequence symbol can be found, then something is wrong with;   the conditional assembly logic.  Flag an error and exit.;         INC   NO_PRNT                  Set flag to not print this source line         LDX   #ERR2                    Set byte in error array for this error         INC   ERR_NUM,X         RTSF1       LDY   #2                       Move FIN's sequence symbol to output         TXA         CLC         ADC   #'I'         STA   PRNT,Y         INC   SEQ_SYM,X                Mark FIN's seq symbol as being used         PUTS  PRNT-1,CR=T         LDA   OUTPUT                   Check if original source line contains a         BEQ   F2                       label; if so, use ANOP as its opcode         LM    R0,#OPSIZ         LA    R1,TRANS         JSR   MOV_DIRF2       INC   FIN_CNT                  Check if need to reinitialize SEQ_SYM         LDA   FIN_CNT                  array         CMP   DO_CNT         BEQ   REINIT         RTSREINIT   LDX   #L:SEQ_SYM-1             Reset usage markers of each sequence         LDA   #0                       symbol to falseRE       STA   SEQ_SYM,X         DBPL  X,RE         LM    NEXT,#0                  Reset index into SEQ_SYM array         STA   DO_CNT                   Reset conditional assembly counters         STA   ELSE_CNT         STA   FIN_CNT         RTSPRNT     DC    I1'2'         DC    C'.'         DS    1TRANS    DC    C'ANOP'         END******************************************************************  FIND_INSTR - Determines line_type for source line containing opcode**  Inputs:*        OPCODE - opcode field returned from parsing routine**  Outputs:*        OPCODE - shifted to all upper case*        LINE_TYPE - 2 = 65816 instruction*                    3 = Merlin directive*                    4 = macro call**        ABS_FLAG - set to true if 4th byte of opcode contains*                   any character other than a 'D' and the opcode*                   is a valid 65816 instruction*        STR_FLG  - set if opcode is Merlin string directive******************************************************************FIND_INSTR  START         USING COMMON         LONGA OFF         LONGI OFF         LM    ABS_FLAG,#0              Set forced absolute addressing to false         LA    KEY,OPCODE+1             Set up key to search         LM    KEY_SIZE,#3         LDA   OPCODE                   Check if opcode is too large for         CMP   #6                       anything but a macro call         JGE   NOT_FOUND         CMP   #5                       Check if too large to be instruction         BEQ   F3         CMP   #3                       Check if too small to be instruction         BLT   F3;;   Search instruction table.;F2       LA    TABLE,OP_TABLE         JSR   SRCH         BCS   F3                       C flag set for unsuccessful search         LDA   OPCODE                   Check if opcode is 4 bytes long         CMP   #3         BEQ   F2A         LDA   OPCODE+4                 Check if 4th char of opcode is 'D,' used         CMP   #'D'                     only in directives.  If not 'D,' set         BEQ   F3                       forced absolute addressing flag.         INC   ABS_FLAG         LM    OPCODE,#3                Reset size of opcodeF2A      LDA   LINE_TYPE                Line_type = 2 for instruction         ORA   #INSTR         STA   LINE_TYPE         RTS;;   Search directive table.;F3       LA    TABLE,DIRCT              Address of table         JSR   SRCH         BCS   NOT_FOUND         LA    TABLE,STR_TBL            Check for string-handling directiveCHK1     LDY   KEY_SIZE                 Search table of string directivesCHK2     DEY         BMI   FOUND         LDA   (TABLE),Y         BEQ   NOT_FND         CMP   OPCODE+1,Y         BEQ   CHK2         ADD2  TABLE,KEY_SIZE         BNE   CHK1FOUND    INC   STR_FLG         BNE   RTSNOT_FND  LM    STR_FLG,#0         LDA   OPCODE                   Check if directive is one of the longer          CMP   #4                       directives - special handling         BLT   RTS         LDA   OP_NUM                   Check if directive is DEND         CMP   #14         BNE   F4         LDA   OPCODE+4         CMP   #'D'         BEQ   RTS         BNE   NOT_FOUNDF4       CMP   #21                      Check if directive is ELSE         BNE   F5         LDA   OPCODE+4         CMP   #'E'         BEQ   RTS         BNE   NOT_FOUNDF5       CMP   #35                      Check if directive is LSTDO         BNE   RTS         LDA   OPCODE+4         CMP   #'D'         BNE   NOT_FOUND         LDA   OPCODE+5         CMP   #'O'         BNE   NOT_FOUND         INC   OP_NUMRTS      LDA   LINE_TYPE                Line_type = 3 for directive         ORA   #DIRECTIVE         STA   LINE_TYPE         RTS;;   If opcode is not an instruction or a directive, then it must be a macro call;NOT_FOUND LDA  LINE_TYPE         ORA   #MACRO         STA   LINE_TYPE         RTSSTR_TBL  DC    C'ASC'         DC    C'DCI'         DC    C'FLS'         DC    C'INV'         DC    C'KBD'         DC    C'REV'         DC    C'STR'         DC    I3'0'OP_TABLE DC    C'ADC'                   Table of 65816 instructions         DC    C'AND'         DC    C'ASL'         DC    C'BCC'         DC    C'BCS'         DC    C'BEQ'         DC    C'BGE'         DC    C'BIT'         DC    C'BLT'         DC    C'BMI'         DC    C'BNE'         DC    C'BPL'         DC    C'BRA'         DC    C'BRL'         DC    C'BVC'         DC    C'BVS'         DC    C'BRK'         DC    C'CLC'         DC    C'CLD'         DC    C'CLI'         DC    C'CLV'         DC    C'CMP'         DC    C'COP'         DC    C'CPX'         DC    C'CPY'         DC    C'DEC'         DC    C'DEX'         DC    C'DEY'         DC    C'EOR'         DC    C'INC'         DC    C'INX'         DC    C'INY'         DC    C'JMP'         DC    C'JSL'         DC    C'JSR'         DC    C'LDA'         DC    C'LDX'         DC    C'LDY'         DC    C'LSR'         DC    C'MVN'         DC    C'MVP'         DC    C'NOP'         DC    C'ORA'         DC    C'PEA'         DC    C'PEI'         DC    C'PER'         DC    C'PHA'         DC    C'PHB'         DC    C'PHD'         DC    C'PHK'         DC    C'PHP'         DC    C'PHX'         DC    C'PHY'         DC    C'PLA'         DC    C'PLB'         DC    C'PLD'         DC    C'PLP'         DC    C'PLX'         DC    C'PLY'         DC    C'REP'         DC    C'ROL'         DC    C'ROR'         DC    C'RTI'         DC    C'RTL'         DC    C'RTS'         DC    C'SBC'         DC    C'SEC'         DC    C'SED'         DC    C'SEI'         DC    C'SEP'         DC    C'STA'         DC    C'STP'         DC    C'STX'         DC    C'STY'         DC    C'STZ'         DC    C'TAX'         DC    C'TAY'         DC    C'TCD'         DC    C'TCS'         DC    C'TDC'         DC    C'TRB'         DC    C'TSB'         DC    C'TSC'         DC    C'TSX'         DC    C'TXA'         DC    C'TXS'         DC    C'TXY'         DC    C'TYA'         DC    C'TYX'         DC    C'WAI'         DC    C'XBA'         DC    C'XCE'         DC    I3'0'DIRCT    DC    C'   '                 Table of Merlin directives         DC    C'=  '         DC    C'<<<'         DC    C'>>>'         DC    C'--^'         DC    C'ASC'         DC    C'AST'         DC    C'CHK'         DC    C'CYC'         DC    C'DA '         DC    C'DAT'         DC    C'DB '         DC    C'DCI'         DC    C'DDB'         DC    C'DEN'         DC    C'DFB'         DC    C'DO '         DC    C'DS '         DC    C'DSK'         DC    C'DUM'         DC    C'DW '         DC    C'ELS'         DC    C'END'         DC    C'ENT'         DC    C'EOM'         DC    C'EQU'         DC    C'ERR'         DC    C'EXP'         DC    C'EXT'         DC    C'FIN'         DC    C'FLS'         DC    C'HEX'         DC    C'IF '         DC    C'INV'         DC    C'KBD'         DC    C'LST'         DC    C'LST'         DC    C'LUP'         DC    C'MAC'         DC    C'MX '         DC    C'OBJ'         DC    C'ORG'         DC    C'PAG'         DC    C'PAU'         DC    C'PMC'         DC    C'PUT'         DC    C'REL'         DC    C'REV'         DC    C'SAV'         DC    C'SKP'         DC    C'STR'         DC    C'SW '         DC    C'TR '         DC    C'TYP'         DC    C'USE'         DC    C'USR'         DC    C'VAR'         DC    C'XC '         DC    I3'0'         END         APPEND  MERLIN.G