;        KEEP  MERLN.GS;        MCOPY MERLN.GS.MACROS;        COPY  MERLN.GS.FILE         KEEP  MERLN.II         LIST  OFF         SYMBOL OFF         MCOPY MERLN.II.MACROS         COPY  MERLN.II.FILE         COPY  MERLN.II.FILE2         COPY  MERLN.II.FILE3******************************************************************  ANOP - Translates Merlin lines which are label-only lines.******************************************************************ANOP     START         USING COMMON         LONGA OFF         LONGI OFFOPSIZ    EQU   4         LM    R0,#OPSIZ         LA    R1,TRANS         JMP   MOV_DIRTRANS    DC    C'ANOP'         END******************************************************************  AST - Translates Merlin directive AST to row of asterisks.**  NOTES:  The operand must be a simple decimal number.**  Inputs:*        OPERAND - Pascal-type string containing entire*                  operand extracted from input line**  Outputs:*        OUTPUT[0] - updated length of output line.*        OUTPUT    - output line contain OPERAND number of*                    asterisks.*        NO_PRNT   - set if operand is not a decimal number*        ERR_NUM   - ERR byte is set if operand not decimal value******************************************************************AST      START         USING COMMON         LONGA OFF         LONGI OFFVALUE    EQU   R12ERR      EQU   0                        Internal error no. for oprnd limitations         LDA   OPERAND+1                Check that operand is a decimal value         CMP   #'$'         BEQ   ERROR         CMP   #'%'         BEQ   ERROR         CMP   #'0'         BLT   ERROR         CMP   #'9'         BLE   OKERROR    INC   NO_PRNT                  Set flag to not print this source line         LDX   #ERR                     Set byte in error array for this error         INC   ERR_NUM,X         RTSOK       CNVS2 OPERAND-1,VALUE          Convert number string to 2-byte integer         LDX   VALUE                    Record new size of output line         STX   OUTPUT         LDY   #1                       Move VALUE number of asterisks to output         LDA   #'*'TOP      STA   OUTPUT,Y         INY         DBNE  X,TOP         RTS         END******************************************************************  BINARY - Skips over Merlin operand which is a binary number,*           recording its size.**  Inputs:*        OPERAND  - entire operand field extracted from input line,*                   stored as Pascal-type string*        X1       - current pointer into OPERAND field*        SIZE     - current size of OPERAND field*        OPR_SIZE - size of binary number upon entry to routine**  Outputs:*        OPR_SIZE - final size of binary number found in OPERAND*        SIZE     - size of OPERAND field after binary extracted*        X1       - index into OPERAND beyond binary number*        C        - cleared to show current operand was extracted*                   from OPERAND, and not derived elsewhere******************************************************************BINARY   START         USING COMMON         LONGA OFF         LONGI OFF         LDX   X1TOP      LDA   OPERAND,X                While (binary_number) do         CMP   #'0'         BEQ   B0         CMP   #'1'         BNE   RTSB0       INX                              get next binary character         INC   OPR_SIZE                   increment size of binary number         DBNE  SIZE,TOP                   check for end of OPERAND fieldRTS      CLC         STX   X1         RTS         END******************************************************************  CHAR_STR - Evaluates a Merlin operand consisting of a single*             ASCII character, starting with, or enclosed by,*             quotes, or an operand which is multi-character*             string.**  Inputs:*        OPERAND  - entire operand field extracted from input line*        X1       - current pointer into OPERAND field*        SIZE     - current size of OPERAND field*        OPR_SIZE - size of character string upon entry to CHAR1*        DELIM    - delimiter marking beginning of string**  Outputs:*        OPR_SIZE - final size of character string.*        SIZE     - size of OPERAND field after binary extracted*        X1       - index into OPERAND beyond binary number*        C        - cleared to show current operand was extracted*                   from OPERAND.  Set if current operand not*                   within OPERAND field.******************************************************************CHAR_STR START         USING COMMON         LONGA OFF         LONGI OFF         LDX   X1         INX         INC   OPR_SIZE         DEC   SIZE                     Check end of OPERAND field         BEQ   CHARACTER         LDA   OPERAND,X                Check if operand is single char string         CMP   #')'                     Check if char after quoted char is an         BEQ   CHARACTER                operator; if it is, then the quoted char         CMP   #']'                     is missing an ending delimiter.         BEQ   CHARACTER                If the next char is not an operator,         CMP   #','                     then the delimiter marks the beginning         BEQ   CHARACTER                of a d-string.         CMP   #'+'         BEQ   CHARACTER         CMP   #'-'         BEQ   CHARACTER         CMP   #'/'         BEQ   CHARACTER         CMP   #'*'         BEQ   CHARACTER         CMP   #'!'         BEQ   CHARACTER         CMP   #'.'         BEQ   CHARACTER         CMP   #"&"         BNE   TOPCHARACTER  LDA DELIM                    Put character in delimited string field         STA   CH_OPR         STA   CH_OPR+2         DEX         LDA   OPERAND,X         STA   CH_OPR+1         MOVE  OPR_PTR,SV_OP_PTR,#2     Save size & pointer into operand         LM    SV_OP_SIZ,OPR_SIZE         LM    OPR_SIZE,#3              Load new size & pointer to operand         LA    OPR_PTR,CH_OPR         INC   X1         SEC         RTSTOP      CMP   DELIM                    Loop to extract the rest of the string         BEQ   RTS         INX         LDA   OPERAND,X         INC   OPR_SIZE         DBNE  SIZE,TOPRTS      LDA   DELIM                    Ensure beg & ending delimiters match         STA   OPERAND,X         INX         STX   X1         INC   OPR_SIZE         DEC   SIZE         CLC         RTSCH_OPR   DS    3         END******************************************************************  CHK_LABEL - Checks if label contains non-ORCA characters**  Inputs:*        KEY      - pointer to label extracted from Merlin source line*        KEY_SIZE - size of label pointed to by KEY**  Outputs:*        C flag   - set if label contains non-ORCA characters,*                   otherwise clear******************************************************************CHK_LABEL  START         USING COMMON         LONGA OFF         LONGI OFF         LDY   #0         LDA   (KEY),Y                  Check 1st character         JSR   IS_OK         BCS   NOT_OK         LDY   KEY_SIZE                 Check for any non-ORCA characters         DEY         BEQ   RTS                      Check label having only 1 characterTOP      LDA   (KEY),Y         JSR   IS_OK         BCC   C1         CMP   #'0'         BLT   NOT_OK         CMP   #'9'         BGT   NOT_OKC1       DBNE  Y,TOPRTS      CLC         RTSNOT_OK   SEC         RTS         END******************************************************************  CYC - Translate Merlin directive CYC to ORCA directive INSTIME**  NOTES:  A blank operand is translated to 'ON.'  An operand of*          'AVE' is translated to 'ON.'  The user should note*          that ORCA's INSTIME directive does not average or*          total cycle times as does the Merlin directive CYC.**  Inputs:*        OPERAND[0] - total size of operand extracted from input*        OPERAND    - entire operand field from input line******************************************************************CYC      START         USING COMMON         LONGA OFF         LONGI OFFOPSIZ    EQU   7         LM    R0,#OPSIZ                Move 'INSTIME' to output line         LA    R1,TRANS         JSR   MOV_DIR         LDA   OPERAND                  Check if operand is blank or AVE         BEQ   C1         LDA   OPERAND+1         JSR   SHIFT         CMP   #'A'         BEQ   C1         JMP   INSTR_OPRNDC1       LM    R0,#2                    Move ON to operand field if blank         LA    R1,ON                    or equal to AVE         JMP   MOV_OPRTRANS    DC    C'INSTIME'ON       DC    C'ON'         END         APPEND MERLIN.D