******************************************************************  DA - Translates Merlin directives DA and DW as ORCA directive*       DC I.**  Notes:  The opcode field of the translated line will contain*          DC (define constant) & the operand field will have*          I'expr'  where expr is the translated Merlin expression.**        OPERAND  - entire operand field extracted from input line*        OPRND_COL - column in output to begin operand field**  Outputs:*        OUTPUT - formatted output line, represented as a*                 Pascal-type string.*        OPRND_COL - updated during expression evaluation as the*                    translated operand field is built******************************************************************DA       START         USING COMMON         LONGA OFF         LONGI OFFOPSIZ    EQU   2COUNT    EQU   R6SAVEX    EQU   R7         LM    R0,#OPSIZ                move 'DC' to opcode of output line         LA    R1,TRANS         JSR   MOV_DIR         LM    COUNT,OPERAND            record size of OPERAND         BNE   D1         RTSD1       LDY   OPRND_COL                initialize output column for operands         LDA   #"I"                     put I' at beginning of operand field         STA   OUTPUT,Y         INY         LDA   #"'"         STA   OUTPUT,Y         STY   OUTPUT         INY         STY   OPRND_COL         LDX   #1                       loop to extract operandsTOP      LDY   #0TOP2     LDA   OPERAND,X                loop to extract next operand         CMP   #','         BEQ   OUT         INY         STA   OPERAND,Y                move it to the front of OPERAND         INX         DBNE  COUNT,TOP2OUT      STX   SAVEX                    send through expression evaluator         STY   OPERAND         JSR   INSTR_OPRND         LDX   SAVEX                    increment loop variables         INX         DBEQ  COUNT,RTS                check end of input         BMI   RTS         LDY   OUTPUT         INY         LDA   #','                     put comma between parameters         STA   OUTPUT,Y         STY   OUTPUT         INY         STY   OPRND_COL         JMP   TOPRTS      LDY   OUTPUT                   put ending '         INY         LDA   #"'"         STA   OUTPUT,Y         STY   OUTPUT         RTSTRANS    DC    C'DC'         END******************************************************************  DB - Translates Merlin directives DB and DFB as ORCA directive*       DC I1.**  Notes:  The opcode field of the translated line will contain*          DC (define constant) & the operand field will have*          I1'expr'  where expr is the translated Merlin expression.**        OPERAND  - entire operand field extracted from input line*        OPRND_COL - column in output to begin operand field**  Outputs:*        OUTPUT - formatted output line, represented as a*                 Pascal-type string.*        OPRND_COL - updated during expression evaluation as the*                    translated operand field is built******************************************************************DB       START         USING COMMON         LONGA OFF         LONGI OFFOPSIZ    EQU   2OPRSIZ   EQU   3HISIZ    EQU   3COUNT    EQU   R6SAVEX    EQU   R7         LM    R0,#OPSIZ                move 'DC' to opcode of output line         LA    R1,TRANS1         JSR   MOV_DIR         LM    COUNT,OPERAND            record size of OPERAND         BNE   D1         RTSD1       LDY   OPRND_COL                initialize output column for operands         LDX   #0                       put I1' at beginning of operand fieldD2       LDA   TRANS2,X         STA   OUTPUT,Y         INY         INX         CPX   #OPRSIZ         BLT   D2         STY   OPRND_COL         DEY         STY   OUTPUT         LDX   #1                       loop to extract operandsTOP      LDY   #0TOP2     LDA   OPERAND,X                loop to extract next operand         CMP   #','         BEQ   OUT         CMP   #'#'                     ignore # and < embedded in operand         BEQ   D4         CMP   #'<'         BEQ   D4         CMP   #'>'                     set high-byte flag if char is '>'         BNE   D3         INC   HI_FLAG         BNE   D4D3       INY         STA   OPERAND,Y                move current operand to front of OPERANDD4       INX         DBNE  COUNT,TOP2OUT      STX   SAVEX                    send through expression evaluator         STY   OPERAND         JSR   INSTR_OPRND         LDY   OUTPUT         LDA   HI_FLAG                  check if current oprnd specified hi-byte         BEQ   D7         DEC   HI_FLAG         LDX   #0                       append '|-8' to end of current operandD6       LDA   TRANS3,X         INY         STA   OUTPUT,Y         INX         CPX   #HISIZ         BLT   D6         STY   OUTPUTD7       DBEQ  COUNT,RTS                check end of input         BMI   RTS         LDX   SAVEX                    increment loop variables         LDA   OPERAND,X                put comma between parameters         INY         STA   OUTPUT,Y         STY   OUTPUT         INY         STY   OPRND_COL         INX         JMP   TOPRTS      LDY   OUTPUT                   put ending '         INY         LDA   #"'"         STA   OUTPUT,Y         STY   OUTPUT         RTSTRANS1   DC    C'DC'TRANS2   DC    C"I1'"TRANS3   DC    C'|-8'HI_FLAG  DS    1         END******************************************************************  DDB - Translates the Merlin directive DDB using a special*        macro.**  Notes:  The opcode field of the translated line will contain*          DDB & the operand field will have the translated*          Merlin expression enclosed in parentheses.**  Inputs:*        OPERAND  - entire operand field extracted from input line*        OPRND_COL - column in output to begin operand field**  Outputs:*        OUTPUT - formatted output line, represented as a*                 Pascal-type string.*        OPRND_COL - updated during expression evaluation as the*                    translated operand field is built******************************************************************DDB      START         USING COMMON         LONGA OFF         LONGI OFFCOUNT    EQU   R6SAVEX    EQU   R7         LM    R0,OPCODE                move 'DC' to opcode of output line         LA    R1,OPCODE+1         JSR   MOV_DIR         LM    COUNT,OPERAND            record size of OPERAND         BNE   D1         RTSD1       LDY   OPRND_COL                initialize output column for operands         LDA   #"("                     put ( at beginning of operand field         STA   OUTPUT,Y         STY   OUTPUT         INY         STY   OPRND_COL         LDX   #1                       loop to extract operandsTOP      LDY   #0TOP2     LDA   OPERAND,X                loop to extract next operand         CMP   #','         BEQ   OUT         INY         STA   OPERAND,Y                move it to the front of OPERAND         INX         DBNE  COUNT,TOP2OUT      STX   SAVEX                    send through expression evaluator         STY   OPERAND         JSR   INSTR_OPRND         LDX   SAVEX                    increment loop variables         INX         DBEQ  COUNT,RTS                check end of input         BMI   RTS         LDY   OUTPUT         INY         LDA   #','                     put comma between parameters         STA   OUTPUT,Y         STY   OUTPUT         INY         STY   OPRND_COL         JMP   TOPRTS      LDY   OUTPUT                   put ending )         INY         LDA   #")"         STA   OUTPUT,Y         STY   OUTPUT         RTS         END******************************************************************  DECIMAL - Skips over a Merlin operand which is a decimal number,*            counting the size of the number as it goes.**  Inputs:*        OPERAND  - entire operand field extracted from input line*        X1       - current pointer into OPERAND field*        SIZE     - current size of OPERAND field*        OPR_SIZE - size of decimal number upon entry to DECIMAL**  Outputs:*        OPR_SIZE - final size of decimal number*        SIZE     - size of OPERAND after decimal number evaluated*        X1       - pointer into OPERAND beyond decimal number******************************************************************DECIMAL  START         USING COMMON         LONGA OFF         LONGI OFF         LDX   X1TOP      LDA   OPERAND,X                While (decimal_number) do:         CMP   #'0'         BLT   RTS         CMP   #'9'+1         BGE   RTS         INC   OPR_SIZE         INX         DBNE  SIZE,TOP                   check end of OPERAND fieldRTS      CLC         STX   X1                       Save current OPERNAND pointer         RTS         END******************************************************************  DO - Translates Merlin directive DO into ORCA directive AIF.**  Inputs:*        DO_CNT    - current number of un-END-ed DOs found in source*        SEQ_SYM   - array containing sequence symbols to branch*                    to in AIF operand*        OPRND_COL - column in output to begin operand field**  Outputs:*        DO_CNT    - incremented to show another DO has been found*                    in the source file; if more than 8 DOs have*                    been found without a FIN, it is reset to zero*        SEQ_SYM   - reintialized to unused if this is the ninth*                    DO found in a row without any FINs*        ELSE_CNT  - reset to zero if more than 8 DOs found*        FIN_CNT   - reset to zero if more than 8 DOs found*        CMMNT_COL - updated if operand reaches beyond predefined*                    comment column in output line*        NEXT      - incremented to point to next sequence symbol*                    in SEQ_SYM array; reset to zero if more than*                    8 DOs found in input******************************************************************DO       START         USING COMMON         LONGA OFF         LONGI OFFMAX      EQU   8OPSIZ    EQU   3OPRSIZ   EQU   5         INC   DO_CNT                   Check if need to reinitialize SEQ_SYM         LDA   DO_CNT                   array         CMP   #MAX         BLE   OK         LDX   #L:SEQ_SYM-1             Mark used sequence symbols as unused         LDA   #0D0       STA   SEQ_SYM,X         DBPL  X,D0         LM    NEXT,#0                  Reset index into SEQ_SYM array         STA   DO_CNT                   Reset conditional assembly counters         STA   ELSE_CNT         STA   FIN_CNTOK       LM    R0,#OPSIZ                Move 'AIF' to opcode field of output         LA    R1,TRANS         JSR   MOV_DIR         LDA   #'('                     Move '(expr)'=0,.SEQ_SYM(next) to         LDX   OPRND_COL                operand field of output         STA   OUTPUT,X         INX         STX   OPRND_COL                Update operand column of output         STX   OUTPUT                   Update size of output line         JSR   INSTR_OPRND              Perform expression evaluation of operand         LDX   OUTPUT         LDY   #0D2       LDA   OPR_END,Y         INX         STA   OUTPUT,X         INY         CPY   #OPRSIZ         BNE   D2         LDA   NEXT         CLC         ADC   #'I'         INX         STA   OUTPUT,X         STX   OUTPUT         INX                            Check if need to update comment column         INX         CPX   CMMNT_COL         BLT   RTS         STX   CMMNT_COLRTS      INC   NEXT                     Update index into SEQ_SYM array         RTSTRANS    DC    C'AIF'OPR_END  DC    C')=0,.'         END******************************************************************  DO_COMMENT - Formats line containing only a comment.**  Inputs:*        LINE      - input source line*        COMMENT   - column in LINE in which comment field starts*        CMMNT_COL - column in OUTPUT where comment is to begin**  Outputs:*        OUTPUT - formatted output line, represented as a*                 Pascal-type string.******************************************************************DO_COMMENT START         USING COMMON         LONGA OFF         LONGI OFF         LM    OUTPUT+1,#';'            Put semicolon in 1st column of output         LDX   COMMENT                  Put comment starting in column 41         LDY   CMMNT_COLTOP      LDA   LINE,X         STA   OUTPUT,Y         CMP   #RETURN         BEQ   RTS         INX         INY         BNE   TOPRTS      STY   OUTPUT                   Set size of output line         RTS         END         APPEND MERLIN.DOD