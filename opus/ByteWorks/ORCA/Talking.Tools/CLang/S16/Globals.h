/***************************************************************** Globals header file.** Written by Barbara Allred and Mike Westerfield** Copyright 1991, Byte Works, Inc.* Copyright 1987-1991, First Byte, Inc.****************************************************************/#include <Types.h>#include <Locator.h>#include <MiscTool.h>#include <Memory.h>#include <QuickDraw.h>#include <Event.h>#include <Control.h>#include <Window.h>#include <Menu.h>#include <LineEdit.h>#include <Dialog.h>#include <STDFile.h>#include <List.h>#include <Print.h>#include <IntMath.h>#include <TextEdit.h>#include "Speech.h"#include <GSOS.h>#include <Desk.h>#pragma lint -1#include <string.h>#include <ctype.h>#include <orca.h>/** Constants **************************************************/#define maxWindows      10             /* user winds 0-9 + dict wind    */#define maxUserWindows  9              /* allowing user windows 0-9     */#define dictWindNum     10             /* dict wind's index into array  */#define maxDCtls        15             /* # dict ctl hndls in rsrc fork */#define maxListSize     0x3FFF         /* max # members in dict list    */#define isDirty         0x0040         /* mask to check dirty bit       */#define dictFileType    0xF2           /* File types */#define phonFileType    0xF1#define ASCIIFileType   0x04#define refIsPtr        0              /* Reference types */#define refIsHndl       1#define refIsRsrc       2#define refIsSpecial    3#define startStopID     0x00000001     /* Resource IDs */#define menuBarID       0x00000064#define appleMenuID     0x00000001#define fileMenuID      0x00000002#define editMenuID      0x00000003#define speechMenuID    0x00000004#define windowID        0x00000006#define textEditID      0x00000007#define dictWindID      0x00000200#define dictCtlID       0x00000201#define undoID          250            /* Menu item IDs */#define cutID           251#define copyID          252#define pasteID         253#define clearID         254#define closeID         255#define aboutID         256#define newID           257#define openID          258#define saveID          259#define saveAsID        260#define pSetUpID        261#define printID         262#define quitID          263#define speakID         264#define phonID          265#define setID           266#define dictID          267#define activeID        268#define diskSwitchedErr 0x002E         /* System error constants */#define volNotFoundErr  0x0045#define fileNotFoundErr 0x0046/** Global types ***********************************************/typedef int menuIDs;                   /* menu items */                                       /* window types */typedef enum {textTyp, phonTyp, dictTyp} windType;typedef struct {                       /* GS/OS input strings */   int  size;   char name [19];   } gsosInString19;typedef struct {   int  size;   char name [15];   } gsosInString15;typedef union {                        /* track window #, window type */   long l;   struct {      int      wNum;      windType wTyp;      } a;   } RefConRec;typedef struct  {                      /* information about the front window */   GrafPortPtr currWindow;   int         currWindNum;   windType    currWindTyp;   } windInfoRec;typedef struct {                      /* list member record, for dict display */   pString32Ptr phonPtr;   int          flag;   int          visNum;   int          memNum;   } listMember, *listMemberPtr;typedef struct {                       /* dict editor's control handles */   CtlRecHndl fnCtlHndl;               /*   filename, static text       */   CtlRecHndl listCtlHndl;             /*   list control                */   CtlRecHndl dontCare1;               /*   window's title              */   CtlRecHndl dontCare2;               /*   phonetics prompt            */   CtlRecHndl phonCtlHndl;             /*   phonetics word, edit box    */   CtlRecHndl dontCare3;               /*   English word prompt         */   CtlRecHndl englCtlHndl;             /*   English word, edit box      */   CtlRecHndl dontCare4;               /*   word operations             */   CtlRecHndl dontCare5;               /*   add button                  */   CtlRecHndl dontCare6;               /*   delete button               */   CtlRecHndl dontCare7;               /*   translate button            */   CtlRecHndl dontCare8;               /*   speak button                */   CtlRecHndl dontCare9;               /*   file operations             */   CtlRecHndl dontCare10;              /*   save button                 */   CtlRecHndl dontCare11;              /*   load button                 */   CtlRecHndl dontCare12;              /*   clear button                */   CtlRecHndl dontCare13;              /*   print button                */   CtlRecHndl dontCare14;              /*   exit button                 */   } dictControls, *dictCtlsPtr;typedef struct {                       /* window tracking structure           */   boolean        upFlg;               /* true if window is open              */   boolean        fileFlag;            /* true if wind assoc. with disk file  */   GrafPortPtr    windPtr;             /* pointer to window's grafPort        */   int            wNum;                /* window's index in userWind array    */   char           wName [18];          /* window's title                      */   GSString255Ptr wPathName;           /* pointer to window file's pathname   */   handle         wPathHandle;         /* handle to file's pathname, from SFO */   windType       wTyp;                /* type of the window                  */   union {      CtlRecHndl  teHndl;              /* textTyp, phonTyp: text edit control */      dictCtlsPtr dCtls;               /* dictTyp: ptr to ctl hndl record     */      } wCtl;   } windowRec;typedef struct {                        /* smallest GS/OS output string */   int  maxLength;   int  currLength;   char text [2];   } minGSOSOutString;typedef char minPString [2];typedef char pString [256];                                       /* General variables */                                       /*********************/extern int numWindows;                 /* # currently open windows */extern int userWindows;                /* # open user windows      */extern dictControls dictCtls;          /* dict's control hndls  */extern windowRec userWind [11];        /* info to track windows */extern int       myID;                 /* SpeakIt's user ID                 */extern boolean   done;                 /* true if user selects Quit         */extern handle    buffer;               /* buffer for window's text          */extern long      bufferSize;           /* size of this buffer               */extern long      startStopRef;         /* hndl from StartUpTools call       */extern TEInfoRec textInfo;             /* # chars/# lines in document       */extern int       nextEntry;            /* entry # of next dict. element     */extern boolean   dictChanged;          /* true if dict. changed since saved */extern gsosInString15 fileDName;       /* name when dict is from file */extern ListTemplate   listTempl;       /* dict list control template  */                                       /* Data structures for GS/OS calls */                                       /***********************************/extern minGSOSOutString options;extern OpenRecGS        openRec;extern IORecGS          readRec;extern RefNumRecGS      closeRec;extern NameRecGS        destroyRec;extern IORecGS          writeRec;extern FileInfoRecGS    getFileInfoRec;extern CreateRecGS      createRec;extern SetPositionRecGS setEOFRec;                                       /* Common button titles */                                       /************************/extern char okTitle [3];               /* OK button's descriptor     */extern char cancelTitle [7];           /* Cancel button's descriptor */extern char yesTitle [4];              /* Yes button's descriptor    */extern char noTitle [3];               /* No button's descriptor     */                                       /* Set Parameters dialog */                                       /*************************/extern char item00pointerparm [11];    /* male btn's text       */extern char item01pointerparm [13];    /* female btn's text     */extern char item02pointerparm [22];    /* title text            */extern char item03pointerparm [7];     /* treble btn's text     */extern char item04pointerparm [5];     /* bass btn's text       */extern char item08pointerparm [6];     /* pitch btn's text      */extern char item09pointerparm [6];     /* speed btn's text      */extern char item10pointerparm [7];     /* volume btn's text     */extern minPString pitch;               /* pitch box's text  */extern minPString speed;               /* speed box's text  */extern minPString volume;              /* volume box's text */extern ItemTemplate maleParm;          /* Male voice radio button   */extern ItemTemplate femaleParm;        /* Female voice radio button */extern ItemTemplate item02parm;        /* Set parameters title      */extern ItemTemplate trebleParm;        /* Treble radio button       */extern ItemTemplate bassParm;          /* Bass radio button         */extern ItemTemplate item05parm;        /* Pitch edit line box       */extern ItemTemplate item06parm;        /* Speed edit line box       */extern ItemTemplate item07parm;        /* Volume edit line box      */extern ItemTemplate item08parm;        /* title for Pitch edit box  */extern ItemTemplate item09parm;        /* title for Speed edit box  */extern ItemTemplate item10parm;        /* title for Volume edit box */extern ItemTemplate item11parm;        /* OK button                 */extern ItemTemplate item12parm;        /* Cancel button             */extern DialogTemplate setParmsDlg;     /* Set parmaters dialog box */                                       /* Set Parameters error alert */                                       /******************************/extern char item00pointerPErr [31];    /* actual msg                 */extern ItemTemplate item00PErr;        /* Error message              */extern ItemTemplate item01PErr;        /* OK button                  */extern AlertTemplate pErrorAlert;      /* Set parameters error alert */