/***************************************************************** Error - SpeakIt's error handling routines.** Written by Barbara Allred and Mike Westerfield** Copyright 1991, Byte Works, Inc.* Copyright 1987-1991, First Byte, Inc.****************************************************************/#pragma keep "Error"#pragma noroot#pragma optimize 9#include <Types.h>#include <MiscTool.h>#include <Dialog.h>#include <IntMath.h>#pragma lint -1#include <string.h>#include <ctype.h>#include <orca.h>#include "error.h"typedef char pString44[45];pString44 errMsg[] = {                  /* error messages */   "\pUnable to load tools.  Aborting SpeakIt.    ",   "\pMemory error reported:                      ",   "\pUnable to create window:                    ",   "\pError returned by GS/OS when opening file:  ",   "\pError returned by GS/OS when reading file:  ",   "\pPrint Manager error reported:               ",   "\pError returned by GS/OS when writing file:  ",   "\pError returned by GS/OS when accessing file:",   "\pError returned by GS/OS when creating file: ",   "\pError returned by GS/OS when deleting file: ",   "\pText Edit error reported:                   ",   "\pStandard File error reported:               ",   "\pNot enough memory to perform requested task.",   "\pError returned by Dialog Manager            ",   "\pError returned by GS/OS when zeroing file:  ",   "\pError returned by GS/OS when accessing path:",   "\pError when creating control:                ",   "\pAttempt to increase list beyond max. size.  ",   };char OKTitle[] = "\pOK";ItemTemplate item00Err1 = {             /* error message */   100,   {30, 10, 45, 409},   0x800F, NULL,   44, 0, NULL   };char item01pointerErr1[] = "\p$0000";   /* error number as hex string */ItemTemplate item01Err1 = {             /* error number */   2,   {50, 150, 65, 200},   0x800F, (void *) &item01pointerErr1,   5, 0, NULL   };ItemTemplate item02Err1 = {             /* OK button */   1,   {70, 200, 85, 230},   10, (void *) &OKTitle,   0, 1, NULL   };AlertTemplate errAlert = {              /* Error alert box */   {42, 78, 130, 505},   1, 0x81, 0x81, 0x81, 0x81,   &item00Err1,   &item01Err1,   &item02Err1,   NULL   };/***************************************************************** FatalErr - Handle a fatal error.** Parameters:*       error - integer error code to pass to SysFailMgr****************************************************************/void FatalErr (int error){SysFailMgr(error, NULL);}/***************************************************************** HandleError - Report errors detected in SpeakIt.** Parameters:*       error - error number returned by tool*       whichErr - error message #****************************************************************/void HandleError (int error, errType whichErr){long tmp;/* Convert integer error number to hex string in order to display it in the  *//* same format as used by GS/OS and the tools.  The variable tmp is obtained *//* from the alert item template; it needs to be adjusted to point beyond     *//* length byte and '$'.                                                      */tmp = ((unsigned long) item01Err1.itemDescr) + 2; /* convert err num to hex */Int2Hex(error, (Pointer) tmp, 4);if (toolerror())   FatalErr(toolerror());item00Err1.itemDescr = (void *) &errMsg[whichErr]; /* get message to display */CautionAlert(&errAlert, NULL);          /* bring up alert */}