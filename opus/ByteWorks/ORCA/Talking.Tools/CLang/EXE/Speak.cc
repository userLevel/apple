/******************************************************************  Speak - A "plain vanilla" program that demonstrates all of the*       calls available in the Talking Tools.**  by Barbara Allred**  Copyright 1991 by Byte Works, Inc.*  Copyright 1987 - 1991 by First Byte, Inc.*****************************************************************/#pragma keep "speak"#include <types.h>#include <stdio.h>#include <string.h>#include <locator.h>#include <errno.h>#include <orca.h>#include <speech.h>#pragma lint -1int done;                               /* true if user wants to exit pgm */int speed;                              /* current global speed setting */int pitch;                              /* current global pitch setting */int volume;                             /* current global volume setting */Gender voice;                           /* current global voice setting */Tone basePitch;                         /* current global tone setting */ToolTable toolRec = {                   /* table of tools we need to start*/   4,                                   /*   # tools to load */   {                                    /*   toolset #, min. version req. */      {maleToolNum,0},      {femaleToolNum,0},      {parserToolNum,0},      {speechToolNum,1}   }};/******************************************************************  ConvertToPhonetics - Convert English text to phonetic representation.*****************************************************************/void ConvertToPhonetics (void){int start;                              /* position in English string to */                                        /* begin conversion              */int stop;                               /* true if user wants to exit */int size;                               /* length of string */pString255Ptr strPtr;                   /* pointer to Pascal-style string */pString255 sayString;                   /* English text to speak or parse */pString255 phString;                    /* phonetic string */stop  = false;/* Outer loop lets user enter next string to convert. *//* Entering null string signals it's time to exit. */do {   printf("\nEnter string to translate to phonetics.  Press RETURN to exit.\n");   fgets(sayString, 256, stdin);   size = strlen(sayString);   sayString[size-1] = '\0';            /* replace '\n' with '\0' */   strPtr = c2pstr(sayString);   start  = 0;   /* Inner loop is necessary in the event that the */   /* complete English string wasn't converted. */   if (strlen(sayString) != 0) {      do {         ++start;         start = Parse(strPtr, phString, start);         printf("%p\n", phString);         }      while (start < size-1);      }   else      stop = true;   }while (!stop);} /* ConvertToPhonetics *//******************************************************************  DeleteWord - Removes entries from the current exceptions dictionary.*****************************************************************/void DeleteWord (void){int size;                               /* length of string */int stop;                               /* true if user wants to exit */pString32 word;                         /* dictionary entry */stop = false;printf("\n");do {   printf("Press RETURN for the dictionary entry to exit function.\n");   printf("Word to delete from dictionary?  ");   fgets(word, 33, stdin);   size = strlen(word);   word[size-1] = '\0';                 /* replace '\n' with '\0' */   if (strlen(word) == 0)      stop = true;   else      DictDelete(c2pstr(word));   printf("\n");   }while (!stop);printf("\n");} /* DeleteWord *//******************************************************************  DisplayDict - Displays current exceptions dictionary, one*       entry at a time.*****************************************************************/void DisplayDict (void){int flag;                               /* dict. initialization flag */int anErr;                              /* true if error has occurred */int stop;                               /* true if user wants to exit */char answer;                            /* user's response to queries */pString32Ptr wordPtr;                   /* pointer to phonetic word */pString32 word1, word2;                 /* dictionary entry *//* Before displaying the dictionary, let user initialize it. */anErr = false;do {   printf("\nBefore displaying the dictionary, lets initialize it.\n");   printf("Enter 0 to reset dictionary to beginning.\n");   printf("Enter 1 to delete current dictionary.\n");   printf("Enter 2 to NOT initialize dictionary.\n\n");   scanf(" %d%*[^\n]%*c", &flag);   if ((flag < 0) || (flag > 2)) {      anErr = true;      printf("\n");      printf("Please enter either 0, 1, or 2.\n\n");      }   }while (anErr);if (flag != 2)   DictInit(flag);/* While there are still entries in the dictionary, *//* get and then display the next entry. */stop = false;do {   wordPtr = DictDump(word1, word2);   if (strlen(word1) == 0)      stop = true;   else {      printf("Next entry:  %p    %p   Continue? (Y or N)\n", word1, word2);      scanf(" %c%*[^\n]%*c", &answer);      if ((answer == 'N') || (answer == 'n'))         stop = true;      }   }while (!stop);printf("\n");} /* DisplayDict *//******************************************************************  Init - Load the tools we need and initialize our data structures.*****************************************************************/void Init (void){int errNum;                             /* error number to report to user */LoadTools((Pointer) &toolRec);          /* load the tools */errNum = toolerror();if (errNum) {                           /* report any error returned */   printf("Unable to load tools:  Error = %X\n", errNum);   done = true;   }else {                                  /* start the speech tools */   ParseStartUp(userid());   MaleStartUp();   FemaleStartUp();   SpeechStartUp();   done = false;                        /* initialize globals */   voice = Male;                        /* these are the default settings for */   basePitch = Bass;                    /*   the global speech parameters */   speed = 5;   volume = 5;   pitch = 5;   }} /* Init *//******************************************************************  InsertWord - Insert new entries into exceptions dictionary.*****************************************************************/void InsertWord (void){pString32Ptr wPtr;                      /* temp; for conversions */int i;                                  /* index/loop variable */int size;                               /* length of string */int stop;                               /* true if user wants to exit */pString32 word1, word2;                 /* dictionary entry */stop = false;do {   printf("\nPress RETURN for the dictionary entries to exit function.\n");   printf("Enter English word to add to dictionary:  ");   fgets(word1, 33, stdin);   size = strlen(word1);   word1[size-1] = '\0';                /* replace '\n' with '\0' */   wPtr = c2pstr(word1);   for (i = 0; i <= size; i++)      word1[i] = wPtr[i];   printf("\nEnter phonetic representation of word to add to dictionary:  ");   fgets(word2, 33, stdin);   size = strlen(word2);   word2[size-1] = '\0';   wPtr = c2pstr(word2);   for (i = 0; i <= size; i++)      word2[i] = wPtr[i];   if ((strlen(word1) == 0) || (strlen(word2) == 0))      stop = true;   else      DictInsert(word1, word2);   printf("\n");   }while (!stop);printf("\n");} /* InsertWord *//******************************************************************  LoadDict - Load dictionary file from disk.*****************************************************************/void LoadDict (void){FILE *f;                                /* file variable */char pathname[255];                     /* file name */int i;                                  /* loop/index variable */int size;                               /* length of string */char ch;                                /* char read from file */pString32 word1, word2;                 /* dictionary entry *//* Get pathname of dictionary to open. */printf("Enter pathname of dictionary to open:  ");gets(pathname);/* Open the file for reading. */errno = 0;f = fopen(pathname, "r");if (errno) {                            /* report any error returned */   printf("%s: %i\n", strerror(errno), errno);   return;   }/* Build the dictionary from the file. */DictInit(1);                            /* clear current dict from memory */fscanf(f, "%c", &size);                 /* initial read before loop */while (! (feof(f))) {                   /* Loop: */   word1[0] = size;                     /*   read English word from file */   for (i = 1; i <= size; i++) {      fscanf(f, "%c", &ch);      word1[i] = ch;      }   fscanf(f, "%c", &size);              /*   read phonetic word from file */   word2[0] = size;   for (i = 1; i <= size; i++) {      fscanf(f, "%c", &ch);      word2[i] = ch;      }   DictInsert(word1, word2);            /*   insert entry into dict */   fscanf(f, "%c", &size);   }fclose(f);DictInit(0);                            /* reset dict to top */} /* LoadDict *//******************************************************************  GetValue - Get a value, making sure it is in the given range**  Inputs:*       min - lowest allowed value*       max - highest allowed value**  Returns: Value read*****************************************************************/int GetValue (int min, int max){int value;                              /* value read */do {   scanf(" %d%*[^\n]%*c", &value);   if ((value < min) || (value > max))      printf("Please enter a value from %d to %d.\n\n  Value: ", min, max);   }while ((value < min) || (value > max));return value;} /* GetValue *//******************************************************************  SetSpeechGlobals - Set global speech parameters.*****************************************************************/void SetSpeechGlobals (void){printf("Voice = ");                     /* Read new global voice setting */if (voice == Male)   printf("male\n");else   printf("female\n");printf("Enter 0 to change voice to male, 1 to change voice to female.\n");if (GetValue(0,1) == 0)   voice = Male;else   voice = Female;printf("\nTone = ");                    /* Read new global tone setting */if (basePitch == Bass)   printf("bass\n");else   printf("treble\n");printf("Enter 0 to change tone to bass, 1 to change tone to treble.");if (GetValue(0,1) == 0)   basePitch = Bass;else   basePitch = Treble;printf("\nVolume = %d  ", volume);      /* Read new global volume setting */volume = GetValue(0,9);printf("\nSpeed = %d  ", speed);        /* Read new global speed setting */speed = GetValue(0,9);printf("\nPitch = %d  ", pitch);        /* Read new global pitch setting */pitch = GetValue(0,9);                                        /* set the globals */SetSayGlobals(voice, basePitch, pitch, speed, volume);putchar('\n');} /* SetSpeechGlobals *//******************************************************************  ShutDown - Shut down the tools we started; do any necessary*       clean-up before exiting.*****************************************************************/void ShutDown (void){MaleShutDown();FemaleShutDown();ParseShutDown();SpeechShutDown();} /* ShutDown *//******************************************************************  SpeakPhonetics - Speak as many non-empty lines of phonetic*       text as the user wants.*****************************************************************/void SpeakPhonetics (void){int size;                               /* length of string */int stop;                               /* true if user wants to exit */pString255 phString;                    /* phonetic string */stop = false;do {   printf("\nEnter phonetic string to speak.  Press RETURN to exit.\n");   fgets(phString, 256, stdin);   size = strlen(phString);   phString[size-1] = '\0';   if (strlen(phString) == 0)      stop = true;   else {      if (voice == Male)         MaleSpeak(volume, speed, pitch, c2pstr(phString));      else         FemaleSpeak(volume, speed, pitch, c2pstr(phString));      }   }while (!stop);printf("\n");} /* SpeakPhonetics *//******************************************************************  SpeakText - Speak as many non-empty lines of English text as*       the user wants.*****************************************************************/void SpeakText (void){int size;                               /* length of string */int stop;                               /* true if user wants to exit */pString255 sayString;                   /* English text to speak or parse */stop = false;do {   printf("\nEnter string to speak.  Press RETURN to exit.\n");   fgets(sayString, 256, stdin);   size = strlen(sayString);   sayString[size-1] = '\0';   if (sayString[0] == '\0')      stop = true;   else      Say(c2pstr(sayString));   }while (!stop);printf("\n");} /* SpeakText *//******************************************************************  WriteDict - Write dictionary to disk file.*****************************************************************/void WriteDict (void){FILE *f;                                /* file variable */char pathname[255];                     /* file name */int i;                                  /* loop/index variable */int stop;                               /* true if user wants to exit */pString32Ptr tmp;                       /* returned by DictDump */pString32 word1, word2;                 /* dictionary entry *//* Get pathname for dictionary file. */printf("Enter pathname for dictionary file:  ");gets(pathname);/* Open the file for writing. */f = fopen(pathname, "w");if (errno) {                            /* report any error returned */   printf("%s %i\n", strerror(errno), errno);   return;   }/* Write the dictionary to the file. */DictInit(0);                            /* set dictionary to top */stop = false;do {                                    /* Loop: */   tmp = DictDump(word1, word2);        /*   get next dict entry */   if (tmp == NULL)      stop = true;   else {      for (i = 0; i < strlen(word1); i++)         fprintf(f, "%c", word1[i]);      for (i = 0; i < strlen(word2); i++)         fprintf(f, "%c", word2[i]);      }   }while (!stop);fclose(f);DictInit(0);                            /* reset dict to top */} /* WriteDict *//******************************************************************  Main program - Display "main menu" and call appropriate*       function until user selects Quit.*****************************************************************/void main (void){char answer;                            /* user's response to queries */printf("\nSpeak - A demonstration of the Talking Tools.\n\n");printf("Please wait while we load the tools.\n");Init();while (!done) {   printf("Enter desired function:  S to speak English string\n");   printf("                         P to speak phonetic string\n");   printf("                         C to convert to phonetics\n");   printf("                         G to set global speech parameters\n");   printf("                         A to activate dictionary\n");   printf("                         T to deactivate dictionary\n");   printf("                         D to display dictionary\n");   printf("                         I to insert word into dictionary\n");   printf("                         R to remove word from dictionary\n");   printf("                         L to load dictionary from disk\n");   printf("                         W to write dictionary to disk\n");   printf("                         Q to quit program\n\n");   scanf(" %c%*[^\n]%*c", &answer);   switch (answer) {      case 'S': case 's':   SpeakText();                            break;      case 'P': case 'p':   SpeakPhonetics();                            break;      case 'C': case 'c':   ConvertToPhonetics();                            break;      case 'G': case 'g':   SetSpeechGlobals();                            break;      case 'A': case 'a':   DictActivate(1);                            break;      case 'T': case 't':   DictActivate(0);                            break;      case 'D': case 'd':   DisplayDict();                            break;      case 'I': case 'i':   InsertWord();                            break;      case 'R': case 'r':   DeleteWord();                            break;      case 'L': case 'l':   LoadDict();                            break;      case 'W': case 'w':   WriteDict();                            break;      case 'Q': case 'q':   done = true;                            break;      default:  printf("Please enter one of S, P, C, G, A, T, D, I, R, L, W, or Q...\n\n");      }   } /* while */ShutDown();}