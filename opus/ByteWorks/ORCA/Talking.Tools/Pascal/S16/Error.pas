{$keep 'Error'}{------------------------------------------------------------------}{                                                                  }{ Error - SpeakIt's error handlers.                                }{                                                                  }{ Written by Barbara Allred                                        }{                                                                  }{ Copyright 1991, Byte Works, Inc.                                 }{ Copyright 1987-1991, First Byte, Inc.                            }{                                                                  }{------------------------------------------------------------------}unit Error;interfaceuses   Common, DialogMgr, MscToolSet, IntegerMath;type   errType = (toolErr,  memErr,   windErr, openErr,   readErr,    {error types}              printErr, writeErr, fileErr, createErr, delErr,              TEErr,    SFOErr,   OOMErr,  dlgErr,    zeroErr,              pathErr,  ctlErr,   listErr,              msg1, msg2, msg3, msg4, msg5, msg6, msg7 {DEBUG} );var   debug: pStringPtr;procedure FatalErr (error: integer);procedure HandleError (error: integer; whichErr: errType);procedure InitError;implementationtype   pString44 = packed array[0..44] of char;var   errMsg: array[errType] of pString44; {error messages}   errAlert: alertTemplate;             {Error alert box}   item00Err1: itemTemplate;            {  error message}   item01Err1: itemTemplate;            {  error number}   item02Err1: itemTemplate;            {  OK button}   item01pointerErr1: packed array[0..5] of char; {  num as string}   okTitle: packed array[0..2] of char; {  OK string}{---------------------------------------------------------------}{                                                               }{ FatalErr - Handle a fatal error.                              }{                                                               }{ Parameters:                                                   }{    error - integer error code to pass to SysFailMgr           }{                                                               }{---------------------------------------------------------------}procedure FatalErr {error: integer};begin {FatalErr}SysFailMgr(error, nil);end; {FatalErr}{---------------------------------------------------------------}{                                                               }{ HandleError - Report errors detected in SpeakIt.              }{                                                               }{ Parameters:                                                   }{    error    - error number returned by tool                   }{    whichErr - error message #                                 }{                                                               }{---------------------------------------------------------------}procedure HandleError {error: integer; whichErr: errType};var   tmp: longint;                        {temporary variables}   i: integer;begin {HandleError}{Convert integer error number to hex string in order to display it in the }{same format as used by GS/OS and the tools.  The variable tmp is obtained}{from the alert item template; it needs to be adjusted to point beyond    }{length byte and '$'.                                                     }tmp := ord4(item01Err1.itemDescr) + 2;  {convert error number to hex}Int2Hex(error, tmp, 4);if toolError <> 0 then   FatalErr(toolError);item00Err1.itemDescr := @errMsg[whichErr]; {get message to display}i := CautionAlert(errAlert, nil);       {bring up alert}end; {HandleError}{---------------------------------------------------------------}{                                                               }{ InitError - Initialize error unit.                            }{                                                               }{---------------------------------------------------------------}procedure InitError;begin {InitError}{Initialize error message array.}errMsg[toolErr] :=   'Unable to load tools.  Aborting SpeakIt.    ';errMsg[memErr] :=    'Memory error reported:                      ';errMsg[windErr] :=   'Unable to create window:                    ';errMsg[openErr] :=   'Error returned by GS/OS when opening file:  ';errMsg[readErr] :=   'Error returned by GS/OS when reading file:  ';errMsg[printErr] :=  'Print Manager error reported:               ';errMsg[writeErr] :=  'Error returned by GS/OS when writing file:  ';errMsg[fileErr] :=   'Error returned by GS/OS when accessing file:';errMsg[createErr] := 'Error returned by GS/OS when creating file: ';errMsg[delErr] :=    'Error returned by GS/OS when deleting file: ';errMsg[TEErr] :=     'Text Edit error reported:                   ';errMsg[SFOErr] :=    'Standard File error reported:               ';errMsg[OOMErr] :=    'Not enough memory to perform requested task.';errMsg[dlgErr] :=    'Error returned by Dialog Manager            ';errMsg[zeroErr] :=   'Error returned by GS/OS when zeroing file:  ';errMsg[pathErr] :=   'Error returned by GS/OS when accessing path:';errMsg[ctlErr] :=    'Error when creating control:                ';errMsg[listErr] :=   'Attempt to increase list beyond max. size.  ';errMsg[msg1] := '                                            ';errMsg[msg2] := 'DoPrint: listSize =                         ';errMsg[msg3] := 'DoClose: wTyp =                             ';errMsg[msg4] := 'Initialized Msc                             ';errMsg[msg5] := 'Initialized Dict                            ';errMsg[msg6] := 'Initialized File                            ';errMsg[msg7] := 'Initialized Speech                          ';{Initialize error alert box.}with errAlert do begin   with atBoundsRect do begin      v1 := $2A;      h1 := $4C;      v2 := $82;      h2 := $1F9;      end; {with}   atAlertID := 1;   atStage1 := $81;   atStage2 := $81;   atStage3 := $81;   atStage4 := $81;   atItemList[1] := @item00Err1;   atItemList[2] := @item01Err1;   atItemList[3] := @item02Err1;   atItemList[4] := nil;   end; {with}with item00Err1 do begin   itemID := $64;   with itemRect do begin      v1 := 30;      h1 := 10;      v2 := 45;      h2 := 409;      end; {with}   itemType := $800F;   itemDescr := nil;   itemValue := 44;   itemFlag := 0;   itemColor := nil;   end; {with}with item01Err1 do begin   itemID := $65;   with itemRect do begin      v1 := 50;      h1 := 150;      v2 := 65;      h2 := 200;      end; {with}   itemType := $800F;   itemDescr := @item01PointerErr1;   itemValue := 5;   itemFlag := 0;   itemColor := nil;   end; {with}item01pointerErr1 := '$0000';with item02Err1 do begin   itemID := 1;   with itemRect do begin      v1 := 70;      h1 := 200;      v2 := 85;      h2 := 230;      end; {with}   itemType := $A;   itemDescr := @okTitle;   itemValue := 0;   itemFlag := 1;   itemColor := nil;   end; {with}okTitle := 'OK';end; {InitError}end. {Error unit}