#pragma keep "error"/* --------------------------------------------------------------- *//*                                                                 *//*  Error - Text editor's error handling routines.                 *//*                                                                 *//*  Written by Barbara Allred and Design Master                    *//*                                                                 *//*  Copyright 1990                                                 *//*  Byte Works, Inc.                                               *//*                                                                 *//* --------------------------------------------------------------- */#include "globals.h"#include "error.h"static char errMsg [20] [50] =                              /* error messages */  { "\pOut of memory.  Aborting MiniWord.",    "\pFatal error reported by Print Manager.",    "\pMemory error:  Unable to perform operation.",    "\pError returned by GS/OS when opening file.",    "\pError returned by GS/OS when reading file.",    "\pError:  Aborting printing.",    "\pError returned by GS/OS when writing file.",    "\pError when accessing file.",    "\pError returned by GS/OS when creating file.",    "\pError returned by GS/OS when deleting file.",    "\pError returned by TextEdit when reading file.",    "\pError returned by SFO when accessing file.",    "\pError returned by Text Edit when getting info.",    "\pFatal error:  Cannot recover." };int  errNum;                                     /* error # returned by tools *//* *** GENERATED BY DESIGN MASTER ***, with comments by B.A. *//* Initialize the error alert. */char item00pointerErr1 [] = "\pHere is a message that is fifty characters long!!!";char item01pointerErr1 [] = "\p$0000";ItemTemplate ITEM00Err1 =                /* Error message item template       */   { 0x0064,                             /* item ID number                    */                                         /* bounding rectangle                */     30,                                 /*   v1                              */     10,                                 /*   h1                              */     45,                                 /*   v2                              */     409,                                /*   h2                              */     0x800F,                             /* type: static text + item disable  */     item00pointerErr1,                  /* descr: pointer to error message   */     50,                                 /* value: length of text to display  */     0,                                  /* flag: default                     */     NULL };                             /* color table: none                 */ItemTemplate ITEM01Err1 =                /* Error number item template        */  { 0x0065,                              /* item ID number                    */                                         /* bounding rectangle                */    50,                                  /*   v1                              */    150,                                 /*   h1                              */    65,                                  /*   v2                              */    200,                                 /*   h2                              */    0x800F,                              /* type: static text + item disable  */    item01pointerErr1,                   /* descr: ptr to Pascal-style string */    5,                                   /* value: length of the text         */    0,                                   /* flag: default                     */    NULL };                              /* color table: none                 */ItemTemplate ITEM02Err1 =                /* OK button item template           */  { 1,                                   /* item ID number                    */                                         /* bounding rectangle                */    70,                                  /*   v1                              */    200,                                 /*   h1                              */    85,                                  /*   v2                              */    230,                                 /*   h2                              */    0x000A,                              /* type: simple button               */    okTitle,                             /* descr: pointer to button's title  */    0,                                   /* value: default                    */    0x0001,                              /* flag: bold, round-cornered button */    NULL };                              /* color table: none                 */AlertTemplate errAlert =                 /* Error alert template              */  {                                      /* bounding rectangle for alert      */    0x002A,                              /*   v1                              */    0x004C,                              /*   h1                              */    0x0082,                              /*   v2                              */    0x01F9,                              /*   h2                              */    1,                                   /* alert ID number                   */    0x81,                                /* stage 1:  draw alert, emit 1 beep */    0x81,                                /* stage 2:  draw alert, emit 1 beep */    0x81,                                /* stage 3:  draw alert, emit 1 beep */    0x81,                                /* stage 4:  draw alert, emit 1 beep */    &ITEM00Err1,                         /* item pointer:  Error message      */    &ITEM01Err1,                         /* item pointer:  Error number       */    &ITEM02Err1,                         /* item pointer:  OK button          */    NULL };                              /* null terminator                   *//************************************************* HandleError - Report errors detected in*               MiniWord.** Input:*        error      - error number returned by tool*        whichErr   - error message #*        whichAlert - alert type************************************************/void HandleError (int error, enum errType whichErr, enum alertType whichAlert){char *tmp;int  junk;/* Get error message to display. */ITEM00Err1.itemDescr = errMsg [whichErr];/* Convert integer error number to hex string in order to display error *//* number in the same format as used by GS/OS and the tools.            */tmp = ITEM01Err1.itemDescr + 2;             /* adjust address obtained from   */                                            /*   alert item template to point */                                            /*   beyond length byte and '$'   */Int2Hex (error, tmp, 4);   /* call Integer Math toolset to perform conversion *//* Bring up alert. */switch (whichAlert) {   case stdAlertTyp:       junk = Alert (&errAlert, nil);                           break;   case noteAlertTyp:      junk = NoteAlert (&errAlert, nil);                           break;   case cautionAlertTyp:   junk = CautionAlert (&errAlert, nil);                           break;   case stopAlertTyp:      junk = StopAlert (&errAlert, nil);                           done = TRUE;                           break;   }} /* HandleError */