/* --------------------------------------------------------------- *//*                                                                 *//*   Global data for MiniWord                                      *//*                                                                 *//* --------------------------------------------------------------- */#include <types.h>#include <control.h>#include <desk.h>#include <dialog.h>#include <errno.h>#include <event.h>#include <gsos.h>#include <intmath.h>#include <locator.h>#include <orca.h>#include <memory.h>#include <menu.h>#include <print.h>#include <quickdraw.h>#include <stdfile.h>#include <string.h>#include <textedit.h>#include <window.h>#define    isDirty     0x0040                /* mask to check dirty bit       */#define    notDirty    0xFFBF                /* mask to clear dirty bit after */                                             /*   saving file to disk         */#define    maxWindows  4                  /* max # windows allowed on desktop */#define    cutID       251                                   /* Menu item IDs */#define    copyID      252#define    pasteID     253#define    closeID     255#define    aboutID     256#define    newID       257#define    openID      258#define    saveID      259#define    saveAsID    260#define    pSetUpID    261#define    printID     262#define    quitID      263#define    findID      264#define    appleMenuID     0x00000000                         /* Resource IDs */#define    fileMenuID      0x00000001#define    editMenuID      0x00000002#define    searchMenuID    0x00000003#define    windowID        0x00000004#define    textEditID      0x00000005enum windowType {noWindow, fromFile, fromNew};                /* Window types */                                                               /* Alert types */enum alertType {stdAlertTyp, stopAlertTyp, noteAlertTyp, cautionAlertTyp};typedef char pString50 [50];typedef char pString17 [17];extern int        done;          /* true if user is ready to exit MiniWord    */extern int        myID;          /* MiniWord's user ID                        */extern Handle     buffer;        /* buffer to hold text returned by TEGetText */extern long       bufferSize;    /* size of this buffer                       */extern TEInfoRec  textInfo;      /* gives # lines, # chars in a document      */extern char okTitle [2];                              /* common button titles */extern char cancelTitle [6];/* Window tracking information -- We're allowing only 4 windows *//* to be opened on the desktop.                                 */extern char             *wTitle;            /* pointer to window's title      */extern long             wRefCon;            /* index into window arrays       */extern enum windowType  windowOpen   [4];   /* array of open window flags     */extern GrafPortPtr      windowPtr    [4];   /* array of pointers to grafPorts */extern CtlRecHndl       textEdHandle [4];   /* array of editText ctl handles  */extern Handle           pathHandle   [4];   /* array of pathname handles,     */                                            /*   returned by SFO              */