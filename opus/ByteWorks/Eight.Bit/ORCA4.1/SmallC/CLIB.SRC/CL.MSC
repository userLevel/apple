******************************************************************  SYSCFALSE - Save a False Result*  SYSCTRUE  - Save a True Result*  SYSCBOOL  - Save a Byte Result******************************************************************SYSCFALSE START         LDA   #0         BEQ   LB1SYSCTRUE ENTRY         LDA   #1SYSCBOOL ENTRYLB1      LDY   #0         STA   (SP),Y         TYA         INY         STA   (SP),Y         INY         STA   (SP),Y         INY         STA   (SP),Y         RTS         END******************************************************************  SYSCGET1 - Get a Byte From the Code Stream**  Inputs:*        PC - location to get byte from**  Outputs:*        PC - updated*        A - byte******************************************************************SYSCGET1 START         LDY   #0         LDA   (PC),Y         INC2  PC         RTS         END******************************************************************  SYSCGET2 - Get a Word From the Code Stream**  Inputs:*        PC - location to get word from**  Outputs:*        PC - updated*        X,A - byte******************************************************************SYSCGET2 START         LDY   #1         LDA   (PC),Y         TAX         DEY         LDA   (PC),Y         TAY         ADD2  PC,#2         TYA         RTS         END******************************************************************  SYSCUTST - Unsigned Test******************************************************************SYSCUTST START         JSR   SYSCLOD2         LDY   #3LB1      LDA   (SP),Y         CMP   (WR0),Y         BNE   LB2         DBPL  Y,LB1         INYLB2      RTS         END******************************************************************  SYSCLOD2 - Load Two Operands**  Inputs:*        SP - stack pointer**  Outputs:*        SP - result addr*        MR1 - first operand*        MR2 - second operand******************************************************************SYSCLOD2 START         JSR   SYSCIBOP                 set up for binary op         LDY   #3LB1      LDA   (SP),Y         STA   MR1,Y         LDA   (WR0),Y         STA   MR2,Y         DBPL  Y,LB1         RTS         END******************************************************************  SYSCIBOP - Set Up for Binary Operation**  Inputs:*        SP - current eval stack pointer**  Outputs:*        SP - points to first operand, result location*        WR0 - points to second operand******************************************************************SYSCIBOP START         CLC         LDA   SP         STA   WR0         ADC   #4         STA   SP         LDA   SP+1         STA   WR0+1         ADC   #0         STA   SP+1         RTS         END******************************************************************  SYSCNOUT - Number Output**  Inputs:*        A,X - addr of number to write (two byte)******************************************************************SYSCNOUT STARTTRUE     EQU   1                        boolean constant;;  Get the number.;         STA   WR1                      get the addr         STX   WR0         LDY   #0                       load the number         LDA   (WR0),Y         STA   NUM         INY         LDA   (WR0),Y         STA   NUM+1;;  Check for 0.;         ORA   NUM         BNE   LB2         LDA   #'0'         JMP   SYSCOUT;;  Set up for output.;LB2      MOVE  MAXINT,DEN,#4;;  Handle negatives.;         LDA   NUM+1         BPL   LB4         SUB2  #0,NUM,NUM         LDA   #'-'         JSR   SYSCOUT;;  Print the number.;LB4      LM    DIGIT,#TRUE              flag no leading digitsLB5      LDX   #3                       get a digitLB6      LDA   NUM,X         STA   MR1,X         LDA   DEN,X         STA   MR2,X         DBPL  X,LB6         JSR   SYSDIV4         LDA   DIGIT                    branch if leading digit found         BEQ   LB7         LDA   MR1                      loop if this is a leading zero         BEQ   LB8         DEC   DIGIT                    clear digit flagLB7      LDA   MR1                      print the digit         ORA   #'0'         JSR   SYSCOUTLB8      LDX   #3                       shuffle numbers ->LB9      LDA   MR1+4,X                    ...save remainder         STA   NUM,X         LDA   DEN,X                      ...move in denominator         STA   MR1,X         LDA   TEN,X                      ...move in 10         STA   MR2,X         DBPL  X,LB9         JSR   SYSDIV4                  update denominator         MOVE  MR1,DEN,#4         LDA   MR1                      loop if not done         ORA   MR1+1         BNE   LB5         RTS;;  Local storage.;DEN      DS    4                        denominatorNUM      DS    4                        numberTEN      DC    I4'10'                   constant 10MAXINT   DC    I4'10000'                largest power of ten to be printedDIGIT    DS    1                        leading digit flag         END******************************************************************  SYSCSTK - Check for Stack Overflow**  Inputs:*        SP - stack pointer*        SPMAX - max allowed SP******************************************************************SYSCSTK  START         CMPW  SP,SYSESTMAX         BLT   ERR         RTSERR      PRINT 'Program Stack Overflow'JMP      JMP   JMP         END******************************************************************  SYSCRITE - Write a String**  Inputs:*        return addr+1 points to zero terminated string******************************************************************SYSCRITE START         PLA                            fetch return addr         STA   WR0         PLA         STA   WR1LB1      INC2  WR0                      get the next char         LDY   #0         LDA   (WR0),Y         BEQ   LB2                      branch if done (zero terminator)         JSR   SYSCOUT                  print character         JMP   LB1                      next charLB2      INC2  WR0                      set return addr         JMP   (WR0)                    return to caller         END