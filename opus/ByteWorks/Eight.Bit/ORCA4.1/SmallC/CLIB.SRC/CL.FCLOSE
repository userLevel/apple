******************************************************************  FCLOSE - Close a File**  Inputs:*        TOS - reference number of file to close**  Outputs:*        TOS - 0 if no error, else EOF (-1)******************************************************************FCLOSE   START         NOP                            switch to machine code         LDY   #0                       set ref #         LDA   (SP),Y         STA   CL_REF         CLOSE CL_DCB                   close the file         BEQ   LB1                      set return code         LDA   #$FFLB1      LDY   #0                       save it on stack         STA   (SP),Y         INY         STA   (SP),Y         INY         STA   (SP),Y         INY         STA   (SP),Y         RETCL_DCB   DC    I1'1'CL_REF   DS    1         END******************************************************************  FGETC - Get a Character**  Inputs:*        TOS - file reference number**  Outputs:*        TOS - character read (EOF if at end of file)******************************************************************FGETC    START         NOP                            switch to machine code         LDY   #0                       set ref #         LDA   (SP),Y         BEQ   STDIN         STA   RD_REF         RELEASE #CH,#1                 read a character         READ  RD_DCB         PHP         RESERVE #CH,#1         PLP         BNE   LB1                      branch if error         LDA   CH                       save char on TOS         JSR   SYSCBOOL         RETLB1      LDY   #0                       set error (TOS = EOF)         LDA   #$FF         STA   (SP),Y         INY         STA   (SP),Y         INY         STA   (SP),Y         INY         STA   (SP),Y         RETSTDIN    JSR   IN                       get char from standard input         PHA         SUB2  SP,#2,WR0         PLA         LDY   #0         AND   #$7F         JSR   SYSCBOOL         RETIN       JMP   ($38)RD_DCB   DC    I1'4'RD_REF   DS    1         DC    A'CH'         DC    I'1'         DS    2CH       DS    1         DC    R'SYSCFALSE'         END******************************************************************  ISCSYM - See if the Character Belongs in a Symbol**  Inputs:*        TOS - character**  Outputs:*        TOS - true or false******************************************************************ISCSYM   START         NOP         LDY   #0         LDA   (SP),Y         CMP   #'0'         BLT   NO         CMP   #'9'+1         BLT   YES         CMP   #'A'         BLT   NO         CMP   #'Z'+1         BLT   YES         CMP   #'_'         BEQ   YES         CMP   #'a'         BLT   NO         CMP   #'z'+1         BLT   YESNO       JSR   SYSCFALSE         RETYES      JSR   SYSCTRUE         RET         END******************************************************************  ISCSYMF - See if the Character Can Start a Symbol**  Inputs:*        TOS - character**  Outputs:*        TOS - true or false******************************************************************ISCSYMF  START         NOP         LDY   #0         LDA   (SP),Y         CMP   #'A'         BLT   NO         CMP   #'Z'+1         BLT   YES         CMP   #'_'         BEQ   YES         CMP   #'a'         BLT   NO         CMP   #'z'+1         BLT   YESNO       JSR   SYSCFALSE         RETYES      JSR   SYSCTRUE         RET         END******************************************************************  ISDIGIT - See if the Character is a Digit**  Inputs:*        TOS - character**  Outputs:*        TOS - true or false******************************************************************ISDIGIT  START         NOP         LDY   #0         LDA   (SP),Y         CMP   #'0'         BLT   NO         CMP   #'9'+1         BLT   YESNO       JSR   SYSCFALSE         RETYES      JSR   SYSCTRUE         RET         END******************************************************************  FOPEN - Open a File**  Inputs:*        TOS-1 - pointer to the file name*        TOS - pointer to a type code:*              "r" - open a file for reading*              "w" - create and open a new file for writing**  Outputs:*        TOS - file reference number******************************************************************FOPEN    STARTPRODOS_TIME EQU $BF90                   ProDOS time field         NOP                            switch to machine code         LDY   #4                       get the file name         LDA   (SP),Y         STA   WR0         INY         LDA   (SP),Y         STA   WR1         LDY   #0LB1      LDA   (WR0),Y         BEQ   LB2         INY         STA   FNAME,Y         BPL   LB1LB2      STY   FNAME         MOVE  {SP},WR0                 split on open type         LDY   #0         LDA   (WR0),Y         CMP   #'R'         BEQ   READ         CMP   #'r'         BEQ   READ         CMP   #'W'         BEQ   WRITE         CMP   #'w'         BNE   IOERR;;  WRITE - Open a file for output.;WRITE    GET_INFO GI_DCB                see if the file exists         BNE   WT1         DESTROY DS_DCB                 yes - destroy itWT1      GET_TIME                       create the file         MOVE  PRODOS_TIME,CR_TIME,#4         CREATE CR_DCB         BNE   IOERR;;  READ - Open an existing file.;READ     FINDBUFF OP_BUFF,#1024         open the file         BCC   IOERR         OPEN  OP_DCB         BNE   IOERR         LDA   OP_REF         JSR   SYSCBOOL         RETIOERR    JSR   SYSCFALSE         RET;;  Local Data Areas;OP_DCB   DC    I1'3'         DC    A'FNAME'OP_BUFF  DS    2OP_REF   DS    1CR_DCB   DC    I1'7'         DC    A'FNAME'         DC    H'C3'         DC    H'B0'         DC    H'01 00'         DC    I1'1'CR_TIME  DS    4DS_DCB   DC    I1'1'         DC    A'FNAME'GI_DCB   DC    I1'10'         DC    A'FNAME'         DS    15FNAME    DS    129         END******************************************************************  FPUTC - Put a Character**  Inputs:*        TOS-1 - character to put*        TOS - file reference number**  Outputs:*        TOS - character read (EOF if error)******************************************************************FPUTC    START         NOP                            switch to machine code         LDY   #0                       set ref #         LDA   (SP),Y         STA   WR_REF         CLC                            set addr of character         LDA   SP         ADC   #4         STA   SP         STA   WR_BUFF         LDA   SP+1         ADC   #0         STA   SP+1         STA   WR_BUFF+1         WRITE WR_DCB                   write a character         BEQ   RTS                      branch if no error         LDY   #0                       write EOF to TOS         LDA   #$FF         STA   (SP),Y         INY         STA   (SP),Y         INY         STA   (SP),Y         INY         STA   (SP),YRTS      RETWR_DCB   DC    I1'4'WR_REF   DS    1WR_BUFF  DS    2         DC    I'1'         DS    2         END******************************************************************  PUTCHAR - Put a Character to Standard Output**  Inputs:*        TOS - character to write**  Outputs:*        TOS - character written******************************************************************PUTCHAR  START         NOP                            switch to machine code         LDY   #0                       get char         LDA   (SP),Y         JSR   SYSCOUT                  write it         RET         END******************************************************************  TOUPPER - Change Char to Uppercase**  Inputs:*        TOS - character to change**  Outputs:*        TOS - uppercase character******************************************************************TOUPPER  START         NOP                            switch to machine code         LDY   #0                       quit if it's not lowercase         LDA   (SP),Y         CMP   #'a'         BLT   RTS         CMP   #'z'+1         BGE   RTS         AND   #%11011111               change it to uppercase         STA   (SP),Y                   save itRTS      RET         END         APPEND CL.MSC