******************************************************************  SYSCADI - Signed Addition******************************************************************SYSCADI  START         JSR   SYSCIBOP         CLC         LDY   #0         LDX   #4LB1      LDA   (WR0),Y         ADC   (SP),Y         STA   (SP),Y         INY         DBNE  X,LB1         RTS         END******************************************************************  SYSCANDI - Bitwise AND******************************************************************SYSCANDI START         JSR   SYSCIBOP         LDY   #3LB1      LDA   (WR0),Y         AND   (SP),Y         STA   (SP),Y         DBPL  Y,LB1         RTS         END******************************************************************  SYSCSTOC - Store Character, Indirect******************************************************************SYSCSTOC START         JSR   SYSCCPOC                 copy the character         ADD2  SP,#4                    update stack pointer         RTS         END******************************************************************  SYSCSTOI - Store Integer, Indirect******************************************************************SYSCSTOI START         JSR   SYSCCPOI                 copy the integer         ADD2  SP,#4                    update stack pointer         RTS         DC    R'SYSCCPOC'         END******************************************************************  SYSCSTOL - Store Long Integer, Indirect******************************************************************SYSCSTOL START         JSR   SYSCCPOL                 copy the integer         ADD2  SP,#4                    update stack pointer         RTS         DC    R'SYSCCPOC'         END******************************************************************  SYSCCPOC - Copy Character, Indirect******************************************************************SYSCCPOC START         LDX   #1                       set length of the variable         BNE   LB1SYSCCPOI ENTRY         LDX   #2         BNE   LB1SYSCCPOL ENTRY         LDX   #4LB1      LDY   #4                       get save addr         LDA   (SP),Y         STA   WR0         INY         LDA   (SP),Y         STA   WR1         LDY   #0                       save the valueLB2      LDA   (SP),Y         STA   (WR0),Y         INY         DBNE  X,LB2         CLC                            delete addr from stack         LDA   SP         STA   WR0         ADC   #4         STA   SP         LDA   SP+1         STA   WR1         ADC   #0         STA   SP+1         MOVE  {WR0},{SP},#4         RTS         END******************************************************************  SYSCSROCW - Store Character Absolute**  Inputs:*        (PC) - address of character******************************************************************SYSCSROCW START         JSR   SYSCCROCW                copy the character         ADD2  SP,#4                    update stack pointer         RTS         END******************************************************************  SYSCSROIW - Store Integer Absolute**  Inputs:*        (PC) - address of character******************************************************************SYSCSROIW START         JSR   SYSCCROIW                copy the integer         ADD2  SP,#4                    update stack pointer         RTS         END******************************************************************  SYSCSROLW - Store Long Integer Absolute**  Inputs:*        (PC) - address of character******************************************************************SYSCSROLW START         JSR   SYSCCROLW                copy the integer         ADD2  SP,#4                    update stack pointer         RTS         END******************************************************************  SYSCCROCW - Copy Character Absolute**  Inputs:*        (PC) - address of character******************************************************************SYSCCROCW START         JSR   SYSCGET2         STA   WR0         STX   WR1         LDY   #0         LDA   (SP),Y         STA   (WR0),Y         RTS         END******************************************************************  SYSCCROIW - Copy Integer Absolute**  Inputs:*        (PC) - address of character******************************************************************SYSCCROIW START         JSR   SYSCGET2         STA   WR0         STX   WR1         MOVE  {SP},{WR0}         RTS         END******************************************************************  SYSCCROLW - Copy Long Integer Absolute**  Inputs:*        (PC) - address of character******************************************************************SYSCCROLW START         JSR   SYSCGET2         STA   WR0         STX   WR1         MOVE  {SP},{WR0},#4         RTS         END******************************************************************  SYSCCUPBW**  Inputs:*        (PC) - # bytes of parameter + 4*        (PC+1) - address to call******************************************************************SYSCCUPBW START         JSR   SYSCGET1                 get stack frame size so far         CLC                            set MP         ADC   SP         STA   MP         LDA   SP+1         ADC   #0         STA   MP+1         SUB2  MP,#4,WR0                save return address         JSR   SYSCGET2         PHA   PC         MOVE  PC,{WR0}         PLA         STA   PC         STX   PC+1         RTS         END******************************************************************  SYSCDECI - Decrement Integer******************************************************************SYSCDECI START         CLC         LDY   #0         LDX   #4LB1      LDA   (SP),Y         SBC   #0         STA   (SP),Y         BCS   LB2         INY         DBNE  X,LB1LB2      RTS         END******************************************************************  SYSCDVI - Signed Division******************************************************************SYSCDVI  START         JSR   SYSCLOD2         JSR   SYSDIV4         MOVE  MR1,{SP},#4         RTS         END******************************************************************  SYSCENTB - Reserve < 256 bytes of stack frame**  Inputs:*        (PC) - # bytes to reserve******************************************************************SYSCENTB START         JSR   SYSCGET1         STA   WR0         SEC         LDA   SP         SBC   WR0         STA   SP         BCS   RTS         DEC   SP+1RTS      JMP   SYSCSTK         END******************************************************************  SYSCENTW - Reserve > 255 bytes of stack frame**  Inputs:*        (PC) - # bytes to reserve******************************************************************SYSCENTW START         SUB2  SP,{PC}         ADD2  PC,#2         JMP   SYSCSTK         END******************************************************************  SYSCEQL - Test for Equal******************************************************************SYSCEQL  START         JSR   SYSCLOD2         JSR   SYSCMP4         JNE   SYSCFALSE         JMP   SYSCTRUE         END******************************************************************  SYSCFJPW - Jump if TOS = False**  Inputs:*        (PC) - jump address******************************************************************SYSCFJPW START         LDY   #3         LDA   #0LB1      ORA   (SP),Y         DBPL  Y,LB1         TAY         PHP         ADD2  SP,#4         JSR   SYSCGET2         PLP         BNE   RTS         STA   PC         STX   PC+1RTS      RTS         END******************************************************************  SYSCGEQ - Test for Signed Greater Than or Equal******************************************************************SYSCGEQ  START         JSR   SYSCLOD2         JSR   SYSCMP4         JGE   SYSCTRUE         JMP   SYSCFALSE         END******************************************************************  SYSCGRT - Test for Signed Greater Than******************************************************************SYSCGRT  START         JSR   SYSCLOD2         JSR   SYSCMP4         JGT   SYSCTRUE         JMP   SYSCFALSE         END******************************************************************  SYSCINCI - Increment Integer******************************************************************SYSCINCI START         SEC         LDY   #0         LDX   #4LB1      LDA   (SP),Y         ADC   #0         STA   (SP),Y         BCC   LB2         INY         DBNE  X,LB1LB2      RTS         END******************************************************************  SYSCINDC - Indirect Load of a Character******************************************************************SYSCINDC START         MOVE  {SP},WR0         LDY   #0         LDA   (WR0),Y         JMP   SYSCBOOL         DC    R'SYSCFALSE'         END******************************************************************  SYSCINDI - Indirect Load of an Integer******************************************************************SYSCINDI START         MOVE  {SP},WR0         LDY   #0         LDX   #0         LDA   (WR0),Y         STA   (SP),Y         INY         LDA   (WR0),Y         STA   (SP),Y         BPL   LB1         DEXLB1      TXA         INY         STA   (SP),Y         INY         STA   (SP),Y         RTS         END******************************************************************  SYSCINDL - Indirect Load of Long Integer******************************************************************SYSCINDL START         MOVE  {SP},WR0         MOVE  {WR0},{SP},#4         RTS         END******************************************************************  SYSCIOR - Bitwise OR******************************************************************SYSCIOR  START         JSR   SYSCIBOP         LDY   #3LB1      LDA   (SP),Y         ORA   (WR0),Y         STA   (SP),Y         DBPL  Y,LB1         RTS         END******************************************************************  SYSCLAOB - Load Address of Value on Stack Frame**  Inputs:*        (PC) - disp******************************************************************SYSCLAOB START         SUB2  SP,#4         JSR   SYSCGET1         STA   WR0         LDY   #0         SEC         LDA   MP         SBC   WR0         STA   (SP),Y         LDA   MP+1         SBC   #0         INY         STA   (SP),Y         INY         LDA   #0         STA   (SP),Y         INY         STA   (SP),Y         JMP   SYSCSTK         END******************************************************************  SYSCLAOW - Load Address of Value on Stack Frame**  Inputs:*        (PC) - disp******************************************************************SYSCLAOW START         SUB2  SP,#4         JSR   SYSCGET2         STA   WR0         STX   WR1         SUB2  MP,WR0,{SP}         LDY   #2         LDA   #0         STA   (SP),Y         INY         STA   (SP),Y         JMP   SYSCSTK         END******************************************************************  SYSCLDCI - Load Integer Constant**  Inputs:*        Y - op code*2  (also is the constant * 2)******************************************************************SYSCLDCI START         SUB2  SP,#4         TYA         LSR   A         JSR   SYSCBOOL         JMP   SYSCSTK         DC    R'SYSCFALSE'         END******************************************************************  SYSCLDCIB - Load Integer Constant**  Inputs:*        (PC) - byte value******************************************************************SYSCLDCIB START         SUB2  SP,#4         JSR   SYSCGET1         JSR   SYSCBOOL         JMP   SYSCSTK         DC    R'SYSCFALSE'         END******************************************************************  SYSCLDCIW - Load Integer Constant**  Inputs:*        (PC) - word value******************************************************************SYSCLDCIW START         SUB2  SP,#4         JSR   SYSCGET2         LDY   #0         STA   (SP),Y         INY         TXA         STA   (SP),Y         BPL   LB1         LDA   #$FF         BNE   LB2LB1      LDA   #0LB2      INY         STA   (SP),Y         INY         STA   (SP),Y         JMP   SYSCSTK         END******************************************************************  SYSCLDCIL - Load Long Integer Constant**  Inputs:*        (PC) - word value******************************************************************SYSCLDCIL START         SUB2  SP,#4         JSR   SYSCGET2         LDY   #0         STA   (SP),Y         INY         TXA         STA   (SP),Y         JSR   SYSCGET2         LDY   #2         STA   (SP),Y         INY         TXA         STA   (SP),Y         JMP   SYSCSTK         END******************************************************************  SYSCLDOCW - Load Character, Absolute**  Inputs:*        (PC) - addr******************************************************************SYSCLDOCW START         SUB2  SP,#4         JSR   SYSCGET2                 get address of character         STA   WR0         STX   WR1         LDY   #0                       load value         LDA   (WR0),Y         JSR   SYSCBOOL         JMP   SYSCSTK         DC    R'SYSCFALSE'         END******************************************************************  SYSCLDOIW - Load Integer, Absolute**  Inputs:*        (PC) - addr******************************************************************SYSCLDOIW START         SUB2  SP,#4         JSR   SYSCGET2         STA   WR0         STX   WR1         LDY   #0         LDX   #0         LDA   (WR0),Y         STA   (SP),Y         INY         LDA   (WR0),Y         STA   (SP),Y         BPL   LB1         DEXLB1      TXA         INY         STA   (SP),Y         INY         STA   (SP),Y         JMP   SYSCSTK         END******************************************************************  SYSCLDOLW - Load Long Integer, Absolute**  Inputs:*        (PC) - addr******************************************************************SYSCLDOLW START         SUB2  SP,#4         JSR   SYSCGET2         STA   WR0         STX   WR1         MOVE  {WR0},{SP},#4         JMP   SYSCSTK         END         APPEND CL.SYSCLEQ