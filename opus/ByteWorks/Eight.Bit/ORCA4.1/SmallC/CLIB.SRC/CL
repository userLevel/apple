         LIST  OFF         SYMBOL OFF         KEEP  A..CLIB         MCOPY /RAM/CL.MACROS******************************************************************  CLIB - Libraries for Small C******************************************************************COMMON   DATAPC       GEQU  $90                      program counterNMP      GEQU  $92                      temp MPSYSESTMIN GEQU $94                      stack minimumSYSESTMAX GEQU $96                      stack maximumSP       GEQU  $98                      stack/ stack frame pointerMP       GEQU  $A0                      mark pointer; start of stack frameWR0      GEQU  $C0                      working registersWR1      GEQU  $C1WR2      GEQU  $C2WR3      GEQU  $C3WR4      GEQU  $C4WR5      GEQU  $C5WR6      GEQU  $C6WR7      GEQU  $C7MR1      GEQU  $D0                      math registersMR2      GEQU  $E1         END******************************************************************  SYSPCODE - P-Code Interpreter for Small C******************************************************************SYSPCODE STARTFLEN     EQU   1024*4                   size of free memory area;;  Initialize the interpreter.;         LA    MR1,256                  find largest block of free memoryLB1      INC   MR1+1         FINDBUFF MR2,MR1         BCS   LB1         SUB2  MR1,#FLEN+256            allow room for file buffers         INITSTACK MR1                  reserve a stack frame area         SEC                            init sp, mp         LDA   SP         STA   MP         SBC   #4         STA   SP         LDA   SP+1         STA   MP+1         SBC   #0         STA   SP+1         LDY   #0                       set return address         LDA   #<STOP         STA   (SP),Y         INY         LDA   #>STOP         STA   (SP),Y         LA    PC,MAIN                  set PC to main routine;;  Interpreter.;SYSINTERP ENTRY         LDY   #0                       fetch the op code         LDA   (PC),Y         INC2  PC         ASL   A         BCS   INOP         TAY         LDA   ADR,Y                    get the p-code routine address         STA   JSR+1         LDA   ADR+1,Y         STA   JSR+2JSR      JSR   JSR                      self modifying - but fast!         JMP   SYSINTERPINOP     CMP   #$D4                     bad op code if not a NOP         BEQ   NOP         SEC         ROR   A         BCC   BAD2;;  Flag a bad p-code;BAD      LSR   A                        bad op code - flag itBAD2     STA   SP         LM    SP+1,#0         PRINT2 'Bad op code ('         PRNUM SP         LDA   #')'         JSR   SYSCOUT         JMP   ER1;;  Stop processing.;STOP     DC    H'2F'                    stp p-code;;  Switch to machine code.;MACHINE  JMP   (PC)                     for calling native code routineNOP      JSR   MACHINE                  call machine code routine         JMP   SYSINTERP;;  Return from function.;SYSCRET  ENTRY         SUB2  MP,#4                    MP points to start of header         LDY   #0                       reset PC         LDA   (MP),Y         STA   PC         INY         LDA   (MP),Y         STA   PC+1         INY                            get old MP         LDA   (MP),Y         TAX         INY         LDA   (MP),Y         PHART1      LDA   (SP),Y                   set return value         STA   (MP),Y         DBPL  Y,RT1         MOVE  MP,SP                    set SP         PLA                            set MP         STA   MP+1         STX   MP         RTS;;  Out of memory error.;OOM      PRINT 'Out of memory'         JMP   STP;;  Handle math errors;SYSEROR  ENTRY         TXA         PHA         PRINT2 'Run time error #'         PLA         STA   SP         LM    SP+1,#0         PRNUM SPER1      PRINT2 ' at '         PRNUM PC         PRINTSTP      PLA                            stop processing         PLA         RTS;;  P-code jump address table;ADR      DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    S'SYSCLDCIB,SYSCLDCIW,SYSCLAOB,SYSCLAOW'         DC    S'SYSCINDC,SYSCINDI,SYSCCPOC,SYSCCPOI'         DC    S'SYSCLDOCW,SYSCLDOIW,SYSCCROCW,SYSCCROIW'         DC    S'SYSCPOPI,SYSCCUPBW,SYSCMST,STP'         DC    S'SYSCENTB,SYSCENTW,SYSCRET,SYSCUJPW'         DC    S'SYSCFJPW,SYSCADI,SYSCSBI,SYSCMPI'         DC    S'SYSCDVI,SYSCMOD,SYSCIOR,SYSCXOR'         DC    S'SYSCANDI,SYSCSHR,SYSCSHL,SYSCNGI'         DC    S'SYSCINCI,SYSCDECI,SYSCEQL,SYSCNEQ'         DC    S'SYSCLES,SYSCGRT,SYSCLEQ,SYSCGEQ'         DC    S'SYSCULT,SYSCUGT,SYSCULE,SYSCUGE'         DC    S'SYSCNOT,SYSCOCP,SYSCLOR,SYSCLND'         DC    S'SYSCTJPW,SYSCSTOI,SYSCSTOC,SYSCSROIW'         DC    S'SYSCSROCW,SYSCXJP,SYSCCPOL,SYSCCROLW'         DC    S'SYSCLDCIL,SYSCINDL,SYSCLDOLW,SYSCSTOL'         DC    S'SYSCSROLW,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         DC    S'BAD,BAD,BAD,BAD'         END******************************************************************  SYSABSCODE - P-Code Interpreter for Small C; Uses Fixed*        Addresses******************************************************************SYSABSCODE STARTFLEN     EQU   1024*4                   size of free memory area;;  Initialize the interpreter.;         LA    MR1,256                  find largest block of free memoryLB1      INC   MR1+1         FINDBUFF MR2,MR1         BCS   LB1         SUB2  MR1,#FLEN+256            allow room for file buffers         INITSTACK MR1                  reserve a stack frame area         SEC                            init sp, mp         LDA   SP         STA   MP         SBC   #4         STA   SP         LDA   SP+1         STA   MP+1         SBC   #0         STA   SP+1         LDY   #0                       set return address         LDA   #<STOP         STA   (SP),Y         INY         LDA   #>STOP         STA   (SP),Y         LA    PC,MAIN                  set PC to main routine;;  Interpreter.;SYSINTERP ENTRY         LDY   #0                       fetch the op code         LDA   (PC),Y         INC2  PC         ASL   A         BCS   INOP         TAY         LDA   ADR,Y                    get the p-code routine address         STA   JSR+1         LDA   ADR+1,Y         STA   JSR+2JSR      JSR   JSR                      self modifying - but fast!         JMP   SYSINTERPINOP     CMP   #$D4                     bad op code if not a NOP         BEQ   NOP         SEC         ROR   A         BCC   BAD2;;  Flag a bad p-code;BAD      LSR   A                        bad op code - flag itBAD2     STA   SP         LM    SP+1,#0         PRINT2 'Bad op code ('         PRNUM SP         LDA   #')'         JSR   SYSCOUT         JMP   ER1;;  Stop processing.;STOP     DC    H'2F'                    stp p-code;;  Switch to machine code.;MACHINE  JMP   (PC)                     for calling native code routineNOP      JSR   MACHINE                  call machine code routine         JMP   SYSINTERP;;  Return from function.;SYSCRET  ENTRY         SUB2  MP,#4                    MP points to start of header         LDY   #0                       reset PC         LDA   (MP),Y         STA   PC         INY         LDA   (MP),Y         STA   PC+1         INY                            get old MP         LDA   (MP),Y         TAX         INY         LDA   (MP),Y         PHART1      LDA   (SP),Y                   set return value         STA   (MP),Y         DBPL  Y,RT1         MOVE  MP,SP                    set SP         PLA                            set MP         STA   MP+1         STX   MP         RTS;;  Out of memory error.;OOM      PRINT 'Out of memory'         JMP   STP;;  Handle math errors;SYSEROR  ENTRY         TXA         PHA         PRINT2 'Run time error #'         PLA         STA   SP         LM    SP+1,#0         PRNUM SPER1      PRINT2 ' at '         PRNUM PC         PRINTSTP      PLA                            stop processing         PLA         RTS;;  P-code jump address table;ADR      DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCI,SYSCLDCI,SYSCLDCI,SYSCLDCI'         DC    A'SYSCLDCIB,SYSCLDCIW,SYSCLAOB,SYSCLAOW'         DC    A'SYSCINDC,SYSCINDI,SYSCCPOC,SYSCCPOI'         DC    A'SYSCLDOCW,SYSCLDOIW,SYSCCROCW,SYSCCROIW'         DC    A'SYSCPOPI,SYSCCUPBW,SYSCMST,STP'         DC    A'SYSCENTB,SYSCENTW,SYSCRET,SYSCUJPW'         DC    A'SYSCFJPW,SYSCADI,SYSCSBI,SYSCMPI'         DC    A'SYSCDVI,SYSCMOD,SYSCIOR,SYSCXOR'         DC    A'SYSCANDI,SYSCSHR,SYSCSHL,SYSCNGI'         DC    A'SYSCINCI,SYSCDECI,SYSCEQL,SYSCNEQ'         DC    A'SYSCLES,SYSCGRT,SYSCLEQ,SYSCGEQ'         DC    A'SYSCULT,SYSCUGT,SYSCULE,SYSCUGE'         DC    A'SYSCNOT,SYSCOCP,SYSCLOR,SYSCLND'         DC    A'SYSCTJPW,SYSCSTOI,SYSCSTOC,SYSCSROIW'         DC    A'SYSCSROCW,SYSCXJP,SYSCCPOL,SYSCCROLW'         DC    A'SYSCLDCIL,SYSCINDL,SYSCLDOLW,SYSCSTOL'         DC    A'SYSCSROLW,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         DC    A'BAD,BAD,BAD,BAD'         END******************************************************************  SYSINITC - Initialization for Small-C******************************************************************SYSINITC STARTFLEN     EQU   1024*4                   size of free memory area;;  Initialize the interpreter.;         LA    MR1,256                  find largest block of free memoryLB1      INC   MR1+1         FINDBUFF MR2,MR1         BCS   LB1         SUB2  MR1,#FLEN+256            allow room for file buffers         INITSTACK MR1                  reserve a stack frame area         SEC                            init sp, mp         LDA   SP         STA   MP         SBC   #4         STA   SP         LDA   SP+1         STA   MP+1         SBC   #0         STA   SP+1         TSX                            set return address         STX   PC         JMP   MAIN                     jump to C program         END         APPEND CL.SYSCADI