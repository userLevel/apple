#list off#keep "cc"/******************************************************************  Small-C Compiler 2.0**  By Mike Westerfield**  Copyright August 1985*  By the Byte Works, Inc.**  Based on Small-C 1.1, by Ron Cain*****************************************************************//*      Define system dependent parameters        *//*      Constants                                 */#define singlequote 39#define NULL 0#define EOFCH 255#define false 0#define true 1#define lnum 7#define eostr 255/*      Variable sizes                            */#define charsz     1#define shortsz    2#define intsz      2#define longsz     4#define ptrsz      2/*      System wide name sizes                    */#define namesize   9                   /* length of storage field; allows space                                          for a zero terminator */#define namemax    8                   /* number of characters in a name */#define filemax    65                  /* number of chars in a file name *//*      Define the symbol table parameters        */#define symsiz     (namesize+5)        /* size of a symbol table entry */#define symtbsz    5040                /* size of the symbol table */#define numglbs    300                 /* number of global symbols allowed */#define startglb   symtab              /* start of global area */#define endglb     startglb+numglbs*symsiz /* end of global area */#define startloc   endglb+symsiz       /* start of local area */#define endloc     symtab+symtbsz-symsiz /* end of local area *//* Define symbol table entry format               *//*                                                *//* Note: values are start positions of fields     *//* in a symbol definition.                        */#define name       0                   /* name of symbol */#define ident      namesize            /* kind of symbol                                          (variable, array etc.) */#define type       namesize+1          /* cchar, cshort, cint, or clong */#define storage    namesize+2          /* static (global) or local */#define offset     namesize+3          /* offset of local symbols                                          from start of stack frame *//*      Define possible entries for "ident"       */#define variable   1#define array      2#define pointer    3#define function   4/*      Define possible entries for "type"        */#define cchar      1#define cint       2#define cshort     2#define clong      3/*      Define possible entries for "storage"     */#define statik     1                   /* global variable; in sysccom */#define stkloc     2                   /* local variable; on stack frame *//*      Define the "while" statement queue        */#define wqtabsz    100                 /* size of while queue */#define wqsiz      2                   /* size of entry in while queue */#define wqmax      wq+wqtabsz-wqsiz    /* max disp in wqtabsz *//*      Define entry offset while in queue        */#define wqloop     0#define wqlab      1/*      Define the literal pool                   */#define litabsz    2000#define litmax     litabsz-1/*      Define the input line                     */#define linesize   81                  /* max length of input line */#define linemax    linesize-1#define mpmax      linemax             /* max length of macro line *//*      Define the macro (define) pool            */#define macqsize   1000                /* size of macro table */#define macmax     macqsize-1          /* max extent of macro table *//*      Define the switch statement array         */#define switchsize 200                 /* max # case labels *2 *//*      Define statement types (tokens)           */#define stif       1#define stwhile    2#define streturn   3#define stbreak    4#define stcont     5#define stasm      6#define stexp      7#define stdo       8#define stfor      9#define stgoto     10#define stlabel    11#define stswitch   12#define stcase     13#define stdefault  14/*      Define code generation variables          */#define markstk    4           /* size of stack frame overhead *//*      Define the peephole optimizer window      */#define peepsize   8#define instsize   3#define peeparray  27                  /* (peepsize+1)*instsize *//*      ORCA interface variables                  */char   *sfile,                         /* source file name */       *kpfile,                        /* output file name */       *parms,                         /* partial compile list */       apname[linesize];               /* append file name */int    kflag,                          /* keep output? */       listflag,                       /* list source? */       append;                         /* append another language? *//*      Now reserve some storage words            */char   symtab[symtbsz];                /* symbol table */char   *glbptr,*locptr;                /* pointers to next entries */int    wq[wqtabsz];                    /* while queue */int    *wqptr;                         /* ptr to next entry */char   litq[litabsz];                  /* literal pool */int    litptr;                         /* ptr to next entry */char   macq[macqsize];                 /* macro string buffer */int    macptr;                         /* ... and its index */long   caseq[switchsize];              /* array of case labels */int    caseptr,                        /* ... and its index */       founddefault,                   /* indicates if a defalt label                                          has been found for this switch */       activeswitch,                   /* is there an active switch? */       defaultlab;                     /* label # for default label */char   line[linesize];                 /* parsing buffer */char   mline[linesize];                /* temp macro buffer */int    lptr,mptr;                      /* ptrs to each other */long   peep[peeparray];                /* peephole opt. array *//*       msc storage      */long   org;                            /* start origin */int    nxtlab,                         /* next avail label # */       numsubs,                        /* # of functions for partial compile */       litlab,                         /* label # assigned to literal pool */       sp,                             /* compiler relative stack ptr */       argstk,                         /* function arg sp */       ncmp,                           /* # open compound statements */       errcnt,                         /* # errors in compilation */       eof,                            /* set non-zero on final input eof */       output,                         /* output file id */       input,                          /* iob # for source file */       input2,                         /* iob # for include file */       ctext,                          /* non-zero to intermix c-source */       cmode,                          /* non-zero while parsing c-code */                                       /* zero while parsing assembly code */       skipping,                       /* non-zero when skipping during */                                       /* a partial compile */       lastst,                         /* last executing statement type */       nofunctions,                    /* any functions yet? */       numlines,                       /* # source lines */       size[4];                        /* sizes of types */char   *cptr;                          /* work ptr to any char buffer */int    *iptr;                          /* work ptr to any int buffer */char   string[12];                     /* used to build number strings */char   quote[2];                       /* quote string */#include "cc2"#include "cc3"#include "cc4"#include "cc5"#include "cc6"#include "cc7"#include "cc8"#include "ccasm"