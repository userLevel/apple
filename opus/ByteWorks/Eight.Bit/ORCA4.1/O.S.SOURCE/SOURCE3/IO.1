******************************************************************  SYSPUTS - String Output**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        WR0 - address of string******************************************************************SYSPUTS  START         LDY   #1                       print enough blanks to right justify         SEC                             the output         LDA   SYSS2         SBC   (SYSS1),Y         BEQ   PT1         BCC   PT1         TAX         JSR   SYSPRBLPT1      LDA   (SYSS1),Y                get the length of the string and its         BEQ   PT3                       starting address         TAX         ADD2  SYSS1,#2         LDY   #0PT2      LDA   (SYSS1),Y                write the string         JSR   SYSCOUT         INY         DBNE  X,PT2PT3      RTS         END******************************************************************  SYSPRBL - Print Blanks**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        X - number of blanks to print******************************************************************SYSPRBL  START         LDA   #' 'LB1      JSR   SYSCOUT         DBNE  X,LB1         RTS         END******************************************************************  SYSREAD - Controler for Inputs**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        * - address of routine to call*        *+2 - control byte; bit definitions are*              7-4 - type of operand*              3-2 - CR flag, 01 if CR needed*              1-0 addressing mode for output*                    01 - absolute*                    10 - indirect*                    11 - stack*        *+3 - operand for output address******************************************************************SYSREAD  STARTRETURN   EQU   $0D                      RETURN key code;;  Fetch the control bytes;         PLA         STA   STR         PLA         STA   STR+1         INC2  STR         MOVE  {STR},JAD,#3         ADD2  STR,#3;;  Input the value;         JSR   OPR                      read the input         LDA   CBYTE                    if required, scan for a CR         AND   #%00001100         BEQ   MV1PV4      LDA   SYSEOL         BNE   MV1         JSR   SYSKBIN         JMP   PV4;;  Move the value to its permanent location;MV1      LDA   CBYTE                    load the effective address         MLSR  A,4         TAX         PHA         LDA   CBYTE         AND   #3         JSR   SYSLDAD         PLA                            split on type         CMP   #10         BNE   MV4         LDY   #0                       move a string         LDA   (WR0),Y         TAX         ADD2  WR0,#2MV2      LDA   SYSLINE,Y         CMP   #RETURN         BEQ   MV3         STA   (WR0),Y         INY         DBNE  X,MV2MV3      DEC2  WR0         TYA         LDY   #0         STA   (WR0),Y         JMP   (STR)MV4      DEYMV5      LDA   SYSS1,Y                  move fixed length type         STA   (WR0),Y         DBPL  Y,MV5         JMP   (STR);..............................................................;;                                                              ;;  Internal Subroutines                                        ;;                                                              ;;..............................................................;;;  OPR:  Indirect subroutine call;OPR      JMP   (JAD);;  Local Variables;JAD      DS    2                        local storage for the informationCBYTE    DS    1                         removed from the return address         END******************************************************************  SYSRITE - Controler for Outputs**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        * - address of format routine*        *+2 - control byte; bit definitions are*              7-4 - type of operand*              3-2 - CR flag, 01 if CR needed*              1-0 addressing mode for output*                    00 - immediate*                    01 - absolute*                    10 - indirect*                    11 - stack*        *+3 - control byte; bit definitions are*              7-6 - addressing mode for first format field*              5-4 - addressing mode for second format field*                    (floating point only)*              3-0 - unused*        *+4 - operand for input address******************************************************************SYSRITE  STARTRETURN   EQU   $0D                      RETURN key code;;  Fetch the operands;         LM    TFERR,SYSFERR            save the current error status         PLA                            fetch the control bytes         STA   STR         PLA         STA   STR+1         INC2  STR         MOVE  {STR},JAD,#4         ADD2  STR,#4FP0      LA    WR2,SYSS1                load the operand         LDA   CBYTE1         MLSR  A,4         TAX         LDA   CBYTE1         AND   #3         JSR   SYSLDOP         LA    WR2,SYSS2                load the first format field         LDX   #0         LDA   CBYTE2         MLSR  A,6         JSR   SYSLDOP         LDA   CBYTE1                   if FP or DP, load the second format         AND   #$F0                      field         CMP   #%01000000         BEQ   FP1         CMP   #%01010000         BNE   PV1FP1      LA    WR2,SYSS2+2         LDX   #0         LDA   CBYTE2         MLSR  A,4         AND   #3         JSR   SYSLDOP;;  Ouput the value;PV1      JSR   OPR         LDA   CBYTE1         AND   #%00001100         BEQ   PV5         LDA   #RETURN         JSR   SYSCOUTPV5      LM    SYSFERR,TFERR            restore the error status         JMP   (STR);;  OPR:  Indirect subroutine call;OPR      JMP   (JAD);;  Local variables;JAD      DS    2                        local storage for the informationCBYTE1   DS    1                         removed from the return addressCBYTE2   DS    1TFERR    DS    1                        temp storage for SYSFERR         END******************************************************************  SYSCOUT - Character Output**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        $36 - pointer to current character output routine*        A - character to output******************************************************************SYSCOUT  STARTOUT      EQU   $36                      output hook         ORA   #$80         JMP   (OUT)         END******************************************************************  SYSKBIN - Keyboard Input Routine**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  OUTPUTS:*        A - character read*        SYSEOL - end of line flag*        SYSEOF - end of file flag (always false)**  NOTES:*        1)  Entry at SYSKBPT puts back a character******************************************************************SYSKBIN  STARTCTRLE    EQU   $05                      CTRL E key codeCTRLX    EQU   $18                      CTRL X key codeCTRLY    EQU   $19                      CTRL Y key codeDELETE   EQU   $7F                      DELETE key codeESC      EQU   $1B                      ESC key codeRETURN   EQU   $0D                      RETURN key codeLARROW   EQU   $08                      left arrow key codeRARROW   EQU   $15                      right arrow key codeCV       EQU   $25                      vertical position of cursorCH       EQU   $24                      horizontal position of cursorWNDW     EQU   $21                      window widthOPEN_APPLE EQU $C061                    open apple key memory location;;  Initialization;         NOP                            leave room for redirection patch         NOP         NOP         STX   LX                       save the registers         STY   LY         LM    (SYSEOL,SYSEOF),#0       initialize the input flags         STA   INSERT                   start off in overstrike         LDA   LFLAG                    skip line read if old characters are         JNE   GC1                       left;;  Input a fresh line;KB0      MOVE  #' ',SYSLINE,#0          initialize the line         LDX   #0                       enter a line         STX   CC         STX   MCCKB1      JSR   SYSCRIN         CMP   #RETURN                  handle end of line         BNE   NK1         JSR   DEOL         LDX   CC         LDA   #RETURN         STA   SYSLINE,X         JSR   SYSCOUT         JMP   KB9NK1      CMP   #CTRLY                   handle apple-Y         BEQ   NK3         CMP   #'y'         BEQ   NK2         CMP   #'Y'         BNE   NK4NK2      LDX   OPEN_APPLE         BPL   NK4NK3      JSR   DEOL         JMP   KB1NK4      CMP   #','                     handle apple-<         BEQ   NK5         CMP   #'<'         BNE   NK6NK5      LDX   OPEN_APPLE         BPL   NK6         JSR   START         JMP   KB1NK6      CMP   #'.'                     handle apple->         BEQ   NK7         CMP   #'>'         BNE   NK9NK7      LDX   OPEN_APPLE         BPL   NK9NK8      LDX   CC         CPX   MCC         JEQ   KB1         LDA   SYSLINE,X         JSR   SYSCOUT         INC   CC         JMP   NK8NK9      CMP   #CTRLE                   handle apple-E         BEQ   NK11         CMP   #'e'         BEQ   NK10         CMP   #'E'         BNE   NK12NK10     LDX   OPEN_APPLE         BPL   NK12NK11     LDA   INSERT         EOR   #1         STA   INSERT         JMP   KB1NK12     CMP   #DELETE                  handle DELETE         BNE   KB2         LDX   CC                       quit if at start of line         JEQ   KB1NK13     CPX   MCC                      done if at end if characters         BEQ   NK14         LDA   SYSLINE,X                move a character         STA   SYSLINE-1,X         INX                            next character         JMP   NK13NK14     LDA   #' '                     zero last char in line         STA   SYSLINE-1,X         JSR   LEFT                     update line         JSR   UPDATE         DEC   MCC                      update line length         JMP   KB1KB2      CMP   #LARROW                  handle a left arrow         BNE   KB4         JSR   LEFT         JMP   KB1KB4      CMP   #CTRLX                   start over         BEQ   KB4A         CMP   #ESC         BEQ   KB4A         CMP   #'X'         BEQ   KB4B         CMP   #'x'         BNE   KB5KB4B     LDX   OPEN_APPLE         BPL   KB5KB4A     LDA   MCC         PHA         JSR   START         PLA         TAX         BEQ   KB4DKB4C     LDA   #' '         INC   CC         JSR   SYSCOUT         DBNE  X,KB4C         JSR   STARTKB4D     JMP   KB0KB5      CMP   #RARROW                  handle a right arrow         BNE   KB5A         LDX   CC         LDA   SYSLINE,X         JMP   KB6KB5A     LDX   INSERT                   handle inserts         BEQ   KB6         JSR   INSTKB6      LDX   CC                       handle normal keys         INC   CC         BNE   KB6A         DEC   CC         JMP   KB1KB6A     STA   SYSLINE,X         JSR   SYSCOUT         LDX   CC         CPX   MCC         BLT   KB6B         STX   MCCKB6B     CPX   #$F8         BLT   KB8         PHA         BELL         PLAKB8      JMP   KB1KB9      INC   LFLAG                    finish the line         LM    CC,#0;;  Get a key code;GC1      LDX   CC                       get the key code         LDA   SYSLINE,X         CMP   #RETURN                  check for a RETURN key         BNE   GC2         DEC   LFLAG         DEC   CC         INC   SYSEOLGC2      INC   CC         LDX   LX         LDY   LYRTS      RTS;;  START - move to the start of the line.;START    LDA   CC         BEQ   RTS         JSR   LEFT         JMP   START;;  LEFT - Move left one character;LEFT     LDX   CC         BEQ   LF1         DEC   CC         DEC   CH         BPL   LF1         DEC   CV         LDX   WNDW         DEX         STX   CH         GOTOXY CH,CVLF1      RTS;;  INST - Insert a character at CC;INST     PHA                            save current character         LDA   MCC                      quit if at end of line         CMP   CC         BEQ   IN3         INC   MCC                      update EOL disp         BNE   IN1         DEC   MCCIN1      LDX   MCC                      move charactersIN2      LDA   SYSLINE-1,X         STA   SYSLINE,X         DEX         CPX   CC         BNE   IN2         JSR   UPDATE                   rewrite the lineIN3      PLA                            recover character         RTS;;  DEOL - delete to end of line;DEOL     SEC                            quit if already at EOL         LDA   MCC         SBC   CC         BCC   RTS         BEQ   RTS         PHA                            save # chars         TAY                            write blanks         LDX   CC         LDA   #' 'DE1      STA   SYSLINE,X         JSR   SYSCOUT         INX         DBNE  Y,DE1         LM    MCC,CC                   fake back up         PLA         STA   CC         JSR   START         LM    CC,MCC                   reset line counterRTS2     RTS;;  UPDATE - update the line;UPDATE   LDA   CC                       quit if at end of line         CMP   MCC         BEQ   RTS2         PHA                            save char position         TAX         LDY   #0                       write lineUP1      LDA   SYSLINE,X         JSR   SYSCOUT         INX         INY         CPX   MCC         BLT   UP1         BEQ   UP1         STY   CC                       back up to old spot         JSR   START         PLA                            restore char position         STA   CC         RTS;;  Putback routine;SYSCRPB  ENTRY         NOP                            leave room for redirection patch         NOP         NOP         STX   LX         PHA         LM    (SYSEOL,SYSEOF),#0         PLA         DEC   CC         LDX   CC         STA   SYSLINE,X         LDX   #1         STX   LFLAG         LDX   LX         RTS;;  Local variables;CC       DS    1                        character counterINSERT   DS    1                        insert mode?LFLAG    DC    I1'0'                    flag indicating if the input buffer!                                        has a line in itLX       DS    1                        temporary storage for registersLY       DS    1MCC      DS    1                        max character counter         END******************************************************************  SYSCRIN - Character Input**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        $38 - pointer to current character input routine**  OUTPUTS:*        A - character read******************************************************************SYSCRIN  STARTSYSIN    EQU   $38                      input hook         JSR   IN         AND   #$7F         RTSIN       JMP   (SYSIN)         END