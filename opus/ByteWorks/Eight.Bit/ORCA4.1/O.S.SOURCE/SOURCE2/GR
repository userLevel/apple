         LIST  OFF         SYMBOL OFF         KEEP  A.GRAPHICS         MCOPY /RAM/GR.MACROS         COPY  COMMON******************************************************************  SYSCMAP - Color Map Plot Subroutine**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSCTBL - color map table*        SYSX, SYSY - X, Y position*        SYSCOLOR - color to use******************************************************************SYSCMAP  START         LM    COLOR,SYSCOLOR           save the current color         JSR   SYSGRED                  read the current color         ASL   A                        create the color table index         ASL   A         ASL   A         ASL   A         ORA   SYSCOLOR         TAX                            load the color to use         LDA   SYSCTBL,X         JSR   SYSCOLR                  set the color         JSR   SYSPLOT2                 plot the point         LM    SYSCOLOR,COLOR           reset the color         RTSCOLOR    DS    1                        temp color         END******************************************************************  SYSCTBL - Color Table for Color Mapping**  This table defines the color that will result when color*  A is drawn onto color B.  The colors being drawn run by*  columns, while the color drawn on run by rows.  The byte*  that results is the color number to use.**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.******************************************************************SYSCTBL  START         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         DC    H'00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F'         END******************************************************************  SYSRFIL - Region Filling**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSCOLOR - fill color*        X, Y - start position**  NOTES:*        1) Fills a four-connected region.*        2) Uses flood fill.*        3) For algorithm description, see Foley and Van Dam,*           Fundamentals of Interactive Computer Graphics,*           p. 450.******************************************************************SYSRFIL  STARTCOLOR    EQU   $0                       fill region colorTOS      EQU   $1                       top of fill stackTOP_OPEN EQU   $2                       top region open flagBOTTOM_OPEN EQU $3                      bottom region open flagMAXSTACK EQU   16                       max elements in fill stack;;  Initialization.;         MOVE  COLOR,SAVE,#4            save zero page         JSR   SYSGRED                  COLOR = READ_PIXEL(X,Y)         STA   COLOR         CMP   SYSCOLOR         BEQ   RTS         LM    TOS,#0                   TOS = 0         BEQ   FL3;;  Move to right of current raster line.;FL1      LDA   TOS                      quit if no more lines         BNE   FL2         MOVE  SAVE,COLOR,#4RTS      RTSFL2      DEC   TOS                      unstack next line         LDX   TOS         LDA   XL,X         STA   SYSX         LDA   XH,X         STA   SYSX+1         LDA   YL,X         STA   SYSY         LDA   YH,X         STA   SYSY+1FL3      CMPW  SYSX,SYSGR               move to right side of line         BGE   FL4         INC2  SYSX         JSR   SYSGRED         CMP   COLOR         BEQ   FL3         DEC2  SYSXFL4      LDA   #0                       TOP_OPEN = FALSE         STA   TOP_OPEN         STA   BOTTOM_OPEN              BOTTOM_OPEN = FALSE;;  Fill a point on the line.;FL5      JSR   SYSPLOT;;  Handle open areas on the top.;         INC2  SYSY                     look up         CMPW  SYSY,SYSGT               skip if out of window         BGT   FL7         JSR   SYSGRED                  read the point         LDX   TOP_OPEN                 IF TOP_OPEN THEN         BEQ   FL6         CMP   COLOR                      IF PIXEL <> COLOR THEN         BEQ   FL7         DEC   TOP_OPEN                     TOP_OPEN = FALSE         BEQ   FL7                        ENDIFFL6      CMP   COLOR                    ELSE         BNE   FL7                        IF PIXEL = COLOR THEN         JSR   STACK                        STACK (X,Y)         INC   TOP_OPEN                     TOP_OPEN = TRUE!                                         ENDIFFL7      SUB2  SYSY,#2                  ENDIF; look down;;  Handle open areas on the bottom.;         CMPW  SYSY,SYSGB               skip if out of window         BLT   FL9         LDA   SYSY+1         BMI   FL9         JSR   SYSGRED                  read the point         LDX   BOTTOM_OPEN              IF BOTTOM_OPEN THEN         BEQ   FL8         CMP   COLOR                      IF PIXEL <> COLOR THEN         BEQ   FL9         DEC   BOTTOM_OPEN                  BOTTOM_OPEN = FALSE         BEQ   FL9                        ENDIFFL8      CMP   COLOR                    ELSE         BNE   FL9                        IF PIXEL = COLOR THEN         JSR   STACK                        STACK (X,Y)         INC   BOTTOM_OPEN                  BOTTOM_OPEN = TRUE!                                         ENDIFFL9      INC2  SYSY                     ENDIF;;  If more points on the line, loop.;         DEC2  SYSX                     look left         LDA   SYSX+1         BMI   FL10         CMPW  SYSX,SYSGL         BLT   FL10         JSR   SYSGRED         CMP   COLOR         JEQ   FL5FL10     JMP   FL1;;  STACK - Stack a Point.;STACK    LDX   TOS         CPX   #MAXSTACK         BGE   ST2         LDA   SYSX         STA   XL,X         LDA   SYSX+1         STA   XH,X         LDA   SYSY         STA   YL,X         LDA   SYSY+1         STA   YH,X         INC   TOSST2      RTS;;  Fill stack.;XL       DS    MAXSTACKXH       DS    MAXSTACKYL       DS    MAXSTACKYH       DS    MAXSTACKSAVE     DS    4         END******************************************************************  SYSCOLR - Set Pen Color**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        A - Color Code**  OUTPUTS:*        SYSCOLOR - Set to A if the color is available.******************************************************************SYSCOLR  START         LDX   #1                       set bit mask         STX   COLM+1         DEX         STX   COLM         TAY         TAX         BEQ   CL2CL1      ASL   COLM+1                   shift to current color         ROL   COLM         DBNE  X,CL1CL2      LDA   COLM                     see if color is allowed         AND   SYSCOLM         BNE   CL3         LDA   COLM+1         AND   SYSCOLM+1         BEQ   RTSCL3      STY   SYSCOLOR                 yes -> set itRTS      RTSCOLM     DS    2                        color mask         END******************************************************************  SYSDBLK - Draw a Block**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSAX - width of block*        SYSAY - height of block*        SYSCBITS - number of bits per pixel*        $2A - address of the block**  NOTES:*        1)  SYSCOLOR, SYSX, and SYSY are undisturbed.******************************************************************SYSDBLK  STARTBLOCK    EQU   $2A                      address of blockMASK     EQU   $0                       current mask byteROW      EQU   $1                       row counterCOL      EQU   $3                       column counterBITS     EQU   $5                       bits remaining in maskX        EQU   $6                       temp SYSXY        EQU   $8                       temp SYSYCOLOR    EQU   $A                       temp SYSCOLORAX       EQU   $B                       temp SYSAXZPNUM    EQU   AX-MASK+2                number of zero page bytes used         MOVE  MASK,SAVE,#ZPNUM         save zero page work area         LM    COLOR,SYSCOLOR           COLOR = SYSCOLOR         MOVE  SYSX,X                   X = SYSX         MOVE  SYSY,Y                   Y = SYSY         LM    BITS,#8                  BITS = 8         LDY   #0                       MASK = (BLOCK)         LDA   (BLOCK),Y         STA   MASK                     FOR SYSAY = SYSAY DOWNTO 0 DODB1      MOVE  SYSAX,AX                   FOR AX = SYSAX DOWNTO 0 DODB2      LDA   #0                           COLOR = highest SYSCBITS of MASK         LDX   SYSCBITS                     BITS = BITS - SYSCBITSDB3      ASL   MASK         ROL   A         DEC   BITS         DBNE  X,DB3         LDX   SYSCBITS                     IF SYSCBITS = 1 AND COLOR = 1 THEN         DEX         BNE   DB3A         TAX         BEQ   DB3A         LDA   #$F                            COLOR = WHITEDB3A     JSR   SYSCOLR         LDY   BITS                         IF BITS = 0 THEN         BNE   DB4         LM    BITS,#8                        BITS = 8         INC2  BLOCK                          BLOCK = BLOCK+1         LDA   (BLOCK),Y         STA   MASK                           MASK = (BLOCK)DB4      ANOP                               ENDIF         JSR   SYSPLOT                      plot point         INC2  SYSX                         SYSX = SYSX+1         DEC2  AX                         NEXT AX         LDA   AX         ORA   AX+1         BNE   DB2         DEC2  SYSY                       SYSY = SYSY-1         MOVE  X,SYSX                     SYSX = X         LDA   BITS                       IF BITS <> 8 THEN         CMP   #8         BEQ   DB5         INC2  BLOCK                        BLOCK = BLOCK+1         LM    BITS,#8                      BITS = 8         LDY   #0                           MASK = (BLOCK)         LDA   (BLOCK),Y         STA   MASKDB5      ANOP                             ENDIF         DEC2  SYSAY                    NEXT AY         LDA   SYSAY         ORA   SYSAY+1         JNE   DB1         MOVE  Y,SYSY                   SYSY = Y         LM    SYSCOLOR,COLOR           SYSCOLOR = COLOR         MOVE  SAVE,MASK,#ZPNUM         restore zero page         RTSSAVE     DS    ZPNUM         END******************************************************************  SYSFILL - Fill Screen With Current Color**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSGL, SYSGR, SYSGT, SYSGB - screen limits******************************************************************SYSFILL  START         LDA   SYSX                     save X and Y         PHA         LDA   SYSX+1         PHA         LDA   SYSY         PHA         LDA   SYSY+1         PHA         MOVE  SYSGT,SYSY         MOVE  SYSGL,SYSX               FOR X = SYSGL TO SSSGR DOFL1      MOVE  SYSGB,SYSY                 FOR Y = SYSGT DOWNTO SYSGB DOFL2      JSR   SYSPLOT                      plot a point         INC2  SYSY                       NEXT Y         CMPW  SYSY,SYSGT         BLE   FL2         INC2  SYSX                     NEXT X         CMPW  SYSX,SYSGR         BLE   FL1         PLA                            restore X and Y         STA   SYSY+1         PLA         STA   SYSY         PLA         STA   SYSX+1         PLA         STA   SYSX         RTS         END******************************************************************  SYSGOUT - Graphics Text Output**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        A - character to write*        SYSX, SYSY - current cursor position*        SYSCHAR - 7x9 character table**  OUTPUTS:*        SYSX - SYSX+7******************************************************************SYSGOUT  STARTADDR     EQU   $0                       address of character codeMASK     EQU   $2                       current bit maskROW      EQU   $3                       row counterCOL      EQU   $4                       column counterTX       EQU   $5                       temp SYSXZPNUM    EQU   TX-ADDR+2                number of zero page bytes used         STA   TA                       save registers         SAVE         MOVE  ADDR,SAVE,#ZPNUM         save zero page         LDA   TA                       find the addr of the chars to write         AND   #$7F         STA   TA         LDX   #0         STX   ADDR+1         ASL   A         ASL   A         ROL   ADDR+1         ASL   A         ROL   ADDR+1         STA   ADDR         ADD2  ADDR,#SYSCHAR         LM    ROW,#8                   FOR ROW = 8 DOWNTO 0 DOGT2      LDY   #0                         save bit mask         LDA   (ADDR),Y         STA   MASK         MOVE  SYSX,TX                    save SYSX         LM    COL,#7                     FOR COL = 7 DOWNTO 0 DOGT3      ASL   MASK                         IF MASK THEN         BCC   GT4         JSR   SYSPLOT                        plot the pointGT4      ANOP                               ENDIF         INC2  SYSX                         INC X coordinate         DBNE  COL,GT3                    NEXT COL         MOVE  TX,SYSX                    reset X         DEC2  SYSY                       DEC Y coordinate         INC2  ADDR                       INC mask address         DBNE  ROW,GT2                  NEXT ROW         ADD2  SYSY,#8                  reset Y         ADD2  SYSX,#7                  set X         MOVE  SAVE,ADDR,#ZPNUM         restore zero page         RESTORE                        restore registers         RTSTA       DS    1SAVE     DS    ZPNUM         END         APPEND GR.1