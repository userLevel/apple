******************************************************************  SLUSE - Save Label Uses******************************************************************SLUSE    START         USING COMMON         LDA   CRSREF                   quit if list is off         BEQ   RTS         LM    CNT,#0                   scan for symbol definitionsDF1      LDY   CNT         LDA   (R4),Y         BEQ   RTS         CMP   #3         BNE   DF2         JSR   SGSYM                    get symbol name         JSR   SFSYM                    find symbol in table         BCC   RTS         ADD2  R0,#14                   define symbol pointer         JSR   SPINT         BCC   RTSDF2      INC   CNT                      next symbol         BNE   DF1RTS      RTS         END******************************************************************  SLXRF - List the Cross Reference**  Inputs:*        STABLE - address of symbol table*        STE - end of symbol table*        CRSREF - 1 for cross refence******************************************************************SLXRF    START         USING COMMON         LDA   CRSREF                   quit if CRSREF = false         BNE   LX1RTS      RTSLX1      JSR   SNPAG         PUTS  #'Cross Reference:',CR=T         JSR   SCESC         PUTCR         JSR   SCESC         MOVE  STABLE,R10               initializeLX2      CMPW  R10,STE                  quit if no more symbols         BGE   RTS         LDY   #15                      loop if not defined or used         LDA   (R10),Y         DEYLX3      ORA   (R10),Y         DEY         CPY   #11         BNE   LX3         CMP   #0         JEQ   LX11         LDY   #0                       write labelLX4      LDA   (R10),Y         JSR   SYSCOUT         INY         CPY   #10         BNE   LX4         PRBL  #3         LM    PCH,#13         LDY   #12                      open bracket if defined         LDA   (R10),Y         STA   R12         INY         ORA   (R10),Y         BEQ   LX7         LDA   (R10),Y         STA   R13         PUTC  #'['         INC   PCH         JSR   SFETC                    get first definition         JMP   LX5LX4A     JSR   SFETC                    get definition         BCC   LX6         PUTC  #','         INC   PCH         PUTC  #' '         INC   PCHLX5      JSR   SPRNM                    print number         JMP   LX4ALX6      PUTC  #']'                     close bracket         PUTC  #' '         INC   PCH         INC   PCHLX7      LDY   #14                      skip if no uses         LDA   (R10),Y         STA   R12         INY         ORA   (R10),Y         BEQ   LX10         LDA   (R10),Y         STA   R13         JSR   SFETC                    get first definition         JMP   LX9LX8      JSR   SFETC                    get definition         BCC   LX10         PUTC  #','         INC   PCH         PUTC  #' '         INC   PCHLX9      JSR   SPRNM                    print number         JMP   LX8LX10     PUTCR                          new line         JSR   SCESCLX11     ADD2  R10,#SYMLEN              next symbol         JMP   LX2         END******************************************************************  SNPAG - Get a Fresh Page******************************************************************SNPAG    START         USING COMMON         LDA   PRINT         BEQ   LB1         HOME         RTSLB1      PUTCR         PUTCR         PUTCR         RTS         END******************************************************************  SOMEM - Out of Memory******************************************************************SOMEM    START         USING COMMON         PUTS  #'Out of memory',CR=T         INC   ERR         RTS         END******************************************************************  SOPEN - Open the File**  Inputs:*        FNAME - name of the file to open*        C - set if the open was successful******************************************************************SOPEN    START         USING COMMON         JSR   SDVIC         LA    R0,FNAME         JSR   SVOLC         FINDBUFF OPEN_BUFF,#1024         BCC   ERR         OPEN  OPEN_DCB         BNE   ERR         LM    RD_REF,OPEN_REF         SEC         RTSERR      PUTS  #'File could not be opened.',CR=T         CLC         RTSOPEN_DCB DC    I1'3'         DC    A'FNAME'OPEN_BUFF DS   2OPEN_REF DS    1         END******************************************************************  SOVFL - Check for Overflow**  Inputs:*        STE - end of symbol table*        PTE - max allowed STE**  Outputs:*        C - clear if error*        ERR - 1 if error******************************************************************SOVFL    START         USING COMMON         CMPW  PTE,STE         BGE   RTS         LM    ERR,#1         PUTS  #'Symbol table overflow',CR=TRTS      RTS         END******************************************************************  SPINT - Create Pointer Entry**  Inputs:*        R0 - start of pointer list*        LNUM - current line number**  Outputs:*        C - clear for table overflow******************************************************************SPINT    START         USING COMMON         SUB2  PTE,#PTRLEN              create pointer entry         JSR   SOVFL         BCS   PT0         RTSPT0      LDY   #0         TYA         STA   (PTE),Y         INY         STA   (PTE),Y         TAXPT0A     INY         LDA   LNUM,X         STA   (PTE),Y         INX         CPX   #4         BLT   PT0APT1      LDY   #0                       chain to old list         LDA   (R0),Y         TAX         INY         ORA   (R0),Y         BEQ   PT2         LDA   (R0),Y         STA   R1         STX   R0         JMP   PT1PT2      MOVE  PTE,{R0}         SECRTS      RTS         END******************************************************************  SPRNM - Print Number**  Inputs:*        R6 - number to print*        PCH - horizontal position******************************************************************SPRNM    START         USING COMMONSPACE    EQU   8                        space to leave at end         LDA   #80                      compute number of spaces left in line         SEC         SBC   PCH         CMP   #SPACE                   see if there's enough space for another         BGE   PN1                       number         PUTCR                          no - start a new line         JSR   SCESC         PRBL  #13         LM    PCH,#13PN1      PUT4  R6                       print the numberPN2      INC   PCH                      inc the cursor counter         DIV4  R6,#10         LDA   R6         ORA   R7         ORA   R8         ORA   R9         BNE   PN2         RTS         END******************************************************************  SVOLC - Get Proper Volume**  Inputs:*        R0 - address of file name*        MAC_REF - macro file ref num*        SRC_REF - source file ref num*        KOUT_REF - keep file ref num******************************************************************SVOLC    START         USING COMMONSTROBE   EQU   $C010;;  Get the volume name.;         LDY   #0                       skip if no input Wame         LDA   (R0),Y         BEQ   LB3         INY                            skip if not a full path name         LDA   (R0),Y         CMP   #'/'         BNE   LB3LB1      STA   WORK,Y                   recover volume name         CPY   #16         BGE   LB2         INY         LDA   (R0),Y         CMP   #'/'         BNE   LB1LB2      DEY         STY   WORK         JMP   LB6LB3      RELEASE #WORK,#128             get prefix volume         GET_PREFIX PREFIX_DCB         RESERVE #WORK,#128         LDA   WORK         BEQ   ERR         LDY   #2         LDA   #'/'LB4      CMP   WORK,Y         BEQ   LB5         INY         CPY   WORK         BLT   LB4LB5      DEY         STY   WORK;;  Check to see if the volume is available.;LB6      GET_INFO INFO_DCB         BNE   LB8         RTSERR      LDY   #1                       write error messageLB7      LDA   WORK,Y         JSR   SYSCOUT         INY         CPY   WORK         BLT   LB7         PUTS  #' not available',CR=TLB7A     LDX   S         TXS         JMP   SFINI;;  Ask for the volume.;LB8      PUTS  #'Place '                ask for the volume         LDY   #0LB12     LDA   WORK+1,Y         JSR   SYSCOUT         INY         CPY   WORK         BLT   LB12         PUTS #' on line.  Hit ESC to abort, or '         PUTS #'any other key to continue.',CR=T         STA   STROBELB13     LDA   KEYBOARD         BPL   LB13         STA   STROBE         CMP   #$9B         JEQ   LB7A         JMP   LB6;;  Local data areas.;INFO_DCB DC    I1'10'                   get info DCBINFO_NAME DC   A'WORK'         DS    1         DS    1         DS    2         DS    1         DS    2         DS    4         DS    4PREFIX_DCB DC  I1'1'         DC    A'WORK'WORK     DS    128         END******************************************************************  SXREF - Perform the Cross Reference**  Inputs:*        LIST - list output flag*        FREQ - do frequency count flag*        CRSREF - do cross refence flag*        RANGE - ranges of symbols to use*        FNAME - first file name to use******************************************************************SXREF    START         USING COMMON;;  Scan the file.;         JSR   SOPEN                    open the file         BCC   XR4         PUTS  #'XREF V4.1 D1',CR=T     write out the header         PUTCRXR1      ADD4  LNUM,#1                  inc the line number         JSR   SFRML                    form the line         BCC   XR2         LA    R0,LINE                  evaluate the line         JSR   SUSER         JSR   SLIST                    list the line         JSR   SFREQ                    frequency count         LDA   ERR         BNE   XR2         JSR   SDEFN                    label definition         LDA   ERR         BNE   XR2         JSR   SLUSE                    label use         LDA   ERR         BNE   XR2         JSR   SFILE                    do COPY and APPEND         BCS   XR1;;  List the results.;XR2      JSR   SLFRQ                    list frequency counts         JSR   SLXRF                    list cross referenceXR4      RTS         END