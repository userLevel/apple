******************************************************************  SGSUB - Get USER Subroutine**  Inputs:*        FNAME - file name to check**  Outputs:*        C - set if load was successful******************************************************************SGSUB    START         USING COMMONPREFIX   EQU   $80E                     address of prefix table         JSR   SDVIC         LA    R0,FNAME         JSR   SVOLC         RELEASE #$2000,#$1000          release the user buffer area         GET_INFO INFO_DCB              get the language number         BEQ   GS0         PUTS  #'Input file not found',CR=T         CLC         RTSGS0      LDA   FILE_TYPE         CMP   #$04         BNE   GS1         LDA   #1         BNE   GS3GS1      CMP   #$B0         BEQ   GS2         PUTS  #'File must be TXT or SRC',CR=T         CLCRTS      RTSGS2      LDA   AUX_TYPEGS3      ORA   #$80                     save the language number         STA   R0         CMP   LTYPE                    quit if the language header is in memory         BEQ   RTS         STA   LTYPE         LA    R2,PREFIX                get the UTILITY prefix         MOVE  {R2},R4         MOVE  {R4},NAME,#65         NAMEADR R10                    find the file nameGS4      LDY   #0         LDA   (R10),Y         INY         ORA   (R10),Y         BNE   GS5         PUTS  #'Language not available',CR=T         CLC         RTSGS5      DEY         LDA   (R10),Y         CMP   R0         BEQ   GS6         INY         SEC         LDA   (R10),Y         ADC   #1         ADC   R10         STA   R10         BCC   GS4         INC   R11         JMP   GS4GS6      MOVE  {R10},LANG,#17           append the language name to the         LDY   NAME                      file name         LDA   NAME,Y         CMP   #'/'         BEQ   GS7         INY         LDA   #'/'         STA   NAME,YGS7      LDX   #0GS8      LDA   XREF,X         INY         STA   NAME,Y         INX         CPX   #L:XREF         BLT   GS8         LDX   #0GS9      LDA   LANG_CHR,X         INY         STA   NAME,Y         INX         CPX   LANG_LEN         BLT   GS9         STY   NAME         LA    R0,NAME         JSR   SVOLC         FINDBUFF OPEN_BUFF,#1024       open the user file         BCS   GS9A         JSR   SOMEM         CLC         RTSGS9A     OPEN  OPEN_DCB         BEQ   GS10         PUTS  #'File not found: '         PUTS  NAME-1,CR=T         CLC         RTSGS10     LM    READ_REF,OPEN_REF        read the user file         READ  READ_DCB         RESERVE #$2000,#$1000         LM    CLOSE_REF,OPEN_REF         CLOSE CLOSE_DCB         SEC         RTSNAME     DS    65                       file nameXREF     DC    C'XREF.'INFO_DCB DC    I1'10'         DC    A'FNAME'         DS    1FILE_TYPE DS   1AUX_TYPE DS    2         DS    1         DS    2         DS    4         DS    4OPEN_DCB DC    I1'3'                    DCB to open the user file         DC    A'NAME'OPEN_BUFF DS   2OPEN_REF DS    1CLOSE_DCB DC   I1'1'CLOSE_REF DS   1READ_DCB DC    I1'4'                    DCB to read the user fileREAD_REF DS    1         DC    A'$2000'         DC    I'$1000'         DS    2LANG     DS    1                        language numberLANG_LEN DS    1                        length of language nameLANG_CHR DS    15                       langauge name         END******************************************************************  SGSYM - Get Symbol Name**  Inputs:*        CNT - index into symbol array**  Outputs:*        SNAME - symbol name******************************************************************SGSYM    START         USING COMMON         LM    R0,CNT                   get addr of symbol         LM    R1,#0         MUL2  R0,#10         ADD2  R0,R2         MOVE  {R0},SNAME,#10         RTS         END******************************************************************  SHIFT - convert to upper-case**  Inputs:*        A - character to convert**  Outputs:*        A - upper-case character******************************************************************SHIFT    START         CMP   #'a'         BLT   RTS         CMP   #'z'+1         BGE   RTS         AND   #%01011111RTS      RTS         END******************************************************************  SHNUM - Get High Number**  R12 is loaded with the highest frequency count lower than R12.**  Inputs:*        R12 - highest number to ignore**  Outputs:*        R12 - highest number lower than R12******************************************************************SHNUM    START         USING COMMON         MOVE  STABLE,R0         LA    R2,0HN1      CMPW  R0,STE         BGE   HN3         LDY   #10         LDA   (R0),Y         STA   R4         INY         LDA   (R0),Y         STA   R5         CMPW  R4,R12         BGE   HN2         CMPW  R4,R2         BLT   HN2         MOVE  R4,R2HN2      ADD2  R0,#SYMLEN         JMP   HN1HN3      MOVE  R2,R12         RTS         END******************************************************************  SINIT - Program Initialization****X*************************************************************SINIT    START         USING COMMON;;  See if the printer is on.;         PUTS  #'XREF V4.1',CR=T         PUTCR         DIRECTION DIR_DCB         LDA   DIR         CMP   #2         BNE   LB1         INC   PRINT;;  Read and parse the command line.;LB1      JSR   SGETC                    get a command line character         TAX         JEQ   FL1LB1A     CMP   #'+'         BEQ   LB4         CMP   #'-'         BEQ   LB4         CMP   #'('         JNE   FL2LB2      MOVE  #0,RANGE,#MAXRANGE*2     read the ranges         LDX   #0LB3      CPX   #MAXRANGE*2         BGE   ERR1         JSR   SGETC         JSR   SHIFT         JSR   SALID         BCC   ERR1         STA   RANGE,X         INX         JSR   SGETC         JSR   SHIFT         JSR   SALID         BCC   ERR1         CMP   #'_'         BEQ   ERR1         CMP   #'~'         BEQ   ERR1         STA   RANGE,X         INX         LDY   #0         LDA   (R0),Y         CMP   #' '         BEQ   LB3         JSR   SGETC         CMP   #','         BEQ   LB3         CMP   #')'         BEQ   LB1ERR1     PUTS  #'Range specification error',CR=T         PLA         PLA         RTSLB4      LDX   #0                       set or clear a flag         CMP   #'+'         BNE   LB5         INXLB5      JSR   SGETC         JSR   SHIFT         CMP   #'L'         BNE   LB6         STX   LIST         JMP   LB1LB6      CMP   #'F'         BNE   LB7         STX   FREQ         JMP   LB1LB7      CMP   #'X'         BNE   LB8         STX   CRSREF         JMP   LB1LB8      PUTS  #'Undefined parameter',CR=T         PLA         PLA         RTS;;  Get the file name.;FL1      PUTS  #'File name: '           get a prompted file name         GETS  FNAME-1         JMP   FL4BFL2      LDX   #0                       get file name from the command line         JMP   FL3AFL3      JSR   SGETC         TAY         BEQ   FL4FL3A     STA   FNAME+1,X         INX         CPX   FNAME-1         BLT   FL3FL4      STX   FNAME;;  Reserve a symbol table buffer.;FL4B     LA    R0,0FL4A     INC   R1         FINDBUFF STABLE,R0         BCS   FL4A         SUB2  R0,#$3*1024         BCC   FL5A         RESERVE STABLE,R0         ADD2  STABLE,R0,PTE         MOVE  STABLE,STE;;  Load the first user file.;         JSR   SGSUB         BCS   FL6FL5A     PLA         PLAFL6      RTS;;  Local data area.;DIR_DCB  DC    I1'2'                    sense output direction DCB         DC    I1'0'DIR      DS    1         END******************************************************************  SINST - Move Memory from End**  Inputs:*        R10 - to address*        R12 - from address*        R14 - move length******************************************************************SINST    START         LDA   R15         BEQ   IN2         LDY   #0IN0      LDA   (R12),Y         STA   (R10),Y         DEC   R13         DEC   R11         DEYIN1      LDA   (R12),Y         STA   (R10),Y         DBNE  Y,IN1         DBNE  R15,IN0IN2      LDY   R14         BEQ   RTS         SUB2  R10,R14         INC2  R10         SUB2  R12,R14         INC2  R12         DEY         BEQ   IN4IN3      LDA   (R12),Y         STA   (R10),Y         DBNE  Y,IN3IN4      LDA   (R12),Y         STA   (R10),YRTS      RTS         END******************************************************************  SLIST - List the Line**  Inputs:*        LNUM - line number*        LINE - line to list******************************************************************SLIST    START         USING COMMON         LDA   LIST                     quit if list off         BEQ   RTS         PUT4  LNUM,#4                  write line number         LDA   #' '                     skip a space         JSR   SYSCOUT         LDY   #79                      find the end of the line         LDA   #' 'LB1      CMP   LINE,Y         BNE   LB2         DEY         BPL   LB1LB2      INY         BEQ   LB4                      quit if the line is blank         LDX   #0                       write the lineLB3      LDA   LINE,X         JSR   SYSCOUT         INX         DEY         BNE   LB3LB4      PUTCR         JSR   SCESCRTS      RTS         END******************************************************************  SLFRQ - List the Frequency Count******************************************************************SLFRQ    START         USING COMMON         LDA   FREQ                     quit if FREQ = false         BNE   LF1RTS      RTSLF1      JSR   SNPAG         PUTS  #'Frequency Count:',CR=T         JSR   SCESC         PUTCR         JSR   SCESC         PUTS  #'Alphabetic          Numeric',CR=T         JSR   SCESC         PUTCR         JSR   SCESC         MOVE  STABLE,R10               initialize         LA    R12,$FFFF         JSR   SHNUM         CMPW  R12,#0         BEQ   RTS         MOVE  STABLE,R14LF2      LDY   #10                      print the next symbol in alphabetic         LDA   (R10),Y                   order         STA   R0         INY         ORA   (R10),Y         BEQ   LF4         LDA   (R10),Y         STA   R1         LDY   #0LF3      LDA   (R10),Y         JSR   SYSCOUT         INY         CPY   #10         BNE   LF3         PUTC  #' '         PUT2  R0,#5         PRBL  #4         JMP   LF5LF4      ADD2  R10,#SYMLEN         CMPW  R10,STE         BLT   LF2         JMP   LF9LF5      ADD2  R10,#SYMLENLF6      LDY   #10                      print the next symbol in numeric         LDA   (R14),Y                   order         STA   R0         INY         LDA   (R14),Y         STA   R1         CMPW  R0,R12         BEQ   LF7         CMPW  R12,#0         BEQ   LF9         ADD2  R14,#SYMLEN         CMPW  R14,STE         BLT   LF6         JSR   SHNUM         MOVE  STABLE,R14         JMP   LF6LF7      LDY   #0LF8      LDA   (R14),Y         JSR   SYSCOUT         INY         CPY   #10         BNE   LF8         PUTC  #' '         PUT2  R0,#5         PUTCR         JSR   SCESC         ADD2  R14,#SYMLENLF9      CMPW  R10,STE         BGE   RTS2         JMP   LF2RTS2     RTS         RTS         END         APPEND XR.SLUSE