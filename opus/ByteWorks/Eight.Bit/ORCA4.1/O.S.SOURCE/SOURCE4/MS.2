******************************************************************  SYSCTST - Convert to String**  Convert a number to its equivalent string.**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        * - address of the format routine*        *+2 - control bytes*              15-13 - type of input*              12-10 - addressing mode for input*              9-7 - unused*              6-4 - addressing mode for output*        *+4 - operande needed******************************************************************SYSCTST  STARTSYSOUT   EQU   $36                      output hook         PLA                            recover operand address         STA   STR         PLA         STA   STR+1         INC2  STR         MOVE  {STR},JAD,#4             load operands         ADD2  STR,#4         LA    WR2,SYSS1                load the argument         JSR   ROLL         TAX         JSR   ROLL         JSR   SYSLDOP         LM    (SYSS2,SYSLINE),#0       init string length and format byte         LDA   SYSOUT                   save the old output hook         PHA         LDA   SYSOUT+1         PHA         LA    SYSOUT,OUT               set the output hook to the local routine         JSR   OPR         PLA                            reset the output hook         STA   SYSOUT+1         PLA         STA   SYSOUT         JSR   ROLL                     get the addr mode for the result         JSR   ROLL         CMP   #2         BLE   CT2         LDA   SYSLINE                  do a stack save         SOFTCALL SYSISTK         LDY   SYSLINECT1      LDA   SYSLINE,Y         STA   (SYSESTE),Y         DBPL  Y,CT1         JMP   CT6CT2      PHP                            do common initialization for absolut and         MOVE  {STR},WR0                 indirect saves         ADD2  STR,#2         PLP         BNE   CT3         LDY   #0                       indirection for indirect saves         LDA   (WR0),Y         TAX         INY         LDA   (WR0),Y         STA   WR1         STX   WR0CT3      LDY   #0                       make sure we don't exceed the length         LDA   (WR0),Y                   of the string         CMP   SYSLINE         BGE   CT4         STA   SYSLINECT4      INC2  WR0                      save the string         LDY   SYSLINECT5      LDA   SYSLINE,Y         STA   (WR0),Y         DBPL  Y,CT5CT6      DEC2  STR                      return to the caller         LDA   STR+1         PHA         LDA   STR         PHA         RTS;;  OUT: Fake character output routine.;OUT      STX   LX         INC   SYSLINE         LDX   SYSLINE         STA   SYSLINE,X         LDX   LX         RTS;;  ROLL: Roll 3 bits from the control bytes into A.;ROLL     LDA   #0         ASL   CBYTE+1         ROL   CBYTE         ROL   A         ASL   CBYTE+1         ROL   CBYTE         ROL   A         ASL   CBYTE+1         ROL   CBYTE         ROL   A         RTS;;  OPR: Indirect subroutine call.;OPR      JMP   (JAD);;  Local data areas.;LX       DS    1JAD      DS    2CBYTE    DS    2         END******************************************************************  SYSDSTK - Decriment the Stack Pointer**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        A - amount to decriment*        SYSESTE - stack pointer**  OUTPUTS:*        SYSESTE - updated******************************************************************SYSDSTK  START         CLC         ADC   SYSESTE         STA   SYSESTE         BCC   LB1         INC   SYSESTE+1LB1      RTS         END******************************************************************  SYSISTK - Increment the Stack Pointer**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        A - amount to increment*        SYSESTE - stack pointer**  OUTPUTS:*        SYSESTE - updated******************************************************************SYSISTK  START         STA   LA         SEC         LDA   SYSESTE         SBC   LA         STA   SYSESTE         BCS   LB1         DEC   SYSESTE+1LB1      CMPW  SYSESTE,SYSESTMAX         BGE   LB2         ERROR #1LB2      RTSLA       DS    1         END******************************************************************  SYSLDOP - Load an Operand**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        WR2 - address to load to*        A - addressing mode*        X - load type******************************************************************SYSLDOP  START         STX   TYPE                     save inputs         JSR   SYSLDAD                  compute the effective address         LDA   TYPE                     move the value into the work space         CMP   #4         BNE   LD1         MOVE  WR0,MR0,#4         SOFTCALL SYSUNPF         RTSLD1      CMP   #5         BNE   LD2         MOVE  WR0,MR0,#4         SOFTCALL SYSUNPD         RTSLD2      CMP   #10         BNE   LD4         MOVE  WR0,{WR2}         RTSLD3      LDA   (WR0),Y         STA   (WR2),YLD4      DBPL  Y,LD3         RTSTYPE     DS    1         END******************************************************************  SYSLDAD - Load Effective Address**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        A - addressing mode*        X - load type**  OUTPUTS:*        WR0 - effective address*        Y - size of operand******************************************************************SYSLDAD  START         STX   TYPE                     save the type         TAY                            get the size of the entry         LDA   SIZES,X         STA   SIZE         CPY   #1                       split on operand type         BLT   LD2         BEQ   LD5         CPY   #3         BLT   LD5         MOVE  SYSESTE,WR0              stack operand         LDA   TYPE         CMP   #10         BNE   LD1         LDY   #0         LDA   (SYSESTE),Y         CLC         ADC   #1         SOFTCALL SYSDSTK         LDY   #2         RTSLD1      LDA   SIZE         SOFTCALL SYSDSTK         LDY   SIZE         RTSLD2      MOVE  STR,WR0                  immediate         LDY   SIZE         TYA         LDX   TYPE         CPX   #10         BNE   LD3         LDY   #0         LDA   (STR),Y         ADC   #1         LDY   #2LD3      CLC         ADC   STR         STA   STR         BCC   LD4         INC   STR+1LD4      RTSLD5      PHP                            absolute and indirect         MOVE  {STR},WR0         PLP         BEQ   LD6         LDY   #0         LDA   (WR0),Y         TAX         INY         LDA   (WR0),Y         STA   WR1         STX   WR0LD6      ADD2  STR,#2         LDY   SIZE         RTSSIZE     DS    1                        operand sizeTYPE     DS    1                        type inputSIZES    DC    I1'2,4,8,0,4,8,0,0,1,1,2'         END******************************************************************  SYSLINE - Input Line Buffer Area**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.******************************************************************SYSLINE  START         DS    256         END******************************************************************  SYSNMID - Number Identification**  Checks to see if a character is in '0'..'9'.**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        A - character to check**  OUTPUTS:*        C - set if A is in '0'..'9'.******************************************************************SYSNMID  START         CMP   #'0'         BLT   RTS         CMP   #'9'+1         BGE   NOT         SEC         RTSNOT      CLCRTS      RTS         END         APPEND MS.3