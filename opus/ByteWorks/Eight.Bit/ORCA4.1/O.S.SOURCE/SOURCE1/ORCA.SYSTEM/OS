         LIST  OFF         SYMBOL OFF         KEEP  ORCA         MCOPY /RAM/OS.MACROS         TITLE 'ORCA.SYSTEM V4.1 Source ** CONFIDENTIAL **'******************************************************************  ORCA.SYSTEM V4.1**  Loads and initializes the ORCA HOST operating system*  overlay.**  By Mike Westerfield & Phil Montoya**  This source code is a trade secret of The Byte Works, Inc.,*  and cannot be copied or used in any way without the written*  permission of that company.**  Object Module Copyright 1985,1986*  By the Byte Works, Inc.*  All rights reserved******************************************************************BOOT     START;;  Zero page equates;WR0      GEQU  $C0                      system work registersWR1      GEQU  $C1WR2      GEQU  $C2WR3      GEQU  $C3WR4      GEQU  $C4M1L      GEQU  $C5M1H      GEQU  $C6M2L      GEQU  $C7M2H      GEQU  $C8LINE     GEQU  $80RESET    EQU   $3F2                     reset vectorCTRLY    EQU   $3F9                     CTRL Y vectorVECT     EQU   $800                     RESET handler addressBITMAP   GEQU  $BF58                    ProDOS memory bit mapPROTIME  GEQU  $BF90                    ProDOS date field;;  Load ORCA HOST.;         JSR   SEPFX                    set the default prefix         MOVE  #0,BITMAP+1,#23          clear the bit map         LM    BITMAP,#$FF              set the first few pages         FINDBUFF OPENORCA+3,#1024      find an open file buffer         OPEN  OPENORCA                 open the file         LM    (ORCAHOST+1,CLOSEORCA+1),OPENORCA+5         READ  ORCAHOST                 read in the file         RESERVE #$800,ORCAHOST+6         CLOSE CLOSEORCA                close the file         JSR   SPRFX                    set up the prefix table;;  Initialize the ORCA hooks.;         LDA   VECT+1                   set up RESET, BRK and CTRL Y vectors         STA   RESET+1         STA   CTRLY+1         EOR   #$A5         STA   RESET+2         LDA   VECT         STA   RESET         STA   CTRLY         JSR   SAINIT                   call ORCA HOST initialization routine;;  Write the logo.;         HOME         LDX   #33         JSR   SYSPRBL         PUTS  #'ORCA/HOST V4.1',CR=T         LDX   #28         JSR   SYSPRBL         PUTS  #'Copyright January 1987',CR=T         LDX   #28         JSR   SYSPRBL         PUTS  #'By The Byte Works, Inc.',CR=T         PUTCR;;  Initialize and set up date;         GET_TIME         LDA   PROTIME         ORA   PROTIME+1         BNE   TCOH         JSR   SDATE;;  Transfer control to ORCA HOST.;TCOH     JMP   ($804);;  Initialization Address;SAINIT   JMP   ($802)OPENORCA OPEN_DCB ORCANAMEORCAHOST READ_DCB $800,$1800CLOSEORCA CLOSE_DCBORCANAME DW    'ORCA.HOST'         END******************************************************************  SALID - Alpha identification routine**  INPUTS:*        A - Character to be checked**  OUTPUTS:*        C - Set if alpha ('A'-'Z'), else clear******************************************************************SALID    START         JSR   SHIFT         CMP   #'A'                     check character         BLT   NOT         CMP   #'Z'+1         BLT   ALPHA         CLC                            not alphaNOT      RTSALPHA    SEC                            alpha         RTS         END******************************************************************  SDATE - Prompts for the date**  OUTPUTS:*        PROTIME - set to current date******************************************************************SDATE    STARTRARROW   EQU   $15LARROW   EQU   $08RETURN   EQU   $0DSD0      MOVE  #$20,LINE,#10         LM    CPOS,#0         GOTOXY #0,#6         PUTS  STRINGSD1      LDX   CPOS         LDA   HCURS,X         STA   CH         GOTOXY CH,#6         RDKEY         STA   CHAR         LDA   CPOS         BNE   SD1A         GOTOXY #22,#6         CLEOS         GOTOXY CH,#6SD1A     LDA   CHAR         CMP   #LARROW                  left arrow         BNE   SD2         DEC   CPOS         BPL   SD3A         INC   CPOS         JMP   SD1SD2      CMP   #RARROW                  right arrow         BNE   SD4         LDA   CPOS         CMP   #7         BEQ   SD3A         INC   CPOSSD3A     JMP   SD1SD4      CMP   #RETURN                  return         BNE   SD5         LDX   #10         STA   LINE+10         JSR   SEVDT         JCC   SD1         GOTOXY #0,#5         CLEOS         RTSSD5      LDX   CPOS                     other         LDA   TYPE,X         BEQ   SD6         LDA   CHAR         JSR   SNMID         BCS   SD7         BELL         JMP   SD1SD6      LDA   CHAR         JSR   SALID         BCS   SD7SD6A     BELL         JMP   SD1SD7      LDX   CPOS         PHA         LDA   HPOS,X         TAX         PLA         STA   LINE,X         STA   DATE,X         LDA   CPOS         CMP   #7         BEQ   SD6A         PUTC  CHAR         INC   CPOS         JMP   SD1CH       DS    1CPOS     DS    1CHAR     DS    1TYPE     DC    I1'1,1,0,0,0,1,1'HPOS     DC    I1'0,1,3,4,5,7,8'HCURS    DC    I1'13,14,16,17,18,20,21,22'STRING   DC    I1'END-PROMPT'         DC    I1'END-PROMPT'PROMPT   DC    C'Enter Date : 'DATE     DC    C'DD-MMM-YY'END      ANOP         END******************************************************************  SDCEV - Evaluate decimal number**  INPUTS:*        Y - position of number in LINE*        LINE - line containing number**  OUTPUTS:*        Y - next character in LINE*        M1 - value of number*        V - set if overflow******************************************************************SDCEV    START         LA    M1L,0                    init valueDC1      LDA   LINE,Y                   get and check digit         STY   WR4         JSR   SNMID         BCC   RTS                      branch if not         JSR   SML10                    M1=M1*10+digit         BCS   OVFL         LDY   WR4                      get char         LDA   LINE,Y         INY         AND   #$F         CLC         ADC   M1L         STA   M1L         BCC   DC1         INC   M1H         BNE   DC1         BEQ   OVFLRTS      CLV         RTSSEV      ENTRYOVFL     LDA   #$7F                     overflow         ADC   #$08         RTS         END******************************************************************  SEPFX - Get The Default Prefix**  Note: It is possible to execute ORCA.SYSTEM from BASIC.SYSTEM*        using a command like -/ORCA/ORCA.SYSTEM; therefore it*        is necessary we detect this in order to set the prefix*        to /ORCA so ORCA.SYSTEM can find ORCA.HOST.  Therefore*        this routine will set the prefix to the same prefix that*        ORCA.SYSTEM resides so the only requirement is that*        ORCA.HOST be in the same prefix as ORCA.SYSTEM.******************************************************************SEPFX    STARTBUFF     EQU   $280                     input buffer         LDY   PATHPF1      LDA   BUFF,Y                   check to see if path is just ORCA.SYSTEM         AND   #$7F         CMP   PATH,Y                   if so then we know we dont have to set         BNE   PF2                       a prefix         DBPL  Y,PF1         RTSPF2      LDX   BUFF                     get the path name         STX   NAMEPF2A     LDA   BUFF,X         AND   #$7F         STA   NAME,X         DBNE  X,PF2A         LDX   NAME                     get the path lengthPF3      LDA   NAME,X                   remove the last name 'ORCA.SYSTEM'         CMP   #'/'         BEQ   PF4         DBNE  X,PF3PF4      DEX         STX   NAME         SET_PREFIX PFDCB               set the prefix to the path         RTSPFDCB    DC    I1'1'                    prefix DCB         DC    A'NAME'PATH     DC    H'0B'                    path default         DC    C'ORCA.SYSTEM'NAME     DS    65                       name buffer         END******************************************************************  SEVDT - Evaluate and set the date**  INPUTS:*        LINE - input string with date**  OUTPUTS:*        PROTIME - ProDOS date field*        C - set if successful******************************************************************SEVDT    START;;  Evaluate day;         LDY   #0                       convert to date         JSR   SDCEV         LDA   M1H                      check range         JNE   DERR         LDA   M1L         JEQ   DERR         AND   #$1F         CMP   M1L         JNE   DERR         STA   DAY                      save date         STA   PROTIME;;  Evaluate month;         LM    WR1,#3                   set month #         LM    WR0,#1         LA    WR2,MONTHDT3      LDY   #0                       check this month         LDX   WR1DT4      LDA   LINE,X         AND   #$DF         CMP   (WR2),Y         BNE   DT5         INY         INX         CPY   #3         BNE   DT4         BEQ   DT6DT5      INC   WR0                      loop on month         LDX   WR0         CPX   #13         BEQ   DERR         ADD2  WR2,#3         JMP   DT3DT6      LDA   WR0                      save month         STA   MON         MASL  A,5         ROL   PROTIME+1         ORA   PROTIME         STA   PROTIME;;  Evaluate year;         LDY   #7DT10     JSR   SDCEV                    convert to hex         LDA   M1L         ROR   PROTIME+1         ROL   A         STA   PROTIME+1         LDY   #28         LDA   M1L         AND   #3         BNE   DT11         INYDT11     STY   MONTHLN+1         LDY   MON         LDA   MONTHLN-1,Y         CMP   DAY         BCC   DERR         RTS;;  Date input error;DERR     GOTOXY #0,#8         BELL         PUTS   #'Invalid date'         CLC         RTS;;  Data;MON      DS    1DAY      DS    1MONTHLN  DC    I1'31,28,31,30,31,30'         DC    I1'31,31,30,31,30,31'MONTH    DC    C'JAN'         DC    C'FEB'         DC    C'MAR'         DC    C'APR'         DC    C'MAY'         DC    C'JUN'         DC    C'JUL'         DC    C'AUG'         DC    C'SEP'         DC    C'OCT'         DC    C'NOV'         DC    C'DEC'         END******************************************************************  SHIFT - Convert to Upper-case**  INPUTS:*        A - character to shift**  OUTPUTS:*        A - upper-case character******************************************************************SHIFT    START         CMP   #'a'         BLT   RTS         CMP   #'z'+1         BGE   RTS         ADC   #'A'-'a'RTS      RTS         END******************************************************************  SML10 - Multiply M1 by 10**  INPUTS:*        M1 - Number to multiply**  OUTPUTS:*        M1 - Result******************************************************************SML10    START         LDA   M1L         ASL   A         STA   M1L         STA   M2L         LDA   M1H         ROL   A         BCS   ERTS         STA   M2H         ASL   M1L         ROL   A         BCS   ERTS         ASL   M1L         ROL   A         BCS   ERTS         TAX         LDA   M1L         ADC   M2L         STA   M1L         TXA         ADC   M2H         STA   M1H         RTSERTS     JMP   SEV         END******************************************************************  SNMID - Numeric identification routine**  INPUTS:*        A - Character to be checked**  OUTPUTS:*        C - Set  if numeric, else clear******************************************************************SNMID    START         CMP   #'0'                     check character         BCC   NOT         CMP   #':'         BCC   NUM         CLC                            not numericNOT      RTSNUM      SEC                            numeric         RTS         END******************************************************************  SPRFX - Set Up the Prefix Table******************************************************************SPRFX    STARTPADR     EQU   $80E                     address of pointer to prefix tableADDR     EQU   2                        address of next prefix to setDIR      EQU   4                        address of directory to appendR1       EQU   6R2       EQU   7         RELEASE #PREFIX,#65            get current prefix         GET_PREFIX GP_DCB         RESERVE #PREFIX,#65         LDX   PREFIX         LDA   #'/'         CMP   PREFIX,X         BEQ   LB1         INX         STA   PREFIX,X         STX   PREFIXLB1      MOVE  PADR,ADDR                set initial save address         LA    DIR,UTILITIES         JSR   SET         ADD2  ADDR,#65         LA    DIR,LANGUAGES         JSR   SET         ADD2  ADDR,#65         LA    DIR,SYSTEM         JSR   SET         ADD2  ADDR,#65         LA    DIR,LIBRARIES         JSR   SET         ADD2  ADDR,#65         DEC   PREFIX         MOVE  PREFIX,{ADDR},#65         RTS;;  SET - set a prefix by appending (DIR) to PREFIX;SET      MOVE  PREFIX,{ADDR},#65         CLC         LDA   PREFIX         LDY   #0         ADC   (DIR),Y         STA   (ADDR),Y         LDA   (DIR),Y         TAX         LDY   PREFIX         INY         STY   R1         LM    R2,#1ST1      LDY   R2         LDA   (DIR),Y         LDY   R1         STA   (ADDR),Y         INC   R1         INC   R2         DBNE  X,ST1         RTS;;  Local data;UTILITIES DW   UTILITIESLANGUAGES DW   LANGUAGESSYSTEM   DW    SYSTEMLIBRARIES DW   LIBRARIESPREFIX   DS    65GP_DCB   DC    I1'1'         DC    A'PREFIX'         END