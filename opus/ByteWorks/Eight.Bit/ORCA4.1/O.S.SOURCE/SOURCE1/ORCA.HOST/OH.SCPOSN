******************************************************************  SCPOSN - Return Position of Cursor**  INPUTS:*        CV - vertical position*        CH - horizontal position**  OUTPUTS:*        X - horizontal position*        Y - vertical position**  NOTES:*        1)  The accumulator remains unchanged.*        2)  Positions are numbered from 0.******************************************************************SCPOSN   START         LDX   CH         LDY   CV         LDA   #0         RTS         END******************************************************************  SCPRHV - Put a Character**  Places a character on the screen without interpreting*  control codes.**  INPUTS:*        CV - vertical position*        CH - horizontal position*        A - character to write******************************************************************SCPRHV   START         USING SCCOMM         AIF   TYPE80=0,.APPLE         AIF   TYPE80=3,.AP40AADDR     EQU   $8A                      80 col base addressLINE1    EQU   $6FB                     screen start dispLINE2    EQU   $C0B0                    page toggleSCREEN   EQU   $CC00                    start of screen         PHA                            Videx portion         STY   TY                       save X and Y         STX   TX         CLC                            compute position of character         LDA   CV         ADC   CV         ASL   A         ADC   CV         ADC   LINE1         TAX         MLSR  A,4         TAY         TXA         MASL  A,4         CLC         ADC   CH         STA   ADDR         BCC   PR1         INYPR1      TYA         AND   #6         ASL   A         TAX         LDA   LINE2,X         LDX   ADDR         TYA         AND   #1                       check page         BNE   PR2         PLA                            ADDR = CV * 80 + LINE1 * 16         STA   SCREEN,X                 write the character to the screen         JMP   RT1PR2      PLA         STA   SCREEN+$100,XRT1      LDY   TY                       restore X and Y         LDX   TX         RTS         AGO   .DONE.APPLE         STA   COL80                    enable 80 column page selection         CMP   #$5F                     map $40-$5F -> $00-$1F         BGT   PR1         CMP   #$40         BLT   PR1         AND   #$3FPR1      STA   CHAR                     save the character         SAVE                           save the registers         LDA   CH                       write the character         LSR   A         BCS   PR2         STA   PAGE2PR2      TAY         LDA   CHAR         STA   (BASL),Y         STA   PAGE1         RESTORE                        restore the registers         RTS         AGO   .DONE.AP40A                                  40 col driver         JSR   SCHIFT                   capitloize the char         STA   CHAR                     save the character         SAVE                           save the registers         RAM   BANK=2                   allow access to alternate bank         LDA   BASL+1                   save BASL         PHA         LDA   CH                       decide if on or off screen         CMP   #40         BLT   PR1A         SBC   #40         LDX   ONSCREEN         BEQ   OFF         BNE   ONPR1A     LDX   ONSCREEN         BEQ   ONOFF      PHA         LDA   BASL+1         EOR   #$D4         STA   BASL+1         PLAON       TAY                            write the character         LDA   CHAR         STA   (BASL),Y         PLA                            restore BASL         STA   BASL+1         RAM   READ=ROM,BANK=2          restore bank settings         RESTORE                        restore the registers         RTS.DONETY       DS    1                        temporary storageTX       DS    1CHAR     DS    1         END******************************************************************  SCPUTC - Put a Character**  Writes a character and advances the cursor.  All terminal*  control codes are interpreted.**  INPUTS:*        CV - vertical position*        CH - horizontal position*        A - character to write******************************************************************SCPUTC   START         USING SCCOMM         JSR   SCPUTX                   write the character         BCS   PC1         LDA   #ASCFS                   advance the cursor         JSR   SCPUTXPC1      LDA   #0         RTS         END******************************************************************  SCPUTL - Put a Line**  INPUTS:*        * - parameter count*        *+1 - address of characters*        *+3 - number of characters*        *+4 - horizontal position*        *+5 - vertical position******************************************************************SCPUTL   START         USING SCCOMM         USING SACOMMNOPR     EQU   R0                       input parameter countCADR     EQU   R1                       address where characters are storedNCHAR    EQU   R3                       number of characters to writeX        EQU   R4                       horizontal start positionY        EQU   R5                       vertical start positionLX       EQU   R6                       temp horizontal positionLY       EQU   R7                       temp vertical position         STX   TX                       save the X and Y registars         STY   TY         LDY   #7                       save the zero page areas and move theCP1      LDA   R0,Y                      parameters into an easily accessible         STA   SAVE,Y                    area         LDA   (WR1),Y         STA   R0,Y         DBPL  Y,CP1         LDA   NCHAR                    skip the call of the character count is         JEQ   CP5                       zero         LDA   NOPR                     check the parameter count         CMP   #4         JNE   CP6         LM    LX,CH                    save the old cursor position         LM    LY,CV         LDX   X                        set the cursor to the start position         LDY   Y         JSR   SCGOTO         LM    NOPR,#0                  write the characters to the screenCP2      ANOP         AIF   TYPE80=1,.VIDEX         AIF   TYPE80=2,.VIDEX         AIF   TYPE80=3,.AP40B         LDA   X         LSR   A         BCS   CP2A         STA   PAGE2CP2A     STA   WR0         LDY   NOPR         LDA   (CADR),Y         ORA   #$80         CMP   #$8D         BNE   CP3         LDA   #$A0CP3      CMP   #$A0         BGE   CP4         SBC   #$5FCP4      LDY   WR0         STA   (BASL),Y         STA   PAGE1         INC   NOPR         INC   X         DBNE  NCHAR,CP2         AGO   .DONE.AP40B                                  40 col driver         LDA   BASL+1                   save BASL         PHA         RAM   BANK=2         LDA   X                        decide if on or off screen         CMP   #41         BLT   PR1A         LDX   ONSCREEN         BEQ   OFF         BNE   ONPR1A     LDX   ONSCREEN         BEQ   ONOFF      LDA   BASL+1         EOR   #$D4         STA   BASL+1ON       LDA   X                        place line on screen         CMP   #40         BNE   CP2A         LDA   BASL+1         EOR   #$D4         STA   BASL+1         LDA   XCP2A     CMP   #40         BLT   CP2B         SBC   #40CP2B     STA   WR0         LDY   NOPR         LDA   (CADR),Y         ORA   #$80         CMP   #$8D         BNE   CP3         LDA   #$A0CP3      CMP   #$A0         BGE   CP4         SBC   #$5FCP4      LDY   WR0         JSR   SCHIFT         STA   (BASL),Y         INC   NOPR         INC   X         DBNE  NCHAR,ON         RAM   READ=ROM,BANK=2         PLA                            restore BASL         STA   BASL+1         AGO   .DONE.VIDEX         LDY   NOPR         LDA   (CADR),Y         ORA   #$80         CMP   #$8D         BNE   CP3         LDA   #$A0CP3      CMP   #$A0         BGE   CP4         SBC   #$5FCP4      AND   #$7F         JSR   SCPRHV         INC   NOPR         INC   CH         DBNE  NCHAR,CP2.DONE         LDX   LX         LDY   LY         JSR   SCGOTOCP5      MOVE  SAVE,R0,#8               restore zero page         LDX   TX                       restore the registers         LDY   TY         LDA   #0         RTSCP6      ERROR #4                       return with a paramter count errorTX       DS    1                        temporary storageTY       DS    1         END******************************************************************  SCPUTX - Put a Character**  Writes a character without advancing the cursor.  All*  terminal control codes are interpreted.**  INPUTS:*        CV - vertical position*        CH - horizontal position*        A - character to write**  OUTPUTS:*        C - set if the character written was a control*              character******************************************************************SCPUTX   START         USING SCCOMM         AND   #$7F                     convert to ASCII         JSR   SCCTRL                   interpret control codes         BCS   LB1         ORA   CHMASK                   set high bit to mask value         JSR   SCPRHV                   write the character         CLCLB1      LDA   #0         RTS         END******************************************************************  SCROLL - Scroll the screen.**  NOTES:*        1)  All registers are returned intact.*        2)  CV and CH are unchanged.*        3)  The last line is blanked.******************************************************************SCROLL   START         USING SCCOMM         SAVE                           save registers and cursor         LDA   CH         PHA         LDA   CV         PHA         AIF   TYPE80=0,.APP80         AIF   TYPE80=3,.AP40E         LDA   MAXCV                    Videx portion         CMP   #23                      check for full or partial screen scroll         BNE   TOP         LM    CV,#23                   goto the bottom of the screen         JSR   SCGOTO         LDA   #10                      set Videx scroll code         JSR   SCVIDX                   hardware call         JMP   LLP2TOP      LM    CV,#0                    partial screen scrollTLP      LM    CH,#79LLP      INC   CV                        scroll lines         JSR   SKRSCR         DEC   CV         JSR   SCPRHV         DEC   CH         BPL   LLP         INC   CV         LDA   CV         CMP   MAXCV         BLT   TLPLLP2     ANOP         AGO   .DONE.AP40E                                  40 col driver         LM    CV,#0                    copy lines to the line above         JSR   VTABSC1      MOVE  BASL,BASL2         INC   CV         JSR   VTAB         RAM   BANK=2         LDY   #39SC2      LDA   (BASL),Y         STA   (BASL2),Y         DBPL  Y,SC2         LDA   BASL+1         EOR   #$D4         STA   BASL+1         LDA   BASL2+1         EOR   #$D4         STA   BASL2+1         LDY   #39SC3      LDA   (BASL),Y         STA   (BASL2),Y         DBPL  Y,SC3         LDA   BASL+1         EOR   #$D4         STA   BASL+1         RAM   READ=ROM,BANK=2         LDA   CV         CMP   MAXCV         BLT   SC1         AGO   .DONE.APP80         STA   COL80                    enable 80 column page selection         LM    CV,#0                    copy lines to the line above         JSR   VTABSC1      MOVE  BASL,BASL2         INC   CV         JSR   VTAB         LDY   #39SC2      LDA   (BASL),Y         STA   (BASL2),Y         DBPL  Y,SC2         STA   PAGE2         LDY   #39SC3      LDA   (BASL),Y         STA   (BASL2),Y         DBPL  Y,SC3         STA   PAGE1         LDA   CV         CMP   MAXCV         BLT   SC1.DONE         LM    CH,#0                    clear the bottom line         LDA   #ASCGS         JSR   SCCTRL         PLA                            restore cursor and registers         STA   CV         PLA         STA   CH         AIF   TYPE80=1,.VIDEX2         AIF   TYPE80=2,.VIDEX2         JSR   VTAB         AGO   .DONE2.VIDEX2         LDX   CH         LDY   CV         JSR   SCGOTO.DONE2         RESTORE         RTS         END******************************************************************  SCSIZE - Return Size of Screen**  INPUTS:*        MAXCV - maximum vertical position*        MAXCH - maximum horizontal position**  OUTPUTS:*        X - maximum horizontal position*        Y - maximum vertical position**  NOTES:*        1)  The accumulator remains unchanged.*        2)  Positions are numbered from 0.******************************************************************SCSIZE   START         USING SCCOMM         LDX   MAXCH         LDY   MAXCV         LDA   #0         RTS         END******************************************************************  SCVIDX - Videx Output (Hardware Call)******************************************************************SCVIDX   START         AIF   .NOT.((TYPE80=1).OR.(TYPE80=2)),.VD1         JMP   (OLDOUT).VD1         END******************************************************************  SCWAIT - Pause on Paddle and Wait on Keypress******************************************************************SCWAIT   START         USING SACOMM         USING SCCOMM         SAVE                           save the registers         LDA   WAITF         BEQ   CR1         LDX   #0                       read paddle 0, and use the results         JSR   PREAD                     to pause         INY         STY   TEMP         SEC         LDA   #1         SBC   TEMP         JSR   WAIT         LDA   KEYBOARD                 if a key has been pressed, wait for         BPL   CR1                       another keypress         LDA   STROBE         LDA   CLICK         BEQ   CR0         LDA   SPEAKERCR0      JSR   SKEYINCR1      RESTORE                        restore the registers         RTSTEMP     DS    1         END         APPEND OH.PK