******************************************************************  SAGETC - Get A Character From the Exec File**  OUTPUT:*        TA - character*        C - clear if EOF else set******************************************************************SAGETC   START         USING SACOMM         USING SCCOMM         RELEASE #RDATA,#1              release the buffer to ProDOS         READ  RDEXDCB                  read in one character         BEQ   GT2                      if error then         RESERVE #RDATA,#1              reserve the buffer         LDA   #RETURN                  return is last character         CLC         RTSGT2      SEC         RTS         END******************************************************************  SAGLIN - Get Language Info**  OUTPUTS:*        WR1 - set with language info via a macro call******************************************************************SAGLIN   START         USING SACOMM         LDY   #0                       check the parm count         LDA   (WR1),Y         CMP   #11         BNE   ERR         MOVE  LINFO,{WR1},#18          move the info         LDA   #0         LDY   TY         RTSERR      ERROR #4                       invalid parm count error         END******************************************************************  SAINIT - System Initialization******************************************************************SAINIT   START         USING SACOMM         CLD                            set math to hex         JSR   SCINIT                   initialize the CRT         LM    TWAIT,WAITF              save the wait flag         LM    LEVEL,#1                 set application file level         MOVE  HOOKIN,OLDIN             save the I/O hooks         MOVE  HOOKOUT,OLDOUT         MOVE  BREAK,OLDBRK             save the break vector         LA    HOOKIN,KEYIN             set console I/O hooks         LA    HOOKOUT,KEYOUT         LA    BREAK,SBREAK             set the new break vector         LM    (ProHOOK,ORCAHOOK),#$4C  set the ProDOS call hook         LA    ProHOOK+1,SAPROD         LA    ORCAHOOK+1,SAORCA        set the ORCA call hook         RTS;; BREAK ROUTINE;SBREAK   MOVE  OLDIN,HOOKIN             restore the origional I/O hooks         MOVE  OLDOUT,HOOKOUT         MOVE  OLDBRK,BREAK             JMP using the original break vector         JMP   (BREAK)OLDIN    DS    2                        storage for vectorsOLDBRK   DS    2OLDOUT   ENTRY                          used by videx drivers         DS    2         END******************************************************************  SALANG - Set Language Name**  INPUTS:*        LPREFIX - language prefix*        A - current language number*        LNAMES - available languages**  OUTPUTS:*        C - set if language found*        LNAME - language path name******************************************************************SALANG   START         USING SACOMM         TAX         BEQ   LN3         STA   LNUM                     save the language number         LA    WR0,CMD                  search the command tableLN1      LDY   #0         LDA   (WR0),Y         BPL   LN1A         AND   #$7F         CMP   LNUM         BEQ   LN2LN1A     SEC         LDY   #1         LDA   (WR0),Y         BEQ   LN3         ADC   WR0         STA   WR0         BCC   LN1AB         INC   WR1LN1AB    INC2  WR0         JMP   LN1LN2      INC   WR0                      found language         LA    WR2,LPREFIX              set the path name         LA    WR4,LNAME         JSR   SAPATH                   append language to language prefix         SEC         RTSLN3      CLC                            not found         RTSLNUM     DS    1                        storage for language number         END******************************************************************  SALGIO - Determines if NAME1 Contains a Legal I/O Device**  INPUTS:*        NAME1 - buffer of I/O device name**  OUTPUTS:*        C - set if legal else clear.*        A - contains 0:console, 1:printer, ect..**        Note: if output was to a file and the file did not*              exist then the file is created******************************************************************SALGIO   START         USING SACOMM         LA    R0,DEVICES               locate device in device name table         LM    TA,#0LG       LDY   NAME1LG1      LDA   (R0),Y         CMP   NAME1,Y         BNE   LG2         DBPL  Y,LG1         BMI   LG4                      branch if it is in tableLG2      INC   TA                       else get next device name from table         SEC         LDY   #0         LDA   (R0),Y         ADC   R0         STA   R0         BCC   LG3         INC   R1LG3      LDA   (R0),Y         BNE   LG         CLC                            at the end of device table (not found)         RTSLG4      LDA   TA         SEC                            device found         RTSDEVICES  DW    .CONSOLE         DW    .PRINTER         DC    I1'0'                    end of table marker         END******************************************************************  SANAME - Find the Address of the Language Name Table**  INPUTS:*        WR1 - address to place the address at (macro call)******************************************************************SANAME   START         USING SACOMM         LDA   #<CMD                    retrieve the address of the command         LDY   #0                        table         STA   (WR1),Y         INY         LDA   #>CMD         STA   (WR1),Y         LDY   TY                       restore Y         LDA   #0         RTS         END******************************************************************  SAORCA - ORCA Call Handler******************************************************************SAORCA   START         USING SACOMM         STA   TA                       save the registers         STY   TY         STX   TX         PLA                            get operands         STA   OSTR         PLA         STA   OSTR+1         INC2  OSTR         MOVE  {OSTR},WR0,#3         ADD2  OSTR,#3         LA    WR3,ORCASUBS             find call handler         LDY   #2RC1      LDA   (WR3),Y         BEQ   RC4         CMP   WR0         BEQ   RC2         ADD2  WR3,#3         JMP   RC1RC2      MOVE  {WR3},RC3+1              call it         LDY   TY         LDX   TX         LDA   TARC3      JSR   RC3         JMP   (OSTR)RC4      LDY   TY                       bad system call number         LDX   TX         LDA   #1         JMP   (OSTR)         END******************************************************************  SAPATH - Sets the full path name**  INPUTS:*        WR0 - Pointer to the file name*        WR2 - Pointer to the prefix**  OUTPUTS:*        WR4 - Pointer to the destination**  NOTES:*        Assumes prefix does not exceed 64.  If path name is*        too long will append as much as possible.  WR4 is*        changed.******************************************************************SAPATH   START         USING SACOMM         MOVE  {WR2},{WR4},#65          move the prefix to the destination         LDY   #0         LDA   (WR4),Y                  check for a '/'         TAY         LDA   (WR4),Y         CMP   #'/'         BEQ   PTH2         LDA   #'/'         INY         STA   (WR4),YPTH2     STY   LENGTH                   check prefix size         SEC                            compute available spaces         LDA   #64         SBC   LENGTH         STA   AVAIL         CLC         LDY   #0         LDA   (WR0),Y         ADC   LENGTH         CMP   #64                      path name too big?         BLT   PTH2A         LDA   #64PTH2A    STA   (WR4),Y         CLC                            set pointer WR4 to index correctly         LDA   WR4         ADC   LENGTH         STA   WR4         BCC   PTH2B         INC   WR4+1PTH2B    LDY   #0                       store filename         LDA   (WR0),Y         TAY         LDX   AVAILPTH3     LDA   (WR0),Y         STA   (WR4),Y         DEX         BMI   RTS                      filled up to capacity         DBNE  Y,PTH3                   able to append WR0RTS      RTSLENGTH   DS    1AVAIL    DS    1         END         APPEND OH.SAPROD