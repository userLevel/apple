******************************************************************  PAMAIN - Call the Monitor**  INPUTS:*        A - ProDOS error code for output by monitor******************************************************************PAMAIN   START         USING SACOMMFAMNTR   EQU   $2000                    monitor entry point;;  Enter the monitor.;PACOLD   ENTRY         LDA   #0                       for system entry, clear the error codeSAMNTR   ENTRY         PHA                            close output file if any         JSR   SAC2         LDA   INFLAG                   load the monitor if it is not in         BNE   MN1                       memory         LA    WR2,MPREFIX              set up to append MONITOR to prefix         LA    WR0,PATH         LA    WR4,LNAME         JSR   SAPATH                   append MONITOR to monitor's prefix         BLOAD LNAME,#FAMNTR         INC   INFLAGMN1      PLA         LDX   #$FF                     initialize the stack pointer         TXS         CMP   #$FF                     see if we just initialized an exec file         BNE   MN2         LDA   #0                       set no error code and exec already open         PHA         BEQ   MN3MN2      PHA                            save the monitor entry error code         LDA   EXEC                     if an exec file was closed then         BEQ   MN3         MOVE  EXECF,NAME1,#65          retrieve the exec file name         LA    OPENDCB+1,NAME1         FINDBUFF OPENDCB+3,#1024       find an open file buffer         OPEN  OPENDCB                  open the exec file         LM    (RDEXDCB+1,MARKDCB+1,OPENE),OPENDCB+5 set the reference number         SET_MARK MARKDCB               set the old markerMN3      PLA                            restore error code         JMP   FAMNTR                   call the monitor;;  Local data area.;PATH     DW    'MONITOR'         END******************************************************************  SABLOD - Load a Binary File**  INPUTS:*        Y,X - address of file name*        WR0 - location of load******************************************************************SABLOD   START         STY   OP_PATH+1                retrieve inputs         STY   WR3         STX   OP_PATH         STX   WR2         MOVE  WR0,RD_BUFF              set the origin         JSR   SAVOLC                   make sure volume is on line         BCC   RTS         JSR   SACMEM                   clear memory         RESERVE #$800,#$1800           reserve the O/S space         FINDBUFF OP_BUFF,#1024         find an open file buffer         OPEN  OP_DCB                   open the file         LM    (RD_REF,CL_REF),OP_REF   get the reference number         READ  RD_DCB                   read the file into memory         PHA         CLOSE CL_DCB                   close the file         PLA         BNE   ERR         RESERVE RD_BUFF,RD_TRAN        reserve the program from ProDOS         SECRTS      RTSERR      MOVE  OP_PATH,OSTR         LDY   #0         LDA   (OSTR),Y         TAX         BEQ   RT2ER1      INY         LDA   (OSTR),Y         JSR   SYSCOUT         DBNE  X,ER1RT2      PUTS  #' Not Found.',CR=TRUE         CLC         RTSOP_DCB   DC    I1'3'                    open DCBOP_PATH  DS    2OP_BUFF  DS    2OP_REF   DS    1RD_DCB   DC    I1'4'                    read DCBRD_REF   DS    1RD_BUFF  DS    2RD_REQ   DC    I'$A000'RD_TRAN  DS    2CL_DCB   DC    I1'1'                    close DCBCL_REF   DS    1         END******************************************************************  SACLNG - Get Current Language**  OUTPUTS:*        X - language number******************************************************************SACLNG   START         USING SACOMM         LDX   CURLANG                  get the current language         LDA   #0                       clear error         RTS         END******************************************************************  SACMEM - Clear Memory**  Sets all memory as available for use.******************************************************************SACMEM   START         USING SACOMM         LDX   #>LOMEM                  clear the ProDOS memory bit map         LDA   #<LOMEM                   from LOMEM to the begining of         BEQ   CM1                       ProDOS         INXCM1      STX   MEM         LM    CUR,#$BECM2      JSR   SYSMASK         EOR   #$FF         AND   BITMAP,X         STA   BITMAP,X         DEC   CUR         LDA   CUR         CMP   MEM         BGE   CM2         LM    $BF6F,#1;; If there was an open file then reserve back the memory the file was using;         LDA   OPENO                    if open output file then         BEQ   CM3         RESERVE  OPENO+1,#1024          reserve memory for open output filesCM3      LDA   OPENI                    if open input file then         BEQ   RTS         RESERVE  OPENI+1,#1024          reserve memory for open input filesRTS      RTSMEM      DS    1                        temporary storageCUR      DS    1         END******************************************************************  SACNIN - Sets Input Hook To The Console******************************************************************SACNIN   START         USING SACOMM         LA    HOOKIN,KEYIN             set console I/O hooks         LM    INPUT,#0                 set INPUT flag to consoleSACN1    ENTRY         LDA   OPENI                    if input file is open then close it         BEQ   RTS         STA   CLOSEDCB+1         CLOSE CLOSEDCB         LM    OPENI,#0RTS      RTSKEYIN    ENTRY         STX   TX                       read keyboard without disturbing the         STY   TY                        registers         JSR   SKEYCR         LDX   TX         LDY   TY         RTS         END******************************************************************  SACNOT - Sets Output Hook To The Console******************************************************************SACNOT   START         USING SACOMM         LA    HOOKOUT,KEYOUT           set the output hook         LM    OUTPUT,#0                set OUTPUT flag to consoleSAC2     ENTRY         LDA   OPENO                    if output file is open then close it         BEQ   RTS         STA   CLOSEDCB+1         CLOSE CLOSEDCB         LM    OPENO,#0RTS      RTSKEYOUT   ENTRY                          console output routine         STX   TX                        save the registers         STY   TY         PHA         JSR   SCPUTC                    print the character         PLA         LDX   TX         LDY   TY                        restore the registers         RTS         END******************************************************************  SADIRC - Returns The Current I/O Direction**  INPUTS:*        WR1, WR2 - via a macro call**  OUTPUTS:*        WR3 - set with output number******************************************************************SADIRC   START         USING SACOMM         LDY   #0                       check for valid request         LDA   (WR1),Y         CMP   #2         BEQ   DI1         RTSDI1      INY                            see if request if input or output         LDA   (WR1),Y                   direction         INY         CMP   #1         BLT   DI2         BNE   DI3         LDA   INPUT                     input request         JMP   RT1DI2      LDA   OUTPUT                    output request         JMP   RT1DI3      LDA   EXEC                      exec requestRT1      STA   (WR1),Y                  return the result         RTS         END******************************************************************  SAEROR - Error Return**  Returns from an ORCA O/S function with an error code.**  INPUTS:*        A - error number**  OUTPUTS:*        X,Y - restored to original values**  NOTES:*        1)  Must be entered via a JMP from the routine*            called by SAORCA.******************************************************************SAEROR   START         USING SACOMM         LDX   TX         LDY   TY         RTS         END******************************************************************  SAEXEC - Exec File Keyboard Input Routine**  INPUTS:*        OPENI - open input file*        OPENE - open exec file**  OUTPUTS:*        A - character from exec file******************************************************************SAEXEC   START         USING SACOMM         LDA   OPENE                    check for open exec file         ORA   OPENI         BNE   EXC1                     if not return         RTSEXC1     STX   LX                       save X,Y         STY   LY         JSR   SAGETC                   get a character         BCC   RT1                      check for end of file         PLA                            pop return off of stack         PLA         JMP   RT4RT1      LDA   OPENI                    check for open input file         BEQ   RT2         JSR   SACN1                    close input file         BEQ   RT4RT2      LM    CLOSEDCB+1,OPENE         set close parameter to exec file         LDA   #0         STA   OPENE                     open exec = false         STA   EXEC                      exec = false         STA   MARKDCB+2                 reset the marker         STA   MARKDCB+3         STA   MARKDCB+4         CLOSE CLOSEDCB                 close the fileRT4      LDA   RDATA                    A = character         LDX   LX                       restore X,Y         LDY   LY         RTSLX       DS    1                        temporary storageLY       DS    1         END******************************************************************  SAEXIN - Initialize Exec Files**  INPUTS:*        NAME1 - exec file name**  OUTPUTS:*        OPENE - assigned reference number of open exec file******************************************************************SAEXIN   START         USING SACOMMBUFFER   EQU   $200         LDA   OPENE                    do not allow recursive exec files         BEQ   EX1         PUTS  #'Cannot Call EXEC file',CR=TRUE         RTSEX1      FINDBUFF OPENDCB+3,#1024       find the file buffer         OPEN  OPENDCB                  open the file         LM    (RDEXDCB+1,OPENE),OPENDCB+5 set the reference number         LM    EXEC,#1                  set EXEC flag         LDA   NAME1+1                  check for a full path name         CMP   #'/'         BNE   EX2         MOVE  NAME1,EXECF,#65         RTSEX2      RELEASE #BUFFER,#65            release the buffer to ProDOS         GET_PREFIX PFX_DCB             get the current prefix         RESERVE #BUFFER,#65            reserve the buffer         LA    WR2,BUFFER         LA    WR0,NAME1         LA    WR4,EXECF         JMP   SAPATHPFX_DCB  DC    I1'1'                    prefix DCB         DC    A'BUFFER'         END******************************************************************  SAFLIN - Set Input Re-Direction To File**  INPUTS:*        NAME1 - file name**  OUTPUTS:*        OPENI - assigned reference number of open exec file*        C - set if sucessfull else clear******************************************************************SAFLIN   START         USING SACOMM         USING SCCOMM         GET_INFO IF_DCB                make sure file exists         BEQ   FINFNFER    ENTRY         PUTS  #'File Not Found',CR=TRUE         JMP   ERRFERR     ENTRY         PUTS  #'Incompatible File Format',CR=TERR      LM    LEVEL,#1                 reset level indicator just in case of         CLC                              error below         RTSFIN      LDA   FIL_TYPE                 make sure file is of type SRC or TXT         CMP   #$04         BEQ   FIN2         CMP   #$B0         BNE   FERR                     incompatible file error messageFIN2     FINDBUFF OPENDCB+3,#1024       find a file buffer         LM    LEVEL,#0                 all files opened by O/S at level 0         OPEN  OPENDCB                  open the file         BNE   ERR         MOVE  OPENDCB+3,OPENI+1        save the open file buffer's address         LM    (RDEXDCB+1,OPENI),OPENDCB+5 save the reference number         LM    LEVEL,#1                 reset level indicator         STA   INPUT                    set INPUT flag to file         SEC         RTS         END******************************************************************  SAFLOT - Set Output Re-Direction To File**  INPUTS:*        NAME1 - file name**  OUTPUTS:*        OPENO - assigned reference number of open output file*        C - set if sucessfull else clear******************************************************************SAFLOT   START         USING SACOMM         USING SCCOMM         JSR   SAC2                     close any previous output file if any         DESTROY DS_DCB                 if it TXT or SRC then OK to destroy         BEQ   SAF         CMP   #$46         BNE   SAF2SAF      LDX   #$B0                     set the file type to the current lang         LDA   CURLANG                  if language is ProDOS then file is of         BNE   SAF1         LDX   #4                         type TXTSAF1     STX   CR_TYPE         STA   CR_AUX                   set the aux language type for SRC file         CREATE CR_DCB                  create file         FINDBUFF OPENDCB+3,#1024       find the open file buffer         LM    LEVEL,#0                 all file open by O/S at level 0         OPEN  OPENDCB                  open the fileSAF2     JNE   FNFER                    file not found error         LM    (WR_REF,OPENO),OPENDCB+5 set the reference number         MOVE  OPENDCB+3,OPENO+1        set the open buffer address         LA    HOOKOUT,FILEOUT          change the output hook         LM    OUTPUT,#1                set OUTPUT flag to file         STA   LEVEL                    reset application level         SEC         RTS;; Character Output Driver;FILEOUT  PHA                            save A         AND   #$7F                     clear the high bit         STA   BUF         WRITE WR_DCB         PLA                            restore A         RTSCR_DCB   DC    I1'7'                    create DCB         DC    A'NAME1'         DC    B'11100011'CR_TYPE  DS    1                        file typeCR_AUX   DS    2                        auxilary type         DC    H'01'         DS    4DS_DCB   DC    I1'1'                    destroy DCB         DC    A'NAME1'WR_DCB   DC    I1'4'                    write DCBWR_REF   DS    1WR_BUFF  DC    A'BUF'WR_CNT   DC    I'1'WR_TRN   DS    2BUF      DS    1                        character buffer         END         APPEND OH.SAGETC