******************************************************************  SAPROD - ProDOS Call Handler**  INPUTS:*         - points to call parameters******************************************************************SAPROD   STARTPRODOS   EQU   $BF00                    ProDOS call point         PLA                            recover the return address         STA   OSTR         PLA         STA   OSTR+1         LDY   #3                       use it to get the call parametersPR1      LDA   (OSTR),Y         STA   PROCALL+2,Y         DBNE  Y,PR1         ADD2  OSTR,#4                  update the return addressPROCALL  JSR   PRODOS                   do the ProDOS call         DS    3         JMP   (OSTR)                   return to the caller         END******************************************************************  SAPRON - Sets Output Re-Direction to Printer**  OUTPUTS:*        C - set if sucessful else clear******************************************************************SAPRON   START         USING SACOMM         USING SCCOMM         LDA   PRINTER                  see if printer is enabled         BEQ   ERR         LM    HOOKOUT,#0               set the output hook depending on printer         LDA   PSLOT                     slot (C000, C100, C200,...)         ORA   #$C0         STA   HOOKOUT+1         LDY   #0                       send out the printer initialization         STY   R0                        stringPR1      LDY   R0         LDA   I80,Y         BEQ   PR2         JSR   OUT         INC   R0         BNE   PR1PR2      MOVE  HOOKOUT,JSR+1            set up the printer driver output         LA    HOOKOUT,PROUT            set the output hook to the driver         LM    OUTPUT,#2                set OUTPUT to printer         JSR   SAC2                     close output file if necessary         SEC         RTSERR      PUTS  #'Printer Not Enabled',CR=TRUE         BELL         CLC         RTS;; Printer Driver;PROUT    PHA                            save the character         LDA   WAITF                    check for pause/wait flag         BEQ   PR3         LDA   KEYBOARD                  if pause/wait enabled then         BPL   PR3                         check for a keypress         LDA   STROBE                    if keypress then wait for another         JSR   SKEYIN                      keypressPR3      PLA         PHA         ORA   #$80                     set the high bitJSR      JSR   JSR                      output the character         PLA         RTSOUT      JMP   (HOOKOUT)         END******************************************************************  SARDIR - Sets I/O re-direction******************************************************************SARDIR   START         USING SACOMM         MOVE  {WR1},IOINFO,#4          retrieve the info         MOVE  IOINFO+2,R0         MOVE  {R0},NAME1,#65         LDA   NAME1+1                  check for a valid device name         CMP   #'.'         JNE   RD2         JSR   SALGIO                   see if device in device table         JCC   ERR         STA   TA         LDA   IOINFO+1                 check input/output flag         JEQ   RD1         LDA   TA                       if input then see if device was .PRINTER         CMP   #1         JEQ   ERR                      if so then error         JSR   SACNIN                   else enable console for input         JMP   RT1RD1      LDA   TA                       process output         CMP   #1         BNE   RD1A         JSR   SAPRON                    turn on the printer         BCC   RT2         JMP   RT1RD1A     JSR   SACNOT                    turn on the console         JMP   RT1ERR      PUTS  #'Bad Device',CR=TRT2      CLC         RTSRT1      SEC         RTS;; Process File I/O;RD2      LDA   IOINFO+1         BEQ   RD3         JSR   SAFLIN                    turn on file input         BCC   RT2         JMP   RT1RD3      JSR   SAFLOT                    turn on file output         BCC   RT2         JMP   RT1         END******************************************************************  SAREST - RESET Handler******************************************************************SAREST   START         USING SACOMM         LDA   #0         STA   EXEC                     cancel exec input         STA   LEVEL                    close all files at all levels         STA   CLOSEDCB+1         CLOSE CLOSEDCB                 close all open files         MOVE  #0,OPENI,#9              reinit input, output, and exec files         LM    WAITF,TWAIT              restore the wait flag         JSR   SAINIT                   initialize the system         JMP   PACOLD                   do a restart         END******************************************************************  SASLIN - Set Language Info**  NOTES:*        1)  Transfers control to a language, linker or*            application program.******************************************************************SASLIN   START         USING SACOMMFALANG   EQU   $2000                    application program addressPREFX    EQU   $0280         LDA   OPENE                    if an exec file is open then         BEQ   IN         STA   MARKDCB+1         STA   CLOSEDCB+1         GET_MARK MARKDCB                 get the marker         CLOSE CLOSEDCB                   close the exec file         LM    OPENE,#0                 no more input from exec fileIN       LDY   #0                       check for a valid param count         LDA   (WR1),Y         CMP   #11         BEQ   IN0         LDA   #4                       invalid param count error code         JMP   SAMNTR;;  Initialization;IN0      MOVE  {WR1},LINFO,#18          retrieve the language info         LDX   #$FF                     reset the stack pointer         TXS         MOVE  LINFO+1,R0,#6            save the file names         LDY   #64IN1      LDA   (R0),Y         STA   NAME1,Y         LDA   (R2),Y         STA   NAME2,Y         DBPL  Y,IN1         MOVE  {R4},SYSLINE,#256        save the subroutine list         LA    LINFO+1,NAME1             (S1,S2,S3,...)         LA    LINFO+3,NAME2         LA    LINFO+5,SYSLINE         LDA   LINFO+8                  check for editor entry         JMI   ED1         LDA   LINFO+7                  check for MERR/MERRF comparison         CMP   LINFO+8         JLT   SL1         LDA   LINFO+9         JEQ   SL1                      if LOPS = 0 then enter monitor         AND   #3         CMP   #2         BNE   IN3         LA    WR2,NAME1         JSR   SAVOLC                   do a volume on line check         JCC   SL1         LDX   NAME1                    append .ROOT for link and make sure         LDY   #$FF                      the file existsIN2      INX         INY         LDA   ROOT,Y         STA   NAME1,X         CPY   #4         BNE   IN2         STX   NAME1         GET_INFO IF_DCB         JNE   SL2         SEC                            remove .ROOT and continue         LDA   NAME1         SBC   #5         STA   NAME1         JMP   IN3AIN3      LA    WR2,NAME1                ask for file if necessary         JSR   SAVOLC         JCC   SL1         GET_INFO IF_DCB         JNE   SL2;;  Call a language processor;IN3A     LDA   LINFO+9                  see if language flag is set         LSR   A         BCC   LE1         LDA   FIL_TYPE                 get the language number         CMP   #$B0         BEQ   CL2         CMP   #$04         BEQ   CL1INFL     LDA   #$4A                     invalid file type         JMP   SAMNTRCL1      LDA   #1                       set language to text         BNE   CL3CL2      LDA   AUX_TYPE                 set language from file infoCL3      JSR   SALANG         BCS   CL4         LDA   #$80                     language not available         JMP   SAMNTRCL4      BLOAD LNAME,#FALANG            load the language         JCC   SL1         LM    INFLAG,#0                monitor is no longer in memory         LDX   #$FF                     reset the stack         TXS         JMP   FALANG                   call the language;;  Call the link editor.;LE1      LDA   #2                       see if link flag is set         BIT   LINFO+9         BEQ   BR1         LA    IF_DCB+1,LNAME         LA    WR2,LPREFIX              first look for system linker         LA    WR0,LINKER         LA    WR4,LNAME         JSR   SAPATH                   create a full path name         GET_INFO IF_DCB         BEQ   LE2         LA    WR2,LPREFIX              something wrong so call linked         LA    WR0,LINKED         LA    WR4,LNAME         JSR   SAPATHLE2      LA    IF_DCB+1,NAME1         BLOAD LNAME,#FALANG            yes -> call the link editor         JCC   SL1         LM    INFLAG,#0                indicate monitor is not in memory         LDX   #$FF                     reset the stack pointer         TXS         JMP   FALANG                   call the linker;;  Execute the program.;BR1      LDA   #4                       see if the BRUN flag is set         BIT   LINFO+9         BEQ   BR2         LDA   FIL_TYPE                 flag a file type error if the file is         CMP   #6                        not a binary image         BNE   EX1         LM    INFLAG,#0                monitor not in memory         BLOAD NAME1,AUX_TYPE           load the program at the org location         BCC   BR2         LDX   #$FF                     reset the stack         TXS         MOVE  AUX_TYPE,JSR+1           set up the call vector according to the         LA    LINADR,SYSLINE            the org         LDA   #0JSR      JSR   JSR                      call the programBR2      JMP   SL1;;  Execute an Exec File;EX1      CMP   #$B0                     check for SRC or TXT file type         BEQ   EX2         CMP   #$04         BNE   SY1EX2      LDA   #6                       see if language is type EXEC         CMP   AUX_TYPE         BNE   SY1         JSR   SAEXIN                   initialize exec input         LDA   #$FF         JMP   SL2;;  Execute a ProDOS System Program;SY1      CMP   #$FF                     is a system program         JNE   INFL         LM    LEVEL,#0                 set LEVEL         STA   CLOSEDCB+1         CLOSE CLOSEDCB                 close all files         BLOAD NAME1,#FALANG            load the system program         LM    R0,NAME1         INC   R0         MOVE  NAME1,PREFX,#R0         LDA   #$15                     set to 40 col display         JSR   $C300         JMP   FALANG;;  Call the Editor;ED1      LA    WR2,MPREFIX              set the full path for the editor         LA    WR0,EDITOR         LA    WR4,LNAME         JSR   SAPATH                   append EDITOR to system prefix         BLOAD LNAME,#FALANG            load the editor         BCC   SL1         LM    INFLAG,#0         LDX   #$FF                     reset the stack pointer         TXS         JSR   FALANG                   call the editorSL1      LDA   #0                       enter MONITORSL2      JMP   SAMNTR;;  Local data area.;LINKED   DW    LINKED                   program namesLINKER   DW    LINKEREDITOR   DW    EDITORROOT     DC    C'.ROOT'         END******************************************************************  SASLNG - Set the Current Language**  INPUTS:*        X - language number**  OUTPUTS:*        A - error code:*              $00 - no error*              $02 - language not available******************************************************************SASLNG   START         USING SACOMM         STX   CURLANG                  set the language number         LDX   TX                       restore user registers and quit         LDY   TY         LDA   #0         RTS         END                             error******************************************************************  SAVOLC - Volume On Line Check**  INPUTS:*        WR1 - address to place the address at******************************************************************SAVOLC   START         USING SACOMMBUFFER   EQU   $200                     temp buffer at $200ESC      EQU   $1B                      escape character         JSR   CHECK                    check for special case /MONITOR         LDY   #0                       if name is nul then error         LDA   (WR2),Y         STA   BUFFER         JEQ   ERR         INY                            if name is not a full path then use         LDA   (WR2),Y                   current prefix         CMP   #'/'         BNE   VL3VL1      STA   BUFFER,Y                 else peel off volume name         CPY   #16         BGE   VL2         INY         LDA   (WR2),Y         CMP   #'/'         BNE   VL1VL2      DEY         STY   BUFFER         JMP   VL6VL3      RELEASE #BUFFER,#65            release the buffer to ProDOS         GET_PREFIX PXDCB               get the current prefix         RESERVE #BUFFER,#65            reserve the buffer         LDA   BUFFER                   if nul prefix then error         BEQ   ERR         LDY   #2                       peel off volume name from prefix         LDA   #'/'VL4      CMP   BUFFER,Y         BEQ   VL5         INY         CPY   BUFFER         BLT   VL4VL5      DEY         STY   BUFFERVL6      GET_INFO IFDCB                 see if volume is on line         BNE   VL8         SEC         RTSERR      PUTS  BUFFER-1                 null prefix error         PUTS  #' Not Available'RTS      CLC         RTSVL8      PUTS  #'Place '                ask for volume         PUTS  BUFFER-1         PUTS  #' on line. '         LDA   FLAG         BNE   VL9         PUTS  #' Hit ESC to abort, any other key to continue.',CR=TRUE         RDKEY NOCURSOR                 wait for a keypress         CMP   #ESC                     if escape then quit         BEQ   RTS                      see if it is on line         JMP   VL6VL9      PUTCR         RDKEY NOCURSOR         JMP   VL6CHECK    LDY   #0                       check to see if file name matches         STY   FLAG                       MONITOR         LDA   (WR2),Y         TAY         LDX   #7CK1      LDA   (WR2),Y         CMP   MONITOR,X         BNE   RT1         DEY         DEX         BPL   CK1         LM    FLAG,#1RT1      RTSPXDCB    DC    I1'1'                    Prefix DCB         DC    A'BUFFER'MONITOR  DC    C'/MONITOR'FLAG     DS    1IFDCB    DC    I1'10'                   File info DCB         DC    A'BUFFER'         DS    15         END         APPEND OH.PC