******************************************************************  SYSABSF - Floating Point Absolute Value Function**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - unpacked number**  OUTPUTS:*        SYSS1 - positive result******************************************************************SYSABSF  START         ASL   SYSS1         LSR   SYSS1         RTS         END******************************************************************  SYSCHSF - Floating Point Change Sign**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By The Byte Works, Inc.**  INPUTS:*        SYSS1 - unpacked number**  OUTPUTS:*        SYSS1 - -SYSS1******************************************************************SYSCHSF  START         LDA   SYSS1         EOR   #$80         STA   SYSS1         RTS         END******************************************************************  SYSCMPF - Floating Point Compare**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - unpacked first argument*        SYSS2 - unpacked second argument**  OUTPUTS:*        C - set if SYSS1 >= SYSS2*        Z - set if SYSS1 = SYSS2******************************************************************SYSCMPF  START         LDA   #FZERO                   check for cases involving zero         BIT   SYSS1         BEQ   CP1         BIT   SYSS2         BEQ   CP4         LDA   #0         CMP   #0         RTSCP1      BIT   SYSS2         BNE   CP2         LDA   #FINF                    check for cases involving infinity         BIT   SYSS1         BEQ   CP3         BIT   SYSS2         BNE   CP5CP2      LDA   SYSS1         AND   #$80         STA   SYSE1         LDA   #1         CMP   SYSE1         RTSCP3      BIT   SYSS2         BEQ   CP5CP4      LDA   SYSS2         AND   #$80         CMP   #1         RTSCP5      LDA   SYSS1                    handle the case of oposite signs         EOR   SYSS2         BEQ   CP6         LDA   SYSS1         AND   #$80         STA   SYSE1         LDA   SYSS2         AND   #$80         CMP   SYSE1         RTSCP6      LDA   SYSS1         BMI   CP9         LDX   #2                       positive compareCP7      LDA   SYSS1,X         CMP   SYSS2,X         BNE   CP8         INX         CPX   #LUFP         BNE   CP7CP8      RTSCP9      LDX   #2                       negative compareCP10     LDA   SYSS2,X         CMP   SYSS1,X         BNE   CP8         INX         CPX   #LUFP         BNE   CP10         RTS         END******************************************************************  SYSPAKF - Pack Floating Point Number**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        MR0 - address of unpacked number*        MR2 - address to place packed number******************************************************************SYSPAKF  START         MOVE  {MR0},TX,#LUFP           place number in local area         LDA   TX                       check for infinity and zero         AND   #FZERO         BNE   PK3         LDA   TX         AND   #FINF         BNE   PK5         LDA   TX+6                     round the number         BPL   PK2         INC   TX+5         BNE   PK2         INC   TX+4         BNE   PK2         INC   TX+3         BNE   PK2         LM    TX+3,#$80         INC   TX+2         BEQ   PK4APK2      LDA   TX+2                     pack the exponent         BNE   PK4         LDA   TX+3         ORA   TX+4         ORA   TX+5         ORA   TX+6         BNE   PK6         FERR  #FERR4                   underflow - result is zeroPK3      MOVE  ZERO,TX+2,#4         ASL   TX         ROR   TX+2         JMP   PK7PK4      CMP   #$FF                     check for overflow         BNE   PK6PK4A     FERR  #FERR3                   overflow - result is infinityPK5      MOVE  INF,TX+2,#4         ASL   TX         ROR   TX+2         JMP   PK7PK6      ASL   TX+3                     pack the exponent with the sign         ASL   TX         ROR   TX+2         ROR   TX+3PK7      MOVE  TX+2,{MR2},#4            save the result         RTSTX       DS    LUFPINF      DC    H'FF 80'                 (uses two bytes from ZERO)ZERO     DC    F'0'         END******************************************************************  SYSSGNF - Floating Point Sign**  Maps numbers as follows:**        INPUT      OUTPUT**        <0         -1*        0          0*        >0         1**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  OUTPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa******************************************************************SYSSGNF  START         LDA   SYSS1                    quit if input is 0         AND   #$40         BNE   RTS         MOVE  ONE,SYSE1+1,#LUFP-2      move in the mask         LDA   SYSS1                    set the sign         AND   #$80         STA   SYSS1RTS      RTSONE      DC    H'7F 80 00 00 00'         END******************************************************************  SYSSQRF - Floating Point Square Root**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  OUTPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  NOTES:*        1) Developed from Cody, pp 17-34*        2) Negative arguments return -SQRT(-X)*        3) SQRT(inf)=inf*        4) Uses SYSFDIV, SYSFADD, SYSPOLF******************************************************************SYSSQRF  START         USING SYSCOM         DC    R'SYSCOM';;  Exception and special case handling;         LDA   SYSS1                    check for negative argument         BPL   SC1         FERR  #FERR1SC1      AND   #$40                     check for SQRT(0)         BNE   RTSSC2      LDA   SYSS1                    check for SQRT(inf)         AND   #$20         BEQ   IN1         FERR  #FERR1RTS      RTS;;  Initialization;IN1      LDA   SYSE1+1                  initialize and save the exponent         EOR   #$80         STA   TX3         LM    SYSE1+1,#$7F         MOVE  SYSS1,TX1,#LUFP          save the starting number         LA    WR0,C1                   estimate the answer         LM    WR2,#1         JSR   SYSPOLF;;  Iterate to a solution;         LM    WR3,#3IT1      LDX   #LUFP-1IT2      LDA   SYSS1,X         STA   TX2,X         STA   SYSS2,X         LDA   TX1,X         STA   SYSS1,X         DBPL  X,IT2         JSR   SYSDIVF         MOVE  TX2,SYSS2,#LUFP         JSR   SYSADDF         DEC   SYSE1+1         DBNE  WR3,IT1;;  Round to prevent messing up the exponent later.;         LDA   SYSM1+3         BPL   RN1         INC   SYSM1+2         BNE   RN1         INC   SYSM1+1         BNE   RN1         INC   SYSM1         BNE   RN1         LM    SYSM1,#$80         INC   SYSE1+1RN1      LM    SYSM1+3,#0;;  Compute the exponent;         LDA   TX3                      skip if exponent is even         ROR   A         BCS   CE1         MOVE  C3,SYSS2,#LUFP           handle odd exponent         JSR   SYSMULF         DEC   TX3CE1      LDA   TX3                      EXP = EXP/2         ASL   A         ROR   TX3         LDA   TX3         EOR   #$80         STA   SYSE1+1         RTS;;  Constants Used;C1       DC    F'0.59016'         DC    F'0.41731'C3       DC    H'00 007E B504F334'         DC    R'SYSSUBF'         END******************************************************************  SYSPOLF - Floating Point Polynomial**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags**        SYSM1 - mantissa*        WR0 - address of table of coefficients in packed*              format*        WR2 - order of the polynomial**  OUTPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  NOTES:*        1) Uses SYSFMUL and SYSFADD******************************************************************SYSPOLF  START         MOVE  SYSS1,FX,#LUFP           save argument         UNPACK {WR0},SYSS1             unpack high coefficientDP1      MOVE  FX,SYSS2,#LUFP           multiply current total by the         JSR   SYSMULF                   argument         ADD2  WR0,#LPFP                next coefficient         UNPACK {WR0},SYSS2         JSR   SYSADDF         DBNE  WR2,DP1                  next turn         RTS         DC    R'SYSSUBF'FX       DS    LUFP         END******************************************************************  SYSUNPF - Unpack Floating Point Number**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        MR0 - address of packed number*        MR2 - address of unpacked number******************************************************************SYSUNPF  START         MOVE  {MR0},TX+2,#LPFP         place the number in a local area         LDA   TX+2                     set the sign         AND   #$80         STA   TX         ROL   TX+3                     set the low byte of the exponent         ROL   TX+2         BNE   UN1         CLC                            for unnormalized numbers, clear the         BCC   UN2                       high bitUN1      SEC                            set high bit for normalized numbersUN2      ROR   TX+3         LDA   TX+3                     set the zero and infinity flags         ASL   A         ORA   TX+4         ORA   TX+5         BNE   UN5         ORA   TX+2         BNE   UN3         LDA   TX         ORA   #FZERO         BNE   UN4UN3      LDX   TX+2         INX         BNE   UN5         LDA   TX         ORA   #FINFUN4      STA   TXUN5      MOVE  TX,{MR2},#LUFP         RTSTX       DS    LUFP                     work area         END         APPEND FP.4