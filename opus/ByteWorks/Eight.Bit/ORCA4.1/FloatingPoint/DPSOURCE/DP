         LIST  OFF         SYMBOL OFF         MCOPY /RAM/DP.MACROS         KEEP  G.DOUBLE         COPY  COMMON******************************************************************  SYSGETD - Get a Double Precision Number**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  OUTPUTS:*        SYSS1 - number read*        FERR - overflow and underflow errors are possible******************************************************************SYSGETD  START         USING SYSCOMTEMP     EQU   SYSS1+LUDP;;  Initialization;         LDX   #0                       initialize the sign and current         STX   LSIGN                     character pointer         STX   EXP                      initialize the exponent         STX   EXP+1         DEX         STX   CC         LM    SYSS1,#FZERO             initialize the number;;  Read and save the sign.;RS0      JSR   SYSKBIN                  get the first character         LDX   SYSEOL         JNE   SS2         CMP   #' '         BEQ   RS0         CMP   #'-'                     flag the sign if it is a '-'         BNE   RS1         INC   LSIGN         BNE   MN1RS1      CMP   #'+'                     skip the sign if it is a '+'         BNE   MN2;;  Read and process the mantissa.;MN1      JSR   SYSKBIN                  process the characters before theMN2      JSR   SYSNMID                   decimal point         BCC   MN3         PHA         MOVE  TEN,SYSS2,#LUDP         JSR   SYSMULD         MOVE  SYSS1,SYSS2,#LUDP         PLA         AND   #$F         STA   SYSS1         LM    SYSS1+1,#0         JSR   SYSCV2D         JSR   SYSADDD         JMP   MN1MN3      CMP   #'.'                     check for a decimal point         BNE   EX1MN4      JSR   SYSKBIN                  process the characters after the         JSR   SYSNMID                   decimal point         BCC   EX1         PHA         MOVE  TEN,SYSS2,#LUDP         JSR   SYSMULD         MOVE  SYSS1,SYSS2,#LUDP         PLA         AND   #$F         STA   SYSS1         LM    SYSS1+1,#0         JSR   SYSCV2D         JSR   SYSADDD         DEC2  EXP         JMP   MN4;;  Read and process the exponent.;EX1      PHA                            move the number to a safe place         MOVE  SYSS1,TX1,#LUDP         PLA         CMP   #'E'                     check for exponent         BEQ   EX2         CMP   #'e'         BNE   EX3EX2      JSR   SYSGET2                  read the exponent value         ADD2  EXP,SYSS1EX3      LDA   EXP                      skip if exponent is zero         ORA   EXP+1         BNE   EX3B         MOVE  TX1,SYSS1,#LUDP         JMP   SS1EX3B     LDA   EXP+1                    decide on negative or positive         BPL   EX4                       exponent         SUB2  #0,EXP,EXP         LA    JAD,SYSDIVD         JMP   EX5EX4      LA    JAD,SYSMULDEX5      CMPW  EXP,#500         BLT   EX6ERR      CMPW  JAD,#SYSDIVD         BEQ   ERR2         FERR  #FERR3         JMP   SS2ERR2     FERR  #FERR4         JMP   SS2EX6      MOVE  ONE,SYSS1,#LUDP          do the exponent         LA    WR2,E256         LA    WR0,256EX7      SUB2  EXP,WR0,TEMP         BCC   EX8         MOVE  TEMP,EXP         MOVE  {WR2},SYSS2,#LUDP         JSR   OPREX8      SUB2  WR2,#LUDP+2         LSR2  WR0         LDA   WR0         ORA   WR1         BNE   EX7         MOVE  TX1,SYSS2,#LUDP         JSR   SYSMULD;;  Set the sign and pack.;SS1      ASL   SYSS1         LSR   LSIGN         ROR   SYSS1SS2      LDA   #<SYSS1         STA   MR0         STA   MR2         LDA   #>SYSS1         STA   MR1         STA   MR3         JMP   SYSPAKD;..............................................................;;                                                              ;;  Internal Subroutines and Data.                              ;;                                                              ;;..............................................................;;;  OPR - perform the operation whose address is at JAD;;OPR      JMP   (JAD);;  Local data area.;         DC    R'SYSCOM'         DC    R'SYSCV2F'         DC    R'SYSSUBD'CC       DS    1                        current character pointerLSIGN    DS    1                        sign of numberJAD      DS    2                        operation addressEXP      DS    2                        exponent         END******************************************************************  SYSPUTD - Format a Double Precision Floating Point Number*        For Ouput**  Converts an unpacked double precision number into a*  formatted ASCII character string.**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa*        SYSS2 - size of the output field*        SYSS2+2 - number of fraction digits to display******************************************************************SYSPUTD  START         USING SYSCOM         DC    R'SYSCOM';..............................................................;;                                                              ;;  Format the number                                           ;;                                                              ;;..............................................................;;;  Initialization;         LM    DECIMAL,SYSS2+2          save the input         LM    FORMAT,SYSS2             save the size of the output field         LM    CCHAR,#0                 initialize the string pointer         LDA   SYSS1                    output the sign         BPL   SC1         AND   #$7F         STA   SYSS1         LDA   #'-'         JSR   COUT;;  Handle infinity as a special case;SC1      LDA   SYSS1                    branch if not infinity         AND   #FINF         BEQ   ZR1         LDX   #0                       output an infinitySC2      LDA   INF,X         JSR   COUT         INX         CPX   #L:INF         BLT   SC2         JMP   WT1;;  Handle zero as a special case.;ZR1      LDA   SYSS1         AND   #FZERO         BEQ   FP1         STA   TX1         LDA   #0         STA   FLG         STA   EXP         STA   EXP+1         JMP   DD1;;  Find the largest power of 10 that is smaller than X.;FP1      LM    FLG,#0                   < 1 flag         LDX   #LUDP-1                  place numbers in starting positionsFP2      LDA   SYSS1,X         STA   SYSS2,X         STA   TX1,X         LDA   ONE,X         STA   SYSS1,X         STA   TX2,X         DBPL  X,FP2         LA    EXP,0                    init for search         LM    LCNT,#10         LA    WR0,E256                 split on exponent         JSR   SYSCMPD         BGT   FP6FP3      MOVE  {WR0},SYSS2,#LUDP        search for EXP > 0         JSR   SYSMULD         MOVE  TX1,SYSS2,#LUDP         JSR   SYSCMPD         BLE   FP4         MOVE  TX2,SYSS1,#LUDP         JMP   FP5FP4      MOVE  SYSS1,TX2,#LUDP         CLC         LDY   #LUDP         LDA   EXP         ADC   (WR0),Y         STA   EXP         INY         LDA   EXP+1         ADC   (WR0),Y         STA   EXP+1FP5      SUB2  WR0,#LUDP+2         DBNE  LCNT,FP3         BEQ   DD1FP6      MOVE  {WR0},SYSS2,#LUDP        search for EXP < 0         JSR   SYSDIVD         MOVE  TX1,SYSS2,#LUDP         JSR   SYSCMPD         BGE   FP7         MOVE  TX2,SYSS1,#LUDP         JMP   FP8FP7      MOVE  SYSS1,TX2,#LUDP         SEC         LDA   EXP         LDY   #LUDP         SBC   (WR0),Y         STA   EXP         INY         LDA   EXP+1         SBC   (WR0),Y         STA   EXP+1FP8      SUB2  WR0,#LUDP+2         DBNE  LCNT,FP6         INC   FLG;;  Strip off the 15 most significant decimal digits;DD1      LDX   #LUDP-1                  normalize the numberDD2      LDA   SYSS1,X         STA   SYSS2,X         LDA   TX1,X         STA   SYSS1,X         DBPL  X,DD2         JSR   SYSDIVD         LDA   FLG                      correct numbers < 1         BEQ   DD2A         MOVE  ONE,SYSS2,#LUDP         JSR   SYSCMPD         BGE   DD2A         DEC2  EXP         MOVE  TEN,SYSS2,#LUDP         JSR   SYSMULDDD2A     MOVE  #'0',TX1,#16             strip off the digits         BIT   SYSS1         BVC   DD2B         JMP   WM1DD2B     LM    LCNT,#0DD3      LDA   #0DD3A     LDX   SYSE1         CPX   #$7F         BNE   DD3B         LDX   SYSE1+1         CPX   #$FFDD3B     BLT   DD4         CLC         JSR   SYSROLD2         ROL   A         LDX   SYSE1+1         BNE   DD3C         DEC   SYSE1DD3C     DEC   SYSE1+1         LDX   SYSE1         BNE   DD3A         BEQ   DD7DD4      ORA   #'0'         LDX   LCNT         STA   TX1,X         INX         CPX   #16         BEQ   DD7         STX   LCNTDD5      LDA   SYSM1         BMI   DD6         ORA   SYSM1+1         ORA   SYSM1+2         ORA   SYSM1+3         ORA   SYSM1+4         ORA   SYSM1+5         ORA   SYSM1+6         BEQ   DD7         CLC         JSR   SYSROLD2         LDA   SYSE1+1         BNE   DD5A         DEC   SYSE1DD5A     DEC   SYSE1+1         JMP   DD5DD6      MOVE  TEN,SYSS2,#LUDP         JSR   SYSMULD         JMP   DD3DD7      LDA   TX1+15                   round         CMP   #'5'         BLT   WM1         LDX   #14DD8      INC   TX1,X         LDA   TX1,X         CMP   #'9'+1         BNE   WM1         LDA   #'0'         STA   TX1,X         DBPL  X,DD8         LM    TX1,#'1'         INC2  EXP;;  Write out the mantissa;WM1      LM    EFLAG,#0                 initialize the exponent flag         LDA   DECIMAL                  split on exponent type         BEQ   WM2         LDA   EXP+1         BMI   WM4         CMPW  EXP,#15         BLT   WM3WM2      LM    DECIMAL,#14              standard scientific notation         LM    (DIGIT,EFLAG),#1         BNE   WM6WM3      STA   DIGIT                    fixed point, > 1         INC   DIGIT         BNE   WM6WM4      LM    DIGIT,#0                 fixed point, < 1         INC2  EXPWM6      LDX   #0                       write out digits         LDA   DIGIT         BEQ   WM8WM7      LDA   TX1,X         JSR   COUT         INX         DBNE  DIGIT,WM7         BEQ   WM9WM8      LDA   #'0'         JSR   COUTWM9      LDA   DECIMAL                  write out decimal fraction         BEQ   EX1         LDA   #'.'         JSR   COUT         LDA   EFLAG         BNE   WM11WM10     LDA   EXP+1         BPL   WM11         LDA   #'0'         JSR   COUT         INC2  EXP         DBNE  DECIMAL,WM10         BEQ   EX1WM11     CPX   #15         BGE   WM12         LDA   TX1,X         JSR   COUT         INX         DBNE  DECIMAL,WM11         BEQ   EX1WM12     LDA   #' '         JSR   COUT         DBNE  DECIMAL,WM12;;  Write out the exponent;EX1      LDA   EFLAG                    skip if fixed point         BEQ   WT1         LDA   #' '                     write the header         JSR   COUT         LDA   #'E'         JSR   COUT         LDA   #' '                     write the sign         LDX   EXP+1         BPL   EX2         SUB2  #0,EXP,EXP         LDA   #'-'EX2      JSR   COUT         MOVE  EXP,SYSS1                write the exponent         LA    SYSS2,100         JSR   SYSDIV2         LDA   SYSS1         ORA   #'0'         JSR   COUT         MOVE  SYSS1+2,SYSS1         LA    SYSS2,10         JSR   SYSDIV2         LDA   SYSS1         ORA   #'0'         JSR   COUT         LDA   SYSS1+2         ORA   #'0'         JSR   COUT;;  Write the string to the output device.;WT1      SEC                            write leading blanks needed to right         LDA   FORMAT                    justify in the output field         SBC   CCHAR         BCC   WT2         TAX         BEQ   WT2         JSR   SYSPRBLWT2      LDY   #1                       write the numberWT3      LDA   SYSLINE,Y         JSR   SYSCOUT         INY         DBNE  CCHAR,WT3         RTS;..............................................................;;                                                              ;;  COUT - Output a character to the number string              ;;                                                              ;;..............................................................;;COUT     STX   TX         LDX   CCHAR         STA   SYSLINE+1,X         INC   CCHAR         BNE   CT1         DEC   CCHARCT1      LDX   TX         RTS;..............................................................;;                                                              ;;  Data area                                                   ;;                                                              ;;..............................................................;;CCHAR    DS    1                        current character pointerDECIMAL  DS    1                        number of fraction digits to outputDIGIT    DS    1                        number of digits to outputEFLAG    DS    1                        exponent flagEXP      DS    2                        decimal exponentFLG      DS    1                        < 1 flagFORMAT   DS    1                        size of the output fieldINF      DC    C'infinity'LCNT     DS    1                        loop counterTX       DS    1                        temp X register         DC    R'SYSUNPD'         END         APPEND DP.1