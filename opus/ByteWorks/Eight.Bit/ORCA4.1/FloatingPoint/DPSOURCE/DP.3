******************************************************************  SYSCMPD - Double Precision Compare**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - unpacked first argument*        SYSS2 - unpacked second argument**  OUTPUTS:*        C - set if SYSS1 >= SYSS2*        Z - set if SYSS1 = SYSS2******************************************************************SYSCMPD  START         LDA   #FZERO                   check for cases involving zero         BIT   SYSS1         BEQ   CP1         BIT   SYSS2         BEQ   CP4         LDA   #0         CMP   #0         RTSCP1      BIT   SYSS2         BNE   CP2         LDA   #FINF                    check for cases involving infinity         BIT   SYSS1         BEQ   CP3         BIT   SYSS2         BNE   CP5CP2      LDA   SYSS1         AND   #$80         STA   SYSE1         LDA   #1         CMP   SYSE1         RTSCP3      BIT   SYSS2         BEQ   CP5CP4      LDA   SYSS2         AND   #$80         CMP   #1         RTSCP5      LDA   SYSS1                    handle the case of oposite signs         EOR   SYSS2         BEQ   CP6         LDA   SYSS1         AND   #$80         STA   TEMP         LDA   SYSS2         AND   #$80         CMP   TEMP         RTSCP6      LDA   SYSS1                    positive compare         BMI   CP9         LDX   #1CP7      LDA   SYSS1,X         CMP   SYSS2,X         BNE   CP8         INX         CPX   #LUDP         BNE   CP7CP8      RTSCP9      LDX   #1                       negative compareCP10     LDA   SYSS2,X         CMP   SYSS1,X         BNE   CP8         INX         CPX   #LUDP         BNE   CP10         RTSTEMP     DS    1         END******************************************************************  SYSPAKD - Pack Double Precision Number**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        MR0 - address of unpacked number*        MR2 - address to place packed number******************************************************************SYSPAKD  START         MOVE  {MR0},TX,#LUDP           place number in local area         LDA   TX                       check for infinity and zero         AND   #FZERO         BNE   PK6         LDA   TX         AND   #FINF         BNE   PK2         LDA   TX+9                     round the number         AND   #%00000100         BEQ   PK3         CLC         LDA   TX+9         ADC   #%00001000         STA   TX+9         BCC   PK3         LDX   #8PK1      INC   TX,X         BNE   PK3         DBNE  X,PK1OVFL     FERR  #FERR3                   overflowPK2      MOVE  INF,TX+1,#LPDP           result is infinity         JMP   PK10PK3      LDA   TX+1                     check for exponent errors         AND   #%01111100         BEQ   PK4         CMP   #%01111100         BNE   PK5PK4      ASL   A         EOR   TX+1         BMI   PK7PK5      LDA   TX+1                     exponent error         BMI   OVFL         FERR  #FERR4                   underflowPK6      MOVE  ZERO,TX+1,#LPDP          result is zero         JMP   PK10PK7      LDA   TX+1                     set the highest exponent bit         EOR   #%00000100         STA   TX+1         ASL   TX+3                     combine exponent and mantissa         LSR   TX+1         ROR   TX+2         ROR   TX+3                     byte align the result         LDY   #5PK8      LDX   #LUDP-1PK9      ROL   TX,X         DBNE  X,PK9         DBNE  Y,PK8PK10     ASL   TX+1                     set the sign         ASL   TX         ROR   TX+1         MOVE  TX+1,{MR2},#LPDP         save the result         RTSTX       DS    LUDPINF      DC    H'FF F0'ZERO     DC    D'0'         END******************************************************************  SYSSGND - Double Precision Sign**  Maps numbers as follows:**        INPUT      OUTPUT**        <0         -1*        0          0*        >0         1**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  OUTPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa******************************************************************SYSSGND  START         USING SYSCOM         LDA   SYSS1                    quit if input is 0         AND   #$40         BNE   RTS         MOVE  ONE+1,SYSE1,#LUDP-1      move in the mask         LDA   SYSS1                    set the sign         AND   #$80         STA   SYSS1RTS      RTS         END******************************************************************  SYSSQRD - Double Precision Square Root**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  OUTPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  NOTES:*        1) Developed from Cody, pp 17-34*        2) Negative arguments return -SQRT(-X)*        3) SQRT(inf)=inf*        4) Uses SYSDIVD, SYSADDD, SYSPOLD******************************************************************SYSSQRD  START         USING SYSCOM         DC    R'SYSCOM';;  Exception and special case handling;         LDA   SYSS1                    check for negative argument         BPL   SC1         FERR  #FERR1SC1      AND   #$40                     check for SQRT(0)         BNE   RTSSC2      LDA   SYSS1                    check for SQRT(inf)         AND   #$20         BEQ   IN1         FERR  #FERR1RTS      RTS;;  Initialization;IN1      LDA   SYSE1                    initialize and save the exponent         EOR   #$80         STA   TX3         LM    TX3+1,SYSE1+1         LM    SYSE1+1,#$FF         LM    SYSE1,#$7F         MOVE  SYSS1,TX1,#LUDP          save the starting number         LA    WR0,C1                   estimate the answer         LM    WR2,#1         JSR   SYSPOLD;;  Iterate to a solution;         LM    WR3,#4IT1      LDX   #LUDP-1IT2      LDA   SYSS1,X         STA   TX2,X         STA   SYSS2,X         LDA   TX1,X         STA   SYSS1,X         DBPL  X,IT2         JSR   SYSDIVD         MOVE  TX2,SYSS2,#LUDP         JSR   SYSADDD         LDA   SYSE1+1         BNE   IT3         DEC   SYSE1IT3      DEC   SYSE1+1         DBNE  WR3,IT1;;  Compute the exponent;         LDA   TX3+1                    skip if exponent is even         ROR   A         BCS   CE1         MOVE  C3,SYSS2,#LUDP           handle odd exponent         JSR   SYSMULD         LDA   TX3+1         BNE   CE0         DEC   TX3CE0      DEC   TX3+1CE1      LDA   TX3                      EXP = EXP/2         ASL   A         ROR   TX3         ROR   TX3+1         LDA   TX3         EOR   #$80         STA   SYSE1         LM    SYSE1+1,TX3+1         RTS;;  Constants Used;C1       DC    D'0.59016'         DC    D'0.41731'C3       DC    H'00 7FFE B504F333 F9DE65'         DC    R'SYSSUBD'         END******************************************************************  SYSPOLD - Double Precision Polynomial**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa*        WR0 - address of table of coefficients in packed*              format*        WR2 - order of the polynomial**  OUTPUTS:*        SYSS1 - sign and flags*        SYSE1 - exponent*        SYSM1 - mantissa**  NOTES:*        1) Uses SYSMULD and SYSADDD******************************************************************SYSPOLD  START         MOVE  SYSS1,FX,#LUDP           save argument         UNPACKD {WR0},SYSS1            unpack high coefficientDP1      MOVE  FX,SYSS2,#LUDP           multiply current total by the         JSR   SYSMULD                   argument         ADD2  WR0,#LPDP                next coefficient         UNPACKD {WR0},SYSS2         JSR   SYSADDD         DBNE  WR2,DP1                  next turn         RTS         DC    R'SYSSUBD'FX       DS    LUDP         END******************************************************************  SYSUNPD - Unpack Double Precision Number**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        MR0 - address of packed number*        MR2 - address of unpacked number******************************************************************SYSUNPD  START         MOVE  {MR0},TX+2,#LPDP         place the number in a local area         LDA   TX+2                     set the sign         AND   #$80                      SEEEEEEE EEEEMMMM         STA   TX         LDX   #LPDP-1                  handle 0         LDA   TX+2         AND   #$7FUN0      ORA   TX+2,X         DBNE  X,UN0         TAX         BNE   UN0A         LDA   TX         ORA   #FZERO         STA   TX         JMP   UN6UN0A     LDA   TX+2                     handle infinity         AND   #$7F         CMP   #$7F         BNE   UN0C         LDA   TX+3         AND   #$F0         CMP   #$F0         BNE   UN0C         LDA   TX+3         AND   #$0F         LDX   #LPDP-2UN0B     ORA   TX+3,X         DBNE  X,UN0B         TAX         BNE   UN0C         LDA   TX         ORA   #FINF         STA   TX         JMP   UN6UN0C     BIT   TX+2                     place the exponent in TX+1, TX+2         BVS   UN1                       XXEEEEEE SEEEEEEE EEEEMMMM         LDA   #%00011111         BNE   UN2UN1      LDA   #%00100000UN2      STA   TX+1         LDY   #2                       shift left 2 bits to align to high byteUN3      LDX   #LPDP-1                   of exponent         ASL   TX+1+LPDP                 XXEEEEEE EEEEEEEE EEMMMMMMUN4      ROL   TX+1,X         DBNE  X,UN4         DBNE  Y,UN3         LDX   #LPDP                    shift left 1 more bit, including high         ASL   TX+1+LPDP                 byte of exponentUN5      ROL   TX,X                      XEEEEEEE EEEEEEEE EMMMMMMM         DBNE  X,UN5         ASL   TX+3                     shift one more bit, completing the         ROL   TX+2                      exponent         ROL   TX+1                      EEEEEEEE EEEEEEEE MMMMMMM0         SEC                            set the most significant mantissa bit         ROR   TX+3                      EEEEEEEE EEEEEEEE 1MMMMMMMUN6      MOVE  TX,{MR2},#LUDP           save the result         RTSTX       DS    LUDP         END         APPEND DP.4