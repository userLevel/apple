******************************************************************  SYSSUBD - Double Precision Subtract*  SYSADDD - Double Precision Add**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSS1 - sign and flags for first number*        SYSE1 - exponent for first number*        SYSM1 - mantissa for first number*        SYSS2 - sign and flags for second number*        SYSE2 - exponent for second number*        SYSM2 - mantissa for second number**  OUTPUTS:*        SYSS1 - sign and flags for result*        SYSE1 - exponent for result*        SYSM1 - mantissa for result**  NOTES:*        1) Entry at SYSFADD does an addition instead of a*           subtraction.*        2) Subtraction is performed by reversing the sign of*           SYSS2, then dropping into the add routine.******************************************************************SYSSUBD  START         LDA   SYSS2         EOR   #$80         STA   SYSS2SYSADDD  ENTRY;;  Exception and special case handling.;         LDA   #FINF                    check for inf cases         BIT   SYSS1         BEQ   SC1         BIT   SYSS2         BEQ   RTS         LDA   SYSS1         EOR   SYSS2         BPL   RTS         FERR  #FERR1                   inf + (-inf) as an errorRTS      RTSSC1      BIT   SYSS2         BNE   SC2         LDA   #FZERO                   check for cases involving zero         BIT   SYSS2         BNE   RTS         BIT   SYSS1         BEQ   IN1SC2      MOVE  SYSS2,SYSS1,#LUDP         RTS;;  Initialization;IN1      LDA   SYSE1                    if the exponent of FR1 is smaller         CMP   SYSE2                     than that of FR2, switch them         BNE   IN1A         LDA   SYSE1+1         CMP   SYSE2+1IN1A     BGE   IN3         LDX   #LUDP-1IN2      LDA   SYSS1,X         LDY   SYSS2,X         STA   SYSS2,X         STY   SYSS1,X         DBPL  X,IN2IN3      LDA   SYSS2                    quit if M2 = 0         AND   #FZERO         BNE   RTS         LDX   #2                       denormalize the numbersIN3A     LSR   SYSM1         ROR   SYSM1+1         ROR   SYSM1+2         ROR   SYSM1+3         ROR   SYSM1+4         ROR   SYSM1+5         ROR   SYSM1+6         LSR   SYSM2         ROR   SYSM2+1         ROR   SYSM2+2         ROR   SYSM2+3         ROR   SYSM2+4         ROR   SYSM2+5         ROR   SYSM2+6         DBNE  X,IN3A         LDA   SYSS1                    complement M1 if it is negative         BPL   IN4         LDX   #SYSM1         JSR   COMPIN4      LDA   SYSS2                    complement M2 if it is negative         BPL   ME0         LDX   #SYSM2         JSR   COMP;;  Match exponents by shifting.;ME0      SEC                            compute number of shifts needed         LDA   SYSE1+1         SBC   SYSE2+1         STA   SYSE2+1         TAY         LDA   SYSE1         SBC   SYSE2         BNE   ME0A         TYA         BEQ   AD1         CMP   #56                      quit if number of shifts > 56         BLT   ME1ME0A     LDA   SYSM1         JMP   AD1AME1      MLSR  A,3                      shift right by full bytes, maintaining         BEQ   ME4                       sign bits         STA   SYSM1+8         SEC         LDA   #6         SBC   SYSM1+8         TAY         LDX   #6ME2      LDA   SYSM2,Y         STA   SYSM2,X         DEX         DBPL  Y,ME2         LDA   #0         LDY   SYSS2         BPL   ME3         LDA   #$FFME3      STA   SYSM2,X         DBPL  X,ME3ME4      LDA   SYSE2+1                  shift right bit by bit,         AND   #7                        maintaining the sign bit         BEQ   AD1         TAXME5      LDA   SYSM2         ASL   A         ROR   SYSM2         ROR   SYSM2+1         ROR   SYSM2+2         ROR   SYSM2+3         ROR   SYSM2+4         ROR   SYSM2+5         ROR   SYSM2+6         DBNE  X,ME5;;  Add the mantissas;AD1      CLC                            add the mantissas         LDA   SYSM1+6         ADC   SYSM2+6         STA   SYSM1+6         LDA   SYSM1+5         ADC   SYSM2+5         STA   SYSM1+5         LDA   SYSM1+4         ADC   SYSM2+4         STA   SYSM1+4         LDA   SYSM1+3         ADC   SYSM2+3         STA   SYSM1+3         LDA   SYSM1+2         ADC   SYSM2+2         STA   SYSM1+2         LDA   SYSM1+1         ADC   SYSM2+1         STA   SYSM1+1         LDA   SYSM1         ADC   SYSM2         STA   SYSM1AD1A     BPL   AD2                      complement and save the sign if the         LDX   #SYSM1                    result is negative         JSR   COMP         LM    SYSS1,#$80         BNE   NM1AD2      LM    SYSS1,#0                 set sign for positive result;;  Normalize the result;NM1      LDX   #2                       handle prenormalizationNM2      LDA   SYSM1         BPL   NM3         INC   SYSE1+1         BNE   NM4         INC   SYSE1         BNE   NM4ERR3     FERR  #FERR3NM3      CLC         JSR   SYSROLD2NM4      DBNE  X,NM2         LDA   SYSM1+6                  check for 0         ORA   SYSM1+5         ORA   SYSM1+4         ORA   SYSM1+3         ORA   SYSM1+2         ORA   SYSM1+1         ORA   SYSM1         BNE   NM5         LDA   SYSS1         ORA   #FZERO         STA   SYSS1RTS2     RTSNM5      LDA   SYSM1                    do standard normalization         BMI   RTS2         JSR   SYSROLD2         LDA   SYSE1+1         BNE   NM5A         DEC   SYSE1NM5A     DEC   SYSE1+1         LDA   SYSE1         ORA   SYSE1+1         BNE   NM5         BEQ   ERR3;;  COMP: complement a mantissa;COMP     SEC         LDA   #0         SBC   6,X         STA   6,X         LDA   #0         SBC   5,X         STA   5,X         LDA   #0         SBC   4,X         STA   4,X         LDA   #0         SBC   3,X         STA   3,X         LDA   #0         SBC   2,X         STA   2,X         LDA   #0         SBC   1,X         STA   1,X         LDA   #0         SBC   0,X         STA   0,X         RTS         DC    R'SYSROLD'         END******************************************************************  SYSROLD - Roll M1 left 1 bit**  Rolls the first number left 1 bit and decriments the*  exponent.  The high bit of the mantissa is left in the*  carry flag.**  By Mike Westerfield*  Copyright (C) June 1984, All rights reserved*  By the Byte Works, Inc.**  INPUTS:*        SYSM1 - mantissa**  OUTPUTS:*        C - most significant bit of mantissa*        SYSM1 - updated**  NOTES:*        1) Entry at SYSROLD2 shifts the mantissa without*           changing the exponent******************************************************************SYSROLD  START         ASL   SYSM1+13         ROL   SYSM1+12         ROL   SYSM1+11         ROL   SYSM1+10         ROL   SYSM1+9         ROL   SYSM1+8         ROL   SYSM1+7SYSROLD2 ENTRY         ROL   SYSM1+6         ROL   SYSM1+5         ROL   SYSM1+4         ROL   SYSM1+3         ROL   SYSM1+2         ROL   SYSM1+1         ROL   SYSM1         RTS         END