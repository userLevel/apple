#define WhoAmI "LF2CR v1.01"#define _DEBUG_ 0/*******************************************************    LF2CR - Program to convert all <LF> characters in a file to <CR>'s.         V1.0  - Copyright by Peter Watson. Jan 1991.      V1.01 - Change name from LF.TO.CR to LF2CR. Remove code to fix changed              file size (not used in this prog!). Use ORCA/C 2.01. Nov 93                     Compiled under ORCA/C V2.01   ********************************************************/#include <types.h>#include <stdio.h>#include <stdlib.h>#include <errno.h>#include <string.h>#include <prodos.h>#include <shell.h>#include <orca.h>#define BUFSIZE 8192L          /* Size of I/O buffer              */extern int STOP_PAUSE(void);   /* Function from PAW.LIB           */                               /* Allows '<OpenApple>-.' to exit  */long convert(char s[],long i); /* Convert <LF> chars to <CR>      */char *Licence[] = "This program contains material from the ORCA/C ",                  "Run-Time Libraries, copyright 1987-1993 ",                  "by Byte Works, Inc. Used with permission.";#pragma lint -1char buffer[BUFSIZE];          /* File i/o buffer                 */char fileName[FILENAME_MAX];   /* Filename buffer                 */struct {char *namePtr;         /* Pointer to the pathname         */        int   flags;           /* Flags: '?' valid; use all files */        } WildParm = {NULL,0}; /* INIT_WILDCARD parm list         */FileRec Info_Parm = {NULL};    /* GetFileInfo parm list           */long block,                    /* Block number we are reading     */     bytes;                    /* Number of output bytes written  */int  numread, numwrite;        /* Number of bytes read / to write */boolean Found_One,             /* Did we find 'any' files?        */        standAlone;            /* Are we running under APW shell? */int main(int argc,char *argv[]){   FILE *fptr;                 /* File we are processing */   char ch;   int  err;                   /* Work variables         */   setbuf(stdout,NULL);        /* Defeat buffering for screen messages */   printf("\n%s - Copyright 1993 by Peter Watson and Byte Works, Inc.\n\n",\          WhoAmI);   WildParm.namePtr = fileName;   standAlone = (argc == 0 || strncmp(shellid(),"BYTEWRKS",8)!=0);#if _DEBUG_   printf("Argc = %d, standAlone = %d\n",argc,standAlone);#endifGet_File_Name:   if (standAlone || argc < 2)  {       printf("Name of file to convert? ");       gets(fileName);       if (!strlen(fileName))           exit(0);   } else       strncpy(fileName,argv[1],sizeof(fileName)-1L);   strcpy(fileName,c2pstr(fileName));   if (!standAlone)  {                         /* If running under ORCA */       INIT_WILDCARD(&WildParm);       if (toolerror())  {           err = toolerror();           printf("\n");           ERROR(&err);                        /* Print an error message */           exit(err);           }       NEXT_WILDCARD(&WildParm.namePtr);       }   Found_One = FALSE;/*******************************************************\ Main file processing loop\*******************************************************/   while (fileName[0] != '\0')  {       Found_One = TRUE;       Info_Parm.pathname = fileName;       GET_FILE_INFO(&Info_Parm);              /* Get file details */       if ((Info_Parm.storageType > 3) ||      /* Can't handle resources */          !(Info_Parm.fAccess & P_WRITE_ENABLE)) {               printf("Access not allowed to %p\n",fileName);               goto Next_File;       }       strcpy(fileName,p2cstr(fileName));       printf("Processing file %s . ",fileName);       if ((fptr = fopen(fileName,"rb+")) == NULL)  {           perror("\nUnable to open file\n");    /* Print message */           exit(errno);       }       block = bytes = 0;       do  {           #if _DEBUG_             printf("Pos1=%ld, ",ftell(fptr));           #endif           if (fseek(fptr,block*BUFSIZE,SEEK_SET)) {                                                 /* Position file ptr   */               err = errno;               perror("\nSeek error! ");               fclose(fptr);               exit(err);           }           numread = fread(buffer,1L,BUFSIZE,fptr);/* Read next block   */           printf(". ");                         /* Keep the user amused*/           numwrite = convert(buffer,numread);   /* Do the conversion   */           fseek(fptr,bytes,SEEK_SET);           /* Reposition file ptr */                                                 /* and write new block */           #if _DEBUG_             printf("Pos2=%ld, ",ftell(fptr));           #endif           if (fwrite(buffer,1L,(long)numwrite,fptr) != numwrite)  {               err = errno;               perror("\nError writing! ");               fclose(fptr);               exit(err);           }           bytes += numwrite;           block++;                   /* Next block */       } while (numread == BUFSIZE);  /* Check that EOF not reached */       fclose(fptr);Next_File:       printf("\n");       if (standAlone ||               /* If not running under APW or */           STOP_PAUSE())               /* user pressed <OpenApple>-.  */           break;       NEXT_WILDCARD(&WildParm.namePtr);   } /* While there are more wildcard filenames */   if (!Found_One)       printf("No file found!\n");   if (standAlone || argc < 2)           /* If we are in prompting mode */       goto Get_File_Name;   printf("\n");} /* main *//*******************************************************\ Subroutine to convert file contents by changing <LF>'s to <CR>'s This routine is based on a more general routine where the number of input bytes may NOT equal the number of output bytes.\*******************************************************/long convert(char buffer[],long amount)/*   Convert - Change all <LF> (0x0A) characters in the buffer to <CR> (0x0D)*/{   int  i;   char ch;   for (i=0; i<amount; i++)       if (buffer[i] == '\n')  {      /* <LF> - change to <CR>           */           buffer[i] =  '\r';           }   return(amount);                    /* New 'numread' value now required*/} /* Convert */