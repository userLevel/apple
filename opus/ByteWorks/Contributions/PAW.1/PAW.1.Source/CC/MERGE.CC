#define WhoAmI "MERGE v1.0  -  Copyright 1991 by Peter Watson and ByteWorks"/**********************************************//*                                            *//* MERGE - Merge one file into another, by    *//*         overlaying file 1 on file 2 at the *//*         specified offset (default = EOF).  *//*         The second file will be created if *//*         it does not exist.                 *//*                                            *//*  Syntax:                                   *//*         MERGE small_file big_file {offset} *//*                                            *//*         'offset' specifies where to start  *//*         overwriting the output file. It    *//*         may be decimal or hexadecimal.     *//*                                            *//*         P. Watson, Jan 1991.               *//*                                            *//* Warning:                                   *//*         The new file size may equal the    *//*         SUM of the old sizes due to the    *//*         larger file no longer being a      *//*         'sparse' file.                     *//*                                            *//*         Compiled under ORCA/C V1.1         *//*                                            *//**********************************************/#include <stdio.h>#include <stdlib.h>#include <string.h>#include <errno.h>#include <ctype.h>#include <types.h>#define SIZE 0x4000        /* The size of the block read/writen to disk    */char *Licence[] = "This program contains material from the ORCA/C ",                  "Run-Time Libraries, copyright 1987-1989 ",                  "by Byte Works, Inc. Used with permission.";main(argc,argv)int argc;char *argv[];{   FILE *fp_in,        *fp_out;   long START;   int  i,numread;   char *buffer;           /* Pointer to storage of the block read/written */   boolean APPEND;   setbuf(stdout,NULL);    /* Defeat buffering for 'in progress' messages  */   printf("%s\n",WhoAmI);   if (argc<3 || argc>4) {    /* Check command syntax */       fprintf(stderr,"Usage: %s infile outfile {offset (default=EOF)}",argv[0]);       exit(1);   }   if (!strcmp(argv[1],argv[2]))  {         /* same file? */       fprintf(stderr,"Input and output files must be different!");       exit(1);   }/* The fourth parameter, if present, is the starting offset */   APPEND = true;          /* Default to append mode */   if (argc == 4)  {       APPEND = false;       if (*argv[3] == '$')  {              /* hex format      */           for (i=1; i<strlen(argv[3]); i++)               if (!isxdigit(argv[3][i]))  {                   printf("Invalid hex character in 'offset' parameter!");                   exit(1);               }           sscanf(&argv[3][1],"%lx",&START);/* Convert to binary */       }       else  {                              /* decimal format    */           for (i=0; i<strlen(argv[3]); i++)               if (!isdigit(argv[3][i]))  {                   printf("Invalid decimal character in 'offset' parameter!");                   exit(1);               }           START = atol(argv[3]);           /* Convert to binary */       }   }/* Get a memory buffer */buffer = (char *)malloc(SIZE);/* Open the input file */   if ((fp_in=fopen(argv[1],"rb")) == NULL)  {         /* Open the file */       fprintf(stderr,"Cannot open input file %s !",argv[1]);       goto closeOut;   }/* Open the output file for append. Position the file pointer, if necessary  */   printf("Merging %s into %s ",argv[1],argv[2]);   if ((fp_out=fopen(argv[2],"ab")) == NULL)  {    /* Open the file */       fprintf(stderr,"\nCannot open output file %s !",argv[2]);       goto closeOut;   }   if (!APPEND)  {         /* Not appending */       if (fseek(fp_out,START,SEEK_SET))  {           fprintf(stderr,"\nError %d seeking in file %s !",errno,argv[2]);           goto closeOut;       }       printf("at $%lX ",START);   }   printf(". . . ");/* Merge the input file into the output file */   do  {       printf(". ");                           /* Keep the user amused */       numread = fread(buffer,1,SIZE,fp_in);   /* Read the next block  */       if (numread)           if (fwrite(buffer,1,numread,fp_out) != numread)  {               fprintf(stderr,"Error writing to %s !",argv[2]);               goto closeOut;           }   } while (numread == SIZE);      /* Check that end of file not reached */   printf("\nSuccess  !");closeOut:   fclose(fp_in);   fclose(fp_out);   free(buffer);} /* End of main */