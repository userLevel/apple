         mcopy ascii.mac	copy  2/ainclude/e16.event         gen   on;................................................................;; ASCII - CDA to display the ASCII character set (including MouseText).;;         Copyright by Peter Watson, April 1989.;;         v1.02 - Handle console driver and event manager properly. Sep 92;................................................................         longa on         longi onASCII    start         gblb  &CDA         gblc  &VER&CDA     setb  1                        1 = Assemble as a CDA&VER     setc  '1.02'                   Program version number; Direct page equatesRow      equ   0                                       Work countersCol0     equ   2Col1     equ   4Col2     equ   6Col3     equ   8Col4     equ   10Col5     equ   12Col6     equ   14Col7     equ   16         aif   .NOT.&CDA,.notCDA1;................................................................;; CDA Header         str   'ASCII Table'            CDA title         dp    A_Start                  Startup entry point         dp    A_End                    Shutdown entry point.notCDA1;................................................................;; Main programA_Start  anop         phb                            Save data bank         phk         plb                            Data bank = Program bank; Initialise the text environment (avoid console driver wierdness)         pha		Result space         pha        ~GetOutGlobals        ~SetOutGlobals #127,#0         pha		Result space         pha         pha        ~GetOutputDevice        ~SetOutputDevice #1,#3	Pascal in slot 3        ~InitTextDev #1	Initialise 'output' device; Get event manager status for correct keypress handling later         pha                            Result space        ~EMStatus         pl2   eventFlag                Store Event Manager status   ; Initialise variables (remember, #'01' will print as '10'!)         stz   Row                      Start with row zero         lda   #'''@'                   First MouseText character, and quote         sta   Col0         lda   #'''P'                   17th MouseText character, and quote         sta   Col1         ldx   #'02'         stx   Col2         inx         stx   Col3         inx         stx   Col4         inx         stx   Col5         inx         stx   Col6         inx         stx   Col7;................................................................;; Clear the screen, then begin drawing the (MouseText) title & box for our data         writeln  Setup                 Seems to work better on its own line         writestr TitleMsg;................................................................;; Write the 16 data lines, each consisting of 8 columns (2 MouseText, 6 char)DataLoop anop         writestr Left                  Left hand border         lda   Col0         jsr   WriteMtxt                Write this field         sta   Col0         writestr Middle1               Special - use quote, not '$'         lda   Col1         jsr   WriteMtxt                Write this field         sta   Col1         writestr Middle         lda   Col2         jsr   WriteChar                Write this field         sta   Col2         writestr Middle         lda   Col3         jsr   WriteChar                Write this field         sta   Col3         writestr Middle         lda   Col4         jsr   WriteChar                Write this field         sta   Col4         writestr Middle         lda   Col5         jsr   WriteChar                Write this field         sta   Col5         writestr Middle         lda   Col6         jsr   WriteChar                Write this field         sta   Col6         writestr Middle         lda   Col7         jsr   WriteChar                Write this field         sta   Col7         writestr Right                 Right hand border; Increment counter for next line         inc   Row         lda   Row         cmp   #$10                     Done 16 rows yet?         bge   DoBottom                 Yes, finish off the box         brl   DataLoop                 Else do another data line;................................................................;; Write the bottom linesDoBottom anop         writeln  Bottom                Bottom spacing line & bottom line proper;................................................................;; Wait for a keypress (use Event Manager, if active) - unless testing         aif   .NOT.&CDA,.notCDA2         lda   eventFlag         beq   noEvent                  Event Manager not active         pha		Result space        ~FlushEvents  #keyDownMask+autoKeyMask,#0	Flush key events	pla		Ignore resulteLoop   anop         pha		Result space        ~GetOSEvent #keyDownMask,#eventRec		Wait for a keydown event         pla         beq	eLoop	Ignore irrelevant events         pha		Result space        ~FlushEvents  #keyDownMask+autoKeyMask,#0	Flush extra key events	pla		Ignore result	bra	gotKey	noEvent	anop         shortm         lda   $E0C010                  Reset keyboard strobekeyLoop  lda   $E0C000                  Look for a keystroke         bpl   keyLoop         sta   $E0C010                  Reset keyboard strobe         longmgotKey	anop.notCDA2;................................................................;; Return to our caller;			Parms on stacks from initialisation        ~SetOutputDevice *,*        ~SetOutGlobals   *,*	         plbA_End    rtl                            Return to caller ( = CDA shutdown code);................................................................;; WriteMTxt - Subroutine to write a MouseText field in the Acc. to the screen.; =========   The character is then incremented.;; On entry, A = value to be printed in high byte, with a quote in the low byte; On exit,  A has had the high byte incremented.;;................................................................WriteMTxt anop         sta   MTxtMsg+1                Store into the message ('A' format)         shortm         sta   MTxtChar                 Store 'high' byte into the message         longm         pha         writestr MTxtMsg               Write it out         pla         inc   A         rtsMTxtMsg  dc    i1'4+4',c'?? ',i1'27,15'MTxtChar dc    c'?',i1'14,24'           '?? ?';................................................................;; Subroutine to write the char value of the hex data the Acc to the screen; and then increment the value.;; On entry, A = Two ASCII characters representing the hex value to be printed; On exit,  A has had the high byte incremented.;;................................................................WriteChar anop         sta   CharMsg+1                Store into the message         pha                            Save value         sta   IString         pea   0                        Result space        ~Hex2Int #IString,#2            Convert ASCII to integer format         pla                            Get result         sta   CharMsg+4                Store into the message (16 bits is OK!)         writestr CharMsg               Write it out         pla                            Retrieve value; Increment to next value         xba                            We are only interested in the high byte         inc   A                        Increment it         tax                            Save it         and   #$00FF                   Check for movement into 'A - F' range         cmp   #'9'+1                   Reached 'A' yet?         php                            Save answer         txa                            Retrieve value         plp                            Retrieve answer         bne   *+5         adc   #6                       Make into 'A'-F' (Carry is still set!)         xba                            Restore Acc         rtsCharMsg  str   '?? ?'         ds    1                        Overflow for 16 bit store at CharMsg+4Istring  ds    2                        Integer Math string;................................................................;; Data areas;;................................................................Eyeball  dc    c'&SYSNAME v&VER - Copyright by Peter Watson, &SYSDATE &SYSTIME'eventFlag ds	2			Event Manager active?eventRec  ds	16			Event record if it is; MouseText is used in some strings.  Will not print MouseText in column one!??; Chars used are 90='Z' (right aligned vertical), 95='_' (left aligned vertical); and 76='L' (overscore); Setup clears the screen and turns off the cursor for speedSetUp    dc    i1'3,18,6,12'                           80-cols, Cursor_Off, CLS; TitleMsg prints a title boxTitleMsg dc    i1'240+12'                              Chars + Control bytesTopTop   dc    c'  ',77c'_',c' '                       Top of titleTopMsg   dc    c' ',i1'27,15,90',21c' ',i1'14,24'      Inverse spaces         dc    c'  ASCII Table  -  by Peter Watson  '  (35 chars)         dc    i1'27,15',21c' ',i1'95,14,24'TopBot   dc    c' ',i1'27,15,90'                       Bottom of title         dc    77c'L',i1'95,14,24'; Constant fields within each data lineLeft     dc    i1'4+4,32,27,15,90,14,24',c' '''        "| '"Middle1  dc    i1'6',c'  |  '''                        "  |  '"Middle   dc    i1'6',c'  |  $'                         "  |  $"Right    dc    i1'2+4,32,27,15,95,14,24'               "|"; Bottom prints the required box bottom lines, and truns the cursor back onBottom   dc    i1'159+13'BotBlank dc    c' ',i1'27,15,90,14,24'                 '|'         dc    77c' ',i1'27,15,95,14,24'               '        |'BotBot   dc    c'  ',i1'27,15'                         Bottom of box         dc    77c'L',i1'14,24'SetDown  dc    i1'5'                                   Cursor_On; This table is the approximate layout of the printed table (# = inverse blank); _____________________________________________________________________________;Z#####################  ASCII Table  -  By Peter Watson  #####################Z;ZLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLZ;Z '@' M  |  'P' M  |  $20 A  |  $30 A  |  $40 A  |  $50 A  |  $60 A  |  $70 A Z;Z 'A' M  |  'Q' M  |  $21 B  |  $31 B  |  $41 B  |  $51 B  |  $61 B  |  $71 B Z;Z 'B' M  |  'R' M  |  $22 C  |  $32 C  |  $42 C  |  $52 C  |  $62 C  |  $72 C Z;Z                                                                             Z; LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL          end