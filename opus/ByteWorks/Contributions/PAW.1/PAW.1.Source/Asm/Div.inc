;................................................................;;      DIV;      ---;  Fast integer division subroutine;;  On entry, e = m = x = 0 (full native mode).  B, D, S, Acc = Don't care;            X = divisor (the bottom line);            Y = dividend (the top line);; On exit,   Answer in Acc; Remainder in Y; 'Carry' bit clear;            If X (divisor) = 0, then Acc = 0 and 'Carry' bit will be set;            B, D, S, X, e, m, x unchanged;; This code is public domain (based on code by Todd P. Whitesel).;;................................................................;;  NOTE: This is NOT a standalone program!;        ---------------------------------;;  To install in source code, add the following source line :-;;      APPEND DIV.inc                   (or manually cut & paste this source);;  Or ensure that this routine has been installed in a library (eg. PAW.LIB);;  Example of use :-;;        ldy   #22000;        ldx   #7;        jsl   DIV                      Get approximate value of pi...;        bcs   DivByZero                (Divide by zero error);        sta   answer                   ...in Acc;        sty   remainder;;................................................................         case    on         objcase on                     Need lowercase 'main' for 'C'DIV      start   main         longa   on                     Just for the assembler's sake         longi   on;................................................................;; Direct Page areas ('borrowed' from the caller)dividend equ   0divisor  equ   2;................................................................;; Start of the main routine;; Start by getting our stack and DP in order. (Assume m = x = 0); (We 'borrow' four bytes of DP by saving them on the stack);;................................................................         phb                            Save data bank address         phk         plb                            Localise the data bank register         phx                            Save register         pei   divisor                  Save DP value         pei   dividend                 Save DP value         stx   divisor         sty   dividend         sec                            Just in case 'divisor' = 0         txa                            Test for X = 0         beq   Done                     Exit early;................................................................;; Do the division         ldx   #16                      Check 16 bits         lda   #0         asl   dividend                 Eventually guarantees 'Carry' = 0divLoop  rol   a         cmp   divisor         bcc   nextBit         sbc   divisornextBit  rol   dividend         dex         bne   divLoop; 'dividend' now contains the result of the division; Acc contains the 'remainder'; 'Carry' bit is guaranteed to be clear!         tay                           Save 'remainder'         lda   dividend;................................................................;; Clean up and go homeDone     anop         plx                            Restore DP value         stx   dividend         plx                            Restore DP value         stx   divisor         plx                            Restore register         plb         rtl                            Return to our caller         end