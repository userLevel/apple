         mcopy speed.mac         gen   on;.......................................;; SPEED -  Shell utility to change the speed of a TransWarp card.;; Syntax:  SPEED [-T/N/S][-Q];;          -T = TransWarp speed;          -N = Normal GS speed (ie. 2.8 Mhz);          -S = Slow   GS speed (ie. 1.0 Mhz);          -Q = Quiet (Only error messages displayed);;          Parameters may be specified as 'words', eg. -TransWarp -Quiet.;          If no parameters are entered, the current speed will be displayed,;          along with instructions.;;         Copyright by Peter Watson, September 1991;;         v1.1 - Add -Quiet option. Sep 91.;.......................................         longa on         longi onSPEED    start         gblc  &VER&VER     setc  '1.1'                    Program versionParmPtr  equ   0 (long)                 Direct page pointer to cmd line; TransWarp special memory locationsTransWarpId    equ  $bcff00             Location of ID ('TWGS')GetTWInfo      equ  $bcff08             Returns with A=features, X=vers.GetMaxSpeed    equ  $bcff10             ObviousFreq2Index     equ  $bcff18             Converts numerical speed->indexGetCurSpeed    equ  $bcff20             ObviousGetCurISpeed   equ  $bcff28             Returns current speed index in XSetCurISpeed   equ  $bcff2c             Sets the speed from index in XDisableIRQLogic equ $bcff34             Kills IRQ interruptsEnableIRQLogic equ  $bcff38             Enables IRQ interruptsGetTWConfig    equ  $bcff3c             Returns info about the card;.......................................         phb         phk         plb         sty   ParmPtr                  Save parm address         stx   ParmPtr+2         stz   QFlag                    Default to issuing messages         lda   #-1         sta   SpeedVal                 Say we don't have a valid speed yet;................................................................;; Find a TransWarp GS, before we do anything else!;         lda   TransWarpId              Get two bytes         cmp   TWGSid                   Validate them         bne   GoBadId                  Oops, no TransWarp found!         lda   TransWarpId+2            Get two bytes         cmp   TWGSid+2                 Validate them         beq   GetParm                  All OK, go get any parametersGoBadId  brl   BadId;................................................................;; Find any parameters;GetParm  anop         lda   ParmPtr         ora   ParmPtr+2                Did we get a parm?         bne   GetParm2GoShow   anop         lda   SpeedVal                 Did we get a speed parm?         bpl   DoIt                     -1 means no speed parm         brl   ShowSpeed                No parms, display the current speedGetParm2 lda   #0                       Clear high byte for safety         shortm         ldy   #8                       Point past ID bytesFindBlnk anop         lda   [ParmPtr],y              Get current parm byte         beq   GoShow                   No parameter         iny                            Point to next char         cmp   #' '                     Find a blank         bne   FindBlnkGotBlank lda   [ParmPtr],y              Get current parm char         beq   GoShow                   No parameter         iny                            Point to next char         cmp   #' '                     Find a non-blank         beq   GotBlank; Found a parameter - of some sort         cmp   #'-'                     Switch character?         bne   ChkParm                  Yes, allow and ignore it         lda   [ParmPtr],y              Get 'real' parm char         inyChkParm  anop         and   #$DF                     Make upper case         cmp   #'S'                     'Slow' speed switch?         bne   NotS         ldx   #0                       Set to 'Slow'         stx   SpeedVal                 Save speed index         bra   FindBlnk                 Look for more parmsNotS     anop         cmp   #'N'                     'Normal' speed switch?         bne   NotN         ldx   #1                       Set to 'Normal'         stx   SpeedVal                 Save speed index         bra   FindBlnk                 Look for more parmsNotN     anop         cmp   #'T'                     'TransWarp' speed switch?         bne   NotT                     Yes, go do it         ldx   #2                       Set to 'TransWarp'         stx   SpeedVal                 Save speed index         bra   FindBlnk                 Look for more parmsNotT     anop         cmp   #'Q'                     'Quiet' mode switch?         bne   NotQ                     Yes, go do it         inc   QFlag                    Say we want deafening quiet         bra   FindBlnk                 Look for more parmsNotQ     anop         brl   BadParm                  Oh dear, an unknown parameter;................................................................;; Set the speed;DoIt     anop         longm         ldx   SpeedVal                 Get speed index value (0-2)         jsl   SetCurISpeed             From value in X reg;................................................................;; (Check and) Show the speed (if required);ShowSpeed anop         longm         lda   Qflag                    Are we running Quietly?         beq   OKtoTalk                 No         brl   NoHints                  Yes, skip messagesOKtoTalk anop         jsr   SayHello                 Announce ourselves         writestr #'The current speed is '         jsl   GetCurISpeed             Put value in X reg (0, 1, 2)         dex         bmi   Slow                     Slow speed?         beq   Normal                   Normal speed?High     writeln #'TransWarp'           TransWarp speed!         bra   ShowDoneSlow     writeln #'Slow'         bra   ShowDoneNormal   writeln #'Normal'ShowDone anop         lda   SpeedVal                 Did we get a valid parm?         bpl   NoHints                  No need to say how to change things         jsr   ValidParm                Describe the rulesNoHints  anop;................................................................;; Leave after a job well done;         lda   #0                       Nice return codeQuit     plb        _QUIT  QuitParm                 Shell will trap;................................................................;; Other routines;;................................................................SayHello anop         writeln HelloMsg               Announce ourselves         writeln         rtsBadId    anop         jsr   SayHello         writeln #'TransWarp GS not found!'         lda   #-1                      Bad return code         bra   QuitBadParm  anop         longm         jsr   SayHello         pha         writestr #'Unknown parameter ('         pla         writech                        Write the unknown character         writeln #')'         jsr   ValidParm                Show valid parameters         lda   #-1                      Bad return code         brl   Quit; Display the valid parametersValidParm anop         writeln         writeln #'Valid speed parameters are :'         writeln #'  T = TransWarp speed'         writeln #'  N = Normal GS speed (2.8 MHz)'         writeln #'  S = Slow   GS speed (1.0 MHz)'         writeln #'  <blank> to display speed only'         writeln #'  Q = Quiet (Only error messages)'         rts;................................................................;; Data areas;;................................................................HelloMsg str    'SPEED v&VER - Copyright 1991 by Peter Watson'Eyeball  dc    c'SPEED - Copyright by Peter Watson, &SYSDATE &SYSTIME'TWGSId   dc    c'TWGS'                  ID bytes for TransWarp GS cardSpeedVal ds    2                        -1  = Valid parm not found yet;                                       0-2 = Speed index valuesQFlag    ds    2                        0   = Issue messagesQuitParm dc    i4'0'                    Pathname of next appl         dc    i2'0'                    Flags (0 = don't return)         end