;................................................................;;      MULT8;      -----;  Fast 8-bit integer multiplication subroutine;;  On entry, e = m = x = 0 (full native mode).  B, D, S, Y = Don't care;            Acc, X = multiplicands;; On exit,   Answer in Acc; X destroyed;            B, D, S, Y, e, m, x unchanged;            Overflow is *NOT* detected!;; This code is public domain (based on code by Todd P. Whitesel).;;................................................................;;  NOTE: This is NOT a standalone program!;        ---------------------------------;;  To install in source code, add the following source line :-;;      APPEND MULT8.inc                  (or manually cut & paste this source);;  Or ensure that this routine has been installed in a library (eg. PAW.LIB);;  Example of use :-;;        lda   #123;        ldx   #456;        jsl   MULT8                    Do the multiplication;        sta   answer;;................................................................         case    on         objcase on                     Need lowercase 'main' for 'C'MULT8    start   main         longa   on                     Just for the assembler's sake         longi   on;................................................................;; Direct Page areas ('borrowed' from the caller)m        equ   0n        equ   2;................................................................;; Start of the main routine;; Start by getting our stack and DP in order. (Assume m = x = 0); (We 'borrow' four bytes of DP by saving them on the stack);;................................................................         phb                            Save data bank address         phk         plb                            Localise the data bank register         pei   m                        Save DP value         pei   n                        Save DP value         sta   m               stx   n       ;................................................................;; Do the multiplication        lda     #0        bra     m0mLoop   asl     nm0      lsr     m        bcc     noAdd        clc        adc     nnoAdd   bne     mLoop; result is in Acc;................................................................;; Clean up and go homeDone     anop         plx                            Restore DP value         stx   n                plx                            Restore DP value         stx   m               plb         rtl                            Return to our caller         end