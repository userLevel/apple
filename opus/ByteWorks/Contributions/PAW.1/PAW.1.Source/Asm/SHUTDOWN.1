         mcopy shutdown.mac         gen   on;................................................................;; SHUTDOWN - Call the GS/OS command OS_SHUTDOWN to power down.;            All files are flushed, and any 3.5" disks are ejected first.;            If the '-C' option is used, then a 'frigid' boot will be;            performed (which resets a RAM Disk, among other things).;;            SHUTDOWN [-C] [-R] where '-C' will perform a 'cold' boot.;                                     '-R' will perform an automatic restart.;;            Copyright by Peter Watson, December 1988;;            V1.1  - Use GSOS macros. Add EndSession call. March 1989.;            V1.11 - Check for GS/OS - hangs under P16. April 1989.;            V1.12 - Add various messages (none previously). April 1989.;            V1.2  - Add '-C' option. Remove 'Bye' msg. Nov 1989.;            V1.3  - Several minor bug fixes (Apple's and mine). CLOSE call;                    replaced by FLUSH. Added DeskShutDown call. Mar 1990.;            V1.4  - Add '-R' option. Apr 1995.;;................................................................         longa on         longi onParmPtr  gequ 0                         Direct page pointerSHUTDOWN start         gblc  &VER&VER     setc  '1.4'                    Program version         phk                            Push program bank         plb                            Data bank = program bank         sty   ParmPtr                  Save command...         stx   ParmPtr+2                            ...line pointer; Check to see if we got a command line         stz   ShutParm_shutDownFlag    Default to leaving power-up byte alone         txa         ora   ParmPtr                  Are we under the Shell?         beq   ParmDone                 No, so skip parm processing;................................................................;; Check to see if we got a valid option;;................................................................         ldy   #8                       Skip shell id (who cares here?)         shortm                         Use 1 byte Acc for simplicityFindSpc  anop	lda   [ParmPtr],Y              Skip the command         beq   ParmDone                 End of command line - no parameter         cmp   #' '                     Look for a blank         beq   FindParm         iny         bra   FindSpc                  Go look some moreNextParm anop         shortm                         Shrink the Acc again	iny		Skip previously found parm	inyFindParm anop	lda   [ParmPtr],Y              Find the operand         beq   ParmDone                 End of command line - no parameter         cmp   #' '                     Is it still a blank?         bne   TestParm                 Found something, check it out         iny         bra   FindParm                 Go look some moreTestParm anop         longm                          Restore full width Acc         lda   [ParmPtr],Y              Get the operand (2 bytes worth)         and   #$DFFF                   Convert option part to upper case         cmp   #'C-'                    '-C' option (chars reversed!)         bne   NotC                     No, check alternatives         lda   #$0002                   Bit 1 = 'Trash Mem Mngr powerup byte'         tsb   ShutParm_shutdownFlag    Set flag	bra	NextParm	Try for another parmNotC	anop         cmp   #'R-'                    '-R' option (chars reversed!)         bne   NotR                     No, check alternatives         lda   #$0001                   Bit 0 = 'Restart after shutdown'         tsb   ShutParm_shutdownFlag    Set flag	bra	NextParm	Try for another parmNotR	anopParmDone anop         longm                          16 bit Acc, in case we branched here;................................................................;; Check for GS/OS before going any further.  Under ProDOS 16,; the program hangs even though it shouldn't according to the documentation!;;................................................................        _GetVersionGS GetVParm          Get ProDOS version no.         bcs   GoQuit                   Leave early         lda   GetVParm_version         Get version word         and   #$7F00                   Isolate major release         cmp   #$0200                   Version 2 (GS/OS) or better?         bge   DoFlush                  Yes, soldier onGoQuit   anop         writeln #'&SYSNAME requires GS/OS'         lda   #$FFFF                   Flag error to shell         brl   DoQuit                   Leave early;................................................................;; Start by flushing all files, then ending any GSOS 'sessions' to ensure all; data is actually written - BEFORE we eject the disks.; Nb: We FLUSH, not CLOSE, to avoid potential problems with system resources.;;................................................................DoFlush  anop        _FlushGS      ZeroGS            Flush ALL open files;                                       Ignore errors        _SessionStatusGS StatParm       Get 'deferred write' session status         lda   StatParm_status          What is it?         beq   SessInact                Inactive!        _EndSessionGS Zero              End any 'deferred write' sessionsSessInact anop;................................................................;; Do a DeskShutDown call. Not theoretically required, but circumvents a; problem with SoftSwitch, which needs some program to have issued this; call at some stage. Of course, TEXT shells don't issue it very often!        _DeskShutDown                   No parameters, and no errors;................................................................;; Now look for and eject all 'ejectable' disks         lda   #$0001         sta   DInfParm_devNum          Initialise device number;................................................................;; Check for 'next' device, and get its characteristicsDevLoop  anop        _DInfoGS DInfParm         bcc   *+5         brl   DevErr                   Real error, or just last device;................................................................;; Now check whether this is an removable device - if so, eject it         lda   DInfParm_characteristics         and   #$0004                   Removable media?         beq   Next                     No, skip EJECT         lda   DInfParm_devNum         sta   DCtlParm_devNum          Put device number in DControl list        _DControlGS DCtlParm            Eject disk (if possible);................................................................;; Go look for another deviceNext     anop         inc   DInfParm_devNum          Next device number         bra   DevLoop                  Go again;................................................................;; Error during D_INFO call - usually just ignore, but $11 says to finish;;................................................................DevErr   anop         cmp   #$0011                   Invalid device (End of list)?         bne   Next                     No, go look for another device;                                       Else we've finished the loop;................................................................;; Finally call OS_ShutDown (which allows the user to restart/reboot the system);;................................................................        _OSShutdownGS ShutParm          Shut down the system; Should never drop through (unless GS/OS is 'busy'?)         pha                            Save error code         writeln #'ShutDown call failed!'         pla;................................................................;; Return to our caller (if ShutDown fails, not under GS/OS, etc)DoQuit   anop        _Quit QuitParm                  NB: MUST be Class 0 'Quit' call!!!;................................................................;; Data areas - Using standard APW macros, where possible;;................................................................Eyeball  dc    c'&SYSNAME - v&VER Copyright Peter Watson, &SYSDATE &SYSTIME'ZeroGS   dc    i'1'                     Used by several macros/lists as a parmZero     dc    i'0'GetVParm VersionRecGS 1                 pMMMMMMMmmmmmmmm (Prototype|Major|minor)StatParm SessionStatusRecGS 1,status=0  Session status: 0=inactive, 1=activeDInfParm DInfoRecGS 8,devName=DevName   Only want 8 fieldsDevName  dc    i2'35'                   GS/OS result buffer (macro is lousy!)         ds    2                        Length         ds    31                       Text (Max. length of a device name); DControl parameter block mapped by DAccessRecGS macro;DCtlParm DAccessRecGS 5,code=2,list=Zero,requestCount=0  Control code 2 = EJECTShutParm OSShutdownRecGS 1,shutdownFlag=0 Power down, leaving powerup byte alone;                                       (we may change this parameter)QuitParm dp    0                        Pathname         dc    i2'0'                    Flags (Return via Quit stack)         end