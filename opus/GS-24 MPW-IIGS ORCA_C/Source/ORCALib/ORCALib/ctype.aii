			case  on	seg   ''******************************************************************  CType - Character Types Library**  This code implements the tables and subroutines needed to*  support the standard C library CTYPES.**  July 1988*  Mike Westerfield**  Copyright 1988*  Byte Works, Inc.******************************************************************;	INCLUDE	'equates.asm'******************************************************************  This file contains constant values defined in the C interfaces*  that are also used in the assembly language portion of the*  libraries.*****************************************************************;;  error numbers;EDOM     equ   1                        ;domain errorERANGE   equ   2                        ;# too large, too small, or illegalENOMEM   equ   3                        ;Not enough memoryENOENT   equ   4                        ;No such file or directoryEIO      equ   5                        ;I/O errorEINVAL   equ   6                        ;Invalid argumentEBADF    equ   7                        ;bad file descriptorEMFILE   equ   8                        ;too many files are openEACCES   equ   9                        ;access bits prevent the operationEEXIST   equ   10                       ;the file existsENOSPC   equ   11                       ;the file is too large;;  masks for the __ctype array;_digit   equ   $01                      ;['0'..'9']_upper   equ   $02                      ;['A'..'Z']_lower   equ   $04                      ;['a'..'z']_control equ   $08                      ;[chr(0)..chr(31),chr(127)]_punctuation equ  $10                   ;[' ','!'..'/',':'..'@','['..'`','{'..'~']_space   equ   $20                      ;[chr(9)..chr(13),' ']_hex     equ   $40                      ;['0'..'9','a'..'f','A'..'F']_print   equ   $80                      ;[' '..'~'];;  masks for the __ctype2 array;_csym    equ   $01                      ;['0'..'9','A'..'Z','a'..'z','_']_csymf   equ   $02                      ;['A'..'Z','a'..'z'.'_']_octal   equ   $04                      ;['0'..'7'];;  signal numbers;SIGABRT  equ   1SIGFPE   equ   2SIGILL   equ   3SIGINT   equ   4SIGSEGV  equ   5SIGTERM  equ   6;;  The FILE record;*                                       ;flags*                                       ;-----_IOFBF   equ   $0001                    ;full buffering_IONBF   equ   $0002                    ;no buffering_IOLBF   equ   $0004                    ;flush when a \n is written_IOREAD  equ   $0008                    ;currently reading_IOWRT   equ   $0010                    ;currently writing_IORW    equ   $0020                    ;read/write enabled_IOMYBUF equ   $0040                    ;buffer was allocated by stdio_IOEOF   equ   $0080                    ;has an EOF been found?_IOERR   equ   $0100                    ;has an error occurred?_IOTEXT  equ   $0200                    ;is this file a text file?_IOTEMPFILE equ  $0400                  ;was this file created by tmpfile()?*                                       ;record structure*                                       ;----------------FILE_next equ  0                        ;disp to next pointer (must stay 0!)FILE_ptr  equ  FILE_next+4              ;next location to write toFILE_base equ  FILE_ptr+4               ;first byte of the bufferFILE_end  equ  FILE_base+4              ;end of the file bufferFILE_size equ  FILE_end+4               ;size of the file bufferFILE_cnt  equ  FILE_size+4              ;# chars that can be read/writen to bufferFILE_pbk  equ  FILE_cnt+4               ;put back characterFILE_flag equ  FILE_pbk+2               ;buffer flagsFILE_file equ  FILE_flag+2              ;GS/OS file IDsizeofFILE equ  FILE_file+2             ;size of the recordBUFSIZ   equ   1024                     ;default file buffer size_LBUFSIZ equ   255                      ;line buffer sizeL_tmpnam equ   9                        ;size of a temp nameTMP_MAX  equ   10000                    ;# of uniq temp names;;  Seek codes for fseek;SEEK_CNT equ   0                        ;seek from start of fileSEEK_CUR equ   1                        ;seek from current positionSEEK_END equ   2                        ;seek from end of file;;  Values for fcntl.h;OPEN_MAX equ   30                       ;files in the file arrayF_DUPFD  equ   1                        ;dup file flag (fcntl)O_RDONLY equ   $0001                    ;file is read onlyO_WRONLY equ   $0002                    ;file is write onlyO_RDWR   equ   $0004                    ;file is read/writeO_NDELAY equ   $0008                    ;not usedO_APPEND equ   $0010                    ;append to file on all writesO_CREAT  equ   $0020                    ;create a new file if neededO_TRUNC  equ   $0040                    ;erase old fileO_EXCL   equ   $0080                    ;don't create a new fileO_BINARY equ   $0100                    ;file is binary;;  Misc.;EOF      equ   -1                       ;end of file characterstdinID  equ   -1                       ;standard in file IDstdoutID equ   -2                       ;standard out file IDstderrID equ   -3                       ;error out file ID		EXPORT	CType    CType    PROC                          ;dummy routine		ENDP******************************************************************  __ctype - character types array**  This data area defines an array of bit masks.  It is used*  to test for character types.  For example, to determine if*  a character is alphabetic, and the uppercase and lowercase*  bit masks with the array element for ;the character being*  tested.  If the result is non-zero, the character is*  alphabetic.******************************************************************		EXPORT	__ctype  __ctype  PROC	DC.B	0	;                                EOF	DC.B	_control	;                                $00	DC.B	_control	;                                $01	DC.B	_control	;                                $02	DC.B	_control	;                                $03	DC.B	_control	;                                $04	DC.B	_control	;                                $05	DC.B	_control	;                                $06	DC.B	_control	;                                $07	DC.B	_control	;                                $08	DC.B	_control+_space	;                                $09	DC.B	_control+_space	;                                $0A	DC.B	_control+_space	;                                $0B	DC.B	_control+_space	;                                $0C	DC.B	_control+_space	;                                $0D	DC.B	_control	;                                $0E	DC.B	_control	;                                $0F	DC.B	_control	;                                $10	DC.B	_control	;                                $11	DC.B	_control	;                                $12	DC.B	_control	;                                $13	DC.B	_control	;                                $14	DC.B	_control	;                                $15	DC.B	_control	;                                $16	DC.B	_control	;                                $17	DC.B	_control	;                                $18	DC.B	_control	;                                $19	DC.B	_control	;                                $1A	DC.B	_control	;                                $1B	DC.B	_control	;                                $1C	DC.B	_control	;                                $1D	DC.B	_control	;                                $1E	DC.B	_control	;                                $1F	DC.B	_space+_print+_punctuation	;' '	DC.B	_punctuation+_print	;                                !	DC.B	_punctuation+_print	;                                "	DC.B	_punctuation+_print	;                                #	DC.B	_punctuation+_print	;                                $	DC.B	_punctuation+_print	;                                %	DC.B	_punctuation+_print	;                                &	DC.B	_punctuation+_print	;                                '	DC.B	_punctuation+_print	;                                (	DC.B	_punctuation+_print	;                                )	DC.B	_punctuation+_print	;                                *	DC.B	_punctuation+_print	;                                +	DC.B	_punctuation+_print	;                                ,	DC.B	_punctuation+_print	;                                -	DC.B	_punctuation+_print	;                                .	DC.B	_punctuation+_print	;                                /	DC.B	_digit+_hex+_print	;                                0	DC.B	_digit+_hex+_print	;                                1	DC.B	_digit+_hex+_print	;                                2	DC.B	_digit+_hex+_print	;                                3	DC.B	_digit+_hex+_print	;                                4	DC.B	_digit+_hex+_print	;                                5	DC.B	_digit+_hex+_print	;                                6	DC.B	_digit+_hex+_print	;                                7	DC.B	_digit+_hex+_print	;                                8	DC.B	_digit+_hex+_print	;                                9	DC.B	_punctuation+_print	;                                :	DC.B	_punctuation+_print	;                                ;	DC.B	_punctuation+_print	;                                <	DC.B	_punctuation+_print	;                                =	DC.B	_punctuation+_print	;                                >	DC.B	_punctuation+_print	;                                ?	DC.B	_punctuation+_print	;                                @	DC.B	_upper+_hex+_print	;                                A	DC.B	_upper+_hex+_print	;                                B	DC.B	_upper+_hex+_print	;                                C	DC.B	_upper+_hex+_print	;                                D	DC.B	_upper+_hex+_print	;                                E	DC.B	_upper+_hex+_print	;                                F	DC.B	_upper+_print	;                                G	DC.B	_upper+_print	;                                H	DC.B	_upper+_print	;                                I	DC.B	_upper+_print	;                                J	DC.B	_upper+_print	;                                K	DC.B	_upper+_print	;                                L	DC.B	_upper+_print	;                                M	DC.B	_upper+_print	;                                N	DC.B	_upper+_print	;                                O	DC.B	_upper+_print	;                                P	DC.B	_upper+_print	;                                Q	DC.B	_upper+_print	;                                R	DC.B	_upper+_print	;                                S	DC.B	_upper+_print	;                                T	DC.B	_upper+_print	;                                U	DC.B	_upper+_print	;                                V	DC.B	_upper+_print	;                                W	DC.B	_upper+_print	;                                X	DC.B	_upper+_print	;                                Y	DC.B	_upper+_print	;                                Z	DC.B	_punctuation+_print	;                                [	DC.B	_punctuation+_print	;                                \	DC.B	_punctuation+_print	;                                ]	DC.B	_punctuation+_print	;                                ^	DC.B	_punctuation+_print	;                                _	DC.B	_punctuation+_print	;                                `	DC.B	_lower+_hex+_print	;                                a	DC.B	_lower+_hex+_print	;                                b	DC.B	_lower+_hex+_print	;                                c	DC.B	_lower+_hex+_print	;                                d	DC.B	_lower+_hex+_print	;                                e	DC.B	_lower+_hex+_print	;                                f	DC.B	_lower+_print	;                                g	DC.B	_lower+_print	;                                h	DC.B	_lower+_print	;                                i	DC.B	_lower+_print	;                                j	DC.B	_lower+_print	;                                k	DC.B	_lower+_print	;                                l	DC.B	_lower+_print	;                                m	DC.B	_lower+_print	;                                n	DC.B	_lower+_print	;                                o	DC.B	_lower+_print	;                                p	DC.B	_lower+_print	;                                q	DC.B	_lower+_print	;                                r	DC.B	_lower+_print	;                                s	DC.B	_lower+_print	;                                t	DC.B	_lower+_print	;                                u	DC.B	_lower+_print	;                                v	DC.B	_lower+_print	;                                w	DC.B	_lower+_print	;                                x	DC.B	_lower+_print	;                                y	DC.B	_lower+_print	;                                z	DC.B	_punctuation+_print	;                                {	DC.B	_punctuation+_print	;                                |	DC.B	_punctuation+_print	;                                }	DC.B	_punctuation+_print	;                                ~	DC.B	_control	;                                $7F	DC.B	0	;                                $80	DC.B	0	;                                $81	DC.B	0	;                                $82	DC.B	0	;                                $83	DC.B	0	;                                $84	DC.B	0	;                                $85	DC.B	0	;                                $86	DC.B	0	;                                $87	DC.B	0	;                                $88	DC.B	0	;                                $89	DC.B	0	;                                $8A	DC.B	0	;                                $8B	DC.B	0	;                                $8C	DC.B	0	;                                $8D	DC.B	0	;                                $8E	DC.B	0	;                                $8F	DC.B	0	;                                $90	DC.B	0	;                                $91	DC.B	0	;                                $92	DC.B	0	;                                $93	DC.B	0	;                                $94	DC.B	0	;                                $95	DC.B	0	;                                $96	DC.B	0	;                                $97	DC.B	0	;                                $98	DC.B	0	;                                $99	DC.B	0	;                                $9A	DC.B	0	;                                $9B	DC.B	0	;                                $9C	DC.B	0	;                                $9D	DC.B	0	;                                $9E	DC.B	0	;                                $9F	DC.B	0	;                                $A0	DC.B	0	;                                $A1	DC.B	0	;                                $A2	DC.B	0	;                                $A3	DC.B	0	;                                $A4	DC.B	0	;                                $A5	DC.B	0	;                                $A6	DC.B	0	;                                $A7	DC.B	0	;                                $A8	DC.B	0	;                                $A9	DC.B	0	;                                $AA	DC.B	0	;                                $AB	DC.B	0	;                                $AC	DC.B	0	;                                $AD	DC.B	0	;                                $AE	DC.B	0	;                                $AF	DC.B	0	;                                $B0	DC.B	0	;                                $B1	DC.B	0	;                                $B2	DC.B	0	;                                $B3	DC.B	0	;                                $B4	DC.B	0	;                                $B5	DC.B	0	;                                $B6	DC.B	0	;                                $B7	DC.B	0	;                                $B8	DC.B	0	;                                $B9	DC.B	0	;                                $BA	DC.B	0	;                                $BB	DC.B	0	;                                $BC	DC.B	0	;                                $BD	DC.B	0	;                                $BE	DC.B	0	;                                $BF	DC.B	0	;                                $C0	DC.B	0	;                                $C1	DC.B	0	;                                $C2	DC.B	0	;                                $C3	DC.B	0	;                                $C4	DC.B	0	;                                $C5	DC.B	0	;                                $C6	DC.B	0	;                                $C7	DC.B	0	;                                $C8	DC.B	0	;                                $C9	DC.B	0	;                                $CA	DC.B	0	;                                $CB	DC.B	0	;                                $CC	DC.B	0	;                                $CD	DC.B	0	;                                $CE	DC.B	0	;                                $CF	DC.B	0	;                                $D0	DC.B	0	;                                $D1	DC.B	0	;                                $D2	DC.B	0	;                                $D3	DC.B	0	;                                $D4	DC.B	0	;                                $D5	DC.B	0	;                                $D6	DC.B	0	;                                $D7	DC.B	0	;                                $D8	DC.B	0	;                                $D9	DC.B	0	;                                $DA	DC.B	0	;                                $DB	DC.B	0	;                                $DC	DC.B	0	;                                $DD	DC.B	0	;                                $DE	DC.B	0	;                                $DF	DC.B	0	;                                $E0	DC.B	0	;                                $E1	DC.B	0	;                                $E2	DC.B	0	;                                $E3	DC.B	0	;                                $E4	DC.B	0	;                                $E5	DC.B	0	;                                $E6	DC.B	0	;                                $E7	DC.B	0	;                                $E8	DC.B	0	;                                $E9	DC.B	0	;                                $EA	DC.B	0	;                                $EB	DC.B	0	;                                $EC	DC.B	0	;                                $ED	DC.B	0	;                                $EE	DC.B	0	;                                $EF	DC.B	0	;                                $F0	DC.B	0	;                                $F1	DC.B	0	;                                $F2	DC.B	0	;                                $F3	DC.B	0	;                                $F4	DC.B	0	;                                $F5	DC.B	0	;                                $F6	DC.B	0	;                                $F7	DC.B	0	;                                $F8	DC.B	0	;                                $F9	DC.B	0	;                                $FA	DC.B	0	;                                $FB	DC.B	0	;                                $FC	DC.B	0	;                                $FD	DC.B	0	;                                $FE	DC.B	0	;                                $FF		ENDP******************************************************************  __ctype2 - character types array**  This data area defines a second array of of bit masks.  It*  is used to test for character types. ; For example, to*  determine if a character is allowed as an initial character*  in a symbol, and _csym with the array element for the*  character being tested.  If the result is non-zero, the*  character is alphabetic.******************************************************************		EXPORT	__ctype2 __ctype2 PROC	DC.B	0	;                                EOF	DC.B	0	;                                $00	DC.B	0	;                                $01	DC.B	0	;                                $02	DC.B	0	;                                $03	DC.B	0	;                                $04	DC.B	0	;                                $05	DC.B	0	;                                $06	DC.B	0	;                                $07	DC.B	0	;                                $08	DC.B	0	;                                $09	DC.B	0	;                                $0A	DC.B	0	;                                $0B	DC.B	0	;                                $0C	DC.B	0	;                                $0D	DC.B	0	;                                $0E	DC.B	0	;                                $0F	DC.B	0	;                                $10	DC.B	0	;                                $11	DC.B	0	;                                $12	DC.B	0	;                                $13	DC.B	0	;                                $14	DC.B	0	;                                $15	DC.B	0	;                                $16	DC.B	0	;                                $17	DC.B	0	;                                $18	DC.B	0	;                                $19	DC.B	0	;                                $1A	DC.B	0	;                                $1B	DC.B	0	;                                $1C	DC.B	0	;                                $1D	DC.B	0	;                                $1E	DC.B	0	;                                $1F	DC.B	0	;                                ' '	DC.B	0	;                                !	DC.B	0	;                                "	DC.B	0	;                                #	DC.B	0	;                                $	DC.B	0	;                                %	DC.B	0	;                                &	DC.B	0	;                                '	DC.B	0	;                                (	DC.B	0	;                                )	DC.B	0	;                                *	DC.B	0	;                                +	DC.B	0	;                                ,	DC.B	0	;                                -	DC.B	0	;                                .	DC.B	0	;                                /	DC.B	_csym+_octal	;                                0	DC.B	_csym+_octal	;                                1	DC.B	_csym+_octal	;                                2	DC.B	_csym+_octal	;                                3	DC.B	_csym+_octal	;                                4	DC.B	_csym+_octal	;                                5	DC.B	_csym+_octal	;                                6	DC.B	_csym+_octal	;                                7	DC.B	_csym	;                                8	DC.B	_csym	;                                9	DC.B	0	;                                :	DC.B	0	;                                ;	DC.B	0	;                                <	DC.B	0	;                                =	DC.B	0	;                                >	DC.B	0	;                                ?	DC.B	0	;                                @	DC.B	_csym+_csymf	;                                A	DC.B	_csym+_csymf	;                                B	DC.B	_csym+_csymf	;                                C	DC.B	_csym+_csymf	;                                D	DC.B	_csym+_csymf	;                                E	DC.B	_csym+_csymf	;                                F	DC.B	_csym+_csymf	;                                G	DC.B	_csym+_csymf	;                                H	DC.B	_csym+_csymf	;                                I	DC.B	_csym+_csymf	;                                J	DC.B	_csym+_csymf	;                                K	DC.B	_csym+_csymf	;                                L	DC.B	_csym+_csymf	;                                M	DC.B	_csym+_csymf	;                                N	DC.B	_csym+_csymf	;                                O	DC.B	_csym+_csymf	;                                P	DC.B	_csym+_csymf	;                                Q	DC.B	_csym+_csymf	;                                R	DC.B	_csym+_csymf	;                                S	DC.B	_csym+_csymf	;                                T	DC.B	_csym+_csymf	;                                U	DC.B	_csym+_csymf	;                                V	DC.B	_csym+_csymf	;                                W	DC.B	_csym+_csymf	;                                X	DC.B	_csym+_csymf	;                                Y	DC.B	_csym+_csymf	;                                Z	DC.B	0	;                                [	DC.B	0	;                                \	DC.B	0	;                                ]	DC.B	0	;                                ^	DC.B	_csym+_csymf	;                                _	DC.B	0	;                                `	DC.B	_csym+_csymf	;                                a	DC.B	_csym+_csymf	;                                b	DC.B	_csym+_csymf	;                                c	DC.B	_csym+_csymf	;                                d	DC.B	_csym+_csymf	;                                e	DC.B	_csym+_csymf	;                                f	DC.B	_csym+_csymf	;                                g	DC.B	_csym+_csymf	;                                h	DC.B	_csym+_csymf	;                                i	DC.B	_csym+_csymf	;                                j	DC.B	_csym+_csymf	;                                k	DC.B	_csym+_csymf	;                                l	DC.B	_csym+_csymf	;                                m	DC.B	_csym+_csymf	;                                n	DC.B	_csym+_csymf	;                                o	DC.B	_csym+_csymf	;                                p	DC.B	_csym+_csymf	;                                q	DC.B	_csym+_csymf	;                                r	DC.B	_csym+_csymf	;                                s	DC.B	_csym+_csymf	;                                t	DC.B	_csym+_csymf	;                                u	DC.B	_csym+_csymf	;                                v	DC.B	_csym+_csymf	;                                w	DC.B	_csym+_csymf	;                                x	DC.B	_csym+_csymf	;                                y	DC.B	_csym+_csymf	;                                z	DC.B	0	;                                {	DC.B	0	;                                |	DC.B	0	;                                }	DC.B	0	;                                ~	DC.B	0	;                                $7F	DC.B	0	;                                $80	DC.B	0	;                                $81	DC.B	0	;                                $82	DC.B	0	;                                $83	DC.B	0	;                                $84	DC.B	0	;                                $85	DC.B	0	;                                $86	DC.B	0	;                                $87	DC.B	0	;                                $88	DC.B	0	;                                $89	DC.B	0	;                                $8A	DC.B	0	;                                $8B	DC.B	0	;                                $8C	DC.B	0	;                                $8D	DC.B	0	;                                $8E	DC.B	0	;                                $8F	DC.B	0	;                                $90	DC.B	0	;                                $91	DC.B	0	;                                $92	DC.B	0	;                                $93	DC.B	0	;                                $94	DC.B	0	;                                $95	DC.B	0	;                                $96	DC.B	0	;                                $97	DC.B	0	;                                $98	DC.B	0	;                                $99	DC.B	0	;                                $9A	DC.B	0	;                                $9B	DC.B	0	;                                $9C	DC.B	0	;                                $9D	DC.B	0	;                                $9E	DC.B	0	;                                $9F	DC.B	0	;                                $A0	DC.B	0	;                                $A1	DC.B	0	;                                $A2	DC.B	0	;                                $A3	DC.B	0	;                                $A4	DC.B	0	;                                $A5	DC.B	0	;                                $A6	DC.B	0	;                                $A7	DC.B	0	;                                $A8	DC.B	0	;                                $A9	DC.B	0	;                                $AA	DC.B	0	;                                $AB	DC.B	0	;                                $AC	DC.B	0	;                                $AD	DC.B	0	;                                $AE	DC.B	0	;                                $AF	DC.B	0	;                                $B0	DC.B	0	;                                $B1	DC.B	0	;                                $B2	DC.B	0	;                                $B3	DC.B	0	;                                $B4	DC.B	0	;                                $B5	DC.B	0	;                                $B6	DC.B	0	;                                $B7	DC.B	0	;                                $B8	DC.B	0	;                                $B9	DC.B	0	;                                $BA	DC.B	0	;                                $BB	DC.B	0	;                                $BC	DC.B	0	;                                $BD	DC.B	0	;                                $BE	DC.B	0	;                                $BF	DC.B	0	;                                $C0	DC.B	0	;                                $C1	DC.B	0	;                                $C2	DC.B	0	;                                $C3	DC.B	0	;                                $C4	DC.B	0	;                                $C5	DC.B	0	;                                $C6	DC.B	0	;                                $C7	DC.B	0	;                                $C8	DC.B	0	;                                $C9	DC.B	0	;                                $CA	DC.B	0	;                                $CB	DC.B	0	;                                $CC	DC.B	0	;                                $CD	DC.B	0	;                                $CE	DC.B	0	;                                $CF	DC.B	0	;                                $D0	DC.B	0	;                                $D1	DC.B	0	;                                $D2	DC.B	0	;                                $D3	DC.B	0	;                                $D4	DC.B	0	;                                $D5	DC.B	0	;                                $D6	DC.B	0	;                                $D7	DC.B	0	;                                $D8	DC.B	0	;                                $D9	DC.B	0	;                                $DA	DC.B	0	;                                $DB	DC.B	0	;                                $DC	DC.B	0	;                                $DD	DC.B	0	;                                $DE	DC.B	0	;                                $DF	DC.B	0	;                                $E0	DC.B	0	;                                $E1	DC.B	0	;                                $E2	DC.B	0	;                                $E3	DC.B	0	;                                $E4	DC.B	0	;                                $E5	DC.B	0	;                                $E6	DC.B	0	;                                $E7	DC.B	0	;                                $E8	DC.B	0	;                                $E9	DC.B	0	;                                $EA	DC.B	0	;                                $EB	DC.B	0	;                                $EC	DC.B	0	;                                $ED	DC.B	0	;                                $EE	DC.B	0	;                                $EF	DC.B	0	;                                $F0	DC.B	0	;                                $F1	DC.B	0	;                                $F2	DC.B	0	;                                $F3	DC.B	0	;                                $F4	DC.B	0	;                                $F5	DC.B	0	;                                $F6	DC.B	0	;                                $F7	DC.B	0	;                                $F8	DC.B	0	;                                $F9	DC.B	0	;                                $FA	DC.B	0	;                                $FB	DC.B	0	;                                $FC	DC.B	0	;                                $FD	DC.B	0	;                                $FE	DC.B	0	;                                $FF		ENDP******************************************************************  toint - convert a hex digit to a binary value**  Inputs:*        4,S - digit to convert**  Outputs:*        A - converted digit******************************************************************		EXPORT	toint    toint    PROCFALSE    equ   -1                       ;returned for false conditions         lda   4,S                      ;fetch the operand         tax         lda   2,S                      ;remove parm from stack         sta   4,S         pla         sta   1,S         inx                            ;branch if not hex         lda   >__ctype,X         and   #_hex         beq   no         txa                            ;insure char is uppercase         and   #$5F         dec   A         cmp   #'A'                     ;if the character is alpha then         blt   lb1         sbc   #7                       ;  convert the valuelb1      and   #$000F                   ;return ordinal value         rtlno       lda   #FALSE                   ;not hex         rtl		ENDP******************************************************************  tolower - if the input is uppercase, ;convert it to lowercase**  Inputs:*        4,S - digit to convert**  Outputs:*        A - converted character******************************************************************		EXPORT	tolower  tolower  PROC         lda   4,S                      ;fetch the operand         tax         lda   2,S                      ;remove parm from the stack         sta   4,S         pla         sta   1,S         lda   >__ctype+1,X             ;branch if the character is not uppercase         and   #_upper         beq   lb1         txa                            ;convert to lowercase         ora   #$20         rtllb1      txa                            ;return the input character         rtl		ENDP******************************************************************  toupper - if the input is lowercase, ;convert it to uppercase**  Inputs:*        4,S - digit to convert**  Outputs:*        A - converted character******************************************************************		EXPORT	toupper  toupper  PROC         lda   4,S                      ;fetch the operand         tax         lda   2,S                      ;remove parm from the stack         sta   4,S         pla         sta   1,S         lda   >__ctype+1,X             ;branch if the character is not lowercase         and   #_lower         beq   lb1         txa                            ;convert to uppercase         and   #$5F         rtllb1      txa                            ;return the input character         rtl		ENDP		END