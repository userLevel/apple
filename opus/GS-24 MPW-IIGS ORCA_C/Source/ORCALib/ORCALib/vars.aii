			case  on	seg   ''******************************************************************  VARS.ASM**  This module contains the global variables used by C.  When*  using the large memory module, these ;variables are replaced by*  GVARS.ASM, which places the variables in the ~GLOBALS*  segment.******************************************************************;-----------------------------------------------;;   Forward addresses and entries;;-----------------------------------------------	ENTRY	stderr	ENTRY	stdin	ENTRY	stdout;	INCLUDE	'equates.asm'******************************************************************  This file contains constant values defined in the C interfaces*  that are also used in the assembly language portion of the*  libraries.*****************************************************************;;  error numbers;EDOM     equ   1                        ;domain errorERANGE   equ   2                        ;# too large, too small, or illegalENOMEM   equ   3                        ;Not enough memoryENOENT   equ   4                        ;No such file or directoryEIO      equ   5                        ;I/O errorEINVAL   equ   6                        ;Invalid argumentEBADF    equ   7                        ;bad file descriptorEMFILE   equ   8                        ;too many files are openEACCES   equ   9                        ;access bits prevent the operationEEXIST   equ   10                       ;the file existsENOSPC   equ   11                       ;the file is too large;;  masks for the __ctype array;_digit   equ   $01                      ;['0'..'9']_upper   equ   $02                      ;['A'..'Z']_lower   equ   $04                      ;['a'..'z']_control equ   $08                      ;[chr(0)..chr(31),chr(127)]_punctuation equ  $10                   ;[' ','!'..'/',':'..'@','['..'`','{'..'~']_space   equ   $20                      ;[chr(9)..chr(13),' ']_hex     equ   $40                      ;['0'..'9','a'..'f','A'..'F']_print   equ   $80                      ;[' '..'~'];;  masks for the __ctype2 array;_csym    equ   $01                      ;['0'..'9','A'..'Z','a'..'z','_']_csymf   equ   $02                      ;['A'..'Z','a'..'z'.'_']_octal   equ   $04                      ;['0'..'7'];;  signal numbers;SIGABRT  equ   1SIGFPE   equ   2SIGILL   equ   3SIGINT   equ   4SIGSEGV  equ   5SIGTERM  equ   6;;  The FILE record;*                                       ;flags*                                       ;-----_IOFBF   equ   $0001                    ;full buffering_IONBF   equ   $0002                    ;no buffering_IOLBF   equ   $0004                    ;flush when a \n is written_IOREAD  equ   $0008                    ;currently reading_IOWRT   equ   $0010                    ;currently writing_IORW    equ   $0020                    ;read/write enabled_IOMYBUF equ   $0040                    ;buffer was allocated by stdio_IOEOF   equ   $0080                    ;has an EOF been found?_IOERR   equ   $0100                    ;has an error occurred?_IOTEXT  equ   $0200                    ;is this file a text file?_IOTEMPFILE equ  $0400                  ;was this file created by tmpfile()?*                                       ;record structure*                                       ;----------------FILE_next equ  0                        ;disp to next pointer (must stay 0!)FILE_ptr  equ  FILE_next+4              ;next location to write toFILE_base equ  FILE_ptr+4               ;first byte of the bufferFILE_end  equ  FILE_base+4              ;end of the file bufferFILE_size equ  FILE_end+4               ;size of the file bufferFILE_cnt  equ  FILE_size+4              ;# chars that can be read/writen to bufferFILE_pbk  equ  FILE_cnt+4               ;put back characterFILE_flag equ  FILE_pbk+2               ;buffer flagsFILE_file equ  FILE_flag+2              ;GS/OS file IDsizeofFILE equ  FILE_file+2             ;size of the recordBUFSIZ   equ   1024                     ;default file buffer size_LBUFSIZ equ   255                      ;line buffer sizeL_tmpnam equ   9                        ;size of a temp nameTMP_MAX  equ   10000                    ;# of uniq temp names;;  Seek codes for fseek;SEEK_CNT equ   0                        ;seek from start of fileSEEK_CUR equ   1                        ;seek from current positionSEEK_END equ   2                        ;seek from end of file;;  Values for fcntl.h;OPEN_MAX equ   30                       ;files in the file arrayF_DUPFD  equ   1                        ;dup file flag (fcntl)O_RDONLY equ   $0001                    ;file is read onlyO_WRONLY equ   $0002                    ;file is write onlyO_RDWR   equ   $0004                    ;file is read/writeO_NDELAY equ   $0008                    ;not usedO_APPEND equ   $0010                    ;append to file on all writesO_CREAT  equ   $0020                    ;create a new file if neededO_TRUNC  equ   $0040                    ;erase old fileO_EXCL   equ   $0080                    ;don't create a new fileO_BINARY equ   $0100                    ;file is binary;;  Misc.;EOF      equ   -1                       ;end of file characterstdinID  equ   -1                       ;standard in file IDstdoutID equ   -2                       ;standard out file IDstderrID equ   -3                       ;error out file ID		EXPORT	Dummy    Dummy    PROC                          ;(dummy root segment)		ENDP******************************************************************  Global variables used by C******************************************************************		EXPORT	CVars    CVars    PROC		EXPORT	errnoerrno		;		;library error number		DS.B 2		EXPORT	_ownerid_ownerid		;		;user ID (C)		EXPORT	~USER_ID~USER_ID		;		;user ID (Pascal, libraries)		DS.B 2		EXPORT	sys_nerrsys_nerr		;		;# of error messages	DC.W	6		EXPORT	_toolErr_toolErr		;		;last error in a tool call (C)		EXPORT	~TOOLERROR~TOOLERROR		;		;last error in a tool call (Pascal)		DS.B 2		ENDP******************************************************************  ~InitIO - initialize the standad I/O ;files******************************************************************		EXPORT	~InitIO  ~InitIO  PROC         ldx   #24                      ;set up the file recordslb1      lda   stderr+34,X         sta   stderr+8,X         lda   stdin+34,X         sta   stdin+8,X         lda   stdout+34,X         sta   stdout+8,X         dex         dex         bpl   lb1;;       lla   stderr,stderr+4          ;set up the file pointers	;          LDA   #stderr+4         STA   stderr         LDA   #^stderr+4         STA   2+stderr;;       lla   stdin,stdin+4	;          LDA   #stdin+4         STA   stdin         LDA   #^stdin+4         STA   2+stdin;;       lla   stdout,stdout+4	;          LDA   #stdout+4         STA   stdout         LDA   #^stdout+4         STA   2+stdout         rtl		ENDP******************************************************************  stderr - error out file******************************************************************		EXPORT	stderr   stderr   PROC	DC.L	lb1lb1	DC.L	0	;next file	DC.L	0	;next location to write to	DC.L	0	;first byte of buffer	DC.L	0	;end of the file buffer	DC.L	0	;size of the file buffer	DC.L	0	;count	DC.W	EOF	;putback buffer	DC.W	_IONBF+_IOWRT+_IOTEXT	;no buffering; allow writes; text file	DC.W	stderrID	;error out	DC.L	0	;next location to write to	DC.L	0	;first byte of buffer	DC.L	0	;end of the file buffer	DC.L	0	;size of the file buffer	DC.L	0	;count	DC.W	EOF	;putback buffer	DC.W	_IONBF+_IOWRT+_IOTEXT	;no buffering; allow writes; text file	DC.W	stderrID	;error out		ENDP******************************************************************  stdin - standard in file******************************************************************		EXPORT	stdin    stdin    PROC	DC.L	lb1lb1	DC.L	stdout+4	;next file	DC.L	0	;next location to write to	DC.L	0	;first byte of buffer	DC.L	0	;end of the file buffer	DC.L	0	;size of the file buffer	DC.L	0	;count	DC.W	EOF	;putback buffer	DC.W	_IONBF+_IOREAD+_IOTEXT	;no buffering allow reads; text file	DC.W	stdinID	;standard in	DC.L	0	;next location to write to	DC.L	0	;first byte of buffer	DC.L	0	;end of the file buffer	DC.L	0	;size of the file buffer	DC.L	0	;count	DC.W	EOF	;putback buffer	DC.W	_IONBF+_IOREAD+_IOTEXT	;no buffering allow reads; text file	DC.W	stdinID	;standard in		ENDP******************************************************************  stdout - standard out file******************************************************************		EXPORT	stdout   stdout   PROC	DC.L	lb1lb1	DC.L	stderr+4	;next file	DC.L	0	;next location to write to	DC.L	0	;first byte of buffer	DC.L	0	;end of the file buffer	DC.L	0	;size of the file buffer	DC.L	0	;count	DC.W	EOF	;putback buffer	DC.W	_IONBF+_IOWRT+_IOTEXT	;no buffering; allow writes; text file	DC.W	stdoutID	;standard out	DC.L	0	;next location to write to	DC.L	0	;first byte of buffer	DC.L	0	;end of the file buffer	DC.L	0	;size of the file buffer	DC.L	0	;count	DC.W	EOF	;putback buffer	DC.W	_IONBF+_IOWRT+_IOTEXT	;no buffering; allow writes; text file	DC.W	stdoutID	;standard out		ENDP		END